
;; Function main (main, funcdef_no=54, decl_uid=4760, cgraph_uid=54, symbol_order=86)

Removing basic block 30
Removing basic block 29
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
;;
;; Loop 2
;;  header 25, latch 24
;;  depth 1, outer 0
;;  nodes: 25 24 10 20 23 21 22 15 18 19 17 16 14 13 11 12
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 25 }
;; 10 succs { 11 24 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 15 14 }
;; 14 succs { 15 16 }
;; 15 succs { 20 }
;; 16 succs { 18 17 }
;; 17 succs { 18 19 }
;; 18 succs { 20 }
;; 19 succs { 20 }
;; 20 succs { 21 24 }
;; 21 succs { 22 23 }
;; 22 succs { 23 }
;; 23 succs { 24 }
;; 24 succs { 25 }
;; 25 succs { 10 26 }
;; 26 succs { 27 28 }
;; 27 succs { 28 }
;; 28 succs { }
main (int argc, char * * argv)
{
  long unsigned int bnumrun;
  double fpindex;
  double intindex;
  double lx_fpindex;
  double lx_intindex;
  double lx_memindex;
  double bstdev;
  double bmean;
  struct tm * loctime;
  time_t time_and_date;
  int i;
  int D.4954;

  <bb 2> [0.00%]:
  global_min_ticks = 60;
  global_min_seconds = 5;
  global_allstats = 0;
  global_custrun = 0;
  global_align = 8;
  write_to_file = 0;
  lx_memindex = 1.0e+0;
  lx_intindex = 1.0e+0;
  lx_fpindex = 1.0e+0;
  intindex = 1.0e+0;
  fpindex = 1.0e+0;
  mem_array_ents = 0;
  i = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  tests_to_do[i] = 1;
  i = i + 1;

  <bb 4> [0.00%]:
  if (i <= 9)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  set_request_secs ();
  global_numsortstruct.adjust = 0;
  global_numsortstruct.arraysize = 8111;
  global_strsortstruct.adjust = 0;
  global_strsortstruct.arraysize = 8111;
  global_bitopstruct.adjust = 0;
  global_bitopstruct.bitfieldarraysize = 16384;
  global_emfloatstruct.adjust = 0;
  global_emfloatstruct.arraysize = 3000;
  global_fourierstruct.adjust = 0;
  global_assignstruct.adjust = 0;
  global_ideastruct.adjust = 0;
  global_ideastruct.arraysize = 4000;
  global_huffstruct.adjust = 0;
  global_huffstruct.arraysize = 5000;
  global_nnetstruct.adjust = 0;
  global_lustruct.adjust = 0;
  if (argc == 2)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _1 = argv + 8;
  _2 = *_1;
  _3 = atoi (_2);
  testnum = _3;

  <bb 7> [0.00%]:
  output_string ("\nBYTEmark* Native Mode Benchmark ver. 2 (10/95)\n");
  output_string ("Index-split by Andrew D. Balsa (11/97)\n");
  output_string ("Linux/Unix* port by Uwe F. Mayer (12/96,11/97)\n");
  global_allstats.0_4 = global_allstats;
  if (global_allstats.0_4 != 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  output_string ("\n");
  output_string ("============================== ALL STATISTICS ===============================\n");
  time (&time_and_date);
  loctime = localtime (&time_and_date);
  _5 = asctime (loctime);
  sprintf (&buffer, "**Date and time of benchmark run: %s", _5);
  output_string (&buffer);
  sprintf (&buffer, "**Sizeof: char:%u short:%u int:%u long:%u u8:%u u16:%u u32:%u int32:%u\n", 1, 2, 4, 8, 1, 2, 4, 4);
  output_string (&buffer);
  sprintf (&buffer, "**System used for compilation:\n");
  output_string (&buffer);
  sprintf (&buffer, "**Linux elvenado 4.15.0-112-generic #113-Ubuntu SMP Thu Jul 9 23:41:39 UTC 2020 \n");
  output_string (&buffer);
  sprintf (&buffer, "**C compiler: gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04) \n");
  output_string (&buffer);
  sprintf (&buffer, "**libc: libc-2.27.so\n");
  output_string (&buffer);
  sprintf (&buffer, "**Date of compilation: Mon 24 Aug 10:41:27 BST 2020\n");
  output_string (&buffer);
  output_string ("=============================================================================\n");

  <bb 9> [0.00%]:
  output_string ("\nTEST                : Iterations/sec.  : Old Index   : New Index\n");
  output_string ("                    :                  : Pentium 90* : AMD K6/233*\n");
  output_string ("--------------------:------------------:-------------:------------\n");
  i = testnum;
  goto <bb 25>; [0.00%]

  <bb 10> [0.00%]:
  _6 = tests_to_do[i];
  if (_6 != 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 11> [0.00%]:
  _7 = ftestnames[i];
  sprintf (&buffer, "%s    :", _7);
  output_string (&buffer);
  _8 = bench_with_confidence (i, &bmean, &bstdev, &bnumrun);
  if (_8 != 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  output_string ("\n** WARNING: The current test result is NOT 95 % statistically certain.\n");
  output_string ("** WARNING: The variation among the individual results is too large.\n");
  output_string ("                    :");

  <bb 13> [0.00%]:
  bmean.1_9 = bmean;
  _10 = lx_bindex[i];
  _11 = bmean.1_9 / _10;
  bmean.2_12 = bmean;
  _13 = bindex[i];
  _14 = bmean.2_12 / _13;
  bmean.3_15 = bmean;
  sprintf (&buffer, " %15.5g  :  %9.2f  :  %9.2f\n", bmean.3_15, _14, _11);
  output_string (&buffer);
  _16 = i == 4;
  _17 = i == 8;
  _18 = _16 | _17;
  if (_18 != 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [0.00%]:
  if (i == 9)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:
  bmean.4_19 = bmean;
  _20 = bindex[i];
  _21 = bmean.4_19 / _20;
  fpindex = fpindex * _21;
  bmean.5_22 = bmean;
  _23 = lx_bindex[i];
  _24 = bmean.5_22 / _23;
  lx_fpindex = lx_fpindex * _24;
  goto <bb 20>; [0.00%]

  <bb 16> [0.00%]:
  bmean.6_25 = bmean;
  _26 = bindex[i];
  _27 = bmean.6_25 / _26;
  intindex = intindex * _27;
  _28 = i == 0;
  _29 = i == 3;
  _30 = _28 | _29;
  if (_30 != 0)
    goto <bb 18>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 17> [0.00%]:
  i.7_31 = (unsigned int) i;
  _32 = i.7_31 + 4294967290;
  if (_32 <= 1)
    goto <bb 18>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 18> [0.00%]:
  bmean.8_33 = bmean;
  _34 = lx_bindex[i];
  _35 = bmean.8_33 / _34;
  lx_intindex = lx_intindex * _35;
  goto <bb 20>; [0.00%]

  <bb 19> [0.00%]:
  bmean.9_36 = bmean;
  _37 = lx_bindex[i];
  _38 = bmean.9_36 / _37;
  lx_memindex = lx_memindex * _38;

  <bb 20> [0.00%]:
  global_allstats.10_39 = global_allstats;
  if (global_allstats.10_39 != 0)
    goto <bb 21>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 21> [0.00%]:
  bstdev.11_40 = bstdev;
  sprintf (&buffer, "  Absolute standard deviation: %g\n", bstdev.11_40);
  output_string (&buffer);
  bmean.12_41 = bmean;
  if (bmean.12_41 > 1.00000000000000001999189980260288361964776078853415942018e-100)
    goto <bb 22>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 22> [0.00%]:
  bstdev.13_42 = bstdev;
  _43 = bstdev.13_42 * 1.0e+2;
  bmean.14_44 = bmean;
  _45 = _43 / bmean.14_44;
  sprintf (&buffer, "  Relative standard deviation: %g %%\n", _45);
  output_string (&buffer);

  <bb 23> [0.00%]:
  bnumrun.15_46 = bnumrun;
  sprintf (&buffer, "  Number of runs: %lu\n", bnumrun.15_46);
  output_string (&buffer);
  show_stats (i);
  _47 = ftestnames[i];
  sprintf (&buffer, "Done with %s\n\n", _47);
  output_string (&buffer);

  <bb 24> [0.00%]:
  i = i + 1;

  <bb 25> [0.00%]:
  testnum.16_48 = testnum;
  if (i <= testnum.16_48)
    goto <bb 10>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 26> [0.00%]:
  global_custrun.17_49 = global_custrun;
  if (global_custrun.17_49 == 0)
    goto <bb 27>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 27> [0.00%]:
  output_string ("==========================ORIGINAL BYTEMARK RESULTS==========================\n");
  _50 = pow (intindex, 1.428570000000000117523768494720570743083953857421875e-1);
  sprintf (&buffer, "INTEGER INDEX       : %.3f\n", _50);
  output_string (&buffer);
  _51 = pow (fpindex, 3.3333000000000001517008740847813896834850311279296875e-1);
  sprintf (&buffer, "FLOATING-POINT INDEX: %.3f\n", _51);
  output_string (&buffer);
  output_string ("Baseline (MSDOS*)   : Pentium* 90, 256 KB L2-cache, Watcom* compiler 10.0\n");
  output_string ("==============================LINUX DATA BELOW===============================\n");
  global_ofile.18_52 = global_ofile;
  write_to_file.19_53 = write_to_file;
  hardware (write_to_file.19_53, global_ofile.18_52);
  sprintf (&buffer, "C compiler          : gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04) \n");
  output_string (&buffer);
  sprintf (&buffer, "libc                : libc-2.27.so\n");
  output_string (&buffer);
  _54 = pow (lx_memindex, 3.33333333299999978738270556277711875736713409423828125e-1);
  sprintf (&buffer, "MEMORY INDEX        : %.3f\n", _54);
  output_string (&buffer);
  _55 = pow (lx_intindex, 2.5e-1);
  sprintf (&buffer, "INTEGER INDEX       : %.3f\n", _55);
  output_string (&buffer);
  _56 = pow (lx_fpindex, 3.33333333299999978738270556277711875736713409423828125e-1);
  sprintf (&buffer, "FLOATING-POINT INDEX: %.3f\n", _56);
  output_string (&buffer);
  output_string ("Baseline (LINUX)    : AMD K6/233*, 512 KB L2-cache, gcc 2.7.2.3, libc-5.4.38\n");
  output_string ("* Trademarks are property of their respective holder.\n");

  <bb 28> [0.00%]:
  exit (0);

}



;; Function set_request_secs (set_request_secs, funcdef_no=60, decl_uid=4712, cgraph_uid=60, symbol_order=92)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
set_request_secs ()
{
  <bb 2> [0.00%]:
  global_min_seconds.20_1 = global_min_seconds;
  global_numsortstruct.request_secs = global_min_seconds.20_1;
  global_min_seconds.21_2 = global_min_seconds;
  global_strsortstruct.request_secs = global_min_seconds.21_2;
  global_min_seconds.22_3 = global_min_seconds;
  global_bitopstruct.request_secs = global_min_seconds.22_3;
  global_min_seconds.23_4 = global_min_seconds;
  global_emfloatstruct.request_secs = global_min_seconds.23_4;
  global_min_seconds.24_5 = global_min_seconds;
  global_fourierstruct.request_secs = global_min_seconds.24_5;
  global_min_seconds.25_6 = global_min_seconds;
  global_assignstruct.request_secs = global_min_seconds.25_6;
  global_min_seconds.26_7 = global_min_seconds;
  global_ideastruct.request_secs = global_min_seconds.26_7;
  global_min_seconds.27_8 = global_min_seconds;
  global_huffstruct.request_secs = global_min_seconds.27_8;
  global_min_seconds.28_9 = global_min_seconds;
  global_nnetstruct.request_secs = global_min_seconds.28_9;
  global_min_seconds.29_10 = global_min_seconds;
  global_lustruct.request_secs = global_min_seconds.29_10;
  return;

}



;; Function atoi (atoi, funcdef_no=23, decl_uid=2467, cgraph_uid=23, symbol_order=23)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
__attribute__((__gnu_inline__, __pure__, __leaf__, __nothrow__))
atoi (const char * __nptr)
{
  int D.4957;

  <bb 2> [0.00%]:
  _1 = strtol (__nptr, 0B, 10);
  D.4957 = (int) _1;
  return D.4957;

}



;; Function bench_with_confidence (bench_with_confidence, funcdef_no=61, decl_uid=4717, cgraph_uid=61, symbol_order=93)

Merging blocks 5 and 6
Merging blocks 5 and 7
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
bench_with_confidence (int fid, double * mean, double * stdev, long unsigned int * numtries)
{
  int i;
  double c_half_interval;
  double myscores[30];
  int D.4959;

  <bb 2> [0.00%]:
  i = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = funcpointer[fid];
  _1 ();
  _2 = getscore (fid);
  myscores[i] = _2;
  i = i + 1;

  <bb 4> [0.00%]:
  if (i <= 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  *numtries = 5;
  D.4959 = 0;
  myscores = {CLOBBER};
  return D.4959;

}



;; Function getscore (getscore, funcdef_no=63, decl_uid=4725, cgraph_uid=63, symbol_order=95)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;; 2 succs { 13 3 4 5 6 7 8 9 10 11 12 }
;; 3 succs { 14 }
;; 4 succs { 14 }
;; 5 succs { 14 }
;; 6 succs { 14 }
;; 7 succs { 14 }
;; 8 succs { 14 }
;; 9 succs { 14 }
;; 10 succs { 14 }
;; 11 succs { 14 }
;; 12 succs { 14 }
;; 13 succs { 14 }
;; 14 succs { 1 }
getscore (int fid)
{
  double D.4962;

  <bb 2> [0.00%]:
  switch (fid) <default: <L10> [0.00%], case 0: <L0> [0.00%], case 1: <L1> [0.00%], case 2: <L2> [0.00%], case 3: <L3> [0.00%], case 4: <L4> [0.00%], case 5: <L5> [0.00%], case 6: <L6> [0.00%], case 7: <L7> [0.00%], case 8: <L8> [0.00%], case 9: <L9> [0.00%]>

<L0> [0.00%]:
  D.4962 = global_numsortstruct.sortspersec;
  goto <bb 14>; [0.00%]

<L1> [0.00%]:
  D.4962 = global_strsortstruct.sortspersec;
  goto <bb 14>; [0.00%]

<L2> [0.00%]:
  D.4962 = global_bitopstruct.bitopspersec;
  goto <bb 14>; [0.00%]

<L3> [0.00%]:
  D.4962 = global_emfloatstruct.emflops;
  goto <bb 14>; [0.00%]

<L4> [0.00%]:
  D.4962 = global_fourierstruct.fflops;
  goto <bb 14>; [0.00%]

<L5> [0.00%]:
  D.4962 = global_assignstruct.iterspersec;
  goto <bb 14>; [0.00%]

<L6> [0.00%]:
  D.4962 = global_ideastruct.iterspersec;
  goto <bb 14>; [0.00%]

<L7> [0.00%]:
  D.4962 = global_huffstruct.iterspersec;
  goto <bb 14>; [0.00%]

<L8> [0.00%]:
  D.4962 = global_nnetstruct.iterspersec;
  goto <bb 14>; [0.00%]

<L9> [0.00%]:
  D.4962 = global_lustruct.iterspersec;
  goto <bb 14>; [0.00%]

<L10> [0.00%]:
  D.4962 = 0.0;

  <bb 14> [0.00%]:
  return D.4962;

}



;; Function show_stats (show_stats, funcdef_no=65, decl_uid=4729, cgraph_uid=65, symbol_order=97)

Removing basic block 13
Merging blocks 14 and 15
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13
;; 2 succs { 13 3 4 5 6 7 8 9 10 11 12 }
;; 3 succs { 13 }
;; 4 succs { 13 }
;; 5 succs { 13 }
;; 6 succs { 13 }
;; 7 succs { 13 }
;; 8 succs { 13 }
;; 9 succs { 13 }
;; 10 succs { 13 }
;; 11 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 1 }
show_stats (int bid)
{
  char buffer[80];

  <bb 2> [0.00%]:
  switch (bid) <default: <L14> [0.00%], case 0: <L0> [0.00%], case 1: <L1> [0.00%], case 2: <L2> [0.00%], case 3: <L3> [0.00%], case 4: <L4> [0.00%], case 5: <L5> [0.00%], case 6: <L6> [0.00%], case 7: <L7> [0.00%], case 8: <L8> [0.00%], case 9: <L9> [0.00%]>

<L0> [0.00%]:
  _1 = global_numsortstruct.numarrays;
  _2 = (int) _1;
  sprintf (&buffer, "  Number of arrays: %d\n", _2);
  output_string (&buffer);
  _3 = global_numsortstruct.arraysize;
  sprintf (&buffer, "  Array size: %ld\n", _3);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L1> [0.00%]:
  _4 = global_strsortstruct.numarrays;
  _5 = (int) _4;
  sprintf (&buffer, "  Number of arrays: %d\n", _5);
  output_string (&buffer);
  _6 = global_strsortstruct.arraysize;
  sprintf (&buffer, "  Array size: %ld\n", _6);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L2> [0.00%]:
  _7 = global_bitopstruct.bitoparraysize;
  sprintf (&buffer, "  Operations array size: %ld\n", _7);
  output_string (&buffer);
  _8 = global_bitopstruct.bitfieldarraysize;
  sprintf (&buffer, "  Bitfield array size: %ld\n", _8);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L3> [0.00%]:
  _9 = global_emfloatstruct.loops;
  sprintf (&buffer, "  Number of loops: %lu\n", _9);
  output_string (&buffer);
  _10 = global_emfloatstruct.arraysize;
  sprintf (&buffer, "  Array size: %lu\n", _10);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L4> [0.00%]:
  _11 = global_fourierstruct.arraysize;
  sprintf (&buffer, "  Number of coefficients: %lu\n", _11);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L5> [0.00%]:
  _12 = global_assignstruct.numarrays;
  sprintf (&buffer, "  Number of arrays: %lu\n", _12);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L6> [0.00%]:
  _13 = global_ideastruct.arraysize;
  sprintf (&buffer, "  Array size: %lu\n", _13);
  output_string (&buffer);
  _14 = global_ideastruct.loops;
  sprintf (&buffer, " Number of loops: %lu\n", _14);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L7> [0.00%]:
  _15 = global_huffstruct.arraysize;
  sprintf (&buffer, "  Array size: %lu\n", _15);
  output_string (&buffer);
  _16 = global_huffstruct.loops;
  sprintf (&buffer, "  Number of loops: %lu\n", _16);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L8> [0.00%]:
  _17 = global_nnetstruct.loops;
  sprintf (&buffer, "  Number of loops: %lu\n", _17);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L9> [0.00%]:
  _18 = global_lustruct.numarrays;
  sprintf (&buffer, "  Number of arrays: %lu\n", _18);
  output_string (&buffer);

<L14> [0.00%]:
  buffer = {CLOBBER};
  return;

}



;; Function sprintf (<unset-asm-name>, funcdef_no=10, decl_uid=814, cgraph_uid=10, symbol_order=10)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
__attribute__((__artificial__, __gnu_inline__, __always_inline__, __leaf__, __nothrow__))
sprintf (char * restrict __s, const char * restrict __fmt)
{
  int D.4969;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__s, 1);
  D.4969 = __builtin___sprintf_chk (__s, 1, _1, __fmt, __builtin_va_arg_pack ());
  return D.4969;

}



;; Function output_string (output_string, funcdef_no=64, decl_uid=4727, cgraph_uid=64, symbol_order=96)

Removing basic block 4
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
output_string (char * buffer)
{
  <bb 2> [0.00%]:
  printf ("%s", buffer);
  write_to_file.30_1 = write_to_file;
  if (write_to_file.30_1 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  global_ofile.31_2 = global_ofile;
  fprintf (global_ofile.31_2, "%s", buffer);

  <bb 4> [0.00%]:
  return;

}



;; Function printf (<unset-asm-name>, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int D.4974;

  <bb 2> [0.00%]:
  D.4974 = __printf_chk (1, __fmt, __builtin_va_arg_pack ());
  return D.4974;

}



;; Function fprintf (<unset-asm-name>, funcdef_no=14, decl_uid=776, cgraph_uid=14, symbol_order=14)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
__attribute__((__artificial__, __gnu_inline__, __always_inline__))
fprintf (struct FILE * restrict __stream, const char * restrict __fmt)
{
  int D.4976;

  <bb 2> [0.00%]:
  D.4976 = __fprintf_chk (__stream, 1, __fmt, __builtin_va_arg_pack ());
  return D.4976;

}


