
;; Function AllocateMemory (AllocateMemory, funcdef_no=52, decl_uid=3587, cgraph_uid=52, symbol_order=52)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
nbytes = &NONLOCAL
errorcode = &NONLOCAL
global_align = NONLOCAL
global_align.0_1 = global_align
_2 = global_align.0_1
_3 = _2
_3 = &NONLOCAL
_4 = _3
_5 = _4
_5 = nbytes
ESCAPED = _5
returnval_20 = &HEAP(18)
derefaddrtmp(19) = &NONLOCAL
*errorcode = derefaddrtmp(19)
derefaddrtmp(20) = &NULL
*errorcode = derefaddrtmp(20)
true_addr_24 = returnval_20
global_align.1_6 = global_align
mem_array_ents = NONLOCAL
mem_array_ents.7_33 = mem_array_ents
derefaddrtmp(25) = &NONLOCAL
*errorcode = derefaddrtmp(25)
mem_array = NONLOCAL
mem_array = true_addr_24
ESCAPED = true_addr_24
mem_array = true_addr_24
ESCAPED = true_addr_24
_34 = mem_array_ents.7_33
_34 = &NONLOCAL
mem_array_ents = _34
ESCAPED = _34
adj_addr_27 = true_addr_24
adj_addr_27 = &NONLOCAL
adj_addr_26 = adj_addr_12
adj_addr_26 = &NONLOCAL
adj_addr_12 = true_addr_24
adj_addr_12 = adj_addr_26
_7 = global_align.1_6
_8 = adj_addr_12
_8 = _7
adj_addr_31 = adj_addr_12
_9 = global_align.1_6
_9 = &NONLOCAL
_10 = _9
_11 = adj_addr_12
_11 = _10
adj_addr_25 = _7
adj_addr_25 = adj_addr_12
adj_addr_13 = adj_addr_27
adj_addr_13 = adj_addr_12
adj_addr_13 = adj_addr_25
returnval_28 = adj_addr_13
mem_array_ents.7_35 = mem_array_ents
mem_array = true_addr_24
ESCAPED = true_addr_24
mem_array = adj_addr_13
ESCAPED = adj_addr_13
_36 = mem_array_ents.7_35
_36 = &NONLOCAL
mem_array_ents = _36
ESCAPED = _36
derefaddrtmp(42) = &NONLOCAL
*errorcode = derefaddrtmp(42)
_14 = returnval_20
_14 = returnval_28
_14 = returnval_28
_14 = returnval_20
ESCAPED = _14

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"nbytes"[label="nbytes = { 5 }"];
"errorcode"[label="errorcode = { 5 }"];
"global_align.0_1";
"global_align";
"_2";
"_3"[label="_3 = { 5 }"];
"_4";
"_5";
"malloc";
"returnval_20"[label="returnval_20 = { 18 }"];
"HEAP(18)";
"derefaddrtmp(19)"[label="derefaddrtmp(19) = { 5 }"];
"derefaddrtmp(20)"[label="derefaddrtmp(20) = { 1 }"];
"true_addr_24";
"global_align.1_6";
"derefaddrtmp(25)"[label="derefaddrtmp(25) = { 5 }"];
"mem_array";
"_34"[label="_34 = { 5 }"];
"adj_addr_27"[label="adj_addr_27 = { 5 }"];
"adj_addr_12"[label="adj_addr_12 = { 5 }"];
"_7";
"_8";
"adj_addr_31";
"_9"[label="_9 = { 5 }"];
"_10";
"_11";
"adj_addr_25";
"adj_addr_13";
"returnval_28";
"derefaddrtmp(42)"[label="derefaddrtmp(42) = { 5 }"];
"_14";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*nbytes";
"*errorcode";
"*malloc";
"*returnval_20";
"*HEAP(18)";
"*derefaddrtmp(19)";
"*derefaddrtmp(20)";
"*true_addr_24";
"*derefaddrtmp(25)";
"*mem_array";
"*adj_addr_27";
"*adj_addr_12";
"*_8";
"*adj_addr_31";
"*_9";
"*_10";
"*_11";
"*derefaddrtmp(42)";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_5" -> "ESCAPED";
"true_addr_24" -> "ESCAPED";
"_34" -> "ESCAPED";
"adj_addr_13" -> "ESCAPED";
"_34" -> "ESCAPED";
"_14" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"global_align" -> "global_align.0_1";
"NONLOCAL" -> "global_align";
"global_align.0_1" -> "_2";
"_2" -> "_3";
"_3" -> "_4";
"nbytes" -> "_5";
"_4" -> "_5";
"returnval_20" -> "true_addr_24";
"global_align" -> "global_align.1_6";
"NONLOCAL" -> "mem_array";
"true_addr_24" -> "mem_array";
"adj_addr_13" -> "mem_array";
"NONLOCAL" -> "_34";
"_34" -> "_34";
"_34" -> "_34";
"_34" -> "_34";
"_34" -> "_34";
"_34" -> "_34";
"true_addr_24" -> "adj_addr_27";
"true_addr_24" -> "adj_addr_12";
"adj_addr_12" -> "adj_addr_12";
"adj_addr_12" -> "adj_addr_12";
"global_align.1_6" -> "_7";
"adj_addr_12" -> "_8";
"_7" -> "_8";
"adj_addr_12" -> "adj_addr_31";
"global_align.1_6" -> "_9";
"_9" -> "_10";
"adj_addr_12" -> "_11";
"_10" -> "_11";
"adj_addr_12" -> "adj_addr_25";
"_7" -> "adj_addr_25";
"adj_addr_27" -> "adj_addr_13";
"adj_addr_12" -> "adj_addr_13";
"adj_addr_25" -> "adj_addr_13";
"adj_addr_13" -> "returnval_28";
"returnval_20" -> "_14";
"returnval_28" -> "_14";
"derefaddrtmp(19)" -> "*errorcode";
"derefaddrtmp(20)" -> "*errorcode";
"derefaddrtmp(25)" -> "*errorcode";
"derefaddrtmp(42)" -> "*errorcode";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"nbytes" [label="\N\n*nbytes = nbytes\l*nbytes = derefaddrtmp(20)\l"];
"global_align";
"malloc";
"returnval_20";
"HEAP(18)";
"derefaddrtmp(20)";
"mem_array";
"adj_addr_27";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "HEAP(18)";
"nbytes" -> "global_align";
"global_align" -> "ESCAPED";
"global_align" -> "mem_array";
"returnval_20" -> "ESCAPED";
"returnval_20" -> "mem_array";
"returnval_20" -> "adj_addr_27";
"mem_array" -> "ESCAPED";
"adj_addr_27" -> "mem_array";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = global_align\l"];
"STOREDANYTHING";
"INTEGER";
"nbytes" [label="\N\n*nbytes = nbytes\l*nbytes = derefaddrtmp(20)\l"];
"global_align";
"malloc";
"returnval_20";
"HEAP(18)";
"derefaddrtmp(20)";
"mem_array";
"adj_addr_27";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "HEAP(18)";
"nbytes" -> "ESCAPED";
"nbytes" -> "global_align";
"global_align" -> "ESCAPED";
"global_align" -> "HEAP(18)";
"global_align" -> "mem_array";
"returnval_20" -> "ESCAPED";
"returnval_20" -> "mem_array";
"returnval_20" -> "adj_addr_27";
"HEAP(18)" -> "ESCAPED";
"derefaddrtmp(20)" -> "ESCAPED";
"mem_array" -> "ESCAPED";
"adj_addr_27" -> "mem_array";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL HEAP(18) }
NONLOCAL = { ESCAPED NONLOCAL } same as global_align
STOREDANYTHING = { }
INTEGER = { ANYTHING }
nbytes = { NONLOCAL }
errorcode = { NONLOCAL } same as nbytes
global_align.0_1 = { ESCAPED NONLOCAL } same as global_align
global_align = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as global_align
_3 = { ESCAPED NONLOCAL } same as global_align
_4 = { ESCAPED NONLOCAL } same as global_align
_5 = { ESCAPED NONLOCAL } same as global_align
malloc = { }
returnval_20 = { HEAP(18) }
HEAP(18) = { ESCAPED NONLOCAL }
derefaddrtmp(19) = { NONLOCAL } same as nbytes
derefaddrtmp(20) = { NULL }
true_addr_24 = { HEAP(18) } same as returnval_20
global_align.1_6 = { ESCAPED NONLOCAL } same as global_align
mem_array_ents.7_33 = { ESCAPED NONLOCAL } same as global_align
mem_array_ents = { ESCAPED NONLOCAL } same as global_align
derefaddrtmp(25) = { NONLOCAL } same as nbytes
mem_array = { ESCAPED NONLOCAL HEAP(18) }
_34 = { ESCAPED NONLOCAL } same as global_align
adj_addr_27 = { NONLOCAL HEAP(18) }
adj_addr_26 = { NONLOCAL HEAP(18) } same as adj_addr_27
adj_addr_12 = { NONLOCAL HEAP(18) } same as adj_addr_27
_7 = { ESCAPED NONLOCAL } same as global_align
_8 = { ESCAPED NONLOCAL HEAP(18) } same as mem_array
adj_addr_31 = { NONLOCAL HEAP(18) } same as adj_addr_27
_9 = { ESCAPED NONLOCAL } same as global_align
_10 = { ESCAPED NONLOCAL } same as global_align
_11 = { ESCAPED NONLOCAL HEAP(18) } same as mem_array
adj_addr_25 = { ESCAPED NONLOCAL HEAP(18) } same as mem_array
adj_addr_13 = { ESCAPED NONLOCAL HEAP(18) } same as mem_array
returnval_28 = { ESCAPED NONLOCAL HEAP(18) } same as mem_array
mem_array_ents.7_35 = { ESCAPED NONLOCAL } same as global_align
_36 = { ESCAPED NONLOCAL } same as global_align
derefaddrtmp(42) = { NONLOCAL } same as nbytes
_14 = { ESCAPED NONLOCAL HEAP(18) } same as mem_array


Alias information for AllocateMemory

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3869 } (escaped, escaped heap)

Flow-insensitive points-to information

_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.3869 } (escaped, escaped heap)
returnval_20, points-to NULL, points-to vars: { D.3869 } (escaped, escaped heap)
errorcode_21(D), points-to non-local, points-to NULL, points-to vars: { }
returnval_28, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.3869 } (escaped, escaped heap)

AllocateMemory (long unsigned int nbytes, int * errorcode)
{
  long unsigned int adj_addr;
  long unsigned int true_addr;
  farvoid * returnval;
  int global_align.0_1;
  long int _2;
  long int _3;
  long unsigned int _4;
  long unsigned int _5;
  int global_align.1_6;
  long unsigned int _7;
  long unsigned int _8;
  int _9;
  long unsigned int _10;
  long unsigned int _11;
  farvoid * _14;
  int mem_array_ents.7_33;
  int _34;
  int mem_array_ents.7_35;
  int _36;

  <bb 2> [45.45%]:
  global_align.0_1 = global_align;
  _2 = (long int) global_align.0_1;
  _3 = _2 * 2;
  _4 = (long unsigned int) _3;
  _5 = _4 + nbytes_18(D);
  returnval_20 = malloc (_5);
  if (returnval_20 == 0B)
    goto <bb 3>; [30.00%]
  else
    goto <bb 4>; [70.00%]

  <bb 3> [13.64%]:
  *errorcode_21(D) = 1;
  goto <bb 5>; [100.00%]

  <bb 4> [31.82%]:
  *errorcode_21(D) = 0;

  <bb 5> [45.45%]:
  true_addr_24 = (long unsigned int) returnval_20;
  global_align.1_6 = global_align;
  if (global_align.1_6 == 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 6> [22.73%]:
  mem_array_ents.7_33 = mem_array_ents;
  if (mem_array_ents.7_33 > 19)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [11.36%]:
  *errorcode_21(D) = 2;
  goto <bb 18>; [100.00%]

  <bb 8> [11.36%]:
  mem_array[0][mem_array_ents.7_33] = true_addr_24;
  mem_array[1][mem_array_ents.7_33] = true_addr_24;
  _34 = mem_array_ents.7_33 + 1;
  mem_array_ents = _34;
  goto <bb 18>; [100.00%]

  <bb 9> [22.73%]:
  if (global_align.1_6 == 1)
    goto <bb 10>; [34.00%]
  else
    goto <bb 19>; [66.00%]

  <bb 19> [15.00%]:
  goto <bb 12>; [100.00%]

  <bb 10> [7.73%]:
  adj_addr_27 = true_addr_24 + 1;
  goto <bb 15>; [100.00%]

  <bb 11> [85.00%]:
  adj_addr_26 = adj_addr_12 + 1;

  <bb 12> [100.00%]:
  # adj_addr_12 = PHI <true_addr_24(19), adj_addr_26(11)>
  _7 = (long unsigned int) global_align.1_6;
  _8 = adj_addr_12 % _7;
  if (_8 != 0)
    goto <bb 11>; [85.00%]
  else
    goto <bb 13>; [15.00%]

  <bb 13> [15.00%]:
  # adj_addr_31 = PHI <adj_addr_12(12)>
  _9 = global_align.1_6 * 2;
  _10 = (long unsigned int) _9;
  _11 = adj_addr_12 % _10;
  if (_11 == 0)
    goto <bb 14>; [50.00%]
  else
    goto <bb 15>; [50.00%]

  <bb 14> [7.50%]:
  adj_addr_25 = _7 + adj_addr_12;

  <bb 15> [22.73%]:
  # adj_addr_13 = PHI <adj_addr_27(10), adj_addr_12(13), adj_addr_25(14)>
  returnval_28 = (farvoid *) adj_addr_13;
  mem_array_ents.7_35 = mem_array_ents;
  if (mem_array_ents.7_35 > 19)
    goto <bb 17>; [54.00%]
  else
    goto <bb 16>; [46.00%]

  <bb 16> [10.45%]:
  mem_array[0][mem_array_ents.7_35] = true_addr_24;
  mem_array[1][mem_array_ents.7_35] = adj_addr_13;
  _36 = mem_array_ents.7_35 + 1;
  mem_array_ents = _36;
  goto <bb 18>; [100.00%]

  <bb 17> [12.27%]:
  *errorcode_21(D) = 2;

  <bb 18> [45.45%]:
  # _14 = PHI <returnval_20(7), returnval_28(17), returnval_28(16), returnval_20(8)>
  return _14;

}



;; Function FreeMemory (FreeMemory, funcdef_no=53, decl_uid=3590, cgraph_uid=53, symbol_order=53)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
mempointer = &NONLOCAL
errorcode = &NONLOCAL
adj_addr_5 = mempointer
mem_array = NONLOCAL
_13 = mem_array
i_2 = i_12
_14 = mem_array
_16 = mem_array
mem_array = _16
ESCAPED = _16
_18 = mem_array
mem_array = _18
ESCAPED = _18
j_17 = i_12
j_17 = _15
_15 = j_17
_15 = &NONLOCAL
_19 = mem_array_ents.13_21
_19 = &NONLOCAL
mem_array_ents = NONLOCAL
mem_array_ents = _19
ESCAPED = _19
mempointer_7 = _14
derefaddrtmp(24) = &NULL
*errorcode = derefaddrtmp(24)
i_20 = i_12
i_20 = &NONLOCAL
i_12 = &NULL
i_12 = i_20
mem_array_ents.13_21 = mem_array_ents
derefaddrtmp(26) = &NONLOCAL
*errorcode = derefaddrtmp(26)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"mempointer"[label="mempointer = { 5 }"];
"errorcode"[label="errorcode = { 5 }"];
"adj_addr_5";
"_13";
"i_2";
"i_12"[label="i_12 = { 1 5 }"];
"_14";
"_16";
"j_17"[label="j_17 = { 5 }"];
"_19"[label="_19 = { 5 }"];
"mempointer_7";
"derefaddrtmp(24)"[label="derefaddrtmp(24) = { 1 }"];
"derefaddrtmp(26)"[label="derefaddrtmp(26) = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*mempointer";
"*errorcode";
"*adj_addr_5";
"*_13";
"*i_2";
"*i_12";
"*_14";
"*j_17";
"*_15";
"*mempointer_7";
"*derefaddrtmp(24)";
"*i_20";
"*derefaddrtmp(26)";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_16" -> "ESCAPED";
"_16" -> "ESCAPED";
"_19" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"mempointer" -> "adj_addr_5";
"_16" -> "_13";
"i_12" -> "i_2";
"i_12" -> "i_12";
"i_12" -> "i_12";
"_16" -> "_14";
"NONLOCAL" -> "_16";
"_16" -> "_16";
"_16" -> "_16";
"_16" -> "_16";
"i_12" -> "j_17";
"j_17" -> "j_17";
"j_17" -> "j_17";
"NONLOCAL" -> "_19";
"_19" -> "_19";
"_19" -> "_19";
"_19" -> "_19";
"_14" -> "mempointer_7";
"derefaddrtmp(24)" -> "*errorcode";
"derefaddrtmp(26)" -> "*errorcode";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"mempointer" [label="\N\n*mempointer = mempointer\l*mempointer = derefaddrtmp(24)\l"];
"mem_array";
"i_2";
"derefaddrtmp(24)";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"mem_array" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = mem_array\l"];
"STOREDANYTHING";
"INTEGER";
"mempointer" [label="\N\n*mempointer = mempointer\l*mempointer = derefaddrtmp(24)\l"];
"mem_array";
"i_2";
"derefaddrtmp(24)";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"mempointer" -> "ESCAPED";
"mem_array" -> "ESCAPED";
"derefaddrtmp(24)" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as mem_array
STOREDANYTHING = { }
INTEGER = { ANYTHING }
mempointer = { NONLOCAL }
errorcode = { NONLOCAL } same as mempointer
adj_addr_5 = { NONLOCAL } same as mempointer
_13 = { ESCAPED NONLOCAL } same as mem_array
mem_array = { ESCAPED NONLOCAL }
i_2 = { NULL NONLOCAL }
i_12 = { NULL NONLOCAL } same as i_2
_14 = { ESCAPED NONLOCAL } same as mem_array
_16 = { ESCAPED NONLOCAL } same as mem_array
_18 = { ESCAPED NONLOCAL } same as mem_array
j_17 = { NULL NONLOCAL } same as i_2
_15 = { NULL NONLOCAL } same as i_2
_19 = { ESCAPED NONLOCAL } same as mem_array
mem_array_ents.13_21 = { ESCAPED NONLOCAL } same as mem_array
mem_array_ents = { ESCAPED NONLOCAL } same as mem_array
mempointer_7 = { ESCAPED NONLOCAL } same as mem_array
derefaddrtmp(24) = { NULL }
i_20 = { NULL NONLOCAL } same as i_2
derefaddrtmp(26) = { NONLOCAL } same as mempointer


Alias information for FreeMemory

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

mempointer_4(D), points-to non-local, points-to NULL, points-to vars: { }
mempointer_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
errorcode_9(D), points-to non-local, points-to NULL, points-to vars: { }

FreeMemory (farvoid * mempointer, int * errorcode)
{
  int i;
  int j;
  long unsigned int adj_addr;
  long unsigned int _13;
  long unsigned int _14;
  int _15;
  long unsigned int _16;
  long unsigned int _18;
  int _19;
  int mem_array_ents.13_21;

  <bb 2> [14.44%]:
  adj_addr_5 = (long unsigned int) mempointer_4(D);
  goto <bb 9>; [100.00%]

  <bb 3> [92.50%]:
  _13 = mem_array[1][i_12];
  if (adj_addr_5 == _13)
    goto <bb 4>; [7.50%]
  else
    goto <bb 8>; [92.50%]

  <bb 4> [6.94%]:
  # i_2 = PHI <i_12(3)>
  _14 = mem_array[0][i_2];
  goto <bb 6>; [100.00%]

  <bb 5> [39.31%]:
  _16 = mem_array[0][_15];
  mem_array[0][j_17] = _16;
  _18 = mem_array[1][_15];
  mem_array[1][j_17] = _18;

  <bb 6> [46.25%]:
  # j_17 = PHI <i_12(4), _15(5)>
  _15 = j_17 + 1;
  if (_15 < mem_array_ents.13_21)
    goto <bb 5>; [85.00%]
  else
    goto <bb 7>; [15.00%]

  <bb 7> [6.94%]:
  _19 = mem_array_ents.13_21 + -1;
  mem_array_ents = _19;
  mempointer_7 = (farvoid *) _14;
  free (mempointer_7);
  *errorcode_9(D) = 0;
  goto <bb 11>; [100.00%]

  <bb 8> [85.56%]:
  i_20 = i_12 + 1;

  <bb 9> [100.00%]:
  # i_12 = PHI <0(2), i_20(8)>
  mem_array_ents.13_21 = mem_array_ents;
  if (i_12 < mem_array_ents.13_21)
    goto <bb 3>; [92.50%]
  else
    goto <bb 10>; [7.50%]

  <bb 10> [7.50%]:
  *errorcode_9(D) = 3;

  <bb 11> [14.44%]:
  return;

}



;; Function MoveMemory (MoveMemory, funcdef_no=54, decl_uid=3594, cgraph_uid=54, symbol_order=54)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
destination = &NONLOCAL
source = &NONLOCAL
nbytes = &NONLOCAL
CALLUSED(12) = CALLUSED(12) + UNKNOWN
CALLUSED(12) = *CALLUSED(12) + UNKNOWN
CALLUSED(12) = destination
CALLUSED(12) = &NULL
_5 = CALLUSED(12)
_5 = NONLOCAL
doubledereftmp(15) = *source + UNKNOWN
*destination + UNKNOWN = doubledereftmp(15)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"destination"[label="destination = { 5 }"];
"source"[label="source = { 5 }"];
"nbytes"[label="nbytes = { 5 }"];
"__builtin_object_size";
"CALLUSED(12)"[label="CALLUSED(12) = { 1 }"];
"CALLCLOBBERED(13)";
"_5";
"doubledereftmp(15)";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*destination";
"*source";
"*nbytes";
"*__builtin_object_size";
"*CALLUSED(12)";
"*CALLCLOBBERED(13)";
"*_5";
"*doubledereftmp(15)";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"destination" -> "CALLUSED(12)";
"NONLOCAL" -> "_5";
"CALLUSED(12)" -> "_5";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"destination" [label="\N\ndoubledereftmp(15) = *destination + UNKNOWN\l*destination + UNKNOWN = doubledereftmp(15)\l"];
"__builtin_object_size";
"CALLUSED(12)" [label="\N\nCALLUSED(12) = CALLUSED(12) + UNKNOWN\lCALLUSED(12) = *CALLUSED(12) + UNKNOWN\l"];
"CALLCLOBBERED(13)";
"_5";
"doubledereftmp(15)";

  // Edges in the constraint graph:
"NONLOCAL" -> "_5";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(12)";
"STOREDANYTHING" -> "doubledereftmp(15)";
"destination" -> "CALLUSED(12)";
"CALLUSED(12)" -> "_5";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"destination" [label="\N\ndoubledereftmp(15) = *destination + UNKNOWN\l*destination + UNKNOWN = doubledereftmp(15)\l"];
"__builtin_object_size";
"CALLUSED(12)" [label="\N\nCALLUSED(12) = CALLUSED(12) + UNKNOWN\lCALLUSED(12) = *CALLUSED(12) + UNKNOWN\l"];
"CALLCLOBBERED(13)";
"_5";
"doubledereftmp(15)";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "_5";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(12)";
"STOREDANYTHING" -> "doubledereftmp(15)";
"destination" -> "CALLUSED(12)";
"CALLUSED(12)" -> "_5";
"doubledereftmp(15)" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
destination = { NONLOCAL }
source = { NONLOCAL } same as destination
nbytes = { NONLOCAL } same as destination
__builtin_object_size = { }
CALLUSED(12) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(13) = { }
_5 = { NULL ESCAPED NONLOCAL }
doubledereftmp(15) = { ESCAPED NONLOCAL }


Alias information for MoveMemory

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

destination_2(D), points-to non-local, points-to NULL, points-to vars: { }
source_3(D), points-to non-local, points-to NULL, points-to vars: { }

MoveMemory (farvoid * destination, farvoid * source, long unsigned int nbytes)
{
  long unsigned int _5;

  <bb 2> [100.00%]:
  _5 = __builtin_object_size (destination_2(D), 0);
  __builtin_memmove (destination_2(D), source_3(D), nbytes_4(D));
  return;

}



;; Function InitMemArray (InitMemArray, funcdef_no=55, decl_uid=3596, cgraph_uid=55, symbol_order=55)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
mem_array_ents = NONLOCAL
mem_array_ents = &NULL
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"mem_array_ents"[label="mem_array_ents = { 1 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*mem_array_ents";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "mem_array_ents";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"mem_array_ents";

  // Edges in the constraint graph:
"NONLOCAL" -> "mem_array_ents";
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"mem_array_ents";

  // Edges in the constraint graph:
"NONLOCAL" -> "mem_array_ents";
"STOREDANYTHING" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
mem_array_ents = { NULL ESCAPED NONLOCAL }


Alias information for InitMemArray

Aliased symbols


Call clobber information

ESCAPED, points-to NULL, points-to vars: { }

Flow-insensitive points-to information


InitMemArray ()
{
  <bb 2> [100.00%]:
  mem_array_ents = 0;
  return;

}



;; Function AddMemArray (AddMemArray, funcdef_no=56, decl_uid=3599, cgraph_uid=56, symbol_order=56)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
true_addr = &NONLOCAL
adj_addr = &NONLOCAL
mem_array_ents = NONLOCAL
mem_array_ents.7_1 = mem_array_ents
mem_array = NONLOCAL
mem_array = true_addr
ESCAPED = true_addr
mem_array = adj_addr
ESCAPED = adj_addr
_2 = mem_array_ents.7_1
_2 = &NONLOCAL
mem_array_ents = _2
ESCAPED = _2
_3 = &NONLOCAL
_3 = &NULL
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"true_addr"[label="true_addr = { 5 }"];
"adj_addr"[label="adj_addr = { 5 }"];
"mem_array";
"_2"[label="_2 = { 5 }"];
"_3"[label="_3 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*true_addr";
"*adj_addr";
"*mem_array";
"*_3";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"true_addr" -> "ESCAPED";
"adj_addr" -> "ESCAPED";
"_2" -> "ESCAPED";
"_3" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "mem_array";
"true_addr" -> "mem_array";
"adj_addr" -> "mem_array";
"NONLOCAL" -> "_2";
"_2" -> "_2";
"_2" -> "_2";
"_2" -> "_2";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"true_addr";
"mem_array_ents";
"_3";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"true_addr" -> "ESCAPED";
"true_addr" -> "mem_array_ents";
"mem_array_ents" -> "ESCAPED";
"_3" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = mem_array_ents\l"];
"STOREDANYTHING";
"INTEGER";
"true_addr";
"mem_array_ents";
"_3";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"true_addr" -> "ESCAPED";
"true_addr" -> "mem_array_ents";
"mem_array_ents" -> "ESCAPED";
"_3" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as mem_array_ents
STOREDANYTHING = { }
INTEGER = { ANYTHING }
true_addr = { NONLOCAL }
adj_addr = { NONLOCAL } same as true_addr
mem_array_ents.7_1 = { ESCAPED NONLOCAL } same as mem_array_ents
mem_array_ents = { ESCAPED NONLOCAL }
mem_array = { ESCAPED NONLOCAL } same as mem_array_ents
_2 = { ESCAPED NONLOCAL } same as mem_array_ents
_3 = { NULL NONLOCAL }


Alias information for AddMemArray

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information


AddMemArray (long unsigned int true_addr, long unsigned int adj_addr)
{
  int mem_array_ents.7_1;
  int _2;
  int _3;

  <bb 2> [100.00%]:
  mem_array_ents.7_1 = mem_array_ents;
  if (mem_array_ents.7_1 > 19)
    goto <bb 4>; [2.00%]
  else
    goto <bb 3>; [98.00%]

  <bb 3> [98.00%]:
  mem_array[0][mem_array_ents.7_1] = true_addr_6(D);
  mem_array[1][mem_array_ents.7_1] = adj_addr_8(D);
  _2 = mem_array_ents.7_1 + 1;
  mem_array_ents = _2;

  <bb 4> [100.00%]:
  # _3 = PHI <-1(2), 0(3)>
  return _3;

}



;; Function RemoveMemArray (RemoveMemArray, funcdef_no=57, decl_uid=3602, cgraph_uid=57, symbol_order=57)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
adj_addr = &NONLOCAL
true_addr = &NONLOCAL
mem_array = NONLOCAL
_1 = mem_array
i_6 = i_9
_2 = mem_array
*true_addr = _2
_3 = mem_array
mem_array = _3
ESCAPED = _3
_4 = mem_array
mem_array = _4
ESCAPED = _4
j_10 = i_9
j_10 = _5
_5 = j_10
_5 = &NONLOCAL
_7 = mem_array_ents.13_8
_7 = &NONLOCAL
mem_array_ents = NONLOCAL
mem_array_ents = _7
ESCAPED = _7
i_16 = i_9
i_16 = &NONLOCAL
i_9 = &NULL
i_9 = i_16
mem_array_ents.13_8 = mem_array_ents
_11 = &NULL
_11 = &NONLOCAL
ESCAPED = _11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"adj_addr"[label="adj_addr = { 5 }"];
"true_addr"[label="true_addr = { 5 }"];
"_1";
"i_6";
"i_9"[label="i_9 = { 1 5 }"];
"_2";
"_3";
"j_10"[label="j_10 = { 5 }"];
"_7"[label="_7 = { 5 }"];
"_11"[label="_11 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*adj_addr";
"*true_addr";
"*_1";
"*i_6";
"*i_9";
"*_2";
"*j_10";
"*_5";
"*i_16";
"*_11";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_3" -> "ESCAPED";
"_3" -> "ESCAPED";
"_7" -> "ESCAPED";
"_11" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"_3" -> "_1";
"i_9" -> "i_6";
"i_9" -> "i_9";
"i_9" -> "i_9";
"_3" -> "_2";
"NONLOCAL" -> "_3";
"_3" -> "_3";
"_3" -> "_3";
"_3" -> "_3";
"i_9" -> "j_10";
"j_10" -> "j_10";
"j_10" -> "j_10";
"NONLOCAL" -> "_7";
"_7" -> "_7";
"_7" -> "_7";
"_7" -> "_7";
"_2" -> "*true_addr";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"adj_addr" [label="\N\n*adj_addr = mem_array\l"];
"mem_array";
"i_6";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"mem_array" -> "ESCAPED";
"i_6" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = mem_array\l"];
"STOREDANYTHING";
"INTEGER";
"adj_addr" [label="\N\n*adj_addr = mem_array\l"];
"mem_array";
"i_6";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"mem_array" -> "ESCAPED";
"i_6" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as mem_array
STOREDANYTHING = { }
INTEGER = { ANYTHING }
adj_addr = { NONLOCAL }
true_addr = { NONLOCAL } same as adj_addr
_1 = { ESCAPED NONLOCAL } same as mem_array
mem_array = { ESCAPED NONLOCAL }
i_6 = { NULL NONLOCAL }
i_9 = { NULL NONLOCAL } same as i_6
_2 = { ESCAPED NONLOCAL } same as mem_array
_3 = { ESCAPED NONLOCAL } same as mem_array
_4 = { ESCAPED NONLOCAL } same as mem_array
j_10 = { NULL NONLOCAL } same as i_6
_5 = { NULL NONLOCAL } same as i_6
_7 = { ESCAPED NONLOCAL } same as mem_array
mem_array_ents.13_8 = { ESCAPED NONLOCAL } same as mem_array
mem_array_ents = { ESCAPED NONLOCAL } same as mem_array
i_16 = { NULL NONLOCAL } same as i_6
_11 = { NULL NONLOCAL } same as i_6


Alias information for RemoveMemArray

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

true_addr_17(D), points-to non-local, points-to NULL, points-to vars: { }

RemoveMemArray (long unsigned int adj_addr, long unsigned int * true_addr)
{
  int j;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  int _5;
  int _7;
  int mem_array_ents.13_8;
  int _11;

  <bb 2> [14.44%]:
  goto <bb 9>; [100.00%]

  <bb 3> [92.50%]:
  _1 = mem_array[1][i_9];
  if (_1 == adj_addr_15(D))
    goto <bb 4>; [7.50%]
  else
    goto <bb 8>; [92.50%]

  <bb 4> [6.94%]:
  # i_6 = PHI <i_9(3)>
  _2 = mem_array[0][i_6];
  *true_addr_17(D) = _2;
  goto <bb 6>; [100.00%]

  <bb 5> [39.31%]:
  _3 = mem_array[0][_5];
  mem_array[0][j_10] = _3;
  _4 = mem_array[1][_5];
  mem_array[1][j_10] = _4;

  <bb 6> [46.25%]:
  # j_10 = PHI <i_9(4), _5(5)>
  _5 = j_10 + 1;
  if (_5 < mem_array_ents.13_8)
    goto <bb 5>; [85.00%]
  else
    goto <bb 7>; [15.00%]

  <bb 7> [6.94%]:
  _7 = mem_array_ents.13_8 + -1;
  mem_array_ents = _7;
  goto <bb 10>; [100.00%]

  <bb 8> [85.56%]:
  i_16 = i_9 + 1;

  <bb 9> [100.00%]:
  # i_9 = PHI <0(2), i_16(8)>
  mem_array_ents.13_8 = mem_array_ents;
  if (mem_array_ents.13_8 > i_9)
    goto <bb 3>; [92.50%]
  else
    goto <bb 10>; [7.50%]

  <bb 10> [14.44%]:
  # _11 = PHI <0(7), -1(9)>
  return _11;

}



;; Function CreateFile (CreateFile, funcdef_no=58, decl_uid=3609, cgraph_uid=58, symbol_order=58)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
filename = &NONLOCAL
errorcode = &NONLOCAL
ESCAPED = filename
ESCAPED = &STRING
fhandle_5 = NONLOCAL
derefaddrtmp(12) = &NONLOCAL
*errorcode = derefaddrtmp(12)
derefaddrtmp(13) = &NULL
*errorcode = derefaddrtmp(13)
ESCAPED = fhandle_5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"filename"[label="filename = { 5 }"];
"errorcode"[label="errorcode = { 5 }"];
"fopen";
"fhandle_5";
"derefaddrtmp(12)"[label="derefaddrtmp(12) = { 5 }"];
"derefaddrtmp(13)"[label="derefaddrtmp(13) = { 1 }"];
"fclose";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*filename";
"*errorcode";
"*fopen";
"*derefaddrtmp(12)";
"*derefaddrtmp(13)";
"*fclose";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"filename" -> "ESCAPED";
"fhandle_5" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "fhandle_5";
"derefaddrtmp(12)" -> "*errorcode";
"derefaddrtmp(13)" -> "*errorcode";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"filename" [label="\N\n*filename = filename\l*filename = derefaddrtmp(13)\l"];
"fopen";
"fhandle_5";
"derefaddrtmp(13)";
"fclose";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"filename" -> "ESCAPED";
"fhandle_5" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = fhandle_5\l"];
"STOREDANYTHING";
"INTEGER";
"filename" [label="\N\n*filename = filename\l*filename = derefaddrtmp(13)\l"];
"fopen";
"fhandle_5";
"derefaddrtmp(13)";
"fclose";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"filename" -> "ESCAPED";
"fhandle_5" -> "ESCAPED";
"derefaddrtmp(13)" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as fhandle_5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
filename = { NONLOCAL }
errorcode = { NONLOCAL } same as filename
fopen = { }
fhandle_5 = { ESCAPED NONLOCAL }
derefaddrtmp(12) = { NONLOCAL } same as filename
derefaddrtmp(13) = { NULL }
fclose = { }


Alias information for CreateFile

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

filename_3(D), points-to non-local, points-to NULL, points-to vars: { }
fhandle_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
errorcode_6(D), points-to non-local, points-to NULL, points-to vars: { }

CreateFile (char * filename, int * errorcode)
{
  struct FILE * fhandle;

  <bb 2> [100.00%]:
  fhandle_5 = fopen (filename_3(D), "w");
  if (fhandle_5 == 0B)
    goto <bb 3>; [26.74%]
  else
    goto <bb 4>; [73.26%]

  <bb 3> [26.74%]:
  *errorcode_6(D) = 10;
  goto <bb 5>; [100.00%]

  <bb 4> [73.26%]:
  *errorcode_6(D) = 0;

  <bb 5> [100.00%]:
  fclose (fhandle_5);
  return;

}



;; Function bmOpenFile (bmOpenFile, funcdef_no=59, decl_uid=3612, cgraph_uid=59, symbol_order=59)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
fname = &NONLOCAL
errorcode = &NONLOCAL
ESCAPED = fname
ESCAPED = &STRING
fhandle_5 = NONLOCAL
derefaddrtmp(12) = &NONLOCAL
*errorcode = derefaddrtmp(12)
derefaddrtmp(13) = &NULL
*errorcode = derefaddrtmp(13)
ESCAPED = fhandle_5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"fname"[label="fname = { 5 }"];
"errorcode"[label="errorcode = { 5 }"];
"fopen";
"fhandle_5";
"derefaddrtmp(12)"[label="derefaddrtmp(12) = { 5 }"];
"derefaddrtmp(13)"[label="derefaddrtmp(13) = { 1 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*fname";
"*errorcode";
"*fopen";
"*derefaddrtmp(12)";
"*derefaddrtmp(13)";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"fname" -> "ESCAPED";
"fhandle_5" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "fhandle_5";
"derefaddrtmp(12)" -> "*errorcode";
"derefaddrtmp(13)" -> "*errorcode";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"fname" [label="\N\n*fname = fname\l*fname = derefaddrtmp(13)\l"];
"fopen";
"fhandle_5";
"derefaddrtmp(13)";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"fname" -> "ESCAPED";
"fhandle_5" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = fhandle_5\l"];
"STOREDANYTHING";
"INTEGER";
"fname" [label="\N\n*fname = fname\l*fname = derefaddrtmp(13)\l"];
"fopen";
"fhandle_5";
"derefaddrtmp(13)";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"fname" -> "ESCAPED";
"fhandle_5" -> "ESCAPED";
"derefaddrtmp(13)" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as fhandle_5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
fname = { NONLOCAL }
errorcode = { NONLOCAL } same as fname
fopen = { }
fhandle_5 = { ESCAPED NONLOCAL }
derefaddrtmp(12) = { NONLOCAL } same as fname
derefaddrtmp(13) = { NULL }


Alias information for bmOpenFile

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

fname_3(D), points-to non-local, points-to NULL, points-to vars: { }
fhandle_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
errorcode_6(D), points-to non-local, points-to NULL, points-to vars: { }

bmOpenFile (char * fname, int * errorcode)
{
  struct FILE * fhandle;

  <bb 2> [100.00%]:
  fhandle_5 = fopen (fname_3(D), "w+");
  if (fhandle_5 == 0B)
    goto <bb 3>; [26.74%]
  else
    goto <bb 4>; [73.26%]

  <bb 3> [26.74%]:
  *errorcode_6(D) = 13;
  goto <bb 5>; [100.00%]

  <bb 4> [73.26%]:
  *errorcode_6(D) = 0;

  <bb 5> [100.00%]:
  return fhandle_5;

}



;; Function CloseFile (CloseFile, funcdef_no=60, decl_uid=3615, cgraph_uid=60, symbol_order=60)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
fhandle = &NONLOCAL
errorcode = &NONLOCAL
ESCAPED = fhandle
derefaddrtmp(11) = &NULL
*errorcode = derefaddrtmp(11)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"fhandle"[label="fhandle = { 5 }"];
"errorcode"[label="errorcode = { 5 }"];
"fclose";
"derefaddrtmp(11)"[label="derefaddrtmp(11) = { 1 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*fhandle";
"*errorcode";
"*fclose";
"*derefaddrtmp(11)";

  // Edges in the constraint graph:
"fhandle" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
"derefaddrtmp(11)" -> "*errorcode";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"fhandle" [label="\N\n*fhandle = derefaddrtmp(11)\l"];
"fclose";
"derefaddrtmp(11)";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"fhandle" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"fhandle" [label="\N\n*fhandle = derefaddrtmp(11)\l"];
"fclose";
"derefaddrtmp(11)";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"fhandle" -> "ESCAPED";
"derefaddrtmp(11)" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
fhandle = { NONLOCAL }
errorcode = { NONLOCAL } same as fhandle
fclose = { }
derefaddrtmp(11) = { NULL }


Alias information for CloseFile

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

fhandle_2(D), points-to non-local, points-to NULL, points-to vars: { }
errorcode_4(D), points-to non-local, points-to NULL, points-to vars: { }

CloseFile (struct FILE * fhandle, int * errorcode)
{
  <bb 2> [100.00%]:
  fclose (fhandle_2(D));
  *errorcode_4(D) = 0;
  return;

}



;; Function readfile (readfile, funcdef_no=61, decl_uid=3621, cgraph_uid=61, symbol_order=61)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
fhandle = &NONLOCAL
offset = &NONLOCAL
nbytes = &NONLOCAL
buffer = &NONLOCAL
errorcode = &NONLOCAL
derefaddrtmp(13) = &NULL
*errorcode = derefaddrtmp(13)
offset.14_1 = offset
ESCAPED = fhandle
ESCAPED = offset.14_1
ESCAPED = &NULL
_2 = NONLOCAL
derefaddrtmp(17) = &NONLOCAL
*errorcode = derefaddrtmp(17)
nelems_11 = nbytes + UNKNOWN
CALLUSED(20) = CALLUSED(20) + UNKNOWN
CALLUSED(20) = *CALLUSED(20) + UNKNOWN
CALLUSED(20) = buffer
CALLUSED(20) = &NULL
_15 = CALLUSED(20)
_15 = NONLOCAL
callarg(24) = nelems_11
_16 = callarg(24) + UNKNOWN
_16 = &NONLOCAL
ESCAPED = buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = nelems_11
ESCAPED = fhandle
_17 = NONLOCAL
ESCAPED = buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = nelems_11
ESCAPED = fhandle
_18 = NONLOCAL
ESCAPED = buffer
ESCAPED = &NONLOCAL
ESCAPED = nelems_11
ESCAPED = fhandle
_19 = NONLOCAL
_20 = _17
_20 = _18
_20 = _19
derefaddrtmp(33) = &NONLOCAL
*errorcode = derefaddrtmp(33)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"fhandle"[label="fhandle = { 5 }"];
"offset"[label="offset = { 5 }"];
"nbytes"[label="nbytes = { 5 }"];
"buffer"[label="buffer = { 5 }"];
"errorcode"[label="errorcode = { 5 }"];
"derefaddrtmp(13)"[label="derefaddrtmp(13) = { 1 }"];
"offset.14_1";
"fseek";
"_2";
"derefaddrtmp(17)"[label="derefaddrtmp(17) = { 5 }"];
"nelems_11";
"__builtin_object_size";
"CALLUSED(20)"[label="CALLUSED(20) = { 1 }"];
"CALLCLOBBERED(21)";
"_15";
"__builtin_constant_p";
"callarg(24)";
"_16"[label="_16 = { 5 }"];
"__fread_chk";
"_17";
"*__fread_chk";
"_18";
"*fread";
"_19";
"_20";
"derefaddrtmp(33)"[label="derefaddrtmp(33) = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*fhandle";
"*offset";
"*nbytes";
"*buffer";
"*errorcode";
"*derefaddrtmp(13)";
"*offset.14_1";
"*fseek";
"*_2";
"*derefaddrtmp(17)";
"*nelems_11";
"*__builtin_object_size";
"*CALLUSED(20)";
"*CALLCLOBBERED(21)";
"*_15";
"*__builtin_constant_p";
"*callarg(24)";
"*_16";
"*__fread_chk";
"*_17";
"**__fread_chk";
"*_18";
"**fread";
"*_19";
"*_20";
"*derefaddrtmp(33)";

  // Edges in the constraint graph:
"fhandle" -> "ESCAPED";
"buffer" -> "ESCAPED";
"offset.14_1" -> "ESCAPED";
"nelems_11" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"offset" -> "offset.14_1";
"NONLOCAL" -> "_2";
"buffer" -> "CALLUSED(20)";
"NONLOCAL" -> "_15";
"CALLUSED(20)" -> "_15";
"nelems_11" -> "callarg(24)";
"NONLOCAL" -> "_17";
"NONLOCAL" -> "_18";
"NONLOCAL" -> "_19";
"_17" -> "_20";
"_18" -> "_20";
"_19" -> "_20";
"NONLOCAL" -> "*ESCAPED";
"derefaddrtmp(13)" -> "*errorcode";
"derefaddrtmp(17)" -> "*errorcode";
"derefaddrtmp(33)" -> "*errorcode";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"fhandle" [label="\N\nnelems_11 = fhandle + UNKNOWN\l*fhandle = fhandle\l*fhandle = derefaddrtmp(13)\l"];
"derefaddrtmp(13)";
"fseek";
"_2";
"nelems_11" [label="\N\n_16 = nelems_11 + UNKNOWN\l"];
"__builtin_object_size";
"CALLUSED(20)" [label="\N\nCALLUSED(20) = CALLUSED(20) + UNKNOWN\lCALLUSED(20) = *CALLUSED(20) + UNKNOWN\l"];
"CALLCLOBBERED(21)";
"_15";
"__builtin_constant_p";
"_16";
"__fread_chk";
"*__fread_chk";
"*fread";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "nelems_11";
"STOREDANYTHING" -> "CALLUSED(20)";
"STOREDANYTHING" -> "_16";
"fhandle" -> "ESCAPED";
"fhandle" -> "CALLUSED(20)";
"_2" -> "_15";
"nelems_11" -> "ESCAPED";
"CALLUSED(20)" -> "_15";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _2\l"];
"STOREDANYTHING";
"INTEGER";
"fhandle" [label="\N\nnelems_11 = fhandle + UNKNOWN\l*fhandle = fhandle\l*fhandle = derefaddrtmp(13)\l"];
"derefaddrtmp(13)";
"fseek";
"_2";
"nelems_11" [label="\N\n_16 = nelems_11 + UNKNOWN\l"];
"__builtin_object_size";
"CALLUSED(20)" [label="\N\nCALLUSED(20) = CALLUSED(20) + UNKNOWN\lCALLUSED(20) = *CALLUSED(20) + UNKNOWN\l"];
"CALLCLOBBERED(21)";
"_15";
"__builtin_constant_p";
"_16";
"__fread_chk";
"*__fread_chk";
"*fread";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "nelems_11";
"STOREDANYTHING" -> "CALLUSED(20)";
"STOREDANYTHING" -> "_16";
"fhandle" -> "ESCAPED";
"fhandle" -> "CALLUSED(20)";
"derefaddrtmp(13)" -> "ESCAPED";
"_2" -> "ESCAPED";
"_2" -> "CALLUSED(20)";
"_2" -> "_15";
"nelems_11" -> "ESCAPED";
"CALLUSED(20)" -> "_15";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _2
STOREDANYTHING = { }
INTEGER = { ANYTHING }
fhandle = { NONLOCAL }
offset = { NONLOCAL } same as fhandle
nbytes = { NONLOCAL } same as fhandle
buffer = { NONLOCAL } same as fhandle
errorcode = { NONLOCAL } same as fhandle
derefaddrtmp(13) = { NULL }
offset.14_1 = { NONLOCAL } same as fhandle
fseek = { }
_2 = { ESCAPED NONLOCAL }
derefaddrtmp(17) = { NONLOCAL } same as fhandle
nelems_11 = { NONLOCAL }
__builtin_object_size = { }
CALLUSED(20) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(21) = { }
_15 = { NULL ESCAPED NONLOCAL }
__builtin_constant_p = { }
callarg(24) = { NONLOCAL } same as nelems_11
_16 = { NONLOCAL }
__fread_chk = { }
_17 = { ESCAPED NONLOCAL } same as _2
*__fread_chk = { }
_18 = { ESCAPED NONLOCAL } same as _2
*fread = { }
_19 = { ESCAPED NONLOCAL } same as _2
_20 = { ESCAPED NONLOCAL } same as _2
derefaddrtmp(33) = { NONLOCAL } same as fhandle


Alias information for readfile

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

errorcode_5(D), points-to non-local, points-to NULL, points-to vars: { }
fhandle_8(D), points-to non-local, points-to NULL, points-to vars: { }
buffer_12(D), points-to non-local, points-to NULL, points-to vars: { }

readfile (struct FILE * fhandle, long unsigned int offset, long unsigned int nbytes, void * buffer, int * errorcode)
{
  size_t nelems;
  long int offset.14_1;
  int _2;
  long unsigned int _15;
  int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;

  <bb 2> [100.00%]:
  *errorcode_5(D) = 0;
  offset.14_1 = (long int) offset_7(D);
  _2 = fseek (fhandle_8(D), offset.14_1, 0);
  if (_2 == -1)
    goto <bb 3>; [30.50%]
  else
    goto <bb 4>; [69.50%]

  <bb 3> [30.50%]:
  *errorcode_5(D) = 14;
  goto <bb 12>; [100.00%]

  <bb 4> [69.50%]:
  nelems_11 = nbytes_10(D) & 65535;
  _15 = __builtin_object_size (buffer_12(D), 0);
  if (0 != 0)
    goto <bb 5>; [79.76%]
  else
    goto <bb 9>; [20.24%]

  <bb 5> [55.43%]:
  _16 = __builtin_constant_p (nelems_11);
  if (_16 == 0)
    goto <bb 7>; [33.00%]
  else
    goto <bb 6>; [67.00%]

  <bb 6> [37.14%]:
  if (0 != 0)
    goto <bb 8>; [33.00%]
  else
    goto <bb 9>; [67.00%]

  <bb 7> [18.29%]:
  _17 = __fread_chk (buffer_12(D), 18446744073709551615, 1, nelems_11, fhandle_8(D));
  goto <bb 10>; [100.00%]

  <bb 8> [12.26%]:
  _18 = __fread_chk_warn (buffer_12(D), 18446744073709551615, 1, nelems_11, fhandle_8(D));
  goto <bb 10>; [100.00%]

  <bb 9> [38.95%]:
  _19 = __fread_alias (buffer_12(D), 1, nelems_11, fhandle_8(D));

  <bb 10> [69.50%]:
  # _20 = PHI <_17(7), _18(8), _19(9)>
  if (nelems_11 != _20)
    goto <bb 11>; [69.50%]
  else
    goto <bb 12>; [30.50%]

  <bb 11> [48.30%]:
  *errorcode_5(D) = 11;

  <bb 12> [100.00%]:
  return;

}



;; Function writefile (writefile, funcdef_no=62, decl_uid=3627, cgraph_uid=62, symbol_order=62)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
fhandle = &NONLOCAL
offset = &NONLOCAL
nbytes = &NONLOCAL
buffer = &NONLOCAL
errorcode = &NONLOCAL
derefaddrtmp(13) = &NULL
*errorcode = derefaddrtmp(13)
offset.15_1 = offset
ESCAPED = fhandle
ESCAPED = offset.15_1
ESCAPED = &NULL
_2 = NONLOCAL
derefaddrtmp(17) = &NONLOCAL
*errorcode = derefaddrtmp(17)
nelems_11 = nbytes + UNKNOWN
ESCAPED = buffer
ESCAPED = &NONLOCAL
ESCAPED = nelems_11
ESCAPED = fhandle
writecode_14 = NONLOCAL
derefaddrtmp(21) = &NONLOCAL
*errorcode = derefaddrtmp(21)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"fhandle"[label="fhandle = { 5 }"];
"offset"[label="offset = { 5 }"];
"nbytes"[label="nbytes = { 5 }"];
"buffer"[label="buffer = { 5 }"];
"errorcode"[label="errorcode = { 5 }"];
"derefaddrtmp(13)"[label="derefaddrtmp(13) = { 1 }"];
"offset.15_1";
"fseek";
"_2";
"derefaddrtmp(17)"[label="derefaddrtmp(17) = { 5 }"];
"nelems_11";
"fwrite";
"writecode_14";
"derefaddrtmp(21)"[label="derefaddrtmp(21) = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*fhandle";
"*offset";
"*nbytes";
"*buffer";
"*errorcode";
"*derefaddrtmp(13)";
"*offset.15_1";
"*fseek";
"*_2";
"*derefaddrtmp(17)";
"*nelems_11";
"*fwrite";
"*writecode_14";
"*derefaddrtmp(21)";

  // Edges in the constraint graph:
"fhandle" -> "ESCAPED";
"buffer" -> "ESCAPED";
"offset.15_1" -> "ESCAPED";
"nelems_11" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"offset" -> "offset.15_1";
"NONLOCAL" -> "_2";
"NONLOCAL" -> "writecode_14";
"NONLOCAL" -> "*ESCAPED";
"derefaddrtmp(13)" -> "*errorcode";
"derefaddrtmp(17)" -> "*errorcode";
"derefaddrtmp(21)" -> "*errorcode";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"fhandle" [label="\N\nnelems_11 = fhandle + UNKNOWN\l*fhandle = fhandle\l*fhandle = derefaddrtmp(13)\l"];
"derefaddrtmp(13)";
"fseek";
"_2";
"nelems_11";
"fwrite";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "nelems_11";
"fhandle" -> "ESCAPED";
"nelems_11" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _2\l"];
"STOREDANYTHING";
"INTEGER";
"fhandle" [label="\N\nnelems_11 = fhandle + UNKNOWN\l*fhandle = fhandle\l*fhandle = derefaddrtmp(13)\l"];
"derefaddrtmp(13)";
"fseek";
"_2";
"nelems_11";
"fwrite";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "nelems_11";
"fhandle" -> "ESCAPED";
"derefaddrtmp(13)" -> "ESCAPED";
"_2" -> "ESCAPED";
"nelems_11" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _2
STOREDANYTHING = { }
INTEGER = { ANYTHING }
fhandle = { NONLOCAL }
offset = { NONLOCAL } same as fhandle
nbytes = { NONLOCAL } same as fhandle
buffer = { NONLOCAL } same as fhandle
errorcode = { NONLOCAL } same as fhandle
derefaddrtmp(13) = { NULL }
offset.15_1 = { NONLOCAL } same as fhandle
fseek = { }
_2 = { ESCAPED NONLOCAL }
derefaddrtmp(17) = { NONLOCAL } same as fhandle
nelems_11 = { NONLOCAL }
fwrite = { }
writecode_14 = { ESCAPED NONLOCAL } same as _2
derefaddrtmp(21) = { NONLOCAL } same as fhandle


Alias information for writefile

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

errorcode_5(D), points-to non-local, points-to NULL, points-to vars: { }
fhandle_8(D), points-to non-local, points-to NULL, points-to vars: { }
buffer_12(D), points-to non-local, points-to NULL, points-to vars: { }

writefile (struct FILE * fhandle, long unsigned int offset, long unsigned int nbytes, void * buffer, int * errorcode)
{
  size_t writecode;
  size_t nelems;
  long int offset.15_1;
  int _2;

  <bb 2> [100.00%]:
  *errorcode_5(D) = 0;
  offset.15_1 = (long int) offset_7(D);
  _2 = fseek (fhandle_8(D), offset.15_1, 0);
  if (_2 == -1)
    goto <bb 3>; [47.12%]
  else
    goto <bb 4>; [52.88%]

  <bb 3> [47.12%]:
  *errorcode_5(D) = 14;
  goto <bb 6>; [100.00%]

  <bb 4> [52.88%]:
  nelems_11 = nbytes_10(D) & 65535;
  writecode_14 = fwrite (buffer_12(D), 1, nelems_11, fhandle_8(D));
  if (nelems_11 == writecode_14)
    goto <bb 5>; [37.68%]
  else
    goto <bb 6>; [62.32%]

  <bb 5> [19.93%]:
  *errorcode_5(D) = 12;

  <bb 6> [100.00%]:
  return;

}



;; Function ReportError (ReportError, funcdef_no=63, decl_uid=3605, cgraph_uid=63, symbol_order=63)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
errorcontext = &NONLOCAL
errorcode = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = errorcontext
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = errorcode

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"errorcontext"[label="errorcontext = { 5 }"];
"errorcode"[label="errorcode = { 5 }"];
"__printf_chk";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*errorcontext";
"*errorcode";
"*__printf_chk";

  // Edges in the constraint graph:
"errorcontext" -> "ESCAPED";
"errorcode" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"errorcontext";
"__printf_chk";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"errorcontext" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"errorcontext";
"__printf_chk";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"errorcontext" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
errorcontext = { NONLOCAL }
errorcode = { NONLOCAL } same as errorcontext
__printf_chk = { }


Alias information for ReportError

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

errorcontext_2(D), points-to non-local, points-to NULL, points-to vars: { }

ReportError (char * errorcontext, int errorcode)
{
  <bb 2> [100.00%]:
  __printf_chk (1, "ERROR CONDITION\nContext: %s\n", errorcontext_2(D));
  __printf_chk (1, "Code: %d", errorcode_3(D));
  return;

}



;; Function ErrorExit (ErrorExit, funcdef_no=64, decl_uid=3606, cgraph_uid=64, symbol_order=64) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"exit";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*exit";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"exit";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"exit";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
exit = { }


Alias information for ErrorExit

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


ErrorExit ()
{
  <bb 2> [100.00%]:
  exit (1);

}



;; Function StartStopwatch (StartStopwatch, funcdef_no=65, decl_uid=3628, cgraph_uid=65, symbol_order=65)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_1 = NONLOCAL
_4 = _1
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"clock";
"_1";
"_4";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*clock";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_4" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_1";
"_1" -> "_4";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"clock";
"_1";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"_1" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _1\l"];
"STOREDANYTHING";
"INTEGER";
"clock";
"_1";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"_1" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
clock = { }
_1 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _1


Alias information for StartStopwatch

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


StartStopwatch ()
{
  long int _1;
  long unsigned int _4;

  <bb 2> [100.00%]:
  _1 = clock ();
  _4 = (long unsigned int) _1;
  return _4;

}



;; Function StopStopwatch (StopStopwatch, funcdef_no=66, decl_uid=3630, cgraph_uid=66, symbol_order=66)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
startticks = &NONLOCAL
_1 = NONLOCAL
_2 = _1
_6 = _2
_6 = startticks
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"startticks"[label="startticks = { 5 }"];
"clock";
"_1";
"_2";
"_6";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*startticks";
"*clock";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_6" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_1";
"_1" -> "_2";
"startticks" -> "_6";
"_2" -> "_6";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"startticks";
"clock";
"_1";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"startticks" -> "_1";
"_1" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _1\l"];
"STOREDANYTHING";
"INTEGER";
"startticks";
"clock";
"_1";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"startticks" -> "_1";
"_1" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
startticks = { NONLOCAL }
clock = { }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_6 = { ESCAPED NONLOCAL } same as _1


Alias information for StopStopwatch

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


StopStopwatch (long unsigned int startticks)
{
  long int _1;
  long unsigned int _2;
  long unsigned int _6;

  <bb 2> [100.00%]:
  _1 = clock ();
  _2 = (long unsigned int) _1;
  _6 = _2 - startticks_5(D);
  return _6;

}



;; Function TicksToSecs (TicksToSecs, funcdef_no=67, decl_uid=3632, cgraph_uid=67, symbol_order=67)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
tickamount = &NONLOCAL
_2 = tickamount
_2 = &NONLOCAL
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"tickamount"[label="tickamount = { 5 }"];
"_2"[label="_2 = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*tickamount";
"*_2";

  // Edges in the constraint graph:
"_2" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"tickamount" -> "_2";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"tickamount";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"tickamount" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"tickamount";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"tickamount" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
tickamount = { NONLOCAL }
_2 = { NONLOCAL } same as tickamount


Alias information for TicksToSecs

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


TicksToSecs (long unsigned int tickamount)
{
  long unsigned int _2;

  <bb 2> [100.00%]:
  _2 = tickamount_1(D) / 1000000;
  return _2;

}



;; Function TicksToFracSecs (TicksToFracSecs, funcdef_no=68, decl_uid=3634, cgraph_uid=68, symbol_order=68)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
tickamount = &NONLOCAL
_1 = tickamount
_3 = _1
_3 = &NONLOCAL
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"tickamount"[label="tickamount = { 5 }"];
"_1";
"_3"[label="_3 = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*tickamount";
"*_1";
"*_3";

  // Edges in the constraint graph:
"_3" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"tickamount" -> "_1";
"_1" -> "_3";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"tickamount";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"tickamount" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"tickamount";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"tickamount" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
tickamount = { NONLOCAL }
_1 = { NONLOCAL } same as tickamount
_3 = { NONLOCAL } same as tickamount


Alias information for TicksToFracSecs

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


TicksToFracSecs (long unsigned int tickamount)
{
  double _1;
  double _3;

  <bb 2> [100.00%]:
  _1 = (double) tickamount_2(D);
  _3 = _1 / 1.0e+6;
  return _3;

}


