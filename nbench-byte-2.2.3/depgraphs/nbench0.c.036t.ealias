
;; Function sprintf (sprintf, funcdef_no=10, decl_uid=814, cgraph_uid=10, symbol_order=10)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__s = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__fmt = &PARM_NOALIAS(11)
PARM_NOALIAS(11) = &NONLOCAL
CALLUSED(13) = CALLUSED(13) + UNKNOWN
CALLUSED(13) = *CALLUSED(13) + UNKNOWN
CALLUSED(13) = __s
CALLUSED(13) = &NONLOCAL
_1 = CALLUSED(13)
_1 = NONLOCAL
ESCAPED = __s
ESCAPED = &NONLOCAL
ESCAPED = _1
ESCAPED = __fmt
_6 = NONLOCAL
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__s"[label="__s = { 9 }"];
"PARM_NOALIAS(9)"[label="PARM_NOALIAS(9) = { 5 }"];
"__fmt"[label="__fmt = { 11 }"];
"PARM_NOALIAS(11)"[label="PARM_NOALIAS(11) = { 5 }"];
"__builtin_object_size";
"CALLUSED(13)"[label="CALLUSED(13) = { 5 }"];
"CALLCLOBBERED(14)";
"_1";
"__sprintf_chk";
"_6";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*__s";
"*PARM_NOALIAS(9)";
"*__fmt";
"*PARM_NOALIAS(11)";
"*__builtin_object_size";
"*CALLUSED(13)";
"*CALLCLOBBERED(14)";
"*__sprintf_chk";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"__s" -> "ESCAPED";
"__fmt" -> "ESCAPED";
"_1" -> "ESCAPED";
"_6" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"__s" -> "CALLUSED(13)";
"NONLOCAL" -> "_1";
"CALLUSED(13)" -> "_1";
"NONLOCAL" -> "_6";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__s";
"PARM_NOALIAS(9)";
"__fmt";
"PARM_NOALIAS(11)";
"__builtin_object_size";
"CALLUSED(13)" [label="\N\nCALLUSED(13) = CALLUSED(13) + UNKNOWN\lCALLUSED(13) = *CALLUSED(13) + UNKNOWN\l"];
"CALLCLOBBERED(14)";
"_1";
"__sprintf_chk";
"_6";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "PARM_NOALIAS(9)";
"STOREDANYTHING" -> "PARM_NOALIAS(11)";
"STOREDANYTHING" -> "CALLUSED(13)";
"__s" -> "ESCAPED";
"__s" -> "CALLUSED(13)";
"__fmt" -> "ESCAPED";
"CALLUSED(13)" -> "_1";
"_1" -> "ESCAPED";
"_6" -> "ESCAPED";
"_6" -> "_1";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _6\l"];
"STOREDANYTHING";
"INTEGER";
"__s";
"PARM_NOALIAS(9)";
"__fmt";
"PARM_NOALIAS(11)";
"__builtin_object_size";
"CALLUSED(13)" [label="\N\nCALLUSED(13) = CALLUSED(13) + UNKNOWN\lCALLUSED(13) = *CALLUSED(13) + UNKNOWN\l"];
"CALLCLOBBERED(14)";
"_1";
"__sprintf_chk";
"_6";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "PARM_NOALIAS(9)";
"STOREDANYTHING" -> "PARM_NOALIAS(11)";
"STOREDANYTHING" -> "CALLUSED(13)";
"__s" -> "ESCAPED";
"__s" -> "CALLUSED(13)";
"PARM_NOALIAS(9)" -> "ESCAPED";
"PARM_NOALIAS(9)" -> "CALLUSED(13)";
"__fmt" -> "ESCAPED";
"PARM_NOALIAS(11)" -> "ESCAPED";
"CALLUSED(13)" -> "_1";
"_1" -> "ESCAPED";
"_6" -> "ESCAPED";
"_6" -> "PARM_NOALIAS(9)";
"_6" -> "PARM_NOALIAS(11)";
"_6" -> "CALLUSED(13)";
"_6" -> "_1";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) PARM_NOALIAS(11) }
NONLOCAL = { ESCAPED NONLOCAL } same as _6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__s = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__fmt = { PARM_NOALIAS(11) }
PARM_NOALIAS(11) = { ESCAPED NONLOCAL }
__builtin_object_size = { }
CALLUSED(13) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLCLOBBERED(14) = { }
_1 = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
__sprintf_chk = { }
_6 = { ESCAPED NONLOCAL }


Alias information for sprintf

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4988 D.4989 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__s_3(D), points-to NULL, points-to vars: { D.4988 } (nonlocal, escaped, restrict)
__fmt_4(D), points-to NULL, points-to vars: { D.4989 } (nonlocal, escaped, restrict)

__attribute__((__artificial__, __gnu_inline__, __always_inline__, __leaf__, __nothrow__))
sprintf (char * restrict __s, const char * restrict __fmt)
{
  long unsigned int _1;
  int _6;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__s_3(D), 1);
  _6 = __builtin___sprintf_chk (__s_3(D), 1, _1, __fmt_4(D), __builtin_va_arg_pack ());
  return _6;

}



;; Function fprintf (fprintf, funcdef_no=14, decl_uid=776, cgraph_uid=14, symbol_order=14)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__stream = &PARM_NOALIAS.0+32
PARM_NOALIAS.0+32 = &NONLOCAL
PARM_NOALIAS.64+64 = &NONLOCAL
PARM_NOALIAS.128+64 = &NONLOCAL
PARM_NOALIAS.192+64 = &NONLOCAL
PARM_NOALIAS.256+64 = &NONLOCAL
PARM_NOALIAS.320+64 = &NONLOCAL
PARM_NOALIAS.384+64 = &NONLOCAL
PARM_NOALIAS.448+64 = &NONLOCAL
PARM_NOALIAS.512+64 = &NONLOCAL
PARM_NOALIAS.576+64 = &NONLOCAL
PARM_NOALIAS.640+64 = &NONLOCAL
PARM_NOALIAS.704+64 = &NONLOCAL
PARM_NOALIAS.768+64 = &NONLOCAL
PARM_NOALIAS.832+64 = &NONLOCAL
PARM_NOALIAS.896+160 = &NONLOCAL
PARM_NOALIAS.1088+64 = &NONLOCAL
PARM_NOALIAS.1152+64 = &NONLOCAL
PARM_NOALIAS.1216+64 = &NONLOCAL
PARM_NOALIAS.1280+64 = &NONLOCAL
PARM_NOALIAS.1344+64 = &NONLOCAL
PARM_NOALIAS.1408+64 = &NONLOCAL
PARM_NOALIAS.1472+256 = &NONLOCAL
__fmt = &PARM_NOALIAS(32)
PARM_NOALIAS(32) = &NONLOCAL
ESCAPED = __stream
ESCAPED = &NONLOCAL
ESCAPED = __fmt
_5 = NONLOCAL
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__stream"[label="__stream = { 9 }"];
"PARM_NOALIAS.0+32"[label="PARM_NOALIAS.0+32 = { 5 }"];
"PARM_NOALIAS.64+64"[label="PARM_NOALIAS.64+64 = { 5 }"];
"PARM_NOALIAS.128+64"[label="PARM_NOALIAS.128+64 = { 5 }"];
"PARM_NOALIAS.192+64"[label="PARM_NOALIAS.192+64 = { 5 }"];
"PARM_NOALIAS.256+64"[label="PARM_NOALIAS.256+64 = { 5 }"];
"PARM_NOALIAS.320+64"[label="PARM_NOALIAS.320+64 = { 5 }"];
"PARM_NOALIAS.384+64"[label="PARM_NOALIAS.384+64 = { 5 }"];
"PARM_NOALIAS.448+64"[label="PARM_NOALIAS.448+64 = { 5 }"];
"PARM_NOALIAS.512+64"[label="PARM_NOALIAS.512+64 = { 5 }"];
"PARM_NOALIAS.576+64"[label="PARM_NOALIAS.576+64 = { 5 }"];
"PARM_NOALIAS.640+64"[label="PARM_NOALIAS.640+64 = { 5 }"];
"PARM_NOALIAS.704+64"[label="PARM_NOALIAS.704+64 = { 5 }"];
"PARM_NOALIAS.768+64"[label="PARM_NOALIAS.768+64 = { 5 }"];
"PARM_NOALIAS.832+64"[label="PARM_NOALIAS.832+64 = { 5 }"];
"PARM_NOALIAS.896+160"[label="PARM_NOALIAS.896+160 = { 5 }"];
"PARM_NOALIAS.1088+64"[label="PARM_NOALIAS.1088+64 = { 5 }"];
"PARM_NOALIAS.1152+64"[label="PARM_NOALIAS.1152+64 = { 5 }"];
"PARM_NOALIAS.1216+64"[label="PARM_NOALIAS.1216+64 = { 5 }"];
"PARM_NOALIAS.1280+64"[label="PARM_NOALIAS.1280+64 = { 5 }"];
"PARM_NOALIAS.1344+64"[label="PARM_NOALIAS.1344+64 = { 5 }"];
"PARM_NOALIAS.1408+64"[label="PARM_NOALIAS.1408+64 = { 5 }"];
"PARM_NOALIAS.1472+256"[label="PARM_NOALIAS.1472+256 = { 5 }"];
"__fmt"[label="__fmt = { 32 }"];
"PARM_NOALIAS(32)"[label="PARM_NOALIAS(32) = { 5 }"];
"__fprintf_chk";
"_5";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*__stream";
"*PARM_NOALIAS.0+32";
"*PARM_NOALIAS.64+64";
"*PARM_NOALIAS.128+64";
"*PARM_NOALIAS.192+64";
"*PARM_NOALIAS.256+64";
"*PARM_NOALIAS.320+64";
"*PARM_NOALIAS.384+64";
"*PARM_NOALIAS.448+64";
"*PARM_NOALIAS.512+64";
"*PARM_NOALIAS.576+64";
"*PARM_NOALIAS.640+64";
"*PARM_NOALIAS.704+64";
"*PARM_NOALIAS.768+64";
"*PARM_NOALIAS.832+64";
"*PARM_NOALIAS.896+160";
"*PARM_NOALIAS.1088+64";
"*PARM_NOALIAS.1152+64";
"*PARM_NOALIAS.1216+64";
"*PARM_NOALIAS.1280+64";
"*PARM_NOALIAS.1344+64";
"*PARM_NOALIAS.1408+64";
"*PARM_NOALIAS.1472+256";
"*__fmt";
"*PARM_NOALIAS(32)";
"*__fprintf_chk";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"__stream" -> "ESCAPED";
"__fmt" -> "ESCAPED";
"_5" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_5";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__stream";
"PARM_NOALIAS.0+32";
"PARM_NOALIAS.64+64";
"PARM_NOALIAS.128+64";
"PARM_NOALIAS.192+64";
"PARM_NOALIAS.256+64";
"PARM_NOALIAS.320+64";
"PARM_NOALIAS.384+64";
"PARM_NOALIAS.448+64";
"PARM_NOALIAS.512+64";
"PARM_NOALIAS.576+64";
"PARM_NOALIAS.640+64";
"PARM_NOALIAS.704+64";
"PARM_NOALIAS.768+64";
"PARM_NOALIAS.832+64";
"PARM_NOALIAS.896+160";
"PARM_NOALIAS.1088+64";
"PARM_NOALIAS.1152+64";
"PARM_NOALIAS.1216+64";
"PARM_NOALIAS.1280+64";
"PARM_NOALIAS.1344+64";
"PARM_NOALIAS.1408+64";
"PARM_NOALIAS.1472+256";
"__fmt";
"PARM_NOALIAS(32)";
"__fprintf_chk";
"_5";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "PARM_NOALIAS.0+32";
"STOREDANYTHING" -> "PARM_NOALIAS.64+64";
"STOREDANYTHING" -> "PARM_NOALIAS.128+64";
"STOREDANYTHING" -> "PARM_NOALIAS.192+64";
"STOREDANYTHING" -> "PARM_NOALIAS.256+64";
"STOREDANYTHING" -> "PARM_NOALIAS.320+64";
"STOREDANYTHING" -> "PARM_NOALIAS.384+64";
"STOREDANYTHING" -> "PARM_NOALIAS.448+64";
"STOREDANYTHING" -> "PARM_NOALIAS.512+64";
"STOREDANYTHING" -> "PARM_NOALIAS.576+64";
"STOREDANYTHING" -> "PARM_NOALIAS.640+64";
"STOREDANYTHING" -> "PARM_NOALIAS.704+64";
"STOREDANYTHING" -> "PARM_NOALIAS.768+64";
"STOREDANYTHING" -> "PARM_NOALIAS.832+64";
"STOREDANYTHING" -> "PARM_NOALIAS.896+160";
"STOREDANYTHING" -> "PARM_NOALIAS.1088+64";
"STOREDANYTHING" -> "PARM_NOALIAS.1152+64";
"STOREDANYTHING" -> "PARM_NOALIAS.1216+64";
"STOREDANYTHING" -> "PARM_NOALIAS.1280+64";
"STOREDANYTHING" -> "PARM_NOALIAS.1344+64";
"STOREDANYTHING" -> "PARM_NOALIAS.1408+64";
"STOREDANYTHING" -> "PARM_NOALIAS.1472+256";
"STOREDANYTHING" -> "PARM_NOALIAS(32)";
"__stream" -> "ESCAPED";
"__fmt" -> "ESCAPED";
"_5" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _5\l"];
"STOREDANYTHING";
"INTEGER";
"__stream";
"PARM_NOALIAS.0+32";
"PARM_NOALIAS.64+64";
"PARM_NOALIAS.128+64";
"PARM_NOALIAS.192+64";
"PARM_NOALIAS.256+64";
"PARM_NOALIAS.320+64";
"PARM_NOALIAS.384+64";
"PARM_NOALIAS.448+64";
"PARM_NOALIAS.512+64";
"PARM_NOALIAS.576+64";
"PARM_NOALIAS.640+64";
"PARM_NOALIAS.704+64";
"PARM_NOALIAS.768+64";
"PARM_NOALIAS.832+64";
"PARM_NOALIAS.896+160";
"PARM_NOALIAS.1088+64";
"PARM_NOALIAS.1152+64";
"PARM_NOALIAS.1216+64";
"PARM_NOALIAS.1280+64";
"PARM_NOALIAS.1344+64";
"PARM_NOALIAS.1408+64";
"PARM_NOALIAS.1472+256";
"__fmt";
"PARM_NOALIAS(32)";
"__fprintf_chk";
"_5";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "PARM_NOALIAS.0+32";
"STOREDANYTHING" -> "PARM_NOALIAS.64+64";
"STOREDANYTHING" -> "PARM_NOALIAS.128+64";
"STOREDANYTHING" -> "PARM_NOALIAS.192+64";
"STOREDANYTHING" -> "PARM_NOALIAS.256+64";
"STOREDANYTHING" -> "PARM_NOALIAS.320+64";
"STOREDANYTHING" -> "PARM_NOALIAS.384+64";
"STOREDANYTHING" -> "PARM_NOALIAS.448+64";
"STOREDANYTHING" -> "PARM_NOALIAS.512+64";
"STOREDANYTHING" -> "PARM_NOALIAS.576+64";
"STOREDANYTHING" -> "PARM_NOALIAS.640+64";
"STOREDANYTHING" -> "PARM_NOALIAS.704+64";
"STOREDANYTHING" -> "PARM_NOALIAS.768+64";
"STOREDANYTHING" -> "PARM_NOALIAS.832+64";
"STOREDANYTHING" -> "PARM_NOALIAS.896+160";
"STOREDANYTHING" -> "PARM_NOALIAS.1088+64";
"STOREDANYTHING" -> "PARM_NOALIAS.1152+64";
"STOREDANYTHING" -> "PARM_NOALIAS.1216+64";
"STOREDANYTHING" -> "PARM_NOALIAS.1280+64";
"STOREDANYTHING" -> "PARM_NOALIAS.1344+64";
"STOREDANYTHING" -> "PARM_NOALIAS.1408+64";
"STOREDANYTHING" -> "PARM_NOALIAS.1472+256";
"STOREDANYTHING" -> "PARM_NOALIAS(32)";
"__stream" -> "ESCAPED";
"PARM_NOALIAS.0+32" -> "ESCAPED";
"PARM_NOALIAS.64+64" -> "ESCAPED";
"PARM_NOALIAS.128+64" -> "ESCAPED";
"PARM_NOALIAS.192+64" -> "ESCAPED";
"PARM_NOALIAS.256+64" -> "ESCAPED";
"PARM_NOALIAS.320+64" -> "ESCAPED";
"PARM_NOALIAS.384+64" -> "ESCAPED";
"PARM_NOALIAS.448+64" -> "ESCAPED";
"PARM_NOALIAS.512+64" -> "ESCAPED";
"PARM_NOALIAS.576+64" -> "ESCAPED";
"PARM_NOALIAS.640+64" -> "ESCAPED";
"PARM_NOALIAS.704+64" -> "ESCAPED";
"PARM_NOALIAS.768+64" -> "ESCAPED";
"PARM_NOALIAS.832+64" -> "ESCAPED";
"PARM_NOALIAS.896+160" -> "ESCAPED";
"PARM_NOALIAS.1088+64" -> "ESCAPED";
"PARM_NOALIAS.1152+64" -> "ESCAPED";
"PARM_NOALIAS.1216+64" -> "ESCAPED";
"PARM_NOALIAS.1280+64" -> "ESCAPED";
"PARM_NOALIAS.1344+64" -> "ESCAPED";
"PARM_NOALIAS.1408+64" -> "ESCAPED";
"PARM_NOALIAS.1472+256" -> "ESCAPED";
"__fmt" -> "ESCAPED";
"PARM_NOALIAS(32)" -> "ESCAPED";
"_5" -> "ESCAPED";
"_5" -> "PARM_NOALIAS.0+32";
"_5" -> "PARM_NOALIAS.64+64";
"_5" -> "PARM_NOALIAS.128+64";
"_5" -> "PARM_NOALIAS.192+64";
"_5" -> "PARM_NOALIAS.256+64";
"_5" -> "PARM_NOALIAS.320+64";
"_5" -> "PARM_NOALIAS.384+64";
"_5" -> "PARM_NOALIAS.448+64";
"_5" -> "PARM_NOALIAS.512+64";
"_5" -> "PARM_NOALIAS.576+64";
"_5" -> "PARM_NOALIAS.640+64";
"_5" -> "PARM_NOALIAS.704+64";
"_5" -> "PARM_NOALIAS.768+64";
"_5" -> "PARM_NOALIAS.832+64";
"_5" -> "PARM_NOALIAS.896+160";
"_5" -> "PARM_NOALIAS.1088+64";
"_5" -> "PARM_NOALIAS.1152+64";
"_5" -> "PARM_NOALIAS.1216+64";
"_5" -> "PARM_NOALIAS.1280+64";
"_5" -> "PARM_NOALIAS.1344+64";
"_5" -> "PARM_NOALIAS.1408+64";
"_5" -> "PARM_NOALIAS.1472+256";
"_5" -> "PARM_NOALIAS(32)";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS.0+32 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+64 PARM_NOALIAS.576+64 PARM_NOALIAS.640+64 PARM_NOALIAS.704+64 PARM_NOALIAS.768+64 PARM_NOALIAS.832+64 PARM_NOALIAS.896+160 PARM_NOALIAS.1088+64 PARM_NOALIAS.1152+64 PARM_NOALIAS.1216+64 PARM_NOALIAS.1280+64 PARM_NOALIAS.1344+64 PARM_NOALIAS.1408+64 PARM_NOALIAS.1472+256 PARM_NOALIAS(32) }
NONLOCAL = { ESCAPED NONLOCAL } same as _5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__stream = { PARM_NOALIAS.0+32 }
PARM_NOALIAS.0+32 = { ESCAPED NONLOCAL }
PARM_NOALIAS.64+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.128+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.192+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.256+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.320+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.384+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.448+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.512+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.576+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.640+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.704+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.768+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.832+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.896+160 = { ESCAPED NONLOCAL }
PARM_NOALIAS.1088+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.1152+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.1216+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.1280+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.1344+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.1408+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.1472+256 = { ESCAPED NONLOCAL }
__fmt = { PARM_NOALIAS(32) }
PARM_NOALIAS(32) = { ESCAPED NONLOCAL }
__fprintf_chk = { }
_5 = { ESCAPED NONLOCAL }


Alias information for fprintf

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4991 D.4992 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__stream_2(D), points-to NULL, points-to vars: { D.4991 } (nonlocal, escaped, restrict)
__fmt_3(D), points-to NULL, points-to vars: { D.4992 } (nonlocal, escaped, restrict)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
fprintf (struct FILE * restrict __stream, const char * restrict __fmt)
{
  int _5;

  <bb 2> [0.00%]:
  _5 = __fprintf_chk (__stream_2(D), 1, __fmt_3(D), __builtin_va_arg_pack ());
  return _5;

}



;; Function printf (printf, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__fmt = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = __fmt
_4 = NONLOCAL
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__fmt"[label="__fmt = { 9 }"];
"PARM_NOALIAS(9)"[label="PARM_NOALIAS(9) = { 5 }"];
"__printf_chk";
"_4";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*__fmt";
"*PARM_NOALIAS(9)";
"*__printf_chk";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"__fmt" -> "ESCAPED";
"_4" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_4";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__fmt";
"PARM_NOALIAS(9)";
"__printf_chk";
"_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "PARM_NOALIAS(9)";
"__fmt" -> "ESCAPED";
"_4" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _4\l"];
"STOREDANYTHING";
"INTEGER";
"__fmt";
"PARM_NOALIAS(9)";
"__printf_chk";
"_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "PARM_NOALIAS(9)";
"__fmt" -> "ESCAPED";
"PARM_NOALIAS(9)" -> "ESCAPED";
"_4" -> "ESCAPED";
"_4" -> "PARM_NOALIAS(9)";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__fmt = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__printf_chk = { }
_4 = { ESCAPED NONLOCAL }


Alias information for printf

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4994 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__fmt_2(D), points-to NULL, points-to vars: { D.4994 } (nonlocal, escaped, restrict)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> [0.00%]:
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function atoi (atoi, funcdef_no=23, decl_uid=2467, cgraph_uid=23, symbol_order=23)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__nptr = &NONLOCAL
ESCAPED = __nptr
ESCAPED = &NULL
ESCAPED = &NONLOCAL
_1 = NONLOCAL
_5 = _1
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__nptr"[label="__nptr = { 5 }"];
"strtol";
"_1";
"_5";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*__nptr";
"*strtol";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"__nptr" -> "ESCAPED";
"_5" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_1";
"_1" -> "_5";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__nptr";
"strtol";
"_1";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"__nptr" -> "ESCAPED";
"_1" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _1\l"];
"STOREDANYTHING";
"INTEGER";
"__nptr";
"strtol";
"_1";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"__nptr" -> "ESCAPED";
"_1" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__nptr = { NONLOCAL }
strtol = { }
_1 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _1


Alias information for atoi

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

__nptr_3(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((__gnu_inline__, __pure__, __leaf__, __nothrow__))
atoi (const char * __nptr)
{
  long int _1;
  int _5;

  <bb 2> [0.00%]:
  _1 = strtol (__nptr_3(D), 0B, 10);
  _5 = (int) _1;
  return _5;

}



;; Function set_request_secs (set_request_secs, funcdef_no=60, decl_uid=4712, cgraph_uid=60, symbol_order=92)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
global_min_seconds = NONLOCAL
global_min_seconds.20_1 = global_min_seconds
global_numsortstruct.0+32 = NONLOCAL
global_numsortstruct.64+144 = NONLOCAL
global_numsortstruct.256+64 = NONLOCAL
global_numsortstruct.64+144 = global_min_seconds.20_1
ESCAPED = global_min_seconds.20_1
global_min_seconds.21_2 = global_min_seconds
global_strsortstruct.0+32 = NONLOCAL
global_strsortstruct.64+144 = NONLOCAL
global_strsortstruct.256+64 = NONLOCAL
global_strsortstruct.64+144 = global_min_seconds.21_2
ESCAPED = global_min_seconds.21_2
global_min_seconds.22_3 = global_min_seconds
global_bitopstruct.0+32 = NONLOCAL
global_bitopstruct.64+256 = NONLOCAL
global_bitopstruct.64+256 = global_min_seconds.22_3
ESCAPED = global_min_seconds.22_3
global_min_seconds.23_4 = global_min_seconds
global_emfloatstruct.0+32 = NONLOCAL
global_emfloatstruct.64+256 = NONLOCAL
global_emfloatstruct.64+256 = global_min_seconds.23_4
ESCAPED = global_min_seconds.23_4
global_min_seconds.24_5 = global_min_seconds
global_fourierstruct.0+32 = NONLOCAL
global_fourierstruct.64+192 = NONLOCAL
global_fourierstruct.64+192 = global_min_seconds.24_5
ESCAPED = global_min_seconds.24_5
global_min_seconds.25_6 = global_min_seconds
global_assignstruct.0+32 = NONLOCAL
global_assignstruct.64+192 = NONLOCAL
global_assignstruct.64+192 = global_min_seconds.25_6
ESCAPED = global_min_seconds.25_6
global_min_seconds.26_7 = global_min_seconds
global_ideastruct.0+32 = NONLOCAL
global_ideastruct.64+256 = NONLOCAL
global_ideastruct.64+256 = global_min_seconds.26_7
ESCAPED = global_min_seconds.26_7
global_min_seconds.27_8 = global_min_seconds
global_huffstruct.0+32 = NONLOCAL
global_huffstruct.64+256 = NONLOCAL
global_huffstruct.64+256 = global_min_seconds.27_8
ESCAPED = global_min_seconds.27_8
global_min_seconds.28_9 = global_min_seconds
global_nnetstruct.0+32 = NONLOCAL
global_nnetstruct.64+192 = NONLOCAL
global_nnetstruct.64+192 = global_min_seconds.28_9
ESCAPED = global_min_seconds.28_9
global_min_seconds.29_10 = global_min_seconds
global_lustruct.0+32 = NONLOCAL
global_lustruct.64+192 = NONLOCAL
global_lustruct.64+192 = global_min_seconds.29_10
ESCAPED = global_min_seconds.29_10

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"global_min_seconds.20_1";
"global_min_seconds";
"global_numsortstruct.0+32";
"global_numsortstruct.64+144";
"global_numsortstruct.256+64";
"global_min_seconds.21_2";
"global_strsortstruct.0+32";
"global_strsortstruct.64+144";
"global_strsortstruct.256+64";
"global_min_seconds.22_3";
"global_bitopstruct.0+32";
"global_bitopstruct.64+256";
"global_min_seconds.23_4";
"global_emfloatstruct.0+32";
"global_emfloatstruct.64+256";
"global_min_seconds.24_5";
"global_fourierstruct.0+32";
"global_fourierstruct.64+192";
"global_min_seconds.25_6";
"global_assignstruct.0+32";
"global_assignstruct.64+192";
"global_min_seconds.26_7";
"global_ideastruct.0+32";
"global_ideastruct.64+256";
"global_min_seconds.27_8";
"global_huffstruct.0+32";
"global_huffstruct.64+256";
"global_min_seconds.28_9";
"global_nnetstruct.0+32";
"global_nnetstruct.64+192";
"global_min_seconds.29_10";
"global_lustruct.0+32";
"global_lustruct.64+192";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*global_numsortstruct.0+32";
"*global_numsortstruct.64+144";
"*global_numsortstruct.256+64";
"*global_strsortstruct.0+32";
"*global_strsortstruct.64+144";
"*global_strsortstruct.256+64";
"*global_bitopstruct.0+32";
"*global_bitopstruct.64+256";
"*global_emfloatstruct.0+32";
"*global_emfloatstruct.64+256";
"*global_fourierstruct.0+32";
"*global_fourierstruct.64+192";
"*global_assignstruct.0+32";
"*global_assignstruct.64+192";
"*global_ideastruct.0+32";
"*global_ideastruct.64+256";
"*global_huffstruct.0+32";
"*global_huffstruct.64+256";
"*global_nnetstruct.0+32";
"*global_nnetstruct.64+192";
"*global_lustruct.0+32";
"*global_lustruct.64+192";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"global_min_seconds.20_1" -> "ESCAPED";
"global_min_seconds.21_2" -> "ESCAPED";
"global_min_seconds.22_3" -> "ESCAPED";
"global_min_seconds.23_4" -> "ESCAPED";
"global_min_seconds.24_5" -> "ESCAPED";
"global_min_seconds.25_6" -> "ESCAPED";
"global_min_seconds.26_7" -> "ESCAPED";
"global_min_seconds.27_8" -> "ESCAPED";
"global_min_seconds.28_9" -> "ESCAPED";
"global_min_seconds.29_10" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"global_min_seconds" -> "global_min_seconds.20_1";
"NONLOCAL" -> "global_min_seconds";
"NONLOCAL" -> "global_numsortstruct.0+32";
"NONLOCAL" -> "global_numsortstruct.64+144";
"global_min_seconds.20_1" -> "global_numsortstruct.64+144";
"NONLOCAL" -> "global_numsortstruct.256+64";
"global_min_seconds" -> "global_min_seconds.21_2";
"NONLOCAL" -> "global_strsortstruct.0+32";
"NONLOCAL" -> "global_strsortstruct.64+144";
"global_min_seconds.21_2" -> "global_strsortstruct.64+144";
"NONLOCAL" -> "global_strsortstruct.256+64";
"global_min_seconds" -> "global_min_seconds.22_3";
"NONLOCAL" -> "global_bitopstruct.0+32";
"NONLOCAL" -> "global_bitopstruct.64+256";
"global_min_seconds.22_3" -> "global_bitopstruct.64+256";
"global_min_seconds" -> "global_min_seconds.23_4";
"NONLOCAL" -> "global_emfloatstruct.0+32";
"NONLOCAL" -> "global_emfloatstruct.64+256";
"global_min_seconds.23_4" -> "global_emfloatstruct.64+256";
"global_min_seconds" -> "global_min_seconds.24_5";
"NONLOCAL" -> "global_fourierstruct.0+32";
"NONLOCAL" -> "global_fourierstruct.64+192";
"global_min_seconds.24_5" -> "global_fourierstruct.64+192";
"global_min_seconds" -> "global_min_seconds.25_6";
"NONLOCAL" -> "global_assignstruct.0+32";
"NONLOCAL" -> "global_assignstruct.64+192";
"global_min_seconds.25_6" -> "global_assignstruct.64+192";
"global_min_seconds" -> "global_min_seconds.26_7";
"NONLOCAL" -> "global_ideastruct.0+32";
"NONLOCAL" -> "global_ideastruct.64+256";
"global_min_seconds.26_7" -> "global_ideastruct.64+256";
"global_min_seconds" -> "global_min_seconds.27_8";
"NONLOCAL" -> "global_huffstruct.0+32";
"NONLOCAL" -> "global_huffstruct.64+256";
"global_min_seconds.27_8" -> "global_huffstruct.64+256";
"global_min_seconds" -> "global_min_seconds.28_9";
"NONLOCAL" -> "global_nnetstruct.0+32";
"NONLOCAL" -> "global_nnetstruct.64+192";
"global_min_seconds.28_9" -> "global_nnetstruct.64+192";
"global_min_seconds" -> "global_min_seconds.29_10";
"NONLOCAL" -> "global_lustruct.0+32";
"NONLOCAL" -> "global_lustruct.64+192";
"global_min_seconds.29_10" -> "global_lustruct.64+192";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"global_min_seconds";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"global_min_seconds" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = global_min_seconds\l"];
"STOREDANYTHING";
"INTEGER";
"global_min_seconds";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"global_min_seconds" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as global_min_seconds
STOREDANYTHING = { }
INTEGER = { ANYTHING }
global_min_seconds.20_1 = { ESCAPED NONLOCAL } same as global_min_seconds
global_min_seconds = { ESCAPED NONLOCAL }
global_numsortstruct.0+32 = { ESCAPED NONLOCAL } same as global_min_seconds
global_numsortstruct.64+144 = { ESCAPED NONLOCAL } same as global_min_seconds
global_numsortstruct.256+64 = { ESCAPED NONLOCAL } same as global_min_seconds
global_min_seconds.21_2 = { ESCAPED NONLOCAL } same as global_min_seconds
global_strsortstruct.0+32 = { ESCAPED NONLOCAL } same as global_min_seconds
global_strsortstruct.64+144 = { ESCAPED NONLOCAL } same as global_min_seconds
global_strsortstruct.256+64 = { ESCAPED NONLOCAL } same as global_min_seconds
global_min_seconds.22_3 = { ESCAPED NONLOCAL } same as global_min_seconds
global_bitopstruct.0+32 = { ESCAPED NONLOCAL } same as global_min_seconds
global_bitopstruct.64+256 = { ESCAPED NONLOCAL } same as global_min_seconds
global_min_seconds.23_4 = { ESCAPED NONLOCAL } same as global_min_seconds
global_emfloatstruct.0+32 = { ESCAPED NONLOCAL } same as global_min_seconds
global_emfloatstruct.64+256 = { ESCAPED NONLOCAL } same as global_min_seconds
global_min_seconds.24_5 = { ESCAPED NONLOCAL } same as global_min_seconds
global_fourierstruct.0+32 = { ESCAPED NONLOCAL } same as global_min_seconds
global_fourierstruct.64+192 = { ESCAPED NONLOCAL } same as global_min_seconds
global_min_seconds.25_6 = { ESCAPED NONLOCAL } same as global_min_seconds
global_assignstruct.0+32 = { ESCAPED NONLOCAL } same as global_min_seconds
global_assignstruct.64+192 = { ESCAPED NONLOCAL } same as global_min_seconds
global_min_seconds.26_7 = { ESCAPED NONLOCAL } same as global_min_seconds
global_ideastruct.0+32 = { ESCAPED NONLOCAL } same as global_min_seconds
global_ideastruct.64+256 = { ESCAPED NONLOCAL } same as global_min_seconds
global_min_seconds.27_8 = { ESCAPED NONLOCAL } same as global_min_seconds
global_huffstruct.0+32 = { ESCAPED NONLOCAL } same as global_min_seconds
global_huffstruct.64+256 = { ESCAPED NONLOCAL } same as global_min_seconds
global_min_seconds.28_9 = { ESCAPED NONLOCAL } same as global_min_seconds
global_nnetstruct.0+32 = { ESCAPED NONLOCAL } same as global_min_seconds
global_nnetstruct.64+192 = { ESCAPED NONLOCAL } same as global_min_seconds
global_min_seconds.29_10 = { ESCAPED NONLOCAL } same as global_min_seconds
global_lustruct.0+32 = { ESCAPED NONLOCAL } same as global_min_seconds
global_lustruct.64+192 = { ESCAPED NONLOCAL } same as global_min_seconds


Alias information for set_request_secs

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


set_request_secs ()
{
  long unsigned int global_min_seconds.20_1;
  long unsigned int global_min_seconds.21_2;
  long unsigned int global_min_seconds.22_3;
  long unsigned int global_min_seconds.23_4;
  long unsigned int global_min_seconds.24_5;
  long unsigned int global_min_seconds.25_6;
  long unsigned int global_min_seconds.26_7;
  long unsigned int global_min_seconds.27_8;
  long unsigned int global_min_seconds.28_9;
  long unsigned int global_min_seconds.29_10;

  <bb 2> [0.00%]:
  global_min_seconds.20_1 = global_min_seconds;
  global_numsortstruct.request_secs = global_min_seconds.20_1;
  global_min_seconds.21_2 = global_min_seconds;
  global_strsortstruct.request_secs = global_min_seconds.21_2;
  global_min_seconds.22_3 = global_min_seconds;
  global_bitopstruct.request_secs = global_min_seconds.22_3;
  global_min_seconds.23_4 = global_min_seconds;
  global_emfloatstruct.request_secs = global_min_seconds.23_4;
  global_min_seconds.24_5 = global_min_seconds;
  global_fourierstruct.request_secs = global_min_seconds.24_5;
  global_min_seconds.25_6 = global_min_seconds;
  global_assignstruct.request_secs = global_min_seconds.25_6;
  global_min_seconds.26_7 = global_min_seconds;
  global_ideastruct.request_secs = global_min_seconds.26_7;
  global_min_seconds.27_8 = global_min_seconds;
  global_huffstruct.request_secs = global_min_seconds.27_8;
  global_min_seconds.28_9 = global_min_seconds;
  global_nnetstruct.request_secs = global_min_seconds.28_9;
  global_min_seconds.29_10 = global_min_seconds;
  global_lustruct.request_secs = global_min_seconds.29_10;
  return;

}



;; Function getscore (getscore, funcdef_no=63, decl_uid=4725, cgraph_uid=63, symbol_order=95)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
fid = &NONLOCAL
global_numsortstruct.0+32 = NONLOCAL
global_numsortstruct.64+144 = NONLOCAL
global_numsortstruct.256+64 = NONLOCAL
_13 = global_numsortstruct.64+144
global_strsortstruct.0+32 = NONLOCAL
global_strsortstruct.64+144 = NONLOCAL
global_strsortstruct.256+64 = NONLOCAL
_12 = global_strsortstruct.64+144
global_bitopstruct.0+32 = NONLOCAL
global_bitopstruct.64+256 = NONLOCAL
_11 = global_bitopstruct.64+256
global_emfloatstruct.0+32 = NONLOCAL
global_emfloatstruct.64+256 = NONLOCAL
_10 = global_emfloatstruct.64+256
global_fourierstruct.0+32 = NONLOCAL
global_fourierstruct.64+192 = NONLOCAL
_9 = global_fourierstruct.64+192
global_assignstruct.0+32 = NONLOCAL
global_assignstruct.64+192 = NONLOCAL
_8 = global_assignstruct.64+192
global_ideastruct.0+32 = NONLOCAL
global_ideastruct.64+256 = NONLOCAL
_7 = global_ideastruct.64+256
global_huffstruct.0+32 = NONLOCAL
global_huffstruct.64+256 = NONLOCAL
_6 = global_huffstruct.64+256
global_nnetstruct.0+32 = NONLOCAL
global_nnetstruct.64+192 = NONLOCAL
_5 = global_nnetstruct.64+192
global_lustruct.0+32 = NONLOCAL
global_lustruct.64+192 = NONLOCAL
_4 = global_lustruct.64+192
_1 = _13
_1 = _12
_1 = _11
_1 = _10
_1 = _9
_1 = _8
_1 = _7
_1 = _6
_1 = _5
_1 = _4
_1 = &NONLOCAL
ESCAPED = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"fid"[label="fid = { 5 }"];
"_13";
"global_numsortstruct.0+32";
"global_numsortstruct.64+144";
"global_numsortstruct.256+64";
"_12";
"global_strsortstruct.0+32";
"global_strsortstruct.64+144";
"global_strsortstruct.256+64";
"_11";
"global_bitopstruct.0+32";
"global_bitopstruct.64+256";
"_10";
"global_emfloatstruct.0+32";
"global_emfloatstruct.64+256";
"_9";
"global_fourierstruct.0+32";
"global_fourierstruct.64+192";
"_8";
"global_assignstruct.0+32";
"global_assignstruct.64+192";
"_7";
"global_ideastruct.0+32";
"global_ideastruct.64+256";
"_6";
"global_huffstruct.0+32";
"global_huffstruct.64+256";
"_5";
"global_nnetstruct.0+32";
"global_nnetstruct.64+192";
"_4";
"global_lustruct.0+32";
"global_lustruct.64+192";
"_1"[label="_1 = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*fid";
"*global_numsortstruct.0+32";
"*global_numsortstruct.256+64";
"*global_strsortstruct.0+32";
"*global_strsortstruct.256+64";
"*global_bitopstruct.0+32";
"*global_emfloatstruct.0+32";
"*global_fourierstruct.0+32";
"*global_assignstruct.0+32";
"*global_ideastruct.0+32";
"*global_huffstruct.0+32";
"*global_nnetstruct.0+32";
"*global_lustruct.0+32";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_1" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"global_numsortstruct.64+144" -> "_13";
"NONLOCAL" -> "global_numsortstruct.0+32";
"NONLOCAL" -> "global_numsortstruct.64+144";
"NONLOCAL" -> "global_numsortstruct.256+64";
"global_strsortstruct.64+144" -> "_12";
"NONLOCAL" -> "global_strsortstruct.0+32";
"NONLOCAL" -> "global_strsortstruct.64+144";
"NONLOCAL" -> "global_strsortstruct.256+64";
"global_bitopstruct.64+256" -> "_11";
"NONLOCAL" -> "global_bitopstruct.0+32";
"NONLOCAL" -> "global_bitopstruct.64+256";
"global_emfloatstruct.64+256" -> "_10";
"NONLOCAL" -> "global_emfloatstruct.0+32";
"NONLOCAL" -> "global_emfloatstruct.64+256";
"global_fourierstruct.64+192" -> "_9";
"NONLOCAL" -> "global_fourierstruct.0+32";
"NONLOCAL" -> "global_fourierstruct.64+192";
"global_assignstruct.64+192" -> "_8";
"NONLOCAL" -> "global_assignstruct.0+32";
"NONLOCAL" -> "global_assignstruct.64+192";
"global_ideastruct.64+256" -> "_7";
"NONLOCAL" -> "global_ideastruct.0+32";
"NONLOCAL" -> "global_ideastruct.64+256";
"global_huffstruct.64+256" -> "_6";
"NONLOCAL" -> "global_huffstruct.0+32";
"NONLOCAL" -> "global_huffstruct.64+256";
"global_nnetstruct.64+192" -> "_5";
"NONLOCAL" -> "global_nnetstruct.0+32";
"NONLOCAL" -> "global_nnetstruct.64+192";
"global_lustruct.64+192" -> "_4";
"NONLOCAL" -> "global_lustruct.0+32";
"NONLOCAL" -> "global_lustruct.64+192";
"_13" -> "_1";
"_12" -> "_1";
"_11" -> "_1";
"_10" -> "_1";
"_9" -> "_1";
"_8" -> "_1";
"_7" -> "_1";
"_6" -> "_1";
"_5" -> "_1";
"_4" -> "_1";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"fid";
"global_numsortstruct.0+32";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"global_numsortstruct.0+32" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = global_numsortstruct.0+32\l"];
"STOREDANYTHING";
"INTEGER";
"fid";
"global_numsortstruct.0+32";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"global_numsortstruct.0+32" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
STOREDANYTHING = { }
INTEGER = { ANYTHING }
fid = { NONLOCAL }
_13 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_numsortstruct.0+32 = { ESCAPED NONLOCAL }
global_numsortstruct.64+144 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_numsortstruct.256+64 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_12 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_strsortstruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_strsortstruct.64+144 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_strsortstruct.256+64 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_11 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_bitopstruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_bitopstruct.64+256 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_10 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_emfloatstruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_emfloatstruct.64+256 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_9 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_fourierstruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_fourierstruct.64+192 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_8 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_assignstruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_assignstruct.64+192 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_7 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_ideastruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_ideastruct.64+256 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_6 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_huffstruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_huffstruct.64+256 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_5 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_nnetstruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_nnetstruct.64+192 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_4 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_lustruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_lustruct.64+192 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_1 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32


Alias information for getscore

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


getscore (int fid)
{
  double _1;
  double _4;
  double _5;
  double _6;
  double _7;
  double _8;
  double _9;
  double _10;
  double _11;
  double _12;
  double _13;

  <bb 2> [0.00%]:
  switch (fid_2(D)) <default: <L12> [0.00%], case 0: <L0> [0.00%], case 1: <L1> [0.00%], case 2: <L2> [0.00%], case 3: <L3> [0.00%], case 4: <L4> [0.00%], case 5: <L5> [0.00%], case 6: <L6> [0.00%], case 7: <L7> [0.00%], case 8: <L8> [0.00%], case 9: <L9> [0.00%]>

<L0> [0.00%]:
  _13 = global_numsortstruct.sortspersec;
  goto <bb 13> (<L12>); [0.00%]

<L1> [0.00%]:
  _12 = global_strsortstruct.sortspersec;
  goto <bb 13> (<L12>); [0.00%]

<L2> [0.00%]:
  _11 = global_bitopstruct.bitopspersec;
  goto <bb 13> (<L12>); [0.00%]

<L3> [0.00%]:
  _10 = global_emfloatstruct.emflops;
  goto <bb 13> (<L12>); [0.00%]

<L4> [0.00%]:
  _9 = global_fourierstruct.fflops;
  goto <bb 13> (<L12>); [0.00%]

<L5> [0.00%]:
  _8 = global_assignstruct.iterspersec;
  goto <bb 13> (<L12>); [0.00%]

<L6> [0.00%]:
  _7 = global_ideastruct.iterspersec;
  goto <bb 13> (<L12>); [0.00%]

<L7> [0.00%]:
  _6 = global_huffstruct.iterspersec;
  goto <bb 13> (<L12>); [0.00%]

<L8> [0.00%]:
  _5 = global_nnetstruct.iterspersec;
  goto <bb 13> (<L12>); [0.00%]

<L9> [0.00%]:
  _4 = global_lustruct.iterspersec;

  # _1 = PHI <_13(3), _12(4), _11(5), _10(6), _9(7), _8(8), _7(9), _6(10), _5(11), _4(12), 0.0(2)>
<L12> [0.00%]:
  return _1;

}



;; Function bench_with_confidence (bench_with_confidence, funcdef_no=61, decl_uid=4717, cgraph_uid=61, symbol_order=93)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
fid = &NONLOCAL
mean = &NONLOCAL
stdev = &NONLOCAL
numtries = &NONLOCAL
funcpointer = NONLOCAL
_1 = funcpointer
CALLUSED(15) = CALLUSED(15) + UNKNOWN
CALLUSED(15) = *CALLUSED(15) + UNKNOWN
CALLUSED(15) = fid
_2 = CALLUSED(15)
_2 = NONLOCAL
myscores = _2
i_15 = i_3
i_15 = &NONLOCAL
i_3 = &NULL
i_3 = i_15
derefaddrtmp(21) = &NONLOCAL
*numtries = derefaddrtmp(21)
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"fid"[label="fid = { 5 }"];
"mean"[label="mean = { 5 }"];
"stdev"[label="stdev = { 5 }"];
"numtries"[label="numtries = { 5 }"];
"_1";
"funcpointer";
"getscore";
"CALLUSED(15)";
"CALLCLOBBERED(16)";
"_2";
"myscores";
"i_15"[label="i_15 = { 1 5 }"];
"derefaddrtmp(21)"[label="derefaddrtmp(21) = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*fid";
"*mean";
"*stdev";
"*numtries";
"*_1";
"*funcpointer";
"*getscore";
"*CALLUSED(15)";
"*CALLCLOBBERED(16)";
"*_2";
"*myscores";
"*i_15";
"*i_3";
"*derefaddrtmp(21)";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"funcpointer" -> "_1";
"NONLOCAL" -> "funcpointer";
"fid" -> "CALLUSED(15)";
"NONLOCAL" -> "_2";
"CALLUSED(15)" -> "_2";
"_2" -> "myscores";
"i_15" -> "i_15";
"i_15" -> "i_15";
"NONLOCAL" -> "*ESCAPED";
"derefaddrtmp(21)" -> "*numtries";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"fid" [label="\N\n*fid = fid\l"];
"funcpointer";
"getscore";
"CALLUSED(15)" [label="\N\nCALLUSED(15) = CALLUSED(15) + UNKNOWN\lCALLUSED(15) = *CALLUSED(15) + UNKNOWN\l"];
"CALLCLOBBERED(16)";
"_2";
"i_15";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(15)";
"fid" -> "CALLUSED(15)";
"funcpointer" -> "_2";
"CALLUSED(15)" -> "_2";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = funcpointer\l"];
"STOREDANYTHING";
"INTEGER";
"fid" [label="\N\n*fid = fid\l"];
"funcpointer";
"getscore";
"CALLUSED(15)" [label="\N\nCALLUSED(15) = CALLUSED(15) + UNKNOWN\lCALLUSED(15) = *CALLUSED(15) + UNKNOWN\l"];
"CALLCLOBBERED(16)";
"_2";
"i_15";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(15)";
"fid" -> "ESCAPED";
"fid" -> "CALLUSED(15)";
"funcpointer" -> "ESCAPED";
"funcpointer" -> "CALLUSED(15)";
"funcpointer" -> "_2";
"CALLUSED(15)" -> "_2";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as funcpointer
STOREDANYTHING = { }
INTEGER = { ANYTHING }
fid = { NONLOCAL }
mean = { NONLOCAL } same as fid
stdev = { NONLOCAL } same as fid
numtries = { NONLOCAL } same as fid
_1 = { ESCAPED NONLOCAL } same as funcpointer
funcpointer = { ESCAPED NONLOCAL }
getscore = { }
CALLUSED(15) = { ESCAPED NONLOCAL }
CALLCLOBBERED(16) = { }
_2 = { ESCAPED NONLOCAL }
myscores = { ESCAPED NONLOCAL } same as _2
i_15 = { NULL NONLOCAL }
i_3 = { NULL NONLOCAL } same as i_15
derefaddrtmp(21) = { NONLOCAL } same as fid


Alias information for bench_with_confidence

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
numtries_7(D), points-to non-local, points-to NULL, points-to vars: { }

bench_with_confidence (int fid, double * mean, double * stdev, long unsigned int * numtries)
{
  int i;
  double myscores[30];
  void (*<T8d0>) (void) _1;
  double _2;

  <bb 2> [0.00%]:
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = funcpointer[fid_11(D)];
  _1 ();
  _2 = getscore (fid_11(D));
  myscores[i_3] = _2;
  i_15 = i_3 + 1;

  <bb 4> [0.00%]:
  # i_3 = PHI <0(2), i_15(3)>
  if (i_3 <= 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  *numtries_7(D) = 5;
  myscores ={v} {CLOBBER};
  return 0;

}



;; Function output_string (output_string, funcdef_no=64, decl_uid=4727, cgraph_uid=64, symbol_order=96)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
buffer = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = buffer
_8 = NONLOCAL
write_to_file = NONLOCAL
write_to_file.30_1 = write_to_file
global_ofile = NONLOCAL
global_ofile.31_2 = global_ofile
ESCAPED = global_ofile.31_2
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = buffer
_9 = NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"buffer"[label="buffer = { 5 }"];
"__printf_chk";
"_8";
"write_to_file.30_1";
"write_to_file";
"global_ofile.31_2";
"global_ofile";
"__fprintf_chk";
"_9";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*buffer";
"*__printf_chk";
"*_8";
"*write_to_file.30_1";
"*write_to_file";
"*__fprintf_chk";
"*_9";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"buffer" -> "ESCAPED";
"global_ofile.31_2" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_8";
"write_to_file" -> "write_to_file.30_1";
"NONLOCAL" -> "write_to_file";
"global_ofile" -> "global_ofile.31_2";
"NONLOCAL" -> "global_ofile";
"NONLOCAL" -> "_9";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"buffer";
"__printf_chk";
"_8";
"__fprintf_chk";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"buffer" -> "ESCAPED";
"_8" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _8\l"];
"STOREDANYTHING";
"INTEGER";
"buffer";
"__printf_chk";
"_8";
"__fprintf_chk";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"buffer" -> "ESCAPED";
"_8" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _8
STOREDANYTHING = { }
INTEGER = { ANYTHING }
buffer = { NONLOCAL }
__printf_chk = { }
_8 = { ESCAPED NONLOCAL }
write_to_file.30_1 = { ESCAPED NONLOCAL } same as _8
write_to_file = { ESCAPED NONLOCAL } same as _8
global_ofile.31_2 = { ESCAPED NONLOCAL } same as _8
global_ofile = { ESCAPED NONLOCAL } same as _8
__fprintf_chk = { }
_9 = { ESCAPED NONLOCAL } same as _8


Alias information for output_string

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

global_ofile.31_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
buffer_5(D), points-to non-local, points-to NULL, points-to vars: { }

output_string (char * buffer)
{
  int D.5016;
  int D.5013;
  int write_to_file.30_1;
  struct FILE * global_ofile.31_2;
  int _8;
  int _9;

  <bb 2> [100.00%]:
  _8 = __printf_chk (1, "%s", buffer_5(D));
  write_to_file.30_1 = write_to_file;
  if (write_to_file.30_1 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  global_ofile.31_2 = global_ofile;
  _9 = __fprintf_chk (global_ofile.31_2, 1, "%s", buffer_5(D));

  <bb 4> [0.00%]:
  return;

}



;; Function show_stats (show_stats, funcdef_no=65, decl_uid=4729, cgraph_uid=65, symbol_order=97)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
bid = &NONLOCAL
global_numsortstruct.0+32 = NONLOCAL
global_numsortstruct.64+144 = NONLOCAL
global_numsortstruct.256+64 = NONLOCAL
_1 = global_numsortstruct.64+144
_2 = _1
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _2
_58 = NONLOCAL
ESCAPED = &buffer
_3 = global_numsortstruct.256+64
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _3
_56 = NONLOCAL
ESCAPED = &buffer
global_strsortstruct.0+32 = NONLOCAL
global_strsortstruct.64+144 = NONLOCAL
global_strsortstruct.256+64 = NONLOCAL
_4 = global_strsortstruct.64+144
_5 = _4
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _5
_62 = NONLOCAL
ESCAPED = &buffer
_6 = global_strsortstruct.256+64
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _6
_60 = NONLOCAL
ESCAPED = &buffer
global_bitopstruct.0+32 = NONLOCAL
global_bitopstruct.64+256 = NONLOCAL
_7 = global_bitopstruct.64+256
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _7
_66 = NONLOCAL
ESCAPED = &buffer
_8 = global_bitopstruct.64+256
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _8
_64 = NONLOCAL
ESCAPED = &buffer
global_emfloatstruct.0+32 = NONLOCAL
global_emfloatstruct.64+256 = NONLOCAL
_9 = global_emfloatstruct.64+256
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _9
_70 = NONLOCAL
ESCAPED = &buffer
_10 = global_emfloatstruct.64+256
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _10
_68 = NONLOCAL
ESCAPED = &buffer
global_fourierstruct.0+32 = NONLOCAL
global_fourierstruct.64+192 = NONLOCAL
_11 = global_fourierstruct.64+192
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _11
_72 = NONLOCAL
ESCAPED = &buffer
global_assignstruct.0+32 = NONLOCAL
global_assignstruct.64+192 = NONLOCAL
_12 = global_assignstruct.64+192
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _12
_74 = NONLOCAL
ESCAPED = &buffer
global_ideastruct.0+32 = NONLOCAL
global_ideastruct.64+256 = NONLOCAL
_13 = global_ideastruct.64+256
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _13
_78 = NONLOCAL
ESCAPED = &buffer
_14 = global_ideastruct.64+256
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _14
_76 = NONLOCAL
ESCAPED = &buffer
global_huffstruct.0+32 = NONLOCAL
global_huffstruct.64+256 = NONLOCAL
_15 = global_huffstruct.64+256
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _15
_82 = NONLOCAL
ESCAPED = &buffer
_16 = global_huffstruct.64+256
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _16
_80 = NONLOCAL
ESCAPED = &buffer
global_nnetstruct.0+32 = NONLOCAL
global_nnetstruct.64+192 = NONLOCAL
_17 = global_nnetstruct.64+192
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _17
_84 = NONLOCAL
ESCAPED = &buffer
global_lustruct.0+32 = NONLOCAL
global_lustruct.64+192 = NONLOCAL
_18 = global_lustruct.64+192
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _18
_86 = NONLOCAL
ESCAPED = &buffer

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 15 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"bid"[label="bid = { 5 }"];
"_1";
"global_numsortstruct.0+32";
"global_numsortstruct.64+144";
"global_numsortstruct.256+64";
"_2";
"__sprintf_chk";
"buffer";
"_58";
"output_string";
"_3";
"_56";
"_4";
"global_strsortstruct.0+32";
"global_strsortstruct.64+144";
"global_strsortstruct.256+64";
"_5";
"_62";
"_6";
"_60";
"_7";
"global_bitopstruct.0+32";
"global_bitopstruct.64+256";
"_66";
"_8";
"_64";
"_9";
"global_emfloatstruct.0+32";
"global_emfloatstruct.64+256";
"_70";
"_10";
"_68";
"_11";
"global_fourierstruct.0+32";
"global_fourierstruct.64+192";
"_72";
"_12";
"global_assignstruct.0+32";
"global_assignstruct.64+192";
"_74";
"_13";
"global_ideastruct.0+32";
"global_ideastruct.64+256";
"_78";
"_14";
"_76";
"_15";
"global_huffstruct.0+32";
"global_huffstruct.64+256";
"_82";
"_16";
"_80";
"_17";
"global_nnetstruct.0+32";
"global_nnetstruct.64+192";
"_84";
"_18";
"global_lustruct.0+32";
"global_lustruct.64+192";
"_86";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*bid";
"*global_numsortstruct.0+32";
"*__sprintf_chk";
"*buffer";
"*_58";
"*output_string";
"*_56";
"*global_strsortstruct.0+32";
"*_62";
"*_60";
"*global_bitopstruct.0+32";
"*_66";
"*_64";
"*global_emfloatstruct.0+32";
"*_70";
"*_68";
"*global_fourierstruct.0+32";
"*_72";
"*global_assignstruct.0+32";
"*_74";
"*global_ideastruct.0+32";
"*_78";
"*_76";
"*global_huffstruct.0+32";
"*_82";
"*_80";
"*global_nnetstruct.0+32";
"*_84";
"*global_lustruct.0+32";
"*_86";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_2" -> "ESCAPED";
"_3" -> "ESCAPED";
"_5" -> "ESCAPED";
"_6" -> "ESCAPED";
"_7" -> "ESCAPED";
"_8" -> "ESCAPED";
"_9" -> "ESCAPED";
"_10" -> "ESCAPED";
"_11" -> "ESCAPED";
"_12" -> "ESCAPED";
"_13" -> "ESCAPED";
"_14" -> "ESCAPED";
"_15" -> "ESCAPED";
"_16" -> "ESCAPED";
"_17" -> "ESCAPED";
"_18" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"global_numsortstruct.64+144" -> "_1";
"NONLOCAL" -> "global_numsortstruct.0+32";
"NONLOCAL" -> "global_numsortstruct.64+144";
"NONLOCAL" -> "global_numsortstruct.256+64";
"_1" -> "_2";
"NONLOCAL" -> "_58";
"global_numsortstruct.256+64" -> "_3";
"NONLOCAL" -> "_56";
"global_strsortstruct.64+144" -> "_4";
"NONLOCAL" -> "global_strsortstruct.0+32";
"NONLOCAL" -> "global_strsortstruct.64+144";
"NONLOCAL" -> "global_strsortstruct.256+64";
"_4" -> "_5";
"NONLOCAL" -> "_62";
"global_strsortstruct.256+64" -> "_6";
"NONLOCAL" -> "_60";
"global_bitopstruct.64+256" -> "_7";
"NONLOCAL" -> "global_bitopstruct.0+32";
"NONLOCAL" -> "global_bitopstruct.64+256";
"NONLOCAL" -> "_66";
"global_bitopstruct.64+256" -> "_8";
"NONLOCAL" -> "_64";
"global_emfloatstruct.64+256" -> "_9";
"NONLOCAL" -> "global_emfloatstruct.0+32";
"NONLOCAL" -> "global_emfloatstruct.64+256";
"NONLOCAL" -> "_70";
"global_emfloatstruct.64+256" -> "_10";
"NONLOCAL" -> "_68";
"global_fourierstruct.64+192" -> "_11";
"NONLOCAL" -> "global_fourierstruct.0+32";
"NONLOCAL" -> "global_fourierstruct.64+192";
"NONLOCAL" -> "_72";
"global_assignstruct.64+192" -> "_12";
"NONLOCAL" -> "global_assignstruct.0+32";
"NONLOCAL" -> "global_assignstruct.64+192";
"NONLOCAL" -> "_74";
"global_ideastruct.64+256" -> "_13";
"NONLOCAL" -> "global_ideastruct.0+32";
"NONLOCAL" -> "global_ideastruct.64+256";
"NONLOCAL" -> "_78";
"global_ideastruct.64+256" -> "_14";
"NONLOCAL" -> "_76";
"global_huffstruct.64+256" -> "_15";
"NONLOCAL" -> "global_huffstruct.0+32";
"NONLOCAL" -> "global_huffstruct.64+256";
"NONLOCAL" -> "_82";
"global_huffstruct.64+256" -> "_16";
"NONLOCAL" -> "_80";
"global_nnetstruct.64+192" -> "_17";
"NONLOCAL" -> "global_nnetstruct.0+32";
"NONLOCAL" -> "global_nnetstruct.64+192";
"NONLOCAL" -> "_84";
"global_lustruct.64+192" -> "_18";
"NONLOCAL" -> "global_lustruct.0+32";
"NONLOCAL" -> "global_lustruct.64+192";
"NONLOCAL" -> "_86";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"bid";
"global_numsortstruct.0+32";
"__sprintf_chk";
"buffer";
"output_string";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "buffer";
"global_numsortstruct.0+32" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = global_numsortstruct.0+32\l"];
"STOREDANYTHING";
"INTEGER";
"bid";
"global_numsortstruct.0+32";
"__sprintf_chk";
"buffer";
"output_string";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "buffer";
"global_numsortstruct.0+32" -> "ESCAPED";
"global_numsortstruct.0+32" -> "buffer";
"buffer" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL buffer }
NONLOCAL = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
STOREDANYTHING = { }
INTEGER = { ANYTHING }
bid = { NONLOCAL }
_1 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_numsortstruct.0+32 = { ESCAPED NONLOCAL }
global_numsortstruct.64+144 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_numsortstruct.256+64 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_2 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
__sprintf_chk = { }
buffer = { ESCAPED NONLOCAL }
_58 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
output_string = { }
_3 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_56 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_4 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_strsortstruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_strsortstruct.64+144 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_strsortstruct.256+64 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_5 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_62 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_6 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_60 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_7 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_bitopstruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_bitopstruct.64+256 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_66 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_8 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_64 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_9 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_emfloatstruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_emfloatstruct.64+256 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_70 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_10 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_68 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_11 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_fourierstruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_fourierstruct.64+192 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_72 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_12 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_assignstruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_assignstruct.64+192 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_74 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_13 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_ideastruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_ideastruct.64+256 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_78 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_14 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_76 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_15 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_huffstruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_huffstruct.64+256 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_82 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_16 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_80 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_17 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_nnetstruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_nnetstruct.64+192 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_84 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_18 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_lustruct.0+32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_lustruct.64+192 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_86 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32


Alias information for show_stats

Aliased symbols

buffer, UID D.4919, char[80], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4919 } (escaped)

Flow-insensitive points-to information


show_stats (int bid)
{
  int D.5071;
  int D.5068;
  int D.5065;
  int D.5062;
  int D.5059;
  int D.5056;
  int D.5053;
  int D.5050;
  int D.5047;
  int D.5044;
  int D.5041;
  int D.5038;
  int D.5035;
  int D.5032;
  int D.5029;
  int D.5026;
  char buffer[80];
  short unsigned int _1;
  int _2;
  long unsigned int _3;
  short unsigned int _4;
  int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  int _56;
  int _58;
  int _60;
  int _62;
  int _64;
  int _66;
  int _68;
  int _70;
  int _72;
  int _74;
  int _76;
  int _78;
  int _80;
  int _82;
  int _84;
  int _86;

  <bb 2> [0.00%]:
  switch (bid_20(D)) <default: <L14> [0.00%], case 0: <L0> [0.00%], case 1: <L1> [0.00%], case 2: <L2> [0.00%], case 3: <L3> [0.00%], case 4: <L4> [0.00%], case 5: <L5> [0.00%], case 6: <L6> [0.00%], case 7: <L7> [0.00%], case 8: <L8> [0.00%], case 9: <L9> [0.00%]>

<L0> [100.00%]:
  _1 = global_numsortstruct.numarrays;
  _2 = (int) _1;
  _58 = __builtin___sprintf_chk (&buffer, 1, 80, "  Number of arrays: %d\n", _2);
  output_string (&buffer);
  _3 = global_numsortstruct.arraysize;
  _56 = __builtin___sprintf_chk (&buffer, 1, 80, "  Array size: %ld\n", _3);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L1> [100.00%]:
  _4 = global_strsortstruct.numarrays;
  _5 = (int) _4;
  _62 = __builtin___sprintf_chk (&buffer, 1, 80, "  Number of arrays: %d\n", _5);
  output_string (&buffer);
  _6 = global_strsortstruct.arraysize;
  _60 = __builtin___sprintf_chk (&buffer, 1, 80, "  Array size: %ld\n", _6);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L2> [100.00%]:
  _7 = global_bitopstruct.bitoparraysize;
  _66 = __builtin___sprintf_chk (&buffer, 1, 80, "  Operations array size: %ld\n", _7);
  output_string (&buffer);
  _8 = global_bitopstruct.bitfieldarraysize;
  _64 = __builtin___sprintf_chk (&buffer, 1, 80, "  Bitfield array size: %ld\n", _8);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L3> [100.00%]:
  _9 = global_emfloatstruct.loops;
  _70 = __builtin___sprintf_chk (&buffer, 1, 80, "  Number of loops: %lu\n", _9);
  output_string (&buffer);
  _10 = global_emfloatstruct.arraysize;
  _68 = __builtin___sprintf_chk (&buffer, 1, 80, "  Array size: %lu\n", _10);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L4> [100.00%]:
  _11 = global_fourierstruct.arraysize;
  _72 = __builtin___sprintf_chk (&buffer, 1, 80, "  Number of coefficients: %lu\n", _11);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L5> [100.00%]:
  _12 = global_assignstruct.numarrays;
  _74 = __builtin___sprintf_chk (&buffer, 1, 80, "  Number of arrays: %lu\n", _12);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L6> [100.00%]:
  _13 = global_ideastruct.arraysize;
  _78 = __builtin___sprintf_chk (&buffer, 1, 80, "  Array size: %lu\n", _13);
  output_string (&buffer);
  _14 = global_ideastruct.loops;
  _76 = __builtin___sprintf_chk (&buffer, 1, 80, " Number of loops: %lu\n", _14);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L7> [100.00%]:
  _15 = global_huffstruct.arraysize;
  _82 = __builtin___sprintf_chk (&buffer, 1, 80, "  Array size: %lu\n", _15);
  output_string (&buffer);
  _16 = global_huffstruct.loops;
  _80 = __builtin___sprintf_chk (&buffer, 1, 80, "  Number of loops: %lu\n", _16);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L8> [100.00%]:
  _17 = global_nnetstruct.loops;
  _84 = __builtin___sprintf_chk (&buffer, 1, 80, "  Number of loops: %lu\n", _17);
  output_string (&buffer);
  goto <bb 13> (<L14>); [0.00%]

<L9> [100.00%]:
  _18 = global_lustruct.numarrays;
  _86 = __builtin___sprintf_chk (&buffer, 1, 80, "  Number of arrays: %lu\n", _18);
  output_string (&buffer);

<L14> [0.00%]:
  buffer ={v} {CLOBBER};
  return;

}



;; Function main (main, funcdef_no=54, decl_uid=4760, cgraph_uid=54, symbol_order=86)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
argc = &NONLOCAL
argv = &NONLOCAL
global_min_ticks = NONLOCAL
global_min_ticks = &NONLOCAL
ESCAPED = &NONLOCAL
global_min_seconds = NONLOCAL
global_min_seconds = &NONLOCAL
ESCAPED = &NONLOCAL
global_allstats = NONLOCAL
global_allstats = &NULL
ESCAPED = &NULL
global_custrun = NONLOCAL
global_custrun = &NULL
ESCAPED = &NULL
global_align = NONLOCAL
global_align = &NONLOCAL
ESCAPED = &NONLOCAL
write_to_file = NONLOCAL
write_to_file = &NULL
ESCAPED = &NULL
mem_array_ents = NONLOCAL
mem_array_ents = &NULL
ESCAPED = &NULL
tests_to_do = NONLOCAL
tests_to_do = &NONLOCAL
ESCAPED = &NONLOCAL
i_194 = i_57
i_194 = &NONLOCAL
i_57 = &NULL
i_57 = i_194
global_min_seconds.20_237 = global_min_seconds
global_numsortstruct.0+32 = NONLOCAL
global_numsortstruct.64+144 = NONLOCAL
global_numsortstruct.256+64 = NONLOCAL
global_numsortstruct.64+144 = global_min_seconds.20_237
ESCAPED = global_min_seconds.20_237
global_strsortstruct.0+32 = NONLOCAL
global_strsortstruct.64+144 = NONLOCAL
global_strsortstruct.256+64 = NONLOCAL
global_strsortstruct.64+144 = global_min_seconds.20_237
ESCAPED = global_min_seconds.20_237
global_bitopstruct.0+32 = NONLOCAL
global_bitopstruct.64+256 = NONLOCAL
global_bitopstruct.64+256 = global_min_seconds.20_237
ESCAPED = global_min_seconds.20_237
global_emfloatstruct.0+32 = NONLOCAL
global_emfloatstruct.64+256 = NONLOCAL
global_emfloatstruct.64+256 = global_min_seconds.20_237
ESCAPED = global_min_seconds.20_237
global_fourierstruct.0+32 = NONLOCAL
global_fourierstruct.64+192 = NONLOCAL
global_fourierstruct.64+192 = global_min_seconds.20_237
ESCAPED = global_min_seconds.20_237
global_assignstruct.0+32 = NONLOCAL
global_assignstruct.64+192 = NONLOCAL
global_assignstruct.64+192 = global_min_seconds.20_237
ESCAPED = global_min_seconds.20_237
global_ideastruct.0+32 = NONLOCAL
global_ideastruct.64+256 = NONLOCAL
global_ideastruct.64+256 = global_min_seconds.20_237
ESCAPED = global_min_seconds.20_237
global_huffstruct.0+32 = NONLOCAL
global_huffstruct.64+256 = NONLOCAL
global_huffstruct.64+256 = global_min_seconds.20_237
ESCAPED = global_min_seconds.20_237
global_nnetstruct.0+32 = NONLOCAL
global_nnetstruct.64+192 = NONLOCAL
global_nnetstruct.64+192 = global_min_seconds.20_237
ESCAPED = global_min_seconds.20_237
global_lustruct.0+32 = NONLOCAL
global_lustruct.64+192 = NONLOCAL
global_lustruct.64+192 = global_min_seconds.20_237
ESCAPED = global_min_seconds.20_237
global_numsortstruct.0+32 = &NULL
ESCAPED = &NULL
global_numsortstruct.256+64 = &NONLOCAL
ESCAPED = &NONLOCAL
global_strsortstruct.0+32 = &NULL
ESCAPED = &NULL
global_strsortstruct.256+64 = &NONLOCAL
ESCAPED = &NONLOCAL
global_bitopstruct.0+32 = &NULL
ESCAPED = &NULL
global_bitopstruct.64+256 = &NONLOCAL
ESCAPED = &NONLOCAL
global_emfloatstruct.0+32 = &NULL
ESCAPED = &NULL
global_emfloatstruct.64+256 = &NONLOCAL
ESCAPED = &NONLOCAL
global_fourierstruct.0+32 = &NULL
ESCAPED = &NULL
global_assignstruct.0+32 = &NULL
ESCAPED = &NULL
global_ideastruct.0+32 = &NULL
ESCAPED = &NULL
global_ideastruct.64+256 = &NONLOCAL
ESCAPED = &NONLOCAL
global_huffstruct.0+32 = &NULL
ESCAPED = &NULL
global_huffstruct.64+256 = &NONLOCAL
ESCAPED = &NONLOCAL
global_nnetstruct.0+32 = &NULL
ESCAPED = &NULL
global_lustruct.0+32 = &NULL
ESCAPED = &NULL
_2 = *argv + 64
ESCAPED = _2
ESCAPED = &NULL
ESCAPED = &NONLOCAL
_195 = NONLOCAL
_196 = _195
testnum = NONLOCAL
testnum = _196
ESCAPED = _196
ESCAPED = &STRING
ESCAPED = &STRING
ESCAPED = &STRING
global_allstats.0_4 = global_allstats
ESCAPED = &STRING
ESCAPED = &STRING
ESCAPED = &time_and_date
ESCAPED = &time_and_date
loctime_123 = NONLOCAL
ESCAPED = loctime_123
_5 = NONLOCAL
buffer = NONLOCAL
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _5
_210 = NONLOCAL
ESCAPED = &buffer
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_208 = NONLOCAL
ESCAPED = &buffer
_206 = &NONLOCAL
ESCAPED = &buffer
_204 = &NONLOCAL
ESCAPED = &buffer
_202 = &NONLOCAL
ESCAPED = &buffer
_200 = &NONLOCAL
ESCAPED = &buffer
_198 = &NONLOCAL
ESCAPED = &buffer
ESCAPED = &STRING
ESCAPED = &STRING
ESCAPED = &STRING
ESCAPED = &STRING
i_143 = testnum
_6 = tests_to_do
ftestnames = NONLOCAL
_7 = ftestnames
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _7
_212 = NONLOCAL
ESCAPED = &buffer
funcpointer = NONLOCAL
_238 = funcpointer
i_1 = &NONLOCAL
i_239 = &NULL
bmean.1_9 = bmean_297
lx_bindex = NONLOCAL
_10 = lx_bindex
_11 = bmean_297
_11 = _10
bmean.2_12 = bmean_297
bindex = NONLOCAL
_13 = bindex
_14 = bmean_297
_14 = _13
bmean.3_15 = bmean_297
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = bmean.3_15
ESCAPED = _14
ESCAPED = _11
_214 = NONLOCAL
ESCAPED = &buffer
_18 = _16
_18 = _17
bmean.4_19 = bmean_297
_20 = bindex
_21 = bmean_297
_21 = _20
fpindex_181 = _21
fpindex_181 = fpindex_73
bmean.5_22 = bmean_297
_23 = lx_bindex
_24 = bmean_297
_24 = _23
lx_fpindex_182 = _24
lx_fpindex_182 = lx_fpindex_67
bmean.6_25 = bmean_297
_26 = bindex
_27 = bmean_297
_27 = _26
intindex_178 = _27
intindex_178 = intindex_70
_30 = _28
_30 = _29
i.7_31 = i_58
_32 = i.7_31
_32 = &NONLOCAL
bmean.8_33 = bmean_297
_34 = lx_bindex
_35 = bmean_297
_35 = _34
lx_intindex_180 = _35
lx_intindex_180 = lx_intindex_64
bmean.9_36 = bmean_297
_37 = lx_bindex
_38 = bmean_297
_38 = _37
lx_memindex_179 = _38
lx_memindex_179 = lx_memindex_61
lx_memindex_59 = lx_memindex_61
lx_memindex_59 = lx_memindex_61
lx_memindex_59 = lx_memindex_179
lx_intindex_62 = lx_intindex_64
lx_intindex_62 = lx_intindex_180
lx_intindex_62 = lx_intindex_64
lx_fpindex_65 = lx_fpindex_182
lx_fpindex_65 = lx_fpindex_67
lx_fpindex_65 = lx_fpindex_67
intindex_68 = intindex_70
intindex_68 = intindex_178
intindex_68 = intindex_178
fpindex_71 = fpindex_181
fpindex_71 = fpindex_73
fpindex_71 = fpindex_73
global_allstats.10_39 = global_allstats
bstdev.11_40 = bstdev_298
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = bstdev.11_40
_216 = NONLOCAL
ESCAPED = &buffer
bmean.12_41 = bmean_297
bstdev.13_42 = bstdev_298
_43 = bstdev_298
_43 = &NONLOCAL
bmean.14_44 = bmean_297
_45 = _43
_45 = bmean_297
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _45
_218 = NONLOCAL
ESCAPED = &buffer
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &NONLOCAL
_222 = NONLOCAL
ESCAPED = &buffer
ESCAPED = i_58
_47 = ftestnames
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _47
_220 = NONLOCAL
ESCAPED = &buffer
lx_memindex_60 = lx_memindex_61
lx_memindex_60 = lx_memindex_59
lx_memindex_60 = lx_memindex_59
lx_intindex_63 = lx_intindex_64
lx_intindex_63 = lx_intindex_62
lx_intindex_63 = lx_intindex_62
lx_fpindex_66 = lx_fpindex_67
lx_fpindex_66 = lx_fpindex_65
lx_fpindex_66 = lx_fpindex_65
intindex_69 = intindex_70
intindex_69 = intindex_68
intindex_69 = intindex_68
fpindex_72 = fpindex_73
fpindex_72 = fpindex_71
fpindex_72 = fpindex_71
i_192 = i_58
i_192 = &NONLOCAL
i_58 = i_143
i_58 = i_192
lx_memindex_61 = &NONLOCAL
lx_memindex_61 = lx_memindex_60
lx_intindex_64 = &NONLOCAL
lx_intindex_64 = lx_intindex_63
lx_fpindex_67 = &NONLOCAL
lx_fpindex_67 = lx_fpindex_66
intindex_70 = &NONLOCAL
intindex_70 = intindex_69
fpindex_73 = &NONLOCAL
fpindex_73 = fpindex_72
testnum.16_48 = testnum
global_custrun.17_49 = global_custrun
ESCAPED = &STRING
ESCAPED = intindex_70
ESCAPED = &NONLOCAL
_50 = NONLOCAL
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _50
_236 = NONLOCAL
ESCAPED = &buffer
ESCAPED = fpindex_73
ESCAPED = &NONLOCAL
_51 = NONLOCAL
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _51
_234 = NONLOCAL
ESCAPED = &buffer
ESCAPED = &STRING
ESCAPED = &STRING
global_ofile = NONLOCAL
global_ofile.18_52 = global_ofile
write_to_file.19_53 = write_to_file
ESCAPED = write_to_file.19_53
ESCAPED = global_ofile.18_52
_232 = &NONLOCAL
ESCAPED = &buffer
_230 = &NONLOCAL
ESCAPED = &buffer
ESCAPED = lx_memindex_61
ESCAPED = &NONLOCAL
_54 = NONLOCAL
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _54
_228 = NONLOCAL
ESCAPED = &buffer
ESCAPED = lx_intindex_64
ESCAPED = &NONLOCAL
_55 = NONLOCAL
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _55
_226 = NONLOCAL
ESCAPED = &buffer
ESCAPED = lx_fpindex_67
ESCAPED = &NONLOCAL
_56 = NONLOCAL
ESCAPED = &buffer
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _56
_224 = NONLOCAL
ESCAPED = &buffer
ESCAPED = &STRING
ESCAPED = &STRING
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 3 5 51 57 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"argc"[label="argc = { 5 }"];
"argv"[label="argv = { 5 }"];
"global_min_ticks"[label="global_min_ticks = { 5 }"];
"global_min_seconds"[label="global_min_seconds = { 5 }"];
"global_allstats"[label="global_allstats = { 1 }"];
"global_custrun"[label="global_custrun = { 1 }"];
"global_align"[label="global_align = { 5 }"];
"write_to_file"[label="write_to_file = { 1 }"];
"mem_array_ents"[label="mem_array_ents = { 1 }"];
"tests_to_do"[label="tests_to_do = { 5 }"];
"i_194"[label="i_194 = { 1 5 }"];
"global_min_seconds.20_237";
"global_numsortstruct.0+32"[label="global_numsortstruct.0+32 = { 1 }"];
"global_numsortstruct.64+144";
"global_numsortstruct.256+64"[label="global_numsortstruct.256+64 = { 5 }"];
"global_strsortstruct.0+32"[label="global_strsortstruct.0+32 = { 1 }"];
"global_strsortstruct.64+144";
"global_strsortstruct.256+64"[label="global_strsortstruct.256+64 = { 5 }"];
"global_bitopstruct.0+32"[label="global_bitopstruct.0+32 = { 1 }"];
"global_bitopstruct.64+256"[label="global_bitopstruct.64+256 = { 5 }"];
"global_emfloatstruct.0+32"[label="global_emfloatstruct.0+32 = { 1 }"];
"global_emfloatstruct.64+256"[label="global_emfloatstruct.64+256 = { 5 }"];
"global_fourierstruct.0+32"[label="global_fourierstruct.0+32 = { 1 }"];
"global_fourierstruct.64+192";
"global_assignstruct.0+32"[label="global_assignstruct.0+32 = { 1 }"];
"global_assignstruct.64+192";
"global_ideastruct.0+32"[label="global_ideastruct.0+32 = { 1 }"];
"global_ideastruct.64+256"[label="global_ideastruct.64+256 = { 5 }"];
"global_huffstruct.0+32"[label="global_huffstruct.0+32 = { 1 }"];
"global_huffstruct.64+256"[label="global_huffstruct.64+256 = { 5 }"];
"global_nnetstruct.0+32"[label="global_nnetstruct.0+32 = { 1 }"];
"global_nnetstruct.64+192";
"global_lustruct.0+32"[label="global_lustruct.0+32 = { 1 }"];
"global_lustruct.64+192";
"_2";
"strtol";
"_195";
"_196";
"testnum";
"output_string";
"global_allstats.0_4";
"time";
"time_and_date";
"localtime";
"loctime_123";
"asctime";
"_5";
"__sprintf_chk";
"buffer";
"_210";
"_208";
"_206"[label="_206 = { 5 }"];
"_204"[label="_204 = { 5 }"];
"_202"[label="_202 = { 5 }"];
"_200"[label="_200 = { 5 }"];
"_198"[label="_198 = { 5 }"];
"i_143";
"_6";
"_7";
"ftestnames";
"_212";
"_238";
"funcpointer";
"i_1"[label="i_1 = { 5 }"];
"i_239"[label="i_239 = { 1 }"];
"bmean.1_9";
"bmean_297";
"_10";
"lx_bindex";
"_11";
"bmean.2_12";
"_13";
"bindex";
"_14";
"bmean.3_15";
"_214";
"_16";
"_17";
"_18";
"bmean.4_19";
"_20";
"_21";
"fpindex_73"[label="fpindex_73 = { 5 }"];
"bmean.5_22";
"_23";
"_24";
"lx_fpindex_67"[label="lx_fpindex_67 = { 5 }"];
"bmean.6_25";
"_26";
"_27";
"intindex_70"[label="intindex_70 = { 5 }"];
"_28";
"_29";
"_30";
"i.7_31";
"i_58"[label="i_58 = { 5 }"];
"_32"[label="_32 = { 5 }"];
"bmean.8_33";
"_34";
"_35";
"lx_intindex_64"[label="lx_intindex_64 = { 5 }"];
"bmean.9_36";
"_37";
"_38";
"lx_memindex_61"[label="lx_memindex_61 = { 5 }"];
"global_allstats.10_39";
"bstdev.11_40";
"bstdev_298";
"_216";
"bmean.12_41";
"bstdev.13_42";
"_43"[label="_43 = { 5 }"];
"bmean.14_44";
"_45";
"_218";
"_222";
"show_stats";
"_47";
"_220";
"testnum.16_48";
"global_custrun.17_49";
"pow";
"_50";
"_236";
"_51";
"_234";
"global_ofile.18_52";
"global_ofile";
"write_to_file.19_53";
"hardware";
"_232"[label="_232 = { 5 }"];
"_230"[label="_230 = { 5 }"];
"_54";
"_228";
"_55";
"_226";
"_56";
"_224";
"exit";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*argc";
"*argv";
"*global_min_ticks";
"*global_allstats";
"*global_custrun";
"*global_align";
"*mem_array_ents";
"*tests_to_do";
"*i_194";
"*i_57";
"*global_numsortstruct.0+32";
"*global_numsortstruct.64+144";
"*global_numsortstruct.256+64";
"*global_strsortstruct.0+32";
"*global_strsortstruct.64+144";
"*global_strsortstruct.256+64";
"*global_bitopstruct.0+32";
"*global_bitopstruct.64+256";
"*global_emfloatstruct.0+32";
"*global_emfloatstruct.64+256";
"*global_fourierstruct.0+32";
"*global_fourierstruct.64+192";
"*global_assignstruct.0+32";
"*global_assignstruct.64+192";
"*global_ideastruct.0+32";
"*global_ideastruct.64+256";
"*global_huffstruct.0+32";
"*global_huffstruct.64+256";
"*global_nnetstruct.0+32";
"*global_nnetstruct.64+192";
"*global_lustruct.0+32";
"*global_lustruct.64+192";
"*_2";
"*strtol";
"*output_string";
"*global_allstats.0_4";
"*time";
"*time_and_date";
"*localtime";
"*asctime";
"*__sprintf_chk";
"*buffer";
"*_210";
"*_208";
"*_206";
"*_204";
"*_202";
"*_200";
"*_198";
"*_6";
"*_212";
"*_238";
"*funcpointer";
"*i_1";
"*i_239";
"*bmean.1_9";
"*bmean_297";
"*bmean.2_12";
"*bmean.3_15";
"*_214";
"*_16";
"*_17";
"*_18";
"*bmean.4_19";
"*bmean.5_22";
"*bmean.6_25";
"*_28";
"*_29";
"*_30";
"*i.7_31";
"*_32";
"*bmean.8_33";
"*bmean.9_36";
"*global_allstats.10_39";
"*bstdev.11_40";
"*bstdev_298";
"*_216";
"*bmean.12_41";
"*bstdev.13_42";
"*_43";
"*bmean.14_44";
"*_45";
"*_218";
"*_222";
"*show_stats";
"*_220";
"*testnum.16_48";
"*global_custrun.17_49";
"*pow";
"*_236";
"*_234";
"*hardware";
"*_232";
"*_230";
"*_228";
"*_226";
"*_224";
"*exit";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"global_min_seconds.20_237" -> "ESCAPED";
"_2" -> "ESCAPED";
"_196" -> "ESCAPED";
"loctime_123" -> "ESCAPED";
"_5" -> "ESCAPED";
"_7" -> "ESCAPED";
"_11" -> "ESCAPED";
"_14" -> "ESCAPED";
"bmean.3_15" -> "ESCAPED";
"fpindex_73" -> "ESCAPED";
"lx_fpindex_67" -> "ESCAPED";
"intindex_70" -> "ESCAPED";
"i_58" -> "ESCAPED";
"lx_intindex_64" -> "ESCAPED";
"lx_memindex_61" -> "ESCAPED";
"bstdev.11_40" -> "ESCAPED";
"_45" -> "ESCAPED";
"_47" -> "ESCAPED";
"_50" -> "ESCAPED";
"_51" -> "ESCAPED";
"global_ofile.18_52" -> "ESCAPED";
"write_to_file.19_53" -> "ESCAPED";
"_54" -> "ESCAPED";
"_55" -> "ESCAPED";
"_56" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "global_min_ticks";
"NONLOCAL" -> "global_min_seconds";
"NONLOCAL" -> "global_allstats";
"NONLOCAL" -> "global_custrun";
"NONLOCAL" -> "global_align";
"NONLOCAL" -> "write_to_file";
"NONLOCAL" -> "mem_array_ents";
"NONLOCAL" -> "tests_to_do";
"i_194" -> "i_194";
"i_194" -> "i_194";
"global_min_seconds" -> "global_min_seconds.20_237";
"NONLOCAL" -> "global_numsortstruct.0+32";
"NONLOCAL" -> "global_numsortstruct.64+144";
"global_min_seconds.20_237" -> "global_numsortstruct.64+144";
"NONLOCAL" -> "global_numsortstruct.256+64";
"NONLOCAL" -> "global_strsortstruct.0+32";
"NONLOCAL" -> "global_strsortstruct.64+144";
"global_min_seconds.20_237" -> "global_strsortstruct.64+144";
"NONLOCAL" -> "global_strsortstruct.256+64";
"NONLOCAL" -> "global_bitopstruct.0+32";
"NONLOCAL" -> "global_bitopstruct.64+256";
"global_min_seconds.20_237" -> "global_bitopstruct.64+256";
"NONLOCAL" -> "global_emfloatstruct.0+32";
"NONLOCAL" -> "global_emfloatstruct.64+256";
"global_min_seconds.20_237" -> "global_emfloatstruct.64+256";
"NONLOCAL" -> "global_fourierstruct.0+32";
"NONLOCAL" -> "global_fourierstruct.64+192";
"global_min_seconds.20_237" -> "global_fourierstruct.64+192";
"NONLOCAL" -> "global_assignstruct.0+32";
"NONLOCAL" -> "global_assignstruct.64+192";
"global_min_seconds.20_237" -> "global_assignstruct.64+192";
"NONLOCAL" -> "global_ideastruct.0+32";
"NONLOCAL" -> "global_ideastruct.64+256";
"global_min_seconds.20_237" -> "global_ideastruct.64+256";
"NONLOCAL" -> "global_huffstruct.0+32";
"NONLOCAL" -> "global_huffstruct.64+256";
"global_min_seconds.20_237" -> "global_huffstruct.64+256";
"NONLOCAL" -> "global_nnetstruct.0+32";
"NONLOCAL" -> "global_nnetstruct.64+192";
"global_min_seconds.20_237" -> "global_nnetstruct.64+192";
"NONLOCAL" -> "global_lustruct.0+32";
"NONLOCAL" -> "global_lustruct.64+192";
"global_min_seconds.20_237" -> "global_lustruct.64+192";
"NONLOCAL" -> "_195";
"_195" -> "_196";
"NONLOCAL" -> "testnum";
"_196" -> "testnum";
"global_allstats" -> "global_allstats.0_4";
"NONLOCAL" -> "loctime_123";
"NONLOCAL" -> "_5";
"NONLOCAL" -> "buffer";
"NONLOCAL" -> "_210";
"NONLOCAL" -> "_208";
"testnum" -> "i_143";
"tests_to_do" -> "_6";
"ftestnames" -> "_7";
"NONLOCAL" -> "ftestnames";
"NONLOCAL" -> "_212";
"funcpointer" -> "_238";
"NONLOCAL" -> "funcpointer";
"bmean_297" -> "bmean.1_9";
"lx_bindex" -> "_10";
"NONLOCAL" -> "lx_bindex";
"bmean_297" -> "_11";
"_10" -> "_11";
"bmean_297" -> "bmean.2_12";
"bindex" -> "_13";
"NONLOCAL" -> "bindex";
"bmean_297" -> "_14";
"_13" -> "_14";
"bmean_297" -> "bmean.3_15";
"NONLOCAL" -> "_214";
"_16" -> "_18";
"_17" -> "_18";
"bmean_297" -> "bmean.4_19";
"bindex" -> "_20";
"bmean_297" -> "_21";
"_20" -> "_21";
"_21" -> "fpindex_73";
"fpindex_73" -> "fpindex_73";
"fpindex_73" -> "fpindex_73";
"fpindex_73" -> "fpindex_73";
"fpindex_73" -> "fpindex_73";
"bmean_297" -> "bmean.5_22";
"lx_bindex" -> "_23";
"bmean_297" -> "_24";
"_23" -> "_24";
"_24" -> "lx_fpindex_67";
"lx_fpindex_67" -> "lx_fpindex_67";
"lx_fpindex_67" -> "lx_fpindex_67";
"lx_fpindex_67" -> "lx_fpindex_67";
"lx_fpindex_67" -> "lx_fpindex_67";
"bmean_297" -> "bmean.6_25";
"bindex" -> "_26";
"bmean_297" -> "_27";
"_26" -> "_27";
"_27" -> "intindex_70";
"intindex_70" -> "intindex_70";
"intindex_70" -> "intindex_70";
"intindex_70" -> "intindex_70";
"intindex_70" -> "intindex_70";
"_28" -> "_30";
"_29" -> "_30";
"i_58" -> "i.7_31";
"i_143" -> "i_58";
"i_58" -> "i_58";
"i_58" -> "i_58";
"i.7_31" -> "_32";
"bmean_297" -> "bmean.8_33";
"lx_bindex" -> "_34";
"bmean_297" -> "_35";
"_34" -> "_35";
"_35" -> "lx_intindex_64";
"lx_intindex_64" -> "lx_intindex_64";
"lx_intindex_64" -> "lx_intindex_64";
"lx_intindex_64" -> "lx_intindex_64";
"lx_intindex_64" -> "lx_intindex_64";
"bmean_297" -> "bmean.9_36";
"lx_bindex" -> "_37";
"bmean_297" -> "_38";
"_37" -> "_38";
"_38" -> "lx_memindex_61";
"lx_memindex_61" -> "lx_memindex_61";
"lx_memindex_61" -> "lx_memindex_61";
"lx_memindex_61" -> "lx_memindex_61";
"lx_memindex_61" -> "lx_memindex_61";
"global_allstats" -> "global_allstats.10_39";
"bstdev_298" -> "bstdev.11_40";
"NONLOCAL" -> "_216";
"bmean_297" -> "bmean.12_41";
"bstdev_298" -> "bstdev.13_42";
"bstdev_298" -> "_43";
"bmean_297" -> "bmean.14_44";
"bmean_297" -> "_45";
"_43" -> "_45";
"NONLOCAL" -> "_218";
"NONLOCAL" -> "_222";
"ftestnames" -> "_47";
"NONLOCAL" -> "_220";
"testnum" -> "testnum.16_48";
"global_custrun" -> "global_custrun.17_49";
"NONLOCAL" -> "_50";
"NONLOCAL" -> "_236";
"NONLOCAL" -> "_51";
"NONLOCAL" -> "_234";
"global_ofile" -> "global_ofile.18_52";
"NONLOCAL" -> "global_ofile";
"write_to_file" -> "write_to_file.19_53";
"NONLOCAL" -> "_54";
"NONLOCAL" -> "_228";
"NONLOCAL" -> "_55";
"NONLOCAL" -> "_226";
"NONLOCAL" -> "_56";
"NONLOCAL" -> "_224";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"argc" [label="\N\n_2 = *argc + 64\l"];
"global_min_ticks";
"global_allstats";
"i_194";
"_2";
"strtol";
"output_string";
"time";
"time_and_date";
"localtime";
"asctime";
"__sprintf_chk";
"buffer";
"i_239";
"bmean.1_9";
"bmean_297";
"bmean.2_12";
"bmean.3_15";
"_16";
"_17";
"_18";
"bmean.4_19";
"bmean.5_22";
"bmean.6_25";
"_28";
"_29";
"_30";
"bmean.8_33";
"bmean.9_36";
"bstdev.11_40";
"bstdev_298";
"bmean.12_41";
"bstdev.13_42";
"bmean.14_44";
"show_stats";
"pow";
"hardware";
"exit";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "time_and_date";
"STOREDANYTHING" -> "buffer";
"argc" -> "ESCAPED";
"global_min_ticks" -> "ESCAPED";
"global_min_ticks" -> "global_allstats";
"global_min_ticks" -> "buffer";
"global_allstats" -> "ESCAPED";
"_2" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = global_min_ticks\l"];
"STOREDANYTHING";
"INTEGER";
"argc" [label="\N\n_2 = *argc + 64\l"];
"global_min_ticks";
"global_allstats";
"i_194";
"_2";
"strtol";
"output_string";
"time";
"time_and_date";
"localtime";
"asctime";
"__sprintf_chk";
"buffer";
"i_239";
"bmean.1_9";
"bmean_297";
"bmean.2_12";
"bmean.3_15";
"_16";
"_17";
"_18";
"bmean.4_19";
"bmean.5_22";
"bmean.6_25";
"_28";
"_29";
"_30";
"bmean.8_33";
"bmean.9_36";
"bstdev.11_40";
"bstdev_298";
"bmean.12_41";
"bstdev.13_42";
"bmean.14_44";
"show_stats";
"pow";
"hardware";
"exit";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "time_and_date";
"STOREDANYTHING" -> "buffer";
"argc" -> "ESCAPED";
"global_min_ticks" -> "ESCAPED";
"global_min_ticks" -> "global_allstats";
"global_min_ticks" -> "_2";
"global_min_ticks" -> "time_and_date";
"global_min_ticks" -> "buffer";
"global_allstats" -> "ESCAPED";
"_2" -> "ESCAPED";
"time_and_date" -> "ESCAPED";
"buffer" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL time_and_date buffer }
NONLOCAL = { ESCAPED NONLOCAL } same as global_min_ticks
STOREDANYTHING = { }
INTEGER = { ANYTHING }
argc = { NONLOCAL }
argv = { NONLOCAL } same as argc
global_min_ticks = { ESCAPED NONLOCAL }
global_min_seconds = { ESCAPED NONLOCAL } same as global_min_ticks
global_allstats = { NULL ESCAPED NONLOCAL }
global_custrun = { NULL ESCAPED NONLOCAL } same as global_allstats
global_align = { ESCAPED NONLOCAL } same as global_min_ticks
write_to_file = { NULL ESCAPED NONLOCAL } same as global_allstats
mem_array_ents = { NULL ESCAPED NONLOCAL } same as global_allstats
tests_to_do = { ESCAPED NONLOCAL } same as global_min_ticks
i_194 = { NULL NONLOCAL }
i_57 = { NULL NONLOCAL } same as i_194
global_min_seconds.20_237 = { ESCAPED NONLOCAL } same as global_min_ticks
global_numsortstruct.0+32 = { NULL ESCAPED NONLOCAL } same as global_allstats
global_numsortstruct.64+144 = { ESCAPED NONLOCAL } same as global_min_ticks
global_numsortstruct.256+64 = { ESCAPED NONLOCAL } same as global_min_ticks
global_strsortstruct.0+32 = { NULL ESCAPED NONLOCAL } same as global_allstats
global_strsortstruct.64+144 = { ESCAPED NONLOCAL } same as global_min_ticks
global_strsortstruct.256+64 = { ESCAPED NONLOCAL } same as global_min_ticks
global_bitopstruct.0+32 = { NULL ESCAPED NONLOCAL } same as global_allstats
global_bitopstruct.64+256 = { ESCAPED NONLOCAL } same as global_min_ticks
global_emfloatstruct.0+32 = { NULL ESCAPED NONLOCAL } same as global_allstats
global_emfloatstruct.64+256 = { ESCAPED NONLOCAL } same as global_min_ticks
global_fourierstruct.0+32 = { NULL ESCAPED NONLOCAL } same as global_allstats
global_fourierstruct.64+192 = { ESCAPED NONLOCAL } same as global_min_ticks
global_assignstruct.0+32 = { NULL ESCAPED NONLOCAL } same as global_allstats
global_assignstruct.64+192 = { ESCAPED NONLOCAL } same as global_min_ticks
global_ideastruct.0+32 = { NULL ESCAPED NONLOCAL } same as global_allstats
global_ideastruct.64+256 = { ESCAPED NONLOCAL } same as global_min_ticks
global_huffstruct.0+32 = { NULL ESCAPED NONLOCAL } same as global_allstats
global_huffstruct.64+256 = { ESCAPED NONLOCAL } same as global_min_ticks
global_nnetstruct.0+32 = { NULL ESCAPED NONLOCAL } same as global_allstats
global_nnetstruct.64+192 = { ESCAPED NONLOCAL } same as global_min_ticks
global_lustruct.0+32 = { NULL ESCAPED NONLOCAL } same as global_allstats
global_lustruct.64+192 = { ESCAPED NONLOCAL } same as global_min_ticks
_2 = { ESCAPED NONLOCAL }
strtol = { }
_195 = { ESCAPED NONLOCAL } same as global_min_ticks
_196 = { ESCAPED NONLOCAL } same as global_min_ticks
testnum = { ESCAPED NONLOCAL } same as global_min_ticks
output_string = { }
global_allstats.0_4 = { NULL ESCAPED NONLOCAL } same as global_allstats
time = { }
time_and_date = { ESCAPED NONLOCAL }
localtime = { }
loctime_123 = { ESCAPED NONLOCAL } same as global_min_ticks
asctime = { }
_5 = { ESCAPED NONLOCAL } same as global_min_ticks
__sprintf_chk = { }
buffer = { ESCAPED NONLOCAL }
_210 = { ESCAPED NONLOCAL } same as global_min_ticks
_208 = { ESCAPED NONLOCAL } same as global_min_ticks
_206 = { NONLOCAL } same as argc
_204 = { NONLOCAL } same as argc
_202 = { NONLOCAL } same as argc
_200 = { NONLOCAL } same as argc
_198 = { NONLOCAL } same as argc
i_143 = { ESCAPED NONLOCAL } same as global_min_ticks
_6 = { ESCAPED NONLOCAL } same as global_min_ticks
_7 = { ESCAPED NONLOCAL } same as global_min_ticks
ftestnames = { ESCAPED NONLOCAL } same as global_min_ticks
_212 = { ESCAPED NONLOCAL } same as global_min_ticks
_238 = { ESCAPED NONLOCAL } same as global_min_ticks
funcpointer = { ESCAPED NONLOCAL } same as global_min_ticks
i_1 = { NONLOCAL } same as argc
i_239 = { NULL }
bmean.1_9 = { }
bmean_297 = { }
_10 = { ESCAPED NONLOCAL } same as global_min_ticks
lx_bindex = { ESCAPED NONLOCAL } same as global_min_ticks
_11 = { ESCAPED NONLOCAL } same as global_min_ticks
bmean.2_12 = { }
_13 = { ESCAPED NONLOCAL } same as global_min_ticks
bindex = { ESCAPED NONLOCAL } same as global_min_ticks
_14 = { ESCAPED NONLOCAL } same as global_min_ticks
bmean.3_15 = { }
_214 = { ESCAPED NONLOCAL } same as global_min_ticks
_16 = { }
_17 = { }
_18 = { }
bmean.4_19 = { }
_20 = { ESCAPED NONLOCAL } same as global_min_ticks
_21 = { ESCAPED NONLOCAL } same as global_min_ticks
fpindex_181 = { ESCAPED NONLOCAL } same as global_min_ticks
fpindex_73 = { ESCAPED NONLOCAL } same as global_min_ticks
bmean.5_22 = { }
_23 = { ESCAPED NONLOCAL } same as global_min_ticks
_24 = { ESCAPED NONLOCAL } same as global_min_ticks
lx_fpindex_182 = { ESCAPED NONLOCAL } same as global_min_ticks
lx_fpindex_67 = { ESCAPED NONLOCAL } same as global_min_ticks
bmean.6_25 = { }
_26 = { ESCAPED NONLOCAL } same as global_min_ticks
_27 = { ESCAPED NONLOCAL } same as global_min_ticks
intindex_178 = { ESCAPED NONLOCAL } same as global_min_ticks
intindex_70 = { ESCAPED NONLOCAL } same as global_min_ticks
_28 = { }
_29 = { }
_30 = { }
i.7_31 = { ESCAPED NONLOCAL } same as global_min_ticks
i_58 = { ESCAPED NONLOCAL } same as global_min_ticks
_32 = { ESCAPED NONLOCAL } same as global_min_ticks
bmean.8_33 = { }
_34 = { ESCAPED NONLOCAL } same as global_min_ticks
_35 = { ESCAPED NONLOCAL } same as global_min_ticks
lx_intindex_180 = { ESCAPED NONLOCAL } same as global_min_ticks
lx_intindex_64 = { ESCAPED NONLOCAL } same as global_min_ticks
bmean.9_36 = { }
_37 = { ESCAPED NONLOCAL } same as global_min_ticks
_38 = { ESCAPED NONLOCAL } same as global_min_ticks
lx_memindex_179 = { ESCAPED NONLOCAL } same as global_min_ticks
lx_memindex_61 = { ESCAPED NONLOCAL } same as global_min_ticks
lx_memindex_59 = { ESCAPED NONLOCAL } same as global_min_ticks
lx_intindex_62 = { ESCAPED NONLOCAL } same as global_min_ticks
lx_fpindex_65 = { ESCAPED NONLOCAL } same as global_min_ticks
intindex_68 = { ESCAPED NONLOCAL } same as global_min_ticks
fpindex_71 = { ESCAPED NONLOCAL } same as global_min_ticks
global_allstats.10_39 = { NULL ESCAPED NONLOCAL } same as global_allstats
bstdev.11_40 = { }
bstdev_298 = { }
_216 = { ESCAPED NONLOCAL } same as global_min_ticks
bmean.12_41 = { }
bstdev.13_42 = { }
_43 = { NONLOCAL } same as argc
bmean.14_44 = { }
_45 = { NONLOCAL } same as argc
_218 = { ESCAPED NONLOCAL } same as global_min_ticks
_222 = { ESCAPED NONLOCAL } same as global_min_ticks
show_stats = { }
_47 = { ESCAPED NONLOCAL } same as global_min_ticks
_220 = { ESCAPED NONLOCAL } same as global_min_ticks
lx_memindex_60 = { ESCAPED NONLOCAL } same as global_min_ticks
lx_intindex_63 = { ESCAPED NONLOCAL } same as global_min_ticks
lx_fpindex_66 = { ESCAPED NONLOCAL } same as global_min_ticks
intindex_69 = { ESCAPED NONLOCAL } same as global_min_ticks
fpindex_72 = { ESCAPED NONLOCAL } same as global_min_ticks
i_192 = { ESCAPED NONLOCAL } same as global_min_ticks
testnum.16_48 = { ESCAPED NONLOCAL } same as global_min_ticks
global_custrun.17_49 = { NULL ESCAPED NONLOCAL } same as global_allstats
pow = { }
_50 = { ESCAPED NONLOCAL } same as global_min_ticks
_236 = { ESCAPED NONLOCAL } same as global_min_ticks
_51 = { ESCAPED NONLOCAL } same as global_min_ticks
_234 = { ESCAPED NONLOCAL } same as global_min_ticks
global_ofile.18_52 = { ESCAPED NONLOCAL } same as global_min_ticks
global_ofile = { ESCAPED NONLOCAL } same as global_min_ticks
write_to_file.19_53 = { NULL ESCAPED NONLOCAL } same as global_allstats
hardware = { }
_232 = { NONLOCAL } same as argc
_230 = { NONLOCAL } same as argc
_54 = { ESCAPED NONLOCAL } same as global_min_ticks
_228 = { ESCAPED NONLOCAL } same as global_min_ticks
_55 = { ESCAPED NONLOCAL } same as global_min_ticks
_226 = { ESCAPED NONLOCAL } same as global_min_ticks
_56 = { ESCAPED NONLOCAL } same as global_min_ticks
_224 = { ESCAPED NONLOCAL } same as global_min_ticks
exit = { }


Alias information for main

Aliased symbols

time_and_date, UID D.4763, time_t, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.4679 D.4763 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_47, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
global_ofile.18_52, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
argv_114(D), points-to non-local, points-to NULL, points-to vars: { }
loctime_123, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_238, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

main (int argc, char * * argv)
{
  int i;
  int D.5138;
  int D.5134;
  int D.5131;
  int D.5128;
  int D.5125;
  int D.5122;
  int D.5119;
  int D.5116;
  int D.5113;
  int D.5110;
  int D.5107;
  int D.5104;
  int D.5101;
  int D.5098;
  int D.5095;
  int D.5092;
  int D.5089;
  int D.5086;
  int D.5083;
  int D.5080;
  int D.5077;
  int D.5074;
  long unsigned int bnumrun;
  double fpindex;
  double intindex;
  double lx_fpindex;
  double lx_intindex;
  double lx_memindex;
  double bstdev;
  double bmean;
  struct tm * loctime;
  time_t time_and_date;
  int i;
  char * _2;
  int global_allstats.0_4;
  char * _5;
  int _6;
  char * _7;
  double bmean.1_9;
  double _10;
  double _11;
  double bmean.2_12;
  double _13;
  double _14;
  double bmean.3_15;
  _Bool _16;
  _Bool _17;
  _Bool _18;
  double bmean.4_19;
  double _20;
  double _21;
  double bmean.5_22;
  double _23;
  double _24;
  double bmean.6_25;
  double _26;
  double _27;
  _Bool _28;
  _Bool _29;
  _Bool _30;
  unsigned int i.7_31;
  unsigned int _32;
  double bmean.8_33;
  double _34;
  double _35;
  double bmean.9_36;
  double _37;
  double _38;
  int global_allstats.10_39;
  double bstdev.11_40;
  double bmean.12_41;
  double bstdev.13_42;
  double _43;
  double bmean.14_44;
  double _45;
  char * _47;
  int testnum.16_48;
  int global_custrun.17_49;
  double _50;
  double _51;
  struct FILE * global_ofile.18_52;
  int write_to_file.19_53;
  double _54;
  double _55;
  double _56;
  long int _195;
  int _196;
  int _198;
  int _200;
  int _202;
  int _204;
  int _206;
  int _208;
  int _210;
  int _212;
  int _214;
  int _216;
  int _218;
  int _220;
  int _222;
  int _224;
  int _226;
  int _228;
  int _230;
  int _232;
  int _234;
  int _236;
  long unsigned int global_min_seconds.20_237;
  void (*<T8d0>) (void) _238;

  <bb 2> [0.00%]:
  global_min_ticks = 60;
  global_min_seconds = 5;
  global_allstats = 0;
  global_custrun = 0;
  global_align = 8;
  write_to_file = 0;
  mem_array_ents = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  tests_to_do[i_57] = 1;
  i_194 = i_57 + 1;

  <bb 4> [0.00%]:
  # i_57 = PHI <0(2), i_194(3)>
  if (i_57 <= 9)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [100.00%]:
  global_min_seconds.20_237 = global_min_seconds;
  global_numsortstruct.request_secs = global_min_seconds.20_237;
  global_strsortstruct.request_secs = global_min_seconds.20_237;
  global_bitopstruct.request_secs = global_min_seconds.20_237;
  global_emfloatstruct.request_secs = global_min_seconds.20_237;
  global_fourierstruct.request_secs = global_min_seconds.20_237;
  global_assignstruct.request_secs = global_min_seconds.20_237;
  global_ideastruct.request_secs = global_min_seconds.20_237;
  global_huffstruct.request_secs = global_min_seconds.20_237;
  global_nnetstruct.request_secs = global_min_seconds.20_237;
  global_lustruct.request_secs = global_min_seconds.20_237;
  global_numsortstruct.adjust = 0;
  global_numsortstruct.arraysize = 8111;
  global_strsortstruct.adjust = 0;
  global_strsortstruct.arraysize = 8111;
  global_bitopstruct.adjust = 0;
  global_bitopstruct.bitfieldarraysize = 16384;
  global_emfloatstruct.adjust = 0;
  global_emfloatstruct.arraysize = 3000;
  global_fourierstruct.adjust = 0;
  global_assignstruct.adjust = 0;
  global_ideastruct.adjust = 0;
  global_ideastruct.arraysize = 4000;
  global_huffstruct.adjust = 0;
  global_huffstruct.arraysize = 5000;
  global_nnetstruct.adjust = 0;
  global_lustruct.adjust = 0;
  if (argc_113(D) == 2)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [100.00%]:
  _2 = MEM[(char * *)argv_114(D) + 8B];
  _195 = strtol (_2, 0B, 10);
  _196 = (int) _195;
  testnum = _196;

  <bb 7> [0.00%]:
  output_string ("\nBYTEmark* Native Mode Benchmark ver. 2 (10/95)\n");
  output_string ("Index-split by Andrew D. Balsa (11/97)\n");
  output_string ("Linux/Unix* port by Uwe F. Mayer (12/96,11/97)\n");
  global_allstats.0_4 = global_allstats;
  if (global_allstats.0_4 != 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [100.00%]:
  output_string ("\n");
  output_string ("============================== ALL STATISTICS ===============================\n");
  time (&time_and_date);
  loctime_123 = localtime (&time_and_date);
  _5 = asctime (loctime_123);
  _210 = __builtin___sprintf_chk (&buffer, 1, 1024, "**Date and time of benchmark run: %s", _5);
  output_string (&buffer);
  _208 = __builtin___sprintf_chk (&buffer, 1, 1024, "**Sizeof: char:%u short:%u int:%u long:%u u8:%u u16:%u u32:%u int32:%u\n", 1, 2, 4, 8, 1, 2, 4, 4);
  output_string (&buffer);
  __builtin_memcpy (&buffer, "**System used for compilation:\n", 32);
  _206 = 31;
  output_string (&buffer);
  __builtin_memcpy (&buffer, "**Linux elvenado 4.15.0-112-generic #113-Ubuntu SMP Thu Jul 9 23:41:39 UTC 2020 \n", 82);
  _204 = 81;
  output_string (&buffer);
  __builtin_memcpy (&buffer, "**C compiler: gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04) \n", 64);
  _202 = 63;
  output_string (&buffer);
  __builtin_memcpy (&buffer, "**libc: libc-2.27.so\n", 22);
  _200 = 21;
  output_string (&buffer);
  __builtin_memcpy (&buffer, "**Date of compilation: Mon 24 Aug 10:41:27 BST 2020\n", 53);
  _198 = 52;
  output_string (&buffer);
  output_string ("=============================================================================\n");

  <bb 9> [0.00%]:
  output_string ("\nTEST                : Iterations/sec.  : Old Index   : New Index\n");
  output_string ("                    :                  : Pentium 90* : AMD K6/233*\n");
  output_string ("--------------------:------------------:-------------:------------\n");
  i_143 = testnum;
  goto <bb 27>; [0.00%]

  <bb 10> [0.00%]:
  _6 = tests_to_do[i_58];
  if (_6 != 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 11> [100.00%]:
  _7 = ftestnames[i_58];
  _212 = __builtin___sprintf_chk (&buffer, 1, 1024, "%s    :", _7);
  output_string (&buffer);
  goto <bb 14>; [100.00%]

  <bb 12> [50.00%]:
  _238 = funcpointer[i_58];
  _238 ();

  <bb 13> [50.00%]:
  # i_1 = PHI <1(12)>
  goto <bb 15>; [100.00%]

  <bb 14> [50.00%]:
  # i_239 = PHI <0(11)>
  if (i_239 <= 0)
    goto <bb 12>; [80.00%]
  else
    goto <bb 15>; [20.00%]

  <bb 15> [100.00%]:
  bmean.1_9 = bmean_297(D);
  _10 = lx_bindex[i_58];
  _11 = bmean_297(D) / _10;
  bmean.2_12 = bmean_297(D);
  _13 = bindex[i_58];
  _14 = bmean_297(D) / _13;
  bmean.3_15 = bmean_297(D);
  _214 = __builtin___sprintf_chk (&buffer, 1, 1024, " %15.5g  :  %9.2f  :  %9.2f\n", bmean.3_15, _14, _11);
  output_string (&buffer);
  _16 = i_58 == 4;
  _17 = i_58 == 8;
  _18 = _16 | _17;
  if (_18 != 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 16> [0.00%]:
  if (i_58 == 9)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  bmean.4_19 = bmean_297(D);
  _20 = bindex[i_58];
  _21 = bmean_297(D) / _20;
  fpindex_181 = _21 * fpindex_73;
  bmean.5_22 = bmean_297(D);
  _23 = lx_bindex[i_58];
  _24 = bmean_297(D) / _23;
  lx_fpindex_182 = _24 * lx_fpindex_67;
  goto <bb 22>; [0.00%]

  <bb 18> [0.00%]:
  bmean.6_25 = bmean_297(D);
  _26 = bindex[i_58];
  _27 = bmean_297(D) / _26;
  intindex_178 = _27 * intindex_70;
  _28 = i_58 == 0;
  _29 = i_58 == 3;
  _30 = _28 | _29;
  if (_30 != 0)
    goto <bb 20>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 19> [0.00%]:
  i.7_31 = (unsigned int) i_58;
  _32 = i.7_31 + 4294967290;
  if (_32 <= 1)
    goto <bb 20>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 20> [0.00%]:
  bmean.8_33 = bmean_297(D);
  _34 = lx_bindex[i_58];
  _35 = bmean_297(D) / _34;
  lx_intindex_180 = _35 * lx_intindex_64;
  goto <bb 22>; [0.00%]

  <bb 21> [0.00%]:
  bmean.9_36 = bmean_297(D);
  _37 = lx_bindex[i_58];
  _38 = bmean_297(D) / _37;
  lx_memindex_179 = _38 * lx_memindex_61;

  <bb 22> [0.00%]:
  # lx_memindex_59 = PHI <lx_memindex_61(17), lx_memindex_61(20), lx_memindex_179(21)>
  # lx_intindex_62 = PHI <lx_intindex_64(17), lx_intindex_180(20), lx_intindex_64(21)>
  # lx_fpindex_65 = PHI <lx_fpindex_182(17), lx_fpindex_67(20), lx_fpindex_67(21)>
  # intindex_68 = PHI <intindex_70(17), intindex_178(20), intindex_178(21)>
  # fpindex_71 = PHI <fpindex_181(17), fpindex_73(20), fpindex_73(21)>
  global_allstats.10_39 = global_allstats;
  if (global_allstats.10_39 != 0)
    goto <bb 23>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 23> [100.00%]:
  bstdev.11_40 = bstdev_298(D);
  _216 = __builtin___sprintf_chk (&buffer, 1, 1024, "  Absolute standard deviation: %g\n", bstdev.11_40);
  output_string (&buffer);
  bmean.12_41 = bmean_297(D);
  if (bmean_297(D) > 1.00000000000000001999189980260288361964776078853415942018e-100)
    goto <bb 24>; [0.00%]
  else
    goto <bb 25>; [0.00%]

  <bb 24> [100.00%]:
  bstdev.13_42 = bstdev_298(D);
  _43 = bstdev_298(D) * 1.0e+2;
  bmean.14_44 = bmean_297(D);
  _45 = _43 / bmean_297(D);
  _218 = __builtin___sprintf_chk (&buffer, 1, 1024, "  Relative standard deviation: %g %%\n", _45);
  output_string (&buffer);

  <bb 25> [100.00%]:
  _222 = __builtin___sprintf_chk (&buffer, 1, 1024, "  Number of runs: %lu\n", 5);
  output_string (&buffer);
  show_stats (i_58);
  _47 = ftestnames[i_58];
  _220 = __builtin___sprintf_chk (&buffer, 1, 1024, "Done with %s\n\n", _47);
  output_string (&buffer);

  <bb 26> [0.00%]:
  # lx_memindex_60 = PHI <lx_memindex_61(10), lx_memindex_59(22), lx_memindex_59(25)>
  # lx_intindex_63 = PHI <lx_intindex_64(10), lx_intindex_62(22), lx_intindex_62(25)>
  # lx_fpindex_66 = PHI <lx_fpindex_67(10), lx_fpindex_65(22), lx_fpindex_65(25)>
  # intindex_69 = PHI <intindex_70(10), intindex_68(22), intindex_68(25)>
  # fpindex_72 = PHI <fpindex_73(10), fpindex_71(22), fpindex_71(25)>
  i_192 = i_58 + 1;

  <bb 27> [0.00%]:
  # i_58 = PHI <i_143(9), i_192(26)>
  # lx_memindex_61 = PHI <1.0e+0(9), lx_memindex_60(26)>
  # lx_intindex_64 = PHI <1.0e+0(9), lx_intindex_63(26)>
  # lx_fpindex_67 = PHI <1.0e+0(9), lx_fpindex_66(26)>
  # intindex_70 = PHI <1.0e+0(9), intindex_69(26)>
  # fpindex_73 = PHI <1.0e+0(9), fpindex_72(26)>
  testnum.16_48 = testnum;
  if (testnum.16_48 >= i_58)
    goto <bb 10>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 28> [0.00%]:
  global_custrun.17_49 = global_custrun;
  if (global_custrun.17_49 == 0)
    goto <bb 29>; [0.00%]
  else
    goto <bb 30>; [0.00%]

  <bb 29> [100.00%]:
  output_string ("==========================ORIGINAL BYTEMARK RESULTS==========================\n");
  _50 = pow (intindex_70, 1.428570000000000117523768494720570743083953857421875e-1);
  _236 = __builtin___sprintf_chk (&buffer, 1, 1024, "INTEGER INDEX       : %.3f\n", _50);
  output_string (&buffer);
  _51 = pow (fpindex_73, 3.3333000000000001517008740847813896834850311279296875e-1);
  _234 = __builtin___sprintf_chk (&buffer, 1, 1024, "FLOATING-POINT INDEX: %.3f\n", _51);
  output_string (&buffer);
  output_string ("Baseline (MSDOS*)   : Pentium* 90, 256 KB L2-cache, Watcom* compiler 10.0\n");
  output_string ("==============================LINUX DATA BELOW===============================\n");
  global_ofile.18_52 = global_ofile;
  write_to_file.19_53 = write_to_file;
  hardware (write_to_file.19_53, global_ofile.18_52);
  __builtin_memcpy (&buffer, "C compiler          : gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04) \n", 72);
  _232 = 71;
  output_string (&buffer);
  __builtin_memcpy (&buffer, "libc                : libc-2.27.so\n", 36);
  _230 = 35;
  output_string (&buffer);
  _54 = pow (lx_memindex_61, 3.33333333299999978738270556277711875736713409423828125e-1);
  _228 = __builtin___sprintf_chk (&buffer, 1, 1024, "MEMORY INDEX        : %.3f\n", _54);
  output_string (&buffer);
  _55 = pow (lx_intindex_64, 2.5e-1);
  _226 = __builtin___sprintf_chk (&buffer, 1, 1024, "INTEGER INDEX       : %.3f\n", _55);
  output_string (&buffer);
  _56 = pow (lx_fpindex_67, 3.33333333299999978738270556277711875736713409423828125e-1);
  _224 = __builtin___sprintf_chk (&buffer, 1, 1024, "FLOATING-POINT INDEX: %.3f\n", _56);
  output_string (&buffer);
  output_string ("Baseline (LINUX)    : AMD K6/233*, 512 KB L2-cache, gcc 2.7.2.3, libc-5.4.38\n");
  output_string ("* Trademarks are property of their respective holder.\n");

  <bb 30> [0.00%]:
  exit (0);

}


