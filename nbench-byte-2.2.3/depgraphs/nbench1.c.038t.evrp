
;; Function printf (printf, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after Early VRP:

__fmt_2(D): ~[0B, 0B]
_4: VARYING


__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> [0.00%]:
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function bzero (bzero, funcdef_no=42, decl_uid=720, cgraph_uid=42, symbol_order=42)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after Early VRP:

_1: VARYING
__dest_3(D): ~[0B, 0B]
__len_4(D): VARYING


__attribute__((__artificial__, __gnu_inline__, __always_inline__, __leaf__, __nothrow__))
bzero (void * __dest, size_t __len)
{
  long unsigned int _1;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__dest_3(D), 0);
  __builtin___memset_chk (__dest_3(D), 0, __len_4(D), _1);
  return;

}



;; Function NumSift (NumSift, funcdef_no=56, decl_uid=4506, cgraph_uid=56, symbol_order=81)

Disambiguating loop 1 with multiple latches
Merged latch edges of loop 1
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 11 10
;;
;; Loop 1
;;  header 11, latch 9
;;  depth 1, outer 0
;;  nodes: 11 9 8 7 6 3 4 5
;; 2 succs { 11 }
;; 3 succs { 4 6 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 11 }
;; 11 succs { 3 10 }
;; 10 succs { 1 }

Value ranges after Early VRP:

_1: [0, +INF]
_2: VARYING
_3: VARYING
_4: [1, +INF]
_5: [0, +INF]
_6: VARYING
_7: VARYING
_8: [0, +INF]
_9: VARYING
_10: VARYING
_11: [0, +INF]
_12: VARYING
_13: VARYING
_23: [0, +INF]
i_24: VARYING
k_25: VARYING
i_27(D): VARYING
j_29(D): VARYING
i_30: VARYING
array_31(D): VARYING
i_33: [0, +INF]


NumSift (farlong * array, long unsigned int i, long unsigned int j)
{
  long int temp;
  long unsigned int k;
  long unsigned int _1;
  farlong * _2;
  long int _3;
  sizetype _4;
  sizetype _5;
  farlong * _6;
  long int _7;
  long unsigned int _8;
  farlong * _9;
  long int _10;
  long unsigned int _11;
  farlong * _12;
  long int _13;
  long unsigned int _23;

  <bb 2> [0.00%]:
  goto <bb 10>; [0.00%]

  <bb 3> [0.00%]:
  if (_23 < j_29(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  _1 = _23 * 8;
  _2 = array_31(D) + _1;
  _3 = *_2;
  _4 = _23 + 1;
  _5 = _4 * 8;
  _6 = array_31(D) + _5;
  _7 = *_6;
  if (_3 < _7)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:

  <bb 6> [0.00%]:
  # k_25 = PHI <_23(3), _23(4), _4(5)>
  _8 = i_24 * 8;
  _9 = array_31(D) + _8;
  _10 = *_9;
  _11 = k_25 * 8;
  _12 = array_31(D) + _11;
  _13 = *_12;
  if (_10 < _13)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  *_12 = _10;
  *_9 = _13;
  goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  i_33 = j_29(D) + 1;

  <bb 9> [0.00%]:
  # i_30 = PHI <i_33(8), k_25(7)>

  <bb 10> [0.00%]:
  # i_24 = PHI <i_30(9), i_27(D)(2)>
  _23 = i_24 * 2;
  if (_23 <= j_29(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  return;

}



;; Function NumHeapSort (NumHeapSort, funcdef_no=55, decl_uid=4502, cgraph_uid=55, symbol_order=80)

Created preheader block for loop 2
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 8 5 6 7
;;
;; Loop 2
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 8 }
;; 8 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 1 }

Value ranges after Early VRP:

_1: VARYING
_2: [0, +INF]
_3: VARYING
_4: VARYING
i_8: [0, i_13]
i_9: [0, top_12(D)]
top_12(D): VARYING
i_13: [0, 9223372036854775807]
array_16(D): VARYING
bottom_17(D): VARYING
temp_19: [0, +INF]
i_22: [0, 18446744073709551614]
i_24: [0, 18446744073709551614]


Removing basic block 8
NumHeapSort (farlong * array, long unsigned int bottom, long unsigned int top)
{
  long unsigned int i;
  long unsigned int temp;
  long int _1;
  long unsigned int _2;
  farlong * _3;
  long int _4;

  <bb 2> [0.00%]:
  i_13 = top_12(D) / 2;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  NumSift (array_16(D), i_8, top_12(D));
  i_24 = i_8 + 18446744073709551615;

  <bb 4> [0.00%]:
  # i_8 = PHI <i_13(2), i_24(3)>
  if (i_8 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  NumSift (array_16(D), bottom_17(D), i_9);
  _1 = *array_16(D);
  temp_19 = (long unsigned int) _1;
  _2 = i_9 * 8;
  _3 = array_16(D) + _2;
  _4 = *_3;
  *array_16(D) = _4;
  *_3 = _1;
  i_22 = i_9 + 18446744073709551615;

  <bb 6> [0.00%]:
  # i_9 = PHI <top_12(D)(4), i_22(5)>
  if (i_9 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function ToggleBitRun (ToggleBitRun, funcdef_no=66, decl_uid=4553, cgraph_uid=66, symbol_order=91)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;;
;; Loop 1
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6 4 5 3
;; 2 succs { 7 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 3 8 }
;; 8 succs { 1 }

Value ranges after Early VRP:

_1: [0, 2305843009213693944]
_2: VARYING
_3: VARYING
_4: [0, 63]
_5: VARYING
_6: [0, +INF]
_9: [0, +INF]
_10: [0, 2305843009213693944]
_11: VARYING
_12: VARYING
_13: [0, 63]
_14: VARYING
_15: VARYING
_16: [0, +INF]
_19: [0, +INF]
bit_addr_21: VARYING
nbits_22: [0, nbits_26(D)]
bit_addr_25(D): VARYING
nbits_26(D): VARYING
nbits_28: [0, +INF]
bindex_29: [0, 288230376151711743]
bitnumb_30: [0, 63]
val_31(D): VARYING
bitmap_32(D): VARYING
bit_addr_35: [0, +INF]


ToggleBitRun (farulong * bitmap, long unsigned int bit_addr, long unsigned int nbits, unsigned int val)
{
  long unsigned int bitnumb;
  long unsigned int bindex;
  long unsigned int _1;
  farulong * _2;
  long unsigned int _3;
  unsigned int _4;
  long int _5;
  long unsigned int _6;
  long unsigned int _9;
  long unsigned int _10;
  farulong * _11;
  long unsigned int _12;
  unsigned int _13;
  long int _14;
  long int _15;
  long unsigned int _16;
  long unsigned int _19;

  <bb 2> [0.00%]:
  goto <bb 7>; [0.00%]

  <bb 3> [0.00%]:
  bindex_29 = bit_addr_21 >> 6;
  bitnumb_30 = bit_addr_21 & 63;
  if (val_31(D) != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _1 = bindex_29 * 8;
  _2 = bitmap_32(D) + _1;
  _3 = *_2;
  _4 = (unsigned int) bitnumb_30;
  _5 = 1 << _4;
  _6 = (long unsigned int) _5;
  _9 = _3 | _6;
  *_2 = _9;
  goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _10 = bindex_29 * 8;
  _11 = bitmap_32(D) + _10;
  _12 = *_11;
  _13 = (unsigned int) bitnumb_30;
  _14 = 1 << _13;
  _15 = ~_14;
  _16 = (long unsigned int) _15;
  _19 = _12 & _16;
  *_11 = _19;

  <bb 6> [0.00%]:
  bit_addr_35 = bit_addr_21 + 1;

  <bb 7> [0.00%]:
  # bit_addr_21 = PHI <bit_addr_25(D)(2), bit_addr_35(6)>
  # nbits_22 = PHI <nbits_26(D)(2), nbits_28(6)>
  nbits_28 = nbits_22 + 18446744073709551615;
  if (nbits_22 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  return;

}



;; Function FlipBitRun (FlipBitRun, funcdef_no=67, decl_uid=4557, cgraph_uid=67, symbol_order=92)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

Value ranges after Early VRP:

_1: [0, 2305843009213693944]
_2: VARYING
_3: VARYING
_4: [0, 63]
_5: VARYING
_6: [0, +INF]
_9: [0, +INF]
bit_addr_11: VARYING
nbits_12: [0, nbits_15(D)]
bit_addr_14(D): VARYING
nbits_15(D): VARYING
nbits_17: [0, +INF]
bindex_18: [0, 288230376151711743]
bitnumb_19: [0, 63]
bitmap_20(D): VARYING
bit_addr_22: [0, +INF]


FlipBitRun (farulong * bitmap, long unsigned int bit_addr, long unsigned int nbits)
{
  long unsigned int bitnumb;
  long unsigned int bindex;
  long unsigned int _1;
  farulong * _2;
  long unsigned int _3;
  unsigned int _4;
  long int _5;
  long unsigned int _6;
  long unsigned int _9;

  <bb 2> [0.00%]:
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  bindex_18 = bit_addr_11 >> 6;
  bitnumb_19 = bit_addr_11 & 63;
  _1 = bindex_18 * 8;
  _2 = bitmap_20(D) + _1;
  _3 = *_2;
  _4 = (unsigned int) bitnumb_19;
  _5 = 1 << _4;
  _6 = (long unsigned int) _5;
  _9 = _3 ^ _6;
  *_2 = _9;
  bit_addr_22 = bit_addr_11 + 1;

  <bb 4> [0.00%]:
  # bit_addr_11 = PHI <bit_addr_14(D)(2), bit_addr_22(3)>
  # nbits_12 = PHI <nbits_15(D)(2), nbits_17(3)>
  nbits_17 = nbits_12 + 18446744073709551615;
  if (nbits_12 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  return;

}



;; Function CopyToAssign (CopyToAssign, funcdef_no=77, decl_uid=4611, cgraph_uid=77, symbol_order=102)

Created preheader block for loop 2
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 8 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 4 8 3
;;
;; Loop 2
;;  header 4, latch 3
;;  depth 2, outer 1
;;  nodes: 4 3
;; 2 succs { 6 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 8 7 }
;; 8 succs { 4 }
;; 7 succs { 1 }

Value ranges after Early VRP:

_1: [0, 100]
_2: [0, 80800]
_3: VARYING
_4: [0, 100]
_7: VARYING
_9: VARYING
i_12: [0, 101]
j_13: [0, 101]
i_19: [1, 101]
arrayfrom_20(D): VARYING
arrayto_21(D): VARYING
j_23: [1, 101]


Removing basic block 8
CopyToAssign (farlong[101] * arrayfrom, farlong[101] * arrayto)
{
  short unsigned int j;
  short unsigned int i;
  long unsigned int _1;
  long unsigned int _2;
  farlong[101] * _3;
  int _4;
  farlong[101] * _7;
  long int _9;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_12;
  _2 = _1 * 808;
  _3 = arrayfrom_20(D) + _2;
  _4 = (int) j_13;
  _7 = arrayto_21(D) + _2;
  _9 = *_3[_4];
  *_7[_4] = _9;
  j_23 = j_13 + 1;

  <bb 4> [0.00%]:
  # j_13 = PHI <0(6), j_23(3)>
  if (j_13 <= 100)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  i_19 = i_12 + 1;

  <bb 6> [0.00%]:
  # i_12 = PHI <0(2), i_19(5)>
  if (i_12 <= 100)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function calc_minimum_costs (calc_minimum_costs, funcdef_no=79, decl_uid=4615, cgraph_uid=79, symbol_order=104)

Created preheader block for loop 2
Created preheader block for loop 4
Created preheader block for loop 3
Created preheader block for loop 6
Created preheader block for loop 5
;; 7 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 24 7 8 9 10 25 21 11 12 13 14 15 22 16 17 18 19 23 20
;;
;; Loop 2
;;  header 19, latch 18
;;  depth 1, outer 0
;;  nodes: 19 18 15 17 22 16 14 23 13 11 12
;;
;; Loop 4
;;  header 17, latch 16
;;  depth 2, outer 2
;;  nodes: 17 16
;;
;; Loop 3
;;  header 14, latch 13
;;  depth 2, outer 2
;;  nodes: 14 13 11 12
;;
;; Loop 1
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9 8 24 7 6 25 5 3 4
;;
;; Loop 6
;;  header 8, latch 7
;;  depth 2, outer 1
;;  nodes: 8 7
;;
;; Loop 5
;;  header 6, latch 5
;;  depth 2, outer 1
;;  nodes: 6 5 3 4
;; 2 succs { 10 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 24 }
;; 24 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 10 }
;; 10 succs { 25 21 }
;; 25 succs { 6 }
;; 21 succs { 19 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 14 }
;; 14 succs { 11 15 }
;; 15 succs { 22 18 }
;; 22 succs { 17 }
;; 16 succs { 17 }
;; 17 succs { 16 18 }
;; 18 succs { 19 }
;; 19 succs { 23 20 }
;; 23 succs { 14 }
;; 20 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

currentmin_38 -> { currentmin_52 }
currentmin_39 -> { currentmin_54 }
Incremental SSA update started at block: 10
Number of blocks in CFG: 26
Number of blocks to update: 10 ( 38%)



Value ranges after Early VRP:

_1: [0, 100]
_2: [0, 80800]
_3: VARYING
_4: [0, 100]
_5: VARYING
_11: [0, 100]
_12: [0, 80800]
_13: VARYING
_14: [0, 100]
_15: VARYING
_20: VARYING
_23: [0, 100]
_24: [0, 80800]
_25: VARYING
_26: [0, 100]
_27: VARYING
_33: [0, 100]
_34: [0, 80800]
_35: VARYING
_36: [0, 100]
_37: VARYING
currentmin_38: [currentmin_52, currentmin_52]
currentmin_39: [currentmin_54, currentmin_54]
_42: VARYING
i_45: [0, 101]
i_46: [0, 101]
i_47: [0, 101]
j_48: [0, 101]
j_49: [0, 101]
j_50: [0, 101]
currentmin_51: VARYING
currentmin_52: VARYING
currentmin_53: VARYING
currentmin_54: VARYING
tableau_66(D): VARYING
i_68: [1, 101]
j_69: [1, 101]
i_71: [1, 101]
i_75: [1, 101]
j_77: [1, 101]
j_79: [1, 101]


Removing basic block 21
Removing basic block 22
Removing basic block 23
Removing basic block 25
calc_minimum_costs (long int[101] * tableau)
{
  long int currentmin;
  short unsigned int j;
  short unsigned int i;
  long unsigned int _1;
  long unsigned int _2;
  long int[101] * _3;
  int _4;
  long int _5;
  long unsigned int _11;
  long unsigned int _12;
  long int[101] * _13;
  int _14;
  long int _15;
  long int _20;
  long unsigned int _23;
  long unsigned int _24;
  long int[101] * _25;
  int _26;
  long int _27;
  long unsigned int _33;
  long unsigned int _34;
  long int[101] * _35;
  int _36;
  long int _37;
  long int _42;

  <bb 2> [0.00%]:
  goto <bb 11>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_45;
  _2 = _1 * 808;
  _3 = tableau_66(D) + _2;
  _4 = (int) j_48;
  _5 = *_3[_4];
  if (_5 < currentmin_52)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:

  <bb 5> [0.00%]:
  # currentmin_51 = PHI <currentmin_52(3), _5(4)>
  j_79 = j_48 + 1;

  <bb 6> [0.00%]:
  # j_48 = PHI <0(11), j_79(5)>
  # currentmin_52 = PHI <9223372036854775807(11), currentmin_51(5)>
  if (j_48 <= 100)
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  # currentmin_38 = PHI <currentmin_52(6)>
  goto <bb 9>; [100.00%]

  <bb 8> [0.00%]:
  _11 = (long unsigned int) i_45;
  _12 = _11 * 808;
  _13 = tableau_66(D) + _12;
  _14 = (int) j_49;
  _15 = *_13[_14];
  _20 = _15 - currentmin_38;
  *_13[_14] = _20;
  j_77 = j_49 + 1;

  <bb 9> [0.00%]:
  # j_49 = PHI <0(7), j_77(8)>
  if (j_49 <= 100)
    goto <bb 8>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  i_75 = i_45 + 1;

  <bb 11> [0.00%]:
  # i_45 = PHI <0(2), i_75(10)>
  if (i_45 <= 100)
    goto <bb 6>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 12> [0.00%]:
  _23 = (long unsigned int) i_46;
  _24 = _23 * 808;
  _25 = tableau_66(D) + _24;
  _26 = (int) j_50;
  _27 = *_25[_26];
  if (_27 < currentmin_54)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:

  <bb 14> [0.00%]:
  # currentmin_53 = PHI <currentmin_54(12), _27(13)>
  i_71 = i_46 + 1;

  <bb 15> [0.00%]:
  # i_46 = PHI <0(20), i_71(14)>
  # currentmin_54 = PHI <9223372036854775807(20), currentmin_53(14)>
  if (i_46 <= 100)
    goto <bb 12>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 16> [0.00%]:
  # currentmin_39 = PHI <currentmin_54(15)>
  if (currentmin_39 != 0)
    goto <bb 18>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 17> [0.00%]:
  _33 = (long unsigned int) i_47;
  _34 = _33 * 808;
  _35 = tableau_66(D) + _34;
  _36 = (int) j_50;
  _37 = *_35[_36];
  _42 = _37 - currentmin_39;
  *_35[_36] = _42;
  i_68 = i_47 + 1;

  <bb 18> [0.00%]:
  # i_47 = PHI <0(16), i_68(17)>
  if (i_47 <= 100)
    goto <bb 17>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 19> [0.00%]:
  j_69 = j_50 + 1;

  <bb 20> [0.00%]:
  # j_50 = PHI <0(11), j_69(19)>
  if (j_50 <= 100)
    goto <bb 15>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 21> [0.00%]:
  return;

}



;; Function first_assignments (first_assignments, funcdef_no=80, decl_uid=4618, cgraph_uid=80, symbol_order=105)

Created preheader block for loop 5
Created preheader block for loop 8
Created preheader block for loop 6
Created preheader block for loop 2
Created preheader block for loop 4
Created preheader block for loop 9
Created preheader block for loop 11
Created preheader block for loop 13
;; 14 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 66 62 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 65 63 22 23 24 25 26 27 28 29 30 31 32 33 34 35 64 36 67 37 59 38 39 40 41 42 43 44 45 46 47 48 49 60 50 51 52 53 54 55 56 61 57 58
;;
;; Loop 5
;;  header 56, latch 55
;;  depth 1, outer 0
;;  nodes: 56 55 43 54 60 53 50 51 52 49 44 48 45 46 47 40 42 61 41 39
;;
;; Loop 8
;;  header 54, latch 53
;;  depth 2, outer 5
;;  nodes: 54 53 50 51 52
;;
;; Loop 7
;;  header 49, latch 48
;;  depth 2, outer 5
;;  nodes: 49 48 45 46 47
;;
;; Loop 6
;;  header 42, latch 41
;;  depth 2, outer 5
;;  nodes: 42 41 39 40
;;
;; Loop 2
;;  header 7, latch 67
;;  depth 1, outer 0
;;  nodes: 7 67 36 35 63 34 27 33 28 32 29 30 31 26 64 25 22 23 24 21 20 13 19 14 18 15 16 17 12 65 11 8 9 10
;;
;; Loop 4
;;  header 35, latch 34
;;  depth 2, outer 2
;;  nodes: 35 34 27 33 28 32 29 30 31 26 64 25 22 23 24
;;
;; Loop 10
;;  header 33, latch 32
;;  depth 3, outer 4
;;  nodes: 33 32 29 30 31
;;
;; Loop 9
;;  header 26, latch 25
;;  depth 3, outer 4
;;  nodes: 26 25 22 23 24
;;
;; Loop 3
;;  header 21, latch 20
;;  depth 2, outer 2
;;  nodes: 21 20 13 19 14 18 15 16 17 12 65 11 8 9 10
;;
;; Loop 12
;;  header 19, latch 18
;;  depth 3, outer 3
;;  nodes: 19 18 15 16 17
;;
;; Loop 11
;;  header 12, latch 11
;;  depth 3, outer 3
;;  nodes: 12 11 8 9 10
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 4 66 3
;;
;; Loop 13
;;  header 4, latch 3
;;  depth 2, outer 1
;;  nodes: 4 3
;; 2 succs { 6 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 66 62 }
;; 66 succs { 4 }
;; 62 succs { 7 }
;; 7 succs { 21 }
;; 8 succs { 9 11 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 12 }
;; 12 succs { 8 13 }
;; 13 succs { 14 20 }
;; 14 succs { 19 }
;; 15 succs { 16 18 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 19 }
;; 19 succs { 15 20 }
;; 20 succs { 21 }
;; 21 succs { 65 63 }
;; 65 succs { 12 }
;; 63 succs { 35 }
;; 22 succs { 23 25 }
;; 23 succs { 24 25 }
;; 24 succs { 25 }
;; 25 succs { 26 }
;; 26 succs { 22 27 }
;; 27 succs { 28 34 }
;; 28 succs { 33 }
;; 29 succs { 30 32 }
;; 30 succs { 31 32 }
;; 31 succs { 32 }
;; 32 succs { 33 }
;; 33 succs { 29 34 }
;; 34 succs { 35 }
;; 35 succs { 64 36 }
;; 64 succs { 26 }
;; 36 succs { 67 37 }
;; 67 succs { 7 }
;; 37 succs { 38 59 }
;; 59 succs { 56 }
;; 38 succs { 58 }
;; 39 succs { 40 41 }
;; 40 succs { 43 41 }
;; 41 succs { 42 }
;; 42 succs { 39 43 }
;; 43 succs { 44 55 }
;; 44 succs { 49 }
;; 45 succs { 46 48 }
;; 46 succs { 47 48 }
;; 47 succs { 48 }
;; 48 succs { 49 }
;; 49 succs { 45 60 }
;; 60 succs { 54 }
;; 50 succs { 51 53 }
;; 51 succs { 52 53 }
;; 52 succs { 53 }
;; 53 succs { 54 }
;; 54 succs { 50 55 }
;; 55 succs { 56 }
;; 56 succs { 61 57 }
;; 61 succs { 42 }
;; 57 succs { 58 }
;; 58 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

numassigns_67 -> { numassigns_110 }
numassigns_70 -> { numassigns_112 }
totnumassigns_72 -> { totnumassigns_117 }
totnumassigns_76 -> { totnumassigns_117 }
numzeros_78 -> { numzeros_123 }
selected_81 -> { selected_126 }
selected_83 -> { selected_127 }
selected_84 -> { selected_129 }
selected_85 -> { selected_130 }
totnumassigns_92 -> { totnumassigns_119 }
numzeros_95 -> { numzeros_121 }
totnumassigns_164 -> { totnumassigns_115 }
Incremental SSA update started at block: 7
Number of blocks in CFG: 68
Number of blocks to update: 34 ( 50%)



Value ranges after Early VRP:

_1: [0, 100]
_2: [0, 20200]
_3: VARYING
_4: [0, 100]
_7: [0, 100]
_8: [0, 80800]
_9: VARYING
_10: [0, 100]
_11: VARYING
_13: [0, 20200]
_14: VARYING
_16: VARYING
_21: [0, 100]
_22: [0, 20200]
_23: VARYING
_24: [0, +INF]
_25: [0, +INF]
_26: VARYING
_27: VARYING
_29: [0, +INF]
_30: VARYING
_33: [0, 100]
_34: [0, 80800]
_35: VARYING
_36: [0, 100]
_37: VARYING
_39: [0, 20200]
_40: VARYING
_42: VARYING
_47: [0, +INF]
_48: [0, +INF]
_49: VARYING
_50: [0, 100]
_52: [0, +INF]
_53: VARYING
_54: [0, +INF]
_55: VARYING
_62: [0, 100]
_63: [0, 80800]
_64: VARYING
_65: [0, 100]
_66: VARYING
numassigns_67: [numassigns_110, numassigns_110]
_68: [0, 20200]
_69: VARYING
numassigns_70: [numassigns_112, numassigns_112]
_71: VARYING
totnumassigns_72: [totnumassigns_117, totnumassigns_117]
_73: [0, 100]
_74: [0, 20200]
_75: VARYING
totnumassigns_76: [totnumassigns_117, totnumassigns_117]
_77: [0, 100]
numzeros_78: [numzeros_123, numzeros_123]
_79: [0, 80800]
_80: VARYING
selected_81: [-INF(OVF), +INF(OVF)]
_82: VARYING
selected_83: [-INF(OVF), +INF(OVF)]
selected_84: [-INF(OVF), +INF(OVF)]
selected_85: [-INF(OVF), +INF(OVF)]
_88: [0, +INF]
_89: [0, +INF]
_90: VARYING
_91: VARYING
totnumassigns_92: [totnumassigns_119, totnumassigns_119]
_93: [0, +INF]
_94: VARYING
numzeros_95: [numzeros_121, numzeros_121]
i_97: [0, 101]
i_98: [0, 101]
i_99: [0, 101]
i_100: [0, 101]
j_101: [0, 101]
j_102: [0, 101]
j_103: [0, 101]
j_104: [0, 101]
k_105: [0, 101]
k_106: [0, 101]
k_107: [0, 101]
k_108: [0, 101]
numassigns_109: VARYING
numassigns_110: VARYING
numassigns_111: VARYING
numassigns_112: VARYING
totnumassigns_113: VARYING
totnumassigns_114: VARYING
totnumassigns_115: VARYING
totnumassigns_116: VARYING
totnumassigns_117: VARYING
totnumassigns_118: VARYING
totnumassigns_119: VARYING
numzeros_120: VARYING
numzeros_121: VARYING
numzeros_122: VARYING
numzeros_123: VARYING
selected_124: [-INF(OVF), +INF(OVF)]
selected_125: [-INF(OVF), +INF(OVF)]
selected_126: [-INF(OVF), +INF(OVF)]
selected_127: [-INF(OVF), +INF(OVF)]
selected_128: [-INF(OVF), +INF(OVF)]
selected_129: [-INF(OVF), +INF(OVF)]
selected_130: [-INF(OVF), +INF(OVF)]
selected_131: [-1, 100]
_132: [0, +INF]
_159: [0, +INF]
tableau_162(D): VARYING
assignedtableau_163(D): VARYING
totnumassigns_164: [totnumassigns_115, totnumassigns_115]
j_165: [1, 101]
totnumassigns_167: [0, +INF]
k_171: [1, 101]
k_173: [1, 101]
i_174: [1, 101]
_175: [101, 101]
numassigns_178: [0, +INF]
totnumassigns_179: [0, +INF]
k_183: [1, 101]
j_184: [1, 101]
numzeros_185: [0, +INF]
selected_186: [0, 100]
i_187: [1, 101]
numassigns_190: [0, +INF]
totnumassigns_191: [0, +INF]
k_195: [1, 101]
i_196: [1, 101]
numzeros_197: [0, +INF]
j_199: [1, 101]
i_201: [1, 101]
j_203: [1, 101]


Removing basic block 38
Removing basic block 59
Removing basic block 60
Removing basic block 61
Removing basic block 62
Removing basic block 64
Removing basic block 65
Removing basic block 66
Removing basic block 67
first_assignments (long int[101] * tableau, short int[101] * assignedtableau)
{
  int selected;
  short unsigned int numzeros;
  short unsigned int totnumassigns;
  short unsigned int numassigns;
  short unsigned int k;
  short unsigned int j;
  short unsigned int i;
  long unsigned int _1;
  long unsigned int _2;
  short int[101] * _3;
  int _4;
  long unsigned int _7;
  long unsigned int _8;
  long int[101] * _9;
  int _10;
  long int _11;
  long unsigned int _13;
  short int[101] * _14;
  short int _16;
  long unsigned int _21;
  long unsigned int _22;
  short int[101] * _23;
  long unsigned int _24;
  long unsigned int _25;
  long int[101] * _26;
  long int _27;
  long unsigned int _29;
  short int[101] * _30;
  long unsigned int _33;
  long unsigned int _34;
  long int[101] * _35;
  int _36;
  long int _37;
  long unsigned int _39;
  short int[101] * _40;
  short int _42;
  long unsigned int _47;
  long unsigned int _48;
  short int[101] * _49;
  int _50;
  long unsigned int _52;
  long int[101] * _53;
  int _54;
  long int _55;
  long unsigned int _62;
  long unsigned int _63;
  long int[101] * _64;
  int _65;
  long int _66;
  long unsigned int _68;
  short int[101] * _69;
  short int _71;
  long unsigned int _73;
  long unsigned int _74;
  short int[101] * _75;
  int _77;
  long unsigned int _79;
  long int[101] * _80;
  long int _82;
  long unsigned int _88;
  long unsigned int _89;
  long int[101] * _90;
  long int _91;
  long unsigned int _93;
  short int[101] * _94;
  int _132;
  int _159;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_97;
  _2 = _1 * 202;
  _3 = assignedtableau_163(D) + _2;
  _4 = (int) j_101;
  *_3[_4] = 0;
  j_203 = j_101 + 1;

  <bb 4> [0.00%]:
  # j_101 = PHI <0(6), j_203(3)>
  if (j_101 <= 100)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  i_201 = i_97 + 1;

  <bb 6> [0.00%]:
  # i_97 = PHI <0(2), i_201(5)>
  if (i_97 <= 100)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  # totnumassigns_113 = PHI <0(6), totnumassigns_72(37)>
  # selected_124 = PHI <0(6), selected_85(37)>
  goto <bb 21>; [0.00%]

  <bb 8> [0.00%]:
  _7 = (long unsigned int) i_98;
  _8 = _7 * 808;
  _9 = tableau_162(D) + _8;
  _10 = (int) j_102;
  _11 = *_9[_10];
  if (_11 == 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 9> [0.00%]:
  _13 = _7 * 202;
  _14 = assignedtableau_163(D) + _13;
  _16 = *_14[_10];
  if (_16 == 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  numzeros_197 = numzeros_121 + 1;

  <bb 11> [0.00%]:
  # numzeros_120 = PHI <numzeros_121(8), numzeros_121(9), numzeros_197(10)>
  # selected_125 = PHI <selected_126(8), selected_126(9), _10(10)>
  j_199 = j_102 + 1;

  <bb 12> [0.00%]:
  # j_102 = PHI <0(21), j_199(11)>
  # numzeros_121 = PHI <0(21), numzeros_120(11)>
  # selected_126 = PHI <selected_127(21), selected_125(11)>
  if (j_102 <= 100)
    goto <bb 8>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:
  # numzeros_95 = PHI <numzeros_121(12)>
  # selected_81 = PHI <selected_126(12)>
  if (numzeros_95 == 1)
    goto <bb 14>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 14> [0.00%]:
  numassigns_190 = numassigns_110 + 1;
  totnumassigns_191 = totnumassigns_115 + 1;
  _21 = (long unsigned int) i_98;
  _22 = _21 * 202;
  _23 = assignedtableau_163(D) + _22;
  *_23[selected_81] = 1;
  goto <bb 19>; [0.00%]

  <bb 15> [0.00%]:
  if (i_98 != k_105)
    goto <bb 16>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 16> [0.00%]:
  _24 = (long unsigned int) k_105;
  _25 = _24 * 808;
  _26 = tableau_162(D) + _25;
  _27 = *_26[selected_81];
  if (_27 == 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  _29 = _24 * 202;
  _30 = assignedtableau_163(D) + _29;
  *_30[selected_81] = 2;

  <bb 18> [0.00%]:
  k_195 = k_105 + 1;

  <bb 19> [0.00%]:
  # k_105 = PHI <0(14), k_195(18)>
  if (k_105 <= 100)
    goto <bb 15>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  # numassigns_109 = PHI <numassigns_110(13), numassigns_190(19)>
  # totnumassigns_114 = PHI <totnumassigns_115(13), totnumassigns_191(19)>
  i_196 = i_98 + 1;

  <bb 21> [0.00%]:
  # i_98 = PHI <0(7), i_196(20)>
  # numassigns_110 = PHI <0(7), numassigns_109(20)>
  # totnumassigns_115 = PHI <totnumassigns_113(7), totnumassigns_114(20)>
  # selected_127 = PHI <selected_124(7), selected_81(20)>
  if (i_98 <= 100)
    goto <bb 12>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 22> [0.00%]:
  # numassigns_67 = PHI <numassigns_110(21)>
  # totnumassigns_164 = PHI <totnumassigns_115(21)>
  # selected_83 = PHI <selected_127(21)>
  goto <bb 36>; [100.00%]

  <bb 23> [0.00%]:
  _33 = (long unsigned int) i_99;
  _34 = _33 * 808;
  _35 = tableau_162(D) + _34;
  _36 = (int) j_103;
  _37 = *_35[_36];
  if (_37 == 0)
    goto <bb 24>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 24> [0.00%]:
  _39 = _33 * 202;
  _40 = assignedtableau_163(D) + _39;
  _42 = *_40[_36];
  if (_42 == 0)
    goto <bb 25>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 25> [0.00%]:
  numzeros_185 = numzeros_123 + 1;
  selected_186 = (int) i_99;

  <bb 26> [0.00%]:
  # numzeros_122 = PHI <numzeros_123(23), numzeros_123(24), numzeros_185(25)>
  # selected_128 = PHI <selected_129(23), selected_129(24), selected_186(25)>
  i_187 = i_99 + 1;

  <bb 27> [0.00%]:
  # i_99 = PHI <0(36), i_187(26)>
  # numzeros_123 = PHI <0(36), numzeros_122(26)>
  # selected_129 = PHI <selected_130(36), selected_128(26)>
  if (i_99 <= 100)
    goto <bb 23>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 28> [0.00%]:
  # numzeros_78 = PHI <numzeros_123(27)>
  # selected_84 = PHI <selected_129(27)>
  if (numzeros_78 == 1)
    goto <bb 29>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 29> [0.00%]:
  numassigns_178 = numassigns_112 + 1;
  totnumassigns_179 = totnumassigns_117 + 1;
  _47 = (long unsigned int) selected_84;
  _48 = _47 * 202;
  _49 = assignedtableau_163(D) + _48;
  _50 = (int) j_103;
  *_49[_50] = 1;
  goto <bb 34>; [0.00%]

  <bb 30> [0.00%]:
  if (j_103 != k_106)
    goto <bb 31>; [0.00%]
  else
    goto <bb 33>; [0.00%]

  <bb 31> [0.00%]:
  _52 = _47 * 808;
  _53 = tableau_162(D) + _52;
  _54 = (int) k_106;
  _55 = *_53[_54];
  if (_55 == 0)
    goto <bb 32>; [0.00%]
  else
    goto <bb 33>; [0.00%]

  <bb 32> [0.00%]:
  *_49[_54] = 2;

  <bb 33> [0.00%]:
  k_183 = k_106 + 1;

  <bb 34> [0.00%]:
  # k_106 = PHI <0(29), k_183(33)>
  if (k_106 <= 100)
    goto <bb 30>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 35> [0.00%]:
  # numassigns_111 = PHI <numassigns_112(28), numassigns_178(34)>
  # totnumassigns_116 = PHI <totnumassigns_117(28), totnumassigns_179(34)>
  j_184 = j_103 + 1;

  <bb 36> [0.00%]:
  # j_103 = PHI <0(22), j_184(35)>
  # numassigns_112 = PHI <numassigns_67(22), numassigns_111(35)>
  # totnumassigns_117 = PHI <totnumassigns_164(22), totnumassigns_116(35)>
  # selected_130 = PHI <selected_83(22), selected_84(35)>
  if (j_103 <= 100)
    goto <bb 27>; [0.00%]
  else
    goto <bb 37>; [0.00%]

  <bb 37> [0.00%]:
  # numassigns_70 = PHI <numassigns_112(36)>
  # totnumassigns_72 = PHI <totnumassigns_117(36)>
  # selected_85 = PHI <selected_130(36)>
  if (numassigns_70 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 38>; [0.00%]

  <bb 38> [0.00%]:
  # totnumassigns_76 = PHI <totnumassigns_72(37)>
  if (totnumassigns_76 == 101)
    goto <bb 58>; [0.00%]
  else
    goto <bb 56>; [0.00%]

  <bb 39> [0.00%]:
  _62 = (long unsigned int) i_100;
  _63 = _62 * 808;
  _64 = tableau_162(D) + _63;
  _65 = (int) j_104;
  _66 = *_64[_65];
  if (_66 == 0)
    goto <bb 40>; [0.00%]
  else
    goto <bb 41>; [0.00%]

  <bb 40> [0.00%]:
  _68 = _62 * 202;
  _69 = assignedtableau_163(D) + _68;
  _71 = *_69[_65];
  if (_71 == 0)
    goto <bb 43>; [0.00%]
  else
    goto <bb 41>; [0.00%]

  <bb 41> [0.00%]:
  j_165 = j_104 + 1;

  <bb 42> [0.00%]:
  # j_104 = PHI <0(56), j_165(41)>
  if (j_104 <= 100)
    goto <bb 39>; [0.00%]
  else
    goto <bb 43>; [0.00%]

  <bb 43> [0.00%]:
  # selected_131 = PHI <_65(40), -1(42)>
  if (selected_131 != -1)
    goto <bb 44>; [0.00%]
  else
    goto <bb 55>; [0.00%]

  <bb 44> [0.00%]:
  _73 = (long unsigned int) i_100;
  _74 = _73 * 202;
  _75 = assignedtableau_163(D) + _74;
  *_75[selected_131] = 1;
  totnumassigns_167 = totnumassigns_119 + 1;
  goto <bb 49>; [0.00%]

  <bb 45> [0.00%]:
  _77 = (int) k_107;
  if (_77 != selected_131)
    goto <bb 46>; [0.00%]
  else
    goto <bb 48>; [0.00%]

  <bb 46> [0.00%]:
  _79 = _73 * 808;
  _80 = tableau_162(D) + _79;
  _82 = *_80[_77];
  if (_82 == 0)
    goto <bb 47>; [0.00%]
  else
    goto <bb 48>; [0.00%]

  <bb 47> [0.00%]:
  *_75[_77] = 2;

  <bb 48> [0.00%]:
  k_173 = k_107 + 1;

  <bb 49> [0.00%]:
  # k_107 = PHI <0(44), k_173(48)>
  if (k_107 <= 100)
    goto <bb 45>; [0.00%]
  else
    goto <bb 54>; [0.00%]

  <bb 50> [0.00%]:
  if (i_100 != k_108)
    goto <bb 51>; [0.00%]
  else
    goto <bb 53>; [0.00%]

  <bb 51> [0.00%]:
  _88 = (long unsigned int) k_108;
  _89 = _88 * 808;
  _90 = tableau_162(D) + _89;
  _91 = *_90[selected_131];
  if (_91 == 0)
    goto <bb 52>; [0.00%]
  else
    goto <bb 53>; [0.00%]

  <bb 52> [0.00%]:
  _93 = _88 * 202;
  _94 = assignedtableau_163(D) + _93;
  *_94[selected_131] = 2;

  <bb 53> [0.00%]:
  k_171 = k_108 + 1;

  <bb 54> [0.00%]:
  # k_108 = PHI <0(49), k_171(53)>
  if (k_108 <= 100)
    goto <bb 50>; [0.00%]
  else
    goto <bb 55>; [0.00%]

  <bb 55> [0.00%]:
  # totnumassigns_118 = PHI <totnumassigns_119(43), totnumassigns_167(54)>
  i_174 = i_100 + 1;

  <bb 56> [0.00%]:
  # i_100 = PHI <0(38), i_174(55)>
  # totnumassigns_119 = PHI <totnumassigns_76(38), totnumassigns_118(55)>
  if (i_100 <= 100)
    goto <bb 42>; [0.00%]
  else
    goto <bb 57>; [0.00%]

  <bb 57> [0.00%]:
  # totnumassigns_92 = PHI <totnumassigns_119(56)>
  _159 = (int) totnumassigns_92;

  <bb 58> [0.00%]:
  # _132 = PHI <101(38), _159(57)>
  return _132;

}



;; Function second_assignments (second_assignments, funcdef_no=81, decl_uid=4621, cgraph_uid=81, symbol_order=106)

Created preheader block for loop 9
Created preheader block for loop 10
Created preheader block for loop 8
Created preheader block for loop 11
Created preheader block for loop 7
Created preheader block for loop 12
Created preheader block for loop 4
Created preheader block for loop 6
Created preheader block for loop 13
Created preheader block for loop 14
Created preheader block for loop 3
Created preheader block for loop 15
Created preheader block for loop 2
;; 16 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 66 5 6 64 7 8 9 10 11 12 13 65 60 14 15 63 16 17 18 19 20 21 61 22 62 23 24 25 26 27 28 29 30 67 58 31 59 32 33 34 35 36 37 38 56 39 57 40 41 42 43 44 45 54 46 55 47 48 49 50 51 52 53
;;
;; Loop 9
;;  header 52, latch 51
;;  depth 1, outer 0
;;  nodes: 52 51 46 50 55 49 47 48
;;
;; Loop 10
;;  header 50, latch 49
;;  depth 2, outer 9
;;  nodes: 50 49 47 48
;;
;; Loop 8
;;  header 45, latch 44
;;  depth 1, outer 0
;;  nodes: 45 44 39 43 57 42 40 41
;;
;; Loop 11
;;  header 43, latch 42
;;  depth 2, outer 8
;;  nodes: 43 42 40 41
;;
;; Loop 7
;;  header 38, latch 37
;;  depth 1, outer 0
;;  nodes: 38 37 31 36 59 35 32 33 34
;;
;; Loop 12
;;  header 36, latch 35
;;  depth 2, outer 7
;;  nodes: 36 35 32 33 34
;;
;; Loop 4
;;  header 14, latch 67
;;  depth 1, outer 0
;;  nodes: 14 67 30 29 61 28 22 27 62 26 23 24 25 21 20 15 19 63 18 16 17
;;
;; Loop 6
;;  header 29, latch 28
;;  depth 2, outer 4
;;  nodes: 29 28 22 27 62 26 23 24 25
;;
;; Loop 13
;;  header 27, latch 26
;;  depth 3, outer 6
;;  nodes: 27 26 23 24 25
;;
;; Loop 5
;;  header 21, latch 20
;;  depth 2, outer 4
;;  nodes: 21 20 15 19 63 18 16 17
;;
;; Loop 14
;;  header 19, latch 18
;;  depth 3, outer 5
;;  nodes: 19 18 16 17
;;
;; Loop 3
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12 10 11 7 9 65 8
;;
;; Loop 15
;;  header 9, latch 8
;;  depth 2, outer 3
;;  nodes: 9 8 7
;;
;; Loop 2
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 66 }
;; 66 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 64 }
;; 64 succs { 13 }
;; 7 succs { 10 8 }
;; 8 succs { 9 }
;; 9 succs { 7 10 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 }
;; 13 succs { 65 60 }
;; 65 succs { 9 }
;; 60 succs { 14 }
;; 14 succs { 21 }
;; 15 succs { 63 20 }
;; 63 succs { 19 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 19 }
;; 19 succs { 16 20 }
;; 20 succs { 21 }
;; 21 succs { 15 61 }
;; 61 succs { 29 }
;; 22 succs { 62 28 }
;; 62 succs { 27 }
;; 23 succs { 24 26 }
;; 24 succs { 25 26 }
;; 25 succs { 26 }
;; 26 succs { 27 }
;; 27 succs { 23 28 }
;; 28 succs { 29 }
;; 29 succs { 22 30 }
;; 30 succs { 67 58 }
;; 67 succs { 14 }
;; 58 succs { 38 }
;; 31 succs { 59 37 }
;; 59 succs { 36 }
;; 32 succs { 33 35 }
;; 33 succs { 34 35 }
;; 34 succs { 35 }
;; 35 succs { 36 }
;; 36 succs { 32 37 }
;; 37 succs { 38 }
;; 38 succs { 31 56 }
;; 56 succs { 45 }
;; 39 succs { 57 44 }
;; 57 succs { 43 }
;; 40 succs { 41 42 }
;; 41 succs { 42 }
;; 42 succs { 43 }
;; 43 succs { 40 44 }
;; 44 succs { 45 }
;; 45 succs { 39 54 }
;; 54 succs { 52 }
;; 46 succs { 55 51 }
;; 55 succs { 50 }
;; 47 succs { 48 49 }
;; 48 succs { 49 }
;; 49 succs { 50 }
;; 50 succs { 47 51 }
;; 51 succs { 52 }
;; 52 succs { 46 53 }
;; 53 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

smallest_43 -> { smallest_64 }
newrows_44 -> { newrows_69 }
Incremental SSA update started at block: 29
Number of blocks in CFG: 68
Number of blocks to update: 14 ( 21%)



Value ranges after Early VRP:

_1: [0, 100]
_2: [0, 20200]
_3: VARYING
_4: VARYING
_6: VARYING
_7: [0, 100]
_8: [0, 80800]
_9: VARYING
_10: VARYING
_11: VARYING
_12: [0, 100]
_13: [0, 20200]
_14: VARYING
_15: VARYING
_16: VARYING
_18: VARYING
_19: VARYING
_20: [0, 100]
_21: [0, 80800]
_22: VARYING
_23: VARYING
_27: VARYING
_28: VARYING
_29: [0, 100]
_30: [0, 80800]
_31: VARYING
_32: VARYING
_36: VARYING
_37: VARYING
_38: VARYING
_39: [0, 100]
_40: [0, 80800]
_41: VARYING
_42: VARYING
smallest_43: [smallest_64, smallest_64]
newrows_44: [newrows_69, newrows_69]
_46: VARYING
i_47: [0, 101]
i_48: [0, 101]
i_49: [0, 101]
i_50: [0, 101]
i_51: [0, 101]
i_52: [0, 101]
i_53: [0, 101]
i_54: [0, 101]
j_55: [0, 101]
j_56: [0, 101]
j_57: [0, 101]
j_58: [0, 101]
j_59: [0, 101]
j_60: [0, 101]
smallest_61: VARYING
smallest_62: VARYING
smallest_63: VARYING
smallest_64: VARYING
numassigns_65: [0, 1]
newrows_66: VARYING
newrows_67: VARYING
newrows_68: VARYING
newrows_69: VARYING
tableau_105(D): VARYING
j_107: [1, 101]
i_108: [1, 101]
j_111: [1, 101]
i_112: [1, 101]
j_115: [1, 101]
i_116: [1, 101]
assignedtableau_118(D): VARYING
newrows_120: [0, +INF]
i_121: [1, 101]
j_122: [1, 101]
j_125: [1, 101]
i_126: [1, 101]
j_129: [1, 101]
i_132: [1, 101]
i_134: [1, 101]
i_136: [1, 101]


Removing basic block 54
Removing basic block 55
Removing basic block 57
Removing basic block 58
Removing basic block 59
Removing basic block 60
Removing basic block 61
Removing basic block 62
Removing basic block 63
Removing basic block 64
Removing basic block 65
Removing basic block 66
Removing basic block 67
second_assignments (long int[101] * tableau, short int[101] * assignedtableau)
{
  short unsigned int newrows;
  short unsigned int numassigns;
  long int smallest;
  short int linescol[101];
  short int linesrow[101];
  int j;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  short int[101] * _3;
  short int _4;
  short int _6;
  long unsigned int _7;
  long unsigned int _8;
  long int[101] * _9;
  long int _10;
  short int _11;
  long unsigned int _12;
  long unsigned int _13;
  short int[101] * _14;
  short int _15;
  short int _16;
  short int _18;
  short int _19;
  long unsigned int _20;
  long unsigned int _21;
  long int[101] * _22;
  long int _23;
  short int _27;
  short int _28;
  long unsigned int _29;
  long unsigned int _30;
  long int[101] * _31;
  long int _32;
  long int _36;
  short int _37;
  short int _38;
  long unsigned int _39;
  long unsigned int _40;
  long int[101] * _41;
  long int _42;
  long int _46;

  <bb 2> [0.00%]:
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  linesrow[i_47] = 0;
  i_136 = i_47 + 1;

  <bb 4> [0.00%]:
  # i_47 = PHI <0(2), i_136(3)>
  if (i_47 <= 100)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  linescol[i_48] = 0;
  i_134 = i_48 + 1;

  <bb 6> [0.00%]:
  # i_48 = PHI <0(4), i_134(5)>
  if (i_48 <= 100)
    goto <bb 5>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 7> [0.00%]:
  _1 = (long unsigned int) i_49;
  _2 = _1 * 202;
  _3 = assignedtableau_118(D) + _2;
  _4 = *_3[j_55];
  if (_4 == 1)
    goto <bb 10>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  j_129 = j_55 + 1;

  <bb 9> [0.00%]:
  # j_55 = PHI <0(13), j_129(8)>
  if (j_55 <= 100)
    goto <bb 7>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  # numassigns_65 = PHI <1(7), 0(9)>
  if (numassigns_65 == 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  linesrow[i_49] = 1;

  <bb 12> [0.00%]:
  i_132 = i_49 + 1;

  <bb 13> [0.00%]:
  # i_49 = PHI <0(6), i_132(12)>
  if (i_49 <= 100)
    goto <bb 9>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [0.00%]:
  goto <bb 21>; [0.00%]

  <bb 15> [0.00%]:
  _6 = linesrow[i_50];
  if (_6 == 1)
    goto <bb 19>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 16> [0.00%]:
  _7 = (long unsigned int) i_50;
  _8 = _7 * 808;
  _9 = tableau_105(D) + _8;
  _10 = *_9[j_56];
  if (_10 == 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  linescol[j_56] = 1;

  <bb 18> [0.00%]:
  j_125 = j_56 + 1;

  <bb 19> [0.00%]:
  # j_56 = PHI <0(15), j_125(18)>
  if (j_56 <= 100)
    goto <bb 16>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  i_126 = i_50 + 1;

  <bb 21> [0.00%]:
  # i_50 = PHI <0(14), i_126(20)>
  if (i_50 <= 100)
    goto <bb 15>; [0.00%]
  else
    goto <bb 29>; [0.00%]

  <bb 22> [0.00%]:
  _11 = linescol[j_57];
  if (_11 == 1)
    goto <bb 27>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 23> [0.00%]:
  _12 = (long unsigned int) i_51;
  _13 = _12 * 202;
  _14 = assignedtableau_118(D) + _13;
  _15 = *_14[j_57];
  if (_15 == 1)
    goto <bb 24>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 24> [0.00%]:
  _16 = linesrow[i_51];
  if (_16 != 1)
    goto <bb 25>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 25> [0.00%]:
  linesrow[i_51] = 1;
  newrows_120 = newrows_67 + 1;

  <bb 26> [0.00%]:
  # newrows_66 = PHI <newrows_67(23), newrows_67(24), newrows_120(25)>
  i_121 = i_51 + 1;

  <bb 27> [0.00%]:
  # i_51 = PHI <0(22), i_121(26)>
  # newrows_67 = PHI <newrows_69(22), newrows_66(26)>
  if (i_51 <= 100)
    goto <bb 23>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 28> [0.00%]:
  # newrows_68 = PHI <newrows_69(22), newrows_67(27)>
  j_122 = j_57 + 1;

  <bb 29> [0.00%]:
  # j_57 = PHI <0(21), j_122(28)>
  # newrows_69 = PHI <0(21), newrows_68(28)>
  if (j_57 <= 100)
    goto <bb 22>; [0.00%]
  else
    goto <bb 30>; [0.00%]

  <bb 30> [0.00%]:
  # newrows_44 = PHI <newrows_69(29)>
  if (newrows_44 != 0)
    goto <bb 14>; [0.00%]
  else
    goto <bb 38>; [0.00%]

  <bb 31> [0.00%]:
  _18 = linesrow[i_52];
  if (_18 != 0)
    goto <bb 36>; [0.00%]
  else
    goto <bb 37>; [0.00%]

  <bb 32> [0.00%]:
  _19 = linescol[j_58];
  if (_19 != 1)
    goto <bb 33>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 33> [0.00%]:
  _20 = (long unsigned int) i_52;
  _21 = _20 * 808;
  _22 = tableau_105(D) + _21;
  _23 = *_22[j_58];
  if (_23 < smallest_62)
    goto <bb 34>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 34> [0.00%]:

  <bb 35> [0.00%]:
  # smallest_61 = PHI <smallest_62(32), smallest_62(33), _23(34)>
  j_115 = j_58 + 1;

  <bb 36> [0.00%]:
  # j_58 = PHI <0(31), j_115(35)>
  # smallest_62 = PHI <smallest_64(31), smallest_61(35)>
  if (j_58 <= 100)
    goto <bb 32>; [0.00%]
  else
    goto <bb 37>; [0.00%]

  <bb 37> [0.00%]:
  # smallest_63 = PHI <smallest_64(31), smallest_62(36)>
  i_116 = i_52 + 1;

  <bb 38> [0.00%]:
  # i_52 = PHI <0(30), i_116(37)>
  # smallest_64 = PHI <9223372036854775807(30), smallest_63(37)>
  if (i_52 <= 100)
    goto <bb 31>; [0.00%]
  else
    goto <bb 39>; [0.00%]

  <bb 39> [0.00%]:
  # smallest_43 = PHI <smallest_64(38)>
  goto <bb 46>; [100.00%]

  <bb 40> [0.00%]:
  _27 = linesrow[i_53];
  if (_27 != 0)
    goto <bb 44>; [0.00%]
  else
    goto <bb 45>; [0.00%]

  <bb 41> [0.00%]:
  _28 = linescol[j_59];
  if (_28 != 1)
    goto <bb 42>; [0.00%]
  else
    goto <bb 43>; [0.00%]

  <bb 42> [0.00%]:
  _29 = (long unsigned int) i_53;
  _30 = _29 * 808;
  _31 = tableau_105(D) + _30;
  _32 = *_31[j_59];
  _36 = _32 - smallest_43;
  *_31[j_59] = _36;

  <bb 43> [0.00%]:
  j_111 = j_59 + 1;

  <bb 44> [0.00%]:
  # j_59 = PHI <0(40), j_111(43)>
  if (j_59 <= 100)
    goto <bb 41>; [0.00%]
  else
    goto <bb 45>; [0.00%]

  <bb 45> [0.00%]:
  i_112 = i_53 + 1;

  <bb 46> [0.00%]:
  # i_53 = PHI <0(39), i_112(45)>
  if (i_53 <= 100)
    goto <bb 40>; [0.00%]
  else
    goto <bb 53>; [0.00%]

  <bb 47> [0.00%]:
  _37 = linesrow[i_54];
  if (_37 == 0)
    goto <bb 51>; [0.00%]
  else
    goto <bb 52>; [0.00%]

  <bb 48> [0.00%]:
  _38 = linescol[j_60];
  if (_38 == 1)
    goto <bb 49>; [0.00%]
  else
    goto <bb 50>; [0.00%]

  <bb 49> [0.00%]:
  _39 = (long unsigned int) i_54;
  _40 = _39 * 808;
  _41 = tableau_105(D) + _40;
  _42 = *_41[j_60];
  _46 = _42 + smallest_43;
  *_41[j_60] = _46;

  <bb 50> [0.00%]:
  j_107 = j_60 + 1;

  <bb 51> [0.00%]:
  # j_60 = PHI <0(47), j_107(50)>
  if (j_60 <= 100)
    goto <bb 48>; [0.00%]
  else
    goto <bb 52>; [0.00%]

  <bb 52> [0.00%]:
  i_108 = i_54 + 1;

  <bb 53> [0.00%]:
  # i_54 = PHI <0(46), i_108(52)>
  if (i_54 <= 100)
    goto <bb 47>; [0.00%]
  else
    goto <bb 54>; [0.00%]

  <bb 54> [0.00%]:
  linesrow ={v} {CLOBBER};
  linescol ={v} {CLOBBER};
  return;

}



;; Function Assignment (Assignment, funcdef_no=78, decl_uid=4613, cgraph_uid=78, symbol_order=103)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

Value ranges after Early VRP:

_1: VARYING
arraybase_4(D): VARYING


Assignment (farlong[101] * arraybase)
{
  short int assignedtableau[101][101];
  int _1;

  <bb 2> [0.00%]:
  calc_minimum_costs (arraybase_4(D));
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  second_assignments (arraybase_4(D), &assignedtableau);

  <bb 4> [0.00%]:
  _1 = first_assignments (arraybase_4(D), &assignedtableau);
  if (_1 != 101)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  assignedtableau ={v} {CLOBBER};
  return;

}



;; Function mul (mul, funcdef_no=84, decl_uid=4635, cgraph_uid=84, symbol_order=109)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;; 2 succs { 3 6 }
;; 3 succs { 4 5 }
;; 4 succs { 7 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 1 }

Value ranges after Early VRP:

_1: [1, 65535]
_2: [1, 65535]
_3: [1, +INF(OVF)]
_4: [0, 65535]
_5: [0, +INF]
_6: [0, +INF]
_7: [0, 1]
_8: VARYING
a_9(D): VARYING
b_10(D): VARYING
_11: [0, +INF]
_12: ~[1, 1]
p_13: [0, +INF]
b_14: [0, +INF]
a_15: [0, +INF]
_16: [0, +INF]


mul (u16 a, u16 b)
{
  register u32 p;
  int _1;
  int _2;
  int _3;
  unsigned int _4;
  short unsigned int _5;
  _Bool _6;
  short unsigned int _7;
  u16 _8;
  u16 _11;
  u16 _12;
  u16 _16;

  <bb 2> [0.00%]:
  if (a_9(D) != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  if (b_10(D) != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _1 = (int) a_9(D);
  _2 = (int) b_10(D);
  _3 = _1 * _2;
  p_13 = (u32) _3;
  b_14 = (u16) _3;
  _4 = p_13 >> 16;
  a_15 = (u16) _4;
  _5 = b_14 - a_15;
  _6 = b_14 < a_15;
  _7 = (short unsigned int) _6;
  _16 = _5 + _7;
  goto <bb 7>; [0.00%]

  <bb 5> [0.00%]:
  _12 = 1 - a_9(D);
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _11 = 1 - b_10(D);

  <bb 7> [0.00%]:
  # _8 = PHI <_16(4), _12(5), _11(6)>
  return _8;

}



;; Function inv (inv, funcdef_no=85, decl_uid=4637, cgraph_uid=85, symbol_order=110)

Created preheader block for loop 1
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 9 5 6 10 7 8
;;
;; Loop 1
;;  header 5, latch 10
;;  depth 1, outer 0
;;  nodes: 5 10 6
;; 2 succs { 8 3 }
;; 3 succs { 4 9 }
;; 4 succs { 8 }
;; 9 succs { 5 }
;; 5 succs { 8 6 }
;; 6 succs { 10 7 }
;; 10 succs { 5 }
;; 7 succs { 8 }
;; 8 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

t1_3 -> { t1_21 }
Incremental SSA update started at block: 5
Number of blocks in CFG: 11
Number of blocks to update: 4 ( 36%)



Value ranges after Early VRP:

_1: [2, 65535]
_2: [1, 32768]
t1_3: [0, +INF]
_4: [0, 65534]
_5: [0, +INF]
_6: [0, +INF]
x_7: VARYING
t0_8: VARYING
t1_9: VARYING
y_10: VARYING
_11: VARYING
x_12(D): VARYING
t1_13: [1, 32768]
y_14: [0, 65534]
q_16: [0, +INF]
x_17: [0, 65534]
t0_18: [0, +INF]
q_19: [0, +INF]
y_20: [0, 65533]
t1_21: [0, +INF]
_22: [0, +INF]
_24: ~[1, 32768]


Removing basic block 9
Removing basic block 10
inv (u16 x)
{
  u16 y;
  u16 q;
  u16 t1;
  u16 t0;
  int _1;
  int _2;
  int _4;
  short unsigned int _5;
  short unsigned int _6;
  u16 _11;
  u16 _22;
  u16 _24;

  <bb 2> [0.00%]:
  if (x_12(D) <= 1)
    goto <bb 8>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (int) x_12(D);
  _2 = 65537 / _1;
  t1_13 = (u16) _2;
  _4 = 65537 % _1;
  y_14 = (u16) _4;
  if (y_14 == 1)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _24 = 1 - t1_13;
  goto <bb 8>; [0.00%]

  <bb 5> [0.00%]:
  # x_7 = PHI <x_12(D)(3), x_17(6)>
  # t0_8 = PHI <1(3), t0_18(6)>
  # t1_9 = PHI <t1_13(3), t1_21(6)>
  # y_10 = PHI <y_14(3), y_20(6)>
  q_16 = x_7 / y_10;
  x_17 = x_7 % y_10;
  _5 = t1_9 * q_16;
  t0_18 = _5 + t0_8;
  if (x_17 == 1)
    goto <bb 8>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  q_19 = y_10 / x_17;
  y_20 = y_10 % x_17;
  _6 = t0_18 * q_19;
  t1_21 = _6 + t1_9;
  if (y_20 != 1)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  # t1_3 = PHI <t1_21(6)>
  _22 = 1 - t1_3;

  <bb 8> [0.00%]:
  # _11 = PHI <x_12(D)(2), _24(4), t0_18(5), _22(7)>
  return _11;

}



;; Function en_key_idea (en_key_idea, funcdef_no=86, decl_uid=4640, cgraph_uid=86, symbol_order=111)

Created preheader block for loop 2
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 8 5 6 7
;;
;; Loop 2
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 8 }
;; 8 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

j_23 -> { j_34 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 9
Number of blocks to update: 4 ( 44%)



Value ranges after Early VRP:

_2: [0, 7]
_3: [0, 14]
_4: VARYING
_5: VARYING
_6: [1, +INF]
_7: [0, 7]
_8: [0, 14]
_9: VARYING
_10: VARYING
_11: [0, 65535]
_12: [0, 33553920]
_13: VARYING
_14: ~[0, 0]
_15: [1, +INF]
_16: [0, 7]
_17: [0, 14]
_18: VARYING
_19: VARYING
_20: [0, 511]
_21: [0, 511]
_22: VARYING
j_23: [8, 8]  EQUIVALENCES: { j_34 } (1 elements)
_24: ~[7, 7]
_25: [0, +INF]
_26: VARYING
_27: [0, +INF]
_29: [0, 8]
_30: [0, 16]
userkey_31: [userkey_39(D), -1B]
Z_32: VARYING
i_33: [-INF(OVF), +INF(OVF)]
j_34: [0, 8]
j_35: [8, 52]
_38: [0, 7]
userkey_39(D): VARYING
_41: [0, 7]
Z_42(D): VARYING
i_43: ~[0, 0]
Z_45: VARYING
j_47: [9, 52]
userkey_48: VARYING
j_50: [1, 8]
_51: [0, 8]


Removing basic block 8
en_key_idea (u16 * userkey, u16 * Z)
{
  int j;
  int i;
  long unsigned int _2;
  long unsigned int _3;
  u16 * _4;
  short unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  u16 * _9;
  short unsigned int _10;
  int _11;
  int _12;
  signed short _13;
  int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  u16 * _18;
  short unsigned int _19;
  short unsigned int _20;
  signed short _21;
  signed short _22;
  sizetype _24;
  sizetype _25;
  u16 * _26;
  short unsigned int _27;
  long unsigned int _29;
  long unsigned int _30;
  int _38;
  int _41;
  int _51;

  <bb 2> [0.00%]:
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  userkey_48 = userkey_31 + 2;
  _2 = (long unsigned int) j_34;
  _3 = _2 * 2;
  _4 = Z_42(D) + _3;
  _5 = *userkey_31;
  *_4 = _5;
  j_50 = j_34 + 1;

  <bb 4> [0.00%]:
  # userkey_31 = PHI <userkey_39(D)(2), userkey_48(3)>
  # j_34 = PHI <0(2), j_50(3)>
  if (j_34 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  i_43 = i_33 + 1;
  _6 = (long unsigned int) i_43;
  _38 = i_43 & 7;
  _7 = (long unsigned int) _38;
  _8 = _7 * 2;
  _9 = Z_32 + _8;
  _10 = *_9;
  _11 = (int) _10;
  _12 = _11 << 9;
  _13 = (signed short) _12;
  _14 = i_33 + 2;
  _15 = (long unsigned int) _14;
  _41 = _14 & 7;
  _16 = (long unsigned int) _41;
  _17 = _16 * 2;
  _18 = Z_32 + _17;
  _19 = *_18;
  _20 = _19 >> 7;
  _21 = (signed short) _20;
  _22 = _13 | _21;
  _24 = _6 + 7;
  _25 = _24 * 2;
  _26 = Z_32 + _25;
  _27 = (short unsigned int) _22;
  *_26 = _27;
  _51 = i_43 & 8;
  _29 = (long unsigned int) _51;
  _30 = _29 * 2;
  Z_45 = Z_32 + _30;
  j_47 = j_35 + 1;

  <bb 6> [0.00%]:
  # Z_32 = PHI <Z_42(D)(4), Z_45(5)>
  # i_33 = PHI <0(4), _38(5)>
  # j_35 = PHI <8(4), j_47(5)>
  if (j_35 <= 51)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function de_key_idea (de_key_idea, funcdef_no=87, decl_uid=4643, cgraph_uid=87, symbol_order=112)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
;;
;; Loop 2
;;  header 19, latch 18
;;  depth 1, outer 0
;;  nodes: 19 18
;;
;; Loop 1
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11 9 10 7 8
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 6 5 }
;; 5 succs { 6 }
;; 6 succs { 12 }
;; 7 succs { 9 8 }
;; 8 succs { 9 }
;; 9 succs { 11 10 }
;; 10 succs { 11 }
;; 11 succs { 12 }
;; 12 succs { 7 13 }
;; 13 succs { 15 14 }
;; 14 succs { 15 }
;; 15 succs { 17 16 }
;; 16 succs { 17 }
;; 17 succs { 19 }
;; 18 succs { 19 }
;; 19 succs { 18 20 }
;; 20 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

Z_55 -> { Z_43 }
p_80 -> { p_47 }
Incremental SSA update started at block: 12
Number of blocks in CFG: 21
Number of blocks to update: 7 ( 33%)



Value ranges after Early VRP:

_2: VARYING
_3: [0, 65535]
_5: VARYING
_7: VARYING
_9: VARYING
_10: [0, 65535]
_14: VARYING
_16: VARYING
_17: [0, 65535]
_19: VARYING
_21: VARYING
_23: VARYING
_24: [0, 65535]
_28: VARYING
_30: VARYING
_31: [0, 65535]
_33: VARYING
_35: VARYING
_37: VARYING
_38: [0, 65535]
_41: VARYING
Z_43: [Z_61, -1B]
DK_44: [DK_98(D), -1B]
j_45: [1, 8]
j_46: [0, 52]
p_47: [0B, &MEM[(void *)&TT + 96B]]
p_48: [&TT, -1B]
Z_52(D): VARYING
Z_55: [Z_61, -1B]
t2_58: [0, +INF]
t3_60: [0, +INF]
Z_61: ~[0B, 0B]
t1_73: VARYING
p_75: VARYING
p_77: VARYING
p_80: [0B, &MEM[(void *)&TT + 96B]]
t2_83: [0, +INF]
t3_85: [0, +INF]
p_87: VARYING
p_90: VARYING
p_92: VARYING
p_94: VARYING
DK_98(D): VARYING
DK_100: VARYING
p_102: VARYING
j_104: [1, 52]
t1_106: VARYING
p_108: VARYING
p_110: VARYING
_113: VARYING
t2_116: [0, +INF]
t3_118: [0, +INF]
Z_119: ~[0B, 0B]
p_120: VARYING
_121: VARYING
p_123: VARYING
p_125: VARYING
p_127: VARYING
j_129: [2, 8]
_130: VARYING
_131: VARYING
_134: VARYING
_135: VARYING
_138: VARYING
_139: VARYING
_142: VARYING
_143: VARYING
_146: VARYING
_147: VARYING


de_key_idea (u16 * Z, u16 * DK)
{
  u16 D.6384;
  u16 x;
  u16 D.6382;
  u16 x;
  u16 D.6380;
  u16 x;
  u16 D.6378;
  u16 x;
  u16 D.6376;
  u16 x;
  u16 D.6374;
  u16 x;
  u16 * p;
  u16 t3;
  u16 t2;
  u16 t1;
  int j;
  u16 TT[52];
  short unsigned int _2;
  int _3;
  short unsigned int _5;
  short unsigned int _7;
  short unsigned int _9;
  int _10;
  short unsigned int _14;
  short unsigned int _16;
  int _17;
  short unsigned int _19;
  short unsigned int _21;
  short unsigned int _23;
  int _24;
  short unsigned int _28;
  short unsigned int _30;
  int _31;
  short unsigned int _33;
  short unsigned int _35;
  short unsigned int _37;
  int _38;
  short unsigned int _41;
  short unsigned int _113;
  short unsigned int _121;
  short unsigned int _130;
  short unsigned int _131;
  short unsigned int _134;
  short unsigned int _135;
  short unsigned int _138;
  short unsigned int _139;
  short unsigned int _142;
  short unsigned int _143;
  short unsigned int _146;
  short unsigned int _147;

  <bb 2> [30.73%]:
  _2 = *Z_52(D);
  _3 = (int) _2;
  if (_2 <= 1)
    goto <bb 4>; [32.39%]
  else
    goto <bb 3>; [67.61%]

  <bb 3> [20.77%]:
  _130 = inv.part.1 (_3);

  <bb 4> [30.73%]:
  # _131 = PHI <_2(2), _130(3)>
  _5 = MEM[(u16 *)Z_52(D) + 2B];
  t2_58 = -_5;
  _7 = MEM[(u16 *)Z_52(D) + 4B];
  t3_60 = -_7;
  Z_61 = &MEM[(void *)Z_52(D) + 8B];
  _9 = MEM[(u16 *)Z_52(D) + 6B];
  _10 = (int) _9;
  if (_9 <= 1)
    goto <bb 6>; [32.39%]
  else
    goto <bb 5>; [67.61%]

  <bb 5> [20.77%]:
  _121 = inv.part.1 (_10);

  <bb 6> [30.73%]:
  # _113 = PHI <_9(4), _121(5)>
  MEM[(u16 *)&TT + 102B] = _113;
  MEM[(u16 *)&TT + 100B] = t3_60;
  MEM[(u16 *)&TT + 98B] = t2_58;
  MEM[(u16 *)&TT + 96B] = _131;
  goto <bb 12>; [0.00%]

  <bb 7> [30.73%]:
  t1_106 = *Z_43;
  p_108 = p_47 + 18446744073709551614;
  _14 = MEM[(u16 *)Z_43 + 2B];
  MEM[(u16 *)p_47 + -2B] = _14;
  p_110 = &MEM[(void *)p_47 + -4B];
  MEM[(u16 *)p_47 + -4B] = t1_106;
  _16 = MEM[(u16 *)Z_43 + 4B];
  _17 = (int) _16;
  if (_16 <= 1)
    goto <bb 9>; [32.39%]
  else
    goto <bb 8>; [67.61%]

  <bb 8> [20.77%]:
  _138 = inv.part.1 (_17);

  <bb 9> [30.73%]:
  # _139 = PHI <_16(7), _138(8)>
  _19 = MEM[(u16 *)Z_43 + 6B];
  t2_116 = -_19;
  _21 = MEM[(u16 *)Z_43 + 8B];
  t3_118 = -_21;
  Z_119 = &MEM[(void *)Z_43 + 12B];
  _23 = MEM[(u16 *)Z_43 + 10B];
  _24 = (int) _23;
  p_120 = &MEM[(void *)p_47 + -6B];
  if (_23 <= 1)
    goto <bb 11>; [32.39%]
  else
    goto <bb 10>; [67.61%]

  <bb 10> [20.77%]:
  _134 = inv.part.1 (_24);

  <bb 11> [30.73%]:
  # _135 = PHI <_23(9), _134(10)>
  MEM[(u16 *)p_47 + -6B] = _135;
  p_123 = &MEM[(void *)p_47 + -8B];
  MEM[(u16 *)p_47 + -8B] = t2_116;
  p_125 = &MEM[(void *)p_47 + -10B];
  MEM[(u16 *)p_47 + -10B] = t3_118;
  p_127 = &MEM[(void *)p_47 + -12B];
  MEM[(u16 *)p_47 + -12B] = _139;
  j_129 = j_45 + 1;

  <bb 12> [0.00%]:
  # Z_43 = PHI <Z_61(6), Z_119(11)>
  # j_45 = PHI <1(6), j_129(11)>
  # p_47 = PHI <&MEM[(void *)&TT + 96B](6), p_127(11)>
  if (j_45 <= 7)
    goto <bb 7>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [30.73%]:
  # Z_55 = PHI <Z_43(12)>
  # p_80 = PHI <p_47(12)>
  t1_73 = *Z_55;
  p_75 = p_80 + 18446744073709551614;
  _28 = MEM[(u16 *)Z_55 + 2B];
  MEM[(u16 *)p_80 + -2B] = _28;
  p_77 = &MEM[(void *)p_80 + -4B];
  MEM[(u16 *)p_80 + -4B] = t1_73;
  _30 = MEM[(u16 *)Z_55 + 4B];
  _31 = (int) _30;
  if (_30 <= 1)
    goto <bb 15>; [32.39%]
  else
    goto <bb 14>; [67.61%]

  <bb 14> [20.77%]:
  _146 = inv.part.1 (_31);

  <bb 15> [30.73%]:
  # _147 = PHI <_30(13), _146(14)>
  _33 = MEM[(u16 *)Z_55 + 6B];
  t2_83 = -_33;
  _35 = MEM[(u16 *)Z_55 + 8B];
  t3_85 = -_35;
  _37 = MEM[(u16 *)Z_55 + 10B];
  _38 = (int) _37;
  p_87 = &MEM[(void *)p_80 + -6B];
  if (_37 <= 1)
    goto <bb 17>; [32.39%]
  else
    goto <bb 16>; [67.61%]

  <bb 16> [20.77%]:
  _142 = inv.part.1 (_38);

  <bb 17> [30.73%]:
  # _143 = PHI <_37(15), _142(16)>
  MEM[(u16 *)p_80 + -6B] = _143;
  p_90 = &MEM[(void *)p_80 + -8B];
  MEM[(u16 *)p_80 + -8B] = t3_85;
  p_92 = &MEM[(void *)p_80 + -10B];
  MEM[(u16 *)p_80 + -10B] = t2_83;
  p_94 = &MEM[(void *)p_80 + -12B];
  MEM[(u16 *)p_80 + -12B] = _147;
  goto <bb 19>; [0.00%]

  <bb 18> [0.00%]:
  DK_100 = DK_44 + 2;
  _41 = *p_48;
  *DK_44 = _41;
  p_102 = p_48 + 2;
  *p_48 = 0;
  j_104 = j_46 + 1;

  <bb 19> [0.00%]:
  # DK_44 = PHI <DK_98(D)(17), DK_100(18)>
  # j_46 = PHI <0(17), j_104(18)>
  # p_48 = PHI <&TT(17), p_102(18)>
  if (j_46 <= 51)
    goto <bb 18>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  TT ={v} {CLOBBER};
  return;

}



;; Function cipher_idea (cipher_idea, funcdef_no=88, decl_uid=4647, cgraph_uid=88, symbol_order=113)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 35 24 25 26 27 28 29 30 31 32 33 34
;;
;; Loop 1
;;  header 3, latch 35
;;  depth 1, outer 0
;;  nodes: 3 35 23 20 21 22 18 15 16 17 13 10 11 12 8 5 6 7 4 9 14 19
;; 2 succs { 3 }
;; 3 succs { 4 7 }
;; 4 succs { 5 6 }
;; 5 succs { 8 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 9 12 }
;; 9 succs { 10 11 }
;; 10 succs { 13 }
;; 11 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 14 17 }
;; 14 succs { 15 16 }
;; 15 succs { 18 }
;; 16 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 19 22 }
;; 19 succs { 20 21 }
;; 20 succs { 23 }
;; 21 succs { 23 }
;; 22 succs { 23 }
;; 23 succs { 35 24 }
;; 35 succs { 3 }
;; 24 succs { 25 28 }
;; 25 succs { 26 27 }
;; 26 succs { 29 }
;; 27 succs { 29 }
;; 28 succs { 29 }
;; 29 succs { 30 33 }
;; 30 succs { 31 32 }
;; 31 succs { 34 }
;; 32 succs { 34 }
;; 33 succs { 34 }
;; 34 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

Z_4 -> { Z_39 }
_103 -> { _116 }
_104 -> { _124 }
t2_109 -> { t2_80 }
x2_111 -> { x2_81 }
_112 -> { _100 }
t2_117 -> { t2_77 }
x1_119 -> { x1_78 }
x4_120 -> { x4_79 }
Incremental SSA update started at block: 3
Number of blocks in CFG: 36
Number of blocks to update: 10 ( 28%)



Value ranges after Early VRP:

Z_4: ~[0B, 0B]  EQUIVALENCES: { Z_39 } (1 elements)
_5: VARYING
_6: [0, 65535]
_7: [0, 65535]
_11: VARYING
_12: [0, 65535]
_13: [0, 65535]
_15: VARYING
_16: [0, 65535]
_17: [0, 65535]
_18: [0, +INF]
_20: VARYING
_21: [0, 65535]
_22: [0, 65535]
_24: VARYING
_25: [0, 65535]
_26: [0, 65535]
_29: VARYING
_31: [0, +INF]
_33: VARYING
_35: [0, +INF]
_36: VARYING
_37: [0, 65535]
_38: [0, 65535]
Z_39: [Z_56(D), -1B]
x1_40: VARYING
x2_41: VARYING
x3_42: VARYING
x4_43: VARYING
r_44: [1, 8]
in_47(D): VARYING
x1_50: VARYING
x2_52: VARYING
x3_54: VARYING
x4_55: VARYING
Z_56(D): VARYING
_58: ~[1, 1]
_61: VARYING
x2_62: [0, +INF]
_64: VARYING
x3_65: [0, +INF]
_67: VARYING
t2_69: [0, +INF]
t1_73: [0, +INF]
Z_74: ~[0B, 0B]
t2_77: [0, +INF]
x1_78: [0, +INF]
x4_79: [0, +INF]
t2_80: [0, +INF]
x2_81: [0, +INF]
r_83: [0, 7]
out_87(D): VARYING
out_88: VARYING
out_91: ~[0B, 0B]
out_94: ~[0B, 0B]
_99: [0, +INF]
_100: VARYING
_103: [_116, _116]
_104: [_124, _124]
_105: VARYING
_106: [0, +INF]
_107: [0, +INF]
_108: VARYING
t2_109: [0, +INF]
x2_111: [0, +INF]
_112: [_100, _100]
_113: VARYING
_114: ~[1, 1]
_115: [0, +INF]
_116: VARYING
t2_117: [0, +INF]
x1_119: [0, +INF]
x4_120: [0, +INF]
_121: VARYING
_122: ~[1, 1]
_123: [0, +INF]
_124: VARYING
_129: VARYING
_130: [0, +INF]
_131: [0, +INF]
_132: VARYING
_137: VARYING
_138: [0, +INF]
_139: [0, +INF]
_140: VARYING


Removing basic block 35
cipher_idea (u16 * in, u16 * out, u16 * Z)
{
  u16 D.6403;
  u16 a;
  u16 b;
  u16 D.6400;
  u16 a;
  u16 b;
  u16 D.6397;
  u16 a;
  u16 b;
  u16 D.6394;
  u16 a;
  u16 b;
  u16 D.6391;
  u16 a;
  u16 b;
  u16 D.6388;
  u16 a;
  u16 b;
  int r;
  register u16 t2;
  register u16 t1;
  register u16 x4;
  register u16 x3;
  register u16 x2;
  register u16 x1;
  short unsigned int _5;
  int _6;
  int _7;
  short unsigned int _11;
  int _12;
  int _13;
  short unsigned int _15;
  int _16;
  int _17;
  short unsigned int _18;
  short unsigned int _20;
  int _21;
  int _22;
  short unsigned int _24;
  int _25;
  int _26;
  short unsigned int _29;
  short unsigned int _31;
  short unsigned int _33;
  short unsigned int _35;
  short unsigned int _36;
  int _37;
  int _38;
  short unsigned int _58;
  short unsigned int _61;
  short unsigned int _64;
  short unsigned int _67;
  short unsigned int _99;
  short unsigned int _100;
  short unsigned int _103;
  short unsigned int _104;
  short unsigned int _105;
  short unsigned int _106;
  short unsigned int _107;
  short unsigned int _108;
  short unsigned int _112;
  short unsigned int _113;
  short unsigned int _114;
  short unsigned int _115;
  short unsigned int _116;
  short unsigned int _121;
  short unsigned int _122;
  short unsigned int _123;
  short unsigned int _124;
  short unsigned int _129;
  short unsigned int _130;
  short unsigned int _131;
  short unsigned int _132;
  short unsigned int _137;
  short unsigned int _138;
  short unsigned int _139;
  short unsigned int _140;

  <bb 2> [0.00%]:
  x1_50 = *in_47(D);
  x2_52 = MEM[(u16 *)in_47(D) + 2B];
  x3_54 = MEM[(u16 *)in_47(D) + 4B];
  x4_55 = MEM[(u16 *)in_47(D) + 6B];

  <bb 3> [100.00%]:
  # Z_39 = PHI <Z_56(D)(2), Z_74(23)>
  # x1_40 = PHI <x1_50(2), x1_78(23)>
  # x2_41 = PHI <x2_52(2), x2_81(23)>
  # x3_42 = PHI <x3_54(2), t2_80(23)>
  # x4_43 = PHI <x4_55(2), x4_79(23)>
  # r_44 = PHI <8(2), r_83(23)>
  _5 = *Z_39;
  _6 = (int) _5;
  _7 = (int) x1_40;
  if (x1_40 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 4> [50.00%]:
  if (_5 != 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 5> [25.00%]:
  _121 = mul.part.0 (_7, _6);
  goto <bb 8>; [100.00%]

  <bb 6> [25.00%]:
  _122 = 1 - x1_40;
  goto <bb 8>; [100.00%]

  <bb 7> [50.00%]:
  _123 = 1 - _5;

  <bb 8> [100.00%]:
  # _124 = PHI <_121(5), _122(6), _123(7)>
  _61 = MEM[(u16 *)Z_39 + 2B];
  x2_62 = x2_41 + _61;
  _64 = MEM[(u16 *)Z_39 + 4B];
  x3_65 = x3_42 + _64;
  _11 = MEM[(u16 *)Z_39 + 6B];
  _12 = (int) _11;
  _13 = (int) x4_43;
  if (x4_43 != 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 9> [50.00%]:
  if (_11 != 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 10> [25.00%]:
  _113 = mul.part.0 (_13, _12);
  goto <bb 13>; [100.00%]

  <bb 11> [25.00%]:
  _114 = 1 - x4_43;
  goto <bb 13>; [100.00%]

  <bb 12> [50.00%]:
  _115 = 1 - _11;

  <bb 13> [100.00%]:
  # _116 = PHI <_113(10), _114(11), _115(12)>
  t2_69 = x3_65 ^ _124;
  _15 = MEM[(u16 *)Z_39 + 8B];
  _16 = (int) _15;
  _17 = (int) t2_69;
  if (x3_65 != _124)
    goto <bb 14>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 14> [50.00%]:
  if (_15 != 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 15> [25.00%]:
  _105 = mul.part.0 (_17, _16);
  goto <bb 18>; [100.00%]

  <bb 16> [25.00%]:
  _106 = 1 - t2_69;
  goto <bb 18>; [100.00%]

  <bb 17> [50.00%]:
  _107 = 1 - _15;

  <bb 18> [100.00%]:
  # _108 = PHI <_105(15), _106(16), _107(17)>
  _18 = x2_62 ^ _116;
  t1_73 = _18 + _108;
  Z_74 = &MEM[(void *)Z_39 + 12B];
  _20 = MEM[(u16 *)Z_39 + 10B];
  _21 = (int) _20;
  _22 = (int) t1_73;
  if (t1_73 != 0)
    goto <bb 19>; [50.00%]
  else
    goto <bb 22>; [50.00%]

  <bb 19> [50.00%]:
  if (_20 != 0)
    goto <bb 20>; [50.00%]
  else
    goto <bb 21>; [50.00%]

  <bb 20> [25.00%]:
  _67 = mul.part.0 (_22, _21);
  goto <bb 23>; [100.00%]

  <bb 21> [25.00%]:
  _58 = 1 - t1_73;
  goto <bb 23>; [100.00%]

  <bb 22> [50.00%]:
  _99 = 1 - _20;

  <bb 23> [100.00%]:
  # _100 = PHI <_67(20), _58(21), _99(22)>
  t2_77 = _100 + _108;
  x1_78 = _100 ^ _124;
  x4_79 = t2_77 ^ _116;
  t2_80 = x2_62 ^ t2_77;
  x2_81 = x3_65 ^ _100;
  r_83 = r_44 + -1;
  if (r_83 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 24> [100.00%]:
  # Z_4 = PHI <Z_39(23)>
  # t2_117 = PHI <t2_77(23)>
  # x1_119 = PHI <x1_78(23)>
  # x4_120 = PHI <x4_79(23)>
  # t2_109 = PHI <t2_80(23)>
  # x2_111 = PHI <x2_81(23)>
  # _112 = PHI <_100(23)>
  # _103 = PHI <_116(23)>
  # _104 = PHI <_124(23)>
  _24 = MEM[(u16 *)Z_4 + 12B];
  _25 = (int) _24;
  _26 = (int) x1_119;
  if (_104 != _112)
    goto <bb 25>; [50.00%]
  else
    goto <bb 28>; [50.00%]

  <bb 25> [50.00%]:
  if (_24 != 0)
    goto <bb 26>; [50.00%]
  else
    goto <bb 27>; [50.00%]

  <bb 26> [25.00%]:
  _137 = mul.part.0 (_26, _25);
  goto <bb 29>; [100.00%]

  <bb 27> [25.00%]:
  _138 = 1 - x1_119;
  goto <bb 29>; [100.00%]

  <bb 28> [50.00%]:
  _139 = 1 - _24;

  <bb 29> [100.00%]:
  # _140 = PHI <_137(26), _138(27), _139(28)>
  out_88 = out_87(D) + 2;
  *out_87(D) = _140;
  _29 = MEM[(u16 *)Z_4 + 14B];
  out_91 = &MEM[(void *)out_87(D) + 4B];
  _31 = _29 + t2_109;
  MEM[(u16 *)out_87(D) + 2B] = _31;
  _33 = MEM[(u16 *)Z_4 + 16B];
  out_94 = &MEM[(void *)out_87(D) + 6B];
  _35 = _33 + x2_111;
  MEM[(u16 *)out_87(D) + 4B] = _35;
  _36 = MEM[(u16 *)Z_4 + 18B];
  _37 = (int) _36;
  _38 = (int) x4_120;
  if (_103 != t2_117)
    goto <bb 30>; [50.00%]
  else
    goto <bb 33>; [50.00%]

  <bb 30> [50.00%]:
  if (_36 != 0)
    goto <bb 31>; [50.00%]
  else
    goto <bb 32>; [50.00%]

  <bb 31> [25.00%]:
  _129 = mul.part.0 (_38, _37);
  goto <bb 34>; [100.00%]

  <bb 32> [25.00%]:
  _130 = 1 - x4_120;
  goto <bb 34>; [100.00%]

  <bb 33> [50.00%]:
  _131 = 1 - _36;

  <bb 34> [100.00%]:
  # _132 = PHI <_129(31), _130(32), _131(33)>
  MEM[(u16 *)out_87(D) + 6B] = _132;
  return;

}



;; Function SetCompBit (SetCompBit, funcdef_no=93, decl_uid=4675, cgraph_uid=93, symbol_order=118)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }

Value ranges after Early VRP:

bitoffset.165_1: VARYING
_2: [0, 536870911]
_3: VARYING
_4: VARYING
_5: VARYING
_6: [1, 128]
_7: ~[-127, 0]
_8: VARYING
_11: [0, +INF]
_12: [0, 536870911]
_13: VARYING
_14: VARYING
_15: VARYING
_16: [1, 128]
_17: ~[-127, 0]
_18: ~[-1, 126]
_19: VARYING
_22: [0, +INF]
bitoffset_24(D): VARYING
byteoffset_25: [0, 536870911]
bitnumb_26: [0, 7]
bitchar_27(D): VARYING
comparray_28(D): VARYING


SetCompBit (u8 * comparray, u32 bitoffset, char bitchar)
{
  int bitnumb;
  u32 byteoffset;
  int bitoffset.165_1;
  sizetype _2;
  u8 * _3;
  unsigned char _4;
  signed char _5;
  int _6;
  signed char _7;
  signed char _8;
  unsigned char _11;
  sizetype _12;
  u8 * _13;
  unsigned char _14;
  signed char _15;
  int _16;
  signed char _17;
  signed char _18;
  signed char _19;
  unsigned char _22;

  <bb 2> [0.00%]:
  byteoffset_25 = bitoffset_24(D) >> 3;
  bitoffset.165_1 = (int) bitoffset_24(D);
  bitnumb_26 = bitoffset.165_1 & 7;
  if (bitchar_27(D) == 49)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _2 = (sizetype) byteoffset_25;
  _3 = comparray_28(D) + _2;
  _4 = *_3;
  _5 = (signed char) _4;
  _6 = 1 << bitnumb_26;
  _7 = (signed char) _6;
  _8 = _5 | _7;
  _11 = (unsigned char) _8;
  *_3 = _11;
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _12 = (sizetype) byteoffset_25;
  _13 = comparray_28(D) + _12;
  _14 = *_13;
  _15 = (signed char) _14;
  _16 = 1 << bitnumb_26;
  _17 = (signed char) _16;
  _18 = ~_17;
  _19 = _15 & _18;
  _22 = (unsigned char) _19;
  *_13 = _22;

  <bb 5> [0.00%]:
  return;

}



;; Function GetCompBit (GetCompBit, funcdef_no=94, decl_uid=4678, cgraph_uid=94, symbol_order=119)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after Early VRP:

bitoffset.166_1: VARYING
_2: [1, 128]
_3: [0, 536870911]
_4: VARYING
_5: VARYING
_6: [0, 255]
bitoffset_7(D): VARYING
byteoffset_8: [0, 536870911]
bitnumb_9: [0, 7]
comparray_10(D): VARYING
_12: [0, 128]


GetCompBit (u8 * comparray, u32 bitoffset)
{
  int bitnumb;
  u32 byteoffset;
  int bitoffset.166_1;
  int _2;
  sizetype _3;
  u8 * _4;
  unsigned char _5;
  int _6;
  int _12;

  <bb 2> [0.00%]:
  byteoffset_8 = bitoffset_7(D) >> 3;
  bitoffset.166_1 = (int) bitoffset_7(D);
  bitnumb_9 = bitoffset.166_1 & 7;
  _2 = 1 << bitnumb_9;
  _3 = (sizetype) byteoffset_8;
  _4 = comparray_10(D) + _3;
  _5 = *_4;
  _6 = (int) _5;
  _12 = _2 & _6;
  return _12;

}



;; Function do_out_error (do_out_error, funcdef_no=100, decl_uid=4712, cgraph_uid=100, symbol_order=125)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;;
;; Loop 1
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8 5 6 7 4 3
;; 2 succs { 9 }
;; 3 succs { 4 6 }
;; 4 succs { 5 8 }
;; 5 succs { 8 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 }
;; 9 succs { 3 10 }
;; 10 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

tot_error_20 -> { tot_error_8 }
sum_24 -> { sum_10 }
Incremental SSA update started at block: 9
Number of blocks in CFG: 11
Number of blocks to update: 5 ( 45%)



Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: VARYING
_4: VARYING
_5: VARYING
neurode_6: [0, 8]
tot_error_7: VARYING
tot_error_8: VARYING
sum_9: VARYING
sum_10: VARYING
patt_16(D): VARYING
tot_error_20: VARYING
sum_21: VARYING
sum_23: VARYING
sum_24: VARYING
neurode_25: [1, 8]


do_out_error (int patt)
{
  double sum;
  double tot_error;
  double error;
  int neurode;
  double _1;
  double _2;
  double _3;
  double _4;
  double _5;

  <bb 2> [0.00%]:
  goto <bb 9>; [0.00%]

  <bb 3> [0.00%]:
  _1 = out_pats[patt_16(D)][neurode_6];
  _2 = out_out[neurode_6];
  _3 = _1 - _2;
  out_error[neurode_6] = _3;
  if (_3 < 0.0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  sum_23 = sum_10 - _3;
  _4 = -_3;
  if (_4 > tot_error_8)
    goto <bb 5>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 5> [0.00%]:
  goto <bb 8>; [0.00%]

  <bb 6> [0.00%]:
  sum_21 = _3 + sum_10;
  if (_3 > tot_error_8)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:

  <bb 8> [0.00%]:
  # tot_error_7 = PHI <_4(5), tot_error_8(6), _3(7), tot_error_8(4)>
  # sum_9 = PHI <sum_23(5), sum_21(6), sum_21(7), sum_23(4)>
  neurode_25 = neurode_6 + 1;

  <bb 9> [0.00%]:
  # neurode_6 = PHI <0(2), neurode_25(8)>
  # tot_error_8 = PHI <0.0(2), tot_error_7(8)>
  # sum_10 = PHI <0.0(2), sum_9(8)>
  if (neurode_6 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  # tot_error_20 = PHI <tot_error_8(9)>
  # sum_24 = PHI <sum_10(9)>
  _5 = sum_24 * 1.25e-1;
  avg_out_error[patt_16(D)] = _5;
  tot_out_error[patt_16(D)] = tot_error_20;
  return;

}



;; Function worst_pass_error (worst_pass_error, funcdef_no=101, decl_uid=4713, cgraph_uid=101, symbol_order=126)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

numpats.193_4 -> { numpats.193_3 }
sum_11 -> { sum_9 }
error_17 -> { error_8 }
Incremental SSA update started at block: 6
Number of blocks in CFG: 8
Number of blocks to update: 4 ( 50%)



Value ranges after Early VRP:

_1: VARYING
_2: VARYING
numpats.193_3: VARYING
numpats.193_4: [-INF, 10]  EQUIVALENCES: { numpats.193_3 } (1 elements)
_5: VARYING
_6: VARYING
error_7: VARYING
error_8: VARYING
sum_9: VARYING
i_10: [0, 10]
sum_11: VARYING
error_17: VARYING
sum_18: VARYING
i_19: VARYING


worst_pass_error ()
{
  int i;
  double sum;
  double error;
  double _1;
  double _2;
  int numpats.193_3;
  int numpats.193_4;
  double _5;
  double _6;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = tot_out_error[i_10];
  if (_1 > error_8)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:

  <bb 5> [0.00%]:
  # error_7 = PHI <error_8(3), _1(4)>
  _2 = avg_out_error[i_10];
  sum_18 = _2 + sum_9;
  i_19 = i_10 + 1;

  <bb 6> [0.00%]:
  # error_8 = PHI <0.0(2), error_7(5)>
  # sum_9 = PHI <0.0(2), sum_18(5)>
  # i_10 = PHI <0(2), i_19(5)>
  numpats.193_3 = numpats;
  if (numpats.193_3 > i_10)
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  # numpats.193_4 = PHI <numpats.193_3(6)>
  # error_17 = PHI <error_8(6)>
  # sum_11 = PHI <sum_9(6)>
  worst_error = error_17;
  _5 = (double) numpats.193_4;
  _6 = sum_11 / _5;
  average_error = _6;
  return;

}



;; Function do_mid_error (do_mid_error, funcdef_no=102, decl_uid=4714, cgraph_uid=102, symbol_order=127)

Created preheader block for loop 2
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 8 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 4 8 3
;;
;; Loop 2
;;  header 4, latch 3
;;  depth 2, outer 1
;;  nodes: 4 3
;; 2 succs { 6 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 8 7 }
;; 8 succs { 4 }
;; 7 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

sum_5 -> { sum_9 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 9
Number of blocks to update: 3 ( 33%)



Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: VARYING
_4: VARYING
sum_5: VARYING
_6: VARYING
_7: VARYING
_8: VARYING
sum_9: VARYING
neurode_10: [0, 8]
i_11: [0, 8]
neurode_18: [1, 8]
sum_19: VARYING
i_20: [1, 8]


Removing basic block 8
do_mid_error ()
{
  int i;
  int neurode;
  double sum;
  double _1;
  double _2;
  double _3;
  double _4;
  double _6;
  double _7;
  double _8;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = out_wts[i_11][neurode_10];
  _2 = out_error[i_11];
  _3 = _1 * _2;
  sum_19 = _3 + sum_9;
  i_20 = i_11 + 1;

  <bb 4> [0.00%]:
  # sum_9 = PHI <0.0(6), sum_19(3)>
  # i_11 = PHI <0(6), i_20(3)>
  if (i_11 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  # sum_5 = PHI <sum_9(4)>
  _4 = mid_out[neurode_10];
  _6 = 1.0e+0 - _4;
  _7 = _4 * _6;
  _8 = sum_5 * _7;
  mid_error[neurode_10] = _8;
  neurode_18 = neurode_10 + 1;

  <bb 6> [0.00%]:
  # neurode_10 = PHI <0(2), neurode_18(5)>
  if (neurode_10 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function adjust_out_wts (adjust_out_wts, funcdef_no=103, decl_uid=4715, cgraph_uid=103, symbol_order=128)

Created preheader block for loop 2
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 8 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 4 8 3
;;
;; Loop 2
;;  header 4, latch 3
;;  depth 2, outer 1
;;  nodes: 4 3
;; 2 succs { 6 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 8 7 }
;; 8 succs { 4 }
;; 7 succs { 1 }

Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: VARYING
_4: VARYING
_5: VARYING
_6: VARYING
_7: VARYING
_8: VARYING
_9: VARYING
weight_10: [0, 8]
neurode_11: [0, 8]
neurode_19: [1, 8]
delta_20: VARYING
delta_21: VARYING
weight_24: [1, 8]


Removing basic block 8
adjust_out_wts ()
{
  double alph;
  double delta;
  double learn;
  int neurode;
  int weight;
  double _1;
  double _2;
  double _3;
  double _4;
  double _5;
  double _6;
  double _7;
  double _8;
  double _9;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = out_error[neurode_11];
  _2 = _1 * 8.99999999999999966693309261245303787291049957275390625e-2;
  _3 = mid_out[weight_10];
  delta_20 = _2 * _3;
  _4 = out_wt_change[neurode_11][weight_10];
  _5 = _4 * 8.99999999999999966693309261245303787291049957275390625e-2;
  delta_21 = _5 + delta_20;
  _6 = out_wts[neurode_11][weight_10];
  _7 = _6 + delta_21;
  out_wts[neurode_11][weight_10] = _7;
  _8 = out_wt_cum_change[neurode_11][weight_10];
  _9 = _8 + delta_21;
  out_wt_cum_change[neurode_11][weight_10] = _9;
  weight_24 = weight_10 + 1;

  <bb 4> [0.00%]:
  # weight_10 = PHI <0(6), weight_24(3)>
  if (weight_10 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  neurode_19 = neurode_11 + 1;

  <bb 6> [0.00%]:
  # neurode_11 = PHI <0(2), neurode_19(5)>
  if (neurode_11 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function adjust_mid_wts (adjust_mid_wts, funcdef_no=104, decl_uid=4716, cgraph_uid=104, symbol_order=129)

Created preheader block for loop 2
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 8 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 4 8 3
;;
;; Loop 2
;;  header 4, latch 3
;;  depth 2, outer 1
;;  nodes: 4 3
;; 2 succs { 6 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 8 7 }
;; 8 succs { 4 }
;; 7 succs { 1 }

Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: VARYING
_4: VARYING
_5: VARYING
_6: VARYING
_7: VARYING
_8: VARYING
_9: VARYING
weight_10: [0, 35]
neurode_11: [0, 8]
neurode_19: [1, 8]
patt_20(D): VARYING
delta_21: VARYING
delta_22: VARYING
weight_25: [1, 35]


Removing basic block 8
adjust_mid_wts (int patt)
{
  double delta;
  double alph;
  double learn;
  int neurode;
  int weight;
  double _1;
  double _2;
  double _3;
  double _4;
  double _5;
  double _6;
  double _7;
  double _8;
  double _9;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = mid_error[neurode_11];
  _2 = _1 * 8.99999999999999966693309261245303787291049957275390625e-2;
  _3 = in_pats[patt_20(D)][weight_10];
  delta_21 = _2 * _3;
  _4 = mid_wt_change[neurode_11][weight_10];
  _5 = _4 * 8.99999999999999966693309261245303787291049957275390625e-2;
  delta_22 = _5 + delta_21;
  _6 = mid_wts[neurode_11][weight_10];
  _7 = _6 + delta_22;
  mid_wts[neurode_11][weight_10] = _7;
  _8 = mid_wt_cum_change[neurode_11][weight_10];
  _9 = _8 + delta_22;
  mid_wt_cum_change[neurode_11][weight_10] = _9;
  weight_25 = weight_10 + 1;

  <bb 4> [0.00%]:
  # weight_10 = PHI <0(6), weight_25(3)>
  if (weight_10 <= 34)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  neurode_19 = neurode_11 + 1;

  <bb 6> [0.00%]:
  # neurode_11 = PHI <0(2), neurode_19(5)>
  if (neurode_11 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function do_back_pass (do_back_pass, funcdef_no=105, decl_uid=4718, cgraph_uid=105, symbol_order=130)

Created preheader block for loop 2
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 8 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 4 3 8
;;
;; Loop 2
;;  header 4, latch 3
;;  depth 2, outer 1
;;  nodes: 4 3
;; 2 succs { 6 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 8 7 }
;; 8 succs { 4 }
;; 7 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

sum_18 -> { sum_12 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 9
Number of blocks to update: 3 ( 33%)



Value ranges after Early VRP:

patt_2(D): VARYING
i_7: [0, 8]
neurode_8: [0, 8]
_9: VARYING
_10: VARYING
_11: VARYING
sum_12: VARYING
sum_13: VARYING
i_14: [1, 8]
_15: VARYING
_16: VARYING
_17: VARYING
sum_18: VARYING
_19: VARYING
neurode_20: [1, 8]


Removing basic block 8
do_back_pass (int patt)
{
  double sum;
  int neurode;
  int i;
  double _9;
  double _10;
  double _11;
  double _15;
  double _16;
  double _17;
  double _19;

  <bb 2> [1.39%]:
  do_out_error (patt_2(D));
  goto <bb 6>; [100.00%]

  <bb 3> [88.89%]:
  _9 = out_wts[i_7][neurode_8];
  _10 = out_error[i_7];
  _11 = _9 * _10;
  sum_13 = _11 + sum_12;
  i_14 = i_7 + 1;

  <bb 4> [100.00%]:
  # sum_12 = PHI <sum_13(3), 0.0(6)>
  # i_7 = PHI <i_14(3), 0(6)>
  if (i_7 <= 7)
    goto <bb 3>; [88.89%]
  else
    goto <bb 5>; [11.11%]

  <bb 5> [11.11%]:
  # sum_18 = PHI <sum_12(4)>
  _15 = mid_out[neurode_8];
  _16 = 1.0e+0 - _15;
  _17 = _15 * _16;
  _19 = _17 * sum_18;
  mid_error[neurode_8] = _19;
  neurode_20 = neurode_8 + 1;

  <bb 6> [12.50%]:
  # neurode_8 = PHI <0(2), neurode_20(5)>
  if (neurode_8 <= 7)
    goto <bb 4>; [88.89%]
  else
    goto <bb 7>; [11.11%]

  <bb 7> [0.00%]:
  adjust_out_wts ();
  adjust_mid_wts (patt_2(D));
  return;

}



;; Function move_wt_changes (move_wt_changes, funcdef_no=106, decl_uid=4719, cgraph_uid=106, symbol_order=131)

Created preheader block for loop 2
Created preheader block for loop 3
Created preheader block for loop 4
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 14 12 7 8 9 10 13 11
;;
;; Loop 2
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9 8 13 7
;;
;; Loop 3
;;  header 8, latch 7
;;  depth 2, outer 2
;;  nodes: 8 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 4 14 3
;;
;; Loop 4
;;  header 4, latch 3
;;  depth 2, outer 1
;;  nodes: 4 3
;; 2 succs { 6 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 14 12 }
;; 14 succs { 4 }
;; 12 succs { 10 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 10 }
;; 10 succs { 13 11 }
;; 13 succs { 8 }
;; 11 succs { 1 }

Value ranges after Early VRP:

_1: VARYING
_2: VARYING
i_3: [0, 8]
i_4: [0, 8]
j_5: [0, 35]
j_6: [0, 8]
i_15: [1, 8]
j_18: [1, 8]
i_20: [1, 8]
j_23: [1, 35]


Removing basic block 12
Removing basic block 13
Removing basic block 14
move_wt_changes ()
{
  int j;
  int i;
  double _1;
  double _2;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = mid_wt_cum_change[i_3][j_5];
  mid_wt_change[i_3][j_5] = _1;
  mid_wt_cum_change[i_3][j_5] = 0.0;
  j_23 = j_5 + 1;

  <bb 4> [0.00%]:
  # j_5 = PHI <0(6), j_23(3)>
  if (j_5 <= 34)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  i_20 = i_3 + 1;

  <bb 6> [0.00%]:
  # i_3 = PHI <0(2), i_20(5)>
  if (i_3 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 7> [0.00%]:
  _2 = out_wt_cum_change[i_4][j_6];
  out_wt_change[i_4][j_6] = _2;
  out_wt_cum_change[i_4][j_6] = 0.0;
  j_18 = j_6 + 1;

  <bb 8> [0.00%]:
  # j_6 = PHI <0(10), j_18(7)>
  if (j_6 <= 7)
    goto <bb 7>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  i_15 = i_4 + 1;

  <bb 10> [0.00%]:
  # i_4 = PHI <0(6), i_15(9)>
  if (i_4 <= 7)
    goto <bb 8>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  return;

}



;; Function check_out_error (check_out_error, funcdef_no=107, decl_uid=4720, cgraph_uid=107, symbol_order=132)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
;;
;; Loop 1
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12 10 11 8 9
;;
;; Loop 2
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 13 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 }
;; 13 succs { 8 14 }
;; 14 succs { 15 16 }
;; 15 succs { 16 }
;; 16 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

numpats.193_1 -> { numpats.193_27 }
error_3 -> { error_22 }
sum_16 -> { sum_24 }
result_28 -> { result_5 }
error_31 -> { error_9 }
Incremental SSA update started at block: 6
Number of blocks in CFG: 17
Number of blocks to update: 10 ( 59%)



Value ranges after Early VRP:

numpats.193_1: [-INF, 10]  EQUIVALENCES: { numpats.193_27 } (1 elements)
_2: VARYING
error_3: VARYING
result_4: [-INF(OVF), +INF(OVF)]
result_5: [-INF(OVF), +INF(OVF)]
result_6: [-INF(OVF), +INF(OVF)]
i_7: [0, 10]
error_8: [-INF(OVF), +INF(OVF)]
error_9: [-INF(OVF), +INF(OVF)]
sum_16: VARYING
i_19: [1, 10]
i_20: [0, 10]
_21: VARYING
error_22: VARYING
_23: VARYING
sum_24: VARYING
sum_25: VARYING
i_26: VARYING
numpats.193_27: VARYING
result_28: [-INF(OVF), +INF(OVF)]
_30: VARYING
error_31: [-INF(OVF), +INF(OVF)]
_32: VARYING
error_33: VARYING


check_out_error ()
{
  double error;
  double sum;
  int i;
  int error;
  int i;
  int result;
  int numpats.193_1;
  double _2;
  double _21;
  double _23;
  int numpats.193_27;
  double _30;
  double _32;

  <bb 2> [15.00%]:
  goto <bb 6>; [100.00%]

  <bb 3> [85.00%]:
  _21 = tot_out_error[i_20];
  if (_21 > error_22)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 4> [42.50%]:

  <bb 5> [85.00%]:
  # error_33 = PHI <error_22(3), _21(4)>
  _23 = avg_out_error[i_20];
  sum_25 = _23 + sum_24;
  i_26 = i_20 + 1;

  <bb 6> [100.00%]:
  # error_22 = PHI <0.0(2), error_33(5)>
  # sum_24 = PHI <0.0(2), sum_25(5)>
  # i_20 = PHI <0(2), i_26(5)>
  numpats.193_27 = numpats;
  if (i_20 < numpats.193_27)
    goto <bb 3>; [85.00%]
  else
    goto <bb 7>; [15.00%]

  <bb 7> [15.00%]:
  # error_3 = PHI <error_22(6)>
  # sum_16 = PHI <sum_24(6)>
  # numpats.193_1 = PHI <numpats.193_27(6)>
  worst_error = error_3;
  _30 = (double) numpats.193_1;
  _32 = sum_16 / _30;
  average_error = _32;
  goto <bb 13>; [0.00%]

  <bb 8> [0.00%]:
  if (error_3 >= 1.000000000000000055511151231257827021181583404541015625e-1)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:

  <bb 10> [0.00%]:
  # result_4 = PHI <result_5(8), 0(9)>
  _2 = tot_out_error[i_7];
  if (_2 >= 1.6e+1)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:

  <bb 12> [0.00%]:
  # error_8 = PHI <error_9(10), 1(11)>
  i_19 = i_7 + 1;

  <bb 13> [0.00%]:
  # result_5 = PHI <1(7), result_4(12)>
  # i_7 = PHI <0(7), i_19(12)>
  # error_9 = PHI <0(7), error_8(12)>
  if (numpats.193_1 > i_7)
    goto <bb 8>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [0.00%]:
  # result_28 = PHI <result_5(13)>
  # error_31 = PHI <error_9(13)>
  if (error_31 == 1)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:

  <bb 16> [0.00%]:
  # result_6 = PHI <result_28(14), -1(15)>
  return result_6;

}



;; Function zero_changes (zero_changes, funcdef_no=108, decl_uid=4721, cgraph_uid=108, symbol_order=133)

Created preheader block for loop 2
Created preheader block for loop 3
Created preheader block for loop 4
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 14 12 7 8 9 10 13 11
;;
;; Loop 2
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9 8 13 7
;;
;; Loop 3
;;  header 8, latch 7
;;  depth 2, outer 2
;;  nodes: 8 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 4 14 3
;;
;; Loop 4
;;  header 4, latch 3
;;  depth 2, outer 1
;;  nodes: 4 3
;; 2 succs { 6 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 14 12 }
;; 14 succs { 4 }
;; 12 succs { 10 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 10 }
;; 10 succs { 13 11 }
;; 13 succs { 8 }
;; 11 succs { 1 }

Value ranges after Early VRP:

i_1: [0, 8]
i_2: [0, 8]
j_3: [0, 35]
j_4: [0, 8]
i_13: [1, 8]
j_16: [1, 8]
i_18: [1, 8]
j_21: [1, 35]


Removing basic block 12
Removing basic block 13
Removing basic block 14
zero_changes ()
{
  int j;
  int i;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  mid_wt_change[i_1][j_3] = 0.0;
  mid_wt_cum_change[i_1][j_3] = 0.0;
  j_21 = j_3 + 1;

  <bb 4> [0.00%]:
  # j_3 = PHI <0(6), j_21(3)>
  if (j_3 <= 34)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  i_18 = i_1 + 1;

  <bb 6> [0.00%]:
  # i_1 = PHI <0(2), i_18(5)>
  if (i_1 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 7> [0.00%]:
  out_wt_change[i_2][j_4] = 0.0;
  out_wt_cum_change[i_2][j_4] = 0.0;
  j_16 = j_4 + 1;

  <bb 8> [0.00%]:
  # j_4 = PHI <0(10), j_16(7)>
  if (j_4 <= 7)
    goto <bb 7>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  i_13 = i_2 + 1;

  <bb 10> [0.00%]:
  # i_2 = PHI <0(6), i_13(9)>
  if (i_2 <= 7)
    goto <bb 8>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  return;

}



;; Function ludcmp (ludcmp, funcdef_no=115, decl_uid=4752, cgraph_uid=115, symbol_order=140)

Created preheader block for loop 2
Created preheader block for loop 5
Created preheader block for loop 7
Created preheader block for loop 3
Created preheader block for loop 8
Created preheader block for loop 9
;; 10 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 42 37 10 40 11 41 12 13 14 15 16 17 39 18 19 20 21 22 23 24 38 25 26 27 28 29 30 31 32 33 34 35 36
;;
;; Loop 2
;;  header 35, latch 34
;;  depth 1, outer 0
;;  nodes: 35 34 30 33 31 32 28 29 24 27 26 38 25 23 16 22 20 21 17 19 39 18 10 15 40 14 11 13 41 12
;;
;; Loop 6
;;  header 33, latch 32
;;  depth 2, outer 2
;;  nodes: 33 32
;;
;; Loop 5
;;  header 26, latch 25
;;  depth 2, outer 2
;;  nodes: 26 25
;;
;; Loop 4
;;  header 23, latch 22
;;  depth 2, outer 2
;;  nodes: 23 22 20 21 17 19 39 18
;;
;; Loop 7
;;  header 19, latch 18
;;  depth 3, outer 4
;;  nodes: 19 18
;;
;; Loop 3
;;  header 15, latch 14
;;  depth 2, outer 2
;;  nodes: 15 14 11 13 41 12
;;
;; Loop 8
;;  header 13, latch 12
;;  depth 3, outer 3
;;  nodes: 13 12
;;
;; Loop 1
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8 7 6 42 5 3 4
;;
;; Loop 9
;;  header 6, latch 5
;;  depth 2, outer 1
;;  nodes: 6 5 3 4
;; 2 succs { 9 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 36 8 }
;; 8 succs { 9 }
;; 9 succs { 42 37 }
;; 42 succs { 6 }
;; 37 succs { 35 }
;; 10 succs { 40 16 }
;; 40 succs { 15 }
;; 11 succs { 41 14 }
;; 41 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 12 14 }
;; 14 succs { 15 }
;; 15 succs { 11 16 }
;; 16 succs { 23 }
;; 17 succs { 39 20 }
;; 39 succs { 19 }
;; 18 succs { 19 }
;; 19 succs { 18 20 }
;; 20 succs { 21 22 }
;; 21 succs { 22 }
;; 22 succs { 23 }
;; 23 succs { 17 24 }
;; 24 succs { 38 28 }
;; 38 succs { 26 }
;; 25 succs { 26 }
;; 26 succs { 25 27 }
;; 27 succs { 28 }
;; 28 succs { 29 30 }
;; 29 succs { 30 }
;; 30 succs { 31 34 }
;; 31 succs { 33 }
;; 32 succs { 33 }
;; 33 succs { 32 34 }
;; 34 succs { 35 }
;; 35 succs { 10 36 }
;; 36 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

big_18 -> { big_107 }
imax_19 -> { imax_124 }
Incremental SSA update started at block: 9
Number of blocks in CFG: 43
Number of blocks to update: 14 ( 33%)



Value ranges after Early VRP:

_1: [0, +INF]
_2: [0, +INF]
_3: VARYING
_4: VARYING
_5: VARYING
LUtempvv.215_10: VARYING
_11: [0, +INF]
_12: [0, +INF]
_13: VARYING
_14: VARYING
_15: [0, 2147483645]
_16: [0, 1735166785160]
_17: VARYING
big_18: VARYING
imax_19: [imax_124, imax_124]
_21: VARYING
_22: [0, 2147483644]
_23: [0, 1735166784352]
_24: VARYING
_25: VARYING
_26: VARYING
_30: ~[2147483647, 18446744071562067967]
_31: [0, 18446744073709550808]
_32: VARYING
_36: VARYING
_37: [0, 2147483645]
_38: [0, 1735166785160]
_39: VARYING
_40: VARYING
_41: VARYING
LUtempvv.216_45: VARYING
_47: [0, 18446744073709551608]
_48: VARYING
_49: VARYING
_50: VARYING
_51: [0, +INF]
_52: [0, +INF]
_53: VARYING
_54: [0, +INF]
_55: [0, +INF]
_56: VARYING
_60: VARYING
_64: VARYING
_65: VARYING
LUtempvv.217_66: VARYING
_67: [0, +INF]
_68: [0, +INF]
_69: VARYING
_71: [0, +INF]
_72: [0, +INF]
_73: VARYING
_78: VARYING
_83: [0, 2147483646]
_84: [0, 8589934584]
_85: VARYING
_87: [0, 1735166785968]
_88: VARYING
_89: VARYING
_93: VARYING
_97: VARYING
_98: [0, +INF]
_99: [0, +INF]
_100: VARYING
_101: VARYING
_105: VARYING
big_106: VARYING
big_107: VARYING
big_108: VARYING
big_109: VARYING
sum_110: VARYING
sum_111: VARYING
sum_112: VARYING
sum_113: VARYING
i_114: [0, +INF]
i_115: [0, 2147483646]
i_116: VARYING
i_117: [i_170, +INF]
j_118: [0, +INF]
j_119: [0, +INF]
k_120: [0, 2147483646]
k_121: [0, 2147483646]
k_122: [0, +INF]
imax_123: VARYING
imax_124: VARYING
imax_125: VARYING
_126: [0, 1]
d_141(D): VARYING
n_144(D): VARYING
a_148(D): VARYING
sum_149: VARYING
sum_151: VARYING
k_152: [1, 2147483645]
i_154: [1, 2147483646]
dum_159: VARYING
dum_162: VARYING
k_165: VARYING
indx_166(D): VARYING
dum_169: VARYING
i_170: VARYING
i_172: VARYING
j_173: [1, +INF]
sum_174: VARYING
sum_176: VARYING
k_177: [1, 2147483646]
dum_179: VARYING
i_182: [-2147483647, +INF]
i_186: VARYING
j_189: [1, +INF]


Removing basic block 37
Removing basic block 38
Removing basic block 39
Removing basic block 40
Removing basic block 41
Removing basic block 42
ludcmp (double[101] * a, int n, int * indx, int * d)
{
  double tiny;
  int imax;
  int k;
  int j;
  int i;
  double dum;
  double sum;
  double big;
  long unsigned int _1;
  long unsigned int _2;
  double[101] * _3;
  double _4;
  double _5;
  fardouble * LUtempvv.215_10;
  long unsigned int _11;
  long unsigned int _12;
  fardouble * _13;
  double _14;
  long unsigned int _15;
  long unsigned int _16;
  double[101] * _17;
  double _21;
  long unsigned int _22;
  long unsigned int _23;
  double[101] * _24;
  double _25;
  double _26;
  long unsigned int _30;
  long unsigned int _31;
  double[101] * _32;
  double _36;
  long unsigned int _37;
  long unsigned int _38;
  double[101] * _39;
  double _40;
  double _41;
  fardouble * LUtempvv.216_45;
  long unsigned int _47;
  fardouble * _48;
  double _49;
  double _50;
  long unsigned int _51;
  long unsigned int _52;
  double[101] * _53;
  long unsigned int _54;
  long unsigned int _55;
  double[101] * _56;
  double _60;
  int _64;
  int _65;
  fardouble * LUtempvv.217_66;
  long unsigned int _67;
  long unsigned int _68;
  fardouble * _69;
  long unsigned int _71;
  long unsigned int _72;
  fardouble * _73;
  double _78;
  long unsigned int _83;
  long unsigned int _84;
  int * _85;
  long unsigned int _87;
  double[101] * _88;
  double _89;
  int _93;
  double _97;
  long unsigned int _98;
  long unsigned int _99;
  double[101] * _100;
  double _101;
  double _105;
  int _126;

  <bb 2> [0.00%]:
  *d_141(D) = 1;
  goto <bb 9>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_114;
  _2 = _1 * 808;
  _3 = a_148(D) + _2;
  _4 = *_3[j_118];
  _5 = ABS_EXPR <_4>;
  if (_5 > big_107)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:

  <bb 5> [0.00%]:
  # big_106 = PHI <big_107(3), _5(4)>
  j_189 = j_118 + 1;

  <bb 6> [0.00%]:
  # big_107 = PHI <0.0(9), big_106(5)>
  # j_118 = PHI <0(9), j_189(5)>
  if (j_118 < n_144(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  # big_18 = PHI <big_107(6)>
  if (big_18 == 0.0)
    goto <bb 36>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  LUtempvv.215_10 = LUtempvv;
  _11 = (long unsigned int) i_114;
  _12 = _11 * 8;
  _13 = LUtempvv.215_10 + _12;
  _14 = 1.0e+0 / big_18;
  *_13 = _14;
  i_186 = i_114 + 1;

  <bb 9> [0.00%]:
  # i_114 = PHI <0(2), i_186(8)>
  if (i_114 < n_144(D))
    goto <bb 6>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 10> [0.00%]:
  if (j_119 != 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 11> [0.00%]:
  _15 = (long unsigned int) i_115;
  _16 = _15 * 808;
  _17 = a_148(D) + _16;
  sum_149 = *_17[j_119];
  if (i_115 != 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 12> [0.00%]:
  _21 = *_17[k_120];
  _22 = (long unsigned int) k_120;
  _23 = _22 * 808;
  _24 = a_148(D) + _23;
  _25 = *_24[j_119];
  _26 = _21 * _25;
  sum_151 = sum_110 - _26;
  k_152 = k_120 + 1;

  <bb 13> [0.00%]:
  # sum_110 = PHI <sum_149(11), sum_151(12)>
  # k_120 = PHI <0(11), k_152(12)>
  if (i_115 > k_120)
    goto <bb 12>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [0.00%]:
  # sum_111 = PHI <sum_149(11), sum_110(13)>
  *_17[j_119] = sum_111;
  i_154 = i_115 + 1;

  <bb 15> [0.00%]:
  # i_115 = PHI <0(10), i_154(14)>
  if (i_115 < j_119)
    goto <bb 11>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 16> [0.00%]:
  goto <bb 23>; [0.00%]

  <bb 17> [0.00%]:
  _30 = (long unsigned int) i_116;
  _31 = _30 * 808;
  _32 = a_148(D) + _31;
  sum_174 = *_32[j_119];
  if (j_119 != 0)
    goto <bb 19>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 18> [0.00%]:
  _36 = *_32[k_121];
  _37 = (long unsigned int) k_121;
  _38 = _37 * 808;
  _39 = a_148(D) + _38;
  _40 = *_39[j_119];
  _41 = _36 * _40;
  sum_176 = sum_112 - _41;
  k_177 = k_121 + 1;

  <bb 19> [0.00%]:
  # sum_112 = PHI <sum_174(17), sum_176(18)>
  # k_121 = PHI <0(17), k_177(18)>
  if (j_119 > k_121)
    goto <bb 18>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  # sum_113 = PHI <sum_174(17), sum_112(19)>
  *_32[j_119] = sum_113;
  LUtempvv.216_45 = LUtempvv;
  _47 = _30 * 8;
  _48 = LUtempvv.216_45 + _47;
  _49 = *_48;
  _50 = ABS_EXPR <sum_113>;
  dum_179 = _49 * _50;
  if (big_109 <= dum_179)
    goto <bb 21>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 21> [0.00%]:

  <bb 22> [0.00%]:
  # big_108 = PHI <big_109(20), dum_179(21)>
  # imax_123 = PHI <imax_124(20), i_116(21)>
  i_182 = i_116 + 1;

  <bb 23> [0.00%]:
  # big_109 = PHI <0.0(16), big_108(22)>
  # i_116 = PHI <j_119(16), i_182(22)>
  # imax_124 = PHI <imax_125(16), imax_123(22)>
  if (i_116 < n_144(D))
    goto <bb 17>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 24> [0.00%]:
  # imax_19 = PHI <imax_124(23)>
  if (imax_19 != j_119)
    goto <bb 26>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 25> [0.00%]:
  _51 = (long unsigned int) imax_19;
  _52 = _51 * 808;
  _53 = a_148(D) + _52;
  dum_162 = *_53[k_122];
  _54 = (long unsigned int) j_119;
  _55 = _54 * 808;
  _56 = a_148(D) + _55;
  _60 = *_56[k_122];
  *_53[k_122] = _60;
  *_56[k_122] = dum_162;
  k_165 = k_122 + 1;

  <bb 26> [0.00%]:
  # k_122 = PHI <0(24), k_165(25)>
  if (k_122 < n_144(D))
    goto <bb 25>; [0.00%]
  else
    goto <bb 27>; [0.00%]

  <bb 27> [0.00%]:
  _64 = *d_141(D);
  _65 = -_64;
  *d_141(D) = _65;
  LUtempvv.217_66 = LUtempvv;
  _67 = (long unsigned int) imax_19;
  _68 = _67 * 8;
  _69 = LUtempvv.217_66 + _68;
  dum_159 = *_69;
  _71 = (long unsigned int) j_119;
  _72 = _71 * 8;
  _73 = LUtempvv.217_66 + _72;
  _78 = *_73;
  *_69 = _78;
  *_73 = dum_159;

  <bb 28> [0.00%]:
  _83 = (long unsigned int) j_119;
  _84 = _83 * 4;
  _85 = indx_166(D) + _84;
  *_85 = imax_19;
  _87 = _83 * 808;
  _88 = a_148(D) + _87;
  _89 = *_88[j_119];
  if (_89 == 0.0)
    goto <bb 29>; [0.00%]
  else
    goto <bb 30>; [0.00%]

  <bb 29> [0.00%]:
  *_88[j_119] = 9.99999999999999945153271454209571651729503702787392447108e-21;

  <bb 30> [0.00%]:
  _93 = n_144(D) + -1;
  if (_93 != j_119)
    goto <bb 31>; [0.00%]
  else
    goto <bb 34>; [0.00%]

  <bb 31> [0.00%]:
  _97 = *_88[j_119];
  dum_169 = 1.0e+0 / _97;
  i_170 = j_119 + 1;
  goto <bb 33>; [0.00%]

  <bb 32> [0.00%]:
  _98 = (long unsigned int) i_117;
  _99 = _98 * 808;
  _100 = a_148(D) + _99;
  _101 = *_100[j_119];
  _105 = _101 * dum_169;
  *_100[j_119] = _105;
  i_172 = i_117 + 1;

  <bb 33> [0.00%]:
  # i_117 = PHI <i_170(31), i_172(32)>
  if (i_117 < n_144(D))
    goto <bb 32>; [0.00%]
  else
    goto <bb 34>; [0.00%]

  <bb 34> [0.00%]:
  j_173 = j_119 + 1;

  <bb 35> [0.00%]:
  # j_119 = PHI <0(9), j_173(34)>
  # imax_125 = PHI <0(9), imax_19(34)>
  if (j_119 < n_144(D))
    goto <bb 10>; [0.00%]
  else
    goto <bb 36>; [0.00%]

  <bb 36> [0.00%]:
  # _126 = PHI <0(7), 1(35)>
  return _126;

}



;; Function lubksb (lubksb, funcdef_no=116, decl_uid=4757, cgraph_uid=116, symbol_order=141)

Created preheader block for loop 4
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 18 4 5 6 7 8 9 10 11 12 13 14 15 16 17
;;
;; Loop 2
;;  header 16, latch 15
;;  depth 1, outer 0
;;  nodes: 16 15 11 14 12 13
;;
;; Loop 3
;;  header 14, latch 13
;;  depth 2, outer 2
;;  nodes: 14 13
;;
;; Loop 1
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8 5 6 7 3 18 4
;;
;; Loop 4
;;  header 5, latch 4
;;  depth 2, outer 1
;;  nodes: 5 4
;; 2 succs { 9 }
;; 3 succs { 18 6 }
;; 18 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 4 8 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 }
;; 9 succs { 3 10 }
;; 10 succs { 16 }
;; 11 succs { 12 15 }
;; 12 succs { 14 }
;; 13 succs { 14 }
;; 14 succs { 13 15 }
;; 15 succs { 16 }
;; 16 succs { 11 17 }
;; 17 succs { 1 }

Value ranges after Early VRP:

_1: [0, +INF]
_2: [0, +INF]
_3: VARYING
_4: ~[2147483648, 18446744071562067967]
_5: [0, 18446744073709551608]
_6: VARYING
_8: [0, +INF]
_9: VARYING
_13: VARYING
_15: [0, +INF]
_16: VARYING
_17: VARYING
_18: [0, +INF]
_19: [0, +INF]
_20: VARYING
_21: VARYING
_22: VARYING
_26: [0, 2147483647]
_27: [0, 17179869176]
_28: VARYING
_31: [0, 1735166786776]
_32: VARYING
_33: VARYING
_34: ~[2147483647, 18446744071562067967]
_35: [0, 18446744073709551608]
_36: VARYING
_37: VARYING
_38: VARYING
_40: [0, 1735166786776]
_41: VARYING
_42: VARYING
_46: VARYING
i_47: [0, +INF]
i_48: VARYING
j_49: [ii_52, +INF]
j_50: [j_66, +INF]
ii_51: VARYING
ii_52: VARYING
sum_53: VARYING
sum_54: VARYING
sum_55: VARYING
sum_56: VARYING
n_62(D): VARYING
i_63: [-INF(OVF), 2147483646]
b_64(D): VARYING
sum_65: VARYING
j_66: VARYING
a_67(D): VARYING
sum_68: VARYING
j_69: [-2147483647, +INF]
i_71: [-1, 2147483646]
indx_72(D): VARYING
ip_73: VARYING
sum_74: VARYING
sum_78: VARYING
j_79: VARYING
i_81: VARYING


Removing basic block 18
lubksb (double[101] * a, int n, int * indx, double * b)
{
  double sum;
  int ii;
  int ip;
  int j;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  long unsigned int _4;
  long unsigned int _5;
  double * _6;
  long unsigned int _8;
  double * _9;
  double _13;
  long unsigned int _15;
  double[101] * _16;
  double _17;
  long unsigned int _18;
  long unsigned int _19;
  double * _20;
  double _21;
  double _22;
  long unsigned int _26;
  long unsigned int _27;
  double * _28;
  long unsigned int _31;
  double[101] * _32;
  double _33;
  long unsigned int _34;
  long unsigned int _35;
  double * _36;
  double _37;
  double _38;
  long unsigned int _40;
  double[101] * _41;
  double _42;
  double _46;

  <bb 2> [0.00%]:
  goto <bb 9>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_47;
  _2 = _1 * 4;
  _3 = indx_72(D) + _2;
  ip_73 = *_3;
  _4 = (long unsigned int) ip_73;
  _5 = _4 * 8;
  _6 = b_64(D) + _5;
  sum_74 = *_6;
  _8 = _1 * 8;
  _9 = b_64(D) + _8;
  _13 = *_9;
  *_6 = _13;
  if (ii_52 != -1)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  _15 = _1 * 808;
  _16 = a_67(D) + _15;
  _17 = *_16[j_49];
  _18 = (long unsigned int) j_49;
  _19 = _18 * 8;
  _20 = b_64(D) + _19;
  _21 = *_20;
  _22 = _17 * _21;
  sum_78 = sum_53 - _22;
  j_79 = j_49 + 1;

  <bb 5> [0.00%]:
  # j_49 = PHI <ii_52(3), j_79(4)>
  # sum_53 = PHI <sum_74(3), sum_78(4)>
  if (i_47 > j_49)
    goto <bb 4>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 6> [0.00%]:
  if (sum_74 != 0.0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:

  <bb 8> [0.00%]:
  # ii_51 = PHI <ii_52(5), -1(6), i_47(7)>
  # sum_54 = PHI <sum_53(5), sum_74(6), sum_74(7)>
  *_9 = sum_54;
  i_81 = i_47 + 1;

  <bb 9> [0.00%]:
  # i_47 = PHI <0(2), i_81(8)>
  # ii_52 = PHI <-1(2), ii_51(8)>
  if (i_47 < n_62(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  i_63 = n_62(D) + -1;
  goto <bb 16>; [0.00%]

  <bb 11> [0.00%]:
  _26 = (long unsigned int) i_48;
  _27 = _26 * 8;
  _28 = b_64(D) + _27;
  sum_65 = *_28;
  if (i_48 != i_63)
    goto <bb 12>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 12> [0.00%]:
  j_66 = i_48 + 1;
  goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  _31 = _26 * 808;
  _32 = a_67(D) + _31;
  _33 = *_32[j_50];
  _34 = (long unsigned int) j_50;
  _35 = _34 * 8;
  _36 = b_64(D) + _35;
  _37 = *_36;
  _38 = _33 * _37;
  sum_68 = sum_55 - _38;
  j_69 = j_50 + 1;

  <bb 14> [0.00%]:
  # j_50 = PHI <j_66(12), j_69(13)>
  # sum_55 = PHI <sum_65(12), sum_68(13)>
  if (j_50 < n_62(D))
    goto <bb 13>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 15> [0.00%]:
  # sum_56 = PHI <sum_65(11), sum_55(14)>
  _40 = _26 * 808;
  _41 = a_67(D) + _40;
  _42 = *_41[i_48];
  _46 = sum_56 / _42;
  *_28 = _46;
  i_71 = i_48 + -1;

  <bb 16> [0.00%]:
  # i_48 = PHI <i_63(10), i_71(15)>
  if (i_48 >= 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 17> [0.00%]:
  return;

}



;; Function lusolve (lusolve, funcdef_no=117, decl_uid=4761, cgraph_uid=117, symbol_order=142)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }

Value ranges after Early VRP:

_1: VARYING
_2: [0, 1]
a_5(D): VARYING
n_6(D): VARYING
b_8(D): VARYING


lusolve (double[101] * a, int n, double * b)
{
  int d;
  int indx[101];
  int _1;
  int _2;

  <bb 2> [0.00%]:
  _1 = ludcmp (a_5(D), n_6(D), &indx, &d);
  if (_1 == 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  lubksb (a_5(D), n_6(D), &indx, b_8(D));

  <bb 4> [0.00%]:
  # _2 = PHI <0(2), 1(3)>
  indx ={v} {CLOBBER};
  d ={v} {CLOBBER};
  return _2;

}



;; Function LUFreeMem (LUFreeMem, funcdef_no=112, decl_uid=4737, cgraph_uid=112, symbol_order=137)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }

Value ranges after Early VRP:

LUtempvv.221_1: VARYING
a_5(D): VARYING
b_7(D): VARYING
abase_10(D): VARYING
bbase_12(D): VARYING


LUFreeMem (fardouble * a, fardouble * b, fardouble * abase, fardouble * bbase)
{
  int systemerror;
  fardouble * LUtempvv.221_1;

  <bb 2> [0.00%]:
  FreeMemory (a_5(D), &systemerror);
  FreeMemory (b_7(D), &systemerror);
  LUtempvv.221_1 = LUtempvv;
  FreeMemory (LUtempvv.221_1, &systemerror);
  if (abase_10(D) != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  FreeMemory (abase_10(D), &systemerror);

  <bb 4> [0.00%]:
  if (bbase_12(D) != 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  FreeMemory (bbase_12(D), &systemerror);

  <bb 6> [0.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoIDEAIteration (DoIDEAIteration, funcdef_no=83, decl_uid=4632, cgraph_uid=83, symbol_order=108)

Created preheader block for loop 3
Created preheader block for loop 2
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 10 5 6 7 8 11 9
;;
;; Loop 1
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7 6 10 5 4 11 3
;;
;; Loop 3
;;  header 6, latch 5
;;  depth 2, outer 1
;;  nodes: 6 5
;;
;; Loop 2
;;  header 4, latch 3
;;  depth 2, outer 1
;;  nodes: 4 3
;; 2 succs { 8 }
;; 3 succs { 4 }
;; 4 succs { 3 10 }
;; 10 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 8 }
;; 8 succs { 11 9 }
;; 11 succs { 4 }
;; 9 succs { 1 }

Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: VARYING
_4: VARYING
i_5: [0, +INF]
j_6: [0, +INF]
j_7: [0, +INF]
elapsed_13: VARYING
nloops_15(D): VARYING
_17: VARYING
arraysize_19(D): VARYING
i_21: [0, +INF]
plain2_22(D): VARYING
crypt1_23(D): VARYING
DK_24(D): VARYING
j_26: ~[7, 7]
plain1_27(D): VARYING
Z_28(D): VARYING
j_30: [0, +INF]


Removing basic block 10
Removing basic block 11
DoIDEAIteration (faruchar * plain1, faruchar * crypt1, faruchar * plain2, long unsigned int arraysize, long unsigned int nloops, u16 * Z, u16 * DK)
{
  long unsigned int elapsed;
  register long unsigned int j;
  register long unsigned int i;
  faruchar * _1;
  faruchar * _2;
  faruchar * _3;
  faruchar * _4;
  long unsigned int _17;

  <bb 2> [0.00%]:
  elapsed_13 = StartStopwatch ();
  goto <bb 8>; [0.00%]

  <bb 3> [0.00%]:
  _1 = crypt1_23(D) + j_6;
  _2 = plain1_27(D) + j_6;
  cipher_idea (_2, _1, Z_28(D));
  j_30 = j_6 + 8;

  <bb 4> [0.00%]:
  # j_6 = PHI <0(8), j_30(3)>
  if (j_6 < arraysize_19(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _3 = plain2_22(D) + j_7;
  _4 = crypt1_23(D) + j_7;
  cipher_idea (_4, _3, DK_24(D));
  j_26 = j_7 + 8;

  <bb 6> [0.00%]:
  # j_7 = PHI <0(4), j_26(5)>
  if (j_7 < arraysize_19(D))
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  i_21 = i_5 + 1;

  <bb 8> [0.00%]:
  # i_5 = PHI <0(2), i_21(7)>
  if (i_5 < nloops_15(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  _17 = StopStopwatch (elapsed_13);
  return _17;

}



;; Function DoHuffIteration (DoHuffIteration, funcdef_no=92, decl_uid=4671, cgraph_uid=92, symbol_order=117)

Created preheader block for loop 10
Created preheader block for loop 13
Created preheader block for loop 6
Created preheader block for loop 8
Created preheader block for loop 4
Created preheader block for loop 3
Created preheader block for loop 2
;; 14 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 59 5 6 58 7 8 9 10 11 12 13 14 15 16 56 17 18 19 20 21 22 23 57 24 25 26 27 28 29 30 31 32 33 34 35 36 37 55 38 39 40 41 42 43 44 45 54 46 47 48 49 50 51 62 61 52 60 53
;;
;; Loop 1
;;  header 52, latch 61
;;  depth 1, outer 0
;;  nodes: 52 61 51 50 46 49 47 48 54 62 45 44 43 42 55 41 40 39 38 37 32 36 34 35 33 30 23 22 17 21 18 19 20 56 31 16 11 15 13 14 12 10 58 9 7 8 6 59 5 4 60 3 29 57 28 24 25 26 27
;;
;; Loop 10
;;  header 46, latch 62
;;  depth 2, outer 1
;;  nodes: 46 62 51 50 49 47 48
;;
;; Loop 11
;;  header 50, latch 49
;;  depth 3, outer 10
;;  nodes: 50 49 47 48
;;
;; Loop 9
;;  header 45, latch 43
;;  depth 2, outer 1
;;  nodes: 45 43 42 55 41 40 39 38 37 32 36 34 35 33
;;
;; Loop 13
;;  header 42, latch 41
;;  depth 3, outer 9
;;  nodes: 42 41 40 39 38
;;
;; Loop 12
;;  header 37, latch 36
;;  depth 3, outer 9
;;  nodes: 37 36 34 35 33
;;
;; Loop 6
;;  header 17, latch 31
;;  depth 2, outer 1
;;  nodes: 17 31 30 29 57 28 24 25 26 27 23 22 21 18 19 20
;;
;; Loop 8
;;  header 29, latch 28
;;  depth 3, outer 6
;;  nodes: 29 28 24 25 26 27
;;
;; Loop 7
;;  header 22, latch 21
;;  depth 3, outer 6
;;  nodes: 22 21 18 19 20
;;
;; Loop 5
;;  header 16, latch 15
;;  depth 2, outer 1
;;  nodes: 16 15 13 14 12
;;
;; Loop 4
;;  header 10, latch 9
;;  depth 2, outer 1
;;  nodes: 10 9 7 8
;;
;; Loop 3
;;  header 6, latch 5
;;  depth 2, outer 1
;;  nodes: 6 5
;;
;; Loop 2
;;  header 4, latch 3
;;  depth 2, outer 1
;;  nodes: 4 3
;; 2 succs { 52 }
;; 3 succs { 4 }
;; 4 succs { 3 59 }
;; 59 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 58 }
;; 58 succs { 10 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 10 }
;; 10 succs { 7 11 }
;; 11 succs { 16 }
;; 12 succs { 13 14 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 16 }
;; 16 succs { 12 56 }
;; 56 succs { 17 }
;; 17 succs { 22 }
;; 18 succs { 19 21 }
;; 19 succs { 20 21 }
;; 20 succs { 21 }
;; 21 succs { 22 }
;; 22 succs { 18 23 }
;; 23 succs { 44 57 }
;; 57 succs { 29 }
;; 24 succs { 25 28 }
;; 25 succs { 26 28 }
;; 26 succs { 27 28 }
;; 27 succs { 28 }
;; 28 succs { 29 }
;; 29 succs { 24 30 }
;; 30 succs { 44 31 }
;; 31 succs { 17 }
;; 32 succs { 37 }
;; 33 succs { 34 35 }
;; 34 succs { 36 }
;; 35 succs { 36 }
;; 36 succs { 37 }
;; 37 succs { 33 55 }
;; 55 succs { 42 }
;; 38 succs { 39 40 }
;; 39 succs { 41 }
;; 40 succs { 41 }
;; 41 succs { 42 }
;; 42 succs { 38 43 }
;; 43 succs { 45 }
;; 44 succs { 45 }
;; 45 succs { 32 54 }
;; 54 succs { 46 }
;; 46 succs { 50 }
;; 47 succs { 49 48 }
;; 48 succs { 49 }
;; 49 succs { 50 }
;; 50 succs { 47 51 }
;; 51 succs { 62 61 }
;; 62 succs { 46 }
;; 61 succs { 52 }
;; 52 succs { 60 53 }
;; 60 succs { 4 }
;; 53 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

root_87 -> { root_149 }
lowfreq1_88 -> { lowfreq1_151 }
lowfreq2_89 -> { lowfreq2_153 }
lowidx1_90 -> { lowidx1_155 }
lowidx2_91 -> { lowidx2_157 }
bitoffset_92 -> { bitoffset_158 }
bitoffset_93 -> { bitoffset_159 }
bitoffset_94 -> { bitoffset_161 }
bitstringlen_95 -> { bitstringlen_163 }
_138 -> { _129 }
Incremental SSA update started at block: 17
Number of blocks in CFG: 63
Number of blocks to update: 32 ( 51%)



Value ranges after Early VRP:

_1: [0, 255]
_2: [0, 5100]
_3: VARYING
_7: [0, +INF]
_9: VARYING
_10: VARYING
_11: ~[128, 18446744073709551487]
_12: [0, 18446744073709551596]
_13: VARYING
_14: VARYING
_21: VARYING
j.161_22: [0, 9223372036854775807]
_23: [0, 255]
_24: [0, 5100]
_25: VARYING
_26: VARYING
_31: VARYING
_35: VARYING
_36: VARYING
_37: [0, 511]
_38: [0, 10220]
_39: VARYING
_40: VARYING
_55: [0, 2147483647]
_56: [0, 42949672940]
_57: VARYING
_58: VARYING
_62: VARYING
_66: [0, 2147483646]
_67: [0, 42949672920]
_68: VARYING
_69: VARYING
_73: VARYING
_77: [0, 18446744073709551614]
_78: [0, +INF]
_79: VARYING
_80: [0, 18446744073709551614]
_81: [0, +INF]
_82: VARYING
_83: [256, 2147483647]
_84: [5120, 42949672940]
_85: VARYING
_86: VARYING
root_87: [255, 2147483646]  EQUIVALENCES: { root_149 } (1 elements)
lowfreq1_88: VARYING
lowfreq2_89: VARYING
lowidx1_90: [lowidx1_155, lowidx1_155]
lowidx2_91: [lowidx2_157, lowidx2_157]
bitoffset_92: [bitoffset_159, +INF]
bitoffset_93: [bitoffset_159, bitoffset_159]
bitoffset_94: [bitoffset_160, +INF]
bitstringlen_95: [0, 30]
_97: VARYING
_98: VARYING
_103: ~[2147483648, 18446744071562067967]
_104: [0, 18446744073709551596]
_105: VARYING
_106: VARYING
_110: ~[2147483648, 18446744071562067967]
_111: [0, 18446744073709551596]
_112: VARYING
_113: VARYING
_114: VARYING
_115: [-128, 127]
_116: [0, +INF]
_118: [0, 2147483647]
_119: [0, +INF]
_127: ~[2147483648, 18446744071562067967]
_128: [0, 18446744073709551596]
_129: VARYING
_130: VARYING
_134: VARYING
textoffset.163_135: [0, 9223372036854775806]
_136: VARYING
_137: VARYING
_138: ~[0B, 0B]  EQUIVALENCES: { _129 } (1 elements)
nloops_139: [0, nloops_183(D)]
i_140: [0, 256]
i_141: [0, 256]
i_142: [0, 512]
i_143: [0, +INF]
i_144: [0, +INF]
i_145: [0, +INF]
i_146: VARYING
i_147: VARYING
j_148: [0, +INF]
root_149: [255, +INF]
lowfreq1_150: VARYING
lowfreq1_151: VARYING
lowfreq2_152: VARYING
lowfreq2_153: VARYING
lowidx1_154: VARYING
lowidx1_155: VARYING
lowidx2_156: VARYING
lowidx2_157: VARYING
bitoffset_158: [bitoffset_159, +INF]
bitoffset_159: VARYING
bitoffset_160: VARYING
bitoffset_161: [bitoffset_160, +INF]
textoffset_162: [0, 9223372036854775806]
bitstringlen_163: [0, 30]
bitstringlen_164: [-30, bitstringlen_95]
c_165: VARYING
elapsed_182: VARYING
nloops_183(D): VARYING
nloops_184: [0, +INF]
_186: VARYING
arraysize_190(D): VARYING
hufftree_192(D): VARYING
root_202: [256, +INF]
i_211: [1, +INF]
decomparray_218(D): VARYING
textoffset_220: [1, +INF]
comparray_221(D): VARYING
_222: VARYING
i_223: VARYING
bitoffset_225: VARYING
plaintext_226(D): VARYING
c_227: [-128, 127]
bitstringlen_229: VARYING
i_230: [1, +INF(OVF)]
bitoffset_232: VARYING
bitstringlen_236: [1, 31]
i_239: [1, +INF(OVF)]
i_244: [1, 512]
i_246: [1, 256]
j_248: [1, +INF(OVF)]
i_251: [1, 256]
byteoffset_253: [0, 536870911]
bitoffset.165_254: VARYING
bitnumb_255: [0, 7]
_256: [0, 536870911]
_257: VARYING
_258: VARYING
_259: VARYING
_260: [1, 128]
_261: ~[-127, 0]
_262: VARYING
_263: [0, +INF]
_264: [0, 536870911]
_265: VARYING
_266: VARYING
_267: VARYING
_268: [1, 128]
_269: ~[-127, 0]
_270: ~[-1, 126]
_271: VARYING
_272: [0, +INF]
byteoffset_273: [0, 536870911]
bitoffset.166_274: VARYING
bitnumb_275: [0, 7]
_276: [1, 128]
_277: [0, 536870911]
_278: VARYING
_279: VARYING
_280: [0, 255]
_281: [0, 128]


Removing basic block 56
Removing basic block 57
Removing basic block 58
Removing basic block 59
Removing basic block 60
Removing basic block 61
Removing basic block 62
DoHuffIteration (farchar * plaintext, farchar * comparray, farchar * decomparray, long unsigned int arraysize, long unsigned int nloops, struct huff_node * hufftree)
{
  u32 byteoffset;
  int bitnumb;
  int D.6438;
  u32 byteoffset;
  int bitnumb;
  char bitchar;
  long unsigned int elapsed;
  char bitstring[30];
  int c;
  long int bitstringlen;
  long int maxbitoffset;
  long int textoffset;
  long int bitoffset;
  int lowidx2;
  int lowidx1;
  float lowfreq2;
  float lowfreq1;
  int root;
  long int j;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  struct huff_node * _3;
  unsigned char _7;
  farchar * _9;
  char _10;
  long unsigned int _11;
  long unsigned int _12;
  struct huff_node * _13;
  float _14;
  float _21;
  long unsigned int j.161_22;
  long unsigned int _23;
  long unsigned int _24;
  struct huff_node * _25;
  float _26;
  float _31;
  float _35;
  struct huff_node * _36;
  long unsigned int _37;
  long unsigned int _38;
  struct huff_node * _39;
  float _40;
  long unsigned int _55;
  long unsigned int _56;
  struct huff_node * _57;
  int _58;
  float _62;
  long unsigned int _66;
  long unsigned int _67;
  struct huff_node * _68;
  int _69;
  float _73;
  long unsigned int _77;
  long unsigned int _78;
  struct huff_node * _79;
  long unsigned int _80;
  long unsigned int _81;
  struct huff_node * _82;
  long unsigned int _83;
  long unsigned int _84;
  struct huff_node * _85;
  float _86;
  farchar * _97;
  char _98;
  long unsigned int _103;
  long unsigned int _104;
  struct huff_node * _105;
  int _106;
  long unsigned int _110;
  long unsigned int _111;
  struct huff_node * _112;
  int _113;
  char _114;
  int _115;
  unsigned int _116;
  long unsigned int _118;
  unsigned int _119;
  long unsigned int _127;
  long unsigned int _128;
  struct huff_node * _129;
  int _130;
  unsigned char _134;
  sizetype textoffset.163_135;
  farchar * _136;
  char _137;
  struct huff_node * _138;
  long unsigned int _186;
  long unsigned int _222;
  int bitoffset.165_254;
  sizetype _256;
  u8 * _257;
  unsigned char _258;
  signed char _259;
  int _260;
  signed char _261;
  signed char _262;
  unsigned char _263;
  sizetype _264;
  u8 * _265;
  unsigned char _266;
  signed char _267;
  int _268;
  signed char _269;
  signed char _270;
  signed char _271;
  unsigned char _272;
  int bitoffset.166_274;
  int _276;
  sizetype _277;
  u8 * _278;
  unsigned char _279;
  int _280;
  int _281;

  <bb 2> [0.00%]:
  elapsed_182 = StartStopwatch ();
  goto <bb 54>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_140;
  _2 = _1 * 20;
  _3 = hufftree_192(D) + _2;
  _3->freq = 0.0;
  _7 = (unsigned char) i_140;
  _3->c = _7;
  i_251 = i_140 + 1;

  <bb 4> [0.00%]:
  # i_140 = PHI <0(54), i_251(3)>
  if (i_140 <= 255)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _9 = plaintext_226(D) + j.161_22;
  _10 = *_9;
  _11 = (long unsigned int) _10;
  _12 = _11 * 20;
  _13 = hufftree_192(D) + _12;
  _14 = _13->freq;
  _21 = _14 + 1.0e+0;
  _13->freq = _21;
  j_248 = j_148 + 1;

  <bb 6> [0.00%]:
  # j_148 = PHI <0(4), j_248(5)>
  j.161_22 = (long unsigned int) j_148;
  if (j.161_22 < arraysize_190(D))
    goto <bb 5>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 7> [0.00%]:
  _23 = (long unsigned int) i_141;
  _24 = _23 * 20;
  _25 = hufftree_192(D) + _24;
  _26 = _25->freq;
  if (_26 != 0.0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  _31 = (float) arraysize_190(D);
  _35 = _26 / _31;
  _25->freq = _35;

  <bb 9> [0.00%]:
  i_246 = i_141 + 1;

  <bb 10> [0.00%]:
  # i_141 = PHI <0(6), i_246(9)>
  if (i_141 <= 255)
    goto <bb 7>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [100.00%]:
  _36 = hufftree_192(D) + 5120;
  _222 = __builtin_object_size (_36, 0);
  __builtin___memset_chk (_36, 0, 5120, _222);
  goto <bb 16>; [0.00%]

  <bb 12> [0.00%]:
  _37 = (long unsigned int) i_142;
  _38 = _37 * 20;
  _39 = hufftree_192(D) + _38;
  _40 = _39->freq;
  if (_40 == 0.0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  _39->parent = 32000;
  goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  _39->right = -1;
  _39->left = -1;
  _39->parent = -1;

  <bb 15> [0.00%]:
  i_244 = i_142 + 1;

  <bb 16> [0.00%]:
  # i_142 = PHI <0(11), i_244(15)>
  if (i_142 <= 511)
    goto <bb 12>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 17> [0.00%]:
  # root_149 = PHI <255(16), root_202(31)>
  goto <bb 22>; [0.00%]

  <bb 18> [0.00%]:
  _55 = (long unsigned int) i_143;
  _56 = _55 * 20;
  _57 = hufftree_192(D) + _56;
  _58 = _57->parent;
  if (_58 < 0)
    goto <bb 19>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 19> [0.00%]:
  _62 = _57->freq;
  if (_62 < lowfreq1_151)
    goto <bb 20>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 20> [0.00%]:

  <bb 21> [0.00%]:
  # lowfreq1_150 = PHI <lowfreq1_151(18), lowfreq1_151(19), _62(20)>
  # lowidx1_154 = PHI <lowidx1_155(18), lowidx1_155(19), i_143(20)>
  i_239 = i_143 + 1;

  <bb 22> [0.00%]:
  # i_143 = PHI <0(17), i_239(21)>
  # lowfreq1_151 = PHI <2.0e+0(17), lowfreq1_150(21)>
  # lowidx1_155 = PHI <-1(17), lowidx1_154(21)>
  if (i_143 <= root_149)
    goto <bb 18>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 23> [0.00%]:
  # lowfreq1_88 = PHI <lowfreq1_151(22)>
  # lowidx1_90 = PHI <lowidx1_155(22)>
  if (lowidx1_90 == -1)
    goto <bb 45>; [0.00%]
  else
    goto <bb 29>; [0.00%]

  <bb 24> [0.00%]:
  _66 = (long unsigned int) i_144;
  _67 = _66 * 20;
  _68 = hufftree_192(D) + _67;
  _69 = _68->parent;
  if (_69 < 0)
    goto <bb 25>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 25> [0.00%]:
  if (lowidx1_90 != i_144)
    goto <bb 26>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 26> [0.00%]:
  _73 = _68->freq;
  if (_73 < lowfreq2_153)
    goto <bb 27>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 27> [0.00%]:

  <bb 28> [0.00%]:
  # lowfreq2_152 = PHI <lowfreq2_153(24), lowfreq2_153(25), lowfreq2_153(26), _73(27)>
  # lowidx2_156 = PHI <lowidx2_157(24), lowidx2_157(25), lowidx2_157(26), i_144(27)>
  i_211 = i_144 + 1;

  <bb 29> [0.00%]:
  # i_144 = PHI <0(23), i_211(28)>
  # lowfreq2_153 = PHI <2.0e+0(23), lowfreq2_152(28)>
  # lowidx2_157 = PHI <-1(23), lowidx2_156(28)>
  if (i_144 <= root_149)
    goto <bb 24>; [0.00%]
  else
    goto <bb 30>; [0.00%]

  <bb 30> [0.00%]:
  # lowfreq2_89 = PHI <lowfreq2_153(29)>
  # lowidx2_91 = PHI <lowidx2_157(29)>
  if (lowidx2_91 == -1)
    goto <bb 45>; [0.00%]
  else
    goto <bb 31>; [0.00%]

  <bb 31> [0.00%]:
  root_202 = root_149 + 1;
  _77 = (long unsigned int) lowidx1_90;
  _78 = _77 * 20;
  _79 = hufftree_192(D) + _78;
  _79->parent = root_202;
  _80 = (long unsigned int) lowidx2_91;
  _81 = _80 * 20;
  _82 = hufftree_192(D) + _81;
  _82->parent = root_202;
  _83 = (long unsigned int) root_202;
  _84 = _83 * 20;
  _85 = hufftree_192(D) + _84;
  _86 = lowfreq1_88 + lowfreq2_89;
  _85->freq = _86;
  _85->left = lowidx1_90;
  _85->right = lowidx2_91;
  _85->parent = -2;
  goto <bb 17>; [0.00%]

  <bb 32> [0.00%]:
  _97 = plaintext_226(D) + _118;
  _98 = *_97;
  c_227 = (int) _98;
  goto <bb 37>; [0.00%]

  <bb 33> [0.00%]:
  _103 = (long unsigned int) _113;
  _104 = _103 * 20;
  _105 = hufftree_192(D) + _104;
  _106 = _105->left;
  if (_106 == c_165)
    goto <bb 34>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 34> [0.00%]:
  bitstring[bitstringlen_163] = 48;
  goto <bb 36>; [0.00%]

  <bb 35> [0.00%]:
  bitstring[bitstringlen_163] = 49;

  <bb 36> [0.00%]:
  bitstringlen_236 = bitstringlen_163 + 1;

  <bb 37> [0.00%]:
  # bitstringlen_163 = PHI <0(32), bitstringlen_236(36)>
  # c_165 = PHI <c_227(32), _113(36)>
  _110 = (long unsigned int) c_165;
  _111 = _110 * 20;
  _112 = hufftree_192(D) + _111;
  _113 = _112->parent;
  if (_113 != -2)
    goto <bb 33>; [0.00%]
  else
    goto <bb 38>; [0.00%]

  <bb 38> [0.00%]:
  # bitstringlen_95 = PHI <bitstringlen_163(37)>
  goto <bb 43>; [100.00%]

  <bb 39> [100.00%]:
  _114 = bitstring[bitstringlen_229];
  _115 = (int) _114;
  _116 = (unsigned int) bitoffset_158;
  byteoffset_253 = _116 >> 3;
  bitoffset.165_254 = (int) bitoffset_158;
  bitnumb_255 = bitoffset.165_254 & 7;
  if (_114 == 49)
    goto <bb 40>; [30.50%]
  else
    goto <bb 41>; [69.50%]

  <bb 40> [30.50%]:
  _256 = (sizetype) byteoffset_253;
  _257 = comparray_221(D) + _256;
  _258 = *_257;
  _259 = (signed char) _258;
  _260 = 1 << bitnumb_255;
  _261 = (signed char) _260;
  _262 = _259 | _261;
  _263 = (unsigned char) _262;
  *_257 = _263;
  goto <bb 42>; [100.00%]

  <bb 41> [69.50%]:
  _264 = (sizetype) byteoffset_253;
  _265 = comparray_221(D) + _264;
  _266 = *_265;
  _267 = (signed char) _266;
  _268 = 1 << bitnumb_255;
  _269 = (signed char) _268;
  _270 = ~_269;
  _271 = _267 & _270;
  _272 = (unsigned char) _271;
  *_265 = _272;

  <bb 42> [0.00%]:
  bitoffset_232 = bitoffset_158 + 1;

  <bb 43> [0.00%]:
  # bitoffset_158 = PHI <bitoffset_159(38), bitoffset_232(42)>
  # bitstringlen_164 = PHI <bitstringlen_95(38), bitstringlen_229(42)>
  bitstringlen_229 = bitstringlen_164 + -1;
  if (bitstringlen_164 != 0)
    goto <bb 39>; [0.00%]
  else
    goto <bb 44>; [0.00%]

  <bb 44> [0.00%]:
  # bitoffset_92 = PHI <bitoffset_158(43)>
  i_230 = i_145 + 1;
  goto <bb 46>; [0.00%]

  <bb 45> [0.00%]:
  # root_87 = PHI <root_149(30), root_149(23)>

  <bb 46> [0.00%]:
  # i_145 = PHI <0(45), i_230(44)>
  # bitoffset_159 = PHI <0(45), bitoffset_92(44)>
  _118 = (long unsigned int) i_145;
  if (_118 < arraysize_190(D))
    goto <bb 32>; [0.00%]
  else
    goto <bb 47>; [0.00%]

  <bb 47> [0.00%]:
  # bitoffset_93 = PHI <bitoffset_159(46)>

  <bb 48> [0.00%]:
  # bitoffset_160 = PHI <0(47), bitoffset_94(53)>
  # textoffset_162 = PHI <0(47), textoffset_220(53)>
  goto <bb 52>; [0.00%]

  <bb 49> [100.00%]:
  _119 = (unsigned int) bitoffset_161;
  byteoffset_273 = _119 >> 3;
  bitoffset.166_274 = (int) bitoffset_161;
  bitnumb_275 = bitoffset.166_274 & 7;
  _276 = 1 << bitnumb_275;
  _277 = (sizetype) byteoffset_273;
  _278 = comparray_221(D) + _277;
  _279 = *_278;
  _280 = (int) _279;
  _281 = _276 & _280;
  if (_281 == 0)
    goto <bb 51>; [0.00%]
  else
    goto <bb 50>; [0.00%]

  <bb 50> [0.00%]:
  i_223 = _129->right;

  <bb 51> [0.00%]:
  # i_146 = PHI <_130(49), i_223(50)>
  bitoffset_225 = bitoffset_161 + 1;

  <bb 52> [0.00%]:
  # i_147 = PHI <root_87(48), i_146(51)>
  # bitoffset_161 = PHI <bitoffset_160(48), bitoffset_225(51)>
  _127 = (long unsigned int) i_147;
  _128 = _127 * 20;
  _129 = hufftree_192(D) + _128;
  _130 = _129->left;
  if (_130 != -1)
    goto <bb 49>; [0.00%]
  else
    goto <bb 53>; [0.00%]

  <bb 53> [0.00%]:
  # _138 = PHI <_129(52)>
  # bitoffset_94 = PHI <bitoffset_161(52)>
  _134 = _138->c;
  textoffset.163_135 = (sizetype) textoffset_162;
  _136 = decomparray_218(D) + textoffset.163_135;
  _137 = (char) _134;
  *_136 = _137;
  textoffset_220 = textoffset_162 + 1;
  if (bitoffset_93 > bitoffset_94)
    goto <bb 48>; [0.00%]
  else
    goto <bb 54>; [0.00%]

  <bb 54> [0.00%]:
  # nloops_139 = PHI <nloops_183(D)(2), nloops_184(53)>
  nloops_184 = nloops_139 + 18446744073709551615;
  if (nloops_139 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 55>; [0.00%]

  <bb 55> [0.00%]:
  _186 = StopStopwatch (elapsed_182);
  bitstring ={v} {CLOBBER};
  return _186;

}



;; Function DoLUIteration (DoLUIteration, funcdef_no=113, decl_uid=4743, cgraph_uid=113, symbol_order=138)

Created preheader block for loop 4
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 14 6 7 8 9 10 11 12 13
;;
;; Loop 2
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11
;;
;; Loop 1
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8 7 14 6 5 3 4
;;
;; Loop 4
;;  header 7, latch 6
;;  depth 2, outer 1
;;  nodes: 7 6
;;
;; Loop 3
;;  header 5, latch 4
;;  depth 2, outer 1
;;  nodes: 5 4
;; 2 succs { 9 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 4 14 }
;; 14 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 9 }
;; 9 succs { 3 10 }
;; 10 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 11 13 }
;; 13 succs { 1 }

Value ranges after Early VRP:

_1: [0, +INF]
_2: [0, +INF]
_3: [0, 81600]
_4: VARYING
_6: VARYING
_7: VARYING
_8: [0, 800]
_9: VARYING
_11: VARYING
_12: VARYING
_13: [0, 18446744073709547800]
_14: [0, 182641030432767800]
j_16: [0, 226040879248476]
i_17: [0, 10201]
i_18: [0, 101]
i_19: [0, 226040879248476]
_24: [0, +INF]
numarrays_26(D): VARYING
elapsed_28: VARYING
_29: [0, +INF]
_31: VARYING
abase_33(D): VARYING
locabase_34: VARYING
bbase_35(D): VARYING
locbbase_36: VARYING
i_39: [1, 226040879248476]
locabase_40: VARYING
locbbase_41: VARYING
j_44: [0, +INF]
b_45(D): VARYING
i_47: [1, 101]
a_48(D): VARYING
i_50: [1, 10201]


Removing basic block 14
DoLUIteration (fardouble * a, fardouble * b, fardouble * abase, fardouble * bbase, long unsigned int numarrays)
{
  fardouble * ptra$ptrs$p;
  long unsigned int i;
  long unsigned int j;
  long unsigned int elapsed;
  struct LUdblptr ptra;
  fardouble * locbbase;
  fardouble * locabase;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  fardouble * _4;
  fardouble * _6;
  double _7;
  long unsigned int _8;
  fardouble * _9;
  fardouble * _11;
  double _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _24;
  long unsigned int _29;
  long unsigned int _31;

  <bb 2> [0.00%]:
  goto <bb 9>; [0.00%]

  <bb 3> [0.00%]:
  _1 = j_16 * 81608;
  locabase_40 = abase_33(D) + _1;
  _2 = j_16 * 808;
  locbbase_41 = bbase_35(D) + _2;
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _3 = i_17 * 8;
  _4 = a_48(D) + _3;
  _29 = _1 + _3;
  _6 = abase_33(D) + _29;
  _7 = *_4;
  *_6 = _7;
  i_50 = i_17 + 1;

  <bb 5> [0.00%]:
  # i_17 = PHI <0(3), i_50(4)>
  if (i_17 <= 10200)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _8 = i_18 * 8;
  _9 = b_45(D) + _8;
  _24 = _2 + _8;
  _11 = bbase_35(D) + _24;
  _12 = *_9;
  *_11 = _12;
  i_47 = i_18 + 1;

  <bb 7> [0.00%]:
  # i_18 = PHI <0(5), i_47(6)>
  if (i_18 <= 100)
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  j_44 = j_16 + 1;

  <bb 9> [0.00%]:
  # j_16 = PHI <0(2), j_44(8)>
  if (j_16 < numarrays_26(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  elapsed_28 = StartStopwatch ();
  goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  _13 = i_19 * 81608;
  locabase_34 = abase_33(D) + _13;
  _14 = i_19 * 808;
  locbbase_36 = bbase_35(D) + _14;
  lusolve (locabase_34, 101, locbbase_36);
  i_39 = i_19 + 1;

  <bb 12> [0.00%]:
  # i_19 = PHI <0(10), i_39(11)>
  if (i_19 < numarrays_26(D))
    goto <bb 11>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:
  _31 = StopStopwatch (elapsed_28);
  return _31;

}



;; Function LoadNumArrayWithRand (LoadNumArrayWithRand, funcdef_no=54, decl_uid=4498, cgraph_uid=54, symbol_order=79)

Created preheader block for loop 2
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 10 5 6 7 11 8 9
;;
;; Loop 2
;;  header 8, latch 11
;;  depth 1, outer 0
;;  nodes: 8 11 7 5 6
;;
;; Loop 3
;;  header 7, latch 6
;;  depth 2, outer 2
;;  nodes: 7 6
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 10 }
;; 10 succs { 8 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 11 }
;; 11 succs { 8 }
;; 8 succs { 5 9 }
;; 9 succs { 1 }

Value ranges after Early VRP:

_1: VARYING
_3: [0, +INF]
_4: VARYING
_5: [-2147483648, 2147483647]
i.9_6: [0, 2305843009213693951]
_7: [0, 18446744073709551608]
_9: [0, 18446744073709551600]
_10: VARYING
_13: VARYING
_14: VARYING
i.12_15: [0, 2305843009213693951]
numarrays_16: VARYING
i_17: [0, 2305843009213693951]
i_18: [0, 2305843009213693951]
darray_19: VARYING
arraysize_26(D): VARYING
array_27(D): VARYING
numarrays_29(D): VARYING
numarrays_30: [0, +INF]
darray_31: VARYING
i_34: [1, 2305843009213693952]
i_37: [1, 2305843009213693952]


Removing basic block 10
Removing basic block 11
LoadNumArrayWithRand (farlong * array, long unsigned int arraysize, unsigned int numarrays)
{
  farlong * darray;
  long int i;
  int _1;
  long unsigned int _3;
  farlong * _4;
  long int _5;
  long unsigned int i.9_6;
  long unsigned int _7;
  long unsigned int _9;
  farlong * _10;
  farlong * _13;
  long int _14;
  long unsigned int i.12_15;

  <bb 2> [0.00%]:
  randnum (13);
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = randnum (0);
  _3 = i.9_6 * 8;
  _4 = array_27(D) + _3;
  _5 = (long int) _1;
  *_4 = _5;
  i_37 = i_17 + 1;

  <bb 4> [0.00%]:
  # i_17 = PHI <0(2), i_37(3)>
  i.9_6 = (long unsigned int) i_17;
  if (i.9_6 < arraysize_26(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 5> [0.00%]:
  _7 = arraysize_26(D) * 8;
  darray_31 = darray_19 + _7;
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _9 = i.12_15 * 8;
  _10 = array_27(D) + _9;
  _13 = darray_31 + _9;
  _14 = *_10;
  *_13 = _14;
  i_34 = i_18 + 1;

  <bb 7> [0.00%]:
  # i_18 = PHI <0(5), i_34(6)>
  i.12_15 = (long unsigned int) i_18;
  if (i.12_15 < arraysize_26(D))
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  # numarrays_16 = PHI <numarrays_29(D)(4), numarrays_30(7)>
  # darray_19 = PHI <array_27(D)(4), darray_31(7)>
  numarrays_30 = numarrays_16 + 4294967295;
  if (numarrays_30 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  return;

}



;; Function DoNumSortIteration (DoNumSortIteration, funcdef_no=53, decl_uid=4494, cgraph_uid=53, symbol_order=78)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

Value ranges after Early VRP:

_1: [0, +INF]
_2: [0, +INF]
_3: [0, +INF]
_4: VARYING
_5: [0, 4294967295]
i_6: [0, +INF]
arraybase_9(D): VARYING
arraysize_10(D): VARYING
numarrays_11(D): VARYING
elapsed_14: VARYING
elapsed_17: VARYING
i_20: [1, 4294967295]


DoNumSortIteration (farlong * arraybase, long unsigned int arraysize, unsigned int numarrays)
{
  long unsigned int i;
  long unsigned int elapsed;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  farlong * _4;
  long unsigned int _5;

  <bb 2> [0.00%]:
  LoadNumArrayWithRand (arraybase_9(D), arraysize_10(D), numarrays_11(D));
  elapsed_14 = StartStopwatch ();
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = arraysize_10(D) + 18446744073709551615;
  _2 = i_6 * arraysize_10(D);
  _3 = _2 * 8;
  _4 = arraybase_9(D) + _3;
  NumHeapSort (_4, 0, _1);
  i_20 = i_6 + 1;

  <bb 4> [0.00%]:
  # i_6 = PHI <0(2), i_20(3)>
  _5 = (long unsigned int) numarrays_11(D);
  if (_5 > i_6)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  elapsed_17 = StopStopwatch (elapsed_14);
  return elapsed_17;

}



;; Function LoadStringArray (LoadStringArray, funcdef_no=59, decl_uid=4517, cgraph_uid=59, symbol_order=84)

Created preheader block for loop 5
Created preheader block for loop 3
;; 8 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 27 26 9 10 11 12 13 14 15 16 17 18 25 19 20 21 22 23 24
;;
;; Loop 5
;;  header 23, latch 22
;;  depth 1, outer 0
;;  nodes: 23 22 21 19 20
;;
;; Loop 6
;;  header 21, latch 20
;;  depth 2, outer 5
;;  nodes: 21 20
;;
;; Loop 4
;;  header 18, latch 17
;;  depth 1, outer 0
;;  nodes: 18 17
;;
;; Loop 3
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12 11 9 10
;;
;; Loop 7
;;  header 11, latch 10
;;  depth 2, outer 3
;;  nodes: 11 10
;;
;; Loop 1
;;  header 3, latch 27
;;  depth 1, outer 0
;;  nodes: 3 27 8 7 5 6 4
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 2, outer 1
;;  nodes: 7 6
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 27 26 }
;; 27 succs { 3 }
;; 26 succs { 13 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 10 12 }
;; 12 succs { 13 }
;; 13 succs { 9 14 }
;; 14 succs { 15 16 }
;; 15 succs { 16 }
;; 16 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 17 25 }
;; 25 succs { 23 }
;; 19 succs { 21 }
;; 20 succs { 21 }
;; 21 succs { 20 22 }
;; 22 succs { 23 }
;; 23 succs { 19 24 }
;; 24 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

curroffset_28 -> { curroffset_50 }
Incremental SSA update started at block: 3
Number of blocks in CFG: 28
Number of blocks to update: 5 ( 18%)



Value ranges after Early VRP:

_1: VARYING
_2: [0, +INF]
_3: [0, 255]
_4: [0, +INF]
_5: [0, +INF]
_6: [0, +INF]
_7: [0, +INF]
_8: [0, +INF]
_9: VARYING
_10: VARYING
_11: VARYING
_12: [0, +INF]
_14: VARYING
_15: [0, +INF]
_16: [0, +INF]
_18: VARYING
_20: VARYING
_21: VARYING
_22: [0, 4294967295]
_23: VARYING
_24: [0, 4294967295]
_25: [0, +INF]
_26: [0, +INF]
systemerror.26_27: VARYING
curroffset_28: [curroffset_50, curroffset_50]
_29: [0, +INF]
_30: VARYING
_31: VARYING
_32: VARYING
_33: [0, 255]
_34: [0, +INF]
_35: VARYING
_36: VARYING
_37: [0, +INF]
_39: [0, +INF]
_40: VARYING
_43: VARYING
_44: VARYING
_45: [0, 4294967295]
_46: VARYING
tempsbase_47: VARYING
tempobase_48: VARYING
curroffset_49: VARYING
curroffset_50: VARYING
curroffset_51: VARYING
fullflag_52: [-INF(OVF), +INF(OVF)]
fullflag_53: [-INF(OVF), +INF(OVF)]
stringlength_54: [0, +INF]
i_55: [0, +INF]
j_56: [0, 2305843009213693951]
k_57: [1, +INF]
k_58: [1, +INF]
l_59: VARYING
l_60: VARYING
nstrings_71(D): VARYING
stringlength_76: [0, +INF]
arraysize_77(D): VARYING
stringlength_78: [0, +INF]
strarray_80(D): VARYING
curroffset_82: [0, +INF]
numarrays_87(D): VARYING
optrarray_89: VARYING
tempobase_99: VARYING
k_101: [2, +INF]
l_103: [0, +INF]
curroffset_105: [0, +INF]
j_106: [0, +INF]
tempsbase_107: VARYING
k_109: [0, +INF]
l_111: [0, +INF]
curroffset_114: [0, +INF]
i_115: [1, +INF]


Removing basic block 25
Removing basic block 26
Removing basic block 27
LoadStringArray (faruchar * strarray, unsigned int numarrays, long unsigned int * nstrings, long unsigned int arraysize)
{
  int systemerror;
  unsigned int l;
  unsigned int k;
  long unsigned int j;
  unsigned char i;
  unsigned char stringlength;
  int fullflag;
  long unsigned int curroffset;
  farulong * tempobase;
  farulong * optrarray;
  faruchar * tempsbase;
  unsigned int _1;
  unsigned char _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  unsigned char _6;
  unsigned char _7;
  unsigned char _8;
  faruchar * _9;
  unsigned int _10;
  faruchar * _11;
  unsigned char _12;
  long unsigned int _14;
  long unsigned int _15;
  sizetype _16;
  faruchar * _18;
  faruchar * _20;
  unsigned char _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  int systemerror.26_27;
  long unsigned int _29;
  farulong * _30;
  faruchar * _31;
  unsigned char _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  long unsigned int _39;
  farulong * _40;
  farulong * _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;

  <bb 2> [0.00%]:
  randnum (13);
  *nstrings_71(D) = 0;

  <bb 3> [0.00%]:
  # curroffset_49 = PHI <0(2), curroffset_28(8)>
  # fullflag_52 = PHI <0(2), 0(8)>
  _1 = abs_randwc (76);
  _2 = (unsigned char) _1;
  stringlength_76 = _2 + 1;
  _3 = (long unsigned int) stringlength_76;
  _4 = _3 + curroffset_49;
  _5 = _4 + 1;
  if (_5 >= arraysize_77(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _6 = (unsigned char) arraysize_77(D);
  _7 = (unsigned char) curroffset_49;
  _8 = _6 - _7;
  stringlength_78 = _8 + 255;

  <bb 5> [0.00%]:
  # fullflag_53 = PHI <fullflag_52(3), 1(4)>
  # stringlength_54 = PHI <stringlength_76(3), stringlength_78(4)>
  _9 = strarray_80(D) + curroffset_49;
  *_9 = stringlength_54;
  curroffset_82 = curroffset_49 + 1;
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _10 = abs_randwc (254);
  _11 = strarray_80(D) + curroffset_50;
  _12 = (unsigned char) _10;
  *_11 = _12;
  curroffset_114 = curroffset_50 + 1;
  i_115 = i_55 + 1;

  <bb 7> [0.00%]:
  # curroffset_50 = PHI <curroffset_82(5), curroffset_114(6)>
  # i_55 = PHI <0(5), i_115(6)>
  if (stringlength_54 > i_55)
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  # curroffset_28 = PHI <curroffset_50(7)>
  _14 = *nstrings_71(D);
  _15 = _14 + 1;
  *nstrings_71(D) = _15;
  if (fullflag_53 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 9> [0.00%]:
  _16 = arraysize_77(D) + 100;
  tempsbase_107 = tempsbase_47 + _16;
  goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  _18 = strarray_80(D) + _22;
  _20 = tempsbase_107 + _22;
  _21 = *_18;
  *_20 = _21;
  l_111 = l_59 + 1;

  <bb 11> [0.00%]:
  # l_59 = PHI <0(9), l_111(10)>
  _22 = (long unsigned int) l_59;
  if (_22 < arraysize_77(D))
    goto <bb 10>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [0.00%]:
  k_109 = k_57 + 1;

  <bb 13> [0.00%]:
  # tempsbase_47 = PHI <strarray_80(D)(8), tempsbase_107(12)>
  # k_57 = PHI <1(8), k_109(12)>
  if (k_57 < numarrays_87(D))
    goto <bb 9>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [0.00%]:
  _23 = *nstrings_71(D);
  _24 = (long unsigned int) numarrays_87(D);
  _25 = _23 * _24;
  _26 = _25 * 8;
  optrarray_89 = AllocateMemory (_26, &systemerror);
  systemerror.26_27 = systemerror;
  if (systemerror.26_27 != 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:
  ReportError ("CPU:Stringsort", systemerror.26_27);
  FreeMemory (strarray_80(D), &systemerror);
  ErrorExit ();

  <bb 16> [0.00%]:
  goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  _29 = j_56 * 8;
  _30 = optrarray_89 + _29;
  *_30 = curroffset_51;
  _31 = strarray_80(D) + curroffset_51;
  _32 = *_31;
  _33 = (long unsigned int) _32;
  _34 = _33 + curroffset_51;
  curroffset_105 = _34 + 1;
  j_106 = j_56 + 1;

  <bb 18> [0.00%]:
  # curroffset_51 = PHI <0(16), curroffset_105(17)>
  # j_56 = PHI <0(16), j_106(17)>
  _35 = *nstrings_71(D);
  if (_35 > j_56)
    goto <bb 17>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 19> [0.00%]:
  _36 = *nstrings_71(D);
  _37 = _36 * 8;
  tempobase_99 = tempobase_48 + _37;
  goto <bb 21>; [0.00%]

  <bb 20> [0.00%]:
  _39 = _45 * 8;
  _40 = optrarray_89 + _39;
  _43 = tempobase_99 + _39;
  _44 = *_40;
  *_43 = _44;
  l_103 = l_60 + 1;

  <bb 21> [0.00%]:
  # l_60 = PHI <0(19), l_103(20)>
  _45 = (long unsigned int) l_60;
  _46 = *nstrings_71(D);
  if (_45 < _46)
    goto <bb 20>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 22> [0.00%]:
  k_101 = k_58 + 1;

  <bb 23> [0.00%]:
  # tempobase_48 = PHI <optrarray_89(18), tempobase_99(22)>
  # k_58 = PHI <1(18), k_101(22)>
  if (k_58 < numarrays_87(D))
    goto <bb 19>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 24> [0.00%]:
  systemerror ={v} {CLOBBER};
  return optrarray_89;

}



;; Function DoBitfieldIteration (DoBitfieldIteration, funcdef_no=65, decl_uid=4548, cgraph_uid=65, symbol_order=90)

;; 7 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
;;
;; Loop 3
;;  header 20, latch 19
;;  depth 1, outer 0
;;  nodes: 20 19 9 12 15 18 16 17 13 14 10 11
;;
;; Loop 4
;;  header 12, latch 11
;;  depth 2, outer 3
;;  nodes: 12 11
;;
;; Loop 5
;;  header 15, latch 14
;;  depth 2, outer 3
;;  nodes: 15 14
;;
;; Loop 6
;;  header 18, latch 17
;;  depth 2, outer 3
;;  nodes: 18 17
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 20 }
;; 9 succs { 19 10 13 16 }
;; 10 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 11 19 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 14 19 }
;; 16 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 17 19 }
;; 19 succs { 20 }
;; 20 succs { 9 21 }
;; 21 succs { 1 }

Value ranges after Early VRP:

_2: [0, +INF]
_3: VARYING
_4: VARYING
i.39_5: [0, 2305843009213693951]
_6: VARYING
i.40_7: [0, +INF]
_8: [0, +INF]
_9: VARYING
_11: [0, +INF]
_12: VARYING
_15: [0, +INF]
_16: VARYING
_17: [0, 4294967295]
_18: VARYING
_19: [0, +INF]
_20: [0, 2]
i.42_21: [0, 1152921504606846975]
_22: [0, 18446744073709551600]
_23: [8, 18446744073709551608]
_24: VARYING
_25: VARYING
_28: VARYING
_29: VARYING
i.44_30: [0, 1152921504606846975]
_31: [0, 18446744073709551600]
_32: [8, 18446744073709551608]
_33: VARYING
_34: VARYING
_37: VARYING
_38: VARYING
i.46_39: [0, 1152921504606846975]
_40: [0, 18446744073709551600]
_41: [8, 18446744073709551608]
_42: VARYING
_43: VARYING
_46: VARYING
_47: VARYING
i_48: [0, 2305843009213693951]
i_49: [0, 1152921504606846976]
i_50: [0, 1152921504606846976]
nbitops_56(D): VARYING
bitoparraysize_62(D): VARYING
elapsed_64: VARYING
_67: VARYING
bitoparraybase_68(D): VARYING
bitarraybase_69(D): VARYING
i_73: [1, 1152921504606846976]
bitoffset_75: [0, 4294967295]
i_81: VARYING
i_83: [1, 2305843009213693952]
bit_addr_84: VARYING
bindex_85: [0, 288230376151711743]
bitnumb_86: [0, 63]
_87: [0, 2305843009213693944]
_88: VARYING
_89: VARYING
_90: [0, 63]
_91: VARYING
_92: [0, +INF]
_93: [0, +INF]
bit_addr_102: [0, +INF]
nbits_103: [0, _25]
nbits_104: [0, +INF]
bit_addr_105: VARYING
bindex_106: [0, 288230376151711743]
bitnumb_107: [0, 63]
_115: [0, 2305843009213693944]
_116: VARYING
_117: VARYING
_118: [0, 63]
_119: VARYING
_120: VARYING
_121: [0, +INF]
_122: [0, +INF]
bit_addr_123: [0, +INF]
nbits_124: [0, _34]
nbits_125: [0, +INF]
bit_addr_126: VARYING
bindex_127: [0, 288230376151711743]
bitnumb_128: [0, 63]
_129: [0, 2305843009213693944]
_130: VARYING
_131: VARYING
_132: [0, 63]
_133: VARYING
_134: [0, +INF]
_135: [0, +INF]
bit_addr_136: [0, +INF]
nbits_137: [0, _43]
nbits_138: [0, +INF]


DoBitfieldIteration (farulong * bitarraybase, farulong * bitoparraybase, long int bitoparraysize, long unsigned int * nbitops)
{
  long unsigned int bindex;
  long unsigned int bitnumb;
  long unsigned int bit_addr;
  long unsigned int nbits;
  long unsigned int bindex;
  long unsigned int bitnumb;
  long unsigned int bit_addr;
  long unsigned int nbits;
  long unsigned int bindex;
  long unsigned int bitnumb;
  long unsigned int bit_addr;
  long unsigned int nbits;
  long unsigned int elapsed;
  long unsigned int bitoffset;
  long int i;
  long unsigned int _2;
  farulong * _3;
  long unsigned int _4;
  long unsigned int i.39_5;
  unsigned int _6;
  long unsigned int i.40_7;
  long unsigned int _8;
  farulong * _9;
  unsigned int _11;
  unsigned int _12;
  sizetype _15;
  farulong * _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long int _20;
  long unsigned int i.42_21;
  long unsigned int _22;
  sizetype _23;
  farulong * _24;
  long unsigned int _25;
  farulong * _28;
  long unsigned int _29;
  long unsigned int i.44_30;
  long unsigned int _31;
  sizetype _32;
  farulong * _33;
  long unsigned int _34;
  farulong * _37;
  long unsigned int _38;
  long unsigned int i.46_39;
  long unsigned int _40;
  sizetype _41;
  farulong * _42;
  long unsigned int _43;
  farulong * _46;
  long unsigned int _47;
  long unsigned int _67;
  long unsigned int _87;
  farulong * _88;
  long unsigned int _89;
  unsigned int _90;
  long int _91;
  long unsigned int _92;
  long unsigned int _93;
  long unsigned int _115;
  farulong * _116;
  long unsigned int _117;
  unsigned int _118;
  long int _119;
  long int _120;
  long unsigned int _121;
  long unsigned int _122;
  long unsigned int _129;
  farulong * _130;
  long unsigned int _131;
  unsigned int _132;
  long int _133;
  long unsigned int _134;
  long unsigned int _135;

  <bb 2> [0.00%]:
  *nbitops_56(D) = 0;
  randnum (13);
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _2 = i.39_5 * 8;
  _3 = bitarraybase_69(D) + _2;
  *_3 = 6148914691236517205;
  i_83 = i_48 + 1;

  <bb 4> [0.00%]:
  # i_48 = PHI <0(2), i_83(3)>
  _4 = global_bitopstruct.bitfieldarraysize;
  i.39_5 = (long unsigned int) i_48;
  if (_4 > i.39_5)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  randnum (13);
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _6 = abs_randwc (262140);
  bitoffset_75 = (long unsigned int) _6;
  i.40_7 = (long unsigned int) i_49;
  _8 = i.40_7 * 16;
  _9 = bitoparraybase_68(D) + _8;
  *_9 = bitoffset_75;
  _11 = 262140 - _6;
  _12 = abs_randwc (_11);
  _15 = _8 + 8;
  _16 = bitoparraybase_68(D) + _15;
  _17 = (long unsigned int) _12;
  *_16 = _17;
  _18 = *nbitops_56(D);
  _19 = _17 + _18;
  *nbitops_56(D) = _19;
  i_81 = i_49 + 1;

  <bb 7> [0.00%]:
  # i_49 = PHI <0(5), i_81(6)>
  if (i_49 < bitoparraysize_62(D))
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  elapsed_64 = StartStopwatch ();
  goto <bb 20>; [0.00%]

  <bb 9> [0.00%]:
  _20 = i_50 % 3;
  switch (_20) <default: <L10> [0.00%], case 0: <L7> [0.00%], case 1: <L8> [0.00%], case 2: <L9> [0.00%]>

<L7> [15.00%]:
  i.42_21 = (long unsigned int) i_50;
  _22 = i.42_21 * 16;
  _23 = _22 + 8;
  _24 = bitoparraybase_68(D) + _23;
  _25 = *_24;
  _28 = bitoparraybase_68(D) + _22;
  _29 = *_28;
  goto <bb 12>; [100.00%]

  <bb 11> [85.00%]:
  bindex_85 = bit_addr_84 >> 6;
  bitnumb_86 = bit_addr_84 & 63;
  _87 = bindex_85 * 8;
  _88 = bitarraybase_69(D) + _87;
  _89 = *_88;
  _90 = (unsigned int) bitnumb_86;
  _91 = 1 << _90;
  _92 = (long unsigned int) _91;
  _93 = _89 | _92;
  *_88 = _93;
  bit_addr_102 = bit_addr_84 + 1;

  <bb 12> [100.00%]:
  # bit_addr_84 = PHI <_29(10), bit_addr_102(11)>
  # nbits_103 = PHI <_25(10), nbits_104(11)>
  nbits_104 = nbits_103 + 18446744073709551615;
  if (nbits_103 != 0)
    goto <bb 11>; [85.00%]
  else
    goto <bb 19> (<L10>); [15.00%]

<L8> [15.00%]:
  i.44_30 = (long unsigned int) i_50;
  _31 = i.44_30 * 16;
  _32 = _31 + 8;
  _33 = bitoparraybase_68(D) + _32;
  _34 = *_33;
  _37 = bitoparraybase_68(D) + _31;
  _38 = *_37;
  goto <bb 15>; [100.00%]

  <bb 14> [85.00%]:
  bindex_106 = bit_addr_105 >> 6;
  bitnumb_107 = bit_addr_105 & 63;
  _115 = bindex_106 * 8;
  _116 = bitarraybase_69(D) + _115;
  _117 = *_116;
  _118 = (unsigned int) bitnumb_107;
  _119 = 1 << _118;
  _120 = ~_119;
  _121 = (long unsigned int) _120;
  _122 = _117 & _121;
  *_116 = _122;
  bit_addr_123 = bit_addr_105 + 1;

  <bb 15> [100.00%]:
  # bit_addr_105 = PHI <_38(13), bit_addr_123(14)>
  # nbits_124 = PHI <_34(13), nbits_125(14)>
  nbits_125 = nbits_124 + 18446744073709551615;
  if (nbits_124 != 0)
    goto <bb 14>; [85.00%]
  else
    goto <bb 19> (<L10>); [15.00%]

<L9> [15.00%]:
  i.46_39 = (long unsigned int) i_50;
  _40 = i.46_39 * 16;
  _41 = _40 + 8;
  _42 = bitoparraybase_68(D) + _41;
  _43 = *_42;
  _46 = bitoparraybase_68(D) + _40;
  _47 = *_46;
  goto <bb 18>; [100.00%]

  <bb 17> [85.00%]:
  bindex_127 = bit_addr_126 >> 6;
  bitnumb_128 = bit_addr_126 & 63;
  _129 = bindex_127 * 8;
  _130 = bitarraybase_69(D) + _129;
  _131 = *_130;
  _132 = (unsigned int) bitnumb_128;
  _133 = 1 << _132;
  _134 = (long unsigned int) _133;
  _135 = _131 ^ _134;
  *_130 = _135;
  bit_addr_136 = bit_addr_126 + 1;

  <bb 18> [100.00%]:
  # bit_addr_126 = PHI <_47(16), bit_addr_136(17)>
  # nbits_137 = PHI <_43(16), nbits_138(17)>
  nbits_138 = nbits_137 + 18446744073709551615;
  if (nbits_137 != 0)
    goto <bb 17>; [85.00%]
  else
    goto <bb 19> (<L10>); [15.00%]

<L10> [0.00%]:
  i_73 = i_50 + 1;

  <bb 20> [0.00%]:
  # i_50 = PHI <0(8), i_73(19)>
  if (i_50 < bitoparraysize_62(D))
    goto <bb 9>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 21> [0.00%]:
  _67 = StopStopwatch (elapsed_64);
  return _67;

}



;; Function LoadAssign (LoadAssign, funcdef_no=76, decl_uid=4608, cgraph_uid=76, symbol_order=101)

Created preheader block for loop 2
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 8 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 4 8 3
;;
;; Loop 2
;;  header 4, latch 3
;;  depth 2, outer 1
;;  nodes: 4 3
;; 2 succs { 6 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 8 7 }
;; 8 succs { 4 }
;; 7 succs { 1 }

Value ranges after Early VRP:

_1: VARYING
_2: [0, 100]
_3: [0, 80800]
_4: VARYING
_5: [0, 100]
_6: [0, 4294967295]
i_9: [0, 101]
j_10: [0, 101]
i_17: [1, 101]
arraybase_19(D): VARYING
j_21: [1, 101]


Removing basic block 8
LoadAssign (farlong[101] * arraybase)
{
  short unsigned int j;
  short unsigned int i;
  unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  farlong[101] * _4;
  int _5;
  long int _6;

  <bb 2> [0.00%]:
  randnum (13);
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = abs_randwc (5000000);
  _2 = (long unsigned int) i_9;
  _3 = _2 * 808;
  _4 = arraybase_19(D) + _3;
  _5 = (int) j_10;
  _6 = (long int) _1;
  *_4[_5] = _6;
  j_21 = j_10 + 1;

  <bb 4> [0.00%]:
  # j_10 = PHI <0(6), j_21(3)>
  if (j_10 <= 100)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  i_17 = i_9 + 1;

  <bb 6> [0.00%]:
  # i_9 = PHI <0(2), i_17(5)>
  if (i_9 <= 100)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function LoadAssignArrayWithRand (LoadAssignArrayWithRand, funcdef_no=75, decl_uid=4606, cgraph_uid=75, symbol_order=100)

Created preheader block for loop 1
Created preheader block for loop 3
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 11 3 4 5 6 7 12 8 9 10
;;
;; Loop 1
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8 7 3 6 5 4 12
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 2, outer 1
;;  nodes: 7 6 5 4 12
;;
;; Loop 3
;;  header 5, latch 4
;;  depth 3, outer 2
;;  nodes: 5 4
;; 2 succs { 11 10 }
;; 11 succs { 9 }
;; 3 succs { 7 }
;; 4 succs { 5 }
;; 5 succs { 4 6 }
;; 6 succs { 7 }
;; 7 succs { 12 8 }
;; 12 succs { 5 }
;; 8 succs { 9 }
;; 9 succs { 3 10 }
;; 10 succs { 1 }

Value ranges after Early VRP:

_3: VARYING
i_6: [1, +INF]
arraybase_10(D): VARYING
numarrays_14(D): VARYING
abase1$ptrs$p_15: [arraybase_10(D), -1B]
i_18: [2, +INF]
i_21: [0, 101]
_22: [0, 100]
_23: [0, 80800]
_24: VARYING
j_25: [0, 101]
_26: [0, 100]
_27: VARYING
_28: VARYING
j_29: [1, 101]
i_30: [1, 101]


Removing basic block 11
Removing basic block 12
LoadAssignArrayWithRand (farlong * arraybase, long unsigned int numarrays)
{
  long int * abase1$ptrs$p;
  long int * abase$ptrs$p;
  short unsigned int i;
  short unsigned int j;
  long unsigned int i;
  struct longptr abase1;
  struct longptr abase;
  long int * _3;
  long unsigned int _22;
  long unsigned int _23;
  farlong[101] * _24;
  int _26;
  farlong[101] * _27;
  long int _28;

  <bb 2> [0.00%]:
  LoadAssign (arraybase_10(D));
  if (numarrays_14(D) > 1)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 3> [0.01%]:
  _3 = abase1$ptrs$p_15 + 81608;
  goto <bb 7>; [100.00%]

  <bb 4> [99.00%]:
  _22 = (long unsigned int) i_21;
  _23 = _22 * 808;
  _24 = arraybase_10(D) + _23;
  _26 = (int) j_25;
  _27 = _3 + _23;
  _28 = *_24[_26];
  *_27[_26] = _28;
  j_29 = j_25 + 1;

  <bb 5> [100.00%]:
  # j_25 = PHI <j_29(4), 0(7)>
  if (j_25 <= 100)
    goto <bb 4>; [99.00%]
  else
    goto <bb 6>; [1.00%]

  <bb 6> [1.00%]:
  i_30 = i_21 + 1;

  <bb 7> [1.01%]:
  # i_21 = PHI <0(3), i_30(6)>
  if (i_21 <= 100)
    goto <bb 5>; [99.00%]
  else
    goto <bb 8>; [1.00%]

  <bb 8> [0.00%]:
  i_18 = i_6 + 1;

  <bb 9> [0.00%]:
  # i_6 = PHI <1(2), i_18(8)>
  # abase1$ptrs$p_15 = PHI <arraybase_10(D)(2), _3(8)>
  if (i_6 < numarrays_14(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  return;

}



;; Function DoAssignIteration (DoAssignIteration, funcdef_no=74, decl_uid=4603, cgraph_uid=74, symbol_order=99)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

Value ranges after Early VRP:

_3: VARYING
i_4: [0, +INF]
arraybase_7(D): VARYING
numarrays_9(D): VARYING
elapsed_12: VARYING
abase$ptrs$p_13: [arraybase_7(D), -1B]
_15: VARYING
i_19: [0, +INF]


DoAssignIteration (farlong * arraybase, long unsigned int numarrays)
{
  long int * abase$ptrs$p;
  long unsigned int i;
  long unsigned int elapsed;
  struct longptr abase;
  long int * _3;
  long unsigned int _15;

  <bb 2> [0.00%]:
  LoadAssignArrayWithRand (arraybase_7(D), numarrays_9(D));
  elapsed_12 = StartStopwatch ();
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  Assignment (abase$ptrs$p_13);
  _3 = abase$ptrs$p_13 + 81608;
  i_19 = i_4 + 1;

  <bb 4> [0.00%]:
  # i_4 = PHI <0(2), i_19(3)>
  # abase$ptrs$p_13 = PHI <arraybase_7(D)(2), _3(3)>
  if (i_4 < numarrays_9(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  _15 = StopStopwatch (elapsed_12);
  return _15;

}



;; Function randomize_wts (randomize_wts, funcdef_no=109, decl_uid=4722, cgraph_uid=109, symbol_order=134)

Created preheader block for loop 2
Created preheader block for loop 3
Created preheader block for loop 4
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 14 12 7 8 9 10 13 11
;;
;; Loop 2
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9 8 13 7
;;
;; Loop 3
;;  header 8, latch 7
;;  depth 2, outer 2
;;  nodes: 8 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 4 14 3
;;
;; Loop 4
;;  header 4, latch 3
;;  depth 2, outer 1
;;  nodes: 4 3
;; 2 succs { 6 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 14 12 }
;; 14 succs { 4 }
;; 12 succs { 10 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 10 }
;; 10 succs { 13 11 }
;; 13 succs { 8 }
;; 11 succs { 1 }

Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: VARYING
_4: VARYING
_5: VARYING
_6: VARYING
neurode_7: [0, 8]
neurode_8: [0, 8]
i_9: [0, 35]
i_10: [0, 8]
neurode_19: [1, 8]
value_21: VARYING
value_22: VARYING
i_24: [1, 8]
neurode_26: [1, 8]
value_28: VARYING
value_29: VARYING
i_31: [1, 35]


Removing basic block 12
Removing basic block 13
Removing basic block 14
randomize_wts ()
{
  double value;
  int i;
  int neurode;
  unsigned int _1;
  double _2;
  double _3;
  unsigned int _4;
  double _5;
  double _6;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = abs_randwc (100000);
  value_28 = (double) _1;
  _2 = value_28 / 1.0e+5;
  value_29 = _2 - 5.0e-1;
  _3 = value_29 * 5.0e-1;
  mid_wts[neurode_7][i_9] = _3;
  i_31 = i_9 + 1;

  <bb 4> [0.00%]:
  # i_9 = PHI <0(6), i_31(3)>
  if (i_9 <= 34)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  neurode_26 = neurode_7 + 1;

  <bb 6> [0.00%]:
  # neurode_7 = PHI <0(2), neurode_26(5)>
  if (neurode_7 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 7> [0.00%]:
  _4 = abs_randwc (100000);
  value_21 = (double) _4;
  _5 = value_21 / 1.0e+4;
  value_22 = _5 - 5.0e-1;
  _6 = value_22 * 5.0e-1;
  out_wts[neurode_8][i_10] = _6;
  i_24 = i_10 + 1;

  <bb 8> [0.00%]:
  # i_10 = PHI <0(10), i_24(7)>
  if (i_10 <= 7)
    goto <bb 7>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  neurode_19 = neurode_8 + 1;

  <bb 10> [0.00%]:
  # neurode_8 = PHI <0(6), neurode_19(9)>
  if (neurode_8 <= 7)
    goto <bb 8>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  return;

}



;; Function build_problem (build_problem, funcdef_no=114, decl_uid=4747, cgraph_uid=114, symbol_order=139)

Created preheader block for loop 2
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 21 11 12 13 14 15 16 17 18 19 20
;;
;; Loop 2
;;  header 19, latch 18
;;  depth 1, outer 0
;;  nodes: 19 18 11 17 16 14 15 12 13
;;
;; Loop 3
;;  header 16, latch 15
;;  depth 2, outer 2
;;  nodes: 16 15
;;
;; Loop 1
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9 8 3 7 5 6 4
;;
;; Loop 4
;;  header 8, latch 7
;;  depth 2, outer 1
;;  nodes: 8 7 5 6 4
;; 2 succs { 10 }
;; 3 succs { 8 }
;; 4 succs { 5 6 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 4 9 }
;; 9 succs { 10 }
;; 10 succs { 3 21 }
;; 21 succs { 19 }
;; 11 succs { 12 18 }
;; 12 succs { 14 13 }
;; 13 succs { 14 }
;; 14 succs { 16 }
;; 15 succs { 16 }
;; 16 succs { 15 17 }
;; 17 succs { 18 }
;; 18 succs { 19 }
;; 19 succs { 11 20 }
;; 20 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_20 -> { _17 }
Incremental SSA update started at block: 10
Number of blocks in CFG: 22
Number of blocks to update: 4 ( 18%)



Value ranges after Early VRP:

_1: VARYING
_2: [0, +INF]
i.204_3: [0, 2147483646]
_4: [0, 17179869168]
_5: VARYING
_6: VARYING
_7: VARYING
_8: [0, +INF]
_10: [0, 1735166785968]
_11: VARYING
_12: VARYING
_14: [0, 1735166785968]
_15: VARYING
_17: [-2147483648, 2147483647]
n.207_18: [0, +INF]
_19: VARYING
_20: [-2147483648, 2147483647]
_21: VARYING
k.209_22: [0, 4294967295]
_23: [0, 3470333574360]
_24: VARYING
_25: VARYING
k1.210_26: [0, 4294967295]
_27: [0, 3470333574360]
_28: VARYING
_29: VARYING
_30: VARYING
_34: VARYING
k.212_36: [0, 4294967295]
_37: [0, 34359738360]
_38: VARYING
_39: VARYING
k1.213_40: [0, 4294967295]
_41: [0, 34359738360]
_42: VARYING
_43: VARYING
_44: VARYING
_48: VARYING
_49: VARYING
_50: [-2147483648, 2147483647]
i_51: [0, 2305843009213693951]
i_52: [0, +INF]
j_53: [0, +INF]
j_54: [0, 2147483647]
rcon_55: VARYING
n_65(D): VARYING
k_68: [0, 4294967295]
k1_70: [0, 4294967295]
b_74(D): VARYING
a_76(D): VARYING
j_78: [1, 2147483647]
i_79: [1, 2147483647]
i_83: [1, 2147483647]
j_87: [1, 2147483647]


build_problem (double[101] * a, int n, double * b)
{
  double rcon;
  long int k1;
  long int k;
  long int j;
  long int i;
  unsigned int _1;
  unsigned int _2;
  long unsigned int i.204_3;
  long unsigned int _4;
  double * _5;
  double _6;
  unsigned int _7;
  unsigned int _8;
  long unsigned int _10;
  double[101] * _11;
  double _12;
  long unsigned int _14;
  double[101] * _15;
  long int _17;
  unsigned int n.207_18;
  unsigned int _19;
  long int _20;
  unsigned int _21;
  long unsigned int k.209_22;
  long unsigned int _23;
  double[101] * _24;
  double _25;
  long unsigned int k1.210_26;
  long unsigned int _27;
  double[101] * _28;
  double _29;
  double _30;
  double _34;
  long unsigned int k.212_36;
  long unsigned int _37;
  double * _38;
  double _39;
  long unsigned int k1.213_40;
  long unsigned int _41;
  double * _42;
  double _43;
  double _44;
  double _48;
  int _49;
  long int _50;

  <bb 2> [0.00%]:
  randnum (13);
  goto <bb 10>; [0.00%]

  <bb 3> [0.00%]:
  _1 = abs_randwc (100);
  _2 = _1 + 1;
  i.204_3 = (long unsigned int) i_51;
  _4 = i.204_3 * 8;
  _5 = b_74(D) + _4;
  _6 = (double) _2;
  *_5 = _6;
  goto <bb 8>; [0.00%]

  <bb 4> [0.00%]:
  if (i_51 == j_53)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _7 = abs_randwc (1000);
  _8 = _7 + 1;
  _10 = i.204_3 * 808;
  _11 = a_76(D) + _10;
  _12 = (double) _8;
  *_11[j_53] = _12;
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _14 = i.204_3 * 808;
  _15 = a_76(D) + _14;
  *_15[j_53] = 0.0;

  <bb 7> [0.00%]:
  j_87 = j_53 + 1;

  <bb 8> [0.00%]:
  # j_53 = PHI <0(3), j_87(7)>
  if (_17 > j_53)
    goto <bb 4>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  i_83 = i_51 + 1;

  <bb 10> [0.00%]:
  # i_51 = PHI <0(2), i_83(9)>
  _17 = (long int) n_65(D);
  if (_17 > i_51)
    goto <bb 3>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  # _20 = PHI <_17(10)>
  goto <bb 20>; [100.00%]

  <bb 12> [0.00%]:
  n.207_18 = (unsigned int) n_65(D);
  _19 = abs_randwc (n.207_18);
  k_68 = (long int) _19;
  _21 = abs_randwc (n.207_18);
  k1_70 = (long int) _21;
  if (k_68 != k1_70)
    goto <bb 13>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 13> [0.00%]:
  if (k_68 < k1_70)
    goto <bb 15>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [0.00%]:

  <bb 15> [0.00%]:
  # rcon_55 = PHI <1.0e+0(13), -1.0e+0(14)>
  goto <bb 17>; [0.00%]

  <bb 16> [0.00%]:
  k.209_22 = (long unsigned int) _19;
  _23 = k.209_22 * 808;
  _24 = a_76(D) + _23;
  _25 = *_24[j_54];
  k1.210_26 = (long unsigned int) _21;
  _27 = k1.210_26 * 808;
  _28 = a_76(D) + _27;
  _29 = *_28[j_54];
  _30 = _29 * rcon_55;
  _34 = _25 + _30;
  *_24[j_54] = _34;
  j_78 = j_54 + 1;

  <bb 17> [0.00%]:
  # j_54 = PHI <0(15), j_78(16)>
  if (_20 > j_54)
    goto <bb 16>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 18> [0.00%]:
  k.212_36 = (long unsigned int) _19;
  _37 = k.212_36 * 8;
  _38 = b_74(D) + _37;
  _39 = *_38;
  k1.213_40 = (long unsigned int) _21;
  _41 = k1.213_40 * 8;
  _42 = b_74(D) + _41;
  _43 = *_42;
  _44 = _43 * rcon_55;
  _48 = _39 + _44;
  *_38 = _48;

  <bb 19> [0.00%]:
  i_79 = i_52 + 1;

  <bb 20> [0.00%]:
  # i_52 = PHI <0(11), i_79(19)>
  _49 = n_65(D) * 8;
  _50 = (long int) _49;
  if (_50 > i_52)
    goto <bb 12>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 21> [0.00%]:
  return;

}



;; Function stradjust (stradjust, funcdef_no=60, decl_uid=4523, cgraph_uid=60, symbol_order=85)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11
;;
;; Loop 1
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8 6 7 5
;; 2 succs { 3 4 }
;; 3 succs { 11 }
;; 4 succs { 9 }
;; 5 succs { 6 7 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 9 }
;; 9 succs { 5 10 }
;; 10 succs { 11 }
;; 11 succs { 1 }

Value ranges after Early VRP:

_1: [0, 255]
_2: [0, +INF]
_3: VARYING
_4: VARYING
_5: VARYING
_6: VARYING
_7: [0, 255]
_8: [0, 255]
_9: [0, +INF]
_14: [0, +INF]
_15: [0, +INF]
_16: VARYING
_17: VARYING
_22: VARYING
_23: VARYING
_24: [0, 255]
_25: [0, +INF]
_26: [0, +INF]
_27: [0, +INF]
_28: VARYING
_29: VARYING
_30: [0, +INF]
_36: VARYING
_40: [0, 255]
_41: [0, +INF]
_42: [0, +INF]
_43: VARYING
_44: [0, +INF]
_45: VARYING
_46: VARYING
_47: [0, 255]
_50: [0, +INF]
_51: [0, +INF]
_52: VARYING
_53: VARYING
_54: [0, 255]
_57: [0, +INF]
_60: VARYING
_61: VARYING
j_62: [_26, +INF]
l_66(D): VARYING
i_67(D): VARYING
optrarray_68(D): VARYING
strarray_70(D): VARYING
direction_71: [-255, 255]
adjamount_72: [0, +INF]
nstrings_73(D): VARYING
nbytes_74: [0, +INF]
j_80: [0, +INF]
_82: [0, +INF]


stradjust (farulong * optrarray, faruchar * strarray, long unsigned int nstrings, long unsigned int i, unsigned char l)
{
  unsigned char adjamount;
  int direction;
  long unsigned int j;
  long unsigned int nbytes;
  int _1;
  long unsigned int _2;
  farulong * _3;
  long unsigned int _4;
  faruchar * _5;
  unsigned char _6;
  int _7;
  int _8;
  long unsigned int _9;
  long unsigned int _14;
  sizetype _15;
  farulong * _16;
  long unsigned int _17;
  faruchar * _22;
  unsigned char _23;
  long unsigned int _24;
  long unsigned int _25;
  sizetype _26;
  sizetype _27;
  farulong * _28;
  long unsigned int _29;
  long unsigned int _30;
  faruchar * _36;
  sizetype _40;
  sizetype _41;
  sizetype _42;
  faruchar * _43;
  long unsigned int _44;
  farulong * _45;
  long unsigned int _46;
  long unsigned int _47;
  long unsigned int _50;
  long unsigned int _51;
  farulong * _52;
  long unsigned int _53;
  long unsigned int _54;
  long unsigned int _57;
  long unsigned int _60;
  faruchar * _61;
  long unsigned int _82;

  <bb 2> [0.00%]:
  _1 = (int) l_66(D);
  _2 = i_67(D) * 8;
  _3 = optrarray_68(D) + _2;
  _4 = *_3;
  _5 = strarray_70(D) + _4;
  _6 = *_5;
  _7 = (int) _6;
  direction_71 = _1 - _7;
  _8 = ABS_EXPR <direction_71>;
  adjamount_72 = (unsigned char) _8;
  _9 = nstrings_73(D) + 18446744073709551615;
  if (_9 == i_67(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  *_5 = l_66(D);
  goto <bb 11>; [0.00%]

  <bb 4> [0.00%]:
  _14 = nstrings_73(D) * 8;
  _15 = _14 + 18446744073709551608;
  _16 = optrarray_68(D) + _15;
  _17 = *_16;
  _22 = strarray_70(D) + _17;
  _23 = *_22;
  _24 = (long unsigned int) _23;
  _25 = _17 + _24;
  _26 = i_67(D) + 1;
  _27 = _26 * 8;
  _28 = optrarray_68(D) + _27;
  _29 = *_28;
  _30 = -_29;
  _82 = _25 - _29;
  nbytes_74 = _82 + 1;
  _36 = strarray_70(D) + _29;
  _40 = (sizetype) l_66(D);
  _41 = _4 + _40;
  _42 = _41 + 1;
  _43 = strarray_70(D) + _42;
  MoveMemory (_43, _36, nbytes_74);
  goto <bb 9>; [0.00%]

  <bb 5> [0.00%]:
  if (direction_71 < 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _44 = j_62 * 8;
  _45 = optrarray_68(D) + _44;
  _46 = *_45;
  _47 = (long unsigned int) adjamount_72;
  _50 = _46 - _47;
  *_45 = _50;
  goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  _51 = j_62 * 8;
  _52 = optrarray_68(D) + _51;
  _53 = *_52;
  _54 = (long unsigned int) adjamount_72;
  _57 = _53 + _54;
  *_52 = _57;

  <bb 8> [0.00%]:
  j_80 = j_62 + 1;

  <bb 9> [0.00%]:
  # j_62 = PHI <_26(4), j_80(8)>
  if (j_62 < nstrings_73(D))
    goto <bb 5>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  _60 = *_3;
  _61 = strarray_70(D) + _60;
  *_61 = l_66(D);

  <bb 11> [0.00%]:
  return;

}



;; Function str_is_less (str_is_less, funcdef_no=62, decl_uid=4535, cgraph_uid=62, symbol_order=87)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 7 }
;; 5 succs { 9 6 }
;; 6 succs { 9 }
;; 7 succs { 9 8 }
;; 8 succs { 9 }
;; 9 succs { 1 }

Value ranges after Early VRP:

_1: [0, +INF]
_2: VARYING
_3: VARYING
_4: VARYING
_5: VARYING
_6: [0, +INF]
_7: VARYING
_8: VARYING
_9: VARYING
_10: VARYING
_11: [0, 255]
_17: [0, 255]
slen_36: [0, 255]
_37: [0, 1]
a_38(D): VARYING
optrarray_39(D): VARYING
strarray_41(D): VARYING
slen_42: [0, 255]
b_43(D): VARYING
slen_45: VARYING


str_is_less (farulong * optrarray, faruchar * strarray, long unsigned int numstrings, long unsigned int a, long unsigned int b)
{
  int slen;
  long unsigned int _1;
  farulong * _2;
  long unsigned int _3;
  faruchar * _4;
  unsigned char _5;
  long unsigned int _6;
  farulong * _7;
  long unsigned int _8;
  faruchar * _9;
  unsigned char _10;
  int _11;
  long unsigned int _17;
  int _37;

  <bb 2> [0.00%]:
  _1 = a_38(D) * 8;
  _2 = optrarray_39(D) + _1;
  _3 = *_2;
  _4 = strarray_41(D) + _3;
  _5 = *_4;
  slen_42 = (int) _5;
  _6 = b_43(D) * 8;
  _7 = optrarray_39(D) + _6;
  _8 = *_7;
  _9 = strarray_41(D) + _8;
  _10 = *_9;
  _11 = (int) _10;
  if (_5 > _10)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:

  <bb 4> [0.00%]:
  # slen_36 = PHI <slen_42(2), _11(3)>
  _17 = (long unsigned int) slen_36;
  slen_45 = strncmp (_4, _9, _17);
  if (slen_45 == 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 5> [0.00%]:
  if (_5 > _10)
    goto <bb 9>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  goto <bb 9>; [0.00%]

  <bb 7> [0.00%]:
  if (slen_45 < 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:

  <bb 9> [0.00%]:
  # _37 = PHI <1(5), 0(6), 1(7), 0(8)>
  return _37;

}



;; Function strsift (strsift, funcdef_no=63, decl_uid=4541, cgraph_uid=63, symbol_order=88)

Disambiguating loop 1 with multiple latches
Merged latch edges of loop 1
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 11 10
;;
;; Loop 1
;;  header 11, latch 9
;;  depth 1, outer 0
;;  nodes: 11 9 8 7 6 3 4 5
;; 2 succs { 11 }
;; 3 succs { 4 6 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 11 }
;; 11 succs { 3 10 }
;; 10 succs { 1 }

Value ranges after Early VRP:

_1: [1, +INF]
_2: VARYING
_3: VARYING
_4: [0, +INF]
_5: VARYING
_6: VARYING
_7: VARYING
_8: [0, 255]
_9: [1, 256]
_10: [1, 256]
_15: [0, +INF]
_16: VARYING
_17: VARYING
_18: VARYING
_19: [0, 255]
_21: [1, 256]
_22: [1, 256]
_25: VARYING
_26: VARYING
_29: VARYING
_30: VARYING
_31: [0, 255]
_33: [1, 256]
_34: [1, 256]
_37: VARYING
_38: VARYING
_39: [0, +INF]
i_40: VARYING
k_41: VARYING
i_44(D): VARYING
j_46(D): VARYING
i_48: VARYING
optrarray_49(D): VARYING
strarray_50(D): VARYING
numstrings_51(D): VARYING
i_55: [0, +INF]
tlen_56: VARYING
tlen_58: VARYING
tlen_61: VARYING


strsift (farulong * optrarray, faruchar * strarray, long unsigned int numstrings, long unsigned int i, long unsigned int j)
{
  unsigned char tlen;
  unsigned char temp[80];
  long unsigned int k;
  long unsigned int _1;
  int _2;
  int _3;
  long unsigned int _4;
  farulong * _5;
  long unsigned int _6;
  faruchar * _7;
  int _8;
  int _9;
  long unsigned int _10;
  long unsigned int _15;
  farulong * _16;
  long unsigned int _17;
  faruchar * _18;
  int _19;
  int _21;
  long unsigned int _22;
  long unsigned int _25;
  faruchar * _26;
  long unsigned int _29;
  faruchar * _30;
  int _31;
  int _33;
  long unsigned int _34;
  long unsigned int _37;
  faruchar * _38;
  long unsigned int _39;

  <bb 2> [0.00%]:
  goto <bb 10>; [0.00%]

  <bb 3> [0.00%]:
  if (_39 < j_46(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  _1 = _39 + 1;
  _2 = str_is_less.isra.2 (optrarray_49(D), strarray_50(D), _39, _1);
  if (_2 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:

  <bb 6> [0.00%]:
  # k_41 = PHI <_39(3), _39(4), _1(5)>
  _3 = str_is_less.isra.2 (optrarray_49(D), strarray_50(D), i_40, k_41);
  if (_3 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  _4 = k_41 * 8;
  _5 = optrarray_49(D) + _4;
  _6 = *_5;
  _7 = strarray_50(D) + _6;
  tlen_56 = *_7;
  _8 = (int) tlen_56;
  _9 = _8 + 1;
  _10 = (long unsigned int) _9;
  MoveMemory (&temp[0], _7, _10);
  _15 = i_40 * 8;
  _16 = optrarray_49(D) + _15;
  _17 = *_16;
  _18 = strarray_50(D) + _17;
  tlen_58 = *_18;
  _19 = (int) tlen_58;
  stradjust (optrarray_49(D), strarray_50(D), numstrings_51(D), k_41, _19);
  _21 = _19 + 1;
  _22 = (long unsigned int) _21;
  _25 = *_16;
  _26 = strarray_50(D) + _25;
  _29 = *_5;
  _30 = strarray_50(D) + _29;
  MoveMemory (_30, _26, _22);
  tlen_61 = temp[0];
  _31 = (int) tlen_61;
  stradjust (optrarray_49(D), strarray_50(D), numstrings_51(D), i_40, _31);
  _33 = _31 + 1;
  _34 = (long unsigned int) _33;
  _37 = *_16;
  _38 = strarray_50(D) + _37;
  MoveMemory (_38, &temp[0], _34);
  goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  i_55 = j_46(D) + 1;

  <bb 9> [0.00%]:
  # i_48 = PHI <i_55(8), k_41(7)>

  <bb 10> [0.00%]:
  # i_40 = PHI <i_48(9), i_44(D)(2)>
  _39 = i_40 * 2;
  if (_39 <= j_46(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  temp ={v} {CLOBBER};
  return;

}



;; Function StrHeapSort (StrHeapSort, funcdef_no=61, decl_uid=4529, cgraph_uid=61, symbol_order=86)

Created preheader block for loop 2
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 8 5 6 7
;;
;; Loop 2
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 8 }
;; 8 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 1 }

Value ranges after Early VRP:

_1: [0, 255]
_2: [1, 256]
_3: [1, 256]
_4: [0, +INF]
_5: VARYING
_6: VARYING
_7: VARYING
_8: [0, 255]
_10: [1, 256]
_11: [1, 256]
_14: VARYING
_15: VARYING
_16: [0, 255]
_18: [1, 256]
_19: [1, 256]
_22: VARYING
_23: VARYING
i_24: [0, i_29]
i_25: [0, top_28(D)]
top_28(D): VARYING
i_29: [0, 9223372036854775807]
optrarray_33(D): VARYING
strarray_34(D): VARYING
numstrings_35(D): VARYING
tlen_37: VARYING
tlen_39: VARYING
tlen_42: VARYING
i_45: [0, 18446744073709551614]
i_47: [0, 18446744073709551614]


Removing basic block 8
StrHeapSort (farulong * optrarray, faruchar * strarray, long unsigned int numstrings, long unsigned int bottom, long unsigned int top)
{
  long unsigned int i;
  unsigned char tlen;
  unsigned char temp[80];
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  farulong * _5;
  long unsigned int _6;
  faruchar * _7;
  int _8;
  int _10;
  long unsigned int _11;
  long unsigned int _14;
  faruchar * _15;
  int _16;
  int _18;
  long unsigned int _19;
  long unsigned int _22;
  faruchar * _23;

  <bb 2> [0.00%]:
  i_29 = top_28(D) / 2;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  strsift (optrarray_33(D), strarray_34(D), numstrings_35(D), i_24, top_28(D));
  i_47 = i_24 + 18446744073709551615;

  <bb 4> [0.00%]:
  # i_24 = PHI <i_29(2), i_47(3)>
  if (i_24 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  strsift (optrarray_33(D), strarray_34(D), numstrings_35(D), 0, i_25);
  tlen_37 = *strarray_34(D);
  _1 = (int) tlen_37;
  _2 = _1 + 1;
  _3 = (long unsigned int) _2;
  MoveMemory (&temp[0], strarray_34(D), _3);
  _4 = i_25 * 8;
  _5 = optrarray_33(D) + _4;
  _6 = *_5;
  _7 = strarray_34(D) + _6;
  tlen_39 = *_7;
  _8 = (int) tlen_39;
  stradjust (optrarray_33(D), strarray_34(D), numstrings_35(D), 0, _8);
  _10 = _8 + 1;
  _11 = (long unsigned int) _10;
  _14 = *_5;
  _15 = strarray_34(D) + _14;
  MoveMemory (strarray_34(D), _15, _11);
  tlen_42 = temp[0];
  _16 = (int) tlen_42;
  stradjust (optrarray_33(D), strarray_34(D), numstrings_35(D), i_25, _16);
  _18 = _16 + 1;
  _19 = (long unsigned int) _18;
  _22 = *_5;
  _23 = strarray_34(D) + _22;
  MoveMemory (_23, &temp[0], _19);
  i_45 = i_25 + 18446744073709551615;

  <bb 6> [0.00%]:
  # i_25 = PHI <top_28(D)(4), i_45(5)>
  if (i_25 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  temp ={v} {CLOBBER};
  return;

}



;; Function DoStringSortIteration (DoStringSortIteration, funcdef_no=58, decl_uid=4512, cgraph_uid=58, symbol_order=83)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

Value ranges after Early VRP:

nstrings.22_1: VARYING
_2: [0, +INF]
nstrings.24_4: VARYING
_5: [0, +INF]
_6: [0, +INF]
i_7: [0, +INF]
tempobase_8: VARYING
tempsbase_9: VARYING
arraybase_12(D): VARYING
numarrays_13(D): VARYING
arraysize_14(D): VARYING
optrarray_16: VARYING
elapsed_20: VARYING
elapsed_23: VARYING
tempobase_29: VARYING
tempsbase_30: VARYING
i_31: [0, +INF]


DoStringSortIteration (faruchar * arraybase, unsigned int numarrays, long unsigned int arraysize)
{
  faruchar * tempsbase;
  farulong * tempobase;
  unsigned int i;
  int syserror;
  long unsigned int nstrings;
  long unsigned int elapsed;
  farulong * optrarray;
  long unsigned int nstrings.22_1;
  long unsigned int _2;
  long unsigned int nstrings.24_4;
  long unsigned int _5;
  sizetype _6;

  <bb 2> [0.00%]:
  optrarray_16 = LoadStringArray (arraybase_12(D), numarrays_13(D), &nstrings, arraysize_14(D));
  elapsed_20 = StartStopwatch ();
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  nstrings.22_1 = nstrings;
  _2 = nstrings.22_1 + 18446744073709551615;
  StrHeapSort.isra.3 (tempobase_8, tempsbase_9, nstrings.22_1, _2);
  nstrings.24_4 = nstrings;
  _5 = nstrings.24_4 * 8;
  tempobase_29 = tempobase_8 + _5;
  _6 = arraysize_14(D) + 100;
  tempsbase_30 = tempsbase_9 + _6;
  i_31 = i_7 + 1;

  <bb 4> [0.00%]:
  # i_7 = PHI <0(2), i_31(3)>
  # tempobase_8 = PHI <optrarray_16(2), tempobase_29(3)>
  # tempsbase_9 = PHI <arraybase_12(D)(2), tempsbase_30(3)>
  if (i_7 < numarrays_13(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  elapsed_23 = StopStopwatch (elapsed_20);
  FreeMemory (optrarray_16, &syserror);
  nstrings ={v} {CLOBBER};
  syserror ={v} {CLOBBER};
  return elapsed_23;

}



;; Function thefunction (thefunction, funcdef_no=72, decl_uid=4592, cgraph_uid=72, symbol_order=97)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 6 3 4 5 }
;; 3 succs { 6 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }

Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: VARYING
_4: VARYING
_5: VARYING
_6: VARYING
_7: VARYING
_8: VARYING
_9: VARYING
_10: VARYING
select_12(D): VARYING
x_13(D): VARYING
omegan_16(D): VARYING
_17: VARYING
_19: VARYING
_21: VARYING


thefunction (double x, double omegan, int select)
{
  double _1;
  double _2;
  double _3;
  double _4;
  double _5;
  double _6;
  double _7;
  double _8;
  double _9;
  double _10;
  double _17;
  double _19;
  double _21;

  <bb 2> [0.00%]:
  switch (select_12(D)) <default: <L5> [0.00%], case 0: <L0> [0.00%], case 1: <L1> [0.00%], case 2: <L2> [0.00%]>

<L0> [0.00%]:
  _1 = x_13(D) + 1.0e+0;
  _21 = pow (_1, x_13(D));
  goto <bb 6> (<L5>); [0.00%]

<L1> [0.00%]:
  _2 = x_13(D) + 1.0e+0;
  _3 = pow (_2, x_13(D));
  _4 = x_13(D) * omegan_16(D);
  _5 = cos (_4);
  _19 = _3 * _5;
  goto <bb 6> (<L5>); [0.00%]

<L2> [0.00%]:
  _6 = x_13(D) + 1.0e+0;
  _7 = pow (_6, x_13(D));
  _8 = x_13(D) * omegan_16(D);
  _9 = sin (_8);
  _17 = _7 * _9;

  # _10 = PHI <_21(3), _19(4), _17(5), 0.0(2)>
<L5> [0.00%]:
  return _10;

}



;; Function TrapezoidIntegrate (TrapezoidIntegrate, funcdef_no=71, decl_uid=4588, cgraph_uid=71, symbol_order=96)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;;
;; Loop 1
;;  header 5, latch 4
;;  depth 1, outer 0
;;  nodes: 5 4
;; 2 succs { 3 6 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 4 6 }
;; 6 succs { 1 }

Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: VARYING
_4: VARYING
_5: VARYING
_6: VARYING
nsteps_7: VARYING
x_8: VARYING
rvalue_9: VARYING
rvalue_10: VARYING
x0_13(D): VARYING
x1_15(D): VARYING
nsteps_16(D): VARYING
dx_17: VARYING
omegan_19(D): VARYING
select_20(D): VARYING
rvalue_22: VARYING
nsteps_23: [-INF(OVF), 2147483646]
nsteps_24: VARYING
x_25: VARYING
_27: VARYING
rvalue_28: VARYING
rvalue_30: VARYING


TrapezoidIntegrate (double x0, double x1, int nsteps, double omegan, int select)
{
  double rvalue;
  double dx;
  double x;
  double _1;
  double _2;
  double _3;
  double _4;
  double _5;
  double _6;
  double _27;

  <bb 2> [0.00%]:
  _1 = x1_15(D) - x0_13(D);
  _2 = (double) nsteps_16(D);
  dx_17 = _1 / _2;
  _3 = thefunction (x0_13(D), omegan_19(D), select_20(D));
  rvalue_22 = _3 * 5.0e-1;
  if (nsteps_16(D) != 1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  nsteps_23 = nsteps_16(D) + -1;
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  x_25 = x_8 + dx_17;
  _27 = thefunction (x_25, omegan_19(D), select_20(D));
  rvalue_28 = rvalue_9 + _27;

  <bb 5> [0.00%]:
  # nsteps_7 = PHI <nsteps_23(3), nsteps_24(4)>
  # x_8 = PHI <x0_13(D)(3), x_25(4)>
  # rvalue_9 = PHI <rvalue_22(3), rvalue_28(4)>
  nsteps_24 = nsteps_7 + -1;
  if (nsteps_24 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  # rvalue_10 = PHI <rvalue_22(2), rvalue_9(5)>
  _4 = thefunction (x1_15(D), omegan_19(D), select_20(D));
  _5 = _4 * 5.0e-1;
  _6 = _5 + rvalue_10;
  rvalue_30 = _6 * dx_17;
  return rvalue_30;

}



;; Function DoFPUTransIteration (DoFPUTransIteration, funcdef_no=70, decl_uid=4582, cgraph_uid=70, symbol_order=95)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: VARYING
_4: VARYING
_5: [0, +INF]
_6: VARYING
_7: VARYING
_11: VARYING
_12: VARYING
i_13: [1, 2305843009213693952]
elapsed_17: VARYING
abase_19(D): VARYING
arraysize_23(D): VARYING
_25: VARYING
bbase_28(D): VARYING
i_31: [0, +INF]


DoFPUTransIteration (fardouble * abase, fardouble * bbase, long unsigned int arraysize)
{
  long unsigned int elapsed;
  long unsigned int i;
  double omega;
  double _1;
  double _2;
  double _3;
  double _4;
  long unsigned int _5;
  fardouble * _6;
  double _7;
  fardouble * _11;
  double _12;
  long unsigned int _25;

  <bb 2> [0.00%]:
  elapsed_17 = StartStopwatch ();
  _1 = TrapezoidIntegrate (0.0, 2.0e+0, 200, 0.0, 0);
  _2 = _1 * 5.0e-1;
  *abase_19(D) = _2;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _3 = (double) i_13;
  _4 = _3 * 3.141592653589793115997963468544185161590576171875e+0;
  _5 = i_13 * 8;
  _6 = abase_19(D) + _5;
  _7 = TrapezoidIntegrate (0.0, 2.0e+0, 200, _4, 1);
  *_6 = _7;
  _11 = bbase_28(D) + _5;
  _12 = TrapezoidIntegrate (0.0, 2.0e+0, 200, _4, 2);
  *_11 = _12;
  i_31 = i_13 + 1;

  <bb 4> [0.00%]:
  # i_13 = PHI <1(2), i_31(3)>
  if (i_13 < arraysize_23(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  _25 = StopStopwatch (elapsed_17);
  return _25;

}



;; Function create_text_line (create_text_line, funcdef_no=90, decl_uid=4660, cgraph_uid=90, symbol_order=115)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 7 6
;;
;; Loop 1
;;  header 3, latch 7
;;  depth 1, outer 0
;;  nodes: 3 7 5 4
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 7 6 }
;; 7 succs { 3 }
;; 6 succs { 1 }

Value ranges after Early VRP:

_1: VARYING
_2: [0, 9223372036854775806]
_3: [1, 9223372036854775807]
_4: [0, 9223372036854775806]
_5: [1, 9223372036854775807]
_6: [0, 9223372036854775806]
_7: VARYING
tomove.157_8: [0, +INF]
dt_10: VARYING
charssofar_11: VARYING
tomove_12: VARYING
dt_15(D): VARYING
wordptr_18: VARYING
tomove_20: [1, +INF]
nchars_22(D): VARYING
tomove_23: VARYING
charssofar_25: VARYING
dt_26: VARYING


Removing basic block 7
create_text_line (farchar * dt, long int nchars)
{
  farchar * wordptr;
  char myword[40];
  long int tomove;
  long int charssofar;
  unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long int _6;
  long int _7;
  long unsigned int tomove.157_8;

  <bb 2> [0.00%]:

  <bb 3> [0.00%]:
  # dt_10 = PHI <dt_15(D)(2), dt_26(5)>
  # charssofar_11 = PHI <0(2), charssofar_25(5)>
  _1 = abs_randwc (50);
  wordptr_18 = wordcatarray[_1];
  _2 = strlen (wordptr_18);
  _3 = _2 + 1;
  MoveMemory (&myword, wordptr_18, _3);
  _4 = strlen (&myword);
  _5 = _4 + 1;
  tomove_20 = (long int) _5;
  _6 = tomove_20 + -1;
  myword[_6] = 32;
  _7 = charssofar_11 + tomove_20;
  if (_7 > nchars_22(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  tomove_23 = nchars_22(D) - charssofar_11;

  <bb 5> [0.00%]:
  # tomove_12 = PHI <tomove_20(3), tomove_23(4)>
  tomove.157_8 = (long unsigned int) tomove_12;
  MoveMemory (dt_10, &myword, tomove.157_8);
  charssofar_25 = charssofar_11 + tomove_12;
  dt_26 = dt_10 + tomove.157_8;
  if (nchars_22(D) > charssofar_25)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  myword ={v} {CLOBBER};
  return;

}



;; Function create_text_block (create_text_block, funcdef_no=91, decl_uid=4664, cgraph_uid=91, symbol_order=116)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 9 8
;;
;; Loop 1
;;  header 3, latch 9
;;  depth 1, outer 0
;;  nodes: 3 9 7 5 6 4
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 9 8 }
;; 9 succs { 3 }
;; 8 succs { 1 }

Value ranges after Early VRP:

_1: [0, 65535]
_2: [-6, 65529]
_3: ~[65530, 4294967289]
_4: VARYING
_5: [0, +INF]
_6: [0, +INF]
linelen.155_7: ~[0, 1]
_8: [0, +INF]
tb_10: VARYING
bytessofar_11: VARYING
linelen_12: [0, +INF]
tb_16(D): VARYING
maxlinlen_18(D): VARYING
linelen_20: [0, 4294967295]
tblen_21(D): VARYING
linelen_22: [0, +INF]
tb_24: VARYING
tb_25: VARYING
bytessofar_27: [0, +INF]


Removing basic block 9
create_text_block (farchar * tb, long unsigned int tblen, short unsigned int maxlinlen)
{
  long unsigned int linelen;
  long unsigned int bytessofar;
  int _1;
  int _2;
  unsigned int _3;
  unsigned int _4;
  unsigned int _5;
  long unsigned int _6;
  long int linelen.155_7;
  sizetype _8;

  <bb 2> [0.00%]:

  <bb 3> [0.00%]:
  # tb_10 = PHI <tb_16(D)(2), tb_25(7)>
  # bytessofar_11 = PHI <0(2), bytessofar_27(7)>
  _1 = (int) maxlinlen_18(D);
  _2 = _1 + -6;
  _3 = (unsigned int) _2;
  _4 = abs_randwc (_3);
  _5 = _4 + 6;
  linelen_20 = (long unsigned int) _5;
  _6 = bytessofar_11 + linelen_20;
  if (_6 > tblen_21(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  linelen_22 = tblen_21(D) - bytessofar_11;

  <bb 5> [0.00%]:
  # linelen_12 = PHI <linelen_20(3), linelen_22(4)>
  if (linelen_12 > 1)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  linelen.155_7 = (long int) linelen_12;
  create_text_line (tb_10, linelen.155_7);

  <bb 7> [0.00%]:
  _8 = linelen_12 + 18446744073709551615;
  tb_24 = tb_10 + _8;
  tb_25 = tb_10 + linelen_12;
  *tb_24 = 10;
  bytessofar_27 = bytessofar_11 + linelen_12;
  if (tblen_21(D) > bytessofar_27)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  return;

}



;; Function read_data_file (read_data_file, funcdef_no=110, decl_uid=4723, cgraph_uid=110, symbol_order=135)

Created preheader block for loop 3
Created preheader block for loop 2
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 25 15 16 17 18 19 20 21 22 26 23 24
;;
;; Loop 1
;;  header 22, latch 21
;;  depth 1, outer 0
;;  nodes: 22 21 20 25 19 17 18 15 16 14 26 13 11
;;
;; Loop 3
;;  header 20, latch 19
;;  depth 2, outer 1
;;  nodes: 20 19 17 18 15 16
;;
;; Loop 2
;;  header 14, latch 13
;;  depth 2, outer 1
;;  nodes: 14 13 11
;; 2 succs { 3 4 }
;; 3 succs { 24 }
;; 4 succs { 5 6 }
;; 5 succs { 24 }
;; 6 succs { 7 8 }
;; 7 succs { 24 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 22 }
;; 11 succs { 12 13 }
;; 12 succs { 24 }
;; 13 succs { 14 }
;; 14 succs { 11 25 }
;; 25 succs { 20 }
;; 15 succs { 16 17 }
;; 16 succs { 17 }
;; 17 succs { 18 19 }
;; 18 succs { 19 }
;; 19 succs { 20 }
;; 20 succs { 15 21 }
;; 21 succs { 22 }
;; 22 succs { 26 23 }
;; 26 succs { 14 }
;; 23 succs { 24 }
;; 24 succs { 1 }

Value ranges after Early VRP:

inpath.168_1: VARYING
numpats.169_2: VARYING
xinsize.170_3: VARYING
val1.171_4: VARYING
_5: VARYING
val2.172_6: VARYING
_7: VARYING
val3.173_8: VARYING
_9: VARYING
val4.174_10: VARYING
_11: VARYING
val5.175_12: VARYING
_13: VARYING
yinsize.176_14: VARYING
_15: VARYING
_16: VARYING
val1.177_17: VARYING
_18: VARYING
val2.178_19: VARYING
_20: VARYING
val3.179_21: VARYING
_22: VARYING
val4.180_23: VARYING
_24: VARYING
val5.181_25: VARYING
_26: VARYING
val6.182_27: VARYING
_28: VARYING
val7.183_29: VARYING
_30: VARYING
val8.184_31: VARYING
_32: VARYING
numpats.185_33: VARYING
patt_34: [0, 10]
i_35: [0, 35]
row_36: [0, +INF]
_37: [-1, 0]
infile_47: VARYING
vals_read_49: VARYING
vals_read_51: VARYING
vals_read_61: VARYING
patt_78: VARYING
i_81: [1, 35]
vals_read_83: VARYING
element_84: VARYING
element_86: VARYING
element_88: VARYING
element_90: VARYING
element_92: VARYING
element_94: VARYING
row_95: VARYING
_115: VARYING
_116: VARYING
_117: VARYING
_118: VARYING


Removing basic block 25
Removing basic block 26
read_data_file ()
{
  int D.6523;
  int D.6521;
  int D.6519;
  int D.6517;
  int val8;
  int val7;
  int val6;
  int val5;
  int val4;
  int val3;
  int val2;
  int val1;
  int vals_read;
  int row;
  int i;
  int element;
  int patt;
  int youtsize;
  int yinsize;
  int xinsize;
  struct FILE * infile;
  char * inpath.168_1;
  int numpats.169_2;
  int xinsize.170_3;
  int val1.171_4;
  double _5;
  int val2.172_6;
  double _7;
  int val3.173_8;
  double _9;
  int val4.174_10;
  double _11;
  int val5.175_12;
  double _13;
  int yinsize.176_14;
  double _15;
  double _16;
  int val1.177_17;
  double _18;
  int val2.178_19;
  double _20;
  int val3.179_21;
  double _22;
  int val4.180_23;
  double _24;
  int val5.181_25;
  double _26;
  int val6.182_27;
  double _28;
  int val7.183_29;
  double _30;
  int val8.184_31;
  double _32;
  int numpats.185_33;
  int _37;
  int _115;
  int _116;
  int _117;
  int _118;

  <bb 2> [0.00%]:
  inpath.168_1 = inpath;
  infile_47 = fopen (inpath.168_1, "r");
  if (infile_47 == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  _115 = __printf_chk (1, "\n CPU:NNET--error in opening file!");
  goto <bb 24>; [0.00%]

  <bb 4> [0.00%]:
  vals_read_49 = fscanf (infile_47, "%d  %d  %d", &xinsize, &yinsize, &youtsize);
  if (vals_read_49 != 3)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [100.00%]:
  _116 = __printf_chk (1, "\n CPU:NNET -- Should read 3 items in line one; did read %d", vals_read_49);
  goto <bb 24>; [0.00%]

  <bb 6> [0.00%]:
  vals_read_51 = fscanf (infile_47, "%d", &numpats);
  if (vals_read_51 != 1)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [100.00%]:
  _117 = __printf_chk (1, "\n CPU:NNET -- Should read 1 item in line 2; did read %d", vals_read_51);
  goto <bb 24>; [0.00%]

  <bb 8> [0.00%]:
  numpats.169_2 = numpats;
  if (numpats.169_2 > 10)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  numpats = 10;

  <bb 10> [0.00%]:
  goto <bb 22>; [0.00%]

  <bb 11> [0.00%]:
  vals_read_83 = fscanf (infile_47, "%d  %d  %d  %d  %d", &val1, &val2, &val3, &val4, &val5);
  if (vals_read_83 != 5)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [100.00%]:
  _118 = __printf_chk (1, "\n CPU:NNET -- failure in reading input!");
  goto <bb 24>; [0.00%]

  <bb 13> [0.00%]:
  xinsize.170_3 = xinsize;
  element_84 = xinsize.170_3 * row_36;
  val1.171_4 = val1;
  _5 = (double) val1.171_4;
  in_pats[patt_34][element_84] = _5;
  element_86 = element_84 + 1;
  val2.172_6 = val2;
  _7 = (double) val2.172_6;
  in_pats[patt_34][element_86] = _7;
  element_88 = element_84 + 2;
  val3.173_8 = val3;
  _9 = (double) val3.173_8;
  in_pats[patt_34][element_88] = _9;
  element_90 = element_84 + 3;
  val4.174_10 = val4;
  _11 = (double) val4.174_10;
  in_pats[patt_34][element_90] = _11;
  element_92 = element_84 + 4;
  val5.175_12 = val5;
  _13 = (double) val5.175_12;
  in_pats[patt_34][element_92] = _13;
  element_94 = element_84 + 5;
  row_95 = row_36 + 1;

  <bb 14> [0.00%]:
  # row_36 = PHI <0(22), row_95(13)>
  yinsize.176_14 = yinsize;
  if (yinsize.176_14 > row_36)
    goto <bb 11>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 15> [0.00%]:
  _15 = in_pats[patt_34][i_35];
  if (_15 >= 9.0000000000000002220446049250313080847263336181640625e-1)
    goto <bb 16>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 16> [0.00%]:
  in_pats[patt_34][i_35] = 9.0000000000000002220446049250313080847263336181640625e-1;

  <bb 17> [0.00%]:
  _16 = in_pats[patt_34][i_35];
  if (_16 <= 1.000000000000000055511151231257827021181583404541015625e-1)
    goto <bb 18>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 18> [0.00%]:
  in_pats[patt_34][i_35] = 1.000000000000000055511151231257827021181583404541015625e-1;

  <bb 19> [0.00%]:
  i_81 = i_35 + 1;

  <bb 20> [0.00%]:
  # i_35 = PHI <0(14), i_81(19)>
  if (i_35 <= 34)
    goto <bb 15>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 21> [0.00%]:
  vals_read_61 = fscanf (infile_47, "%d  %d  %d  %d  %d  %d  %d  %d", &val1, &val2, &val3, &val4, &val5, &val6, &val7, &val8);
  val1.177_17 = val1;
  _18 = (double) val1.177_17;
  out_pats[patt_34][0] = _18;
  val2.178_19 = val2;
  _20 = (double) val2.178_19;
  out_pats[patt_34][1] = _20;
  val3.179_21 = val3;
  _22 = (double) val3.179_21;
  out_pats[patt_34][2] = _22;
  val4.180_23 = val4;
  _24 = (double) val4.180_23;
  out_pats[patt_34][3] = _24;
  val5.181_25 = val5;
  _26 = (double) val5.181_25;
  out_pats[patt_34][4] = _26;
  val6.182_27 = val6;
  _28 = (double) val6.182_27;
  out_pats[patt_34][5] = _28;
  val7.183_29 = val7;
  _30 = (double) val7.183_29;
  out_pats[patt_34][6] = _30;
  val8.184_31 = val8;
  _32 = (double) val8.184_31;
  out_pats[patt_34][7] = _32;
  patt_78 = patt_34 + 1;

  <bb 22> [0.00%]:
  # patt_34 = PHI <0(10), patt_78(21)>
  numpats.185_33 = numpats;
  if (numpats.185_33 > patt_34)
    goto <bb 14>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 23> [0.00%]:
  fclose (infile_47);

  <bb 24> [0.00%]:
  # _37 = PHI <-1(3), -1(5), -1(7), -1(12), 0(23)>
  xinsize ={v} {CLOBBER};
  yinsize ={v} {CLOBBER};
  youtsize ={v} {CLOBBER};
  val1 ={v} {CLOBBER};
  val2 ={v} {CLOBBER};
  val3 ={v} {CLOBBER};
  val4 ={v} {CLOBBER};
  val5 ={v} {CLOBBER};
  val6 ={v} {CLOBBER};
  val7 ={v} {CLOBBER};
  val8 ={v} {CLOBBER};
  return _37;

}



;; Function do_mid_forward (do_mid_forward, funcdef_no=97, decl_uid=4705, cgraph_uid=97, symbol_order=122)

Created preheader block for loop 2
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 8 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 4 8 3
;;
;; Loop 2
;;  header 4, latch 3
;;  depth 2, outer 1
;;  nodes: 4 3
;; 2 succs { 6 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 8 7 }
;; 8 succs { 4 }
;; 7 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

sum_11 -> { sum_7 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 9
Number of blocks to update: 3 ( 33%)



Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: VARYING
_4: VARYING
_5: VARYING
_6: VARYING
sum_7: VARYING
neurode_8: [0, 8]
i_9: [0, 35]
sum_11: VARYING
sum_16: VARYING
neurode_18: [1, 8]
patt_19(D): VARYING
sum_20: VARYING
i_21: [1, 35]


Removing basic block 8
do_mid_forward (int patt)
{
  int i;
  int neurode;
  double sum;
  double _1;
  double _2;
  double _3;
  double _4;
  double _5;
  double _6;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = mid_wts[neurode_8][i_9];
  _2 = in_pats[patt_19(D)][i_9];
  _3 = _1 * _2;
  sum_20 = _3 + sum_7;
  i_21 = i_9 + 1;

  <bb 4> [0.00%]:
  # sum_7 = PHI <0.0(6), sum_20(3)>
  # i_9 = PHI <0(6), i_21(3)>
  if (i_9 <= 34)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  # sum_11 = PHI <sum_7(4)>
  _4 = -sum_11;
  _5 = exp (_4);
  _6 = _5 + 1.0e+0;
  sum_16 = 1.0e+0 / _6;
  mid_out[neurode_8] = sum_16;
  neurode_18 = neurode_8 + 1;

  <bb 6> [0.00%]:
  # neurode_8 = PHI <0(2), neurode_18(5)>
  if (neurode_8 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function do_out_forward (do_out_forward, funcdef_no=98, decl_uid=4706, cgraph_uid=98, symbol_order=123)

Created preheader block for loop 2
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 8 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 4 8 3
;;
;; Loop 2
;;  header 4, latch 3
;;  depth 2, outer 1
;;  nodes: 4 3
;; 2 succs { 6 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 8 7 }
;; 8 succs { 4 }
;; 7 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

sum_11 -> { sum_7 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 9
Number of blocks to update: 3 ( 33%)



Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: VARYING
_4: VARYING
_5: VARYING
_6: VARYING
sum_7: VARYING
neurode_8: [0, 8]
i_9: [0, 8]
sum_11: VARYING
sum_16: VARYING
neurode_18: [1, 8]
sum_19: VARYING
i_20: [1, 8]


Removing basic block 8
do_out_forward ()
{
  int i;
  int neurode;
  double sum;
  double _1;
  double _2;
  double _3;
  double _4;
  double _5;
  double _6;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = out_wts[neurode_8][i_9];
  _2 = mid_out[i_9];
  _3 = _1 * _2;
  sum_19 = _3 + sum_7;
  i_20 = i_9 + 1;

  <bb 4> [0.00%]:
  # sum_7 = PHI <0.0(6), sum_19(3)>
  # i_9 = PHI <0(6), i_20(3)>
  if (i_9 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  # sum_11 = PHI <sum_7(4)>
  _4 = -sum_11;
  _5 = exp (_4);
  _6 = _5 + 1.0e+0;
  sum_16 = 1.0e+0 / _6;
  out_out[neurode_8] = sum_16;
  neurode_18 = neurode_8 + 1;

  <bb 6> [0.00%]:
  # neurode_8 = PHI <0(2), neurode_18(5)>
  if (neurode_8 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function do_forward_pass (do_forward_pass, funcdef_no=99, decl_uid=4710, cgraph_uid=99, symbol_order=124)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after Early VRP:

patt_2(D): VARYING


do_forward_pass (int patt)
{
  <bb 2> [0.00%]:
  do_mid_forward (patt_2(D));
  do_out_forward ();
  return;

}



;; Function DoNNetIteration (DoNNetIteration, funcdef_no=96, decl_uid=4703, cgraph_uid=96, symbol_order=121)

Created preheader block for loop 3
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 10 11 8 9
;;
;; Loop 1
;;  header 8, latch 11
;;  depth 1, outer 0
;;  nodes: 8 11 7 3 6 5 10 4
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 2, outer 1
;;  nodes: 7 6 5 10 4
;;
;; Loop 3
;;  header 5, latch 4
;;  depth 3, outer 2
;;  nodes: 5 4
;; 2 succs { 8 }
;; 3 succs { 7 }
;; 4 succs { 5 }
;; 5 succs { 4 6 }
;; 6 succs { 7 }
;; 7 succs { 10 11 }
;; 10 succs { 5 }
;; 11 succs { 8 }
;; 8 succs { 3 9 }
;; 9 succs { 1 }

Value ranges after Early VRP:

iteration_count.186_1: VARYING
_2: VARYING
numpats.187_3: VARYING
numpasses.188_4: VARYING
_5: VARYING
_6: VARYING
learned.189_7: VARYING
nloops_9: [0, nloops_17(D)]
patt_10: [0, +INF]
elapsed_16: VARYING
nloops_17(D): VARYING
nloops_18: [0, +INF]
_20: VARYING
patt_35: VARYING


Removing basic block 10
Removing basic block 11
DoNNetIteration (long unsigned int nloops)
{
  int patt;
  long unsigned int elapsed;
  int iteration_count.186_1;
  int _2;
  int numpats.187_3;
  int numpasses.188_4;
  int _5;
  int _6;
  int learned.189_7;
  long unsigned int _20;

  <bb 2> [0.00%]:
  elapsed_16 = StartStopwatch ();
  goto <bb 8>; [0.00%]

  <bb 3> [0.00%]:
  randomize_wts ();
  zero_changes ();
  iteration_count = 1;
  learned = 0;
  numpasses = 0;
  goto <bb 7>; [0.00%]

  <bb 4> [100.00%]:
  worst_error = 0.0;
  move_wt_changes ();
  do_mid_forward (patt_10);
  do_out_forward ();
  do_back_pass (patt_10);
  iteration_count.186_1 = iteration_count;
  _2 = iteration_count.186_1 + 1;
  iteration_count = _2;
  patt_35 = patt_10 + 1;

  <bb 5> [0.00%]:
  # patt_10 = PHI <0(7), patt_35(4)>
  numpats.187_3 = numpats;
  if (numpats.187_3 > patt_10)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  numpasses.188_4 = numpasses;
  _5 = numpasses.188_4 + 1;
  numpasses = _5;
  _6 = check_out_error ();
  learned = _6;

  <bb 7> [0.00%]:
  learned.189_7 = learned;
  if (learned.189_7 == 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  # nloops_9 = PHI <nloops_17(D)(2), nloops_18(7)>
  nloops_18 = nloops_9 + 18446744073709551615;
  if (nloops_9 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  _20 = StopStopwatch (elapsed_16);
  return _20;

}



;; Function DoNumSort (DoNumSort, funcdef_no=52, decl_uid=4490, cgraph_uid=52, symbol_order=77)

Disambiguating loop 1 with multiple latches
Found latch edge 7 -> 4 using iv structure.
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 16 5 6 7 18 8 9 10 11 12 17 13 14 15
;;
;; Loop 2
;;  header 12, latch 17
;;  depth 1, outer 0
;;  nodes: 12 17
;;
;; Loop 1
;;  header 4, latch 8
;;  depth 1, outer 0
;;  nodes: 4 8 7 6 16 5 18
;;
;; Loop 3
;;  header 16, latch 18
;;  depth 2, outer 1
;;  nodes: 16 18 7 6 5
;; 2 succs { 3 9 }
;; 3 succs { 4 }
;; 4 succs { 16 }
;; 16 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 11 7 }
;; 7 succs { 8 18 }
;; 18 succs { 16 }
;; 8 succs { 4 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 12 }
;; 12 succs { 17 13 }
;; 17 succs { 12 }
;; 13 succs { 14 15 }
;; 14 succs { 15 }
;; 15 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_8 -> { _28 }
iterations_29 -> { iterations_71 }
Incremental SSA update started at block: 12
Number of blocks in CFG: 19
Number of blocks to update: 3 ( 16%)



Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: [0, 65535]
_4: VARYING
_5: [0, +INF]
_6: [0, +INF]
systemerror.0_7: VARYING
_8: [0, +INF]
_9: VARYING
_10: [0, 65535]
_11: VARYING
_12: VARYING
global_min_ticks.2_13: VARYING
_14: VARYING
_16: [0, +INF]
_17: VARYING
_18: [0, 65535]
_19: VARYING
_20: [0, +INF]
_21: [0, +INF]
systemerror.3_22: VARYING
_24: VARYING
_25: [0, 65535]
_26: VARYING
accumtime.5_27: [0, +INF]
_28: [0, +INF]
iterations_29: VARYING
_30: VARYING
_31: VARYING
_32: VARYING
_33: VARYING
_34: VARYING
_36: VARYING
_37: VARYING
_38: VARYING
arraybase_39: VARYING
accumtime_40: VARYING
iterations_41: VARYING
arraybase_51: VARYING
arraybase_57: VARYING
_69: VARYING
accumtime_70: VARYING
iterations_71: VARYING
_78: VARYING


Removing basic block 17
Removing basic block 18
DoNumSort ()
{
  int D.6531;
  int systemerror;
  char * errorcontext;
  double iterations;
  long int accumtime;
  farlong * arraybase;
  struct SortStruct * numsortstruct;
  int _1;
  short unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  int systemerror.0_7;
  long unsigned int _8;
  short unsigned int _9;
  unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int global_min_ticks.2_13;
  short unsigned int _14;
  short unsigned int _16;
  short unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  int systemerror.3_22;
  short unsigned int _24;
  unsigned int _25;
  long unsigned int _26;
  long unsigned int accumtime.5_27;
  long unsigned int _28;
  long unsigned int _30;
  long unsigned int _31;
  short unsigned int _32;
  double _33;
  double _34;
  double _36;
  double _37;
  int _38;
  long unsigned int _69;
  int _78;

  <bb 2> [0.00%]:
  _1 = global_numsortstruct.adjust;
  if (_1 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 3> [0.00%]:
  global_numsortstruct.numarrays = 1;

  <bb 4> [0.00%]:

  <bb 5> [0.00%]:
  _2 = global_numsortstruct.numarrays;
  _3 = (long unsigned int) _2;
  _4 = global_numsortstruct.arraysize;
  _5 = _3 * _4;
  _6 = _5 * 8;
  arraybase_57 = AllocateMemory (_6, &systemerror);
  systemerror.0_7 = systemerror;
  if (systemerror.0_7 != 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  ReportError ("CPU:Numeric Sort", systemerror.0_7);
  FreeMemory (arraybase_57, &systemerror);
  ErrorExit ();

  <bb 7> [0.00%]:
  _9 = global_numsortstruct.numarrays;
  _10 = (unsigned int) _9;
  _11 = global_numsortstruct.arraysize;
  _12 = DoNumSortIteration (arraybase_57, _11, _10);
  global_min_ticks.2_13 = global_min_ticks;
  if (_12 > global_min_ticks.2_13)
    goto <bb 12>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  FreeMemory (arraybase_57, &systemerror);
  _14 = global_numsortstruct.numarrays;
  _16 = _14 + 1;
  global_numsortstruct.numarrays = _16;
  if (_14 > 10000)
    goto <bb 9>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 9> [100.00%]:
  _78 = __printf_chk (1, "CPU:NSORT -- NUMNUMARRAYS hit.\n");
  ErrorExit ();
  goto <bb 4>; [0.00%]

  <bb 10> [0.00%]:
  _17 = global_numsortstruct.numarrays;
  _18 = (long unsigned int) _17;
  _19 = global_numsortstruct.arraysize;
  _20 = _18 * _19;
  _21 = _20 * 8;
  arraybase_51 = AllocateMemory (_21, &systemerror);
  systemerror.3_22 = systemerror;
  if (systemerror.3_22 != 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  ReportError ("CPU:Numeric Sort", systemerror.3_22);
  FreeMemory (arraybase_51, &systemerror);
  ErrorExit ();

  <bb 12> [0.00%]:
  # arraybase_39 = PHI <arraybase_57(7), arraybase_51(10), arraybase_51(11)>

  <bb 13> [0.00%]:
  # accumtime_40 = PHI <0(12), accumtime_70(13)>
  # iterations_41 = PHI <0.0(12), iterations_71(13)>
  _24 = global_numsortstruct.numarrays;
  _25 = (unsigned int) _24;
  _26 = global_numsortstruct.arraysize;
  _69 = DoNumSortIteration (arraybase_39, _26, _25);
  accumtime.5_27 = (long unsigned int) accumtime_40;
  _28 = accumtime.5_27 + _69;
  accumtime_70 = (long int) _28;
  iterations_71 = iterations_41 + 1.0e+0;
  _30 = TicksToSecs (_28);
  _31 = global_numsortstruct.request_secs;
  if (_30 < _31)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [0.00%]:
  # _8 = PHI <_28(13)>
  # iterations_29 = PHI <iterations_71(13)>
  FreeMemory (arraybase_39, &systemerror);
  _32 = global_numsortstruct.numarrays;
  _33 = (double) _32;
  _34 = iterations_29 * _33;
  _36 = TicksToFracSecs (_8);
  _37 = _34 / _36;
  global_numsortstruct.sortspersec = _37;
  _38 = global_numsortstruct.adjust;
  if (_38 == 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:
  global_numsortstruct.adjust = 1;

  <bb 16> [0.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoStringSort (DoStringSort, funcdef_no=57, decl_uid=4508, cgraph_uid=57, symbol_order=82)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 15 12 13 14
;;
;; Loop 2
;;  header 11, latch 15
;;  depth 1, outer 0
;;  nodes: 11 15
;;
;; Loop 1
;;  header 4, latch 7
;;  depth 1, outer 0
;;  nodes: 4 7 6 5
;; 2 succs { 3 8 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 10 7 }
;; 7 succs { 4 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 11 }
;; 11 succs { 15 12 }
;; 15 succs { 11 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

iterations_8 -> { iterations_65 }
_22 -> { _27 }
Incremental SSA update started at block: 11
Number of blocks in CFG: 16
Number of blocks to update: 3 ( 19%)



Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: [0, +INF]
_4: VARYING
_5: [0, 65535]
_6: [0, +INF]
systemerror.14_7: VARYING
iterations_8: VARYING
_9: VARYING
_10: VARYING
_11: [0, 65535]
_12: VARYING
global_min_ticks.16_13: VARYING
_14: VARYING
_15: [0, +INF]
_16: VARYING
_17: [0, +INF]
_18: VARYING
_19: [0, 65535]
_20: [0, +INF]
systemerror.17_21: VARYING
_22: [0, +INF]
_23: VARYING
_24: VARYING
_25: [0, 65535]
accumtime.19_26: [0, +INF]
_27: [0, +INF]
_28: VARYING
_29: VARYING
_31: VARYING
_32: VARYING
_34: VARYING
_35: VARYING
_36: VARYING
arraybase_37: VARYING
accumtime_38: VARYING
iterations_39: VARYING
arraybase_49: VARYING
arraybase_54: VARYING
_63: VARYING
accumtime_64: VARYING
iterations_65: VARYING


Removing basic block 15
DoStringSort ()
{
  int systemerror;
  char * errorcontext;
  double iterations;
  long int accumtime;
  faruchar * arraybase;
  struct SortStruct * strsortstruct;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  short unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  int systemerror.14_7;
  long unsigned int _9;
  short unsigned int _10;
  unsigned int _11;
  long unsigned int _12;
  long unsigned int global_min_ticks.16_13;
  short unsigned int _14;
  short unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  short unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  int systemerror.17_21;
  long unsigned int _22;
  long unsigned int _23;
  short unsigned int _24;
  unsigned int _25;
  long unsigned int accumtime.19_26;
  long unsigned int _27;
  short unsigned int _28;
  double _29;
  long unsigned int _31;
  long unsigned int _32;
  double _34;
  double _35;
  int _36;
  long unsigned int _63;

  <bb 2> [0.00%]:
  _1 = global_strsortstruct.adjust;
  if (_1 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 3> [0.00%]:
  global_strsortstruct.numarrays = 1;

  <bb 4> [0.00%]:
  _2 = global_strsortstruct.arraysize;
  _3 = _2 + 100;
  _4 = global_strsortstruct.numarrays;
  _5 = (long unsigned int) _4;
  _6 = _3 * _5;
  arraybase_54 = AllocateMemory (_6, &systemerror);
  systemerror.14_7 = systemerror;
  if (systemerror.14_7 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  ReportError ("CPU:String Sort", systemerror.14_7);
  ErrorExit ();

  <bb 6> [0.00%]:
  _9 = global_strsortstruct.arraysize;
  _10 = global_strsortstruct.numarrays;
  _11 = (unsigned int) _10;
  _12 = DoStringSortIteration (arraybase_54, _11, _9);
  global_min_ticks.16_13 = global_min_ticks;
  if (_12 > global_min_ticks.16_13)
    goto <bb 10>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  FreeMemory (arraybase_54, &systemerror);
  _14 = global_strsortstruct.numarrays;
  _15 = _14 + 1;
  global_strsortstruct.numarrays = _15;
  goto <bb 4>; [0.00%]

  <bb 8> [0.00%]:
  _16 = global_strsortstruct.arraysize;
  _17 = _16 + 100;
  _18 = global_strsortstruct.numarrays;
  _19 = (long unsigned int) _18;
  _20 = _17 * _19;
  arraybase_49 = AllocateMemory (_20, &systemerror);
  systemerror.17_21 = systemerror;
  if (systemerror.17_21 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  ReportError ("CPU:String Sort", systemerror.17_21);
  ErrorExit ();

  <bb 10> [0.00%]:
  # arraybase_37 = PHI <arraybase_54(6), arraybase_49(8), arraybase_49(9)>

  <bb 11> [0.00%]:
  # accumtime_38 = PHI <0(10), accumtime_64(11)>
  # iterations_39 = PHI <0.0(10), iterations_65(11)>
  _23 = global_strsortstruct.arraysize;
  _24 = global_strsortstruct.numarrays;
  _25 = (unsigned int) _24;
  _63 = DoStringSortIteration (arraybase_37, _25, _23);
  accumtime.19_26 = (long unsigned int) accumtime_38;
  _27 = accumtime.19_26 + _63;
  accumtime_64 = (long int) _27;
  _28 = global_strsortstruct.numarrays;
  _29 = (double) _28;
  iterations_65 = _29 + iterations_39;
  _31 = TicksToSecs (_27);
  _32 = global_strsortstruct.request_secs;
  if (_31 < _32)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [0.00%]:
  # _22 = PHI <_27(11)>
  # iterations_8 = PHI <iterations_65(11)>
  FreeMemory (arraybase_37, &systemerror);
  _34 = TicksToFracSecs (_22);
  _35 = iterations_8 / _34;
  global_strsortstruct.sortspersec = _35;
  _36 = global_strsortstruct.adjust;
  if (_36 == 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  global_strsortstruct.adjust = 1;

  <bb 14> [0.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoBitops (DoBitops, funcdef_no=64, decl_uid=4543, cgraph_uid=64, symbol_order=89)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 19 16 17 18
;;
;; Loop 2
;;  header 15, latch 19
;;  depth 1, outer 0
;;  nodes: 15 19
;;
;; Loop 1
;;  header 6, latch 9
;;  depth 1, outer 0
;;  nodes: 6 9 8 7
;; 2 succs { 3 10 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 14 9 }
;; 9 succs { 6 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 }
;; 15 succs { 19 16 }
;; 19 succs { 15 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

accumtime_20 -> { accumtime_75 }
iterations_24 -> { iterations_76 }
Incremental SSA update started at block: 15
Number of blocks in CFG: 20
Number of blocks to update: 3 ( 15%)



Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: [0, +INF]
systemerror.28_4: VARYING
_6: VARYING
_7: [0, +INF]
systemerror.30_8: VARYING
_10: VARYING
_11: VARYING
_12: VARYING
_13: ~[2147483648, 18446744071562067967]
global_min_ticks.32_14: VARYING
_15: VARYING
_16: [0, +INF]
_17: VARYING
_18: [0, +INF]
systemerror.33_19: VARYING
accumtime_20: [0, +INF]
_21: VARYING
_22: [0, +INF]
systemerror.35_23: VARYING
iterations_24: VARYING
_25: VARYING
_26: VARYING
nbitops.37_27: VARYING
_28: VARYING
_29: VARYING
_30: VARYING
_31: VARYING
_32: VARYING
_33: VARYING
bitarraybase_34: VARYING
bitoparraybase_35: VARYING
accumtime_36: VARYING
iterations_37: VARYING
bitarraybase_49: VARYING
bitoparraybase_53: VARYING
bitarraybase_58: VARYING
bitoparraybase_63: VARYING
ticks_68: VARYING
_74: VARYING
accumtime_75: [0, +INF]
iterations_76: VARYING


Removing basic block 19
DoBitops ()
{
  int ticks;
  int systemerror;
  char * errorcontext;
  double iterations;
  long unsigned int accumtime;
  long unsigned int nbitops;
  farulong * bitoparraybase;
  farulong * bitarraybase;
  struct BitOpStruct * locbitopstruct;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  int systemerror.28_4;
  long unsigned int _6;
  long unsigned int _7;
  int systemerror.30_8;
  long unsigned int _10;
  long int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int global_min_ticks.32_14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  int systemerror.33_19;
  long unsigned int _21;
  long unsigned int _22;
  int systemerror.35_23;
  long unsigned int _25;
  long int _26;
  long unsigned int nbitops.37_27;
  double _28;
  long unsigned int _29;
  long unsigned int _30;
  double _31;
  double _32;
  int _33;
  long unsigned int _74;

  <bb 2> [0.00%]:
  _1 = global_bitopstruct.adjust;
  if (_1 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 3> [0.00%]:
  _2 = global_bitopstruct.bitfieldarraysize;
  _3 = _2 * 8;
  bitarraybase_58 = AllocateMemory (_3, &systemerror);
  systemerror.28_4 = systemerror;
  if (systemerror.28_4 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  ReportError ("CPU:Bitfields", systemerror.28_4);
  ErrorExit ();

  <bb 5> [0.00%]:
  global_bitopstruct.bitoparraysize = 30;

  <bb 6> [0.00%]:
  _6 = global_bitopstruct.bitoparraysize;
  _7 = _6 * 16;
  bitoparraybase_63 = AllocateMemory (_7, &systemerror);
  systemerror.30_8 = systemerror;
  if (systemerror.30_8 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  ReportError ("CPU:Bitfields", systemerror.30_8);
  FreeMemory (bitarraybase_58, &systemerror);
  ErrorExit ();

  <bb 8> [0.00%]:
  _10 = global_bitopstruct.bitoparraysize;
  _11 = (long int) _10;
  _12 = DoBitfieldIteration (bitarraybase_58, bitoparraybase_63, _11, &nbitops);
  ticks_68 = (int) _12;
  _13 = (long unsigned int) ticks_68;
  global_min_ticks.32_14 = global_min_ticks;
  if (_13 > global_min_ticks.32_14)
    goto <bb 14>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  FreeMemory (bitoparraybase_63, &systemerror);
  _15 = global_bitopstruct.bitoparraysize;
  _16 = _15 + 100;
  global_bitopstruct.bitoparraysize = _16;
  goto <bb 6>; [0.00%]

  <bb 10> [0.00%]:
  _17 = global_bitopstruct.bitfieldarraysize;
  _18 = _17 * 8;
  bitarraybase_49 = AllocateMemory (_18, &systemerror);
  systemerror.33_19 = systemerror;
  if (systemerror.33_19 != 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  ReportError ("CPU:Bitfields", systemerror.33_19);
  ErrorExit ();

  <bb 12> [0.00%]:
  _21 = global_bitopstruct.bitoparraysize;
  _22 = _21 * 16;
  bitoparraybase_53 = AllocateMemory (_22, &systemerror);
  systemerror.35_23 = systemerror;
  if (systemerror.35_23 != 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  ReportError ("CPU:Bitfields", systemerror.35_23);
  FreeMemory (bitarraybase_49, &systemerror);
  ErrorExit ();

  <bb 14> [0.00%]:
  # bitarraybase_34 = PHI <bitarraybase_58(8), bitarraybase_49(12), bitarraybase_49(13)>
  # bitoparraybase_35 = PHI <bitoparraybase_63(8), bitoparraybase_53(12), bitoparraybase_53(13)>

  <bb 15> [0.00%]:
  # accumtime_36 = PHI <0(14), accumtime_75(15)>
  # iterations_37 = PHI <0.0(14), iterations_76(15)>
  _25 = global_bitopstruct.bitoparraysize;
  _26 = (long int) _25;
  _74 = DoBitfieldIteration (bitarraybase_34, bitoparraybase_35, _26, &nbitops);
  accumtime_75 = accumtime_36 + _74;
  nbitops.37_27 = nbitops;
  _28 = (double) nbitops.37_27;
  iterations_76 = _28 + iterations_37;
  _29 = TicksToSecs (accumtime_75);
  _30 = global_bitopstruct.request_secs;
  if (_29 < _30)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 16> [0.00%]:
  # accumtime_20 = PHI <accumtime_75(15)>
  # iterations_24 = PHI <iterations_76(15)>
  FreeMemory (bitarraybase_34, &systemerror);
  FreeMemory (bitoparraybase_35, &systemerror);
  _31 = TicksToFracSecs (accumtime_20);
  _32 = iterations_24 / _31;
  global_bitopstruct.bitopspersec = _32;
  _33 = global_bitopstruct.adjust;
  if (_33 == 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  global_bitopstruct.adjust = 1;

  <bb 18> [0.00%]:
  nbitops ={v} {CLOBBER};
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoEmFloat (DoEmFloat, funcdef_no=68, decl_uid=4565, cgraph_uid=68, symbol_order=93)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 21 18 19 20
;;
;; Loop 2
;;  header 17, latch 21
;;  depth 1, outer 0
;;  nodes: 17 21
;;
;; Loop 1
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12 10
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 14 }
;; 9 succs { 13 }
;; 10 succs { 11 12 }
;; 11 succs { 14 }
;; 12 succs { 13 }
;; 13 succs { 10 14 }
;; 14 succs { 15 16 }
;; 15 succs { 16 }
;; 16 succs { 17 }
;; 17 succs { 21 18 }
;; 21 succs { 17 }
;; 18 succs { 19 20 }
;; 19 succs { 20 }
;; 20 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

loops_4 -> { loops_30 }
accumtime_8 -> { accumtime_73 }
iterations_12 -> { iterations_74 }
Incremental SSA update started at block: 8
Number of blocks in CFG: 22
Number of blocks to update: 7 ( 32%)



Value ranges after Early VRP:

_1: VARYING
_2: [0, +INF]
systemerror.50_3: VARYING
loops_4: [0, 499999]  EQUIVALENCES: { loops_30 } (1 elements)
_5: VARYING
_6: [0, +INF]
systemerror.52_7: VARYING
accumtime_8: [0, +INF]
_9: VARYING
_10: [0, +INF]
systemerror.54_11: VARYING
iterations_12: VARYING
_13: VARYING
_14: VARYING
_15: VARYING
global_min_ticks.56_16: VARYING
_17: VARYING
_18: VARYING
_19: VARYING
_20: VARYING
_21: VARYING
_22: VARYING
_23: VARYING
_24: VARYING
_25: VARYING
_26: VARYING
_27: VARYING
accumtime_28: VARYING
iterations_29: VARYING
loops_30: VARYING
abase_43: VARYING
bbase_47: VARYING
cbase_52: VARYING
tickcount_61: VARYING
loops_62: [0, 999998]
_72: VARYING
accumtime_73: [0, +INF]
iterations_74: VARYING
_83: VARYING


Removing basic block 21
DoEmFloat ()
{
  int D.6536;
  long unsigned int loops;
  int systemerror;
  char * errorcontext;
  long unsigned int tickcount;
  double iterations;
  long unsigned int accumtime;
  struct InternalFPF * cbase;
  struct InternalFPF * bbase;
  struct InternalFPF * abase;
  struct EmFloatStruct * locemfloatstruct;
  long unsigned int _1;
  long unsigned int _2;
  int systemerror.50_3;
  long unsigned int _5;
  long unsigned int _6;
  int systemerror.52_7;
  long unsigned int _9;
  long unsigned int _10;
  int systemerror.54_11;
  long unsigned int _13;
  int _14;
  long unsigned int _15;
  long unsigned int global_min_ticks.56_16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  double _23;
  double _24;
  double _25;
  double _26;
  int _27;
  long unsigned int _72;
  int _83;

  <bb 2> [0.00%]:
  _1 = global_emfloatstruct.arraysize;
  _2 = _1 * 12;
  abase_43 = AllocateMemory (_2, &systemerror);
  systemerror.50_3 = systemerror;
  if (systemerror.50_3 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  ReportError ("CPU:Floating Emulation", systemerror.50_3);
  ErrorExit ();

  <bb 4> [0.00%]:
  _5 = global_emfloatstruct.arraysize;
  _6 = _5 * 12;
  bbase_47 = AllocateMemory (_6, &systemerror);
  systemerror.52_7 = systemerror;
  if (systemerror.52_7 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  ReportError ("CPU:Floating Emulation", systemerror.52_7);
  FreeMemory (abase_43, &systemerror);
  ErrorExit ();

  <bb 6> [0.00%]:
  _9 = global_emfloatstruct.arraysize;
  _10 = _9 * 12;
  cbase_52 = AllocateMemory (_10, &systemerror);
  systemerror.54_11 = systemerror;
  if (systemerror.54_11 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  ReportError ("CPU:Floating Emulation", systemerror.54_11);
  FreeMemory (abase_43, &systemerror);
  FreeMemory (bbase_47, &systemerror);
  ErrorExit ();

  <bb 8> [0.00%]:
  _13 = global_emfloatstruct.arraysize;
  SetupCPUEmFloatArrays (abase_43, bbase_47, cbase_52, _13);
  _14 = global_emfloatstruct.adjust;
  if (_14 == 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 9> [0.00%]:
  global_emfloatstruct.loops = 0;
  goto <bb 13>; [0.00%]

  <bb 10> [0.00%]:
  _15 = global_emfloatstruct.arraysize;
  tickcount_61 = DoEmFloatIteration (abase_43, bbase_47, cbase_52, _15, loops_30);
  global_min_ticks.56_16 = global_min_ticks;
  if (global_min_ticks.56_16 < tickcount_61)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  # loops_4 = PHI <loops_30(10)>
  global_emfloatstruct.loops = loops_4;
  goto <bb 14>; [0.00%]

  <bb 12> [0.00%]:
  loops_62 = loops_30 * 2;

  <bb 13> [0.00%]:
  # loops_30 = PHI <1(9), loops_62(12)>
  if (loops_30 <= 499999)
    goto <bb 10>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [0.00%]:
  _17 = global_emfloatstruct.loops;
  if (_17 == 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [100.00%]:
  _83 = __printf_chk (1, "CPU:EMFPU -- CMPUEMFLOATLOOPMAX limit hit\n");
  FreeMemory (abase_43, &systemerror);
  FreeMemory (bbase_47, &systemerror);
  FreeMemory (cbase_52, &systemerror);
  ErrorExit ();

  <bb 16> [0.00%]:

  <bb 17> [0.00%]:
  # accumtime_28 = PHI <0(16), accumtime_73(17)>
  # iterations_29 = PHI <0.0(16), iterations_74(17)>
  _18 = global_emfloatstruct.loops;
  _19 = global_emfloatstruct.arraysize;
  _72 = DoEmFloatIteration (abase_43, bbase_47, cbase_52, _19, _18);
  accumtime_73 = accumtime_28 + _72;
  iterations_74 = iterations_29 + 1.0e+0;
  _20 = TicksToSecs (accumtime_73);
  _21 = global_emfloatstruct.request_secs;
  if (_20 < _21)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 18> [0.00%]:
  # accumtime_8 = PHI <accumtime_73(17)>
  # iterations_12 = PHI <iterations_74(17)>
  FreeMemory (abase_43, &systemerror);
  FreeMemory (bbase_47, &systemerror);
  FreeMemory (cbase_52, &systemerror);
  _22 = global_emfloatstruct.loops;
  _23 = (double) _22;
  _24 = iterations_12 * _23;
  _25 = TicksToFracSecs (accumtime_8);
  _26 = _24 / _25;
  global_emfloatstruct.emflops = _26;
  _27 = global_emfloatstruct.adjust;
  if (_27 == 0)
    goto <bb 19>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 19> [0.00%]:
  global_emfloatstruct.adjust = 1;

  <bb 20> [0.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoFourier (DoFourier, funcdef_no=69, decl_uid=4578, cgraph_uid=69, symbol_order=94)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 19 16 17 18
;;
;; Loop 2
;;  header 15, latch 19
;;  depth 1, outer 0
;;  nodes: 15 19
;;
;; Loop 1
;;  header 4, latch 9
;;  depth 1, outer 0
;;  nodes: 4 9 8 6 7 5
;; 2 succs { 3 10 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 14 9 }
;; 9 succs { 4 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 }
;; 15 succs { 19 16 }
;; 19 succs { 15 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

accumtime_18 -> { accumtime_74 }
iterations_22 -> { iterations_75 }
Incremental SSA update started at block: 15
Number of blocks in CFG: 20
Number of blocks to update: 3 ( 15%)



Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: [0, +INF]
systemerror.57_4: VARYING
_6: VARYING
_7: [0, +INF]
systemerror.59_8: VARYING
_10: VARYING
_11: VARYING
global_min_ticks.61_12: VARYING
_13: VARYING
_14: [0, +INF]
_15: VARYING
_16: [0, +INF]
systemerror.62_17: VARYING
accumtime_18: [0, +INF]
_19: VARYING
_20: [0, +INF]
systemerror.64_21: VARYING
iterations_22: VARYING
_23: VARYING
_24: VARYING
_25: VARYING
_26: VARYING
_27: VARYING
_28: VARYING
_29: VARYING
_30: VARYING
_31: VARYING
_32: VARYING
abase_33: VARYING
bbase_34: VARYING
accumtime_35: VARYING
iterations_36: VARYING
abase_48: VARYING
bbase_52: VARYING
abase_58: VARYING
bbase_62: VARYING
_73: VARYING
accumtime_74: [0, +INF]
iterations_75: VARYING


Removing basic block 19
DoFourier ()
{
  int systemerror;
  char * errorcontext;
  double iterations;
  long unsigned int accumtime;
  fardouble * bbase;
  fardouble * abase;
  struct FourierStruct * locfourierstruct;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  int systemerror.57_4;
  long unsigned int _6;
  long unsigned int _7;
  int systemerror.59_8;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int global_min_ticks.61_12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  int systemerror.62_17;
  long unsigned int _19;
  long unsigned int _20;
  int systemerror.64_21;
  long unsigned int _23;
  long unsigned int _24;
  double _25;
  double _26;
  double _27;
  long unsigned int _28;
  long unsigned int _29;
  double _30;
  double _31;
  int _32;
  long unsigned int _73;

  <bb 2> [0.00%]:
  _1 = global_fourierstruct.adjust;
  if (_1 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 3> [0.00%]:
  global_fourierstruct.arraysize = 100;

  <bb 4> [0.00%]:
  _2 = global_fourierstruct.arraysize;
  _3 = _2 * 8;
  abase_58 = AllocateMemory (_3, &systemerror);
  systemerror.57_4 = systemerror;
  if (systemerror.57_4 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  ReportError ("FPU:Transcendental", systemerror.57_4);
  ErrorExit ();

  <bb 6> [0.00%]:
  _6 = global_fourierstruct.arraysize;
  _7 = _6 * 8;
  bbase_62 = AllocateMemory (_7, &systemerror);
  systemerror.59_8 = systemerror;
  if (systemerror.59_8 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  ReportError ("FPU:Transcendental", systemerror.59_8);
  FreeMemory (abase_58, &systemerror);
  ErrorExit ();

  <bb 8> [0.00%]:
  _10 = global_fourierstruct.arraysize;
  _11 = DoFPUTransIteration (abase_58, bbase_62, _10);
  global_min_ticks.61_12 = global_min_ticks;
  if (_11 > global_min_ticks.61_12)
    goto <bb 14>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  FreeMemory (abase_58, &systemerror);
  FreeMemory (bbase_62, &systemerror);
  _13 = global_fourierstruct.arraysize;
  _14 = _13 + 50;
  global_fourierstruct.arraysize = _14;
  goto <bb 4>; [0.00%]

  <bb 10> [0.00%]:
  _15 = global_fourierstruct.arraysize;
  _16 = _15 * 8;
  abase_48 = AllocateMemory (_16, &systemerror);
  systemerror.62_17 = systemerror;
  if (systemerror.62_17 != 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  ReportError ("FPU:Transcendental", systemerror.62_17);
  ErrorExit ();

  <bb 12> [0.00%]:
  _19 = global_fourierstruct.arraysize;
  _20 = _19 * 8;
  bbase_52 = AllocateMemory (_20, &systemerror);
  systemerror.64_21 = systemerror;
  if (systemerror.64_21 != 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  ReportError ("FPU:Transcendental", systemerror.64_21);
  FreeMemory (abase_48, &systemerror);
  ErrorExit ();

  <bb 14> [0.00%]:
  # abase_33 = PHI <abase_58(8), abase_48(12), abase_48(13)>
  # bbase_34 = PHI <bbase_62(8), bbase_52(12), bbase_52(13)>

  <bb 15> [0.00%]:
  # accumtime_35 = PHI <0(14), accumtime_74(15)>
  # iterations_36 = PHI <0.0(14), iterations_75(15)>
  _23 = global_fourierstruct.arraysize;
  _73 = DoFPUTransIteration (abase_33, bbase_34, _23);
  accumtime_74 = accumtime_35 + _73;
  _24 = global_fourierstruct.arraysize;
  _25 = (double) _24;
  _26 = _25 * 2.0e+0;
  _27 = _26 - 1.0e+0;
  iterations_75 = _27 + iterations_36;
  _28 = TicksToSecs (accumtime_74);
  _29 = global_fourierstruct.request_secs;
  if (_28 < _29)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 16> [0.00%]:
  # accumtime_18 = PHI <accumtime_74(15)>
  # iterations_22 = PHI <iterations_75(15)>
  FreeMemory (abase_33, &systemerror);
  FreeMemory (bbase_34, &systemerror);
  _30 = TicksToFracSecs (accumtime_18);
  _31 = iterations_22 / _30;
  global_fourierstruct.fflops = _31;
  _32 = global_fourierstruct.adjust;
  if (_32 == 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  global_fourierstruct.adjust = 1;

  <bb 18> [0.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoAssign (DoAssign, funcdef_no=73, decl_uid=4600, cgraph_uid=73, symbol_order=98)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 15 12 13 14
;;
;; Loop 2
;;  header 11, latch 15
;;  depth 1, outer 0
;;  nodes: 11 15
;;
;; Loop 1
;;  header 4, latch 7
;;  depth 1, outer 0
;;  nodes: 4 7 6 5
;; 2 succs { 3 8 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 10 7 }
;; 7 succs { 4 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 11 }
;; 11 succs { 15 12 }
;; 15 succs { 11 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

iterations_5 -> { iterations_54 }
accumtime_14 -> { accumtime_53 }
Incremental SSA update started at block: 11
Number of blocks in CFG: 16
Number of blocks to update: 3 ( 19%)



Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: [0, +INF]
systemerror.66_4: VARYING
iterations_5: VARYING
_6: VARYING
_7: VARYING
global_min_ticks.68_8: VARYING
_9: VARYING
_10: [0, +INF]
_11: VARYING
_12: [0, +INF]
systemerror.69_13: VARYING
accumtime_14: [0, +INF]
_15: VARYING
_16: VARYING
_17: VARYING
_18: VARYING
_19: VARYING
_20: VARYING
_21: VARYING
_22: VARYING
_23: VARYING
arraybase_24: VARYING
accumtime_25: VARYING
iterations_26: VARYING
arraybase_36: VARYING
arraybase_42: VARYING
_52: VARYING
accumtime_53: [0, +INF]
iterations_54: VARYING


Removing basic block 15
DoAssign ()
{
  double iterations;
  long unsigned int accumtime;
  int systemerror;
  char * errorcontext;
  farlong * arraybase;
  struct AssignStruct * locassignstruct;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  int systemerror.66_4;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int global_min_ticks.68_8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  int systemerror.69_13;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  double _19;
  double _20;
  double _21;
  double _22;
  int _23;
  long unsigned int _52;

  <bb 2> [0.00%]:
  _1 = global_assignstruct.adjust;
  if (_1 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 3> [0.00%]:
  global_assignstruct.numarrays = 1;

  <bb 4> [0.00%]:
  _2 = global_assignstruct.numarrays;
  _3 = _2 * 81608;
  arraybase_42 = AllocateMemory (_3, &systemerror);
  systemerror.66_4 = systemerror;
  if (systemerror.66_4 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  ReportError ("CPU:Assignment", systemerror.66_4);
  FreeMemory (arraybase_42, &systemerror);
  ErrorExit ();

  <bb 6> [0.00%]:
  _6 = global_assignstruct.numarrays;
  _7 = DoAssignIteration (arraybase_42, _6);
  global_min_ticks.68_8 = global_min_ticks;
  if (_7 > global_min_ticks.68_8)
    goto <bb 10>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  FreeMemory (arraybase_42, &systemerror);
  _9 = global_assignstruct.numarrays;
  _10 = _9 + 1;
  global_assignstruct.numarrays = _10;
  goto <bb 4>; [0.00%]

  <bb 8> [0.00%]:
  _11 = global_assignstruct.numarrays;
  _12 = _11 * 81608;
  arraybase_36 = AllocateMemory (_12, &systemerror);
  systemerror.69_13 = systemerror;
  if (systemerror.69_13 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  ReportError ("CPU:Assignment", systemerror.69_13);
  FreeMemory (arraybase_36, &systemerror);
  ErrorExit ();

  <bb 10> [0.00%]:
  # arraybase_24 = PHI <arraybase_42(6), arraybase_36(8), arraybase_36(9)>

  <bb 11> [0.00%]:
  # accumtime_25 = PHI <0(10), accumtime_53(11)>
  # iterations_26 = PHI <0.0(10), iterations_54(11)>
  _15 = global_assignstruct.numarrays;
  _52 = DoAssignIteration (arraybase_24, _15);
  accumtime_53 = accumtime_25 + _52;
  iterations_54 = iterations_26 + 1.0e+0;
  _16 = TicksToSecs (accumtime_53);
  _17 = global_assignstruct.request_secs;
  if (_16 < _17)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [0.00%]:
  # accumtime_14 = PHI <accumtime_53(11)>
  # iterations_5 = PHI <iterations_54(11)>
  FreeMemory (arraybase_24, &systemerror);
  _18 = global_assignstruct.numarrays;
  _19 = (double) _18;
  _20 = iterations_5 * _19;
  _21 = TicksToFracSecs (accumtime_14);
  _22 = _20 / _21;
  global_assignstruct.iterspersec = _22;
  _23 = global_assignstruct.adjust;
  if (_23 == 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  global_assignstruct.adjust = 1;

  <bb 14> [0.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoIDEA (DoIDEA, funcdef_no=82, decl_uid=4624, cgraph_uid=82, symbol_order=107)

Created preheader block for loop 2
;; 6 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 26 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 27 23 24 25
;;
;; Loop 5
;;  header 22, latch 27
;;  depth 1, outer 0
;;  nodes: 22 27
;;
;; Loop 4
;;  header 20, latch 19
;;  depth 1, outer 0
;;  nodes: 20 19 18
;;
;; Loop 3
;;  header 15, latch 14
;;  depth 1, outer 0
;;  nodes: 15 14
;;
;; Loop 2
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 26 }
;; 26 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 14 16 }
;; 16 succs { 17 21 }
;; 17 succs { 20 }
;; 18 succs { 21 19 }
;; 19 succs { 20 }
;; 20 succs { 18 21 }
;; 21 succs { 22 }
;; 22 succs { 27 23 }
;; 27 succs { 22 }
;; 23 succs { 24 25 }
;; 24 succs { 25 }
;; 25 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

accumtime_5 -> { accumtime_81 }
iterations_8 -> { iterations_82 }
Incremental SSA update started at block: 22
Number of blocks in CFG: 28
Number of blocks to update: 3 ( 11%)



Value ranges after Early VRP:

_1: VARYING
_2: [0, +INF]
_3: VARYING
systemerror.102_4: VARYING
accumtime_5: [0, +INF]
_6: VARYING
systemerror.104_7: VARYING
iterations_8: VARYING
_9: VARYING
systemerror.106_10: VARYING
_12: VARYING
_14: VARYING
_15: [0, +INF]
_16: [0, 2147483647]
_17: VARYING
_18: VARYING
_20: VARYING
_21: VARYING
global_min_ticks.108_22: VARYING
_23: VARYING
_24: [0, +INF]
_25: VARYING
_26: VARYING
_27: VARYING
_28: VARYING
_29: VARYING
_30: VARYING
_31: VARYING
_32: VARYING
_33: VARYING
_34: VARYING
i_35: [0, 8]
i_36: [0, 52]
i_37: [0, +INF]
accumtime_38: VARYING
iterations_39: VARYING
plain1_59: VARYING
crypt1_63: VARYING
plain2_68: VARYING
_80: VARYING
accumtime_81: [0, +INF]
iterations_82: VARYING
i_96: [1, +INF(OVF)]
i_98: [1, 52]
i_101: [1, 8]


Removing basic block 26
Removing basic block 27
DoIDEA ()
{
  faruchar * plain2;
  faruchar * crypt1;
  faruchar * plain1;
  int systemerror;
  char * errorcontext;
  double iterations;
  long unsigned int accumtime;
  u16 userkey[8];
  u16 DK[52];
  u16 Z[52];
  int i;
  struct IDEAStruct * locideastruct;
  unsigned int _1;
  short unsigned int _2;
  long unsigned int _3;
  int systemerror.102_4;
  long unsigned int _6;
  int systemerror.104_7;
  long unsigned int _9;
  int systemerror.106_10;
  unsigned int _12;
  faruchar * _14;
  unsigned char _15;
  long unsigned int _16;
  long unsigned int _17;
  int _18;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int global_min_ticks.108_22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  double _29;
  long unsigned int _30;
  long unsigned int _31;
  double _32;
  double _33;
  int _34;
  long unsigned int _80;

  <bb 2> [0.00%]:
  randnum (3);
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = abs_randwc (60000);
  _2 = (short unsigned int) _1;
  userkey[i_35] = _2;
  i_101 = i_35 + 1;

  <bb 4> [0.00%]:
  # i_35 = PHI <0(2), i_101(3)>
  if (i_35 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  Z[i_36] = 0;
  i_98 = i_36 + 1;

  <bb 6> [0.00%]:
  # i_36 = PHI <0(4), i_98(5)>
  if (i_36 <= 51)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  en_key_idea (&userkey, &Z);
  de_key_idea (&Z, &DK);
  _3 = global_ideastruct.arraysize;
  plain1_59 = AllocateMemory (_3, &systemerror);
  systemerror.102_4 = systemerror;
  if (systemerror.102_4 != 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  ReportError ("CPU:IDEA", systemerror.102_4);
  ErrorExit ();

  <bb 9> [0.00%]:
  _6 = global_ideastruct.arraysize;
  crypt1_63 = AllocateMemory (_6, &systemerror);
  systemerror.104_7 = systemerror;
  if (systemerror.104_7 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  ReportError ("CPU:IDEA", systemerror.104_7);
  FreeMemory (plain1_59, &systemerror);
  ErrorExit ();

  <bb 11> [0.00%]:
  _9 = global_ideastruct.arraysize;
  plain2_68 = AllocateMemory (_9, &systemerror);
  systemerror.106_10 = systemerror;
  if (systemerror.106_10 != 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  ReportError ("CPU:IDEA", systemerror.106_10);
  FreeMemory (plain1_59, &systemerror);
  FreeMemory (crypt1_63, &systemerror);
  ErrorExit ();

  <bb 13> [0.00%]:
  goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  _12 = abs_randwc (255);
  _14 = plain1_59 + _16;
  _15 = (unsigned char) _12;
  *_14 = _15;
  i_96 = i_37 + 1;

  <bb 15> [0.00%]:
  # i_37 = PHI <0(13), i_96(14)>
  _16 = (long unsigned int) i_37;
  _17 = global_ideastruct.arraysize;
  if (_16 < _17)
    goto <bb 14>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 16> [0.00%]:
  _18 = global_ideastruct.adjust;
  if (_18 == 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 17> [0.00%]:
  global_ideastruct.loops = 100;
  goto <bb 20>; [0.00%]

  <bb 18> [0.00%]:
  _20 = global_ideastruct.arraysize;
  _21 = DoIDEAIteration (plain1_59, crypt1_63, plain2_68, _20, _25, &Z, &DK);
  global_min_ticks.108_22 = global_min_ticks;
  if (_21 > global_min_ticks.108_22)
    goto <bb 21>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 19> [0.00%]:
  _23 = global_ideastruct.loops;
  _24 = _23 + 10;
  global_ideastruct.loops = _24;

  <bb 20> [0.00%]:
  _25 = global_ideastruct.loops;
  if (_25 <= 499999)
    goto <bb 18>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 21> [0.00%]:

  <bb 22> [0.00%]:
  # accumtime_38 = PHI <0(21), accumtime_81(22)>
  # iterations_39 = PHI <0.0(21), iterations_82(22)>
  _26 = global_ideastruct.loops;
  _27 = global_ideastruct.arraysize;
  _80 = DoIDEAIteration (plain1_59, crypt1_63, plain2_68, _27, _26, &Z, &DK);
  accumtime_81 = accumtime_38 + _80;
  _28 = global_ideastruct.loops;
  _29 = (double) _28;
  iterations_82 = _29 + iterations_39;
  _30 = TicksToSecs (accumtime_81);
  _31 = global_ideastruct.request_secs;
  if (_30 < _31)
    goto <bb 22>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 23> [0.00%]:
  # accumtime_5 = PHI <accumtime_81(22)>
  # iterations_8 = PHI <iterations_82(22)>
  FreeMemory (plain1_59, &systemerror);
  FreeMemory (crypt1_63, &systemerror);
  FreeMemory (plain2_68, &systemerror);
  _32 = TicksToFracSecs (accumtime_5);
  _33 = iterations_8 / _32;
  global_ideastruct.iterspersec = _33;
  _34 = global_ideastruct.adjust;
  if (_34 == 0)
    goto <bb 24>; [0.00%]
  else
    goto <bb 25>; [0.00%]

  <bb 24> [0.00%]:
  global_ideastruct.adjust = 1;

  <bb 25> [0.00%]:
  Z ={v} {CLOBBER};
  DK ={v} {CLOBBER};
  userkey ={v} {CLOBBER};
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoHuffman (DoHuffman, funcdef_no=89, decl_uid=4657, cgraph_uid=89, symbol_order=114)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 20 17 18 19
;;
;; Loop 2
;;  header 16, latch 20
;;  depth 1, outer 0
;;  nodes: 16 20
;;
;; Loop 1
;;  header 14, latch 13
;;  depth 1, outer 0
;;  nodes: 14 13 12
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 11 15 }
;; 11 succs { 14 }
;; 12 succs { 15 13 }
;; 13 succs { 14 }
;; 14 succs { 12 15 }
;; 15 succs { 16 }
;; 16 succs { 20 17 }
;; 20 succs { 16 }
;; 17 succs { 18 19 }
;; 18 succs { 19 }
;; 19 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

accumtime_3 -> { accumtime_86 }
iterations_6 -> { iterations_87 }
Incremental SSA update started at block: 16
Number of blocks in CFG: 21
Number of blocks to update: 3 ( 14%)



Value ranges after Early VRP:

_1: VARYING
systemerror.143_2: VARYING
accumtime_3: [0, +INF]
_4: VARYING
systemerror.145_5: VARYING
iterations_6: VARYING
_7: VARYING
systemerror.147_8: VARYING
_10: VARYING
systemerror.149_11: VARYING
_13: VARYING
_14: [0, +INF]
_15: VARYING
_16: [0, +INF]
_17: VARYING
_18: VARYING
_19: VARYING
_20: VARYING
hufftree.151_21: VARYING
_23: VARYING
_24: VARYING
global_min_ticks.152_25: VARYING
_26: VARYING
_27: [0, +INF]
_28: VARYING
hufftree.153_29: VARYING
_30: VARYING
_31: VARYING
_32: VARYING
_33: VARYING
_34: VARYING
_35: VARYING
hufftree.154_36: VARYING
_37: VARYING
_38: VARYING
_39: VARYING
accumtime_40: VARYING
iterations_41: VARYING
plaintext_54: VARYING
comparray_58: VARYING
decomparray_63: VARYING
_85: VARYING
accumtime_86: [0, +INF]
iterations_87: VARYING


Removing basic block 20
DoHuffman ()
{
  farchar * plaintext;
  farchar * decomparray;
  farchar * comparray;
  double iterations;
  long unsigned int accumtime;
  int systemerror;
  char * errorcontext;
  struct HuffStruct * lochuffstruct;
  long unsigned int _1;
  int systemerror.143_2;
  long unsigned int _4;
  int systemerror.145_5;
  long unsigned int _7;
  int systemerror.147_8;
  farvoid * _10;
  int systemerror.149_11;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  sizetype _16;
  farchar * _17;
  long unsigned int _18;
  long int _19;
  int _20;
  struct huff_node * hufftree.151_21;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int global_min_ticks.152_25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  struct huff_node * hufftree.153_29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  double _33;
  long unsigned int _34;
  long unsigned int _35;
  struct huff_node * hufftree.154_36;
  double _37;
  double _38;
  int _39;
  long unsigned int _85;

  <bb 2> [0.00%]:
  _1 = global_huffstruct.arraysize;
  plaintext_54 = AllocateMemory (_1, &systemerror);
  systemerror.143_2 = systemerror;
  if (systemerror.143_2 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  ReportError ("CPU:Huffman", systemerror.143_2);
  ErrorExit ();

  <bb 4> [0.00%]:
  _4 = global_huffstruct.arraysize;
  comparray_58 = AllocateMemory (_4, &systemerror);
  systemerror.145_5 = systemerror;
  if (systemerror.145_5 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  ReportError ("CPU:Huffman", systemerror.145_5);
  FreeMemory (plaintext_54, &systemerror);
  ErrorExit ();

  <bb 6> [0.00%]:
  _7 = global_huffstruct.arraysize;
  decomparray_63 = AllocateMemory (_7, &systemerror);
  systemerror.147_8 = systemerror;
  if (systemerror.147_8 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  ReportError ("CPU:Huffman", systemerror.147_8);
  FreeMemory (plaintext_54, &systemerror);
  FreeMemory (comparray_58, &systemerror);
  ErrorExit ();

  <bb 8> [0.00%]:
  _10 = AllocateMemory (10240, &systemerror);
  hufftree = _10;
  systemerror.149_11 = systemerror;
  if (systemerror.149_11 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  ReportError ("CPU:Huffman", systemerror.149_11);
  FreeMemory (plaintext_54, &systemerror);
  FreeMemory (comparray_58, &systemerror);
  FreeMemory (decomparray_63, &systemerror);
  ErrorExit ();

  <bb 10> [0.00%]:
  randnum (13);
  _13 = global_huffstruct.arraysize;
  _14 = _13 + 18446744073709551615;
  create_text_block (plaintext_54, _14, 500);
  _15 = global_huffstruct.arraysize;
  _16 = _15 + 18446744073709551615;
  _17 = plaintext_54 + _16;
  *_17 = 0;
  _18 = global_huffstruct.arraysize;
  _19 = (long int) _18;
  plaintextlen = _19;
  _20 = global_huffstruct.adjust;
  if (_20 == 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 11> [0.00%]:
  global_huffstruct.loops = 100;
  goto <bb 14>; [0.00%]

  <bb 12> [0.00%]:
  hufftree.151_21 = hufftree;
  _23 = global_huffstruct.arraysize;
  _24 = DoHuffIteration (plaintext_54, comparray_58, decomparray_63, _23, _28, hufftree.151_21);
  global_min_ticks.152_25 = global_min_ticks;
  if (_24 > global_min_ticks.152_25)
    goto <bb 15>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:
  _26 = global_huffstruct.loops;
  _27 = _26 + 10;
  global_huffstruct.loops = _27;

  <bb 14> [0.00%]:
  _28 = global_huffstruct.loops;
  if (_28 <= 499999)
    goto <bb 12>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 15> [0.00%]:

  <bb 16> [0.00%]:
  # accumtime_40 = PHI <0(15), accumtime_86(16)>
  # iterations_41 = PHI <0.0(15), iterations_87(16)>
  hufftree.153_29 = hufftree;
  _30 = global_huffstruct.loops;
  _31 = global_huffstruct.arraysize;
  _85 = DoHuffIteration (plaintext_54, comparray_58, decomparray_63, _31, _30, hufftree.153_29);
  accumtime_86 = accumtime_40 + _85;
  _32 = global_huffstruct.loops;
  _33 = (double) _32;
  iterations_87 = _33 + iterations_41;
  _34 = TicksToSecs (accumtime_86);
  _35 = global_huffstruct.request_secs;
  if (_34 < _35)
    goto <bb 16>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 17> [0.00%]:
  # accumtime_3 = PHI <accumtime_86(16)>
  # iterations_6 = PHI <iterations_87(16)>
  FreeMemory (plaintext_54, &systemerror);
  FreeMemory (comparray_58, &systemerror);
  FreeMemory (decomparray_63, &systemerror);
  hufftree.154_36 = hufftree;
  FreeMemory (hufftree.154_36, &systemerror);
  _37 = TicksToFracSecs (accumtime_3);
  _38 = iterations_6 / _37;
  global_huffstruct.iterspersec = _38;
  _39 = global_huffstruct.adjust;
  if (_39 == 0)
    goto <bb 18>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 18> [0.00%]:
  global_huffstruct.adjust = 1;

  <bb 19> [0.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoNNET (DoNNET, funcdef_no=95, decl_uid=4701, cgraph_uid=95, symbol_order=120)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 14 11 12 13
;;
;; Loop 2
;;  header 10, latch 14
;;  depth 1, outer 0
;;  nodes: 10 14
;;
;; Loop 1
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7 6
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 9 }
;; 5 succs { 8 }
;; 6 succs { 9 7 }
;; 7 succs { 8 }
;; 8 succs { 6 9 }
;; 9 succs { 10 }
;; 10 succs { 14 11 }
;; 14 succs { 10 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

accumtime_24 -> { accumtime_39 }
iterations_25 -> { iterations_40 }
Incremental SSA update started at block: 10
Number of blocks in CFG: 15
Number of blocks to update: 3 ( 20%)



Value ranges after Early VRP:

_1: VARYING
_2: VARYING
_3: VARYING
_4: VARYING
global_min_ticks.167_5: VARYING
_6: VARYING
_7: [0, +INF]
_8: VARYING
_9: VARYING
_10: VARYING
_11: VARYING
_12: VARYING
_13: VARYING
_14: VARYING
_15: VARYING
_16: VARYING
accumtime_17: VARYING
iterations_18: VARYING
accumtime_24: [0, +INF]
iterations_25: VARYING
_38: VARYING
accumtime_39: [0, +INF]
iterations_40: VARYING


Removing basic block 14
DoNNET ()
{
  double iterations;
  long unsigned int accumtime;
  char * errorcontext;
  struct NNetStruct * locnnetstruct;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int global_min_ticks.167_5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  double _11;
  long unsigned int _12;
  long unsigned int _13;
  double _14;
  double _15;
  int _16;
  long unsigned int _38;

  <bb 2> [0.00%]:
  randnum (3);
  _1 = read_data_file ();
  if (_1 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  ErrorExit ();

  <bb 4> [0.00%]:
  _2 = global_nnetstruct.adjust;
  if (_2 == 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 5> [0.00%]:
  global_nnetstruct.loops = 1;
  goto <bb 8>; [0.00%]

  <bb 6> [0.00%]:
  randnum (3);
  _3 = global_nnetstruct.loops;
  _4 = DoNNetIteration (_3);
  global_min_ticks.167_5 = global_min_ticks;
  if (_4 > global_min_ticks.167_5)
    goto <bb 9>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  _6 = global_nnetstruct.loops;
  _7 = _6 + 1;
  global_nnetstruct.loops = _7;

  <bb 8> [0.00%]:
  _8 = global_nnetstruct.loops;
  if (_8 <= 499999)
    goto <bb 6>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:

  <bb 10> [0.00%]:
  # accumtime_17 = PHI <0(9), accumtime_39(10)>
  # iterations_18 = PHI <0.0(9), iterations_40(10)>
  randnum (3);
  _9 = global_nnetstruct.loops;
  _38 = DoNNetIteration (_9);
  accumtime_39 = accumtime_17 + _38;
  _10 = global_nnetstruct.loops;
  _11 = (double) _10;
  iterations_40 = _11 + iterations_18;
  _12 = TicksToSecs (accumtime_39);
  _13 = global_nnetstruct.request_secs;
  if (_12 < _13)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  # accumtime_24 = PHI <accumtime_39(10)>
  # iterations_25 = PHI <iterations_40(10)>
  _14 = TicksToFracSecs (accumtime_24);
  _15 = iterations_25 / _14;
  global_nnetstruct.iterspersec = _15;
  _16 = global_nnetstruct.adjust;
  if (_16 == 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  global_nnetstruct.adjust = 1;

  <bb 13> [0.00%]:
  return;

}



;; Function DoLU (DoLU, funcdef_no=111, decl_uid=4732, cgraph_uid=111, symbol_order=136)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 23 20 21 22
;;
;; Loop 2
;;  header 19, latch 23
;;  depth 1, outer 0
;;  nodes: 19 23
;;
;; Loop 1
;;  header 11, latch 10
;;  depth 1, outer 0
;;  nodes: 11 10 8 6 7 4 5
;; 2 succs { 3 14 }
;; 3 succs { 11 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 10 }
;; 9 succs { 12 }
;; 10 succs { 11 }
;; 11 succs { 4 12 }
;; 12 succs { 13 18 }
;; 13 succs { 18 }
;; 14 succs { 15 16 }
;; 15 succs { 16 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 19 }
;; 19 succs { 23 20 }
;; 23 succs { 19 }
;; 20 succs { 21 22 }
;; 21 succs { 22 }
;; 22 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

abase_2 -> { abase_79 }
iterations_8 -> { iterations_101 }
bbase_22 -> { bbase_84 }
accumtime_26 -> { accumtime_100 }
_52 -> { _14 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 24
Number of blocks to update: 11 ( 46%)



Value ranges after Early VRP:

_1: VARYING
abase_2: [abase_79, abase_79]
_3: VARYING
_4: [2, 10001]
_5: [2, 10001]
_6: [163216, 816161608]
systemerror.195_7: VARYING
iterations_8: VARYING
_11: [1616, 8080808]
systemerror.197_12: VARYING
_14: [1, 10000]
_15: VARYING
global_min_ticks.199_16: VARYING
_18: VARYING
_19: VARYING
_20: [0, +INF]
systemerror.200_21: VARYING
bbase_22: [bbase_84, bbase_84]
_23: VARYING
_24: [0, +INF]
systemerror.202_25: VARYING
accumtime_26: [0, +INF]
_27: VARYING
_28: VARYING
_29: VARYING
_30: VARYING
_31: VARYING
_32: VARYING
_33: VARYING
_34: VARYING
abase_35: VARYING
abase_36: VARYING
abase_37: VARYING
bbase_38: VARYING
bbase_39: VARYING
bbase_40: VARYING
i_41: [1, 10001]
accumtime_42: VARYING
iterations_43: VARYING
_52: [1, 10000]
a_56: VARYING
b_58: VARYING
abase_65: VARYING
bbase_70: VARYING
abase_76(D): UNDEFINED
bbase_77(D): UNDEFINED
abase_79: VARYING
bbase_84: VARYING
_99: VARYING
accumtime_100: [0, +INF]
iterations_101: VARYING
_109: VARYING


Removing basic block 23
DoLU ()
{
  fardouble * ptra$ptrs$p;
  int D.6544;
  double iterations;
  long unsigned int accumtime;
  int i;
  int n;
  struct LUdblptr ptra;
  fardouble * bbase;
  fardouble * abase;
  fardouble * b;
  fardouble * a;
  int systemerror;
  char * errorcontext;
  struct LUStruct * loclustruct;
  farvoid * _1;
  int _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;
  int systemerror.195_7;
  long unsigned int _11;
  int systemerror.197_12;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int global_min_ticks.199_16;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  int systemerror.200_21;
  long unsigned int _23;
  long unsigned int _24;
  int systemerror.202_25;
  long unsigned int _27;
  long unsigned int _28;
  double _29;
  long unsigned int _30;
  long unsigned int _31;
  double _32;
  double _33;
  int _34;
  long unsigned int _52;
  long unsigned int _99;
  int _109;

  <bb 2> [0.00%]:
  a_56 = AllocateMemory (81608, &systemerror);
  b_58 = AllocateMemory (808, &systemerror);
  _1 = AllocateMemory (808, &systemerror);
  LUtempvv = _1;
  build_problem (a_56, 101, b_58);
  _3 = global_lustruct.adjust;
  if (_3 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 3> [0.00%]:
  global_lustruct.numarrays = 0;
  goto <bb 11>; [0.00%]

  <bb 4> [0.00%]:
  _4 = i_41 + 1;
  _5 = (long unsigned int) _4;
  _6 = _5 * 81608;
  abase_79 = AllocateMemory (_6, &systemerror);
  systemerror.195_7 = systemerror;
  if (systemerror.195_7 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  ReportError ("FPU:LU", systemerror.195_7);
  LUFreeMem (a_56, b_58, 0B, 0B);
  ErrorExit ();

  <bb 6> [0.00%]:
  _11 = _5 * 808;
  bbase_84 = AllocateMemory (_11, &systemerror);
  systemerror.197_12 = systemerror;
  if (systemerror.197_12 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  ReportError ("FPU:LU", systemerror.197_12);
  LUFreeMem (a_56, b_58, abase_79, 0B);
  ErrorExit ();

  <bb 8> [0.00%]:
  _14 = (long unsigned int) i_41;
  _15 = DoLUIteration (a_56, b_58, abase_79, bbase_84, _14);
  global_min_ticks.199_16 = global_min_ticks;
  if (_15 > global_min_ticks.199_16)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  # _52 = PHI <_14(8)>
  # abase_2 = PHI <abase_79(8)>
  # bbase_22 = PHI <bbase_84(8)>
  global_lustruct.numarrays = _52;
  goto <bb 12>; [0.00%]

  <bb 10> [0.00%]:
  FreeMemory (abase_79, &systemerror);
  FreeMemory (bbase_84, &systemerror);

  <bb 11> [0.00%]:
  # abase_35 = PHI <abase_76(D)(3), abase_79(10)>
  # bbase_38 = PHI <bbase_77(D)(3), bbase_84(10)>
  # i_41 = PHI <1(3), _4(10)>
  if (i_41 <= 10000)
    goto <bb 4>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [0.00%]:
  # abase_36 = PHI <abase_2(9), abase_35(11)>
  # bbase_39 = PHI <bbase_22(9), bbase_38(11)>
  _18 = global_lustruct.numarrays;
  if (_18 == 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 13> [100.00%]:
  _109 = __printf_chk (1, "FPU:LU -- Array limit reached\n");
  LUFreeMem (a_56, b_58, abase_36, bbase_39);
  ErrorExit ();
  goto <bb 18>; [0.00%]

  <bb 14> [0.00%]:
  _19 = global_lustruct.numarrays;
  _20 = _19 * 81608;
  abase_65 = AllocateMemory (_20, &systemerror);
  systemerror.200_21 = systemerror;
  if (systemerror.200_21 != 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:
  ReportError ("FPU:LU", systemerror.200_21);
  LUFreeMem (a_56, b_58, 0B, 0B);
  ErrorExit ();

  <bb 16> [0.00%]:
  _23 = global_lustruct.numarrays;
  _24 = _23 * 808;
  bbase_70 = AllocateMemory (_24, &systemerror);
  systemerror.202_25 = systemerror;
  if (systemerror.202_25 != 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  ReportError ("FPU:LU", systemerror.202_25);
  LUFreeMem (a_56, b_58, abase_65, 0B);
  ErrorExit ();

  <bb 18> [0.00%]:
  # abase_37 = PHI <abase_36(13), abase_65(16), abase_65(17), abase_36(12)>
  # bbase_40 = PHI <bbase_39(13), bbase_70(16), bbase_70(17), bbase_39(12)>

  <bb 19> [0.00%]:
  # accumtime_42 = PHI <0(18), accumtime_100(19)>
  # iterations_43 = PHI <0.0(18), iterations_101(19)>
  _27 = global_lustruct.numarrays;
  _99 = DoLUIteration (a_56, b_58, abase_37, bbase_40, _27);
  accumtime_100 = accumtime_42 + _99;
  _28 = global_lustruct.numarrays;
  _29 = (double) _28;
  iterations_101 = _29 + iterations_43;
  _30 = TicksToSecs (accumtime_100);
  _31 = global_lustruct.request_secs;
  if (_30 < _31)
    goto <bb 19>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  # accumtime_26 = PHI <accumtime_100(19)>
  # iterations_8 = PHI <iterations_101(19)>
  _32 = TicksToFracSecs (accumtime_26);
  _33 = iterations_8 / _32;
  global_lustruct.iterspersec = _33;
  _34 = global_lustruct.adjust;
  if (_34 == 0)
    goto <bb 21>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 21> [0.00%]:
  global_lustruct.adjust = 1;

  <bb 22> [0.00%]:
  LUFreeMem (a_56, b_58, abase_37, bbase_40);
  systemerror ={v} {CLOBBER};
  return;

}


