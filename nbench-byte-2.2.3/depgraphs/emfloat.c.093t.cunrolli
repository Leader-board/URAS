
;; Function DivideInternalFPF (DivideInternalFPF, funcdef_no=51, decl_uid=2827, cgraph_uid=51, symbol_order=51)

Created preheader block for loop 24
Created preheader block for loop 25
Created preheader block for loop 26
Created preheader block for loop 2
Created preheader block for loop 4
Created preheader block for loop 3
Created preheader block for loop 18
Created preheader block for loop 19
Created preheader block for loop 21
;; 27 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 117 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 112 53 54 55 56 115 57 58 59 60 61 114 67 62 63 64 65 66 113 68 69 70 71 72 73 74 116 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 110 109 95 96 97 98 99 100 101 102 103 104 105 111 106 107 108
;;
;; Loop 22
;;  header 92, latch 91
;;  depth 1, outer 0
;;  nodes: 92 91
;;
;; Loop 24
;;  header 96, latch 95
;;  depth 1, outer 0
;;  nodes: 96 95
;;
;; Loop 25
;;  header 105, latch 104
;;  depth 1, outer 0
;;  nodes: 105 104 102 103 101 100 111 98 99
;;
;; Loop 26
;;  header 101, latch 100
;;  depth 2, outer 25
;;  nodes: 101 100 98 99
;;
;; Loop 23
;;  header 85, latch 84
;;  depth 1, outer 0
;;  nodes: 85 84
;;
;; Loop 5
;;  header 5, latch 4
;;  depth 1, outer 0
;;  nodes: 5 4
;;
;; Loop 7
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11
;;
;; Loop 8
;;  header 15, latch 14
;;  depth 1, outer 0
;;  nodes: 15 14
;;
;; Loop 6
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7
;;
;; Loop 10
;;  header 22, latch 21
;;  depth 1, outer 0
;;  nodes: 22 21
;;
;; Loop 11
;;  header 25, latch 24
;;  depth 1, outer 0
;;  nodes: 25 24
;;
;; Loop 9
;;  header 18, latch 17
;;  depth 1, outer 0
;;  nodes: 18 17
;;
;; Loop 14
;;  header 39, latch 38
;;  depth 1, outer 0
;;  nodes: 39 38
;;
;; Loop 15
;;  header 42, latch 41
;;  depth 1, outer 0
;;  nodes: 42 41
;;
;; Loop 13
;;  header 35, latch 34
;;  depth 1, outer 0
;;  nodes: 35 34
;;
;; Loop 17
;;  header 49, latch 48
;;  depth 1, outer 0
;;  nodes: 49 48
;;
;; Loop 2
;;  header 74, latch 73
;;  depth 1, outer 0
;;  nodes: 74 73 72 68 71 69 70 62 113 67 66 61 63 65 114 64 60 115 59 57 58 56 116 55 53 54
;;
;; Loop 20
;;  header 72, latch 71
;;  depth 2, outer 2
;;  nodes: 72 71 69 70
;;
;; Loop 4
;;  header 113, latch 66
;;  depth 2, outer 2
;;  nodes: 113 66
;;
;; Loop 3
;;  header 65, latch 64
;;  depth 2, outer 2
;;  nodes: 65 64 63 62
;;
;; Loop 18
;;  header 60, latch 59
;;  depth 2, outer 2
;;  nodes: 60 59 57 58
;;
;; Loop 19
;;  header 56, latch 55
;;  depth 2, outer 2
;;  nodes: 56 55 53 54
;;
;; Loop 1
;;  header 52, latch 51
;;  depth 1, outer 0
;;  nodes: 52 51
;;
;; Loop 16
;;  header 45, latch 44
;;  depth 1, outer 0
;;  nodes: 45 44
;;
;; Loop 12
;;  header 31, latch 30
;;  depth 1, outer 0
;;  nodes: 31 30
;;
;; Loop 21
;;  header 80, latch 79
;;  depth 1, outer 0
;;  nodes: 80 79 77 75
;; 2 succs { 82 3 6 13 28 16 29 23 27 117 }
;; 117 succs { 80 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 4 82 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 10 13 }
;; 10 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 11 82 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 14 82 }
;; 16 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 17 19 }
;; 19 succs { 20 23 }
;; 20 succs { 22 }
;; 21 succs { 22 }
;; 22 succs { 21 82 }
;; 23 succs { 25 }
;; 24 succs { 25 }
;; 25 succs { 24 26 }
;; 26 succs { 82 }
;; 27 succs { 82 }
;; 28 succs { 82 }
;; 29 succs { 31 }
;; 30 succs { 31 }
;; 31 succs { 30 32 }
;; 32 succs { 33 43 }
;; 33 succs { 35 }
;; 34 succs { 35 }
;; 35 succs { 34 36 }
;; 36 succs { 37 40 }
;; 37 succs { 39 }
;; 38 succs { 39 }
;; 39 succs { 38 82 }
;; 40 succs { 42 }
;; 41 succs { 42 }
;; 42 succs { 41 82 }
;; 43 succs { 45 }
;; 44 succs { 45 }
;; 45 succs { 44 46 }
;; 46 succs { 47 50 }
;; 47 succs { 49 }
;; 48 succs { 49 }
;; 49 succs { 48 82 }
;; 50 succs { 52 }
;; 51 succs { 52 }
;; 52 succs { 51 112 }
;; 112 succs { 74 }
;; 53 succs { 54 55 }
;; 54 succs { 55 }
;; 55 succs { 56 }
;; 56 succs { 53 115 }
;; 115 succs { 60 }
;; 57 succs { 58 59 }
;; 58 succs { 59 }
;; 59 succs { 60 }
;; 60 succs { 57 61 }
;; 61 succs { 114 67 }
;; 114 succs { 65 }
;; 67 succs { 113 }
;; 62 succs { 68 63 }
;; 63 succs { 67 64 }
;; 64 succs { 65 }
;; 65 succs { 62 67 }
;; 66 succs { 113 }
;; 113 succs { 66 68 }
;; 68 succs { 72 }
;; 69 succs { 70 71 }
;; 70 succs { 71 }
;; 71 succs { 72 }
;; 72 succs { 69 73 }
;; 73 succs { 74 }
;; 74 succs { 116 82 }
;; 116 succs { 56 }
;; 75 succs { 76 77 }
;; 76 succs { 82 }
;; 77 succs { 78 79 }
;; 78 succs { 82 }
;; 79 succs { 80 }
;; 80 succs { 75 81 }
;; 81 succs { 82 }
;; 82 succs { 83 108 }
;; 83 succs { 85 }
;; 84 succs { 85 }
;; 85 succs { 84 86 }
;; 86 succs { 87 88 }
;; 87 succs { 88 }
;; 88 succs { 89 106 }
;; 89 succs { 90 93 }
;; 90 succs { 92 }
;; 91 succs { 92 }
;; 92 succs { 91 106 }
;; 93 succs { 94 106 }
;; 94 succs { 109 110 }
;; 110 succs { 105 }
;; 109 succs { 96 }
;; 95 succs { 96 }
;; 96 succs { 95 97 }
;; 97 succs { 106 }
;; 98 succs { 99 100 }
;; 99 succs { 100 }
;; 100 succs { 101 }
;; 101 succs { 98 102 }
;; 102 succs { 103 104 }
;; 103 succs { 104 }
;; 104 succs { 105 }
;; 105 succs { 111 106 }
;; 111 succs { 101 }
;; 106 succs { 107 108 }
;; 107 succs { 108 }
;; 108 succs { 1 }
Removing basic block 311
Removing basic block 312
Removing basic block 313
Removing basic block 314
Removing basic block 315
Removing basic block 316
Removing basic block 317
Removing basic block 318
Removing basic block 319
Removing basic block 320
Removing basic block 321
Removing basic block 322
Removing basic block 323
Removing basic block 324
Removing basic block 325
Removing basic block 326
Removing basic block 327
Removing basic block 328
Removing basic block 329
Removing basic block 330
Removing basic block 331
Removing basic block 332
Removing basic block 333
Removing basic block 334
Removing basic block 335
Removing basic block 336
Removing basic block 337
Removing basic block 338
Removing basic block 339
Removing basic block 340
Removing basic block 341
Removing basic block 342
Removing basic block 343
Removing basic block 344
Removing basic block 345
Removing basic block 346
Removing basic block 347
Removing basic block 348
Removing basic block 349
Removing basic block 350
Removing basic block 351
Removing basic block 352
Removing basic block 353
Removing basic block 354
Removing basic block 355
Removing basic block 356
Removing basic block 357
Removing basic block 358
Removing basic block 359
Removing basic block 360
Removing basic block 361
Removing basic block 362
Removing basic block 363
Removing basic block 364
Removing basic block 365
Removing basic block 366
Removing basic block 367
Removing basic block 368
Removing basic block 369
Removing basic block 370
Removing basic block 371
Removing basic block 372
Removing basic block 373
Removing basic block 374
Removing basic block 375
Removing basic block 376
Removing basic block 377

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_53 -> { .MEM_313 }
.MEM_230 -> { .MEM_296 }
i_243 -> { i_265 }
i_315 -> { i_266 }
i_316 -> { i_265 }
.MEM_317 -> { .MEM_296 }
.MEM_318 -> { .MEM_313 }
i_319 -> { i_266 }
i_320 -> { i_265 }
.MEM_321 -> { .MEM_296 }
.MEM_322 -> { .MEM_313 }
i_323 -> { i_266 }
i_324 -> { i_265 }
.MEM_325 -> { .MEM_296 }
.MEM_326 -> { .MEM_313 }
i_327 -> { i_266 }
i_328 -> { i_274 }
.MEM_329 -> { .MEM_297 }
_330 -> { _275 }
_331 -> { _276 }
_332 -> { _277 }
.MEM_333 -> { .MEM_310 }
i_334 -> { i_278 }
i_335 -> { i_274 }
.MEM_336 -> { .MEM_297 }
_337 -> { _275 }
_338 -> { _276 }
_339 -> { _277 }
.MEM_340 -> { .MEM_310 }
i_341 -> { i_278 }
i_342 -> { i_274 }
.MEM_343 -> { .MEM_297 }
_344 -> { _275 }
_345 -> { _276 }
_346 -> { _277 }
.MEM_347 -> { .MEM_310 }
i_348 -> { i_278 }
i_349 -> { i_279 }
carry_350 -> { carry_286 }
.MEM_351 -> { .MEM_298 }
_352 -> { _280 }
_353 -> { _281 }
_354 -> { _282 }
accum_355 -> { accum_283 }
_356 -> { _284 }
accum_357 -> { accum_285 }
accum_358 -> { accum_287 }
accum_359 -> { accum_288 }
.MEM_360 -> { .MEM_308 }
i_361 -> { i_289 }
i_362 -> { i_279 }
carry_363 -> { carry_286 }
.MEM_364 -> { .MEM_298 }
_365 -> { _280 }
_366 -> { _281 }
_367 -> { _282 }
accum_368 -> { accum_283 }
_369 -> { _284 }
accum_370 -> { accum_285 }
accum_371 -> { accum_287 }
accum_372 -> { accum_288 }
.MEM_373 -> { .MEM_308 }
i_374 -> { i_289 }
i_375 -> { i_279 }
carry_376 -> { carry_286 }
.MEM_377 -> { .MEM_298 }
_378 -> { _280 }
_379 -> { _281 }
_380 -> { _282 }
accum_381 -> { accum_283 }
_382 -> { _284 }
accum_383 -> { accum_285 }
accum_384 -> { accum_287 }
accum_385 -> { accum_288 }
.MEM_386 -> { .MEM_308 }
i_387 -> { i_289 }
i_388 -> { i_279 }
carry_389 -> { carry_286 }
.MEM_390 -> { .MEM_298 }
_391 -> { _280 }
_392 -> { _281 }
_393 -> { _282 }
accum_394 -> { accum_283 }
_395 -> { _284 }
accum_396 -> { accum_285 }
accum_397 -> { accum_287 }
accum_398 -> { accum_288 }
.MEM_399 -> { .MEM_308 }
i_400 -> { i_289 }
i_401 -> { i_68 }
.MEM_402 -> { .MEM_172 }
.MEM_403 -> { .MEM_229 }
i_404 -> { i_69 }
i_405 -> { i_68 }
.MEM_406 -> { .MEM_172 }
.MEM_407 -> { .MEM_229 }
i_408 -> { i_69 }
i_409 -> { i_68 }
.MEM_410 -> { .MEM_172 }
.MEM_411 -> { .MEM_229 }
i_412 -> { i_69 }
i_413 -> { i_79 }
.MEM_414 -> { .MEM_173 }
.MEM_415 -> { .MEM_220 }
i_416 -> { i_80 }
i_417 -> { i_79 }
.MEM_418 -> { .MEM_173 }
.MEM_419 -> { .MEM_220 }
i_420 -> { i_80 }
i_421 -> { i_79 }
.MEM_422 -> { .MEM_173 }
.MEM_423 -> { .MEM_220 }
i_424 -> { i_80 }
i_425 -> { i_81 }
.MEM_426 -> { .MEM_174 }
.MEM_427 -> { .MEM_224 }
i_428 -> { i_82 }
i_429 -> { i_81 }
.MEM_430 -> { .MEM_174 }
.MEM_431 -> { .MEM_224 }
i_432 -> { i_82 }
i_433 -> { i_81 }
.MEM_434 -> { .MEM_174 }
.MEM_435 -> { .MEM_224 }
i_436 -> { i_82 }
i_437 -> { i_81 }
.MEM_438 -> { .MEM_174 }
.MEM_439 -> { .MEM_224 }
i_440 -> { i_82 }
i_441 -> { i_92 }
.MEM_442 -> { .MEM_175 }
.MEM_443 -> { .MEM_210 }
i_444 -> { i_93 }
i_445 -> { i_92 }
.MEM_446 -> { .MEM_175 }
.MEM_447 -> { .MEM_210 }
i_448 -> { i_93 }
i_449 -> { i_92 }
.MEM_450 -> { .MEM_175 }
.MEM_451 -> { .MEM_210 }
i_452 -> { i_93 }
i_453 -> { i_94 }
.MEM_454 -> { .MEM_176 }
.MEM_455 -> { .MEM_214 }
i_456 -> { i_95 }
i_457 -> { i_94 }
.MEM_458 -> { .MEM_176 }
.MEM_459 -> { .MEM_214 }
i_460 -> { i_95 }
i_461 -> { i_94 }
.MEM_462 -> { .MEM_176 }
.MEM_463 -> { .MEM_214 }
i_464 -> { i_95 }
i_465 -> { i_94 }
.MEM_466 -> { .MEM_176 }
.MEM_467 -> { .MEM_214 }
i_468 -> { i_95 }
i_469 -> { i_115 }
.MEM_470 -> { .MEM_177 }
.MEM_471 -> { .MEM_205 }
i_472 -> { i_116 }
i_473 -> { i_115 }
.MEM_474 -> { .MEM_177 }
.MEM_475 -> { .MEM_205 }
i_476 -> { i_116 }
i_477 -> { i_115 }
.MEM_478 -> { .MEM_177 }
.MEM_479 -> { .MEM_205 }
i_480 -> { i_116 }
i_481 -> { i_117 }
.MEM_482 -> { .MEM_178 }
.MEM_483 -> { .MEM_200 }
i_484 -> { i_118 }
i_485 -> { i_117 }
.MEM_486 -> { .MEM_178 }
.MEM_487 -> { .MEM_200 }
i_488 -> { i_118 }
i_489 -> { i_117 }
.MEM_490 -> { .MEM_178 }
.MEM_491 -> { .MEM_200 }
i_492 -> { i_118 }
i_493 -> { i_117 }
.MEM_494 -> { .MEM_178 }
.MEM_495 -> { .MEM_200 }
i_496 -> { i_118 }
i_497 -> { i_129 }
.MEM_498 -> { .MEM_179 }
.MEM_499 -> { .MEM_196 }
i_500 -> { i_130 }
i_501 -> { i_129 }
.MEM_502 -> { .MEM_179 }
.MEM_503 -> { .MEM_196 }
i_504 -> { i_130 }
i_505 -> { i_129 }
.MEM_506 -> { .MEM_179 }
.MEM_507 -> { .MEM_196 }
i_508 -> { i_130 }
i_509 -> { i_129 }
.MEM_510 -> { .MEM_179 }
.MEM_511 -> { .MEM_196 }
i_512 -> { i_130 }
i_513 -> { i_160 }
.MEM_514 -> { .MEM_182 }
carry_515 -> { carry_235 }
_516 -> { _161 }
_517 -> { _162 }
_518 -> { _163 }
accum_519 -> { accum_164 }
_520 -> { _165 }
accum_521 -> { accum_166 }
accum_522 -> { accum_167 }
accum_523 -> { accum_168 }
.MEM_524 -> { .MEM_190 }
i_525 -> { i_169 }
i_526 -> { i_160 }
.MEM_527 -> { .MEM_182 }
carry_528 -> { carry_235 }
_529 -> { _161 }
_530 -> { _162 }
_531 -> { _163 }
accum_532 -> { accum_164 }
_533 -> { _165 }
accum_534 -> { accum_166 }
accum_535 -> { accum_167 }
accum_536 -> { accum_168 }
.MEM_537 -> { .MEM_190 }
i_538 -> { i_169 }
i_539 -> { i_160 }
.MEM_540 -> { .MEM_182 }
carry_541 -> { carry_235 }
_542 -> { _161 }
_543 -> { _162 }
_544 -> { _163 }
accum_545 -> { accum_164 }
_546 -> { _165 }
accum_547 -> { accum_166 }
accum_548 -> { accum_167 }
accum_549 -> { accum_168 }
.MEM_550 -> { .MEM_190 }
i_551 -> { i_169 }
i_552 -> { i_160 }
.MEM_553 -> { .MEM_182 }
carry_554 -> { carry_235 }
_555 -> { _161 }
_556 -> { _162 }
_557 -> { _163 }
accum_558 -> { accum_164 }
_559 -> { _165 }
accum_560 -> { accum_166 }
accum_561 -> { accum_167 }
accum_562 -> { accum_168 }
.MEM_563 -> { .MEM_190 }
i_564 -> { i_169 }
j_565 -> { j_43 }
.MEM_566 -> { .MEM_45 }
carry_567 -> { carry_233 }
_568 -> { _32 }
_569 -> { _33 }
accum_570 -> { accum_151 }
_571 -> { _152 }
accum_572 -> { accum_153 }
_573 -> { _154 }
accum_574 -> { accum_155 }
_575 -> { _156 }
_576 -> { _157 }
_577 -> { _158 }
_578 -> { _159 }
.MEM_579 -> { .MEM_189 }
j_580 -> { j_60 }
j_581 -> { j_43 }
.MEM_582 -> { .MEM_45 }
carry_583 -> { carry_233 }
_584 -> { _32 }
_585 -> { _33 }
accum_586 -> { accum_151 }
_587 -> { _152 }
accum_588 -> { accum_153 }
_589 -> { _154 }
accum_590 -> { accum_155 }
_591 -> { _156 }
_592 -> { _157 }
_593 -> { _158 }
_594 -> { _159 }
.MEM_595 -> { .MEM_189 }
j_596 -> { j_60 }
j_597 -> { j_43 }
.MEM_598 -> { .MEM_45 }
carry_599 -> { carry_233 }
_600 -> { _32 }
_601 -> { _33 }
accum_602 -> { accum_151 }
_603 -> { _152 }
accum_604 -> { accum_153 }
_605 -> { _154 }
accum_606 -> { accum_155 }
_607 -> { _156 }
_608 -> { _157 }
_609 -> { _158 }
_610 -> { _159 }
.MEM_611 -> { .MEM_189 }
j_612 -> { j_60 }
j_613 -> { j_43 }
.MEM_614 -> { .MEM_45 }
carry_615 -> { carry_233 }
_616 -> { _32 }
_617 -> { _33 }
accum_618 -> { accum_151 }
_619 -> { _152 }
accum_620 -> { accum_153 }
_621 -> { _154 }
accum_622 -> { accum_155 }
_623 -> { _156 }
_624 -> { _157 }
_625 -> { _158 }
_626 -> { _159 }
.MEM_627 -> { .MEM_189 }
j_628 -> { j_60 }
j_629 -> { j_42 }
_630 -> { _30 }
_631 -> { _31 }
j_632 -> { j_59 }
j_633 -> { j_42 }
_634 -> { _30 }
_635 -> { _31 }
j_636 -> { j_59 }
j_637 -> { j_42 }
_638 -> { _30 }
_639 -> { _31 }
j_640 -> { j_59 }
j_641 -> { j_42 }
_642 -> { _30 }
_643 -> { _31 }
j_644 -> { j_59 }
i_645 -> { i_131 }
.MEM_646 -> { .MEM_181 }
carry_647 -> { carry_232 }
_648 -> { _132 }
_649 -> { _133 }
_650 -> { _134 }
accum_651 -> { accum_135 }
_652 -> { _136 }
accum_653 -> { accum_137 }
accum_654 -> { accum_138 }
accum_655 -> { accum_139 }
.MEM_656 -> { .MEM_191 }
i_657 -> { i_140 }
i_658 -> { i_131 }
.MEM_659 -> { .MEM_181 }
carry_660 -> { carry_232 }
_661 -> { _132 }
_662 -> { _133 }
_663 -> { _134 }
accum_664 -> { accum_135 }
_665 -> { _136 }
accum_666 -> { accum_137 }
accum_667 -> { accum_138 }
accum_668 -> { accum_139 }
.MEM_669 -> { .MEM_191 }
i_670 -> { i_140 }
i_671 -> { i_131 }
.MEM_672 -> { .MEM_181 }
carry_673 -> { carry_232 }
_674 -> { _132 }
_675 -> { _133 }
_676 -> { _134 }
accum_677 -> { accum_135 }
_678 -> { _136 }
accum_679 -> { accum_137 }
accum_680 -> { accum_138 }
accum_681 -> { accum_139 }
.MEM_682 -> { .MEM_191 }
i_683 -> { i_140 }
i_684 -> { i_131 }
.MEM_685 -> { .MEM_181 }
carry_686 -> { carry_232 }
_687 -> { _132 }
_688 -> { _133 }
_689 -> { _134 }
accum_690 -> { accum_135 }
_691 -> { _136 }
accum_692 -> { accum_137 }
accum_693 -> { accum_138 }
accum_694 -> { accum_139 }
.MEM_695 -> { .MEM_191 }
i_696 -> { i_140 }
i_697 -> { i_141 }
.MEM_698 -> { .MEM_180 }
carry_699 -> { carry_231 }
_700 -> { _142 }
_701 -> { _143 }
_702 -> { _144 }
accum_703 -> { accum_145 }
_704 -> { _146 }
accum_705 -> { accum_147 }
accum_706 -> { accum_148 }
accum_707 -> { accum_149 }
.MEM_708 -> { .MEM_192 }
i_709 -> { i_150 }
i_710 -> { i_141 }
.MEM_711 -> { .MEM_180 }
carry_712 -> { carry_231 }
_713 -> { _142 }
_714 -> { _143 }
_715 -> { _144 }
accum_716 -> { accum_145 }
_717 -> { _146 }
accum_718 -> { accum_147 }
accum_719 -> { accum_148 }
accum_720 -> { accum_149 }
.MEM_721 -> { .MEM_192 }
i_722 -> { i_150 }
i_723 -> { i_141 }
.MEM_724 -> { .MEM_180 }
carry_725 -> { carry_231 }
_726 -> { _142 }
_727 -> { _143 }
_728 -> { _144 }
accum_729 -> { accum_145 }
_730 -> { _146 }
accum_731 -> { accum_147 }
accum_732 -> { accum_148 }
accum_733 -> { accum_149 }
.MEM_734 -> { .MEM_192 }
i_735 -> { i_150 }
i_736 -> { i_141 }
.MEM_737 -> { .MEM_180 }
carry_738 -> { carry_231 }
_739 -> { _142 }
_740 -> { _143 }
_741 -> { _144 }
accum_742 -> { accum_145 }
_743 -> { _146 }
accum_744 -> { accum_147 }
accum_745 -> { accum_148 }
accum_746 -> { accum_149 }
.MEM_747 -> { .MEM_192 }
i_748 -> { i_150 }
i_749 -> { i_41 }
.MEM_750 -> { .MEM_44 }
.MEM_751 -> { .MEM_62 }
.MEM_752 -> { .MEM_63 }
i_753 -> { i_64 }
i_754 -> { i_41 }
.MEM_755 -> { .MEM_44 }
.MEM_756 -> { .MEM_62 }
.MEM_757 -> { .MEM_63 }
i_758 -> { i_64 }
i_759 -> { i_41 }
.MEM_760 -> { .MEM_44 }
.MEM_761 -> { .MEM_62 }
.MEM_762 -> { .MEM_63 }
i_763 -> { i_64 }
i_764 -> { i_41 }
.MEM_765 -> { .MEM_44 }
.MEM_766 -> { .MEM_62 }
.MEM_767 -> { .MEM_63 }
i_768 -> { i_64 }
i_769 -> { i_96 }
n_770 -> { n_102 }
_771 -> { _97 }
_772 -> { _98 }
_773 -> { _99 }
_774 -> { _100 }
_775 -> { _101 }
n_776 -> { n_103 }
i_777 -> { i_104 }
i_778 -> { i_96 }
n_779 -> { n_102 }
_780 -> { _97 }
_781 -> { _98 }
_782 -> { _99 }
_783 -> { _100 }
_784 -> { _101 }
n_785 -> { n_103 }
i_786 -> { i_104 }
i_787 -> { i_96 }
n_788 -> { n_102 }
_789 -> { _97 }
_790 -> { _98 }
_791 -> { _99 }
_792 -> { _100 }
_793 -> { _101 }
n_794 -> { n_103 }
i_795 -> { i_104 }
i_796 -> { i_96 }
n_797 -> { n_102 }
_798 -> { _97 }
_799 -> { _98 }
_800 -> { _99 }
_801 -> { _100 }
_802 -> { _101 }
n_803 -> { n_103 }
i_804 -> { i_104 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 378
Number of blocks to update: 236 ( 62%)


Removing basic block 307
Removing basic block 4
Removing basic block 306
Removing basic block 11
Removing basic block 305
Removing basic block 14
Removing basic block 304
Removing basic block 21
Removing basic block 303
Removing basic block 24
Removing basic block 292
Removing basic block 30
Removing basic block 302
Removing basic block 38
Removing basic block 301
Removing basic block 41
Removing basic block 300
Removing basic block 48
Removing basic block 293
Removing basic block 51
Removing basic block 294
Removing basic block 54
Removing basic block 55
Removing basic block 53
Removing basic block 295
Removing basic block 58
Removing basic block 59
Removing basic block 57
Removing basic block 297
Removing basic block 64
Removing basic block 63
Removing basic block 296
Removing basic block 62
Removing basic block 299
Removing basic block 70
Removing basic block 71
Removing basic block 69
Removing basic block 310
Removing basic block 91
Removing basic block 309
Removing basic block 95
Removing basic block 308
Removing basic block 99
Removing basic block 100
Removing basic block 98
Removing basic block 298
Removing basic block 66
Removing basic block 134
Removing basic block 262
Merging blocks 3 and 148
Merging blocks 10 and 154
Merging blocks 13 and 160
Merging blocks 20 and 168
Merging blocks 23 and 174
Merging blocks 29 and 284
Merging blocks 37 and 182
Merging blocks 40 and 188
Merging blocks 47 and 196
Merging blocks 50 and 276
Removing basic block 65
Merging blocks 67 and 220
Merging blocks 68 and 204
Merging blocks 90 and 118
Removing basic block 109
Removing basic block 111
Removing basic block 114
Removing basic block 115
Removing basic block 116
Merging blocks 126 and 127
Merging blocks 132 and 133
Merging blocks 139 and 140
Merging blocks 143 and 144
Merging blocks 147 and 101
Merging blocks 207 and 208
Merging blocks 211 and 212
Merging blocks 215 and 216
Merging blocks 219 and 72
Removing basic block 228
Removing basic block 231
Removing basic block 232
Removing basic block 235
Removing basic block 236
Removing basic block 239
Removing basic block 240
Removing basic block 243
Merging blocks 247 and 248
Merging blocks 251 and 252
Merging blocks 255 and 256
Merging blocks 259 and 60
Merging blocks 260 and 261
Merging blocks 267 and 268
Merging blocks 271 and 272
Merging blocks 275 and 56
Merging blocks 3 and 149
Merging blocks 3 and 150
Merging blocks 3 and 151
Merging blocks 3 and 152
Merging blocks 3 and 153
Merging blocks 3 and 5
Merging blocks 10 and 155
Merging blocks 10 and 156
Merging blocks 10 and 157
Merging blocks 10 and 158
Merging blocks 10 and 159
Merging blocks 10 and 12
Merging blocks 13 and 161
Merging blocks 13 and 162
Merging blocks 13 and 163
Merging blocks 13 and 164
Merging blocks 13 and 165
Merging blocks 13 and 166
Merging blocks 13 and 167
Merging blocks 13 and 15
Merging blocks 20 and 169
Merging blocks 20 and 170
Merging blocks 20 and 171
Merging blocks 20 and 172
Merging blocks 20 and 173
Merging blocks 20 and 22
Merging blocks 23 and 175
Merging blocks 23 and 176
Merging blocks 23 and 177
Merging blocks 23 and 178
Merging blocks 23 and 179
Merging blocks 23 and 180
Merging blocks 23 and 181
Merging blocks 23 and 25
Merging blocks 23 and 26
Merging blocks 29 and 285
Merging blocks 29 and 286
Merging blocks 29 and 287
Merging blocks 29 and 288
Merging blocks 29 and 289
Merging blocks 29 and 290
Merging blocks 29 and 291
Merging blocks 29 and 31
Merging blocks 29 and 32
Merging blocks 37 and 183
Merging blocks 37 and 184
Merging blocks 37 and 185
Merging blocks 37 and 186
Merging blocks 37 and 187
Merging blocks 37 and 39
Merging blocks 40 and 189
Merging blocks 40 and 190
Merging blocks 40 and 191
Merging blocks 40 and 192
Merging blocks 40 and 193
Merging blocks 40 and 194
Merging blocks 40 and 195
Merging blocks 40 and 42
Merging blocks 47 and 197
Merging blocks 47 and 198
Merging blocks 47 and 199
Merging blocks 47 and 200
Merging blocks 47 and 201
Merging blocks 47 and 202
Merging blocks 47 and 203
Merging blocks 47 and 49
Merging blocks 50 and 277
Merging blocks 50 and 278
Merging blocks 50 and 279
Merging blocks 50 and 280
Merging blocks 50 and 281
Merging blocks 50 and 282
Merging blocks 50 and 283
Merging blocks 50 and 52
Merging blocks 50 and 112
Merging blocks 67 and 221
Merging blocks 67 and 222
Merging blocks 67 and 223
Merging blocks 67 and 224
Merging blocks 67 and 225
Merging blocks 67 and 226
Merging blocks 67 and 227
Merging blocks 67 and 113
Merging blocks 68 and 205
Merging blocks 90 and 119
Merging blocks 90 and 120
Merging blocks 90 and 121
Merging blocks 90 and 122
Merging blocks 90 and 123
Merging blocks 90 and 124
Merging blocks 90 and 125
Merging blocks 90 and 92
Merging blocks 126 and 128
Merging blocks 126 and 129
Merging blocks 126 and 130
Merging blocks 126 and 131
Merging blocks 126 and 96
Merging blocks 126 and 97
Merging blocks 132 and 135
Merging blocks 132 and 136
Merging blocks 132 and 137
Merging blocks 139 and 141
Merging blocks 143 and 145
Merging blocks 147 and 102
Merging blocks 207 and 209
Merging blocks 211 and 213
Merging blocks 215 and 217
Merging blocks 219 and 73
Removing basic block 242
Merging blocks 247 and 249
Merging blocks 251 and 253
Merging blocks 255 and 257
Merging blocks 259 and 61
Merging blocks 260 and 263
Merging blocks 260 and 264
Merging blocks 260 and 265
Merging blocks 267 and 269
Merging blocks 271 and 273
Merging blocks 275 and 244
Merging blocks 275 and 245
DivideInternalFPF (struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  int i;
  short unsigned int carry;
  short unsigned int * mantissa;
  short unsigned int accum;
  int i;
  int i;
  int i;
  int n;
  long int exponent_difference;
  int i;
  int i;
  short unsigned int accum;
  unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  int i;
  int n;
  int i;
  int i;
  int i;
  int n;
  int i;
  int n;
  int i;
  int i;
  int i;
  int n;
  int i;
  int i;
  int i;
  int n;
  int i;
  struct InternalFPF locx;
  short unsigned int extra_bits[4];
  short unsigned int carry;
  int j;
  int i;
  unsigned char _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  short unsigned int[4] * _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  short unsigned int[4] * _11;
  unsigned char _12;
  unsigned char _13;
  unsigned char _14;
  short unsigned int[4] * _16;
  short unsigned int[4] * _17;
  unsigned char _20;
  unsigned char _21;
  unsigned char _22;
  short int _23;
  unsigned short _24;
  short int _25;
  unsigned short _26;
  unsigned short _27;
  unsigned short _28;
  short int _29;
  short unsigned int[4] * _34;
  short int _35;
  unsigned short _36;
  unsigned short _37;
  short int _38;
  short unsigned int _39;
  signed short _40;
  long unsigned int _54;
  long unsigned int _55;
  long unsigned int _71;
  long unsigned int _72;
  short unsigned int * _73;
  short unsigned int _74;
  int _75;
  long unsigned int _84;
  long unsigned int _85;
  short unsigned int * _86;
  short unsigned int _87;
  int _88;
  long unsigned int _107;
  long unsigned int _108;
  short unsigned int * _109;
  short unsigned int _110;
  int _111;
  long unsigned int _120;
  long unsigned int _121;
  short unsigned int * _122;
  short unsigned int _123;
  int _124;
  unsigned char _170;
  unsigned char _171;
  short unsigned int _238;
  short unsigned int _239;
  long unsigned int _240;
  long unsigned int _242;
  long unsigned int _245;
  unsigned char _246;
  short unsigned int _247;
  short unsigned int _248;
  short unsigned int[4] * _249;
  long unsigned int _251;
  long unsigned int _252;
  short unsigned int * _253;
  short unsigned int _254;
  int _255;
  short int _260;
  int _261;
  int _262;
  unsigned short _267;
  unsigned short _268;
  unsigned short _269;
  short int _270;
  int _271;
  unsigned char _273;
  short unsigned int _291;
  short unsigned int _292;
  long unsigned int _330;
  long unsigned int _331;
  short unsigned int * _332;
  long unsigned int _337;
  long unsigned int _338;
  short unsigned int * _339;
  long unsigned int _344;
  long unsigned int _345;
  short unsigned int * _346;
  short unsigned int * _354;
  short unsigned int _356;
  short unsigned int * _367;
  short unsigned int _369;
  short unsigned int * _380;
  short unsigned int _382;
  short unsigned int * _393;
  short unsigned int _395;
  short unsigned int * _518;
  short unsigned int _520;
  short unsigned int * _531;
  short unsigned int _533;
  short unsigned int * _544;
  short unsigned int _546;
  short unsigned int * _557;
  short unsigned int _559;
  short unsigned int _568;
  short unsigned int _569;
  unsigned int _571;
  unsigned int _573;
  unsigned int _575;
  short unsigned int _576;
  short unsigned int _577;
  short unsigned int _578;
  short unsigned int _584;
  short unsigned int _585;
  unsigned int _587;
  unsigned int _589;
  unsigned int _591;
  short unsigned int _592;
  short unsigned int _593;
  short unsigned int _594;
  short unsigned int _600;
  short unsigned int _601;
  unsigned int _603;
  unsigned int _605;
  unsigned int _607;
  short unsigned int _608;
  short unsigned int _609;
  short unsigned int _610;
  short unsigned int _616;
  short unsigned int _617;
  unsigned int _619;
  unsigned int _621;
  unsigned int _623;
  short unsigned int _624;
  short unsigned int _625;
  short unsigned int _626;
  short unsigned int _630;
  short unsigned int _631;
  short unsigned int _634;
  short unsigned int _635;
  short unsigned int _638;
  short unsigned int _639;
  short unsigned int _642;
  short unsigned int _643;
  short unsigned int * _650;
  short unsigned int _652;
  short unsigned int * _663;
  short unsigned int _665;
  short unsigned int * _676;
  short unsigned int _678;
  short unsigned int * _689;
  short unsigned int _691;
  short unsigned int * _702;
  short unsigned int _704;
  short unsigned int * _715;
  short unsigned int _717;
  short unsigned int * _728;
  short unsigned int _730;
  short unsigned int * _741;
  short unsigned int _743;
  long unsigned int _771;
  long unsigned int _772;
  short unsigned int * _773;
  short unsigned int _774;
  int _775;
  long unsigned int _780;
  long unsigned int _781;
  short unsigned int * _782;
  short unsigned int _783;
  int _784;
  long unsigned int _789;
  long unsigned int _790;
  short unsigned int * _791;
  short unsigned int _792;
  int _793;
  long unsigned int _798;
  long unsigned int _799;
  short unsigned int * _800;
  short unsigned int _801;
  int _802;

  <bb 2> [81.50%]:
  _1 = x_50(D)->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y_51(D)->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L54> [10.00%], case 0: <L56> [10.00%], case 1 ... 2: <L2> [10.00%], case 3: <L5> [10.00%], case 4: <L58> [10.00%], case 5: <L9> [10.00%], case 6 ... 7: <L59> [10.00%], case 8: <L5> [10.00%], case 9: <L58> [10.00%], case 10: <L9> [10.00%], case 11 ... 12: <L59> [10.00%], case 13: <L5> [10.00%], case 14: <L58> [10.00%], case 15 ... 17: <L12> [10.00%], case 18: <L56> [10.00%], case 19: <L58> [10.00%], case 20 ... 23: <L57> [10.00%], case 24: <L62> [10.00%]>

<L62> [8.15%]:
  goto <bb 70> (<L61>); [100.00%]

<L56> [8.15%]:
  z_52(D)->type = 4;
  z_52(D)->exp = 32767;
  z_52(D)->sign = 1;
  z_52(D)->mantissa[0] = 16384;
  z_52(D)->mantissa[1] = 0;
  i_404 = 2;
  z_52(D)->mantissa[i_404] = 0;
  i_408 = i_404 + 1;
  z_52(D)->mantissa[i_408] = 0;
  i_412 = i_408 + 1;
  goto <bb 72> (<L54>); [100.00%]

<L2> [8.15%]:
  _7 = &y_51(D)->mantissa;
  goto <bb 7>; [100.00%]

  <bb 6> [32.60%]:
  _71 = (long unsigned int) i_70;
  _72 = _71 * 2;
  _73 = _7 + _72;
  _74 = *_73;
  _75 = (int) _74;
  n_77 = _75 | n_76;
  i_78 = i_70 + 1;

  <bb 7> [40.75%]:
  # i_70 = PHI <0(5), i_78(6)>
  # n_76 = PHI <0(5), n_77(6)>
  if (i_70 <= 3)
    goto <bb 6>; [80.00%]
  else
    goto <bb 8>; [20.00%]

  <bb 8> [8.15%]:
  # n_186 = PHI <n_76(7)>
  if (n_186 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 10> (<L5>); [50.00%]

  <bb 9> [4.08%]:
  z_52(D)->type = 4;
  z_52(D)->exp = 32767;
  z_52(D)->sign = 1;
  z_52(D)->mantissa[0] = 16384;
  z_52(D)->mantissa[1] = 0;
  i_416 = 2;
  z_52(D)->mantissa[i_416] = 0;
  i_420 = i_416 + 1;
  z_52(D)->mantissa[i_420] = 0;
  i_424 = i_420 + 1;
  goto <bb 72> (<L54>); [100.00%]

<L5> [12.23%]:
  _8 = x_50(D)->sign;
  _9 = y_51(D)->sign;
  _10 = _8 ^ _9;
  z_52(D)->type = 0;
  z_52(D)->sign = _10;
  z_52(D)->exp = -32767;
  z_52(D)->mantissa[0] = 0;
  i_428 = 1;
  z_52(D)->mantissa[i_428] = 0;
  i_432 = i_428 + 1;
  z_52(D)->mantissa[i_432] = 0;
  i_436 = i_432 + 1;
  z_52(D)->mantissa[i_436] = 0;
  i_440 = i_436 + 1;
  goto <bb 72> (<L54>); [100.00%]

<L9> [8.15%]:
  _11 = &x_50(D)->mantissa;
  goto <bb 13>; [100.00%]

  <bb 12> [32.60%]:
  _84 = (long unsigned int) i_83;
  _85 = _84 * 2;
  _86 = _11 + _85;
  _87 = *_86;
  _88 = (int) _87;
  n_90 = _88 | n_89;
  i_91 = i_83 + 1;

  <bb 13> [40.75%]:
  # i_83 = PHI <0(11), i_91(12)>
  # n_89 = PHI <0(11), n_90(12)>
  if (i_83 <= 3)
    goto <bb 12>; [80.00%]
  else
    goto <bb 14>; [20.00%]

  <bb 14> [8.15%]:
  # n_105 = PHI <n_89(13)>
  if (n_105 == 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 16> (<L12>); [50.00%]

  <bb 15> [4.08%]:
  z_52(D)->type = 4;
  z_52(D)->exp = 32767;
  z_52(D)->sign = 1;
  z_52(D)->mantissa[0] = 16384;
  z_52(D)->mantissa[1] = 0;
  i_444 = 2;
  z_52(D)->mantissa[i_444] = 0;
  i_448 = i_444 + 1;
  z_52(D)->mantissa[i_448] = 0;
  i_452 = i_448 + 1;
  goto <bb 72> (<L54>); [100.00%]

<L12> [12.23%]:
  z_52(D)->type = 3;
  z_52(D)->sign = 0;
  z_52(D)->exp = -32767;
  z_52(D)->mantissa[0] = 0;
  i_456 = 1;
  z_52(D)->mantissa[i_456] = 0;
  i_460 = i_456 + 1;
  z_52(D)->mantissa[i_460] = 0;
  i_464 = i_460 + 1;
  z_52(D)->mantissa[i_464] = 0;
  i_468 = i_464 + 1;
  _12 = x_50(D)->sign;
  _13 = y_51(D)->sign;
  _14 = _12 ^ _13;
  z_52(D)->sign = _14;
  goto <bb 72> (<L54>); [100.00%]

<L57> [8.15%]:
  _55 = __builtin_object_size (x_50(D), 0);
  __builtin___memmove_chk (x_50(D), z_52(D), 12, _55);
  goto <bb 72> (<L54>); [100.00%]

<L58> [8.15%]:
  _54 = __builtin_object_size (y_51(D), 0);
  __builtin___memmove_chk (y_51(D), z_52(D), 12, _54);
  goto <bb 72> (<L54>); [100.00%]

<L59> [8.15%]:
  __builtin_memcpy (&locx, x_50(D), 12);
  _771 = 0;
  _772 = _771 * 2;
  _773 = &locx.mantissa + _772;
  _774 = *_773;
  _775 = (int) _774;
  n_776 = _775;
  i_777 = 1;
  _780 = (long unsigned int) i_777;
  _781 = _780 * 2;
  _782 = &locx.mantissa + _781;
  _783 = *_782;
  _784 = (int) _783;
  n_785 = n_776 | _784;
  i_786 = i_777 + 1;
  _789 = (long unsigned int) i_786;
  _790 = _789 * 2;
  _791 = &locx.mantissa + _790;
  _792 = *_791;
  _793 = (int) _792;
  n_794 = n_785 | _793;
  i_795 = i_786 + 1;
  _798 = (long unsigned int) i_795;
  _799 = _798 * 2;
  _800 = &locx.mantissa + _799;
  _801 = *_800;
  _802 = (int) _801;
  n_803 = n_794 | _802;
  i_804 = i_795 + 1;
  if (n_803 == 0)
    goto <bb 20>; [50.00%]
  else
    goto <bb 26>; [50.00%]

  <bb 20> [4.07%]:
  _16 = &y_51(D)->mantissa;
  goto <bb 22>; [100.00%]

  <bb 21> [16.30%]:
  _107 = (long unsigned int) i_106;
  _108 = _107 * 2;
  _109 = _16 + _108;
  _110 = *_109;
  _111 = (int) _110;
  n_113 = _111 | n_112;
  i_114 = i_106 + 1;

  <bb 22> [20.37%]:
  # i_106 = PHI <0(20), i_114(21)>
  # n_112 = PHI <0(20), n_113(21)>
  if (i_106 <= 3)
    goto <bb 21>; [80.00%]
  else
    goto <bb 23>; [20.00%]

  <bb 23> [4.07%]:
  # n_15 = PHI <n_112(22)>
  if (n_15 == 0)
    goto <bb 24>; [50.00%]
  else
    goto <bb 25>; [50.00%]

  <bb 24> [2.04%]:
  z_52(D)->type = 4;
  z_52(D)->exp = 32767;
  z_52(D)->sign = 1;
  z_52(D)->mantissa[0] = 16384;
  z_52(D)->mantissa[1] = 0;
  i_472 = 2;
  z_52(D)->mantissa[i_472] = 0;
  i_476 = i_472 + 1;
  z_52(D)->mantissa[i_476] = 0;
  i_480 = i_476 + 1;
  goto <bb 72> (<L54>); [100.00%]

  <bb 25> [2.04%]:
  z_52(D)->type = 0;
  z_52(D)->sign = 0;
  z_52(D)->exp = -32767;
  z_52(D)->mantissa[0] = 0;
  i_484 = 1;
  z_52(D)->mantissa[i_484] = 0;
  i_488 = i_484 + 1;
  z_52(D)->mantissa[i_488] = 0;
  i_492 = i_488 + 1;
  z_52(D)->mantissa[i_492] = 0;
  i_496 = i_492 + 1;
  goto <bb 72> (<L54>); [100.00%]

  <bb 26> [4.07%]:
  _17 = &y_51(D)->mantissa;
  goto <bb 28>; [100.00%]

  <bb 27> [16.30%]:
  _120 = (long unsigned int) i_119;
  _121 = _120 * 2;
  _122 = _17 + _121;
  _123 = *_122;
  _124 = (int) _123;
  n_126 = _124 | n_125;
  i_127 = i_119 + 1;

  <bb 28> [20.37%]:
  # i_119 = PHI <0(26), i_127(27)>
  # n_125 = PHI <0(26), n_126(27)>
  if (i_119 <= 3)
    goto <bb 27>; [80.00%]
  else
    goto <bb 29>; [20.00%]

  <bb 29> [4.07%]:
  # n_128 = PHI <n_125(28)>
  if (n_128 == 0)
    goto <bb 30>; [50.00%]
  else
    goto <bb 31>; [50.00%]

  <bb 30> [2.04%]:
  z_52(D)->type = 3;
  z_52(D)->sign = 0;
  z_52(D)->exp = -32767;
  z_52(D)->mantissa[0] = 0;
  i_500 = 1;
  z_52(D)->mantissa[i_500] = 0;
  i_504 = i_500 + 1;
  z_52(D)->mantissa[i_504] = 0;
  i_508 = i_504 + 1;
  z_52(D)->mantissa[i_508] = 0;
  i_512 = i_508 + 1;
  goto <bb 72> (<L54>); [100.00%]

  <bb 31> [2.04%]:
  z_52(D)->type = _1;
  _20 = x_50(D)->sign;
  _21 = y_51(D)->sign;
  _22 = _20 ^ _21;
  z_52(D)->sign = _22;
  _23 = x_50(D)->exp;
  _24 = (unsigned short) _23;
  _25 = y_51(D)->exp;
  _26 = (unsigned short) _25;
  _27 = _24 - _26;
  _28 = _27 + 128;
  _29 = (short int) _28;
  z_52(D)->exp = _29;
  z_52(D)->mantissa[0] = 0;
  extra_bits[0] = 0;
  i_753 = 1;
  z_52(D)->mantissa[i_753] = 0;
  extra_bits[i_753] = 0;
  i_758 = i_753 + 1;
  z_52(D)->mantissa[i_758] = 0;
  extra_bits[i_758] = 0;
  i_763 = i_758 + 1;
  z_52(D)->mantissa[i_763] = 0;
  extra_bits[i_763] = 0;
  i_768 = i_763 + 1;
  goto <bb 57>; [100.00%]

  <bb 32> [5.77%]:
  accum_654 = accum_653 | 1;

  <bb 33> [11.55%]:
  # accum_655 = PHI <accum_653(64), accum_654(32)>
  *_650 = accum_655;
  _663 = &extra_bits + 4;
  accum_664 = *_663;
  _665 = accum_664 & 32768;
  accum_666 = accum_664 << 1;
  if (_652 != 0)
    goto <bb 34>; [50.00%]
  else
    goto <bb 35>; [50.00%]

  <bb 34> [5.77%]:
  accum_667 = accum_666 | 1;

  <bb 35> [11.55%]:
  # accum_668 = PHI <accum_666(33), accum_667(34)>
  *_663 = accum_668;
  _676 = &extra_bits + 2;
  accum_677 = *_676;
  _678 = accum_677 & 32768;
  accum_679 = accum_677 << 1;
  if (_665 != 0)
    goto <bb 36>; [50.00%]
  else
    goto <bb 37>; [50.00%]

  <bb 36> [5.77%]:
  accum_680 = accum_679 | 1;

  <bb 37> [11.55%]:
  # accum_681 = PHI <accum_679(35), accum_680(36)>
  *_676 = accum_681;
  _689 = &extra_bits;
  accum_690 = *_689;
  _691 = accum_690 & 32768;
  accum_692 = accum_690 << 1;
  if (_678 != 0)
    goto <bb 38>; [50.00%]
  else
    goto <bb 39>; [50.00%]

  <bb 38> [5.77%]:
  accum_693 = accum_692 | 1;

  <bb 39> [11.55%]:
  # accum_694 = PHI <accum_692(37), accum_693(38)>
  *_689 = accum_694;
  if (_691 == 0)
    goto <bb 40>; [50.00%]
  else
    goto <bb 47>; [50.00%]

  <bb 40> [5.77%]:
  _630 = y_51(D)->mantissa[0];
  _631 = extra_bits[0];
  if (_630 > _631)
    goto <bb 48> (no_subtract); [5.00%]
  else
    goto <bb 41>; [95.00%]

  <bb 41> [5.48%]:
  if (_630 < _631)
    goto <bb 47>; [5.00%]
  else
    goto <bb 42>; [95.00%]

  <bb 42> [5.34%]:
  _634 = y_51(D)->mantissa[1];
  _635 = extra_bits[1];
  if (_634 > _635)
    goto <bb 48> (no_subtract); [5.00%]
  else
    goto <bb 43>; [95.00%]

  <bb 43> [5.07%]:
  if (_634 < _635)
    goto <bb 47>; [5.00%]
  else
    goto <bb 44>; [95.00%]

  <bb 44> [4.90%]:
  _638 = y_51(D)->mantissa[2];
  _639 = extra_bits[2];
  if (_638 > _639)
    goto <bb 48> (no_subtract); [5.00%]
  else
    goto <bb 45>; [95.00%]

  <bb 45> [4.66%]:
  if (_638 < _639)
    goto <bb 47>; [5.00%]
  else
    goto <bb 46>; [95.00%]

  <bb 46> [4.53%]:
  _642 = y_51(D)->mantissa[3];
  _643 = extra_bits[3];
  if (_642 > _643)
    goto <bb 48> (no_subtract); [5.00%]
  else
    goto <bb 47>; [95.00%]

  <bb 47> [10.72%]:
  # j_188 = PHI <3(39), 3(43), 3(45), 3(46), 3(41)>
  # carry_244 = PHI <0(39), 0(43), 0(45), 0(46), 0(41)>
  _568 = y_51(D)->mantissa[j_188];
  _569 = extra_bits[j_188];
  accum_570 = (unsigned int) _569;
  _571 = (unsigned int) _568;
  accum_572 = accum_570 - _571;
  _573 = (unsigned int) carry_244;
  accum_574 = accum_572 - _573;
  _575 = accum_574 >> 16;
  _576 = (short unsigned int) _575;
  _577 = _576 & 1;
  _578 = (short unsigned int) accum_574;
  MEM[(short unsigned int *)&extra_bits][j_188] = _578;
  j_580 = j_188 + -1;
  _584 = y_51(D)->mantissa[j_580];
  _585 = extra_bits[j_580];
  accum_586 = (unsigned int) _585;
  _587 = (unsigned int) _584;
  accum_588 = accum_586 - _587;
  _589 = (unsigned int) _577;
  accum_590 = accum_588 - _589;
  _591 = accum_590 >> 16;
  _592 = (short unsigned int) _591;
  _593 = _592 & 1;
  _594 = (short unsigned int) accum_590;
  MEM[(short unsigned int *)&extra_bits][j_580] = _594;
  j_596 = j_580 + -1;
  _600 = y_51(D)->mantissa[j_596];
  _601 = extra_bits[j_596];
  accum_602 = (unsigned int) _601;
  _603 = (unsigned int) _600;
  accum_604 = accum_602 - _603;
  _605 = (unsigned int) _593;
  accum_606 = accum_604 - _605;
  _607 = accum_606 >> 16;
  _608 = (short unsigned int) _607;
  _609 = _608 & 1;
  _610 = (short unsigned int) accum_606;
  MEM[(short unsigned int *)&extra_bits][j_596] = _610;
  j_612 = j_596 + -1;
  _616 = y_51(D)->mantissa[j_612];
  _617 = extra_bits[j_612];
  accum_618 = (unsigned int) _617;
  _619 = (unsigned int) _616;
  accum_620 = accum_618 - _619;
  _621 = (unsigned int) _609;
  accum_622 = accum_620 - _621;
  _623 = accum_622 >> 16;
  _624 = (short unsigned int) _623;
  _625 = _624 & 1;
  _626 = (short unsigned int) accum_622;
  MEM[(short unsigned int *)&extra_bits][j_612] = _626;
  j_628 = j_612 + -1;

  # carry_234 = PHI <0(40), 1(47), 0(46), 0(44), 0(42)>
no_subtract [11.55%]:
  _34 = &z_52(D)->mantissa;
  _518 = _34 + 6;
  accum_519 = *_518;
  _520 = accum_519 & 32768;
  accum_521 = accum_519 << 1;
  if (carry_234 != 0)
    goto <bb 49>; [50.00%]
  else
    goto <bb 50>; [50.00%]

  <bb 49> [5.77%]:
  accum_522 = accum_521 | 1;

  <bb 50> [11.55%]:
  # accum_523 = PHI <accum_521(48), accum_522(49)>
  *_518 = accum_523;
  _531 = _34 + 4;
  accum_532 = *_531;
  _533 = accum_532 & 32768;
  accum_534 = accum_532 << 1;
  if (_520 != 0)
    goto <bb 51>; [50.00%]
  else
    goto <bb 52>; [50.00%]

  <bb 51> [5.77%]:
  accum_535 = accum_534 | 1;

  <bb 52> [11.55%]:
  # accum_536 = PHI <accum_534(50), accum_535(51)>
  *_531 = accum_536;
  _544 = _34 + 2;
  accum_545 = *_544;
  _546 = accum_545 & 32768;
  accum_547 = accum_545 << 1;
  if (_533 != 0)
    goto <bb 53>; [50.00%]
  else
    goto <bb 54>; [50.00%]

  <bb 53> [5.77%]:
  accum_548 = accum_547 | 1;

  <bb 54> [11.55%]:
  # accum_549 = PHI <accum_547(52), accum_548(53)>
  *_544 = accum_549;
  _557 = _34;
  accum_558 = *_557;
  _559 = accum_558 & 32768;
  accum_560 = accum_558 << 1;
  if (_546 != 0)
    goto <bb 55>; [50.00%]
  else
    goto <bb 56>; [50.00%]

  <bb 55> [5.77%]:
  accum_561 = accum_560 | 1;

  <bb 56> [11.55%]:
  # accum_562 = PHI <accum_560(54), accum_561(55)>
  *_557 = accum_562;
  _35 = z_52(D)->exp;
  _36 = (unsigned short) _35;
  _37 = _36 + 65535;
  _38 = (short int) _37;
  z_52(D)->exp = _38;

  <bb 57> [13.58%]:
  _39 = z_52(D)->mantissa[0];
  _40 = (signed short) _39;
  if (_40 >= 0)
    goto <bb 58>; [85.00%]
  else
    goto <bb 72> (<L54>); [15.00%]

  <bb 58> [11.55%]:
  _702 = &locx.mantissa + 6;
  accum_703 = *_702;
  _704 = accum_703 & 32768;
  accum_705 = accum_703 << 1;
  *_702 = accum_705;
  _715 = &locx.mantissa + 4;
  accum_716 = *_715;
  _717 = accum_716 & 32768;
  accum_718 = accum_716 << 1;
  if (_704 != 0)
    goto <bb 59>; [50.00%]
  else
    goto <bb 60>; [50.00%]

  <bb 59> [5.77%]:
  accum_719 = accum_718 | 1;

  <bb 60> [11.55%]:
  # accum_720 = PHI <accum_718(58), accum_719(59)>
  *_715 = accum_720;
  _728 = &locx.mantissa + 2;
  accum_729 = *_728;
  _730 = accum_729 & 32768;
  accum_731 = accum_729 << 1;
  if (_717 != 0)
    goto <bb 61>; [50.00%]
  else
    goto <bb 62>; [50.00%]

  <bb 61> [5.77%]:
  accum_732 = accum_731 | 1;

  <bb 62> [11.55%]:
  # accum_733 = PHI <accum_731(60), accum_732(61)>
  *_728 = accum_733;
  _741 = &locx.mantissa;
  accum_742 = *_741;
  _743 = accum_742 & 32768;
  accum_744 = accum_742 << 1;
  if (_730 != 0)
    goto <bb 63>; [50.00%]
  else
    goto <bb 64>; [50.00%]

  <bb 63> [5.77%]:
  accum_745 = accum_744 | 1;

  <bb 64> [11.55%]:
  # accum_746 = PHI <accum_744(62), accum_745(63)>
  *_741 = accum_746;
  _650 = &extra_bits + 6;
  accum_651 = *_650;
  _652 = accum_651 & 32768;
  accum_653 = accum_651 << 1;
  if (_743 != 0)
    goto <bb 32>; [50.00%]
  else
    goto <bb 33>; [50.00%]

  <bb 65> [23.45%]:
  _238 = x_50(D)->mantissa[i_237];
  _239 = y_51(D)->mantissa[i_237];
  if (_238 > _239)
    goto <bb 66>; [5.00%]
  else
    goto <bb 67>; [95.00%]

  <bb 66> [1.17%]:
  _240 = __builtin_object_size (x_50(D), 0);
  __builtin___memmove_chk (x_50(D), z_52(D), 12, _240);
  goto <bb 72> (<L54>); [100.00%]

  <bb 67> [22.28%]:
  if (_238 < _239)
    goto <bb 68>; [5.00%]
  else
    goto <bb 69>; [95.00%]

  <bb 68> [1.11%]:
  _245 = __builtin_object_size (y_51(D), 0);
  __builtin___memmove_chk (y_51(D), z_52(D), 12, _245);
  goto <bb 72> (<L54>); [100.00%]

  <bb 69> [21.17%]:
  i_241 = i_237 + 1;

  # i_237 = PHI <0(3), i_241(69)>
<L61> [29.32%]:
  if (i_237 <= 3)
    goto <bb 65>; [80.00%]
  else
    goto <bb 71>; [20.00%]

  <bb 71> [5.86%]:
  _242 = __builtin_object_size (x_50(D), 0);
  __builtin___memmove_chk (x_50(D), z_52(D), 12, _242);

<L54> [81.50%]:
  _170 = z_52(D)->type;
  _171 = _170 + 255;
  if (_171 <= 1)
    goto <bb 73>; [24.54%]
  else
    goto <bb 97>; [75.46%]

  <bb 73> [20.00%]:
  _249 = &z_52(D)->mantissa;
  goto <bb 75>; [100.00%]

  <bb 74> [80.00%]:
  _251 = (long unsigned int) i_250;
  _252 = _251 * 2;
  _253 = _249 + _252;
  _254 = *_253;
  _255 = (int) _254;
  n_257 = _255 | n_256;
  i_258 = i_250 + 1;

  <bb 75> [100.00%]:
  # i_250 = PHI <0(73), i_258(74)>
  # n_256 = PHI <0(73), n_257(74)>
  if (i_250 <= 3)
    goto <bb 74>; [80.00%]
  else
    goto <bb 76>; [20.00%]

  <bb 76> [20.00%]:
  # n_259 = PHI <n_256(75)>
  if (n_259 == 0)
    goto <bb 77>; [33.00%]
  else
    goto <bb 78>; [67.00%]

  <bb 77> [6.60%]:
  __builtin_puts (&"Error:  zero significand in denormalize"[0]);

  <bb 78> [20.00%]:
  _260 = z_52(D)->exp;
  _261 = (int) _260;
  _262 = _261 + 32767;
  exponent_difference_263 = (long int) _262;
  if (exponent_difference_263 < 0)
    goto <bb 79>; [39.77%]
  else
    goto <bb 95>; [60.23%]

  <bb 79> [7.95%]:
  exponent_difference_264 = -exponent_difference_263;
  if (exponent_difference_263 < -63)
    goto <bb 80>; [67.00%]
  else
    goto <bb 81>; [33.00%]

  <bb 80> [5.33%]:
  z_52(D)->type = 0;
  z_52(D)->exp = -32767;
  z_52(D)->mantissa[0] = 0;
  i_315 = 1;
  z_52(D)->mantissa[i_315] = 0;
  i_319 = i_315 + 1;
  z_52(D)->mantissa[i_319] = 0;
  i_323 = i_319 + 1;
  z_52(D)->mantissa[i_323] = 0;
  i_327 = i_323 + 1;
  goto <bb 95>; [100.00%]

  <bb 81> [2.62%]:
  _267 = (unsigned short) _260;
  _268 = (unsigned short) exponent_difference_264;
  _269 = _267 + _268;
  _270 = (short int) _269;
  z_52(D)->exp = _270;
  _271 = (int) exponent_difference_264;
  mantissa_272 = &z_52(D)->mantissa;
  _273 = z_52(D)->type;
  if (_273 != 0)
    goto <bb 82>; [54.00%]
  else
    goto <bb 95>; [46.00%]

  <bb 82> [1.42%]:
  if (_271 > 63)
    goto <bb 84>; [50.00%]
  else
    goto <bb 83>; [50.00%]

  <bb 83> [0.71%]:
  goto <bb 87>; [100.00%]

  <bb 84> [0.71%]:
  # i_328 = PHI <0(82)>
  _330 = (long unsigned int) i_328;
  _331 = _330 * 2;
  _332 = mantissa_272 + _331;
  *_332 = 0;
  i_334 = i_328 + 1;
  _337 = (long unsigned int) i_334;
  _338 = _337 * 2;
  _339 = mantissa_272 + _338;
  *_339 = 0;
  i_341 = i_334 + 1;
  _344 = (long unsigned int) i_341;
  _345 = _344 * 2;
  _346 = mantissa_272 + _345;
  *_346 = 0;
  i_348 = i_341 + 1;
  MEM[(short unsigned int *)z_52(D) + 10B] = 1;
  goto <bb 95>; [100.00%]

  <bb 85> [2.01%]:
  _291 = MEM[(short unsigned int *)z_52(D) + 10B];
  _292 = _291 | 1;
  MEM[(short unsigned int *)z_52(D) + 10B] = _292;

  <bb 86> [4.02%]:
  i_294 = i_293 + 1;

  <bb 87> [4.72%]:
  # i_293 = PHI <0(83), i_294(86)>
  if (_271 > i_293)
    goto <bb 88>; [85.00%]
  else
    goto <bb 95>; [15.00%]

  <bb 88> [4.02%]:
  _354 = mantissa_272;
  accum_355 = *_354;
  _356 = accum_355 & 1;
  accum_357 = accum_355 >> 1;
  *_354 = accum_357;
  _367 = mantissa_272 + 2;
  accum_368 = *_367;
  _369 = accum_368 & 1;
  accum_370 = accum_368 >> 1;
  if (_356 != 0)
    goto <bb 89>; [50.00%]
  else
    goto <bb 90>; [50.00%]

  <bb 89> [2.01%]:
  accum_371 = accum_370 | 32768;

  <bb 90> [4.02%]:
  # accum_372 = PHI <accum_370(88), accum_371(89)>
  *_367 = accum_372;
  _380 = mantissa_272 + 4;
  accum_381 = *_380;
  _382 = accum_381 & 1;
  accum_383 = accum_381 >> 1;
  if (_369 != 0)
    goto <bb 91>; [50.00%]
  else
    goto <bb 92>; [50.00%]

  <bb 91> [2.01%]:
  accum_384 = accum_383 | 32768;

  <bb 92> [4.02%]:
  # accum_385 = PHI <accum_383(90), accum_384(91)>
  *_380 = accum_385;
  _393 = mantissa_272 + 6;
  accum_394 = *_393;
  _395 = accum_394 & 1;
  accum_396 = accum_394 >> 1;
  if (_382 != 0)
    goto <bb 93>; [50.00%]
  else
    goto <bb 94>; [50.00%]

  <bb 93> [2.01%]:
  accum_397 = accum_396 | 32768;

  <bb 94> [4.02%]:
  # accum_398 = PHI <accum_396(92), accum_397(93)>
  *_393 = accum_398;
  if (_395 != 0)
    goto <bb 85>; [50.00%]
  else
    goto <bb 86>; [50.00%]

  <bb 95> [20.00%]:
  _246 = z_52(D)->type;
  if (_246 != 0)
    goto <bb 96>; [54.00%]
  else
    goto <bb 97>; [46.00%]

  <bb 96> [10.80%]:
  _247 = z_52(D)->mantissa[3];
  _248 = _247 & 65528;
  z_52(D)->mantissa[3] = _248;

  <bb 97> [81.50%]:
  extra_bits ={v} {CLOBBER};
  locx ={v} {CLOBBER};
  return;

}



;; Function AddSubInternalFPF (AddSubInternalFPF, funcdef_no=49, decl_uid=2819, cgraph_uid=49, symbol_order=49)

Created preheader block for loop 18
Created preheader block for loop 19
Created preheader block for loop 20
Created preheader block for loop 2
Created preheader block for loop 1
Created preheader block for loop 7
Created preheader block for loop 8
Created preheader block for loop 9
Created preheader block for loop 10
Created preheader block for loop 11
Created preheader block for loop 12
Created preheader block for loop 15
;; 21 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 124 3 4 5 6 7 8 9 10 11 12 13 14 15 16 119 118 17 18 19 20 21 22 23 24 25 26 27 120 28 29 30 122 121 31 32 33 34 35 36 37 38 39 40 41 123 42 43 117 116 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 114 113 99 100 101 102 103 104 105 106 107 108 109 115 110 111 112
;;
;; Loop 16
;;  header 96, latch 95
;;  depth 1, outer 0
;;  nodes: 96 95
;;
;; Loop 18
;;  header 100, latch 99
;;  depth 1, outer 0
;;  nodes: 100 99
;;
;; Loop 19
;;  header 109, latch 108
;;  depth 1, outer 0
;;  nodes: 109 108 106 107 105 104 115 102 103
;;
;; Loop 20
;;  header 105, latch 104
;;  depth 2, outer 19
;;  nodes: 105 104 102 103
;;
;; Loop 17
;;  header 89, latch 88
;;  depth 1, outer 0
;;  nodes: 89 88
;;
;; Loop 13
;;  header 64, latch 62
;;  depth 1, outer 0
;;  nodes: 64 62 61 57 60 58 59
;;
;; Loop 14
;;  header 61, latch 60
;;  depth 2, outer 13
;;  nodes: 61 60 58 59
;;
;; Loop 4
;;  header 52, latch 51
;;  depth 1, outer 0
;;  nodes: 52 51
;;
;; Loop 3
;;  header 49, latch 48
;;  depth 1, outer 0
;;  nodes: 49 48
;;
;; Loop 2
;;  header 45, latch 44
;;  depth 1, outer 0
;;  nodes: 45 44
;;
;; Loop 5
;;  header 72, latch 71
;;  depth 1, outer 0
;;  nodes: 72 71 69 70
;;
;; Loop 1
;;  header 66, latch 65
;;  depth 1, outer 0
;;  nodes: 66 65
;;
;; Loop 7
;;  header 18, latch 17
;;  depth 1, outer 0
;;  nodes: 18 17
;;
;; Loop 8
;;  header 27, latch 26
;;  depth 1, outer 0
;;  nodes: 27 26 24 25 23 22 120 20 21
;;
;; Loop 9
;;  header 23, latch 22
;;  depth 2, outer 8
;;  nodes: 23 22 20 21
;;
;; Loop 10
;;  header 32, latch 31
;;  depth 1, outer 0
;;  nodes: 32 31
;;
;; Loop 11
;;  header 41, latch 40
;;  depth 1, outer 0
;;  nodes: 41 40 38 39 37 36 123 34 35
;;
;; Loop 12
;;  header 37, latch 36
;;  depth 2, outer 11
;;  nodes: 37 36 34 35
;;
;; Loop 6
;;  header 78, latch 77
;;  depth 1, outer 0
;;  nodes: 78 77
;;
;; Loop 15
;;  header 84, latch 83
;;  depth 1, outer 0
;;  nodes: 84 83 81 79
;; 2 succs { 86 3 7 6 5 8 76 124 }
;; 124 succs { 84 }
;; 3 succs { 4 86 }
;; 4 succs { 86 }
;; 5 succs { 86 }
;; 6 succs { 86 }
;; 7 succs { 86 }
;; 8 succs { 9 14 }
;; 9 succs { 11 10 }
;; 10 succs { 11 12 }
;; 11 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 43 }
;; 14 succs { 15 29 }
;; 15 succs { 16 28 }
;; 16 succs { 118 119 }
;; 119 succs { 27 }
;; 118 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 17 19 }
;; 19 succs { 28 }
;; 20 succs { 21 22 }
;; 21 succs { 22 }
;; 22 succs { 23 }
;; 23 succs { 20 24 }
;; 24 succs { 25 26 }
;; 25 succs { 26 }
;; 26 succs { 27 }
;; 27 succs { 120 28 }
;; 120 succs { 23 }
;; 28 succs { 43 }
;; 29 succs { 30 42 }
;; 30 succs { 121 122 }
;; 122 succs { 41 }
;; 121 succs { 32 }
;; 31 succs { 32 }
;; 32 succs { 31 33 }
;; 33 succs { 42 }
;; 34 succs { 35 36 }
;; 35 succs { 36 }
;; 36 succs { 37 }
;; 37 succs { 34 38 }
;; 38 succs { 39 40 }
;; 39 succs { 40 }
;; 40 succs { 41 }
;; 41 succs { 123 42 }
;; 123 succs { 37 }
;; 42 succs { 43 }
;; 43 succs { 116 117 }
;; 117 succs { 66 }
;; 116 succs { 45 }
;; 44 succs { 45 }
;; 45 succs { 44 46 }
;; 46 succs { 47 50 }
;; 47 succs { 49 }
;; 48 succs { 49 }
;; 49 succs { 48 50 }
;; 50 succs { 52 }
;; 51 succs { 52 }
;; 52 succs { 51 53 }
;; 53 succs { 54 55 }
;; 54 succs { 86 }
;; 55 succs { 63 56 }
;; 56 succs { 63 86 }
;; 57 succs { 61 }
;; 58 succs { 59 60 }
;; 59 succs { 60 }
;; 60 succs { 61 }
;; 61 succs { 58 62 }
;; 62 succs { 64 }
;; 63 succs { 64 }
;; 64 succs { 57 86 }
;; 65 succs { 66 }
;; 66 succs { 65 67 }
;; 67 succs { 68 74 }
;; 68 succs { 72 }
;; 69 succs { 70 71 }
;; 70 succs { 71 }
;; 71 succs { 72 }
;; 72 succs { 69 73 }
;; 73 succs { 86 }
;; 74 succs { 75 86 }
;; 75 succs { 86 }
;; 76 succs { 78 }
;; 77 succs { 78 }
;; 78 succs { 77 86 }
;; 79 succs { 80 81 }
;; 80 succs { 86 }
;; 81 succs { 82 83 }
;; 82 succs { 86 }
;; 83 succs { 84 }
;; 84 succs { 79 85 }
;; 85 succs { 86 }
;; 86 succs { 87 112 }
;; 87 succs { 89 }
;; 88 succs { 89 }
;; 89 succs { 88 90 }
;; 90 succs { 91 92 }
;; 91 succs { 92 }
;; 92 succs { 93 110 }
;; 93 succs { 94 97 }
;; 94 succs { 96 }
;; 95 succs { 96 }
;; 96 succs { 95 110 }
;; 97 succs { 98 110 }
;; 98 succs { 113 114 }
;; 114 succs { 109 }
;; 113 succs { 100 }
;; 99 succs { 100 }
;; 100 succs { 99 101 }
;; 101 succs { 110 }
;; 102 succs { 103 104 }
;; 103 succs { 104 }
;; 104 succs { 105 }
;; 105 succs { 102 106 }
;; 106 succs { 107 108 }
;; 107 succs { 108 }
;; 108 succs { 109 }
;; 109 succs { 115 110 }
;; 115 succs { 105 }
;; 110 succs { 111 112 }
;; 111 succs { 112 }
;; 112 succs { 1 }
Removing basic block 230
Removing basic block 231
Removing basic block 232
Removing basic block 233
Removing basic block 234
Removing basic block 235
Removing basic block 236
Removing basic block 237
Removing basic block 238
Removing basic block 239
Removing basic block 240
Removing basic block 241
Removing basic block 242
Removing basic block 243
Removing basic block 244
Removing basic block 245
Removing basic block 246
Removing basic block 247
Removing basic block 248
Removing basic block 249
Removing basic block 250
Removing basic block 251
Removing basic block 252
Removing basic block 253
Removing basic block 254
Removing basic block 255
Removing basic block 256
Removing basic block 257
Removing basic block 258
Removing basic block 259
Removing basic block 260
Removing basic block 261

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

i_61 -> { i_263 }
.MEM_63 -> { .MEM_333 }
i_68 -> { i_264 }
.MEM_84 -> { .MEM_306 }
i_164 -> { i_264 }
.MEM_171 -> { .MEM_306 }
i_194 -> { i_263 }
.MEM_240 -> { .MEM_333 }
i_335 -> { i_263 }
.MEM_336 -> { .MEM_306 }
.MEM_337 -> { .MEM_333 }
i_338 -> { i_264 }
i_339 -> { i_263 }
.MEM_340 -> { .MEM_306 }
.MEM_341 -> { .MEM_333 }
i_342 -> { i_264 }
i_343 -> { i_272 }
.MEM_344 -> { .MEM_307 }
_345 -> { _273 }
_346 -> { _274 }
_347 -> { _275 }
.MEM_348 -> { .MEM_330 }
i_349 -> { i_276 }
i_350 -> { i_272 }
.MEM_351 -> { .MEM_307 }
_352 -> { _273 }
_353 -> { _274 }
_354 -> { _275 }
.MEM_355 -> { .MEM_330 }
i_356 -> { i_276 }
i_357 -> { i_272 }
.MEM_358 -> { .MEM_307 }
_359 -> { _273 }
_360 -> { _274 }
_361 -> { _275 }
.MEM_362 -> { .MEM_330 }
i_363 -> { i_276 }
i_364 -> { i_277 }
carry_365 -> { carry_284 }
.MEM_366 -> { .MEM_308 }
_367 -> { _278 }
_368 -> { _279 }
_369 -> { _280 }
accum_370 -> { accum_281 }
_371 -> { _282 }
accum_372 -> { accum_283 }
accum_373 -> { accum_285 }
accum_374 -> { accum_286 }
.MEM_375 -> { .MEM_328 }
i_376 -> { i_287 }
i_377 -> { i_277 }
carry_378 -> { carry_284 }
.MEM_379 -> { .MEM_308 }
_380 -> { _278 }
_381 -> { _279 }
_382 -> { _280 }
accum_383 -> { accum_281 }
_384 -> { _282 }
accum_385 -> { accum_283 }
accum_386 -> { accum_285 }
accum_387 -> { accum_286 }
.MEM_388 -> { .MEM_328 }
i_389 -> { i_287 }
i_390 -> { i_277 }
carry_391 -> { carry_284 }
.MEM_392 -> { .MEM_308 }
_393 -> { _278 }
_394 -> { _279 }
_395 -> { _280 }
accum_396 -> { accum_281 }
_397 -> { _282 }
accum_398 -> { accum_283 }
accum_399 -> { accum_285 }
accum_400 -> { accum_286 }
.MEM_401 -> { .MEM_328 }
i_402 -> { i_287 }
i_403 -> { i_277 }
carry_404 -> { carry_284 }
.MEM_405 -> { .MEM_308 }
_406 -> { _278 }
_407 -> { _279 }
_408 -> { _280 }
accum_409 -> { accum_281 }
_410 -> { _282 }
accum_411 -> { accum_283 }
accum_412 -> { accum_285 }
accum_413 -> { accum_286 }
.MEM_414 -> { .MEM_328 }
i_415 -> { i_287 }
i_416 -> { i_218 }
carry_417 -> { carry_225 }
.MEM_418 -> { .MEM_303 }
_419 -> { _219 }
_420 -> { _220 }
_421 -> { _221 }
accum_422 -> { accum_222 }
_423 -> { _223 }
accum_424 -> { accum_224 }
accum_425 -> { accum_226 }
accum_426 -> { accum_227 }
.MEM_427 -> { .MEM_324 }
i_428 -> { i_228 }
i_429 -> { i_218 }
carry_430 -> { carry_225 }
.MEM_431 -> { .MEM_303 }
_432 -> { _219 }
_433 -> { _220 }
_434 -> { _221 }
accum_435 -> { accum_222 }
_436 -> { _223 }
accum_437 -> { accum_224 }
accum_438 -> { accum_226 }
accum_439 -> { accum_227 }
.MEM_440 -> { .MEM_324 }
i_441 -> { i_228 }
i_442 -> { i_218 }
carry_443 -> { carry_225 }
.MEM_444 -> { .MEM_303 }
_445 -> { _219 }
_446 -> { _220 }
_447 -> { _221 }
accum_448 -> { accum_222 }
_449 -> { _223 }
accum_450 -> { accum_224 }
accum_451 -> { accum_226 }
accum_452 -> { accum_227 }
.MEM_453 -> { .MEM_324 }
i_454 -> { i_228 }
i_455 -> { i_218 }
carry_456 -> { carry_225 }
.MEM_457 -> { .MEM_303 }
_458 -> { _219 }
_459 -> { _220 }
_460 -> { _221 }
accum_461 -> { accum_222 }
_462 -> { _223 }
accum_463 -> { accum_224 }
accum_464 -> { accum_226 }
accum_465 -> { accum_227 }
.MEM_466 -> { .MEM_324 }
i_467 -> { i_228 }
i_468 -> { i_173 }
.MEM_469 -> { .MEM_293 }
_470 -> { _174 }
_471 -> { _175 }
_472 -> { _176 }
.MEM_473 -> { .MEM_322 }
i_474 -> { i_177 }
i_475 -> { i_173 }
.MEM_476 -> { .MEM_293 }
_477 -> { _174 }
_478 -> { _175 }
_479 -> { _176 }
.MEM_480 -> { .MEM_322 }
i_481 -> { i_177 }
i_482 -> { i_173 }
.MEM_483 -> { .MEM_293 }
_484 -> { _174 }
_485 -> { _175 }
_486 -> { _176 }
.MEM_487 -> { .MEM_322 }
i_488 -> { i_177 }
i_489 -> { i_178 }
carry_490 -> { carry_185 }
.MEM_491 -> { .MEM_294 }
_492 -> { _179 }
_493 -> { _180 }
_494 -> { _181 }
accum_495 -> { accum_182 }
_496 -> { _183 }
accum_497 -> { accum_184 }
accum_498 -> { accum_186 }
accum_499 -> { accum_187 }
.MEM_500 -> { .MEM_320 }
i_501 -> { i_188 }
i_502 -> { i_178 }
carry_503 -> { carry_185 }
.MEM_504 -> { .MEM_294 }
_505 -> { _179 }
_506 -> { _180 }
_507 -> { _181 }
accum_508 -> { accum_182 }
_509 -> { _183 }
accum_510 -> { accum_184 }
accum_511 -> { accum_186 }
accum_512 -> { accum_187 }
.MEM_513 -> { .MEM_320 }
i_514 -> { i_188 }
i_515 -> { i_178 }
carry_516 -> { carry_185 }
.MEM_517 -> { .MEM_294 }
_518 -> { _179 }
_519 -> { _180 }
_520 -> { _181 }
accum_521 -> { accum_182 }
_522 -> { _183 }
accum_523 -> { accum_184 }
accum_524 -> { accum_186 }
accum_525 -> { accum_187 }
.MEM_526 -> { .MEM_320 }
i_527 -> { i_188 }
i_528 -> { i_178 }
carry_529 -> { carry_185 }
.MEM_530 -> { .MEM_294 }
_531 -> { _179 }
_532 -> { _180 }
_533 -> { _181 }
accum_534 -> { accum_182 }
_535 -> { _183 }
accum_536 -> { accum_184 }
accum_537 -> { accum_186 }
accum_538 -> { accum_187 }
.MEM_539 -> { .MEM_320 }
i_540 -> { i_188 }
i_541 -> { i_196 }
.MEM_542 -> { .MEM_298 }
_543 -> { _197 }
_544 -> { _198 }
_545 -> { _199 }
.MEM_546 -> { .MEM_318 }
i_547 -> { i_200 }
i_548 -> { i_196 }
.MEM_549 -> { .MEM_298 }
_550 -> { _197 }
_551 -> { _198 }
_552 -> { _199 }
.MEM_553 -> { .MEM_318 }
i_554 -> { i_200 }
i_555 -> { i_196 }
.MEM_556 -> { .MEM_298 }
_557 -> { _197 }
_558 -> { _198 }
_559 -> { _199 }
.MEM_560 -> { .MEM_318 }
i_561 -> { i_200 }
i_562 -> { i_201 }
carry_563 -> { carry_208 }
.MEM_564 -> { .MEM_299 }
_565 -> { _202 }
_566 -> { _203 }
_567 -> { _204 }
accum_568 -> { accum_205 }
_569 -> { _206 }
accum_570 -> { accum_207 }
accum_571 -> { accum_209 }
accum_572 -> { accum_210 }
.MEM_573 -> { .MEM_316 }
i_574 -> { i_211 }
i_575 -> { i_201 }
carry_576 -> { carry_208 }
.MEM_577 -> { .MEM_299 }
_578 -> { _202 }
_579 -> { _203 }
_580 -> { _204 }
accum_581 -> { accum_205 }
_582 -> { _206 }
accum_583 -> { accum_207 }
accum_584 -> { accum_209 }
accum_585 -> { accum_210 }
.MEM_586 -> { .MEM_316 }
i_587 -> { i_211 }
i_588 -> { i_201 }
carry_589 -> { carry_208 }
.MEM_590 -> { .MEM_299 }
_591 -> { _202 }
_592 -> { _203 }
_593 -> { _204 }
accum_594 -> { accum_205 }
_595 -> { _206 }
accum_596 -> { accum_207 }
accum_597 -> { accum_209 }
accum_598 -> { accum_210 }
.MEM_599 -> { .MEM_316 }
i_600 -> { i_211 }
i_601 -> { i_201 }
carry_602 -> { carry_208 }
.MEM_603 -> { .MEM_299 }
_604 -> { _202 }
_605 -> { _203 }
_606 -> { _204 }
accum_607 -> { accum_205 }
_608 -> { _206 }
accum_609 -> { accum_207 }
accum_610 -> { accum_209 }
accum_611 -> { accum_210 }
.MEM_612 -> { .MEM_316 }
i_613 -> { i_211 }
i_614 -> { i_140 }
.MEM_615 -> { .MEM_145 }
.MEM_616 -> { .MEM_151 }
i_617 -> { i_141 }
i_618 -> { i_140 }
.MEM_619 -> { .MEM_145 }
.MEM_620 -> { .MEM_151 }
i_621 -> { i_141 }
i_622 -> { i_140 }
.MEM_623 -> { .MEM_145 }
.MEM_624 -> { .MEM_151 }
i_625 -> { i_141 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 262
Number of blocks to update: 137 ( 52%)


Removing basic block 225
Removing basic block 17
Removing basic block 224
Removing basic block 21
Removing basic block 22
Removing basic block 20
Removing basic block 223
Removing basic block 31
Removing basic block 222
Removing basic block 35
Removing basic block 36
Removing basic block 34
Removing basic block 226
Removing basic block 59
Removing basic block 60
Removing basic block 58
Removing basic block 221
Removing basic block 77
Removing basic block 229
Removing basic block 95
Removing basic block 228
Removing basic block 99
Removing basic block 227
Removing basic block 103
Removing basic block 104
Removing basic block 102
Removing basic block 141
Removing basic block 157
Removing basic block 179
Removing basic block 201
Merging blocks 57 and 155
Merging blocks 76 and 215
Merging blocks 94 and 125
Removing basic block 113
Removing basic block 115
Removing basic block 118
Removing basic block 120
Removing basic block 121
Removing basic block 123
Merging blocks 133 and 134
Merging blocks 139 and 140
Merging blocks 146 and 147
Merging blocks 150 and 151
Merging blocks 154 and 105
Merging blocks 162 and 163
Merging blocks 166 and 167
Merging blocks 170 and 61
Merging blocks 171 and 172
Merging blocks 177 and 178
Merging blocks 184 and 185
Merging blocks 188 and 189
Merging blocks 192 and 23
Merging blocks 193 and 194
Merging blocks 199 and 200
Merging blocks 206 and 207
Merging blocks 210 and 211
Merging blocks 214 and 37
Merging blocks 57 and 156
Merging blocks 57 and 158
Merging blocks 57 and 159
Merging blocks 57 and 160
Merging blocks 76 and 216
Merging blocks 76 and 217
Merging blocks 76 and 218
Merging blocks 76 and 219
Merging blocks 76 and 220
Merging blocks 76 and 78
Merging blocks 94 and 126
Merging blocks 94 and 127
Merging blocks 94 and 128
Merging blocks 94 and 129
Merging blocks 94 and 130
Merging blocks 94 and 131
Merging blocks 94 and 132
Merging blocks 94 and 96
Merging blocks 133 and 135
Merging blocks 133 and 136
Merging blocks 133 and 137
Merging blocks 133 and 138
Merging blocks 133 and 100
Merging blocks 133 and 101
Merging blocks 139 and 142
Merging blocks 139 and 143
Merging blocks 139 and 144
Merging blocks 146 and 148
Merging blocks 150 and 152
Merging blocks 154 and 106
Merging blocks 162 and 164
Merging blocks 166 and 168
Merging blocks 170 and 62
Merging blocks 171 and 173
Merging blocks 171 and 174
Merging blocks 171 and 175
Merging blocks 171 and 176
Merging blocks 171 and 18
Merging blocks 171 and 19
Merging blocks 177 and 180
Merging blocks 177 and 181
Merging blocks 177 and 182
Merging blocks 184 and 186
Merging blocks 188 and 190
Merging blocks 192 and 24
Merging blocks 193 and 195
Merging blocks 193 and 196
Merging blocks 193 and 197
Merging blocks 193 and 198
Merging blocks 193 and 32
Merging blocks 193 and 33
Merging blocks 199 and 202
Merging blocks 199 and 203
Merging blocks 199 and 204
Merging blocks 206 and 208
Merging blocks 210 and 212
Merging blocks 214 and 38
AddSubInternalFPF (unsigned char operation, struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  int i;
  short unsigned int carry;
  short unsigned int * mantissa;
  short unsigned int accum;
  int i;
  int i;
  int i;
  int n;
  long int exponent_difference;
  int i;
  short unsigned int carry;
  short unsigned int accum;
  int i;
  int i;
  short unsigned int carry;
  short unsigned int * mantissa;
  short unsigned int accum;
  int i;
  int i;
  short unsigned int carry;
  short unsigned int * mantissa;
  short unsigned int accum;
  int i;
  int i;
  int i;
  short unsigned int accum;
  unsigned int accum;
  int i;
  int n;
  unsigned int accum;
  unsigned int accum;
  struct InternalFPF locy;
  struct InternalFPF locx;
  int i;
  short unsigned int carry;
  short unsigned int borrow;
  int exponent_difference;
  unsigned char _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  short int _12;
  int _13;
  short int _14;
  int _15;
  unsigned char _17;
  unsigned char _18;
  unsigned char _19;
  short int _20;
  int _21;
  unsigned char _22;
  unsigned char _23;
  unsigned char _24;
  short int _25;
  unsigned char _26;
  unsigned char _27;
  unsigned char _28;
  short unsigned int _29;
  short unsigned int _30;
  unsigned char _31;
  short unsigned int _32;
  short unsigned int[4] * _33;
  unsigned char _34;
  unsigned char _35;
  short unsigned int _36;
  short unsigned int _37;
  short int _38;
  unsigned short _39;
  unsigned short _40;
  short int _41;
  short unsigned int[4] * _42;
  short unsigned int _43;
  short unsigned int _44;
  short unsigned int _45;
  signed short _46;
  long unsigned int _83;
  long unsigned int _92;
  long unsigned int _93;
  long unsigned int _94;
  unsigned int _96;
  unsigned int _98;
  unsigned int _100;
  short unsigned int _101;
  short unsigned int _102;
  short unsigned int _103;
  unsigned int _104;
  unsigned int _106;
  unsigned int _108;
  short unsigned int _109;
  short unsigned int _110;
  short unsigned int _111;
  long unsigned int _113;
  long unsigned int _114;
  short unsigned int * _115;
  short unsigned int _116;
  int _117;
  unsigned int _122;
  unsigned int _124;
  unsigned int _126;
  short unsigned int _127;
  short unsigned int _128;
  short unsigned int _129;
  long unsigned int _131;
  long unsigned int _132;
  short unsigned int * _133;
  short unsigned int _135;
  unsigned char _142;
  unsigned char _143;
  unsigned char _172;
  short unsigned int _190;
  short unsigned int _191;
  unsigned char _195;
  short unsigned int _213;
  short unsigned int _214;
  short unsigned int[4] * _217;
  short int _229;
  unsigned short _230;
  unsigned short _231;
  short int _232;
  short unsigned int _233;
  signed short _234;
  short unsigned int _236;
  short unsigned int _237;
  long unsigned int _238;
  long unsigned int _241;
  long unsigned int _243;
  unsigned char _244;
  short unsigned int _245;
  short unsigned int _246;
  short unsigned int[4] * _247;
  long unsigned int _249;
  long unsigned int _250;
  short unsigned int * _251;
  short unsigned int _252;
  int _253;
  short int _258;
  int _259;
  int _260;
  unsigned short _265;
  unsigned short _266;
  unsigned short _267;
  short int _268;
  int _269;
  unsigned char _271;
  short unsigned int _289;
  short unsigned int _290;
  long unsigned int _345;
  long unsigned int _346;
  short unsigned int * _347;
  long unsigned int _352;
  long unsigned int _353;
  short unsigned int * _354;
  long unsigned int _359;
  long unsigned int _360;
  short unsigned int * _361;
  short unsigned int * _369;
  short unsigned int _371;
  short unsigned int * _382;
  short unsigned int _384;
  short unsigned int * _395;
  short unsigned int _397;
  short unsigned int * _408;
  short unsigned int _410;
  short unsigned int * _421;
  short unsigned int _423;
  short unsigned int * _434;
  short unsigned int _436;
  short unsigned int * _447;
  short unsigned int _449;
  short unsigned int * _460;
  short unsigned int _462;
  long unsigned int _470;
  long unsigned int _471;
  short unsigned int * _472;
  long unsigned int _477;
  long unsigned int _478;
  short unsigned int * _479;
  long unsigned int _484;
  long unsigned int _485;
  short unsigned int * _486;
  short unsigned int * _494;
  short unsigned int _496;
  short unsigned int * _507;
  short unsigned int _509;
  short unsigned int * _520;
  short unsigned int _522;
  short unsigned int * _533;
  short unsigned int _535;
  long unsigned int _543;
  long unsigned int _544;
  short unsigned int * _545;
  long unsigned int _550;
  long unsigned int _551;
  short unsigned int * _552;
  long unsigned int _557;
  long unsigned int _558;
  short unsigned int * _559;
  short unsigned int * _567;
  short unsigned int _569;
  short unsigned int * _580;
  short unsigned int _582;
  short unsigned int * _593;
  short unsigned int _595;
  short unsigned int * _606;
  short unsigned int _608;

  <bb 2> [81.50%]:
  _1 = x_58(D)->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y_59(D)->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L63> [12.50%], case 0: <L67> [12.50%], case 1 ... 3: <L70> [12.50%], case 4: <L69> [12.50%], case 5: <L68> [12.50%], case 6 ... 7: <L71> [12.50%], case 8: <L70> [12.50%], case 9: <L69> [12.50%], case 10: <L68> [12.50%], case 11 ... 12: <L71> [12.50%], case 13: <L70> [12.50%], case 14: <L69> [12.50%], case 15 ... 17: <L68> [12.50%], case 18: <L72> [12.50%], case 19: <L69> [12.50%], case 20 ... 23: <L68> [12.50%], case 24: <L75> [12.50%]>

<L75> [10.19%]:
  goto <bb 88> (<L74>); [100.00%]

<L67> [10.19%]:
  _83 = __builtin_object_size (x_58(D), 0);
  __builtin___memmove_chk (x_58(D), z_60(D), 12, _83);
  _7 = x_58(D)->sign;
  _8 = y_59(D)->sign;
  _9 = _7 ^ _8;
  if (_9 != operation_65(D))
    goto <bb 5>; [66.00%]
  else
    goto <bb 90> (<L63>); [34.00%]

  <bb 5> [6.72%]:
  z_60(D)->sign = 0;
  goto <bb 90> (<L63>); [100.00%]

<L68> [10.19%]:
  _92 = __builtin_object_size (x_58(D), 0);
  __builtin___memmove_chk (x_58(D), z_60(D), 12, _92);
  goto <bb 90> (<L63>); [100.00%]

<L69> [10.19%]:
  _93 = __builtin_object_size (y_59(D), 0);
  __builtin___memmove_chk (y_59(D), z_60(D), 12, _93);
  goto <bb 90> (<L63>); [100.00%]

<L70> [10.19%]:
  _94 = __builtin_object_size (y_59(D), 0);
  __builtin___memmove_chk (y_59(D), z_60(D), 12, _94);
  _10 = z_60(D)->sign;
  _11 = _10 ^ operation_65(D);
  z_60(D)->sign = _11;
  goto <bb 90> (<L63>); [100.00%]

<L71> [10.19%]:
  __builtin_memcpy (&locx, x_58(D), 12);
  __builtin_memcpy (&locy, y_59(D), 12);
  _12 = locx.exp;
  _13 = (int) _12;
  _14 = locy.exp;
  _15 = (int) _14;
  exponent_difference_62 = _13 - _15;
  if (exponent_difference_62 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 15>; [50.00%]

  <bb 10> [5.09%]:
  if (_1 == 1)
    goto <bb 12>; [34.00%]
  else
    goto <bb 11>; [66.00%]

  <bb 11> [3.36%]:
  if (_4 == 1)
    goto <bb 12>; [34.00%]
  else
    goto <bb 13>; [66.00%]

  <bb 12> [2.87%]:
  z_60(D)->type = 1;
  goto <bb 14>; [100.00%]

  <bb 13> [2.22%]:
  z_60(D)->type = 2;

  <bb 14> [5.09%]:
  _17 = locx.sign;
  z_60(D)->sign = _17;
  z_60(D)->exp = _12;
  goto <bb 46>; [100.00%]

  <bb 15> [5.09%]:
  if (exponent_difference_62 > 0)
    goto <bb 16>; [64.00%]
  else
    goto <bb 31>; [36.00%]

  <bb 16> [3.26%]:
  _172 = locy.type;
  if (_172 != 0)
    goto <bb 17>; [54.00%]
  else
    goto <bb 30>; [46.00%]

  <bb 17> [1.76%]:
  if (exponent_difference_62 > 63)
    goto <bb 19>; [50.00%]
  else
    goto <bb 18>; [50.00%]

  <bb 18> [0.88%]:
  goto <bb 22>; [100.00%]

  <bb 19> [0.88%]:
  # i_468 = PHI <0(17)>
  _470 = (long unsigned int) i_468;
  _471 = _470 * 2;
  _472 = &locy.mantissa + _471;
  *_472 = 0;
  i_474 = i_468 + 1;
  _477 = (long unsigned int) i_474;
  _478 = _477 * 2;
  _479 = &locy.mantissa + _478;
  *_479 = 0;
  i_481 = i_474 + 1;
  _484 = (long unsigned int) i_481;
  _485 = _484 * 2;
  _486 = &locy.mantissa + _485;
  *_486 = 0;
  i_488 = i_481 + 1;
  MEM[(short unsigned int *)&locy + 10B] = 1;
  goto <bb 30>; [100.00%]

  <bb 20> [2.49%]:
  _190 = MEM[(short unsigned int *)&locy + 10B];
  _191 = _190 | 1;
  MEM[(short unsigned int *)&locy + 10B] = _191;

  <bb 21> [4.99%]:
  i_193 = i_192 + 1;

  <bb 22> [5.87%]:
  # i_192 = PHI <0(18), i_193(21)>
  if (exponent_difference_62 > i_192)
    goto <bb 23>; [85.00%]
  else
    goto <bb 30>; [15.00%]

  <bb 23> [4.99%]:
  _494 = &locy.mantissa;
  accum_495 = *_494;
  _496 = accum_495 & 1;
  accum_497 = accum_495 >> 1;
  *_494 = accum_497;
  _507 = &locy.mantissa + 2;
  accum_508 = *_507;
  _509 = accum_508 & 1;
  accum_510 = accum_508 >> 1;
  if (_496 != 0)
    goto <bb 24>; [50.00%]
  else
    goto <bb 25>; [50.00%]

  <bb 24> [2.50%]:
  accum_511 = accum_510 | 32768;

  <bb 25> [4.99%]:
  # accum_512 = PHI <accum_510(23), accum_511(24)>
  *_507 = accum_512;
  _520 = &locy.mantissa + 4;
  accum_521 = *_520;
  _522 = accum_521 & 1;
  accum_523 = accum_521 >> 1;
  if (_509 != 0)
    goto <bb 26>; [50.00%]
  else
    goto <bb 27>; [50.00%]

  <bb 26> [2.50%]:
  accum_524 = accum_523 | 32768;

  <bb 27> [4.99%]:
  # accum_525 = PHI <accum_523(25), accum_524(26)>
  *_520 = accum_525;
  _533 = &locy.mantissa + 6;
  accum_534 = *_533;
  _535 = accum_534 & 1;
  accum_536 = accum_534 >> 1;
  if (_522 != 0)
    goto <bb 28>; [50.00%]
  else
    goto <bb 29>; [50.00%]

  <bb 28> [2.50%]:
  accum_537 = accum_536 | 32768;

  <bb 29> [4.99%]:
  # accum_538 = PHI <accum_536(27), accum_537(28)>
  *_533 = accum_538;
  if (_535 != 0)
    goto <bb 20>; [50.00%]
  else
    goto <bb 21>; [50.00%]

  <bb 30> [3.26%]:
  _18 = locx.type;
  z_60(D)->type = _18;
  _19 = locx.sign;
  z_60(D)->sign = _19;
  _20 = locx.exp;
  z_60(D)->exp = _20;
  goto <bb 46>; [100.00%]

  <bb 31> [1.83%]:
  _21 = -exponent_difference_62;
  _195 = locx.type;
  if (_195 != 0)
    goto <bb 32>; [54.00%]
  else
    goto <bb 45>; [46.00%]

  <bb 32> [0.99%]:
  if (_21 > 63)
    goto <bb 34>; [50.00%]
  else
    goto <bb 33>; [50.00%]

  <bb 33> [0.50%]:
  goto <bb 37>; [100.00%]

  <bb 34> [0.50%]:
  # i_541 = PHI <0(32)>
  _543 = (long unsigned int) i_541;
  _544 = _543 * 2;
  _545 = &locx.mantissa + _544;
  *_545 = 0;
  i_547 = i_541 + 1;
  _550 = (long unsigned int) i_547;
  _551 = _550 * 2;
  _552 = &locx.mantissa + _551;
  *_552 = 0;
  i_554 = i_547 + 1;
  _557 = (long unsigned int) i_554;
  _558 = _557 * 2;
  _559 = &locx.mantissa + _558;
  *_559 = 0;
  i_561 = i_554 + 1;
  MEM[(short unsigned int *)&locx + 10B] = 1;
  goto <bb 45>; [100.00%]

  <bb 35> [1.40%]:
  _213 = MEM[(short unsigned int *)&locx + 10B];
  _214 = _213 | 1;
  MEM[(short unsigned int *)&locx + 10B] = _214;

  <bb 36> [2.81%]:
  i_216 = i_215 + 1;

  <bb 37> [3.30%]:
  # i_215 = PHI <0(33), i_216(36)>
  if (_21 > i_215)
    goto <bb 38>; [85.00%]
  else
    goto <bb 45>; [15.00%]

  <bb 38> [2.81%]:
  _567 = &locx.mantissa;
  accum_568 = *_567;
  _569 = accum_568 & 1;
  accum_570 = accum_568 >> 1;
  *_567 = accum_570;
  _580 = &locx.mantissa + 2;
  accum_581 = *_580;
  _582 = accum_581 & 1;
  accum_583 = accum_581 >> 1;
  if (_569 != 0)
    goto <bb 39>; [50.00%]
  else
    goto <bb 40>; [50.00%]

  <bb 39> [1.40%]:
  accum_584 = accum_583 | 32768;

  <bb 40> [2.81%]:
  # accum_585 = PHI <accum_583(38), accum_584(39)>
  *_580 = accum_585;
  _593 = &locx.mantissa + 4;
  accum_594 = *_593;
  _595 = accum_594 & 1;
  accum_596 = accum_594 >> 1;
  if (_582 != 0)
    goto <bb 41>; [50.00%]
  else
    goto <bb 42>; [50.00%]

  <bb 41> [1.40%]:
  accum_597 = accum_596 | 32768;

  <bb 42> [2.81%]:
  # accum_598 = PHI <accum_596(40), accum_597(41)>
  *_593 = accum_598;
  _606 = &locx.mantissa + 6;
  accum_607 = *_606;
  _608 = accum_607 & 1;
  accum_609 = accum_607 >> 1;
  if (_595 != 0)
    goto <bb 43>; [50.00%]
  else
    goto <bb 44>; [50.00%]

  <bb 43> [1.40%]:
  accum_610 = accum_609 | 32768;

  <bb 44> [2.81%]:
  # accum_611 = PHI <accum_609(42), accum_610(43)>
  *_606 = accum_611;
  if (_608 != 0)
    goto <bb 35>; [50.00%]
  else
    goto <bb 36>; [50.00%]

  <bb 45> [1.83%]:
  _22 = locy.type;
  z_60(D)->type = _22;
  _23 = locy.sign;
  _24 = _23 ^ operation_65(D);
  z_60(D)->sign = _24;
  _25 = locy.exp;
  z_60(D)->exp = _25;

  <bb 46> [10.19%]:
  _26 = locx.sign;
  _27 = locy.sign;
  _28 = _26 ^ _27;
  if (_28 != operation_65(D))
    goto <bb 48>; [66.00%]
  else
    goto <bb 47>; [34.00%]

  <bb 47> [3.46%]:
  goto <bb 72>; [100.00%]

  <bb 48> [6.73%]:
  goto <bb 50>; [100.00%]

  <bb 49> [26.89%]:
  _29 = locy.mantissa[i_47];
  _30 = locx.mantissa[i_47];
  accum_95 = (unsigned int) _30;
  _96 = (unsigned int) _29;
  accum_97 = accum_95 - _96;
  _98 = (unsigned int) borrow_165;
  accum_99 = accum_97 - _98;
  _100 = accum_99 >> 16;
  _101 = (short unsigned int) _100;
  _102 = _101 & 1;
  _103 = (short unsigned int) accum_99;
  MEM[(short unsigned int *)z_60(D)].mantissa[i_47] = _103;
  i_87 = i_47 + -1;

  <bb 50> [33.62%]:
  # i_47 = PHI <3(48), i_87(49)>
  # borrow_165 = PHI <0(48), _102(49)>
  if (i_47 >= 0)
    goto <bb 49>; [80.00%]
  else
    goto <bb 51>; [20.00%]

  <bb 51> [6.72%]:
  # borrow_155 = PHI <borrow_165(50)>
  if (borrow_155 != 0)
    goto <bb 52>; [50.00%]
  else
    goto <bb 55>; [50.00%]

  <bb 52> [3.36%]:
  _31 = _27 ^ operation_65(D);
  z_60(D)->sign = _31;
  goto <bb 54>; [100.00%]

  <bb 53> [13.45%]:
  _32 = z_60(D)->mantissa[i_48];
  _104 = (unsigned int) _32;
  accum_105 = -_104;
  _106 = (unsigned int) borrow_166;
  accum_107 = accum_105 - _106;
  _108 = accum_107 >> 16;
  _109 = (short unsigned int) _108;
  _110 = _109 & 1;
  _111 = (short unsigned int) accum_107;
  MEM[(short unsigned int *)z_60(D)].mantissa[i_48] = _111;
  i_82 = i_48 + -1;

  <bb 54> [16.81%]:
  # i_48 = PHI <3(52), i_82(53)>
  # borrow_166 = PHI <0(52), _110(53)>
  if (i_48 >= 0)
    goto <bb 53>; [80.00%]
  else
    goto <bb 55>; [20.00%]

  <bb 55> [6.72%]:
  _33 = &z_60(D)->mantissa;
  goto <bb 57>; [100.00%]

  <bb 56> [26.89%]:
  _113 = (long unsigned int) i_112;
  _114 = _113 * 2;
  _115 = _33 + _114;
  _116 = *_115;
  _117 = (int) _116;
  n_119 = _117 | n_118;
  i_120 = i_112 + 1;

  <bb 57> [33.62%]:
  # i_112 = PHI <0(55), i_120(56)>
  # n_118 = PHI <0(55), n_119(56)>
  if (i_112 <= 3)
    goto <bb 56>; [80.00%]
  else
    goto <bb 58>; [20.00%]

  <bb 58> [6.72%]:
  # n_153 = PHI <n_118(57)>
  if (n_153 == 0)
    goto <bb 59>; [50.00%]
  else
    goto <bb 60>; [50.00%]

  <bb 59> [3.36%]:
  z_60(D)->type = 0;
  z_60(D)->sign = 0;
  goto <bb 90> (<L63>); [100.00%]

  <bb 60> [3.36%]:
  _34 = locx.type;
  if (_34 == 2)
    goto <bb 69>; [20.24%]
  else
    goto <bb 61>; [79.76%]

  <bb 61> [2.68%]:
  _35 = locy.type;
  if (_35 == 2)
    goto <bb 69>; [34.00%]
  else
    goto <bb 90> (<L63>); [66.00%]

  <bb 62> [9.02%]:
  _217 = &z_60(D)->mantissa;
  _421 = _217 + 6;
  accum_422 = *_421;
  _423 = accum_422 & 32768;
  accum_424 = accum_422 << 1;
  *_421 = accum_424;
  _434 = _217 + 4;
  accum_435 = *_434;
  _436 = accum_435 & 32768;
  accum_437 = accum_435 << 1;
  if (_423 != 0)
    goto <bb 63>; [50.00%]
  else
    goto <bb 64>; [50.00%]

  <bb 63> [4.51%]:
  accum_438 = accum_437 | 1;

  <bb 64> [9.02%]:
  # accum_439 = PHI <accum_437(62), accum_438(63)>
  *_434 = accum_439;
  _447 = _217 + 2;
  accum_448 = *_447;
  _449 = accum_448 & 32768;
  accum_450 = accum_448 << 1;
  if (_436 != 0)
    goto <bb 65>; [50.00%]
  else
    goto <bb 66>; [50.00%]

  <bb 65> [4.51%]:
  accum_451 = accum_450 | 1;

  <bb 66> [9.02%]:
  # accum_452 = PHI <accum_450(64), accum_451(65)>
  *_447 = accum_452;
  _460 = _217;
  accum_461 = *_460;
  _462 = accum_461 & 32768;
  accum_463 = accum_461 << 1;
  if (_449 != 0)
    goto <bb 67>; [50.00%]
  else
    goto <bb 68>; [50.00%]

  <bb 67> [4.51%]:
  accum_464 = accum_463 | 1;

  <bb 68> [9.02%]:
  # accum_465 = PHI <accum_463(66), accum_464(67)>
  *_460 = accum_465;
  _229 = z_60(D)->exp;
  _230 = (unsigned short) _229;
  _231 = _230 + 65535;
  _232 = (short int) _231;
  z_60(D)->exp = _232;
  goto <bb 70>; [100.00%]

  <bb 69> [1.59%]:

  <bb 70> [10.61%]:
  _233 = z_60(D)->mantissa[0];
  _234 = (signed short) _233;
  if (_234 >= 0)
    goto <bb 62>; [85.00%]
  else
    goto <bb 90> (<L63>); [15.00%]

  <bb 71> [13.85%]:
  _36 = locy.mantissa[i_49];
  _37 = locx.mantissa[i_49];
  accum_121 = (unsigned int) _37;
  _122 = (unsigned int) _36;
  accum_123 = accum_121 + _122;
  _124 = (unsigned int) carry_167;
  accum_125 = accum_123 + _124;
  _126 = accum_125 >> 16;
  _127 = (short unsigned int) _126;
  _128 = _127 & 1;
  _129 = (short unsigned int) accum_125;
  MEM[(short unsigned int *)z_60(D)].mantissa[i_49] = _129;
  i_80 = i_49 + -1;

  <bb 72> [17.32%]:
  # i_49 = PHI <3(47), i_80(71)>
  # carry_167 = PHI <0(47), _128(71)>
  if (i_49 >= 0)
    goto <bb 71>; [80.00%]
  else
    goto <bb 73>; [20.00%]

  <bb 73> [3.46%]:
  # carry_16 = PHI <carry_167(72)>
  if (carry_16 != 0)
    goto <bb 74>; [50.00%]
  else
    goto <bb 80>; [50.00%]

  <bb 74> [1.73%]:
  _38 = z_60(D)->exp;
  _39 = (unsigned short) _38;
  _40 = _39 + 1;
  _41 = (short int) _40;
  z_60(D)->exp = _41;
  _42 = &z_60(D)->mantissa;
  goto <bb 78>; [100.00%]

  <bb 75> [6.93%]:
  _131 = (long unsigned int) i_130;
  _132 = _131 * 2;
  _133 = _42 + _132;
  accum_134 = *_133;
  _135 = accum_134 & 1;
  accum_136 = accum_134 >> 1;
  if (carry_168 != 0)
    goto <bb 76>; [50.00%]
  else
    goto <bb 77>; [50.00%]

  <bb 76> [3.46%]:
  accum_137 = accum_136 | 32768;

  <bb 77> [6.93%]:
  # accum_138 = PHI <accum_136(75), accum_137(76)>
  *_133 = accum_138;
  i_139 = i_130 + 1;

  <bb 78> [8.66%]:
  # i_130 = PHI <0(74), i_139(77)>
  # carry_168 = PHI <0(74), _135(77)>
  if (i_130 <= 3)
    goto <bb 75>; [80.00%]
  else
    goto <bb 79>; [20.00%]

  <bb 79> [1.73%]:
  _43 = z_60(D)->mantissa[0];
  _44 = _43 | 32768;
  z_60(D)->mantissa[0] = _44;
  z_60(D)->type = 2;
  goto <bb 90> (<L63>); [100.00%]

  <bb 80> [1.73%]:
  _45 = z_60(D)->mantissa[0];
  _46 = (signed short) _45;
  if (_46 < 0)
    goto <bb 81>; [36.00%]
  else
    goto <bb 90> (<L63>); [64.00%]

  <bb 81> [0.62%]:
  z_60(D)->type = 2;
  goto <bb 90> (<L63>); [100.00%]

<L72> [10.19%]:
  z_60(D)->type = 4;
  z_60(D)->exp = 32767;
  z_60(D)->sign = 1;
  z_60(D)->mantissa[0] = 16384;
  z_60(D)->mantissa[1] = 0;
  i_617 = 2;
  z_60(D)->mantissa[i_617] = 0;
  i_621 = i_617 + 1;
  z_60(D)->mantissa[i_621] = 0;
  i_625 = i_621 + 1;
  goto <bb 90> (<L63>); [100.00%]

  <bb 83> [29.32%]:
  _236 = x_58(D)->mantissa[i_235];
  _237 = y_59(D)->mantissa[i_235];
  if (_236 > _237)
    goto <bb 84>; [5.00%]
  else
    goto <bb 85>; [95.00%]

  <bb 84> [1.47%]:
  _238 = __builtin_object_size (x_58(D), 0);
  __builtin___memmove_chk (x_58(D), z_60(D), 12, _238);
  goto <bb 90> (<L63>); [100.00%]

  <bb 85> [27.85%]:
  if (_236 < _237)
    goto <bb 86>; [5.00%]
  else
    goto <bb 87>; [95.00%]

  <bb 86> [1.39%]:
  _243 = __builtin_object_size (y_59(D), 0);
  __builtin___memmove_chk (y_59(D), z_60(D), 12, _243);
  goto <bb 90> (<L63>); [100.00%]

  <bb 87> [26.46%]:
  i_239 = i_235 + 1;

  # i_235 = PHI <0(3), i_239(87)>
<L74> [36.65%]:
  if (i_235 <= 3)
    goto <bb 83>; [80.00%]
  else
    goto <bb 89>; [20.00%]

  <bb 89> [7.33%]:
  _241 = __builtin_object_size (y_59(D), 0);
  __builtin___memmove_chk (y_59(D), z_60(D), 12, _241);

<L63> [81.50%]:
  _142 = z_60(D)->type;
  _143 = _142 + 255;
  if (_143 <= 1)
    goto <bb 91>; [24.54%]
  else
    goto <bb 115>; [75.46%]

  <bb 91> [20.00%]:
  _247 = &z_60(D)->mantissa;
  goto <bb 93>; [100.00%]

  <bb 92> [80.00%]:
  _249 = (long unsigned int) i_248;
  _250 = _249 * 2;
  _251 = _247 + _250;
  _252 = *_251;
  _253 = (int) _252;
  n_255 = _253 | n_254;
  i_256 = i_248 + 1;

  <bb 93> [100.00%]:
  # i_248 = PHI <0(91), i_256(92)>
  # n_254 = PHI <0(91), n_255(92)>
  if (i_248 <= 3)
    goto <bb 92>; [80.00%]
  else
    goto <bb 94>; [20.00%]

  <bb 94> [20.00%]:
  # n_257 = PHI <n_254(93)>
  if (n_257 == 0)
    goto <bb 95>; [33.00%]
  else
    goto <bb 96>; [67.00%]

  <bb 95> [6.60%]:
  __builtin_puts (&"Error:  zero significand in denormalize"[0]);

  <bb 96> [20.00%]:
  _258 = z_60(D)->exp;
  _259 = (int) _258;
  _260 = _259 + 32767;
  exponent_difference_261 = (long int) _260;
  if (exponent_difference_261 < 0)
    goto <bb 97>; [39.77%]
  else
    goto <bb 113>; [60.23%]

  <bb 97> [7.95%]:
  exponent_difference_262 = -exponent_difference_261;
  if (exponent_difference_261 < -63)
    goto <bb 98>; [67.00%]
  else
    goto <bb 99>; [33.00%]

  <bb 98> [5.33%]:
  z_60(D)->type = 0;
  z_60(D)->exp = -32767;
  z_60(D)->mantissa[0] = 0;
  i_164 = 1;
  z_60(D)->mantissa[i_164] = 0;
  i_68 = i_164 + 1;
  z_60(D)->mantissa[i_68] = 0;
  i_338 = i_68 + 1;
  z_60(D)->mantissa[i_338] = 0;
  i_342 = i_338 + 1;
  goto <bb 113>; [100.00%]

  <bb 99> [2.62%]:
  _265 = (unsigned short) _258;
  _266 = (unsigned short) exponent_difference_262;
  _267 = _265 + _266;
  _268 = (short int) _267;
  z_60(D)->exp = _268;
  _269 = (int) exponent_difference_262;
  mantissa_270 = &z_60(D)->mantissa;
  _271 = z_60(D)->type;
  if (_271 != 0)
    goto <bb 100>; [54.00%]
  else
    goto <bb 113>; [46.00%]

  <bb 100> [1.42%]:
  if (_269 > 63)
    goto <bb 102>; [50.00%]
  else
    goto <bb 101>; [50.00%]

  <bb 101> [0.71%]:
  goto <bb 105>; [100.00%]

  <bb 102> [0.71%]:
  # i_343 = PHI <0(100)>
  _345 = (long unsigned int) i_343;
  _346 = _345 * 2;
  _347 = mantissa_270 + _346;
  *_347 = 0;
  i_349 = i_343 + 1;
  _352 = (long unsigned int) i_349;
  _353 = _352 * 2;
  _354 = mantissa_270 + _353;
  *_354 = 0;
  i_356 = i_349 + 1;
  _359 = (long unsigned int) i_356;
  _360 = _359 * 2;
  _361 = mantissa_270 + _360;
  *_361 = 0;
  i_363 = i_356 + 1;
  MEM[(short unsigned int *)z_60(D) + 10B] = 1;
  goto <bb 113>; [100.00%]

  <bb 103> [2.01%]:
  _289 = MEM[(short unsigned int *)z_60(D) + 10B];
  _290 = _289 | 1;
  MEM[(short unsigned int *)z_60(D) + 10B] = _290;

  <bb 104> [4.02%]:
  i_292 = i_291 + 1;

  <bb 105> [4.72%]:
  # i_291 = PHI <0(101), i_292(104)>
  if (_269 > i_291)
    goto <bb 106>; [85.00%]
  else
    goto <bb 113>; [15.00%]

  <bb 106> [4.02%]:
  _369 = mantissa_270;
  accum_370 = *_369;
  _371 = accum_370 & 1;
  accum_372 = accum_370 >> 1;
  *_369 = accum_372;
  _382 = mantissa_270 + 2;
  accum_383 = *_382;
  _384 = accum_383 & 1;
  accum_385 = accum_383 >> 1;
  if (_371 != 0)
    goto <bb 107>; [50.00%]
  else
    goto <bb 108>; [50.00%]

  <bb 107> [2.01%]:
  accum_386 = accum_385 | 32768;

  <bb 108> [4.02%]:
  # accum_387 = PHI <accum_385(106), accum_386(107)>
  *_382 = accum_387;
  _395 = mantissa_270 + 4;
  accum_396 = *_395;
  _397 = accum_396 & 1;
  accum_398 = accum_396 >> 1;
  if (_384 != 0)
    goto <bb 109>; [50.00%]
  else
    goto <bb 110>; [50.00%]

  <bb 109> [2.01%]:
  accum_399 = accum_398 | 32768;

  <bb 110> [4.02%]:
  # accum_400 = PHI <accum_398(108), accum_399(109)>
  *_395 = accum_400;
  _408 = mantissa_270 + 6;
  accum_409 = *_408;
  _410 = accum_409 & 1;
  accum_411 = accum_409 >> 1;
  if (_397 != 0)
    goto <bb 111>; [50.00%]
  else
    goto <bb 112>; [50.00%]

  <bb 111> [2.01%]:
  accum_412 = accum_411 | 32768;

  <bb 112> [4.02%]:
  # accum_413 = PHI <accum_411(110), accum_412(111)>
  *_408 = accum_413;
  if (_410 != 0)
    goto <bb 103>; [50.00%]
  else
    goto <bb 104>; [50.00%]

  <bb 113> [20.00%]:
  _244 = z_60(D)->type;
  if (_244 != 0)
    goto <bb 114>; [54.00%]
  else
    goto <bb 115>; [46.00%]

  <bb 114> [10.80%]:
  _245 = z_60(D)->mantissa[3];
  _246 = _245 & 65528;
  z_60(D)->mantissa[3] = _246;

  <bb 115> [81.50%]:
  locx ={v} {CLOBBER};
  locy ={v} {CLOBBER};
  return;

}



;; Function SetupCPUEmFloatArrays (SetupCPUEmFloatArrays, funcdef_no=34, decl_uid=2767, cgraph_uid=34, symbol_order=34)

Created preheader block for loop 10
Created preheader block for loop 8
Created preheader block for loop 6
;; 11 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 53 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 52 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 51 48 49 50
;;
;; Loop 1
;;  header 49, latch 48
;;  depth 1, outer 0
;;  nodes: 49 48 47 40 39 38 36 37 34 35 33 32 25 24 23 21 22 19 20 18 17 10 9 8 6 7 4 5 3 11 16 15 53 14 12 13 26 31 30 52 29 27 28 41 46 45 51 44 42 43
;;
;; Loop 9
;;  header 47, latch 46
;;  depth 2, outer 1
;;  nodes: 47 46 45 51 44 42 43
;;
;; Loop 10
;;  header 45, latch 44
;;  depth 3, outer 9
;;  nodes: 45 44 42 43
;;
;; Loop 2
;;  header 38, latch 37
;;  depth 2, outer 1
;;  nodes: 38 37
;;
;; Loop 7
;;  header 32, latch 31
;;  depth 2, outer 1
;;  nodes: 32 31 30 52 29 27 28
;;
;; Loop 8
;;  header 30, latch 29
;;  depth 3, outer 7
;;  nodes: 30 29 27 28
;;
;; Loop 3
;;  header 23, latch 22
;;  depth 2, outer 1
;;  nodes: 23 22
;;
;; Loop 5
;;  header 17, latch 16
;;  depth 2, outer 1
;;  nodes: 17 16 15 53 14 12 13
;;
;; Loop 6
;;  header 15, latch 14
;;  depth 3, outer 5
;;  nodes: 15 14 12 13
;;
;; Loop 4
;;  header 8, latch 7
;;  depth 2, outer 1
;;  nodes: 8 7
;; 2 succs { 49 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 10 11 }
;; 10 succs { 18 }
;; 11 succs { 17 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 }
;; 15 succs { 12 16 }
;; 16 succs { 17 }
;; 17 succs { 53 18 }
;; 53 succs { 15 }
;; 18 succs { 19 20 }
;; 19 succs { 21 }
;; 20 succs { 21 }
;; 21 succs { 23 }
;; 22 succs { 23 }
;; 23 succs { 22 24 }
;; 24 succs { 25 26 }
;; 25 succs { 33 }
;; 26 succs { 32 }
;; 27 succs { 28 29 }
;; 28 succs { 29 }
;; 29 succs { 30 }
;; 30 succs { 27 31 }
;; 31 succs { 32 }
;; 32 succs { 52 33 }
;; 52 succs { 30 }
;; 33 succs { 34 35 }
;; 34 succs { 36 }
;; 35 succs { 36 }
;; 36 succs { 38 }
;; 37 succs { 38 }
;; 38 succs { 37 39 }
;; 39 succs { 40 41 }
;; 40 succs { 48 }
;; 41 succs { 47 }
;; 42 succs { 43 44 }
;; 43 succs { 44 }
;; 44 succs { 45 }
;; 45 succs { 42 46 }
;; 46 succs { 47 }
;; 47 succs { 51 48 }
;; 51 succs { 45 }
;; 48 succs { 49 }
;; 49 succs { 3 50 }
;; 50 succs { 1 }
Removing basic block 132
Removing basic block 133
Removing basic block 134
Removing basic block 135
Removing basic block 136
Removing basic block 137
Removing basic block 138
Removing basic block 139
Removing basic block 140
Removing basic block 141
Removing basic block 142
Removing basic block 143
Removing basic block 144
Removing basic block 145
Removing basic block 146
Removing basic block 147
Removing basic block 148
Removing basic block 149
Removing basic block 150
Removing basic block 151
Removing basic block 152
Removing basic block 153
Removing basic block 154
Removing basic block 155

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_17 -> { _86 }
_19 -> { _87 }
_23 -> { _88 }
i_48 -> { i_85 }
carry_66 -> { carry_92 }
.MEM_84 -> { .MEM_114 }
accum_150 -> { accum_89 }
_151 -> { _90 }
accum_152 -> { accum_91 }
accum_153 -> { accum_93 }
accum_154 -> { accum_94 }
.MEM_155 -> { .MEM_144 }
i_156 -> { i_95 }
i_157 -> { i_85 }
carry_158 -> { carry_92 }
.MEM_159 -> { .MEM_114 }
_160 -> { _86 }
_161 -> { _87 }
_162 -> { _88 }
accum_163 -> { accum_89 }
_164 -> { _90 }
accum_165 -> { accum_91 }
accum_166 -> { accum_93 }
accum_167 -> { accum_94 }
.MEM_168 -> { .MEM_144 }
i_169 -> { i_95 }
i_170 -> { i_85 }
carry_171 -> { carry_92 }
.MEM_172 -> { .MEM_114 }
_173 -> { _86 }
_174 -> { _87 }
_175 -> { _88 }
accum_176 -> { accum_89 }
_177 -> { _90 }
accum_178 -> { accum_91 }
accum_179 -> { accum_93 }
accum_180 -> { accum_94 }
.MEM_181 -> { .MEM_144 }
i_182 -> { i_95 }
i_183 -> { i_85 }
carry_184 -> { carry_92 }
.MEM_185 -> { .MEM_114 }
_186 -> { _86 }
_187 -> { _87 }
_188 -> { _88 }
accum_189 -> { accum_89 }
_190 -> { _90 }
accum_191 -> { accum_91 }
accum_192 -> { accum_93 }
accum_193 -> { accum_94 }
.MEM_194 -> { .MEM_144 }
i_195 -> { i_95 }
i_196 -> { i_28 }
.MEM_197 -> { .MEM_113 }
.MEM_198 -> { .MEM_147 }
i_199 -> { i_29 }
i_200 -> { i_28 }
.MEM_201 -> { .MEM_113 }
.MEM_202 -> { .MEM_147 }
i_203 -> { i_29 }
i_204 -> { i_28 }
.MEM_205 -> { .MEM_113 }
.MEM_206 -> { .MEM_147 }
i_207 -> { i_29 }
i_208 -> { i_28 }
.MEM_209 -> { .MEM_113 }
.MEM_210 -> { .MEM_147 }
i_211 -> { i_29 }
i_212 -> { i_67 }
carry_213 -> { carry_74 }
.MEM_214 -> { .MEM_109 }
_215 -> { _68 }
_216 -> { _69 }
_217 -> { _70 }
accum_218 -> { accum_71 }
_219 -> { _72 }
accum_220 -> { accum_73 }
accum_221 -> { accum_75 }
accum_222 -> { accum_76 }
.MEM_223 -> { .MEM_134 }
i_224 -> { i_77 }
i_225 -> { i_67 }
carry_226 -> { carry_74 }
.MEM_227 -> { .MEM_109 }
_228 -> { _68 }
_229 -> { _69 }
_230 -> { _70 }
accum_231 -> { accum_71 }
_232 -> { _72 }
accum_233 -> { accum_73 }
accum_234 -> { accum_75 }
accum_235 -> { accum_76 }
.MEM_236 -> { .MEM_134 }
i_237 -> { i_77 }
i_238 -> { i_67 }
carry_239 -> { carry_74 }
.MEM_240 -> { .MEM_109 }
_241 -> { _68 }
_242 -> { _69 }
_243 -> { _70 }
accum_244 -> { accum_71 }
_245 -> { _72 }
accum_246 -> { accum_73 }
accum_247 -> { accum_75 }
accum_248 -> { accum_76 }
.MEM_249 -> { .MEM_134 }
i_250 -> { i_77 }
i_251 -> { i_67 }
carry_252 -> { carry_74 }
.MEM_253 -> { .MEM_109 }
_254 -> { _68 }
_255 -> { _69 }
_256 -> { _70 }
accum_257 -> { accum_71 }
_258 -> { _72 }
accum_259 -> { accum_73 }
accum_260 -> { accum_75 }
accum_261 -> { accum_76 }
.MEM_262 -> { .MEM_134 }
i_263 -> { i_77 }
i_264 -> { i_35 }
.MEM_265 -> { .MEM_108 }
.MEM_266 -> { .MEM_148 }
i_267 -> { i_36 }
i_268 -> { i_35 }
.MEM_269 -> { .MEM_108 }
.MEM_270 -> { .MEM_148 }
i_271 -> { i_36 }
i_272 -> { i_35 }
.MEM_273 -> { .MEM_108 }
.MEM_274 -> { .MEM_148 }
i_275 -> { i_36 }
i_276 -> { i_35 }
.MEM_277 -> { .MEM_108 }
.MEM_278 -> { .MEM_148 }
i_279 -> { i_36 }
i_280 -> { i_49 }
carry_281 -> { carry_56 }
.MEM_282 -> { .MEM_104 }
_283 -> { _50 }
_284 -> { _51 }
_285 -> { _52 }
accum_286 -> { accum_53 }
_287 -> { _54 }
accum_288 -> { accum_55 }
accum_289 -> { accum_57 }
accum_290 -> { accum_58 }
.MEM_291 -> { .MEM_124 }
i_292 -> { i_59 }
i_293 -> { i_49 }
carry_294 -> { carry_56 }
.MEM_295 -> { .MEM_104 }
_296 -> { _50 }
_297 -> { _51 }
_298 -> { _52 }
accum_299 -> { accum_53 }
_300 -> { _54 }
accum_301 -> { accum_55 }
accum_302 -> { accum_57 }
accum_303 -> { accum_58 }
.MEM_304 -> { .MEM_124 }
i_305 -> { i_59 }
i_306 -> { i_49 }
carry_307 -> { carry_56 }
.MEM_308 -> { .MEM_104 }
_309 -> { _50 }
_310 -> { _51 }
_311 -> { _52 }
accum_312 -> { accum_53 }
_313 -> { _54 }
accum_314 -> { accum_55 }
accum_315 -> { accum_57 }
accum_316 -> { accum_58 }
.MEM_317 -> { .MEM_124 }
i_318 -> { i_59 }
i_319 -> { i_49 }
carry_320 -> { carry_56 }
.MEM_321 -> { .MEM_104 }
_322 -> { _50 }
_323 -> { _51 }
_324 -> { _52 }
accum_325 -> { accum_53 }
_326 -> { _54 }
accum_327 -> { accum_55 }
accum_328 -> { accum_57 }
accum_329 -> { accum_58 }
.MEM_330 -> { .MEM_124 }
i_331 -> { i_59 }
i_332 -> { i_42 }
.MEM_333 -> { .MEM_103 }
.MEM_334 -> { .MEM_149 }
i_335 -> { i_43 }
i_336 -> { i_42 }
.MEM_337 -> { .MEM_103 }
.MEM_338 -> { .MEM_149 }
i_339 -> { i_43 }
i_340 -> { i_42 }
.MEM_341 -> { .MEM_103 }
.MEM_342 -> { .MEM_149 }
i_343 -> { i_43 }
i_344 -> { i_42 }
.MEM_345 -> { .MEM_103 }
.MEM_346 -> { .MEM_149 }
i_347 -> { i_43 }
Incremental SSA update started at block: 118
Number of blocks in CFG: 156
Number of blocks to update: 99 ( 63%)


Removing basic block 126
Removing basic block 7
Removing basic block 127
Removing basic block 13
Removing basic block 14
Removing basic block 12
Removing basic block 128
Removing basic block 22
Removing basic block 129
Removing basic block 28
Removing basic block 29
Removing basic block 27
Removing basic block 130
Removing basic block 37
Removing basic block 131
Removing basic block 43
Removing basic block 44
Removing basic block 42
Removing basic block 56
Removing basic block 80
Removing basic block 104
Merging blocks 6 and 118
Merging blocks 21 and 94
Merging blocks 36 and 70
Removing basic block 51
Removing basic block 52
Removing basic block 53
Merging blocks 54 and 55
Merging blocks 61 and 62
Merging blocks 65 and 66
Merging blocks 69 and 45
Merging blocks 78 and 79
Merging blocks 85 and 86
Merging blocks 89 and 90
Merging blocks 93 and 30
Merging blocks 102 and 103
Merging blocks 109 and 110
Merging blocks 113 and 114
Merging blocks 117 and 15
Merging blocks 6 and 119
Merging blocks 6 and 120
Merging blocks 6 and 121
Merging blocks 6 and 122
Merging blocks 6 and 123
Merging blocks 6 and 124
Merging blocks 6 and 125
Merging blocks 6 and 8
Merging blocks 6 and 9
Merging blocks 21 and 95
Merging blocks 21 and 96
Merging blocks 21 and 97
Merging blocks 21 and 98
Merging blocks 21 and 99
Merging blocks 21 and 100
Merging blocks 21 and 101
Merging blocks 21 and 23
Merging blocks 21 and 24
Merging blocks 36 and 71
Merging blocks 36 and 72
Merging blocks 36 and 73
Merging blocks 36 and 74
Merging blocks 36 and 75
Merging blocks 36 and 76
Merging blocks 36 and 77
Merging blocks 36 and 38
Merging blocks 36 and 39
Merging blocks 54 and 57
Merging blocks 54 and 58
Merging blocks 54 and 59
Merging blocks 61 and 63
Merging blocks 65 and 67
Merging blocks 69 and 46
Merging blocks 78 and 81
Merging blocks 78 and 82
Merging blocks 78 and 83
Merging blocks 85 and 87
Merging blocks 89 and 91
Merging blocks 93 and 31
Merging blocks 102 and 105
Merging blocks 102 and 106
Merging blocks 102 and 107
Merging blocks 109 and 111
Merging blocks 113 and 115
Merging blocks 117 and 16
SetupCPUEmFloatArrays (struct InternalFPF * abase, struct InternalFPF * bbase, struct InternalFPF * cbase, long unsigned int arraysize)
{
  short unsigned int carry;
  short unsigned int accum;
  int i;
  short unsigned int carry;
  short unsigned int accum;
  int i;
  short unsigned int carry;
  short unsigned int accum;
  int i;
  int i;
  short unsigned int myword;
  int32 mylong;
  int i;
  short unsigned int myword;
  int32 mylong;
  int i;
  short unsigned int myword;
  int32 mylong;
  struct InternalFPF locFPF2;
  struct InternalFPF locFPF1;
  long unsigned int i;
  int _1;
  int _2;
  int _3;
  long unsigned int _4;
  struct InternalFPF * _5;
  int _6;
  int _7;
  struct InternalFPF * _8;
  short unsigned int * _23;
  int _31;
  int _38;
  int _45;
  short int _60;
  unsigned short _61;
  unsigned short _62;
  short int _63;
  short unsigned int _64;
  signed short _65;
  short int _78;
  unsigned short _79;
  unsigned short _80;
  short int _81;
  short unsigned int _82;
  signed short _83;
  short int _96;
  unsigned short _97;
  unsigned short _98;
  short int _99;
  short unsigned int _100;
  signed short _101;
  short unsigned int _151;
  short unsigned int * _162;
  short unsigned int _164;
  short unsigned int * _175;
  short unsigned int _177;
  short unsigned int * _188;
  short unsigned int _190;
  short unsigned int * _217;
  short unsigned int _219;
  short unsigned int * _230;
  short unsigned int _232;
  short unsigned int * _243;
  short unsigned int _245;
  short unsigned int * _256;
  short unsigned int _258;
  short unsigned int * _285;
  short unsigned int _287;
  short unsigned int * _298;
  short unsigned int _300;
  short unsigned int * _311;
  short unsigned int _313;
  short unsigned int * _324;
  short unsigned int _326;

  <bb 2> [1.70%]:
  randnum (13);
  goto <bb 46>; [100.00%]

  <bb 3> [9.63%]:
  _1 = randwc (50000);
  if (_1 < 0)
    goto <bb 4>; [36.00%]
  else
    goto <bb 5>; [64.00%]

  <bb 4> [3.47%]:
  locFPF1.sign = 1;
  mylong_41 = -_1;
  goto <bb 6>; [100.00%]

  <bb 5> [6.16%]:
  locFPF1.sign = 0;

  <bb 6> [9.63%]:
  # mylong_44 = PHI <mylong_41(4), _1(5)>
  locFPF1.type = 2;
  locFPF1.mantissa[0] = 0;
  locFPF1.mantissa[1] = 0;
  locFPF1.mantissa[2] = 0;
  locFPF1.mantissa[3] = 0;
  if (mylong_44 == 0)
    goto <bb 7>; [63.36%]
  else
    goto <bb 8>; [36.64%]

  <bb 7> [6.10%]:
  locFPF1.type = 0;
  locFPF1.exp = 0;
  goto <bb 17>; [100.00%]

  <bb 8> [3.53%]:
  locFPF1.exp = 32;
  _45 = mylong_44 >> 16;
  myword_46 = (short unsigned int) _45;
  locFPF1.mantissa[0] = myword_46;
  myword_47 = (short unsigned int) mylong_44;
  locFPF1.mantissa[1] = myword_47;

  <bb 9> [23.53%]:
  _64 = locFPF1.mantissa[0];
  _65 = (signed short) _64;
  if (_65 >= 0)
    goto <bb 10>; [85.00%]
  else
    goto <bb 17>; [15.00%]

  <bb 10> [20.00%]:
  _285 = &locFPF1.mantissa + 6;
  accum_286 = *_285;
  _287 = accum_286 & 32768;
  accum_288 = accum_286 << 1;
  *_285 = accum_288;
  _298 = &locFPF1.mantissa + 4;
  accum_299 = *_298;
  _300 = accum_299 & 32768;
  accum_301 = accum_299 << 1;
  if (_287 != 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 11> [10.00%]:
  accum_302 = accum_301 | 1;

  <bb 12> [20.00%]:
  # accum_303 = PHI <accum_301(10), accum_302(11)>
  *_298 = accum_303;
  _311 = &locFPF1.mantissa + 2;
  accum_312 = *_311;
  _313 = accum_312 & 32768;
  accum_314 = accum_312 << 1;
  if (_300 != 0)
    goto <bb 13>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 13> [10.00%]:
  accum_315 = accum_314 | 1;

  <bb 14> [20.00%]:
  # accum_316 = PHI <accum_314(12), accum_315(13)>
  *_311 = accum_316;
  _324 = &locFPF1.mantissa;
  accum_325 = *_324;
  _326 = accum_325 & 32768;
  accum_327 = accum_325 << 1;
  if (_313 != 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 15> [10.00%]:
  accum_328 = accum_327 | 1;

  <bb 16> [20.00%]:
  # accum_329 = PHI <accum_327(14), accum_328(15)>
  *_324 = accum_329;
  _60 = locFPF1.exp;
  _61 = (unsigned short) _60;
  _62 = _61 + 65535;
  _63 = (short int) _62;
  locFPF1.exp = _63;
  goto <bb 9>; [100.00%]

  <bb 17> [9.63%]:
  _2 = randwc (50000);
  _3 = _2 + 1;
  if (_3 < 0)
    goto <bb 18>; [36.00%]
  else
    goto <bb 19>; [64.00%]

  <bb 18> [3.47%]:
  locFPF2.sign = 1;
  mylong_34 = -_3;
  goto <bb 20>; [100.00%]

  <bb 19> [6.16%]:
  locFPF2.sign = 0;

  <bb 20> [9.63%]:
  # mylong_37 = PHI <mylong_34(18), _3(19)>
  locFPF2.type = 2;
  locFPF2.mantissa[0] = 0;
  locFPF2.mantissa[1] = 0;
  locFPF2.mantissa[2] = 0;
  locFPF2.mantissa[3] = 0;
  if (mylong_37 == 0)
    goto <bb 21>; [63.36%]
  else
    goto <bb 22>; [36.64%]

  <bb 21> [6.10%]:
  locFPF2.type = 0;
  locFPF2.exp = 0;
  goto <bb 31>; [100.00%]

  <bb 22> [3.53%]:
  locFPF2.exp = 32;
  _38 = mylong_37 >> 16;
  myword_39 = (short unsigned int) _38;
  locFPF2.mantissa[0] = myword_39;
  myword_40 = (short unsigned int) mylong_37;
  locFPF2.mantissa[1] = myword_40;

  <bb 23> [23.53%]:
  _82 = locFPF2.mantissa[0];
  _83 = (signed short) _82;
  if (_83 >= 0)
    goto <bb 24>; [85.00%]
  else
    goto <bb 31>; [15.00%]

  <bb 24> [20.00%]:
  _217 = &locFPF2.mantissa + 6;
  accum_218 = *_217;
  _219 = accum_218 & 32768;
  accum_220 = accum_218 << 1;
  *_217 = accum_220;
  _230 = &locFPF2.mantissa + 4;
  accum_231 = *_230;
  _232 = accum_231 & 32768;
  accum_233 = accum_231 << 1;
  if (_219 != 0)
    goto <bb 25>; [50.00%]
  else
    goto <bb 26>; [50.00%]

  <bb 25> [10.00%]:
  accum_234 = accum_233 | 1;

  <bb 26> [20.00%]:
  # accum_235 = PHI <accum_233(24), accum_234(25)>
  *_230 = accum_235;
  _243 = &locFPF2.mantissa + 2;
  accum_244 = *_243;
  _245 = accum_244 & 32768;
  accum_246 = accum_244 << 1;
  if (_232 != 0)
    goto <bb 27>; [50.00%]
  else
    goto <bb 28>; [50.00%]

  <bb 27> [10.00%]:
  accum_247 = accum_246 | 1;

  <bb 28> [20.00%]:
  # accum_248 = PHI <accum_246(26), accum_247(27)>
  *_243 = accum_248;
  _256 = &locFPF2.mantissa;
  accum_257 = *_256;
  _258 = accum_257 & 32768;
  accum_259 = accum_257 << 1;
  if (_245 != 0)
    goto <bb 29>; [50.00%]
  else
    goto <bb 30>; [50.00%]

  <bb 29> [10.00%]:
  accum_260 = accum_259 | 1;

  <bb 30> [20.00%]:
  # accum_261 = PHI <accum_259(28), accum_260(29)>
  *_256 = accum_261;
  _78 = locFPF2.exp;
  _79 = (unsigned short) _78;
  _80 = _79 + 65535;
  _81 = (short int) _80;
  locFPF2.exp = _81;
  goto <bb 23>; [100.00%]

  <bb 31> [9.63%]:
  _4 = i_9 * 12;
  _5 = abase_20(D) + _4;
  DivideInternalFPF (&locFPF1, &locFPF2, _5);
  _6 = randwc (50000);
  _7 = _6 + 1;
  if (_7 < 0)
    goto <bb 32>; [36.00%]
  else
    goto <bb 33>; [64.00%]

  <bb 32> [3.47%]:
  locFPF2.sign = 1;
  mylong_27 = -_7;
  goto <bb 34>; [100.00%]

  <bb 33> [6.16%]:
  locFPF2.sign = 0;

  <bb 34> [9.63%]:
  # mylong_30 = PHI <mylong_27(32), _7(33)>
  locFPF2.type = 2;
  locFPF2.mantissa[0] = 0;
  locFPF2.mantissa[1] = 0;
  locFPF2.mantissa[2] = 0;
  locFPF2.mantissa[3] = 0;
  if (mylong_30 == 0)
    goto <bb 35>; [63.36%]
  else
    goto <bb 36>; [36.64%]

  <bb 35> [6.10%]:
  locFPF2.type = 0;
  locFPF2.exp = 0;
  goto <bb 45>; [100.00%]

  <bb 36> [3.53%]:
  locFPF2.exp = 32;
  _31 = mylong_30 >> 16;
  myword_32 = (short unsigned int) _31;
  locFPF2.mantissa[0] = myword_32;
  myword_33 = (short unsigned int) mylong_30;
  locFPF2.mantissa[1] = myword_33;

  <bb 37> [23.53%]:
  _100 = locFPF2.mantissa[0];
  _101 = (signed short) _100;
  if (_101 >= 0)
    goto <bb 38>; [85.00%]
  else
    goto <bb 45>; [15.00%]

  <bb 38> [20.00%]:
  _23 = &locFPF2.mantissa + 6;
  accum_150 = *_23;
  _151 = accum_150 & 32768;
  accum_152 = accum_150 << 1;
  *_23 = accum_152;
  _162 = &locFPF2.mantissa + 4;
  accum_163 = *_162;
  _164 = accum_163 & 32768;
  accum_165 = accum_163 << 1;
  if (_151 != 0)
    goto <bb 39>; [50.00%]
  else
    goto <bb 40>; [50.00%]

  <bb 39> [10.00%]:
  accum_166 = accum_165 | 1;

  <bb 40> [20.00%]:
  # accum_167 = PHI <accum_165(38), accum_166(39)>
  *_162 = accum_167;
  _175 = &locFPF2.mantissa + 2;
  accum_176 = *_175;
  _177 = accum_176 & 32768;
  accum_178 = accum_176 << 1;
  if (_164 != 0)
    goto <bb 41>; [50.00%]
  else
    goto <bb 42>; [50.00%]

  <bb 41> [10.00%]:
  accum_179 = accum_178 | 1;

  <bb 42> [20.00%]:
  # accum_180 = PHI <accum_178(40), accum_179(41)>
  *_175 = accum_180;
  _188 = &locFPF2.mantissa;
  accum_189 = *_188;
  _190 = accum_189 & 32768;
  accum_191 = accum_189 << 1;
  if (_177 != 0)
    goto <bb 43>; [50.00%]
  else
    goto <bb 44>; [50.00%]

  <bb 43> [10.00%]:
  accum_192 = accum_191 | 1;

  <bb 44> [20.00%]:
  # accum_193 = PHI <accum_191(42), accum_192(43)>
  *_188 = accum_193;
  _96 = locFPF2.exp;
  _97 = (unsigned short) _96;
  _98 = _97 + 65535;
  _99 = (short int) _98;
  locFPF2.exp = _99;
  goto <bb 37>; [100.00%]

  <bb 45> [9.63%]:
  _8 = bbase_24(D) + _4;
  DivideInternalFPF (&locFPF1, &locFPF2, _8);
  i_26 = i_9 + 1;

  <bb 46> [11.33%]:
  # i_9 = PHI <0(2), i_26(45)>
  if (i_9 < arraysize_13(D))
    goto <bb 3>; [85.00%]
  else
    goto <bb 47>; [15.00%]

  <bb 47> [1.70%]:
  locFPF1 ={v} {CLOBBER};
  locFPF2 ={v} {CLOBBER};
  return;

}



;; Function DoEmFloatIteration (DoEmFloatIteration, funcdef_no=35, decl_uid=2773, cgraph_uid=35, symbol_order=35)

Created preheader block for loop 2
Created preheader block for loop 20
Created preheader block for loop 21
Created preheader block for loop 22
Created preheader block for loop 4
Created preheader block for loop 5
Created preheader block for loop 7
Created preheader block for loop 8
Created preheader block for loop 9
Created preheader block for loop 11
Created preheader block for loop 12
Created preheader block for loop 17
;; 23 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 115 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 111 32 33 34 35 36 113 37 38 39 40 41 42 43 112 44 45 46 47 48 49 114 109 50 51 52 53 54 55 56 57 58 59 60 110 108 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 106 105 85 86 87 88 89 90 91 92 93 94 95 107 96 97 98 99 100 101 116 102 104 103
;;
;; Loop 1
;;  header 102, latch 116
;;  depth 1, outer 0
;;  nodes: 102 116 101 104 100 3 4 5 98 99 72 97 96 82 78 87 83 95 106 94 92 93 91 90 107 88 89 84 79 86 105 85 76 77 75 73 74 80 81 6 7 8 11 12 13 63 64 68 66 71 70 115 69 67 65 62 108 61 60 109 59 58 54 57 55 56 53 52 110 50 51 49 111 48 47 112 46 44 45 43 39 42 40 41 36 38 113 37 35 34 114 32 33 31 29 30 27 28 26 25 21 24 22 23 17 16 14 15 20 18 19 9 10
;;
;; Loop 2
;;  header 101, latch 100
;;  depth 2, outer 1
;;  nodes: 101 100 3 4 5 98 99 72 97 96 82 78 87 83 95 106 94 92 93 91 90 107 88 89 84 79 86 105 85 76 77 75 73 74 80 81 6 7 8 11 12 13 63 64 68 66 71 70 115 69 67 65 62 108 61 60 109 59 58 54 57 55 56 53 52 110 50 51 49 111 48 47 112 46 44 45 43 39 42 40 41 36 38 113 37 35 34 114 32 33 31 29 30 27 28 26 25 21 24 22 23 17 16 14 15 20 18 19 9 10
;;
;; Loop 18
;;  header 82, latch 81
;;  depth 3, outer 2
;;  nodes: 82 81
;;
;; Loop 20
;;  header 86, latch 85
;;  depth 3, outer 2
;;  nodes: 86 85
;;
;; Loop 21
;;  header 95, latch 94
;;  depth 3, outer 2
;;  nodes: 95 94 92 93 91 90 107 88 89
;;
;; Loop 22
;;  header 91, latch 90
;;  depth 4, outer 21
;;  nodes: 91 90 88 89
;;
;; Loop 19
;;  header 75, latch 74
;;  depth 3, outer 2
;;  nodes: 75 74
;;
;; Loop 3
;;  header 11, latch 10
;;  depth 3, outer 2
;;  nodes: 11 10
;;
;; Loop 4
;;  header 62, latch 61
;;  depth 3, outer 2
;;  nodes: 62 61
;;
;; Loop 5
;;  header 60, latch 59
;;  depth 3, outer 2
;;  nodes: 60 59 58 54 57 55 56 53 52 110 50 51
;;
;; Loop 6
;;  header 58, latch 57
;;  depth 4, outer 5
;;  nodes: 58 57 55 56
;;
;; Loop 7
;;  header 53, latch 52
;;  depth 4, outer 5
;;  nodes: 53 52 50 51
;;
;; Loop 8
;;  header 49, latch 48
;;  depth 3, outer 2
;;  nodes: 49 48 47 112 46 44 45 43 39 42 40 41 36 38 113 37 35 34 114 32 33
;;
;; Loop 9
;;  header 47, latch 46
;;  depth 4, outer 8
;;  nodes: 47 46 44 45
;;
;; Loop 10
;;  header 43, latch 42
;;  depth 4, outer 8
;;  nodes: 43 42 40 41
;;
;; Loop 11
;;  header 38, latch 37
;;  depth 4, outer 8
;;  nodes: 38 37
;;
;; Loop 12
;;  header 35, latch 34
;;  depth 4, outer 8
;;  nodes: 35 34 32 33
;;
;; Loop 13
;;  header 31, latch 30
;;  depth 3, outer 2
;;  nodes: 31 30
;;
;; Loop 14
;;  header 24, latch 23
;;  depth 3, outer 2
;;  nodes: 24 23
;;
;; Loop 15
;;  header 20, latch 19
;;  depth 3, outer 2
;;  nodes: 20 19
;;
;; Loop 16
;;  header 16, latch 15
;;  depth 3, outer 2
;;  nodes: 16 15
;;
;; Loop 17
;;  header 70, latch 69
;;  depth 3, outer 2
;;  nodes: 70 69 67 65
;; 2 succs { 102 }
;; 3 succs { 100 4 5 6 99 }
;; 4 succs { 100 }
;; 5 succs { 100 }
;; 6 succs { 72 7 9 13 8 14 12 115 }
;; 115 succs { 70 }
;; 7 succs { 72 }
;; 8 succs { 72 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 10 72 }
;; 12 succs { 72 }
;; 13 succs { 72 }
;; 14 succs { 16 }
;; 15 succs { 16 }
;; 16 succs { 15 17 }
;; 17 succs { 22 18 }
;; 18 succs { 20 }
;; 19 succs { 20 }
;; 20 succs { 19 21 }
;; 21 succs { 22 25 }
;; 22 succs { 24 }
;; 23 succs { 24 }
;; 24 succs { 23 25 }
;; 25 succs { 27 26 }
;; 26 succs { 27 28 }
;; 27 succs { 29 }
;; 28 succs { 29 }
;; 29 succs { 31 }
;; 30 succs { 31 }
;; 31 succs { 30 111 }
;; 111 succs { 49 }
;; 32 succs { 33 34 }
;; 33 succs { 34 }
;; 34 succs { 35 }
;; 35 succs { 32 36 }
;; 36 succs { 113 39 }
;; 113 succs { 38 }
;; 37 succs { 38 }
;; 38 succs { 37 39 }
;; 39 succs { 43 }
;; 40 succs { 41 42 }
;; 41 succs { 42 }
;; 42 succs { 43 }
;; 43 succs { 40 112 }
;; 112 succs { 47 }
;; 44 succs { 45 46 }
;; 45 succs { 46 }
;; 46 succs { 47 }
;; 47 succs { 44 48 }
;; 48 succs { 49 }
;; 49 succs { 114 109 }
;; 114 succs { 35 }
;; 109 succs { 60 }
;; 50 succs { 51 52 }
;; 51 succs { 52 }
;; 52 succs { 53 }
;; 53 succs { 50 54 }
;; 54 succs { 58 }
;; 55 succs { 56 57 }
;; 56 succs { 57 }
;; 57 succs { 58 }
;; 58 succs { 55 59 }
;; 59 succs { 60 }
;; 60 succs { 110 108 }
;; 110 succs { 53 }
;; 108 succs { 62 }
;; 61 succs { 62 }
;; 62 succs { 61 63 }
;; 63 succs { 64 72 }
;; 64 succs { 72 }
;; 65 succs { 66 67 }
;; 66 succs { 72 }
;; 67 succs { 68 69 }
;; 68 succs { 72 }
;; 69 succs { 70 }
;; 70 succs { 65 71 }
;; 71 succs { 72 }
;; 72 succs { 73 98 }
;; 73 succs { 75 }
;; 74 succs { 75 }
;; 75 succs { 74 76 }
;; 76 succs { 77 78 }
;; 77 succs { 78 }
;; 78 succs { 79 96 }
;; 79 succs { 80 83 }
;; 80 succs { 82 }
;; 81 succs { 82 }
;; 82 succs { 81 96 }
;; 83 succs { 84 96 }
;; 84 succs { 105 106 }
;; 106 succs { 95 }
;; 105 succs { 86 }
;; 85 succs { 86 }
;; 86 succs { 85 87 }
;; 87 succs { 96 }
;; 88 succs { 89 90 }
;; 89 succs { 90 }
;; 90 succs { 91 }
;; 91 succs { 88 92 }
;; 92 succs { 93 94 }
;; 93 succs { 94 }
;; 94 succs { 95 }
;; 95 succs { 107 96 }
;; 107 succs { 91 }
;; 96 succs { 97 98 }
;; 97 succs { 98 }
;; 98 succs { 100 }
;; 99 succs { 100 }
;; 100 succs { 101 }
;; 101 succs { 3 116 }
;; 116 succs { 102 }
;; 102 succs { 104 103 }
;; 104 succs { 101 }
;; 103 succs { 1 }
Removing basic block 322
Removing basic block 323
Removing basic block 324
Removing basic block 325
Removing basic block 326
Removing basic block 327
Removing basic block 328
Removing basic block 329
Removing basic block 330
Removing basic block 331
Removing basic block 332
Removing basic block 333
Removing basic block 334
Removing basic block 335
Removing basic block 336
Removing basic block 337
Removing basic block 338
Removing basic block 339
Removing basic block 340
Removing basic block 341
Removing basic block 342
Removing basic block 343
Removing basic block 344
Removing basic block 345
Removing basic block 346
Removing basic block 347
Removing basic block 348
Removing basic block 349
Removing basic block 350
Removing basic block 351
Removing basic block 352
Removing basic block 353
Removing basic block 354
Removing basic block 355
Removing basic block 356
Removing basic block 357
Removing basic block 358
Removing basic block 359
Removing basic block 360
Removing basic block 361
Removing basic block 362
Removing basic block 363
Removing basic block 364
Removing basic block 365
Removing basic block 366
Removing basic block 367
Removing basic block 368
Removing basic block 369
Removing basic block 370
Removing basic block 371
Removing basic block 372
Removing basic block 373
Removing basic block 374
Removing basic block 375
Removing basic block 376
Removing basic block 377
Removing basic block 378
Removing basic block 379
Removing basic block 380
Removing basic block 381
Removing basic block 382
Removing basic block 383
Removing basic block 384
Removing basic block 385
Removing basic block 386
Removing basic block 387

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_36 -> { .MEM_313 }
.MEM_197 -> { .MEM_265 }
i_198 -> { i_219 }
i_317 -> { i_220 }
i_318 -> { i_219 }
.MEM_319 -> { .MEM_265 }
.MEM_320 -> { .MEM_313 }
i_321 -> { i_220 }
i_322 -> { i_219 }
.MEM_323 -> { .MEM_265 }
.MEM_324 -> { .MEM_313 }
i_325 -> { i_220 }
i_326 -> { i_219 }
.MEM_327 -> { .MEM_265 }
.MEM_328 -> { .MEM_313 }
i_329 -> { i_220 }
i_330 -> { i_228 }
.MEM_331 -> { .MEM_266 }
_332 -> { _229 }
_333 -> { _230 }
_334 -> { _231 }
.MEM_335 -> { .MEM_310 }
i_336 -> { i_232 }
i_337 -> { i_228 }
.MEM_338 -> { .MEM_266 }
_339 -> { _229 }
_340 -> { _230 }
_341 -> { _231 }
.MEM_342 -> { .MEM_310 }
i_343 -> { i_232 }
i_344 -> { i_228 }
.MEM_345 -> { .MEM_266 }
_346 -> { _229 }
_347 -> { _230 }
_348 -> { _231 }
.MEM_349 -> { .MEM_310 }
i_350 -> { i_232 }
i_351 -> { i_233 }
carry_352 -> { carry_240 }
.MEM_353 -> { .MEM_267 }
_354 -> { _234 }
_355 -> { _235 }
_356 -> { _236 }
accum_357 -> { accum_237 }
_358 -> { _238 }
accum_359 -> { accum_239 }
accum_360 -> { accum_241 }
accum_361 -> { accum_242 }
.MEM_362 -> { .MEM_308 }
i_363 -> { i_243 }
i_364 -> { i_233 }
carry_365 -> { carry_240 }
.MEM_366 -> { .MEM_267 }
_367 -> { _234 }
_368 -> { _235 }
_369 -> { _236 }
accum_370 -> { accum_237 }
_371 -> { _238 }
accum_372 -> { accum_239 }
accum_373 -> { accum_241 }
accum_374 -> { accum_242 }
.MEM_375 -> { .MEM_308 }
i_376 -> { i_243 }
i_377 -> { i_233 }
carry_378 -> { carry_240 }
.MEM_379 -> { .MEM_267 }
_380 -> { _234 }
_381 -> { _235 }
_382 -> { _236 }
accum_383 -> { accum_237 }
_384 -> { _238 }
accum_385 -> { accum_239 }
accum_386 -> { accum_241 }
accum_387 -> { accum_242 }
.MEM_388 -> { .MEM_308 }
i_389 -> { i_243 }
i_390 -> { i_233 }
carry_391 -> { carry_240 }
.MEM_392 -> { .MEM_267 }
_393 -> { _234 }
_394 -> { _235 }
_395 -> { _236 }
accum_396 -> { accum_237 }
_397 -> { _238 }
accum_398 -> { accum_239 }
accum_399 -> { accum_241 }
accum_400 -> { accum_242 }
.MEM_401 -> { .MEM_308 }
i_402 -> { i_243 }
i_403 -> { i_204 }
n_404 -> { n_210 }
_405 -> { _205 }
_406 -> { _206 }
_407 -> { _207 }
_408 -> { _208 }
_409 -> { _209 }
n_410 -> { n_211 }
i_411 -> { i_212 }
i_412 -> { i_204 }
n_413 -> { n_210 }
_414 -> { _205 }
_415 -> { _206 }
_416 -> { _207 }
_417 -> { _208 }
_418 -> { _209 }
n_419 -> { n_211 }
i_420 -> { i_212 }
i_421 -> { i_204 }
n_422 -> { n_210 }
_423 -> { _205 }
_424 -> { _206 }
_425 -> { _207 }
_426 -> { _208 }
_427 -> { _209 }
n_428 -> { n_211 }
i_429 -> { i_212 }
i_430 -> { i_204 }
n_431 -> { n_210 }
_432 -> { _205 }
_433 -> { _206 }
_434 -> { _207 }
_435 -> { _208 }
_436 -> { _209 }
n_437 -> { n_211 }
i_438 -> { i_212 }
i_439 -> { i_54 }
.MEM_440 -> { .MEM_249 }
.MEM_441 -> { .MEM_302 }
i_442 -> { i_55 }
i_443 -> { i_54 }
.MEM_444 -> { .MEM_249 }
.MEM_445 -> { .MEM_302 }
i_446 -> { i_55 }
i_447 -> { i_54 }
.MEM_448 -> { .MEM_249 }
.MEM_449 -> { .MEM_302 }
i_450 -> { i_55 }
i_451 -> { i_175 }
n_452 -> { n_181 }
_453 -> { _176 }
_454 -> { _177 }
_455 -> { _178 }
_456 -> { _179 }
_457 -> { _180 }
n_458 -> { n_182 }
i_459 -> { i_183 }
i_460 -> { i_175 }
n_461 -> { n_181 }
_462 -> { _176 }
_463 -> { _177 }
_464 -> { _178 }
_465 -> { _179 }
_466 -> { _180 }
n_467 -> { n_182 }
i_468 -> { i_183 }
i_469 -> { i_175 }
n_470 -> { n_181 }
_471 -> { _176 }
_472 -> { _177 }
_473 -> { _178 }
_474 -> { _179 }
_475 -> { _180 }
n_476 -> { n_182 }
i_477 -> { i_183 }
i_478 -> { i_175 }
n_479 -> { n_181 }
_480 -> { _176 }
_481 -> { _177 }
_482 -> { _178 }
_483 -> { _179 }
_484 -> { _180 }
n_485 -> { n_182 }
i_486 -> { i_183 }
i_487 -> { i_158 }
carry_488 -> { carry_165 }
.MEM_489 -> { .MEM_261 }
_490 -> { _159 }
_491 -> { _160 }
_492 -> { _161 }
accum_493 -> { accum_162 }
_494 -> { _163 }
accum_495 -> { accum_164 }
accum_496 -> { accum_166 }
accum_497 -> { accum_167 }
.MEM_498 -> { .MEM_287 }
i_499 -> { i_168 }
i_500 -> { i_158 }
carry_501 -> { carry_165 }
.MEM_502 -> { .MEM_261 }
_503 -> { _159 }
_504 -> { _160 }
_505 -> { _161 }
accum_506 -> { accum_162 }
_507 -> { _163 }
accum_508 -> { accum_164 }
accum_509 -> { accum_166 }
accum_510 -> { accum_167 }
.MEM_511 -> { .MEM_287 }
i_512 -> { i_168 }
i_513 -> { i_158 }
carry_514 -> { carry_165 }
.MEM_515 -> { .MEM_261 }
_516 -> { _159 }
_517 -> { _160 }
_518 -> { _161 }
accum_519 -> { accum_162 }
_520 -> { _163 }
accum_521 -> { accum_164 }
accum_522 -> { accum_166 }
accum_523 -> { accum_167 }
.MEM_524 -> { .MEM_287 }
i_525 -> { i_168 }
i_526 -> { i_158 }
carry_527 -> { carry_165 }
.MEM_528 -> { .MEM_261 }
_529 -> { _159 }
_530 -> { _160 }
_531 -> { _161 }
accum_532 -> { accum_162 }
_533 -> { _163 }
accum_534 -> { accum_164 }
accum_535 -> { accum_166 }
accum_536 -> { accum_167 }
.MEM_537 -> { .MEM_287 }
i_538 -> { i_168 }
i_539 -> { i_146 }
carry_540 -> { carry_153 }
.MEM_541 -> { .MEM_260 }
_542 -> { _147 }
_543 -> { _148 }
_544 -> { _149 }
accum_545 -> { accum_150 }
_546 -> { _151 }
accum_547 -> { accum_152 }
accum_548 -> { accum_154 }
accum_549 -> { accum_155 }
.MEM_550 -> { .MEM_288 }
i_551 -> { i_156 }
i_552 -> { i_146 }
carry_553 -> { carry_153 }
.MEM_554 -> { .MEM_260 }
_555 -> { _147 }
_556 -> { _148 }
_557 -> { _149 }
accum_558 -> { accum_150 }
_559 -> { _151 }
accum_560 -> { accum_152 }
accum_561 -> { accum_154 }
accum_562 -> { accum_155 }
.MEM_563 -> { .MEM_288 }
i_564 -> { i_156 }
i_565 -> { i_146 }
carry_566 -> { carry_153 }
.MEM_567 -> { .MEM_260 }
_568 -> { _147 }
_569 -> { _148 }
_570 -> { _149 }
accum_571 -> { accum_150 }
_572 -> { _151 }
accum_573 -> { accum_152 }
accum_574 -> { accum_154 }
accum_575 -> { accum_155 }
.MEM_576 -> { .MEM_288 }
i_577 -> { i_156 }
i_578 -> { i_146 }
carry_579 -> { carry_153 }
.MEM_580 -> { .MEM_260 }
_581 -> { _147 }
_582 -> { _148 }
_583 -> { _149 }
accum_584 -> { accum_150 }
_585 -> { _151 }
accum_586 -> { accum_152 }
accum_587 -> { accum_154 }
accum_588 -> { accum_155 }
.MEM_589 -> { .MEM_288 }
i_590 -> { i_156 }
i_591 -> { i_133 }
carry_592 -> { carry_140 }
.MEM_593 -> { .MEM_258 }
_594 -> { _134 }
_595 -> { _135 }
_596 -> { _136 }
accum_597 -> { accum_137 }
_598 -> { _138 }
accum_599 -> { accum_139 }
accum_600 -> { accum_141 }
accum_601 -> { accum_142 }
.MEM_602 -> { .MEM_290 }
i_603 -> { i_143 }
i_604 -> { i_133 }
carry_605 -> { carry_140 }
.MEM_606 -> { .MEM_258 }
_607 -> { _134 }
_608 -> { _135 }
_609 -> { _136 }
accum_610 -> { accum_137 }
_611 -> { _138 }
accum_612 -> { accum_139 }
accum_613 -> { accum_141 }
accum_614 -> { accum_142 }
.MEM_615 -> { .MEM_290 }
i_616 -> { i_143 }
i_617 -> { i_133 }
carry_618 -> { carry_140 }
.MEM_619 -> { .MEM_258 }
_620 -> { _134 }
_621 -> { _135 }
_622 -> { _136 }
accum_623 -> { accum_137 }
_624 -> { _138 }
accum_625 -> { accum_139 }
accum_626 -> { accum_141 }
accum_627 -> { accum_142 }
.MEM_628 -> { .MEM_290 }
i_629 -> { i_143 }
i_630 -> { i_133 }
carry_631 -> { carry_140 }
.MEM_632 -> { .MEM_258 }
_633 -> { _134 }
_634 -> { _135 }
_635 -> { _136 }
accum_636 -> { accum_137 }
_637 -> { _138 }
accum_638 -> { accum_139 }
accum_639 -> { accum_141 }
accum_640 -> { accum_142 }
.MEM_641 -> { .MEM_290 }
i_642 -> { i_143 }
i_643 -> { i_122 }
carry_644 -> { carry_129 }
.MEM_645 -> { .MEM_257 }
_646 -> { _123 }
_647 -> { _124 }
_648 -> { _125 }
accum_649 -> { accum_126 }
_650 -> { _127 }
accum_651 -> { accum_128 }
accum_652 -> { accum_130 }
accum_653 -> { accum_131 }
.MEM_654 -> { .MEM_291 }
i_655 -> { i_132 }
i_656 -> { i_122 }
carry_657 -> { carry_129 }
.MEM_658 -> { .MEM_257 }
_659 -> { _123 }
_660 -> { _124 }
_661 -> { _125 }
accum_662 -> { accum_126 }
_663 -> { _127 }
accum_664 -> { accum_128 }
accum_665 -> { accum_130 }
accum_666 -> { accum_131 }
.MEM_667 -> { .MEM_291 }
i_668 -> { i_132 }
i_669 -> { i_122 }
carry_670 -> { carry_129 }
.MEM_671 -> { .MEM_257 }
_672 -> { _123 }
_673 -> { _124 }
_674 -> { _125 }
accum_675 -> { accum_126 }
_676 -> { _127 }
accum_677 -> { accum_128 }
accum_678 -> { accum_130 }
accum_679 -> { accum_131 }
.MEM_680 -> { .MEM_291 }
i_681 -> { i_132 }
i_682 -> { i_122 }
carry_683 -> { carry_129 }
.MEM_684 -> { .MEM_257 }
_685 -> { _123 }
_686 -> { _124 }
_687 -> { _125 }
accum_688 -> { accum_126 }
_689 -> { _127 }
accum_690 -> { accum_128 }
accum_691 -> { accum_130 }
accum_692 -> { accum_131 }
.MEM_693 -> { .MEM_291 }
i_694 -> { i_132 }
j_695 -> { j_107 }
carry_696 -> { carry_113 }
.MEM_697 -> { .MEM_255 }
_698 -> { _108 }
_699 -> { _109 }
accum_700 -> { accum_110 }
_701 -> { _111 }
accum_702 -> { accum_112 }
_703 -> { _114 }
accum_704 -> { accum_115 }
_705 -> { _116 }
_706 -> { _117 }
_707 -> { _118 }
_708 -> { _119 }
.MEM_709 -> { .MEM_289 }
j_710 -> { j_120 }
j_711 -> { j_107 }
carry_712 -> { carry_113 }
.MEM_713 -> { .MEM_255 }
_714 -> { _108 }
_715 -> { _109 }
accum_716 -> { accum_110 }
_717 -> { _111 }
accum_718 -> { accum_112 }
_719 -> { _114 }
accum_720 -> { accum_115 }
_721 -> { _116 }
_722 -> { _117 }
_723 -> { _118 }
_724 -> { _119 }
.MEM_725 -> { .MEM_289 }
j_726 -> { j_120 }
j_727 -> { j_107 }
carry_728 -> { carry_113 }
.MEM_729 -> { .MEM_255 }
_730 -> { _108 }
_731 -> { _109 }
accum_732 -> { accum_110 }
_733 -> { _111 }
accum_734 -> { accum_112 }
_735 -> { _114 }
accum_736 -> { accum_115 }
_737 -> { _116 }
_738 -> { _117 }
_739 -> { _118 }
_740 -> { _119 }
.MEM_741 -> { .MEM_289 }
j_742 -> { j_120 }
j_743 -> { j_107 }
carry_744 -> { carry_113 }
.MEM_745 -> { .MEM_255 }
_746 -> { _108 }
_747 -> { _109 }
accum_748 -> { accum_110 }
_749 -> { _111 }
accum_750 -> { accum_112 }
_751 -> { _114 }
accum_752 -> { accum_115 }
_753 -> { _116 }
_754 -> { _117 }
_755 -> { _118 }
_756 -> { _119 }
.MEM_757 -> { .MEM_289 }
j_758 -> { j_120 }
i_759 -> { i_95 }
carry_760 -> { carry_102 }
.MEM_761 -> { .MEM_254 }
_762 -> { _96 }
_763 -> { _97 }
_764 -> { _98 }
accum_765 -> { accum_99 }
_766 -> { _100 }
accum_767 -> { accum_101 }
accum_768 -> { accum_103 }
accum_769 -> { accum_104 }
.MEM_770 -> { .MEM_292 }
i_771 -> { i_105 }
i_772 -> { i_95 }
carry_773 -> { carry_102 }
.MEM_774 -> { .MEM_254 }
_775 -> { _96 }
_776 -> { _97 }
_777 -> { _98 }
accum_778 -> { accum_99 }
_779 -> { _100 }
accum_780 -> { accum_101 }
accum_781 -> { accum_103 }
accum_782 -> { accum_104 }
.MEM_783 -> { .MEM_292 }
i_784 -> { i_105 }
i_785 -> { i_95 }
carry_786 -> { carry_102 }
.MEM_787 -> { .MEM_254 }
_788 -> { _96 }
_789 -> { _97 }
_790 -> { _98 }
accum_791 -> { accum_99 }
_792 -> { _100 }
accum_793 -> { accum_101 }
accum_794 -> { accum_103 }
accum_795 -> { accum_104 }
.MEM_796 -> { .MEM_292 }
i_797 -> { i_105 }
i_798 -> { i_95 }
carry_799 -> { carry_102 }
.MEM_800 -> { .MEM_254 }
_801 -> { _96 }
_802 -> { _97 }
_803 -> { _98 }
accum_804 -> { accum_99 }
_805 -> { _100 }
accum_806 -> { accum_101 }
accum_807 -> { accum_103 }
accum_808 -> { accum_104 }
.MEM_809 -> { .MEM_292 }
i_810 -> { i_105 }
i_811 -> { i_93 }
.MEM_812 -> { .MEM_253 }
.MEM_813 -> { .MEM_293 }
.MEM_814 -> { .MEM_294 }
i_815 -> { i_94 }
i_816 -> { i_93 }
.MEM_817 -> { .MEM_253 }
.MEM_818 -> { .MEM_293 }
.MEM_819 -> { .MEM_294 }
i_820 -> { i_94 }
i_821 -> { i_93 }
.MEM_822 -> { .MEM_253 }
.MEM_823 -> { .MEM_293 }
.MEM_824 -> { .MEM_294 }
i_825 -> { i_94 }
i_826 -> { i_93 }
.MEM_827 -> { .MEM_253 }
.MEM_828 -> { .MEM_293 }
.MEM_829 -> { .MEM_294 }
i_830 -> { i_94 }
i_831 -> { i_80 }
.MEM_832 -> { .MEM_250 }
.MEM_833 -> { .MEM_280 }
i_834 -> { i_81 }
i_835 -> { i_80 }
.MEM_836 -> { .MEM_250 }
.MEM_837 -> { .MEM_280 }
i_838 -> { i_81 }
i_839 -> { i_80 }
.MEM_840 -> { .MEM_250 }
.MEM_841 -> { .MEM_280 }
i_842 -> { i_81 }
i_843 -> { i_80 }
.MEM_844 -> { .MEM_250 }
.MEM_845 -> { .MEM_280 }
i_846 -> { i_81 }
i_847 -> { i_70 }
n_848 -> { n_76 }
_849 -> { _71 }
_850 -> { _72 }
_851 -> { _73 }
_852 -> { _74 }
_853 -> { _75 }
n_854 -> { n_77 }
i_855 -> { i_78 }
i_856 -> { i_70 }
n_857 -> { n_76 }
_858 -> { _71 }
_859 -> { _72 }
_860 -> { _73 }
_861 -> { _74 }
_862 -> { _75 }
n_863 -> { n_77 }
i_864 -> { i_78 }
i_865 -> { i_70 }
n_866 -> { n_76 }
_867 -> { _71 }
_868 -> { _72 }
_869 -> { _73 }
_870 -> { _74 }
_871 -> { _75 }
n_872 -> { n_77 }
i_873 -> { i_78 }
i_874 -> { i_70 }
n_875 -> { n_76 }
_876 -> { _71 }
_877 -> { _72 }
_878 -> { _73 }
_879 -> { _74 }
_880 -> { _75 }
n_881 -> { n_77 }
i_882 -> { i_78 }
i_883 -> { i_59 }
n_884 -> { n_65 }
_885 -> { _60 }
_886 -> { _61 }
_887 -> { _62 }
_888 -> { _63 }
_889 -> { _64 }
n_890 -> { n_66 }
i_891 -> { i_67 }
i_892 -> { i_59 }
n_893 -> { n_65 }
_894 -> { _60 }
_895 -> { _61 }
_896 -> { _62 }
_897 -> { _63 }
_898 -> { _64 }
n_899 -> { n_66 }
i_900 -> { i_67 }
i_901 -> { i_59 }
n_902 -> { n_65 }
_903 -> { _60 }
_904 -> { _61 }
_905 -> { _62 }
_906 -> { _63 }
_907 -> { _64 }
n_908 -> { n_66 }
i_909 -> { i_67 }
i_910 -> { i_59 }
n_911 -> { n_65 }
_912 -> { _60 }
_913 -> { _61 }
_914 -> { _62 }
_915 -> { _63 }
_916 -> { _64 }
n_917 -> { n_66 }
i_918 -> { i_67 }
i_919 -> { i_191 }
_920 -> { _192 }
_921 -> { _193 }
i_922 -> { i_195 }
i_923 -> { i_191 }
_924 -> { _192 }
_925 -> { _193 }
i_926 -> { i_195 }
i_927 -> { i_191 }
_928 -> { _192 }
_929 -> { _193 }
i_930 -> { i_195 }
i_931 -> { i_191 }
_932 -> { _192 }
_933 -> { _193 }
i_934 -> { i_195 }
Incremental SSA update started at block: 6
Number of blocks in CFG: 388
Number of blocks to update: 258 ( 66%)


Removing basic block 317
Removing basic block 10
Removing basic block 306
Removing basic block 15
Removing basic block 307
Removing basic block 19
Removing basic block 308
Removing basic block 23
Removing basic block 309
Removing basic block 30
Removing basic block 310
Removing basic block 33
Removing basic block 34
Removing basic block 32
Removing basic block 311
Removing basic block 37
Removing basic block 312
Removing basic block 41
Removing basic block 42
Removing basic block 40
Removing basic block 313
Removing basic block 45
Removing basic block 46
Removing basic block 44
Removing basic block 314
Removing basic block 51
Removing basic block 52
Removing basic block 50
Removing basic block 315
Removing basic block 56
Removing basic block 57
Removing basic block 55
Removing basic block 316
Removing basic block 61
Removing basic block 305
Removing basic block 69
Removing basic block 67
Removing basic block 65
Removing basic block 318
Removing basic block 74
Removing basic block 321
Removing basic block 81
Removing basic block 320
Removing basic block 85
Removing basic block 319
Removing basic block 89
Removing basic block 90
Removing basic block 88
Removing basic block 133
Removing basic block 187
Removing basic block 243
Merging blocks 9 and 155
Merging blocks 14 and 281
Merging blocks 18 and 273
Merging blocks 22 and 265
Merging blocks 29 and 257
Merging blocks 39 and 217
Removing basic block 70
Merging blocks 73 and 147
Merging blocks 80 and 117
Removing basic block 105
Removing basic block 107
Removing basic block 108
Removing basic block 110
Removing basic block 112
Removing basic block 113
Removing basic block 114
Removing basic block 115
Merging blocks 125 and 126
Merging blocks 131 and 132
Merging blocks 138 and 139
Merging blocks 142 and 143
Merging blocks 146 and 91
Removing basic block 161
Merging blocks 162 and 163
Merging blocks 172 and 173
Merging blocks 176 and 177
Merging blocks 180 and 181
Merging blocks 184 and 58
Merging blocks 185 and 186
Merging blocks 192 and 193
Merging blocks 196 and 197
Merging blocks 200 and 53
Merging blocks 204 and 205
Merging blocks 208 and 209
Merging blocks 212 and 213
Merging blocks 216 and 47
Merging blocks 220 and 221
Merging blocks 224 and 225
Merging blocks 228 and 229
Merging blocks 232 and 43
Merging blocks 233 and 234
Merging blocks 241 and 242
Merging blocks 248 and 249
Merging blocks 252 and 253
Merging blocks 256 and 35
Removing basic block 289
Removing basic block 292
Removing basic block 293
Removing basic block 296
Removing basic block 297
Removing basic block 300
Removing basic block 301
Removing basic block 304
Merging blocks 9 and 156
Merging blocks 9 and 157
Merging blocks 9 and 158
Merging blocks 9 and 159
Merging blocks 9 and 160
Merging blocks 9 and 11
Merging blocks 14 and 282
Merging blocks 14 and 283
Merging blocks 14 and 284
Merging blocks 14 and 285
Merging blocks 14 and 286
Merging blocks 14 and 287
Merging blocks 14 and 288
Merging blocks 14 and 16
Merging blocks 14 and 17
Merging blocks 18 and 274
Merging blocks 18 and 275
Merging blocks 18 and 276
Merging blocks 18 and 277
Merging blocks 18 and 278
Merging blocks 18 and 279
Merging blocks 18 and 280
Merging blocks 18 and 20
Merging blocks 18 and 21
Merging blocks 22 and 266
Merging blocks 22 and 267
Merging blocks 22 and 268
Merging blocks 22 and 269
Merging blocks 22 and 270
Merging blocks 22 and 271
Merging blocks 22 and 272
Merging blocks 22 and 24
Merging blocks 29 and 258
Merging blocks 29 and 259
Merging blocks 29 and 260
Merging blocks 29 and 261
Merging blocks 29 and 262
Merging blocks 29 and 263
Merging blocks 29 and 264
Merging blocks 29 and 31
Merging blocks 29 and 111
Merging blocks 39 and 218
Merging blocks 73 and 148
Merging blocks 73 and 149
Merging blocks 73 and 150
Merging blocks 73 and 151
Merging blocks 73 and 152
Merging blocks 73 and 153
Merging blocks 73 and 154
Merging blocks 73 and 75
Merging blocks 73 and 76
Merging blocks 80 and 118
Merging blocks 80 and 119
Merging blocks 80 and 120
Merging blocks 80 and 121
Merging blocks 80 and 122
Merging blocks 80 and 123
Merging blocks 80 and 124
Merging blocks 80 and 82
Merging blocks 125 and 127
Merging blocks 125 and 128
Merging blocks 125 and 129
Merging blocks 125 and 130
Merging blocks 125 and 86
Merging blocks 125 and 87
Merging blocks 131 and 134
Merging blocks 131 and 135
Merging blocks 131 and 136
Merging blocks 138 and 140
Merging blocks 142 and 144
Merging blocks 146 and 92
Merging blocks 162 and 164
Merging blocks 162 and 165
Merging blocks 162 and 166
Merging blocks 162 and 167
Merging blocks 162 and 168
Merging blocks 162 and 62
Merging blocks 162 and 63
Merging blocks 172 and 174
Merging blocks 176 and 178
Merging blocks 180 and 182
Merging blocks 184 and 59
Merging blocks 185 and 188
Merging blocks 185 and 189
Merging blocks 185 and 190
Merging blocks 192 and 194
Merging blocks 196 and 198
Merging blocks 200 and 54
Merging blocks 200 and 169
Merging blocks 200 and 170
Merging blocks 204 and 206
Merging blocks 208 and 210
Merging blocks 212 and 214
Merging blocks 216 and 48
Merging blocks 220 and 222
Merging blocks 224 and 226
Merging blocks 228 and 230
Merging blocks 232 and 201
Merging blocks 232 and 202
Merging blocks 233 and 235
Merging blocks 233 and 236
Merging blocks 233 and 237
Merging blocks 233 and 238
Merging blocks 233 and 239
Merging blocks 233 and 240
Merging blocks 233 and 38
Merging blocks 241 and 244
Merging blocks 241 and 245
Merging blocks 241 and 246
Merging blocks 248 and 250
Merging blocks 252 and 254
Merging blocks 256 and 36
DoEmFloatIteration (struct InternalFPF * abase, struct InternalFPF * bbase, struct InternalFPF * cbase, long unsigned int arraysize, long unsigned int loops)
{
  int i;
  short unsigned int carry;
  short unsigned int * mantissa;
  short unsigned int accum;
  int i;
  int i;
  int i;
  int n;
  long int exponent_difference;
  int i;
  int i;
  int j;
  short unsigned int carry;
  short unsigned int extra_bits[4];
  struct InternalFPF locy;
  int i;
  int n;
  int i;
  int n;
  int i;
  int i;
  short unsigned int accum;
  int i;
  unsigned int accum;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  int n;
  int i;
  long unsigned int i;
  static unsigned char jtable[16] = {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
  long unsigned int elapsed;
  long unsigned int _1;
  unsigned char _2;
  long unsigned int _3;
  struct InternalFPF * _4;
  struct InternalFPF * _5;
  struct InternalFPF * _6;
  long unsigned int _7;
  struct InternalFPF * _8;
  struct InternalFPF * _9;
  struct InternalFPF * _10;
  long unsigned int _11;
  struct InternalFPF * _12;
  struct InternalFPF * _13;
  struct InternalFPF * _14;
  long unsigned int _15;
  struct InternalFPF * _16;
  struct InternalFPF * _17;
  struct InternalFPF * _18;
  long unsigned int _30;
  unsigned char _40;
  int _41;
  int _42;
  unsigned char _43;
  int _44;
  int _45;
  long unsigned int _46;
  unsigned char _47;
  unsigned char _48;
  unsigned char _49;
  long unsigned int _50;
  unsigned char _51;
  unsigned char _52;
  unsigned char _53;
  long unsigned int _56;
  long unsigned int _57;
  short unsigned int[4] * _58;
  short unsigned int[4] * _69;
  unsigned char _82;
  unsigned char _83;
  unsigned char _84;
  unsigned char _85;
  unsigned char _86;
  short int _87;
  unsigned short _88;
  short int _89;
  unsigned short _90;
  unsigned short _91;
  short int _92;
  short unsigned int[4] * _121;
  short unsigned int[4] * _157;
  short int _169;
  unsigned short _170;
  unsigned short _171;
  short int _172;
  short unsigned int _173;
  signed short _174;
  short unsigned int _185;
  short unsigned int _186;
  unsigned char _187;
  unsigned char _188;
  long unsigned int _194;
  long unsigned int _196;
  long unsigned int _199;
  unsigned char _200;
  short unsigned int _201;
  short unsigned int _202;
  short unsigned int[4] * _203;
  short int _214;
  int _215;
  int _216;
  unsigned short _221;
  unsigned short _222;
  unsigned short _223;
  short int _224;
  int _225;
  unsigned char _227;
  short unsigned int _245;
  short unsigned int _246;
  short unsigned int * _334;
  short unsigned int * _341;
  short unsigned int * _348;
  short unsigned int * _356;
  short unsigned int _358;
  short unsigned int * _369;
  short unsigned int _371;
  short unsigned int * _382;
  short unsigned int _384;
  short unsigned int * _395;
  short unsigned int _397;
  short unsigned int * _407;
  short unsigned int _408;
  int _409;
  short unsigned int * _416;
  short unsigned int _417;
  int _418;
  short unsigned int * _425;
  short unsigned int _426;
  int _427;
  short unsigned int * _434;
  short unsigned int _435;
  int _436;
  short unsigned int * _455;
  short unsigned int _456;
  int _457;
  short unsigned int * _464;
  short unsigned int _465;
  int _466;
  short unsigned int * _473;
  short unsigned int _474;
  int _475;
  short unsigned int * _482;
  short unsigned int _483;
  int _484;
  short unsigned int * _492;
  short unsigned int _494;
  short unsigned int * _505;
  short unsigned int _507;
  short unsigned int * _518;
  short unsigned int _520;
  short unsigned int * _531;
  short unsigned int _533;
  short unsigned int * _544;
  short unsigned int _546;
  short unsigned int * _557;
  short unsigned int _559;
  short unsigned int * _570;
  short unsigned int _572;
  short unsigned int * _583;
  short unsigned int _585;
  short unsigned int * _596;
  short unsigned int _598;
  short unsigned int * _609;
  short unsigned int _611;
  short unsigned int * _622;
  short unsigned int _624;
  short unsigned int * _635;
  short unsigned int _637;
  short unsigned int * _648;
  short unsigned int _650;
  short unsigned int * _661;
  short unsigned int _663;
  short unsigned int * _674;
  short unsigned int _676;
  short unsigned int * _687;
  short unsigned int _689;
  short unsigned int _698;
  short unsigned int _699;
  unsigned int _701;
  unsigned int _705;
  short unsigned int _706;
  short unsigned int _707;
  short unsigned int _708;
  short unsigned int _714;
  short unsigned int _715;
  unsigned int _717;
  unsigned int _719;
  unsigned int _721;
  short unsigned int _722;
  short unsigned int _723;
  short unsigned int _724;
  short unsigned int _730;
  short unsigned int _731;
  unsigned int _733;
  unsigned int _735;
  unsigned int _737;
  short unsigned int _738;
  short unsigned int _739;
  short unsigned int _740;
  short unsigned int _746;
  short unsigned int _747;
  unsigned int _749;
  unsigned int _751;
  unsigned int _753;
  short unsigned int _754;
  short unsigned int _755;
  short unsigned int _756;
  short unsigned int * _764;
  short unsigned int _766;
  short unsigned int * _777;
  short unsigned int _779;
  short unsigned int * _790;
  short unsigned int _792;
  short unsigned int * _803;
  short unsigned int _805;
  short unsigned int * _851;
  short unsigned int _852;
  int _853;
  short unsigned int * _860;
  short unsigned int _861;
  int _862;
  short unsigned int * _869;
  short unsigned int _870;
  int _871;
  short unsigned int * _878;
  short unsigned int _879;
  int _880;
  short unsigned int * _887;
  short unsigned int _888;
  int _889;
  short unsigned int * _896;
  short unsigned int _897;
  int _898;
  short unsigned int * _905;
  short unsigned int _906;
  int _907;
  short unsigned int * _914;
  short unsigned int _915;
  int _916;
  short unsigned int _920;
  short unsigned int _921;
  short unsigned int _924;
  short unsigned int _925;
  short unsigned int _928;
  short unsigned int _929;
  short unsigned int _932;
  short unsigned int _933;

  <bb 2> [0.39%]:
  elapsed_26 = StartStopwatch ();
  goto <bb 103>; [100.00%]

  <bb 3> [12.51%]:
  _1 = i_20 & 15;
  _2 = jtable[_1];
  switch (_2) <default: <L6> [20.00%], case 0: <L2> [20.00%], case 1: <L3> [20.00%], case 2: <L4> [20.00%], case 3: <L5> [20.00%]>

<L2> [2.50%]:
  _3 = i_20 * 12;
  _4 = cbase_32(D) + _3;
  _5 = bbase_33(D) + _3;
  _6 = abase_34(D) + _3;
  AddSubInternalFPF (0, _6, _5, _4);
  goto <bb 100> (<L6>); [100.00%]

<L3> [2.50%]:
  _7 = i_20 * 12;
  _8 = cbase_32(D) + _7;
  _9 = bbase_33(D) + _7;
  _10 = abase_34(D) + _7;
  AddSubInternalFPF (1, _10, _9, _8);
  goto <bb 100> (<L6>); [100.00%]

<L4> [2.50%]:
  _11 = i_20 * 12;
  _12 = cbase_32(D) + _11;
  _13 = bbase_33(D) + _11;
  _14 = abase_34(D) + _11;
  _40 = _14->type;
  _41 = (int) _40;
  _42 = _41 * 5;
  _43 = _13->type;
  _44 = (int) _43;
  _45 = _42 + _44;
  switch (_45) <default: <L20> [12.50%], case 0 ... 2: <L13> [12.50%], case 3: <L15> [12.50%], case 4: <L17> [12.50%], case 5: <L14> [12.50%], case 6 ... 7: <L18> [12.50%], case 8: <L14> [12.50%], case 9: <L17> [12.50%], case 10: <L14> [12.50%], case 11 ... 12: <L18> [12.50%], case 13: <L14> [12.50%], case 14: <L17> [12.50%], case 15: <L15> [12.50%], case 16 ... 18: <L13> [12.50%], case 19: <L17> [12.50%], case 20 ... 23: <L16> [12.50%], case 24: <L25> [12.50%]>

<L25> [0.31%]:
  _920 = _14->mantissa[0];
  _921 = _13->mantissa[0];
  if (_920 > _921)
    goto <bb 73>; [5.00%]
  else
    goto <bb 8>; [95.00%]

  <bb 8> [0.30%]:
  if (_920 < _921)
    goto <bb 74>; [5.00%]
  else
    goto <bb 9>; [95.00%]

  <bb 9> [0.29%]:
  _924 = _14->mantissa[1];
  _925 = _13->mantissa[1];
  if (_924 > _925)
    goto <bb 73>; [5.00%]
  else
    goto <bb 10>; [95.00%]

  <bb 10> [0.27%]:
  if (_924 < _925)
    goto <bb 74>; [5.00%]
  else
    goto <bb 11>; [95.00%]

  <bb 11> [0.26%]:
  _928 = _14->mantissa[2];
  _929 = _13->mantissa[2];
  if (_928 > _929)
    goto <bb 73>; [5.00%]
  else
    goto <bb 12>; [95.00%]

  <bb 12> [0.25%]:
  if (_928 < _929)
    goto <bb 74>; [5.00%]
  else
    goto <bb 13>; [95.00%]

  <bb 13> [0.24%]:
  _932 = _14->mantissa[3];
  _933 = _13->mantissa[3];
  if (_932 > _933)
    goto <bb 73>; [5.00%]
  else
    goto <bb 14>; [95.00%]

  <bb 14> [0.23%]:
  if (_932 < _933)
    goto <bb 74>; [5.00%]
  else
    goto <bb 75>; [95.00%]

<L13> [0.31%]:
  _46 = __builtin_object_size (_14, 0);
  __builtin___memmove_chk (_14, _12, 12, _46);
  _47 = _12->sign;
  _48 = _13->sign;
  _49 = _47 ^ _48;
  _12->sign = _49;
  goto <bb 76> (<L20>); [100.00%]

<L14> [0.31%]:
  _50 = __builtin_object_size (_13, 0);
  __builtin___memmove_chk (_13, _12, 12, _50);
  _51 = _12->sign;
  _52 = _14->sign;
  _53 = _51 ^ _52;
  _12->sign = _53;
  goto <bb 76> (<L20>); [100.00%]

<L15> [0.31%]:
  _12->type = 4;
  _12->exp = 32767;
  _12->sign = 1;
  _12->mantissa[0] = 16384;
  _12->mantissa[1] = 0;
  _12->mantissa[2] = 0;
  _12->mantissa[3] = 0;
  goto <bb 76> (<L20>); [100.00%]

<L16> [0.31%]:
  _56 = __builtin_object_size (_14, 0);
  __builtin___memmove_chk (_14, _12, 12, _56);
  goto <bb 76> (<L20>); [100.00%]

<L17> [0.31%]:
  _57 = __builtin_object_size (_13, 0);
  __builtin___memmove_chk (_13, _12, 12, _57);
  goto <bb 76> (<L20>); [100.00%]

<L18> [0.31%]:
  __builtin_memcpy (&locy, _13, 12);
  _58 = &_14->mantissa;
  _887 = _58;
  _888 = *_887;
  _889 = (int) _888;
  n_890 = _889;
  _896 = _58 + 2;
  _897 = *_896;
  _898 = (int) _897;
  n_899 = n_890 | _898;
  _905 = _58 + 4;
  _906 = *_905;
  _907 = (int) _906;
  n_908 = n_899 | _907;
  _914 = _58 + 6;
  _915 = *_914;
  _916 = (int) _915;
  n_917 = n_908 | _916;
  if (n_917 == 0)
    goto <bb 22>; [50.00%]
  else
    goto <bb 21>; [50.00%]

  <bb 21> [0.16%]:
  _69 = &_13->mantissa;
  _851 = _69;
  _852 = *_851;
  _853 = (int) _852;
  n_854 = _853;
  _860 = _69 + 2;
  _861 = *_860;
  _862 = (int) _861;
  n_863 = n_854 | _862;
  _869 = _69 + 4;
  _870 = *_869;
  _871 = (int) _870;
  n_872 = n_863 | _871;
  _878 = _69 + 6;
  _879 = *_878;
  _880 = (int) _879;
  n_881 = n_872 | _880;
  if (n_881 == 0)
    goto <bb 22>; [50.00%]
  else
    goto <bb 23>; [50.00%]

  <bb 22> [0.23%]:
  _12->type = 3;
  _12->sign = 0;
  _12->exp = -32767;
  _12->mantissa[0] = 0;
  _12->mantissa[1] = 0;
  _12->mantissa[2] = 0;
  _12->mantissa[3] = 0;

  <bb 23> [0.31%]:
  _82 = _14->type;
  if (_82 == 1)
    goto <bb 25>; [34.00%]
  else
    goto <bb 24>; [66.00%]

  <bb 24> [0.21%]:
  _83 = _13->type;
  if (_83 == 1)
    goto <bb 25>; [34.00%]
  else
    goto <bb 26>; [66.00%]

  <bb 25> [0.18%]:
  _12->type = 1;
  goto <bb 27>; [100.00%]

  <bb 26> [0.14%]:
  _12->type = 2;

  <bb 27> [0.31%]:
  _84 = _14->sign;
  _85 = _13->sign;
  _86 = _84 ^ _85;
  _12->sign = _86;
  _87 = _14->exp;
  _88 = (unsigned short) _87;
  _89 = _13->exp;
  _90 = (unsigned short) _89;
  _91 = _88 + _90;
  _92 = (short int) _91;
  _12->exp = _92;
  _12->mantissa[0] = 0;
  extra_bits[0] = 0;
  _12->mantissa[1] = 0;
  extra_bits[1] = 0;
  _12->mantissa[2] = 0;
  extra_bits[2] = 0;
  _12->mantissa[3] = 0;
  extra_bits[3] = 0;
  goto <bb 46>; [100.00%]

  <bb 28> [6.80%]:
  _698 = _14->mantissa[3];
  _699 = _12->mantissa[3];
  accum_700 = (unsigned int) _699;
  _701 = (unsigned int) _698;
  accum_702 = accum_700 + _701;
  accum_704 = accum_702;
  _705 = accum_704 >> 16;
  _706 = (short unsigned int) _705;
  _707 = _706 & 1;
  _708 = (short unsigned int) accum_704;
  MEM[(short unsigned int *)_12].mantissa[3] = _708;
  _714 = _14->mantissa[2];
  _715 = _12->mantissa[2];
  accum_716 = (unsigned int) _715;
  _717 = (unsigned int) _714;
  accum_718 = accum_716 + _717;
  _719 = (unsigned int) _707;
  accum_720 = accum_718 + _719;
  _721 = accum_720 >> 16;
  _722 = (short unsigned int) _721;
  _723 = _722 & 1;
  _724 = (short unsigned int) accum_720;
  MEM[(short unsigned int *)_12].mantissa[2] = _724;
  _730 = _14->mantissa[1];
  _731 = _12->mantissa[1];
  accum_732 = (unsigned int) _731;
  _733 = (unsigned int) _730;
  accum_734 = accum_732 + _733;
  _735 = (unsigned int) _723;
  accum_736 = accum_734 + _735;
  _737 = accum_736 >> 16;
  _738 = (short unsigned int) _737;
  _739 = _738 & 1;
  _740 = (short unsigned int) accum_736;
  MEM[(short unsigned int *)_12].mantissa[1] = _740;
  _746 = _14->mantissa[0];
  _747 = _12->mantissa[0];
  accum_748 = (unsigned int) _747;
  _749 = (unsigned int) _746;
  accum_750 = accum_748 + _749;
  _751 = (unsigned int) _739;
  accum_752 = accum_750 + _751;
  _753 = accum_752 >> 16;
  _754 = (short unsigned int) _753;
  _755 = _754 & 1;
  _756 = (short unsigned int) accum_752;
  MEM[(short unsigned int *)_12].mantissa[0] = _756;

  <bb 29> [20.00%]:
  # carry_189 = PHI <0(53), _755(28)>
  _121 = &_12->mantissa;
  _648 = _121;
  accum_649 = *_648;
  _650 = accum_649 & 1;
  accum_651 = accum_649 >> 1;
  if (carry_189 != 0)
    goto <bb 30>; [50.00%]
  else
    goto <bb 31>; [50.00%]

  <bb 30> [10.00%]:
  accum_652 = accum_651 | 32768;

  <bb 31> [20.00%]:
  # accum_653 = PHI <accum_651(29), accum_652(30)>
  *_648 = accum_653;
  _661 = _121 + 2;
  accum_662 = *_661;
  _663 = accum_662 & 1;
  accum_664 = accum_662 >> 1;
  if (_650 != 0)
    goto <bb 32>; [50.00%]
  else
    goto <bb 33>; [50.00%]

  <bb 32> [10.00%]:
  accum_665 = accum_664 | 32768;

  <bb 33> [20.00%]:
  # accum_666 = PHI <accum_664(31), accum_665(32)>
  *_661 = accum_666;
  _674 = _121 + 4;
  accum_675 = *_674;
  _676 = accum_675 & 1;
  accum_677 = accum_675 >> 1;
  if (_663 != 0)
    goto <bb 34>; [50.00%]
  else
    goto <bb 35>; [50.00%]

  <bb 34> [10.00%]:
  accum_678 = accum_677 | 32768;

  <bb 35> [20.00%]:
  # accum_679 = PHI <accum_677(33), accum_678(34)>
  *_674 = accum_679;
  _687 = _121 + 6;
  accum_688 = *_687;
  _689 = accum_688 & 1;
  accum_690 = accum_688 >> 1;
  if (_676 != 0)
    goto <bb 36>; [50.00%]
  else
    goto <bb 37>; [50.00%]

  <bb 36> [10.00%]:
  accum_691 = accum_690 | 32768;

  <bb 37> [20.00%]:
  # accum_692 = PHI <accum_690(35), accum_691(36)>
  *_687 = accum_692;
  _596 = &extra_bits;
  accum_597 = *_596;
  _598 = accum_597 & 1;
  accum_599 = accum_597 >> 1;
  if (_689 != 0)
    goto <bb 38>; [50.00%]
  else
    goto <bb 39>; [50.00%]

  <bb 38> [10.00%]:
  accum_600 = accum_599 | 32768;

  <bb 39> [20.00%]:
  # accum_601 = PHI <accum_599(37), accum_600(38)>
  *_596 = accum_601;
  _609 = &extra_bits + 2;
  accum_610 = *_609;
  _611 = accum_610 & 1;
  accum_612 = accum_610 >> 1;
  if (_598 != 0)
    goto <bb 40>; [50.00%]
  else
    goto <bb 41>; [50.00%]

  <bb 40> [10.00%]:
  accum_613 = accum_612 | 32768;

  <bb 41> [20.00%]:
  # accum_614 = PHI <accum_612(39), accum_613(40)>
  *_609 = accum_614;
  _622 = &extra_bits + 4;
  accum_623 = *_622;
  _624 = accum_623 & 1;
  accum_625 = accum_623 >> 1;
  if (_611 != 0)
    goto <bb 42>; [50.00%]
  else
    goto <bb 43>; [50.00%]

  <bb 42> [10.00%]:
  accum_626 = accum_625 | 32768;

  <bb 43> [20.00%]:
  # accum_627 = PHI <accum_625(41), accum_626(42)>
  *_622 = accum_627;
  _635 = &extra_bits + 6;
  accum_636 = *_635;
  _637 = accum_636 & 1;
  accum_638 = accum_636 >> 1;
  if (_624 != 0)
    goto <bb 44>; [50.00%]
  else
    goto <bb 45>; [50.00%]

  <bb 44> [10.00%]:
  accum_639 = accum_638 | 32768;

  <bb 45> [20.00%]:
  # accum_640 = PHI <accum_638(43), accum_639(44)>
  *_635 = accum_640;
  i_145 = i_144 + 1;

  <bb 46> [20.31%]:
  # i_144 = PHI <0(27), i_145(45)>
  if (i_144 <= 63)
    goto <bb 47>; [98.46%]
  else
    goto <bb 54>; [1.54%]

  <bb 47> [20.00%]:
  _764 = &locy.mantissa;
  accum_765 = *_764;
  _766 = accum_765 & 1;
  accum_767 = accum_765 >> 1;
  *_764 = accum_767;
  _777 = &locy.mantissa + 2;
  accum_778 = *_777;
  _779 = accum_778 & 1;
  accum_780 = accum_778 >> 1;
  if (_766 != 0)
    goto <bb 48>; [50.00%]
  else
    goto <bb 49>; [50.00%]

  <bb 48> [10.00%]:
  accum_781 = accum_780 | 32768;

  <bb 49> [20.00%]:
  # accum_782 = PHI <accum_780(47), accum_781(48)>
  *_777 = accum_782;
  _790 = &locy.mantissa + 4;
  accum_791 = *_790;
  _792 = accum_791 & 1;
  accum_793 = accum_791 >> 1;
  if (_779 != 0)
    goto <bb 50>; [50.00%]
  else
    goto <bb 51>; [50.00%]

  <bb 50> [10.00%]:
  accum_794 = accum_793 | 32768;

  <bb 51> [20.00%]:
  # accum_795 = PHI <accum_793(49), accum_794(50)>
  *_790 = accum_795;
  _803 = &locy.mantissa + 6;
  accum_804 = *_803;
  _805 = accum_804 & 1;
  accum_806 = accum_804 >> 1;
  if (_792 != 0)
    goto <bb 52>; [50.00%]
  else
    goto <bb 53>; [50.00%]

  <bb 52> [10.00%]:
  accum_807 = accum_806 | 32768;

  <bb 53> [20.00%]:
  # accum_808 = PHI <accum_806(51), accum_807(52)>
  *_803 = accum_808;
  if (_805 != 0)
    goto <bb 28>; [34.00%]
  else
    goto <bb 29>; [66.00%]

  <bb 54> [0.31%]:
  goto <bb 63>; [100.00%]

  <bb 55> [0.89%]:
  accum_496 = accum_495 | 1;

  <bb 56> [1.77%]:
  # accum_497 = PHI <accum_495(70), accum_496(55)>
  *_492 = accum_497;
  _505 = _157 + 4;
  accum_506 = *_505;
  _507 = accum_506 & 32768;
  accum_508 = accum_506 << 1;
  if (_494 != 0)
    goto <bb 57>; [50.00%]
  else
    goto <bb 58>; [50.00%]

  <bb 57> [0.89%]:
  accum_509 = accum_508 | 1;

  <bb 58> [1.77%]:
  # accum_510 = PHI <accum_508(56), accum_509(57)>
  *_505 = accum_510;
  _518 = _157 + 2;
  accum_519 = *_518;
  _520 = accum_519 & 32768;
  accum_521 = accum_519 << 1;
  if (_507 != 0)
    goto <bb 59>; [50.00%]
  else
    goto <bb 60>; [50.00%]

  <bb 59> [0.89%]:
  accum_522 = accum_521 | 1;

  <bb 60> [1.77%]:
  # accum_523 = PHI <accum_521(58), accum_522(59)>
  *_518 = accum_523;
  _531 = _157;
  accum_532 = *_531;
  _533 = accum_532 & 32768;
  accum_534 = accum_532 << 1;
  if (_520 != 0)
    goto <bb 61>; [50.00%]
  else
    goto <bb 62>; [50.00%]

  <bb 61> [0.89%]:
  accum_535 = accum_534 | 1;

  <bb 62> [1.77%]:
  # accum_536 = PHI <accum_534(60), accum_535(61)>
  *_531 = accum_536;
  _169 = _12->exp;
  _170 = (unsigned short) _169;
  _171 = _170 + 65535;
  _172 = (short int) _171;
  _12->exp = _172;

  <bb 63> [2.09%]:
  _173 = _12->mantissa[0];
  _174 = (signed short) _173;
  if (_174 >= 0)
    goto <bb 64>; [85.00%]
  else
    goto <bb 71>; [15.00%]

  <bb 64> [1.78%]:
  _544 = &extra_bits + 6;
  accum_545 = *_544;
  _546 = accum_545 & 32768;
  accum_547 = accum_545 << 1;
  *_544 = accum_547;
  _557 = &extra_bits + 4;
  accum_558 = *_557;
  _559 = accum_558 & 32768;
  accum_560 = accum_558 << 1;
  if (_546 != 0)
    goto <bb 65>; [50.00%]
  else
    goto <bb 66>; [50.00%]

  <bb 65> [0.89%]:
  accum_561 = accum_560 | 1;

  <bb 66> [1.78%]:
  # accum_562 = PHI <accum_560(64), accum_561(65)>
  *_557 = accum_562;
  _570 = &extra_bits + 2;
  accum_571 = *_570;
  _572 = accum_571 & 32768;
  accum_573 = accum_571 << 1;
  if (_559 != 0)
    goto <bb 67>; [50.00%]
  else
    goto <bb 68>; [50.00%]

  <bb 67> [0.89%]:
  accum_574 = accum_573 | 1;

  <bb 68> [1.78%]:
  # accum_575 = PHI <accum_573(66), accum_574(67)>
  *_570 = accum_575;
  _583 = &extra_bits;
  accum_584 = *_583;
  _585 = accum_584 & 32768;
  accum_586 = accum_584 << 1;
  if (_572 != 0)
    goto <bb 69>; [50.00%]
  else
    goto <bb 70>; [50.00%]

  <bb 69> [0.89%]:
  accum_587 = accum_586 | 1;

  <bb 70> [1.78%]:
  # accum_588 = PHI <accum_586(68), accum_587(69)>
  *_583 = accum_588;
  _157 = &_12->mantissa;
  _492 = _157 + 6;
  accum_493 = *_492;
  _494 = accum_493 & 32768;
  accum_495 = accum_493 << 1;
  if (_585 != 0)
    goto <bb 55>; [50.00%]
  else
    goto <bb 56>; [50.00%]

  <bb 71> [0.31%]:
  _455 = &extra_bits;
  _456 = *_455;
  _457 = (int) _456;
  n_458 = _457;
  _464 = &extra_bits + 2;
  _465 = *_464;
  _466 = (int) _465;
  n_467 = n_458 | _466;
  _473 = &extra_bits + 4;
  _474 = *_473;
  _475 = (int) _474;
  n_476 = n_467 | _475;
  _482 = &extra_bits + 6;
  _483 = *_482;
  _484 = (int) _483;
  n_485 = n_476 | _484;
  if (n_485 == 0)
    goto <bb 72>; [50.00%]
  else
    goto <bb 76> (<L20>); [50.00%]

  <bb 72> [0.16%]:
  _185 = _12->mantissa[3];
  _186 = _185 | 1;
  _12->mantissa[3] = _186;
  goto <bb 76> (<L20>); [100.00%]

  <bb 73> [0.05%]:
  _194 = __builtin_object_size (_14, 0);
  __builtin___memmove_chk (_14, _12, 12, _194);
  goto <bb 76> (<L20>); [100.00%]

  <bb 74> [0.04%]:
  _199 = __builtin_object_size (_13, 0);
  __builtin___memmove_chk (_13, _12, 12, _199);
  goto <bb 76> (<L20>); [100.00%]

  <bb 75> [0.23%]:
  _196 = __builtin_object_size (_14, 0);
  __builtin___memmove_chk (_14, _12, 12, _196);

<L20> [2.50%]:
  _187 = _12->type;
  _188 = _187 + 255;
  if (_188 <= 1)
    goto <bb 77>; [24.54%]
  else
    goto <bb 98>; [75.46%]

  <bb 77> [0.61%]:
  _203 = &_12->mantissa;
  _407 = _203;
  _408 = *_407;
  _409 = (int) _408;
  n_410 = _409;
  _416 = _203 + 2;
  _417 = *_416;
  _418 = (int) _417;
  n_419 = n_410 | _418;
  _425 = _203 + 4;
  _426 = *_425;
  _427 = (int) _426;
  n_428 = n_419 | _427;
  _434 = _203 + 6;
  _435 = *_434;
  _436 = (int) _435;
  n_437 = n_428 | _436;
  if (n_437 == 0)
    goto <bb 78>; [33.00%]
  else
    goto <bb 79>; [67.00%]

  <bb 78> [0.20%]:
  __builtin_puts (&"Error:  zero significand in denormalize"[0]);

  <bb 79> [0.61%]:
  _214 = _12->exp;
  _215 = (int) _214;
  _216 = _215 + 32767;
  exponent_difference_217 = (long int) _216;
  if (exponent_difference_217 < 0)
    goto <bb 80>; [39.77%]
  else
    goto <bb 96>; [60.23%]

  <bb 80> [0.24%]:
  exponent_difference_218 = -exponent_difference_217;
  if (exponent_difference_217 < -63)
    goto <bb 81>; [67.00%]
  else
    goto <bb 82>; [33.00%]

  <bb 81> [0.16%]:
  _12->type = 0;
  _12->exp = -32767;
  _12->mantissa[0] = 0;
  _12->mantissa[1] = 0;
  _12->mantissa[2] = 0;
  _12->mantissa[3] = 0;
  goto <bb 96>; [100.00%]

  <bb 82> [0.08%]:
  _221 = (unsigned short) _214;
  _222 = (unsigned short) exponent_difference_218;
  _223 = _221 + _222;
  _224 = (short int) _223;
  _12->exp = _224;
  _225 = (int) exponent_difference_218;
  mantissa_226 = &_12->mantissa;
  _227 = _12->type;
  if (_227 != 0)
    goto <bb 83>; [54.00%]
  else
    goto <bb 96>; [46.00%]

  <bb 83> [0.04%]:
  if (_225 > 63)
    goto <bb 85>; [50.00%]
  else
    goto <bb 84>; [50.00%]

  <bb 84> [0.02%]:
  goto <bb 88>; [100.00%]

  <bb 85> [0.02%]:
  _334 = mantissa_226;
  *_334 = 0;
  _341 = mantissa_226 + 2;
  *_341 = 0;
  _348 = mantissa_226 + 4;
  *_348 = 0;
  MEM[(short unsigned int *)_12 + 10B] = 1;
  goto <bb 96>; [100.00%]

  <bb 86> [0.06%]:
  _245 = MEM[(short unsigned int *)_12 + 10B];
  _246 = _245 | 1;
  MEM[(short unsigned int *)_12 + 10B] = _246;

  <bb 87> [0.12%]:
  i_248 = i_247 + 1;

  <bb 88> [0.15%]:
  # i_247 = PHI <0(84), i_248(87)>
  if (_225 > i_247)
    goto <bb 89>; [85.00%]
  else
    goto <bb 96>; [15.00%]

  <bb 89> [0.13%]:
  _356 = mantissa_226;
  accum_357 = *_356;
  _358 = accum_357 & 1;
  accum_359 = accum_357 >> 1;
  *_356 = accum_359;
  _369 = mantissa_226 + 2;
  accum_370 = *_369;
  _371 = accum_370 & 1;
  accum_372 = accum_370 >> 1;
  if (_358 != 0)
    goto <bb 90>; [50.00%]
  else
    goto <bb 91>; [50.00%]

  <bb 90> [0.06%]:
  accum_373 = accum_372 | 32768;

  <bb 91> [0.13%]:
  # accum_374 = PHI <accum_372(89), accum_373(90)>
  *_369 = accum_374;
  _382 = mantissa_226 + 4;
  accum_383 = *_382;
  _384 = accum_383 & 1;
  accum_385 = accum_383 >> 1;
  if (_371 != 0)
    goto <bb 92>; [50.00%]
  else
    goto <bb 93>; [50.00%]

  <bb 92> [0.06%]:
  accum_386 = accum_385 | 32768;

  <bb 93> [0.12%]:
  # accum_387 = PHI <accum_385(91), accum_386(92)>
  *_382 = accum_387;
  _395 = mantissa_226 + 6;
  accum_396 = *_395;
  _397 = accum_396 & 1;
  accum_398 = accum_396 >> 1;
  if (_384 != 0)
    goto <bb 94>; [50.00%]
  else
    goto <bb 95>; [50.00%]

  <bb 94> [0.06%]:
  accum_399 = accum_398 | 32768;

  <bb 95> [0.13%]:
  # accum_400 = PHI <accum_398(93), accum_399(94)>
  *_395 = accum_400;
  if (_397 != 0)
    goto <bb 86>; [50.00%]
  else
    goto <bb 87>; [50.00%]

  <bb 96> [0.61%]:
  _200 = _12->type;
  if (_200 != 0)
    goto <bb 97>; [54.00%]
  else
    goto <bb 98>; [46.00%]

  <bb 97> [0.33%]:
  _201 = _12->mantissa[3];
  _202 = _201 & 65528;
  _12->mantissa[3] = _202;

  <bb 98> [2.50%]:
  extra_bits ={v} {CLOBBER};
  locy ={v} {CLOBBER};
  goto <bb 100> (<L6>); [100.00%]

<L5> [2.50%]:
  _15 = i_20 * 12;
  _16 = cbase_32(D) + _15;
  _17 = bbase_33(D) + _15;
  _18 = abase_34(D) + _15;
  DivideInternalFPF (_18, _17, _16);

<L6> [12.51%]:
  i_39 = i_20 + 1;

  <bb 101> [14.72%]:
  # i_20 = PHI <0(104), i_39(100)>
  if (i_20 < arraysize_31(D))
    goto <bb 3>; [85.00%]
  else
    goto <bb 102>; [15.00%]

  <bb 102> [2.21%]:

  <bb 103> [2.60%]:
  # loops_19 = PHI <loops_27(D)(2), loops_28(102)>
  loops_28 = loops_19 + 18446744073709551615;
  if (loops_19 != 0)
    goto <bb 104>; [85.00%]
  else
    goto <bb 105>; [15.00%]

  <bb 104> [2.21%]:
  goto <bb 101>; [100.00%]

  <bb 105> [0.39%]:
  _30 = StopStopwatch (elapsed_26);
  return _30;

}



;; Function RoundInternalFPF (RoundInternalFPF, funcdef_no=47, decl_uid=2809, cgraph_uid=47, symbol_order=47)

Created preheader block for loop 3
Created preheader block for loop 4
;; 6 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 31 30 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
;;
;; Loop 1
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11
;;
;; Loop 3
;;  header 16, latch 15
;;  depth 1, outer 0
;;  nodes: 16 15
;;
;; Loop 4
;;  header 25, latch 24
;;  depth 1, outer 0
;;  nodes: 25 24 22 23 21 20 26 18 19
;;
;; Loop 5
;;  header 21, latch 20
;;  depth 2, outer 4
;;  nodes: 21 20 18 19
;;
;; Loop 2
;;  header 5, latch 4
;;  depth 1, outer 0
;;  nodes: 5 4
;; 2 succs { 3 29 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 4 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 27 }
;; 9 succs { 10 13 }
;; 10 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 11 27 }
;; 13 succs { 14 27 }
;; 14 succs { 30 31 }
;; 31 succs { 25 }
;; 30 succs { 16 }
;; 15 succs { 16 }
;; 16 succs { 15 17 }
;; 17 succs { 27 }
;; 18 succs { 19 20 }
;; 19 succs { 20 }
;; 20 succs { 21 }
;; 21 succs { 18 22 }
;; 22 succs { 23 24 }
;; 23 succs { 24 }
;; 24 succs { 25 }
;; 25 succs { 26 27 }
;; 26 succs { 21 }
;; 27 succs { 28 29 }
;; 28 succs { 29 }
;; 29 succs { 1 }
Removing basic block 65
Removing basic block 66
Removing basic block 67
Removing basic block 68
Removing basic block 69
Removing basic block 70
Removing basic block 71
Removing basic block 72
Removing basic block 73
Removing basic block 74
Removing basic block 75

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

i_6 -> { i_26 }
.MEM_73 -> { .MEM_57 }
.MEM_74 -> { .MEM_71 }
i_75 -> { i_27 }
i_76 -> { i_26 }
.MEM_77 -> { .MEM_57 }
.MEM_78 -> { .MEM_71 }
i_79 -> { i_27 }
i_80 -> { i_26 }
.MEM_81 -> { .MEM_57 }
.MEM_82 -> { .MEM_71 }
i_83 -> { i_27 }
i_84 -> { i_26 }
.MEM_85 -> { .MEM_57 }
.MEM_86 -> { .MEM_71 }
i_87 -> { i_27 }
i_88 -> { i_35 }
.MEM_89 -> { .MEM_58 }
_90 -> { _36 }
_91 -> { _37 }
_92 -> { _38 }
.MEM_93 -> { .MEM_68 }
i_94 -> { i_39 }
i_95 -> { i_35 }
.MEM_96 -> { .MEM_58 }
_97 -> { _36 }
_98 -> { _37 }
_99 -> { _38 }
.MEM_100 -> { .MEM_68 }
i_101 -> { i_39 }
i_102 -> { i_35 }
.MEM_103 -> { .MEM_58 }
_104 -> { _36 }
_105 -> { _37 }
_106 -> { _38 }
.MEM_107 -> { .MEM_68 }
i_108 -> { i_39 }
i_109 -> { i_40 }
carry_110 -> { carry_47 }
.MEM_111 -> { .MEM_59 }
_112 -> { _41 }
_113 -> { _42 }
_114 -> { _43 }
accum_115 -> { accum_44 }
_116 -> { _45 }
accum_117 -> { accum_46 }
accum_118 -> { accum_48 }
accum_119 -> { accum_49 }
.MEM_120 -> { .MEM_66 }
i_121 -> { i_50 }
i_122 -> { i_40 }
carry_123 -> { carry_47 }
.MEM_124 -> { .MEM_59 }
_125 -> { _41 }
_126 -> { _42 }
_127 -> { _43 }
accum_128 -> { accum_44 }
_129 -> { _45 }
accum_130 -> { accum_46 }
accum_131 -> { accum_48 }
accum_132 -> { accum_49 }
.MEM_133 -> { .MEM_66 }
i_134 -> { i_50 }
i_135 -> { i_40 }
carry_136 -> { carry_47 }
.MEM_137 -> { .MEM_59 }
_138 -> { _41 }
_139 -> { _42 }
_140 -> { _43 }
accum_141 -> { accum_44 }
_142 -> { _45 }
accum_143 -> { accum_46 }
accum_144 -> { accum_48 }
accum_145 -> { accum_49 }
.MEM_146 -> { .MEM_66 }
i_147 -> { i_50 }
i_148 -> { i_40 }
carry_149 -> { carry_47 }
.MEM_150 -> { .MEM_59 }
_151 -> { _41 }
_152 -> { _42 }
_153 -> { _43 }
accum_154 -> { accum_44 }
_155 -> { _45 }
accum_156 -> { accum_46 }
accum_157 -> { accum_48 }
accum_158 -> { accum_49 }
.MEM_159 -> { .MEM_66 }
i_160 -> { i_50 }
Incremental SSA update started at block: 8
Number of blocks in CFG: 76
Number of blocks to update: 43 ( 57%)


Removing basic block 64
Removing basic block 11
Removing basic block 63
Removing basic block 15
Removing basic block 62
Removing basic block 19
Removing basic block 20
Removing basic block 18
Removing basic block 48
Merging blocks 10 and 32
Removing basic block 26
Removing basic block 30
Merging blocks 40 and 41
Merging blocks 46 and 47
Merging blocks 53 and 54
Merging blocks 57 and 58
Merging blocks 61 and 21
Merging blocks 10 and 33
Merging blocks 10 and 34
Merging blocks 10 and 35
Merging blocks 10 and 36
Merging blocks 10 and 37
Merging blocks 10 and 38
Merging blocks 10 and 39
Merging blocks 10 and 12
Merging blocks 40 and 42
Merging blocks 40 and 43
Merging blocks 40 and 44
Merging blocks 40 and 45
Merging blocks 40 and 16
Merging blocks 40 and 17
Merging blocks 46 and 49
Merging blocks 46 and 50
Merging blocks 46 and 51
Merging blocks 53 and 55
Merging blocks 57 and 59
Merging blocks 61 and 22
RoundInternalFPF (struct InternalFPF * ptr)
{
  int i;
  short unsigned int carry;
  short unsigned int * mantissa;
  short unsigned int accum;
  int i;
  int i;
  int i;
  int n;
  long int exponent_difference;
  unsigned char _1;
  unsigned char _2;
  unsigned char _7;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int[4] * _10;
  long unsigned int _12;
  long unsigned int _13;
  short unsigned int * _14;
  short unsigned int _15;
  int _16;
  short int _21;
  int _22;
  int _23;
  unsigned short _28;
  unsigned short _29;
  unsigned short _30;
  short int _31;
  int _32;
  unsigned char _34;
  short unsigned int _52;
  short unsigned int _53;
  long unsigned int _90;
  long unsigned int _91;
  short unsigned int * _92;
  long unsigned int _97;
  long unsigned int _98;
  short unsigned int * _99;
  long unsigned int _104;
  long unsigned int _105;
  short unsigned int * _106;
  short unsigned int * _114;
  short unsigned int _116;
  short unsigned int * _127;
  short unsigned int _129;
  short unsigned int * _140;
  short unsigned int _142;
  short unsigned int * _153;
  short unsigned int _155;

  <bb 2> [81.50%]:
  _1 = ptr_4(D)->type;
  _2 = _1 + 255;
  if (_2 <= 1)
    goto <bb 3>; [24.54%]
  else
    goto <bb 27>; [75.46%]

  <bb 3> [20.00%]:
  _10 = &ptr_4(D)->mantissa;
  goto <bb 5>; [100.00%]

  <bb 4> [80.00%]:
  _12 = (long unsigned int) i_11;
  _13 = _12 * 2;
  _14 = _10 + _13;
  _15 = *_14;
  _16 = (int) _15;
  n_18 = _16 | n_17;
  i_19 = i_11 + 1;

  <bb 5> [100.00%]:
  # i_11 = PHI <0(3), i_19(4)>
  # n_17 = PHI <0(3), n_18(4)>
  if (i_11 <= 3)
    goto <bb 4>; [80.00%]
  else
    goto <bb 6>; [20.00%]

  <bb 6> [20.00%]:
  # n_20 = PHI <n_17(5)>
  if (n_20 == 0)
    goto <bb 7>; [33.00%]
  else
    goto <bb 8>; [67.00%]

  <bb 7> [6.60%]:
  __builtin_puts (&"Error:  zero significand in denormalize"[0]);

  <bb 8> [20.00%]:
  _21 = ptr_4(D)->exp;
  _22 = (int) _21;
  _23 = _22 + 32767;
  exponent_difference_24 = (long int) _23;
  if (exponent_difference_24 < 0)
    goto <bb 9>; [39.77%]
  else
    goto <bb 25>; [60.23%]

  <bb 9> [7.95%]:
  exponent_difference_25 = -exponent_difference_24;
  if (exponent_difference_24 < -63)
    goto <bb 10>; [67.00%]
  else
    goto <bb 11>; [33.00%]

  <bb 10> [5.33%]:
  ptr_4(D)->type = 0;
  ptr_4(D)->exp = -32767;
  ptr_4(D)->mantissa[0] = 0;
  i_75 = 1;
  ptr_4(D)->mantissa[i_75] = 0;
  i_79 = i_75 + 1;
  ptr_4(D)->mantissa[i_79] = 0;
  i_83 = i_79 + 1;
  ptr_4(D)->mantissa[i_83] = 0;
  i_87 = i_83 + 1;
  goto <bb 25>; [100.00%]

  <bb 11> [2.62%]:
  _28 = (unsigned short) _21;
  _29 = (unsigned short) exponent_difference_25;
  _30 = _28 + _29;
  _31 = (short int) _30;
  ptr_4(D)->exp = _31;
  _32 = (int) exponent_difference_25;
  mantissa_33 = &ptr_4(D)->mantissa;
  _34 = ptr_4(D)->type;
  if (_34 != 0)
    goto <bb 12>; [54.00%]
  else
    goto <bb 25>; [46.00%]

  <bb 12> [1.42%]:
  if (_32 > 63)
    goto <bb 14>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 13> [0.71%]:
  goto <bb 17>; [100.00%]

  <bb 14> [0.71%]:
  # i_88 = PHI <0(12)>
  _90 = (long unsigned int) i_88;
  _91 = _90 * 2;
  _92 = mantissa_33 + _91;
  *_92 = 0;
  i_94 = i_88 + 1;
  _97 = (long unsigned int) i_94;
  _98 = _97 * 2;
  _99 = mantissa_33 + _98;
  *_99 = 0;
  i_101 = i_94 + 1;
  _104 = (long unsigned int) i_101;
  _105 = _104 * 2;
  _106 = mantissa_33 + _105;
  *_106 = 0;
  i_108 = i_101 + 1;
  MEM[(short unsigned int *)ptr_4(D) + 10B] = 1;
  goto <bb 25>; [100.00%]

  <bb 15> [2.01%]:
  _52 = MEM[(short unsigned int *)ptr_4(D) + 10B];
  _53 = _52 | 1;
  MEM[(short unsigned int *)ptr_4(D) + 10B] = _53;

  <bb 16> [4.02%]:
  i_55 = i_54 + 1;

  <bb 17> [4.72%]:
  # i_54 = PHI <0(13), i_55(16)>
  if (_32 > i_54)
    goto <bb 18>; [85.00%]
  else
    goto <bb 25>; [15.00%]

  <bb 18> [4.02%]:
  _114 = mantissa_33;
  accum_115 = *_114;
  _116 = accum_115 & 1;
  accum_117 = accum_115 >> 1;
  *_114 = accum_117;
  _127 = mantissa_33 + 2;
  accum_128 = *_127;
  _129 = accum_128 & 1;
  accum_130 = accum_128 >> 1;
  if (_116 != 0)
    goto <bb 19>; [50.00%]
  else
    goto <bb 20>; [50.00%]

  <bb 19> [2.01%]:
  accum_131 = accum_130 | 32768;

  <bb 20> [4.02%]:
  # accum_132 = PHI <accum_130(18), accum_131(19)>
  *_127 = accum_132;
  _140 = mantissa_33 + 4;
  accum_141 = *_140;
  _142 = accum_141 & 1;
  accum_143 = accum_141 >> 1;
  if (_129 != 0)
    goto <bb 21>; [50.00%]
  else
    goto <bb 22>; [50.00%]

  <bb 21> [2.01%]:
  accum_144 = accum_143 | 32768;

  <bb 22> [4.02%]:
  # accum_145 = PHI <accum_143(20), accum_144(21)>
  *_140 = accum_145;
  _153 = mantissa_33 + 6;
  accum_154 = *_153;
  _155 = accum_154 & 1;
  accum_156 = accum_154 >> 1;
  if (_142 != 0)
    goto <bb 23>; [50.00%]
  else
    goto <bb 24>; [50.00%]

  <bb 23> [2.01%]:
  accum_157 = accum_156 | 32768;

  <bb 24> [4.02%]:
  # accum_158 = PHI <accum_156(22), accum_157(23)>
  *_153 = accum_158;
  if (_155 != 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 25> [20.00%]:
  _7 = ptr_4(D)->type;
  if (_7 != 0)
    goto <bb 26>; [54.00%]
  else
    goto <bb 27>; [46.00%]

  <bb 26> [10.80%]:
  _8 = ptr_4(D)->mantissa[3];
  _9 = _8 & 65528;
  ptr_4(D)->mantissa[3] = _9;

  <bb 27> [81.50%]:
  return;

}


