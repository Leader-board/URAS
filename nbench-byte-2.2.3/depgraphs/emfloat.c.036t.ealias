
;; Function printf (printf, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__fmt = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = __fmt
_4 = NONLOCAL
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__fmt"[label="__fmt = { 9 }"];
"PARM_NOALIAS(9)"[label="PARM_NOALIAS(9) = { 5 }"];
"__printf_chk";
"_4";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*__fmt";
"*PARM_NOALIAS(9)";
"*__printf_chk";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"__fmt" -> "ESCAPED";
"_4" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_4";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__fmt";
"PARM_NOALIAS(9)";
"__printf_chk";
"_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "PARM_NOALIAS(9)";
"__fmt" -> "ESCAPED";
"_4" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _4\l"];
"STOREDANYTHING";
"INTEGER";
"__fmt";
"PARM_NOALIAS(9)";
"__printf_chk";
"_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "PARM_NOALIAS(9)";
"__fmt" -> "ESCAPED";
"PARM_NOALIAS(9)" -> "ESCAPED";
"_4" -> "ESCAPED";
"_4" -> "PARM_NOALIAS(9)";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__fmt = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__printf_chk = { }
_4 = { ESCAPED NONLOCAL }


Alias information for printf

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.3274 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__fmt_2(D), points-to NULL, points-to vars: { D.3274 } (nonlocal, escaped, restrict)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> [0.00%]:
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function memmove (memmove, funcdef_no=26, decl_uid=730, cgraph_uid=26, symbol_order=26)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__dest = &NONLOCAL
__src = &NONLOCAL
__len = &NONLOCAL
CALLUSED(12) = CALLUSED(12) + UNKNOWN
CALLUSED(12) = *CALLUSED(12) + UNKNOWN
CALLUSED(12) = __dest
CALLUSED(12) = &NULL
_1 = CALLUSED(12)
_1 = NONLOCAL
_7 = __dest
doubledereftmp(16) = *__src + UNKNOWN
*__dest + UNKNOWN = doubledereftmp(16)
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__dest"[label="__dest = { 5 }"];
"__src"[label="__src = { 5 }"];
"__len"[label="__len = { 5 }"];
"__builtin_object_size";
"CALLUSED(12)"[label="CALLUSED(12) = { 1 }"];
"CALLCLOBBERED(13)";
"_1";
"_7";
"doubledereftmp(16)";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*__dest";
"*__src";
"*__len";
"*__builtin_object_size";
"*CALLUSED(12)";
"*CALLCLOBBERED(13)";
"*_1";
"*_7";
"*doubledereftmp(16)";

  // Edges in the constraint graph:
"_7" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"__dest" -> "CALLUSED(12)";
"NONLOCAL" -> "_1";
"CALLUSED(12)" -> "_1";
"__dest" -> "_7";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__dest" [label="\N\ndoubledereftmp(16) = *__dest + UNKNOWN\l*__dest + UNKNOWN = doubledereftmp(16)\l"];
"__builtin_object_size";
"CALLUSED(12)" [label="\N\nCALLUSED(12) = CALLUSED(12) + UNKNOWN\lCALLUSED(12) = *CALLUSED(12) + UNKNOWN\l"];
"CALLCLOBBERED(13)";
"_1";
"doubledereftmp(16)";

  // Edges in the constraint graph:
"NONLOCAL" -> "_1";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(12)";
"STOREDANYTHING" -> "doubledereftmp(16)";
"__dest" -> "ESCAPED";
"__dest" -> "CALLUSED(12)";
"CALLUSED(12)" -> "_1";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__dest" [label="\N\ndoubledereftmp(16) = *__dest + UNKNOWN\l*__dest + UNKNOWN = doubledereftmp(16)\l"];
"__builtin_object_size";
"CALLUSED(12)" [label="\N\nCALLUSED(12) = CALLUSED(12) + UNKNOWN\lCALLUSED(12) = *CALLUSED(12) + UNKNOWN\l"];
"CALLCLOBBERED(13)";
"_1";
"doubledereftmp(16)";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "_1";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(12)";
"STOREDANYTHING" -> "doubledereftmp(16)";
"__dest" -> "ESCAPED";
"__dest" -> "CALLUSED(12)";
"CALLUSED(12)" -> "_1";
"doubledereftmp(16)" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__dest = { NONLOCAL }
__src = { NONLOCAL } same as __dest
__len = { NONLOCAL } same as __dest
__builtin_object_size = { }
CALLUSED(12) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(13) = { }
_1 = { NULL ESCAPED NONLOCAL }
_7 = { NONLOCAL } same as __dest
doubledereftmp(16) = { ESCAPED NONLOCAL }


Alias information for memmove

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__dest_3(D), points-to non-local, points-to NULL, points-to vars: { }
__src_4(D), points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to NULL, points-to vars: { }

__attribute__((__artificial__, __gnu_inline__, __always_inline__, __nothrow__, __leaf__))
memmove (void * __dest, const void * __src, size_t __len)
{
  long unsigned int _1;
  void * _7;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__dest_3(D), 0);
  _7 = __builtin___memmove_chk (__dest_3(D), __src_4(D), __len_5(D), _1);
  return _7;

}



;; Function SetInternalFPFZero (SetInternalFPFZero, funcdef_no=36, decl_uid=2776, cgraph_uid=36, symbol_order=36)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
dest = &NONLOCAL
sign = &NONLOCAL
derefaddrtmp(10) = &NULL
*dest = derefaddrtmp(10)
*dest + 8 = sign
derefaddrtmp(11) = &NONLOCAL
*dest + 16 = derefaddrtmp(11)
derefaddrtmp(12) = &NULL
*dest + UNKNOWN = derefaddrtmp(12)
i_11 = i_1
i_11 = &NONLOCAL
i_1 = &NULL
i_1 = i_11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"dest"[label="dest = { 5 }"];
"sign"[label="sign = { 5 }"];
"derefaddrtmp(10)"[label="derefaddrtmp(10) = { 1 }"];
"derefaddrtmp(11)"[label="derefaddrtmp(11) = { 5 }"];
"derefaddrtmp(12)"[label="derefaddrtmp(12) = { 1 }"];
"i_11"[label="i_11 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*dest";
"*sign";
"*derefaddrtmp(10)";
"*derefaddrtmp(11)";
"*derefaddrtmp(12)";
"*i_11";
"*i_1";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"i_11" -> "i_11";
"i_11" -> "i_11";
"NONLOCAL" -> "*ESCAPED";
"derefaddrtmp(10)" -> "*dest";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"dest" [label="\N\n*dest + UNKNOWN = derefaddrtmp(10)\l*dest = derefaddrtmp(10)\l*dest + 8 = dest\l*dest + 16 = dest\l"];
"derefaddrtmp(10)";
"i_11";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"dest" [label="\N\n*dest + UNKNOWN = derefaddrtmp(10)\l*dest = derefaddrtmp(10)\l*dest + 8 = dest\l*dest + 16 = dest\l"];
"derefaddrtmp(10)";
"i_11";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"dest" -> "ESCAPED";
"derefaddrtmp(10)" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
dest = { NONLOCAL }
sign = { NONLOCAL } same as dest
derefaddrtmp(10) = { NULL }
derefaddrtmp(11) = { NONLOCAL } same as dest
derefaddrtmp(12) = { NULL } same as derefaddrtmp(10)
i_11 = { NULL NONLOCAL }
i_1 = { NULL NONLOCAL } same as i_11


Alias information for SetInternalFPFZero

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

dest_4(D), points-to non-local, points-to NULL, points-to vars: { }

SetInternalFPFZero (struct InternalFPF * dest, unsigned char sign)
{
  int i;

  <bb 2> [0.00%]:
  dest_4(D)->type = 0;
  dest_4(D)->sign = sign_6(D);
  dest_4(D)->exp = -32767;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  dest_4(D)->mantissa[i_1] = 0;
  i_11 = i_1 + 1;

  <bb 4> [0.00%]:
  # i_1 = PHI <0(2), i_11(3)>
  if (i_1 <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  return;

}



;; Function SetInternalFPFInfinity (SetInternalFPFInfinity, funcdef_no=37, decl_uid=2779, cgraph_uid=37, symbol_order=37)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
dest = &NONLOCAL
sign = &NONLOCAL
derefaddrtmp(10) = &NONLOCAL
*dest = derefaddrtmp(10)
*dest + 8 = sign
derefaddrtmp(11) = &NONLOCAL
*dest + 16 = derefaddrtmp(11)
derefaddrtmp(12) = &NULL
*dest + UNKNOWN = derefaddrtmp(12)
i_11 = i_1
i_11 = &NONLOCAL
i_1 = &NULL
i_1 = i_11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"dest"[label="dest = { 5 }"];
"sign"[label="sign = { 5 }"];
"derefaddrtmp(10)"[label="derefaddrtmp(10) = { 5 }"];
"derefaddrtmp(11)"[label="derefaddrtmp(11) = { 5 }"];
"derefaddrtmp(12)"[label="derefaddrtmp(12) = { 1 }"];
"i_11"[label="i_11 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*dest";
"*sign";
"*derefaddrtmp(10)";
"*derefaddrtmp(11)";
"*derefaddrtmp(12)";
"*i_11";
"*i_1";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"i_11" -> "i_11";
"i_11" -> "i_11";
"NONLOCAL" -> "*ESCAPED";
"derefaddrtmp(10)" -> "*dest";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"dest" [label="\N\n*dest + UNKNOWN = derefaddrtmp(12)\l*dest = dest\l*dest + 8 = dest\l*dest + 16 = dest\l"];
"derefaddrtmp(12)";
"i_11";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"dest" [label="\N\n*dest + UNKNOWN = derefaddrtmp(12)\l*dest = dest\l*dest + 8 = dest\l*dest + 16 = dest\l"];
"derefaddrtmp(12)";
"i_11";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"dest" -> "ESCAPED";
"derefaddrtmp(12)" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
dest = { NONLOCAL }
sign = { NONLOCAL } same as dest
derefaddrtmp(10) = { NONLOCAL } same as dest
derefaddrtmp(11) = { NONLOCAL } same as dest
derefaddrtmp(12) = { NULL }
i_11 = { NULL NONLOCAL }
i_1 = { NULL NONLOCAL } same as i_11


Alias information for SetInternalFPFInfinity

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

dest_4(D), points-to non-local, points-to NULL, points-to vars: { }

SetInternalFPFInfinity (struct InternalFPF * dest, unsigned char sign)
{
  int i;

  <bb 2> [0.00%]:
  dest_4(D)->type = 3;
  dest_4(D)->sign = sign_6(D);
  dest_4(D)->exp = -32767;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  dest_4(D)->mantissa[i_1] = 0;
  i_11 = i_1 + 1;

  <bb 4> [0.00%]:
  # i_1 = PHI <0(2), i_11(3)>
  if (i_1 <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  return;

}



;; Function SetInternalFPFNaN (SetInternalFPFNaN, funcdef_no=38, decl_uid=2781, cgraph_uid=38, symbol_order=38)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
dest = &NONLOCAL
derefaddrtmp(9) = &NONLOCAL
*dest = derefaddrtmp(9)
derefaddrtmp(10) = &NONLOCAL
*dest + 16 = derefaddrtmp(10)
derefaddrtmp(11) = &NONLOCAL
*dest + 8 = derefaddrtmp(11)
derefaddrtmp(12) = &NONLOCAL
*dest + 32 = derefaddrtmp(12)
derefaddrtmp(13) = &NULL
*dest + UNKNOWN = derefaddrtmp(13)
i_11 = i_1
i_11 = &NONLOCAL
i_1 = &NONLOCAL
i_1 = i_11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"dest"[label="dest = { 5 }"];
"derefaddrtmp(9)"[label="derefaddrtmp(9) = { 5 }"];
"derefaddrtmp(10)"[label="derefaddrtmp(10) = { 5 }"];
"derefaddrtmp(11)"[label="derefaddrtmp(11) = { 5 }"];
"derefaddrtmp(12)"[label="derefaddrtmp(12) = { 5 }"];
"derefaddrtmp(13)"[label="derefaddrtmp(13) = { 1 }"];
"i_11"[label="i_11 = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*dest";
"*derefaddrtmp(9)";
"*derefaddrtmp(10)";
"*derefaddrtmp(11)";
"*derefaddrtmp(12)";
"*derefaddrtmp(13)";
"*i_11";
"*i_1";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"i_11" -> "i_11";
"i_11" -> "i_11";
"NONLOCAL" -> "*ESCAPED";
"derefaddrtmp(9)" -> "*dest";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"dest" [label="\N\n*dest + UNKNOWN = derefaddrtmp(13)\l*dest = dest\l*dest + 8 = dest\l*dest + 16 = dest\l*dest + 32 = dest\l"];
"derefaddrtmp(13)";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"dest" [label="\N\n*dest + UNKNOWN = derefaddrtmp(13)\l*dest = dest\l*dest + 8 = dest\l*dest + 16 = dest\l*dest + 32 = dest\l"];
"derefaddrtmp(13)";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"dest" -> "ESCAPED";
"derefaddrtmp(13)" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
dest = { NONLOCAL }
derefaddrtmp(9) = { NONLOCAL } same as dest
derefaddrtmp(10) = { NONLOCAL } same as dest
derefaddrtmp(11) = { NONLOCAL } same as dest
derefaddrtmp(12) = { NONLOCAL } same as dest
derefaddrtmp(13) = { NULL }
i_11 = { NONLOCAL } same as dest
i_1 = { NONLOCAL } same as dest


Alias information for SetInternalFPFNaN

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

dest_4(D), points-to non-local, points-to NULL, points-to vars: { }

SetInternalFPFNaN (struct InternalFPF * dest)
{
  int i;

  <bb 2> [0.00%]:
  dest_4(D)->type = 4;
  dest_4(D)->exp = 32767;
  dest_4(D)->sign = 1;
  dest_4(D)->mantissa[0] = 16384;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  dest_4(D)->mantissa[i_1] = 0;
  i_11 = i_1 + 1;

  <bb 4> [0.00%]:
  # i_1 = PHI <1(2), i_11(3)>
  if (i_1 <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  return;

}



;; Function IsMantissaZero (IsMantissaZero, funcdef_no=39, decl_uid=2783, cgraph_uid=39, symbol_order=39)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
mant = &NONLOCAL
_1 = i_7
_2 = _1
_2 = &NONLOCAL
_3 = mant + UNKNOWN
_4 = *_3
_5 = _4
n_14 = _5
n_14 = n_8
i_15 = i_7
i_15 = &NONLOCAL
i_7 = &NULL
i_7 = i_15
n_8 = &NULL
n_8 = n_14
_11 = _6
ESCAPED = _11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"mant"[label="mant = { 5 }"];
"_1";
"i_7"[label="i_7 = { 1 5 }"];
"_2"[label="_2 = { 5 }"];
"_3";
"_4";
"_5";
"n_14"[label="n_14 = { 1 }"];
"_6";
"_11";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*mant";
"*_1";
"*i_7";
"*_2";
"*_3";
"*_4";
"*_5";
"*n_14";
"*n_8";
"*i_15";
"*_6";
"*_11";

  // Edges in the constraint graph:
"_11" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"i_7" -> "_1";
"i_7" -> "i_7";
"i_7" -> "i_7";
"_1" -> "_2";
"*_3" -> "_4";
"_4" -> "_5";
"_5" -> "n_14";
"n_14" -> "n_14";
"n_14" -> "n_14";
"_6" -> "_11";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"mant" [label="\N\n_3 = mant + UNKNOWN\l"];
"_1";
"_3" [label="\N\n_4 = *_3\l"];
"_4";
"n_14";
"_6";
"_11";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"_4" -> "n_14";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"mant" [label="\N\n_3 = mant + UNKNOWN\l"];
"_1";
"_3" [label="\N\n_4 = *_3\l"];
"_4";
"n_14";
"_6";
"_11";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"_4" -> "n_14";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
mant = { NONLOCAL }
_1 = { NULL NONLOCAL }
i_7 = { NULL NONLOCAL } same as _1
_2 = { NULL NONLOCAL } same as _1
_3 = { NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _4
n_14 = { NULL ESCAPED NONLOCAL }
n_8 = { NULL ESCAPED NONLOCAL } same as n_14
i_15 = { NULL NONLOCAL } same as _1
_6 = { }
_11 = { }


Alias information for IsMantissaZero

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
mant_13(D), points-to non-local, points-to NULL, points-to vars: { }

IsMantissaZero (short unsigned int * mant)
{
  int n;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  short unsigned int * _3;
  short unsigned int _4;
  int _5;
  _Bool _6;
  int _11;

  <bb 2> [0.00%]:
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_7;
  _2 = _1 * 2;
  _3 = mant_13(D) + _2;
  _4 = *_3;
  _5 = (int) _4;
  n_14 = _5 | n_8;
  i_15 = i_7 + 1;

  <bb 4> [0.00%]:
  # i_7 = PHI <0(2), i_15(3)>
  # n_8 = PHI <0(2), n_14(3)>
  if (i_7 <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  _6 = n_8 == 0;
  _11 = (int) _6;
  return _11;

}



;; Function Add16Bits (Add16Bits, funcdef_no=40, decl_uid=2788, cgraph_uid=40, symbol_order=40)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
carry = &NONLOCAL
a = &NONLOCAL
b = &NONLOCAL
c = &NONLOCAL
accum_9 = b
_1 = c
accum_11 = _1
accum_11 = accum_9
_2 = *carry
_3 = _2
accum_14 = _3
accum_14 = accum_11
_4 = accum_14
_4 = &NONLOCAL
_5 = _4
_6 = _5 + UNKNOWN
*carry = _6
_7 = accum_14
*a = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"carry"[label="carry = { 5 }"];
"a"[label="a = { 5 }"];
"b"[label="b = { 5 }"];
"c"[label="c = { 5 }"];
"accum_9";
"_1";
"accum_11";
"_2";
"_3";
"accum_14";
"_4"[label="_4 = { 5 }"];
"_5";
"_6";
"_7";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*carry";
"*a";
"*b";
"*c";
"*accum_9";
"*_1";
"*accum_11";
"*_2";
"*_3";
"*accum_14";
"*_4";
"*_5";
"*_6";
"*_7";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"b" -> "accum_9";
"c" -> "_1";
"accum_9" -> "accum_11";
"_1" -> "accum_11";
"*carry" -> "_2";
"_2" -> "_3";
"accum_11" -> "accum_14";
"_3" -> "accum_14";
"accum_14" -> "_4";
"_4" -> "_5";
"accum_14" -> "_7";
"NONLOCAL" -> "*ESCAPED";
"_6" -> "*carry";
"_7" -> "*a";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"carry" [label="\N\n_2 = *carry\l*carry = accum_14\l*carry = _6\l"];
"_2" [label="\N\n_6 = _2 + UNKNOWN\l"];
"_6";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_6";
"carry" -> "_2";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _2\l"];
"STOREDANYTHING";
"INTEGER";
"carry" [label="\N\n_2 = *carry\l*carry = _2\l*carry = _6\l"];
"_2" [label="\N\n_6 = _2 + UNKNOWN\l"];
"_6";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_6";
"carry" -> "_2";
"_2" -> "ESCAPED";
"_6" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _2
STOREDANYTHING = { }
INTEGER = { ANYTHING }
carry = { NONLOCAL }
a = { NONLOCAL } same as carry
b = { NONLOCAL } same as carry
c = { NONLOCAL } same as carry
accum_9 = { NONLOCAL } same as carry
_1 = { NONLOCAL } same as carry
accum_11 = { NONLOCAL } same as carry
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _2
accum_14 = { ESCAPED NONLOCAL } same as _2
_4 = { ESCAPED NONLOCAL } same as _2
_5 = { ESCAPED NONLOCAL } same as _2
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as _2


Alias information for Add16Bits

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

carry_13(D), points-to non-local, points-to NULL, points-to vars: { }
a_16(D), points-to non-local, points-to NULL, points-to vars: { }

Add16Bits (short unsigned int * carry, short unsigned int * a, short unsigned int b, short unsigned int c)
{
  unsigned int accum;
  unsigned int _1;
  short unsigned int _2;
  unsigned int _3;
  unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;

  <bb 2> [0.00%]:
  accum_9 = (unsigned int) b_8(D);
  _1 = (unsigned int) c_10(D);
  accum_11 = _1 + accum_9;
  _2 = *carry_13(D);
  _3 = (unsigned int) _2;
  accum_14 = _3 + accum_11;
  _4 = accum_14 >> 16;
  _5 = (short unsigned int) _4;
  _6 = _5 & 1;
  *carry_13(D) = _6;
  _7 = (short unsigned int) accum_14;
  *a_16(D) = _7;
  return;

}



;; Function Sub16Bits (Sub16Bits, funcdef_no=41, decl_uid=2793, cgraph_uid=41, symbol_order=41)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
borrow = &NONLOCAL
a = &NONLOCAL
b = &NONLOCAL
c = &NONLOCAL
accum_9 = b
_1 = c
accum_11 = accum_9
accum_11 = _1
_2 = *borrow
_3 = _2
accum_14 = accum_11
accum_14 = _3
_4 = accum_14
_4 = &NONLOCAL
_5 = _4
_6 = _5 + UNKNOWN
*borrow = _6
_7 = accum_14
*a = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"borrow"[label="borrow = { 5 }"];
"a"[label="a = { 5 }"];
"b"[label="b = { 5 }"];
"c"[label="c = { 5 }"];
"accum_9";
"_1";
"accum_11";
"_2";
"_3";
"accum_14";
"_4"[label="_4 = { 5 }"];
"_5";
"_6";
"_7";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*borrow";
"*a";
"*b";
"*c";
"*accum_9";
"*_1";
"*accum_11";
"*_2";
"*_3";
"*accum_14";
"*_4";
"*_5";
"*_6";
"*_7";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"b" -> "accum_9";
"c" -> "_1";
"accum_9" -> "accum_11";
"_1" -> "accum_11";
"*borrow" -> "_2";
"_2" -> "_3";
"accum_11" -> "accum_14";
"_3" -> "accum_14";
"accum_14" -> "_4";
"_4" -> "_5";
"accum_14" -> "_7";
"NONLOCAL" -> "*ESCAPED";
"_6" -> "*borrow";
"_7" -> "*a";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"borrow" [label="\N\n_2 = *borrow\l*borrow = accum_14\l*borrow = _6\l"];
"_2" [label="\N\n_6 = _2 + UNKNOWN\l"];
"_6";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_6";
"borrow" -> "_2";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _2\l"];
"STOREDANYTHING";
"INTEGER";
"borrow" [label="\N\n_2 = *borrow\l*borrow = _2\l*borrow = _6\l"];
"_2" [label="\N\n_6 = _2 + UNKNOWN\l"];
"_6";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_6";
"borrow" -> "_2";
"_2" -> "ESCAPED";
"_6" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _2
STOREDANYTHING = { }
INTEGER = { ANYTHING }
borrow = { NONLOCAL }
a = { NONLOCAL } same as borrow
b = { NONLOCAL } same as borrow
c = { NONLOCAL } same as borrow
accum_9 = { NONLOCAL } same as borrow
_1 = { NONLOCAL } same as borrow
accum_11 = { NONLOCAL } same as borrow
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _2
accum_14 = { ESCAPED NONLOCAL } same as _2
_4 = { ESCAPED NONLOCAL } same as _2
_5 = { ESCAPED NONLOCAL } same as _2
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as _2


Alias information for Sub16Bits

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

borrow_13(D), points-to non-local, points-to NULL, points-to vars: { }
a_16(D), points-to non-local, points-to NULL, points-to vars: { }

Sub16Bits (short unsigned int * borrow, short unsigned int * a, short unsigned int b, short unsigned int c)
{
  unsigned int accum;
  unsigned int _1;
  short unsigned int _2;
  unsigned int _3;
  unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;

  <bb 2> [0.00%]:
  accum_9 = (unsigned int) b_8(D);
  _1 = (unsigned int) c_10(D);
  accum_11 = accum_9 - _1;
  _2 = *borrow_13(D);
  _3 = (unsigned int) _2;
  accum_14 = accum_11 - _3;
  _4 = accum_14 >> 16;
  _5 = (short unsigned int) _4;
  _6 = _5 & 1;
  *borrow_13(D) = _6;
  _7 = (short unsigned int) accum_14;
  *a_16(D) = _7;
  return;

}



;; Function ShiftMantLeft1 (ShiftMantLeft1, funcdef_no=42, decl_uid=2796, cgraph_uid=42, symbol_order=42)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
carry = &NONLOCAL
mantissa = &NONLOCAL
_1 = i_10
_2 = _1
_2 = &NONLOCAL
_3 = mantissa + UNKNOWN
accum_16 = *_3
_4 = accum_16
_13 = accum_16 + UNKNOWN
new_carry_17 = _13
accum_18 = accum_16
accum_18 = &NONLOCAL
_5 = *carry
accum_20 = accum_18
accum_20 = &NONLOCAL
accum_11 = accum_18
accum_11 = accum_20
_6 = _13
*carry = _13
_7 = i_10
_8 = _7
_8 = &NONLOCAL
_9 = mantissa + UNKNOWN
*_9 = accum_11
i_23 = i_10
i_23 = &NONLOCAL
i_10 = &NONLOCAL
i_10 = i_23

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"carry"[label="carry = { 5 }"];
"mantissa"[label="mantissa = { 5 }"];
"_1";
"i_10"[label="i_10 = { 5 }"];
"_2"[label="_2 = { 5 }"];
"_3";
"accum_16";
"_4";
"_13";
"new_carry_17";
"accum_18"[label="accum_18 = { 5 }"];
"_5";
"accum_20"[label="accum_20 = { 5 }"];
"accum_11";
"_6";
"_7";
"_8"[label="_8 = { 5 }"];
"_9";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*carry";
"*mantissa";
"*_1";
"*i_10";
"*_2";
"*_3";
"*accum_16";
"*_4";
"*_13";
"*new_carry_17";
"*accum_18";
"*_5";
"*accum_20";
"*accum_11";
"*_6";
"*_7";
"*_8";
"*_9";
"*i_23";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"i_10" -> "_1";
"i_10" -> "i_10";
"i_10" -> "i_10";
"_1" -> "_2";
"*_3" -> "accum_16";
"accum_16" -> "_4";
"_13" -> "new_carry_17";
"accum_16" -> "accum_18";
"*carry" -> "_5";
"accum_18" -> "accum_20";
"accum_18" -> "accum_11";
"accum_20" -> "accum_11";
"_13" -> "_6";
"i_10" -> "_7";
"_7" -> "_8";
"NONLOCAL" -> "*ESCAPED";
"_13" -> "*carry";
"accum_11" -> "*_9";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"carry" [label="\N\n_3 = carry + UNKNOWN\l_5 = *carry\l_9 = carry + UNKNOWN\l*carry = _13\l"];
"_3" [label="\N\naccum_16 = *_3\l"];
"accum_16" [label="\N\n_13 = accum_16 + UNKNOWN\l"];
"_13";
"accum_18";
"_5";
"_9" [label="\N\n*_9 = accum_18\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_9";
"accum_16" -> "accum_18";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"carry" [label="\N\n_3 = carry + UNKNOWN\l_5 = *carry\l_9 = carry + UNKNOWN\l*carry = _13\l"];
"_3" [label="\N\naccum_16 = *_3\l"];
"accum_16" [label="\N\n_13 = accum_16 + UNKNOWN\l"];
"_13";
"accum_18";
"_5";
"_9" [label="\N\n*_9 = accum_18\l"];

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_9";
"accum_16" -> "accum_18";
"_13" -> "ESCAPED";
"accum_18" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
carry = { NONLOCAL }
mantissa = { NONLOCAL } same as carry
_1 = { NONLOCAL } same as carry
i_10 = { NONLOCAL } same as carry
_2 = { NONLOCAL } same as carry
_3 = { NONLOCAL }
accum_16 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as accum_16
_13 = { ESCAPED NONLOCAL }
new_carry_17 = { ESCAPED NONLOCAL } same as _13
accum_18 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL }
accum_20 = { ESCAPED NONLOCAL } same as accum_18
accum_11 = { ESCAPED NONLOCAL } same as accum_18
_6 = { ESCAPED NONLOCAL } same as _13
_7 = { NONLOCAL } same as carry
_8 = { NONLOCAL } same as carry
_9 = { NONLOCAL }
i_23 = { NONLOCAL } same as carry


Alias information for ShiftMantLeft1

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
mantissa_15(D), points-to non-local, points-to NULL, points-to vars: { }
carry_19(D), points-to non-local, points-to NULL, points-to vars: { }

ShiftMantLeft1 (short unsigned int * carry, short unsigned int * mantissa)
{
  short unsigned int accum;
  int new_carry;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  short unsigned int * _3;
  int _4;
  short unsigned int _5;
  short unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  short unsigned int * _9;
  short unsigned int _13;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_10;
  _2 = _1 * 2;
  _3 = mantissa_15(D) + _2;
  accum_16 = *_3;
  _4 = (int) accum_16;
  _13 = accum_16 & 32768;
  new_carry_17 = (int) _13;
  accum_18 = accum_16 << 1;
  _5 = *carry_19(D);
  if (_5 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  accum_20 = accum_18 | 1;

  <bb 5> [0.00%]:
  # accum_11 = PHI <accum_18(3), accum_20(4)>
  _6 = _13;
  *carry_19(D) = _13;
  _7 = (long unsigned int) i_10;
  _8 = _7 * 2;
  _9 = mantissa_15(D) + _8;
  *_9 = accum_11;
  i_23 = i_10 + -1;

  <bb 6> [0.00%]:
  # i_10 = PHI <3(2), i_23(5)>
  if (i_10 >= 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function ShiftMantRight1 (ShiftMantRight1, funcdef_no=43, decl_uid=2799, cgraph_uid=43, symbol_order=43)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
carry = &NONLOCAL
mantissa = &NONLOCAL
_1 = i_10
_2 = _1
_2 = &NONLOCAL
_3 = mantissa + UNKNOWN
accum_16 = *_3
_4 = accum_16
_13 = accum_16 + UNKNOWN
new_carry_17 = _13
accum_18 = accum_16
accum_18 = &NONLOCAL
_5 = *carry
accum_20 = accum_18
accum_20 = &NONLOCAL
accum_11 = accum_18
accum_11 = accum_20
_6 = _13
*carry = _13
_7 = i_10
_8 = _7
_8 = &NONLOCAL
_9 = mantissa + UNKNOWN
*_9 = accum_11
i_23 = i_10
i_23 = &NONLOCAL
i_10 = &NULL
i_10 = i_23

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"carry"[label="carry = { 5 }"];
"mantissa"[label="mantissa = { 5 }"];
"_1";
"i_10"[label="i_10 = { 1 5 }"];
"_2"[label="_2 = { 5 }"];
"_3";
"accum_16";
"_4";
"_13";
"new_carry_17";
"accum_18"[label="accum_18 = { 5 }"];
"_5";
"accum_20"[label="accum_20 = { 5 }"];
"accum_11";
"_6";
"_7";
"_8"[label="_8 = { 5 }"];
"_9";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*carry";
"*mantissa";
"*_1";
"*i_10";
"*_2";
"*_3";
"*accum_16";
"*_4";
"*_13";
"*new_carry_17";
"*accum_18";
"*_5";
"*accum_20";
"*accum_11";
"*_6";
"*_7";
"*_8";
"*_9";
"*i_23";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"i_10" -> "_1";
"i_10" -> "i_10";
"i_10" -> "i_10";
"_1" -> "_2";
"*_3" -> "accum_16";
"accum_16" -> "_4";
"_13" -> "new_carry_17";
"accum_16" -> "accum_18";
"*carry" -> "_5";
"accum_18" -> "accum_20";
"accum_18" -> "accum_11";
"accum_20" -> "accum_11";
"_13" -> "_6";
"i_10" -> "_7";
"_7" -> "_8";
"NONLOCAL" -> "*ESCAPED";
"_13" -> "*carry";
"accum_11" -> "*_9";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"carry" [label="\N\n_3 = carry + UNKNOWN\l_5 = *carry\l_9 = carry + UNKNOWN\l*carry = _13\l"];
"_1";
"_3" [label="\N\naccum_16 = *_3\l"];
"accum_16" [label="\N\n_13 = accum_16 + UNKNOWN\l"];
"_13";
"accum_18";
"_5";
"_9" [label="\N\n*_9 = accum_18\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_9";
"accum_16" -> "accum_18";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"carry" [label="\N\n_3 = carry + UNKNOWN\l_5 = *carry\l_9 = carry + UNKNOWN\l*carry = _13\l"];
"_1";
"_3" [label="\N\naccum_16 = *_3\l"];
"accum_16" [label="\N\n_13 = accum_16 + UNKNOWN\l"];
"_13";
"accum_18";
"_5";
"_9" [label="\N\n*_9 = accum_18\l"];

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_9";
"accum_16" -> "accum_18";
"_13" -> "ESCAPED";
"accum_18" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
carry = { NONLOCAL }
mantissa = { NONLOCAL } same as carry
_1 = { NULL NONLOCAL }
i_10 = { NULL NONLOCAL } same as _1
_2 = { NULL NONLOCAL } same as _1
_3 = { NONLOCAL }
accum_16 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as accum_16
_13 = { ESCAPED NONLOCAL }
new_carry_17 = { ESCAPED NONLOCAL } same as _13
accum_18 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL }
accum_20 = { ESCAPED NONLOCAL } same as accum_18
accum_11 = { ESCAPED NONLOCAL } same as accum_18
_6 = { ESCAPED NONLOCAL } same as _13
_7 = { NULL NONLOCAL } same as _1
_8 = { NULL NONLOCAL } same as _1
_9 = { NONLOCAL }
i_23 = { NULL NONLOCAL } same as _1


Alias information for ShiftMantRight1

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
mantissa_15(D), points-to non-local, points-to NULL, points-to vars: { }
carry_19(D), points-to non-local, points-to NULL, points-to vars: { }

ShiftMantRight1 (short unsigned int * carry, short unsigned int * mantissa)
{
  short unsigned int accum;
  int new_carry;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  short unsigned int * _3;
  int _4;
  short unsigned int _5;
  short unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  short unsigned int * _9;
  short unsigned int _13;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_10;
  _2 = _1 * 2;
  _3 = mantissa_15(D) + _2;
  accum_16 = *_3;
  _4 = (int) accum_16;
  _13 = accum_16 & 1;
  new_carry_17 = (int) _13;
  accum_18 = accum_16 >> 1;
  _5 = *carry_19(D);
  if (_5 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  accum_20 = accum_18 | 32768;

  <bb 5> [0.00%]:
  # accum_11 = PHI <accum_18(3), accum_20(4)>
  _6 = _13;
  *carry_19(D) = _13;
  _7 = (long unsigned int) i_10;
  _8 = _7 * 2;
  _9 = mantissa_15(D) + _8;
  *_9 = accum_11;
  i_23 = i_10 + 1;

  <bb 6> [0.00%]:
  # i_10 = PHI <0(2), i_23(5)>
  if (i_10 <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function StickyShiftRightMant (StickyShiftRightMant, funcdef_no=44, decl_uid=2802, cgraph_uid=44, symbol_order=44)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ptr = &NONLOCAL
amount = &NONLOCAL
mantissa_18 = ptr + UNKNOWN
_1 = *ptr
_2 = i_11
_3 = _2
_3 = &NONLOCAL
_4 = mantissa_18 + UNKNOWN
derefaddrtmp(16) = &NULL
*_4 = derefaddrtmp(16)
i_29 = i_11
i_29 = &NONLOCAL
i_11 = &NULL
i_11 = i_29
_5 = ptr + 80
derefaddrtmp(19) = &NONLOCAL
*ptr + 80 = derefaddrtmp(19)
_32 = i_31
_33 = _32
_33 = &NONLOCAL
_34 = mantissa_18 + UNKNOWN
accum_35 = *_34
_36 = accum_35 + UNKNOWN
accum_37 = accum_35
accum_37 = &NONLOCAL
_38 = carry_45
accum_39 = accum_37
accum_39 = &NONLOCAL
accum_40 = accum_37
accum_40 = accum_39
carry_47 = _36
*_34 = accum_40
i_41 = i_31
i_41 = &NONLOCAL
i_31 = &NULL
i_31 = i_41
carry_45 = &NULL
carry_45 = carry_47
carry.4_6 = carry_45
_8 = *ptr + 80
_9 = ptr + 80
_10 = _8
_10 = &NONLOCAL
*ptr + 80 = _10
i_25 = i_12
i_25 = &NONLOCAL
i_12 = &NULL
i_12 = i_25

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"ptr"[label="ptr = { 5 }"];
"amount"[label="amount = { 5 }"];
"mantissa_18";
"_1";
"_2";
"i_11"[label="i_11 = { 1 5 }"];
"_3"[label="_3 = { 5 }"];
"_4";
"derefaddrtmp(16)"[label="derefaddrtmp(16) = { 1 }"];
"_5";
"derefaddrtmp(19)"[label="derefaddrtmp(19) = { 5 }"];
"_32";
"i_31"[label="i_31 = { 1 5 }"];
"_33"[label="_33 = { 5 }"];
"_34";
"accum_35"[label="accum_35 = { 5 }"];
"_36";
"_38";
"carry_45"[label="carry_45 = { 1 }"];
"carry_47";
"carry.4_6";
"_8";
"_9";
"_10"[label="_10 = { 5 }"];
"i_25"[label="i_25 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*ptr";
"*amount";
"*mantissa_18";
"*_1";
"*_2";
"*i_11";
"*_3";
"*_4";
"*derefaddrtmp(16)";
"*i_29";
"*_5";
"*derefaddrtmp(19)";
"*_32";
"*i_31";
"*_33";
"*accum_35";
"*_36";
"*accum_37";
"*_38";
"*carry_45";
"*accum_39";
"*accum_40";
"*carry_47";
"*i_41";
"*carry.4_6";
"*_8";
"*_9";
"*_10";
"*i_25";
"*i_12";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"*ptr" -> "_1";
"i_11" -> "_2";
"i_11" -> "i_11";
"i_11" -> "i_11";
"_2" -> "_3";
"i_31" -> "_32";
"i_31" -> "i_31";
"i_31" -> "i_31";
"_32" -> "_33";
"accum_35" -> "accum_35";
"accum_35" -> "accum_35";
"accum_35" -> "accum_35";
"accum_35" -> "accum_35";
"accum_35" -> "accum_35";
"carry_45" -> "_38";
"carry_47" -> "carry_45";
"_36" -> "carry_47";
"carry_45" -> "carry.4_6";
"_8" -> "_10";
"i_25" -> "i_25";
"i_25" -> "i_25";
"NONLOCAL" -> "*ESCAPED";
"derefaddrtmp(16)" -> "*_4";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ptr" [label="\N\nmantissa_18 = ptr + UNKNOWN\l_1 = *ptr\l_5 = ptr + 80\l_8 = *ptr + 80\l_9 = ptr + 80\l*ptr + 80 = ptr\l*ptr + 80 = _10\l"];
"mantissa_18" [label="\N\n_4 = mantissa_18 + UNKNOWN\l_34 = mantissa_18 + UNKNOWN\l"];
"_1";
"_2";
"_4" [label="\N\n*_4 = derefaddrtmp(16)\l"];
"derefaddrtmp(16)";
"_5";
"_34" [label="\N\naccum_35 = *_34\l*_34 = accum_35\l"];
"accum_35" [label="\N\n_36 = accum_35 + UNKNOWN\l"];
"_36";
"_38";
"_8";
"_9";
"_10";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "mantissa_18";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_34";
"STOREDANYTHING" -> "accum_35";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_8";
"STOREDANYTHING" -> "_9";
"_36" -> "_38";
"_8" -> "_10";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = accum_35\l"];
"STOREDANYTHING";
"INTEGER";
"ptr" [label="\N\nmantissa_18 = ptr + UNKNOWN\l_1 = *ptr\l_5 = ptr + 80\l_8 = *ptr + 80\l_9 = ptr + 80\l*ptr + 80 = ptr\l*ptr + 80 = _10\l"];
"mantissa_18" [label="\N\n_4 = mantissa_18 + UNKNOWN\l_34 = mantissa_18 + UNKNOWN\l"];
"_1";
"_2";
"_4" [label="\N\n*_4 = derefaddrtmp(16)\l"];
"derefaddrtmp(16)";
"_5";
"_34" [label="\N\naccum_35 = *_34\l*_34 = accum_35\l"];
"accum_35" [label="\N\n_36 = accum_35 + UNKNOWN\l"];
"_36";
"_38";
"_8";
"_9";
"_10";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "mantissa_18";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_34";
"STOREDANYTHING" -> "accum_35";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_8";
"STOREDANYTHING" -> "_9";
"ptr" -> "ESCAPED";
"derefaddrtmp(16)" -> "ESCAPED";
"accum_35" -> "ESCAPED";
"_36" -> "_38";
"_8" -> "_10";
"_10" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as accum_35
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ptr = { NONLOCAL }
amount = { NONLOCAL } same as ptr
mantissa_18 = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { NULL NONLOCAL }
i_11 = { NULL NONLOCAL } same as _2
_3 = { NULL NONLOCAL } same as _2
_4 = { NONLOCAL }
derefaddrtmp(16) = { NULL }
i_29 = { NULL NONLOCAL } same as _2
_5 = { NONLOCAL }
derefaddrtmp(19) = { NONLOCAL } same as ptr
_32 = { NULL NONLOCAL } same as _2
i_31 = { NULL NONLOCAL } same as _2
_33 = { NULL NONLOCAL } same as _2
_34 = { NONLOCAL }
accum_35 = { ESCAPED NONLOCAL }
_36 = { ESCAPED NONLOCAL }
accum_37 = { ESCAPED NONLOCAL } same as accum_35
_38 = { NULL ESCAPED NONLOCAL }
carry_45 = { NULL ESCAPED NONLOCAL } same as _38
accum_39 = { ESCAPED NONLOCAL } same as accum_35
accum_40 = { ESCAPED NONLOCAL } same as accum_35
carry_47 = { ESCAPED NONLOCAL } same as _36
i_41 = { NULL NONLOCAL } same as _2
carry.4_6 = { NULL ESCAPED NONLOCAL } same as _38
_8 = { ESCAPED NONLOCAL }
_9 = { NONLOCAL }
_10 = { ESCAPED NONLOCAL }
i_25 = { NULL NONLOCAL } same as _2
i_12 = { NULL NONLOCAL } same as _2


Alias information for StickyShiftRightMant

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_4, points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
ptr_17(D), points-to non-local, points-to NULL, points-to vars: { }
mantissa_18, points-to non-local, points-to NULL, points-to vars: { }
_34, points-to non-local, points-to NULL, points-to vars: { }

StickyShiftRightMant (struct InternalFPF * ptr, int amount)
{
  int i;
  short unsigned int accum;
  short unsigned int * mantissa;
  short unsigned int carry;
  int i;
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;
  short unsigned int * _4;
  short unsigned int * _5;
  short unsigned int carry.4_6;
  short unsigned int _8;
  short unsigned int * _9;
  short unsigned int _10;
  long unsigned int _32;
  long unsigned int _33;
  short unsigned int * _34;
  short unsigned int _36;
  short unsigned int _38;

  <bb 2> [0.00%]:
  mantissa_18 = &ptr_17(D)->mantissa;
  _1 = ptr_17(D)->type;
  if (_1 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 3> [0.00%]:
  if (amount_20(D) > 63)
    goto <bb 5>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 4> [0.00%]:
  _2 = (long unsigned int) i_11;
  _3 = _2 * 2;
  _4 = mantissa_18 + _3;
  *_4 = 0;
  i_29 = i_11 + 1;

  <bb 5> [0.00%]:
  # i_11 = PHI <0(3), i_29(4)>
  if (i_11 <= 2)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  _5 = &MEM[(void *)ptr_17(D) + 10B];
  MEM[(short unsigned int *)ptr_17(D) + 10B] = 1;
  goto <bb 15>; [0.00%]

  <bb 7> [80.00%]:
  _32 = (long unsigned int) i_31;
  _33 = _32 * 2;
  _34 = mantissa_18 + _33;
  accum_35 = *_34;
  _36 = accum_35 & 1;
  accum_37 = accum_35 >> 1;
  _38 = carry_45;
  if (carry_45 != 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 8> [40.00%]:
  accum_39 = accum_37 | 32768;

  <bb 9> [80.00%]:
  # accum_40 = PHI <accum_37(7), accum_39(8)>
  carry_47 = _36;
  *_34 = accum_40;
  i_41 = i_31 + 1;

  <bb 10> [100.00%]:
  # i_31 = PHI <0(14), i_41(9)>
  # carry_45 = PHI <0(14), carry_47(9)>
  if (i_31 <= 3)
    goto <bb 7>; [80.00%]
  else
    goto <bb 11>; [20.00%]

  <bb 11> [0.00%]:
  carry.4_6 = carry_45;
  if (carry_45 != 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  _8 = MEM[(short unsigned int *)ptr_17(D) + 10B];
  _9 = &MEM[(void *)ptr_17(D) + 10B];
  _10 = _8 | 1;
  MEM[(short unsigned int *)ptr_17(D) + 10B] = _10;

  <bb 13> [0.00%]:
  i_25 = i_12 + 1;

  <bb 14> [0.00%]:
  # i_12 = PHI <0(3), i_25(13)>
  if (i_12 < amount_20(D))
    goto <bb 10>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 15> [0.00%]:
  return;

}



;; Function normalize (normalize, funcdef_no=45, decl_uid=2804, cgraph_uid=45, symbol_order=45)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ptr = &NONLOCAL
_1 = ptr + UNKNOWN
_17 = i_16
_18 = _17
_18 = &NONLOCAL
_19 = _1 + UNKNOWN
accum_20 = *_19
_21 = accum_20 + UNKNOWN
accum_22 = accum_20
accum_22 = &NONLOCAL
_23 = carry_30
accum_24 = accum_22
accum_24 = &NONLOCAL
accum_25 = accum_22
accum_25 = accum_24
carry_33 = _21
*_19 = accum_25
i_26 = i_16
i_26 = &NONLOCAL
i_16 = &NONLOCAL
i_16 = i_26
carry_30 = &NULL
carry_30 = carry_33
_2 = *ptr + 16
_4 = _2
_5 = _4
_5 = &NONLOCAL
_6 = _5
*ptr + 16 = _6
_7 = *ptr + 32
_8 = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"ptr"[label="ptr = { 5 }"];
"_1";
"_17";
"i_16"[label="i_16 = { 5 }"];
"_18"[label="_18 = { 5 }"];
"_19";
"accum_20"[label="accum_20 = { 5 }"];
"_21";
"_23";
"carry_30"[label="carry_30 = { 1 }"];
"carry_33";
"_2";
"_4";
"_5"[label="_5 = { 5 }"];
"_6";
"_7";
"_8";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*ptr";
"*_1";
"*_17";
"*i_16";
"*_18";
"*accum_20";
"*_21";
"*accum_22";
"*_23";
"*carry_30";
"*accum_24";
"*accum_25";
"*carry_33";
"*i_26";
"*_2";
"*_4";
"*_5";
"*_6";
"*_7";
"*_8";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"i_16" -> "_17";
"i_16" -> "i_16";
"i_16" -> "i_16";
"_17" -> "_18";
"accum_20" -> "accum_20";
"accum_20" -> "accum_20";
"accum_20" -> "accum_20";
"accum_20" -> "accum_20";
"accum_20" -> "accum_20";
"carry_30" -> "_23";
"carry_33" -> "carry_30";
"_21" -> "carry_33";
"_2" -> "_4";
"_4" -> "_5";
"_5" -> "_6";
"_7" -> "_8";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ptr" [label="\N\n_1 = ptr + UNKNOWN\l_2 = *ptr + 16\l_7 = *ptr + 32\l*ptr + 16 = _5\l"];
"_1" [label="\N\n_19 = _1 + UNKNOWN\l"];
"_19" [label="\N\naccum_20 = *_19\l*_19 = accum_20\l"];
"accum_20" [label="\N\n_21 = accum_20 + UNKNOWN\l"];
"_21";
"_23";
"_2";
"_5";
"_7";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "accum_20";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "_7";
"_21" -> "_23";
"_2" -> "_5";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"ptr" [label="\N\n_1 = ptr + UNKNOWN\l_2 = *ptr + 16\l_7 = *ptr + 32\l*ptr + 16 = _5\l"];
"_1" [label="\N\n_19 = _1 + UNKNOWN\l"];
"_19" [label="\N\naccum_20 = *_19\l*_19 = accum_20\l"];
"accum_20" [label="\N\n_21 = accum_20 + UNKNOWN\l"];
"_21";
"_23";
"_2";
"_5";
"_7";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "accum_20";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "_7";
"accum_20" -> "ESCAPED";
"_21" -> "_23";
"_2" -> "_5";
"_5" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as accum_20
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ptr = { NONLOCAL }
_1 = { NONLOCAL }
_17 = { NONLOCAL } same as ptr
i_16 = { NONLOCAL } same as ptr
_18 = { NONLOCAL } same as ptr
_19 = { NONLOCAL }
accum_20 = { ESCAPED NONLOCAL }
_21 = { ESCAPED NONLOCAL }
accum_22 = { ESCAPED NONLOCAL } same as accum_20
_23 = { NULL ESCAPED NONLOCAL }
carry_30 = { NULL ESCAPED NONLOCAL } same as _23
accum_24 = { ESCAPED NONLOCAL } same as accum_20
accum_25 = { ESCAPED NONLOCAL } same as accum_20
carry_33 = { ESCAPED NONLOCAL } same as _21
i_26 = { NONLOCAL } same as ptr
_2 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _2
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as _5
_7 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL } same as _7


Alias information for normalize

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
ptr_11(D), points-to non-local, points-to NULL, points-to vars: { }
_19, points-to non-local, points-to NULL, points-to vars: { }

normalize (struct InternalFPF * ptr)
{
  int i;
  short unsigned int accum;
  short unsigned int carry;
  short unsigned int[4] * _1;
  short int _2;
  unsigned short _4;
  unsigned short _5;
  short int _6;
  short unsigned int _7;
  signed short _8;
  long unsigned int _17;
  long unsigned int _18;
  short unsigned int * _19;
  short unsigned int _21;
  short unsigned int _23;

  <bb 2> [0.00%]:
  goto <bb 9>; [0.00%]

  <bb 3> [20.00%]:
  _1 = &ptr_11(D)->mantissa;
  goto <bb 7>; [100.00%]

  <bb 4> [80.00%]:
  _17 = (long unsigned int) i_16;
  _18 = _17 * 2;
  _19 = _1 + _18;
  accum_20 = *_19;
  _21 = accum_20 & 32768;
  accum_22 = accum_20 << 1;
  _23 = carry_30;
  if (carry_30 != 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 5> [40.00%]:
  accum_24 = accum_22 | 1;

  <bb 6> [80.00%]:
  # accum_25 = PHI <accum_22(4), accum_24(5)>
  carry_33 = _21;
  *_19 = accum_25;
  i_26 = i_16 + -1;

  <bb 7> [100.00%]:
  # i_16 = PHI <3(3), i_26(6)>
  # carry_30 = PHI <0(3), carry_33(6)>
  if (i_16 >= 0)
    goto <bb 4>; [80.00%]
  else
    goto <bb 8>; [20.00%]

  <bb 8> [0.00%]:
  _2 = ptr_11(D)->exp;
  _4 = (unsigned short) _2;
  _5 = _4 + 65535;
  _6 = (short int) _5;
  ptr_11(D)->exp = _6;

  <bb 9> [0.00%]:
  _7 = ptr_11(D)->mantissa[0];
  _8 = (signed short) _7;
  if (_8 >= 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  return;

}



;; Function denormalize (denormalize, funcdef_no=46, decl_uid=2807, cgraph_uid=46, symbol_order=46)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ptr = &NONLOCAL
minimum_exponent = &NONLOCAL
_1 = ptr + UNKNOWN
_27 = i_26
_28 = _27
_28 = &NONLOCAL
_29 = _1 + UNKNOWN
_30 = *_29
_31 = _30
n_33 = _31
n_33 = n_32
i_34 = i_26
i_34 = &NONLOCAL
i_26 = &NULL
i_26 = i_34
n_32 = &NULL
n_32 = n_33
n_35 = n_32
_37 = _36
_42 = _37
_2 = _37
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_18 = NONLOCAL
_3 = *ptr + 16
_4 = _3
_5 = _4
_5 = minimum_exponent
exponent_difference_21 = _5
exponent_difference_22 = exponent_difference_21
_6 = *ptr + 8
_7 = _6
derefaddrtmp(34) = &NULL
*ptr = derefaddrtmp(34)
*ptr + 8 = _6
derefaddrtmp(35) = &NONLOCAL
*ptr + 16 = derefaddrtmp(35)
derefaddrtmp(36) = &NULL
*ptr + UNKNOWN = derefaddrtmp(36)
i_40 = i_39
i_40 = &NONLOCAL
i_39 = &NULL
i_39 = i_40
_8 = *ptr + 16
_9 = _8
_10 = exponent_difference_22
_11 = _9
_11 = _10
_12 = _11
*ptr + 16 = _12
_13 = exponent_difference_22
ESCAPED = ptr
ESCAPED = _13

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"ptr"[label="ptr = { 5 }"];
"minimum_exponent"[label="minimum_exponent = { 5 }"];
"_1";
"_27";
"i_26"[label="i_26 = { 1 5 }"];
"_28"[label="_28 = { 5 }"];
"_29";
"_30";
"_31";
"n_33"[label="n_33 = { 1 }"];
"n_35";
"_36";
"_37";
"_42";
"_2";
"__printf_chk";
"_18";
"_3";
"_4";
"_5";
"exponent_difference_21";
"exponent_difference_22";
"_6";
"_7";
"derefaddrtmp(34)"[label="derefaddrtmp(34) = { 1 }"];
"derefaddrtmp(35)"[label="derefaddrtmp(35) = { 5 }"];
"derefaddrtmp(36)"[label="derefaddrtmp(36) = { 1 }"];
"i_40"[label="i_40 = { 1 5 }"];
"_8";
"_9";
"_10";
"_11";
"_12";
"_13";
"StickyShiftRightMant";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*ptr";
"*minimum_exponent";
"*_1";
"*_27";
"*i_26";
"*_28";
"*_29";
"*_30";
"*_31";
"*n_33";
"*n_32";
"*i_34";
"*n_35";
"*_36";
"*_37";
"*_42";
"*_2";
"*__printf_chk";
"*_18";
"*_3";
"*_4";
"*_5";
"*exponent_difference_21";
"*exponent_difference_22";
"*_6";
"*_7";
"*derefaddrtmp(34)";
"*derefaddrtmp(35)";
"*derefaddrtmp(36)";
"*i_40";
"*i_39";
"*_8";
"*_9";
"*_10";
"*_11";
"*_12";
"*_13";
"*StickyShiftRightMant";

  // Edges in the constraint graph:
"ptr" -> "ESCAPED";
"_13" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"i_26" -> "_27";
"i_26" -> "i_26";
"i_26" -> "i_26";
"_27" -> "_28";
"*_29" -> "_30";
"_30" -> "_31";
"_31" -> "n_33";
"n_33" -> "n_33";
"n_33" -> "n_33";
"n_33" -> "n_35";
"_36" -> "_37";
"_37" -> "_42";
"_37" -> "_2";
"NONLOCAL" -> "_18";
"_3" -> "_4";
"minimum_exponent" -> "_5";
"_4" -> "_5";
"_5" -> "exponent_difference_21";
"exponent_difference_21" -> "exponent_difference_22";
"_6" -> "_7";
"i_40" -> "i_40";
"i_40" -> "i_40";
"_8" -> "_9";
"exponent_difference_22" -> "_10";
"_9" -> "_11";
"_10" -> "_11";
"_11" -> "_12";
"exponent_difference_22" -> "_13";
"NONLOCAL" -> "*ESCAPED";
"derefaddrtmp(34)" -> "*ptr";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"ptr" [label="\N\n_1 = ptr + UNKNOWN\l_3 = *ptr + 16\l_6 = *ptr + 8\l_8 = *ptr + 16\l*ptr + UNKNOWN = derefaddrtmp(34)\l*ptr = derefaddrtmp(34)\l*ptr + 8 = _6\l*ptr + 16 = ptr\l*ptr + 16 = _11\l"];
"_1" [label="\N\n_29 = _1 + UNKNOWN\l"];
"_27";
"_29" [label="\N\n_30 = *_29\l"];
"_30";
"n_33";
"_36";
"_37";
"_42";
"_2";
"__printf_chk";
"_18";
"_3";
"_5";
"_6";
"derefaddrtmp(34)";
"_8";
"_11";
"StickyShiftRightMant";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_6";
"STOREDANYTHING" -> "_8";
"ptr" -> "ESCAPED";
"ptr" -> "_5";
"_30" -> "n_33";
"_3" -> "_5";
"_5" -> "ESCAPED";
"_5" -> "_11";
"_8" -> "_11";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _18\l"];
"STOREDANYTHING";
"INTEGER";
"ptr" [label="\N\n_1 = ptr + UNKNOWN\l_3 = *ptr + 16\l_6 = *ptr + 8\l_8 = *ptr + 16\l*ptr + UNKNOWN = derefaddrtmp(34)\l*ptr = derefaddrtmp(34)\l*ptr + 8 = _6\l*ptr + 16 = ptr\l*ptr + 16 = _11\l"];
"_1" [label="\N\n_29 = _1 + UNKNOWN\l"];
"_27";
"_29" [label="\N\n_30 = *_29\l"];
"_30";
"n_33";
"_36";
"_37";
"_42";
"_2";
"__printf_chk";
"_18";
"_3";
"_5";
"_6";
"derefaddrtmp(34)";
"_8";
"_11";
"StickyShiftRightMant";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_6";
"STOREDANYTHING" -> "_8";
"ptr" -> "ESCAPED";
"ptr" -> "_5";
"_30" -> "n_33";
"_18" -> "ESCAPED";
"_18" -> "_30";
"_18" -> "_3";
"_18" -> "_6";
"_18" -> "_8";
"_3" -> "_5";
"_5" -> "ESCAPED";
"_5" -> "_11";
"_6" -> "ESCAPED";
"derefaddrtmp(34)" -> "ESCAPED";
"_8" -> "_11";
"_11" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _18
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ptr = { NONLOCAL }
minimum_exponent = { NONLOCAL } same as ptr
_1 = { NONLOCAL }
_27 = { NULL NONLOCAL }
i_26 = { NULL NONLOCAL } same as _27
_28 = { NULL NONLOCAL } same as _27
_29 = { NONLOCAL }
_30 = { ESCAPED NONLOCAL }
_31 = { ESCAPED NONLOCAL } same as _30
n_33 = { NULL ESCAPED NONLOCAL }
n_32 = { NULL ESCAPED NONLOCAL } same as n_33
i_34 = { NULL NONLOCAL } same as _27
n_35 = { NULL ESCAPED NONLOCAL } same as n_33
_36 = { }
_37 = { }
_42 = { }
_2 = { }
__printf_chk = { }
_18 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { ESCAPED NONLOCAL }
exponent_difference_21 = { ESCAPED NONLOCAL } same as _5
exponent_difference_22 = { ESCAPED NONLOCAL } same as _5
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as _6
derefaddrtmp(34) = { NULL }
derefaddrtmp(35) = { NONLOCAL } same as ptr
derefaddrtmp(36) = { NULL } same as derefaddrtmp(34)
i_40 = { NULL NONLOCAL } same as _27
i_39 = { NULL NONLOCAL } same as _27
_8 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL } same as _8
_10 = { ESCAPED NONLOCAL } same as _5
_11 = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL } same as _11
_13 = { ESCAPED NONLOCAL } same as _5
StickyShiftRightMant = { }


Alias information for denormalize

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
ptr_16(D), points-to non-local, points-to NULL, points-to vars: { }
_29, points-to non-local, points-to NULL, points-to vars: { }

denormalize (struct InternalFPF * ptr, int minimum_exponent)
{
  int i;
  unsigned char sign;
  int i;
  int n;
  int D.3300;
  int D.3296;
  long int exponent_difference;
  short unsigned int[4] * _1;
  int _2;
  short int _3;
  int _4;
  int _5;
  unsigned char _6;
  int _7;
  short int _8;
  unsigned short _9;
  unsigned short _10;
  unsigned short _11;
  short int _12;
  int _13;
  int _18;
  long unsigned int _27;
  long unsigned int _28;
  short unsigned int * _29;
  short unsigned int _30;
  int _31;
  _Bool _36;
  int _37;

  <bb 2> [20.00%]:
  _1 = &ptr_16(D)->mantissa;
  goto <bb 4>; [100.00%]

  <bb 3> [80.00%]:
  _27 = (long unsigned int) i_26;
  _28 = _27 * 2;
  _29 = _1 + _28;
  _30 = *_29;
  _31 = (int) _30;
  n_33 = _31 | n_32;
  i_34 = i_26 + 1;

  <bb 4> [100.00%]:
  # i_26 = PHI <0(2), i_34(3)>
  # n_32 = PHI <0(2), n_33(3)>
  if (i_26 <= 3)
    goto <bb 3>; [80.00%]
  else
    goto <bb 5>; [20.00%]

  <bb 5> [20.00%]:
  # n_35 = PHI <n_32(4)>
  _36 = n_32 == 0;
  _37 = (int) _36;
  _42 = _37;
  _2 = _37;
  if (n_32 == 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [100.00%]:
  _18 = __printf_chk (1, "Error:  zero significand in denormalize\n");

  <bb 7> [0.00%]:
  _3 = ptr_16(D)->exp;
  _4 = (int) _3;
  _5 = _4 - minimum_exponent_20(D);
  exponent_difference_21 = (long int) _5;
  if (exponent_difference_21 < 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 8> [0.00%]:
  exponent_difference_22 = -exponent_difference_21;
  if (exponent_difference_21 < -63)
    goto <bb 9>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 9> [20.00%]:
  _6 = ptr_16(D)->sign;
  _7 = (int) _6;
  ptr_16(D)->type = 0;
  ptr_16(D)->sign = _6;
  ptr_16(D)->exp = -32767;
  goto <bb 11>; [100.00%]

  <bb 10> [80.00%]:
  ptr_16(D)->mantissa[i_39] = 0;
  i_40 = i_39 + 1;

  <bb 11> [100.00%]:
  # i_39 = PHI <0(9), i_40(10)>
  if (i_39 <= 3)
    goto <bb 10>; [80.00%]
  else
    goto <bb 13>; [20.00%]

  <bb 12> [0.00%]:
  _8 = ptr_16(D)->exp;
  _9 = (unsigned short) _8;
  _10 = (unsigned short) exponent_difference_22;
  _11 = _9 + _10;
  _12 = (short int) _11;
  ptr_16(D)->exp = _12;
  _13 = (int) exponent_difference_22;
  StickyShiftRightMant (ptr_16(D), _13);

  <bb 13> [0.00%]:
  return;

}



;; Function choose_nan (choose_nan, funcdef_no=48, decl_uid=2814, cgraph_uid=48, symbol_order=48)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
x = &NONLOCAL
y = &NONLOCAL
z = &NONLOCAL
intel_flag = &NONLOCAL
_1 = *x + UNKNOWN
_2 = *y + UNKNOWN
CALLUSED(15) = CALLUSED(15) + UNKNOWN
CALLUSED(15) = *CALLUSED(15) + UNKNOWN
CALLUSED(15) = x
CALLUSED(15) = &NULL
_18 = CALLUSED(15)
_18 = NONLOCAL
_19 = x
doubledereftmp(19) = *z + UNKNOWN
*x + UNKNOWN = doubledereftmp(19)
_3 = *x + UNKNOWN
_4 = *y + UNKNOWN
CALLUSED(22) = CALLUSED(22) + UNKNOWN
CALLUSED(22) = *CALLUSED(22) + UNKNOWN
CALLUSED(22) = y
CALLUSED(22) = &NULL
_20 = CALLUSED(22)
_20 = NONLOCAL
_21 = y
doubledereftmp(26) = *z + UNKNOWN
*y + UNKNOWN = doubledereftmp(26)
i_15 = i_5
i_15 = &NONLOCAL
i_5 = &NULL
i_5 = i_15
CALLUSED(29) = CALLUSED(29) + UNKNOWN
CALLUSED(29) = *CALLUSED(29) + UNKNOWN
CALLUSED(29) = x
CALLUSED(29) = &NULL
_22 = CALLUSED(29)
_22 = NONLOCAL
_23 = x
doubledereftmp(33) = *z + UNKNOWN
*x + UNKNOWN = doubledereftmp(33)
CALLUSED(34) = CALLUSED(34) + UNKNOWN
CALLUSED(34) = *CALLUSED(34) + UNKNOWN
CALLUSED(34) = y
CALLUSED(34) = &NULL
_24 = CALLUSED(34)
_24 = NONLOCAL
_25 = y
doubledereftmp(38) = *z + UNKNOWN
*y + UNKNOWN = doubledereftmp(38)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"x"[label="x = { 5 }"];
"y"[label="y = { 5 }"];
"z"[label="z = { 5 }"];
"intel_flag"[label="intel_flag = { 5 }"];
"_1";
"_2";
"__builtin_object_size";
"CALLUSED(15)"[label="CALLUSED(15) = { 1 }"];
"CALLCLOBBERED(16)";
"_18";
"_19";
"doubledereftmp(19)";
"_3";
"_4";
"CALLUSED(22)"[label="CALLUSED(22) = { 1 }"];
"CALLCLOBBERED(23)";
"_20";
"_21";
"doubledereftmp(26)";
"i_15"[label="i_15 = { 1 5 }"];
"CALLUSED(29)"[label="CALLUSED(29) = { 1 }"];
"CALLCLOBBERED(30)";
"_22";
"_23";
"doubledereftmp(33)";
"CALLUSED(34)"[label="CALLUSED(34) = { 1 }"];
"CALLCLOBBERED(35)";
"_24";
"_25";
"doubledereftmp(38)";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*x";
"*y";
"*z";
"*intel_flag";
"*_1";
"*_2";
"*__builtin_object_size";
"*CALLUSED(15)";
"*CALLCLOBBERED(16)";
"*_18";
"*_19";
"*doubledereftmp(19)";
"*_3";
"*_4";
"*CALLUSED(22)";
"*CALLCLOBBERED(23)";
"*_20";
"*_21";
"*doubledereftmp(26)";
"*i_15";
"*i_5";
"*CALLUSED(29)";
"*CALLCLOBBERED(30)";
"*_22";
"*_23";
"*doubledereftmp(33)";
"*CALLUSED(34)";
"*CALLCLOBBERED(35)";
"*_24";
"*_25";
"*doubledereftmp(38)";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"x" -> "CALLUSED(15)";
"NONLOCAL" -> "_18";
"CALLUSED(15)" -> "_18";
"x" -> "_19";
"y" -> "CALLUSED(22)";
"NONLOCAL" -> "_20";
"CALLUSED(22)" -> "_20";
"y" -> "_21";
"i_15" -> "i_15";
"i_15" -> "i_15";
"x" -> "CALLUSED(29)";
"NONLOCAL" -> "_22";
"CALLUSED(29)" -> "_22";
"x" -> "_23";
"y" -> "CALLUSED(34)";
"NONLOCAL" -> "_24";
"CALLUSED(34)" -> "_24";
"y" -> "_25";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"x" [label="\N\n_1 = *x + UNKNOWN\l_2 = *x + UNKNOWN\ldoubledereftmp(19) = *x + UNKNOWN\l_3 = *x + UNKNOWN\l_4 = *x + UNKNOWN\ldoubledereftmp(26) = *x + UNKNOWN\ldoubledereftmp(33) = *x + UNKNOWN\ldoubledereftmp(38) = *x + UNKNOWN\l*x + UNKNOWN = doubledereftmp(19)\l*x + UNKNOWN = doubledereftmp(26)\l*x + UNKNOWN = doubledereftmp(33)\l*x + UNKNOWN = doubledereftmp(38)\l"];
"_1";
"_2";
"__builtin_object_size";
"CALLUSED(15)" [label="\N\nCALLUSED(15) = CALLUSED(15) + UNKNOWN\lCALLUSED(15) = *CALLUSED(15) + UNKNOWN\l"];
"CALLCLOBBERED(16)";
"_18";
"doubledereftmp(19)";
"_3";
"_4";
"CALLUSED(22)" [label="\N\nCALLUSED(22) = CALLUSED(22) + UNKNOWN\lCALLUSED(22) = *CALLUSED(22) + UNKNOWN\l"];
"CALLCLOBBERED(23)";
"_20";
"doubledereftmp(26)";
"i_15";
"CALLUSED(29)" [label="\N\nCALLUSED(29) = CALLUSED(29) + UNKNOWN\lCALLUSED(29) = *CALLUSED(29) + UNKNOWN\l"];
"CALLCLOBBERED(30)";
"_22";
"doubledereftmp(33)";
"CALLUSED(34)" [label="\N\nCALLUSED(34) = CALLUSED(34) + UNKNOWN\lCALLUSED(34) = *CALLUSED(34) + UNKNOWN\l"];
"CALLCLOBBERED(35)";
"_24";
"doubledereftmp(38)";

  // Edges in the constraint graph:
"NONLOCAL" -> "_18";
"NONLOCAL" -> "_20";
"NONLOCAL" -> "_22";
"NONLOCAL" -> "_24";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "CALLUSED(15)";
"STOREDANYTHING" -> "doubledereftmp(19)";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "CALLUSED(22)";
"STOREDANYTHING" -> "doubledereftmp(26)";
"STOREDANYTHING" -> "CALLUSED(29)";
"STOREDANYTHING" -> "doubledereftmp(33)";
"STOREDANYTHING" -> "CALLUSED(34)";
"STOREDANYTHING" -> "doubledereftmp(38)";
"x" -> "CALLUSED(15)";
"x" -> "CALLUSED(22)";
"x" -> "CALLUSED(29)";
"x" -> "CALLUSED(34)";
"CALLUSED(15)" -> "_18";
"CALLUSED(22)" -> "_20";
"CALLUSED(29)" -> "_22";
"CALLUSED(34)" -> "_24";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"x" [label="\N\n_1 = *x + UNKNOWN\l_2 = *x + UNKNOWN\ldoubledereftmp(19) = *x + UNKNOWN\l_3 = *x + UNKNOWN\l_4 = *x + UNKNOWN\ldoubledereftmp(26) = *x + UNKNOWN\ldoubledereftmp(33) = *x + UNKNOWN\ldoubledereftmp(38) = *x + UNKNOWN\l*x + UNKNOWN = doubledereftmp(19)\l*x + UNKNOWN = doubledereftmp(26)\l*x + UNKNOWN = doubledereftmp(33)\l*x + UNKNOWN = doubledereftmp(38)\l"];
"_1";
"_2";
"__builtin_object_size";
"CALLUSED(15)" [label="\N\nCALLUSED(15) = CALLUSED(15) + UNKNOWN\lCALLUSED(15) = *CALLUSED(15) + UNKNOWN\l"];
"CALLCLOBBERED(16)";
"_18";
"doubledereftmp(19)";
"_3";
"_4";
"CALLUSED(22)" [label="\N\nCALLUSED(22) = CALLUSED(22) + UNKNOWN\lCALLUSED(22) = *CALLUSED(22) + UNKNOWN\l"];
"CALLCLOBBERED(23)";
"_20";
"doubledereftmp(26)";
"i_15";
"CALLUSED(29)" [label="\N\nCALLUSED(29) = CALLUSED(29) + UNKNOWN\lCALLUSED(29) = *CALLUSED(29) + UNKNOWN\l"];
"CALLCLOBBERED(30)";
"_22";
"doubledereftmp(33)";
"CALLUSED(34)" [label="\N\nCALLUSED(34) = CALLUSED(34) + UNKNOWN\lCALLUSED(34) = *CALLUSED(34) + UNKNOWN\l"];
"CALLCLOBBERED(35)";
"_24";
"doubledereftmp(38)";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "_18";
"NONLOCAL" -> "_20";
"NONLOCAL" -> "_22";
"NONLOCAL" -> "_24";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "CALLUSED(15)";
"STOREDANYTHING" -> "doubledereftmp(19)";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "CALLUSED(22)";
"STOREDANYTHING" -> "doubledereftmp(26)";
"STOREDANYTHING" -> "CALLUSED(29)";
"STOREDANYTHING" -> "doubledereftmp(33)";
"STOREDANYTHING" -> "CALLUSED(34)";
"STOREDANYTHING" -> "doubledereftmp(38)";
"x" -> "CALLUSED(15)";
"x" -> "CALLUSED(22)";
"x" -> "CALLUSED(29)";
"x" -> "CALLUSED(34)";
"CALLUSED(15)" -> "_18";
"doubledereftmp(19)" -> "ESCAPED";
"CALLUSED(22)" -> "_20";
"doubledereftmp(26)" -> "ESCAPED";
"CALLUSED(29)" -> "_22";
"doubledereftmp(33)" -> "ESCAPED";
"CALLUSED(34)" -> "_24";
"doubledereftmp(38)" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
x = { NONLOCAL }
y = { NONLOCAL } same as x
z = { NONLOCAL } same as x
intel_flag = { NONLOCAL } same as x
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
__builtin_object_size = { }
CALLUSED(15) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(16) = { }
_18 = { NULL ESCAPED NONLOCAL }
_19 = { NONLOCAL } same as x
doubledereftmp(19) = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
CALLUSED(22) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(23) = { }
_20 = { NULL ESCAPED NONLOCAL }
_21 = { NONLOCAL } same as x
doubledereftmp(26) = { ESCAPED NONLOCAL }
i_15 = { NULL NONLOCAL }
i_5 = { NULL NONLOCAL } same as i_15
CALLUSED(29) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(30) = { }
_22 = { NULL ESCAPED NONLOCAL }
_23 = { NONLOCAL } same as x
doubledereftmp(33) = { ESCAPED NONLOCAL }
CALLUSED(34) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(35) = { }
_24 = { NULL ESCAPED NONLOCAL }
_25 = { NONLOCAL } same as x
doubledereftmp(38) = { ESCAPED NONLOCAL }


Alias information for choose_nan

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

y_10(D), points-to non-local, points-to NULL, points-to vars: { }
z_11(D), points-to non-local, points-to NULL, points-to vars: { }
x_13(D), points-to non-local, points-to NULL, points-to vars: { }
_19, points-to non-local, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to NULL, points-to vars: { }
_23, points-to non-local, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to NULL, points-to vars: { }

choose_nan (struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z, int intel_flag)
{
  void * D.3320;
  void * D.3316;
  void * D.3312;
  void * D.3308;
  int i;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  long unsigned int _18;
  void * _19;
  long unsigned int _20;
  void * _21;
  long unsigned int _22;
  void * _23;
  long unsigned int _24;
  void * _25;

  <bb 2> [0.00%]:
  goto <bb 8>; [0.00%]

  <bb 3> [0.00%]:
  _1 = x_13(D)->mantissa[i_5];
  _2 = y_10(D)->mantissa[i_5];
  if (_1 > _2)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [100.00%]:
  _18 = __builtin_object_size (x_13(D), 0);
  _19 = __builtin___memmove_chk (x_13(D), z_11(D), 12, _18);
  goto <bb 12>; [100.00%]

  <bb 5> [0.00%]:
  _3 = x_13(D)->mantissa[i_5];
  _4 = y_10(D)->mantissa[i_5];
  if (_3 < _4)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [100.00%]:
  _20 = __builtin_object_size (y_10(D), 0);
  _21 = __builtin___memmove_chk (y_10(D), z_11(D), 12, _20);
  goto <bb 12>; [100.00%]

  <bb 7> [0.00%]:
  i_15 = i_5 + 1;

  <bb 8> [0.00%]:
  # i_5 = PHI <0(2), i_15(7)>
  if (i_5 <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  if (intel_flag_8(D) == 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [100.00%]:
  _22 = __builtin_object_size (x_13(D), 0);
  _23 = __builtin___memmove_chk (x_13(D), z_11(D), 12, _22);
  goto <bb 12>; [100.00%]

  <bb 11> [100.00%]:
  _24 = __builtin_object_size (y_10(D), 0);
  _25 = __builtin___memmove_chk (y_10(D), z_11(D), 12, _24);

  <bb 12> [0.00%]:
  return;

}



;; Function Int32ToInternalFPF (Int32ToInternalFPF, funcdef_no=52, decl_uid=2830, cgraph_uid=52, symbol_order=52)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
mylong = &NONLOCAL
dest = &NONLOCAL
derefaddrtmp(10) = &NONLOCAL
*dest + 8 = derefaddrtmp(10)
mylong_12 = mylong
derefaddrtmp(12) = &NULL
*dest + 8 = derefaddrtmp(12)
mylong_2 = mylong_12
mylong_2 = mylong
derefaddrtmp(14) = &NONLOCAL
*dest = derefaddrtmp(14)
derefaddrtmp(15) = &NULL
*dest + UNKNOWN = derefaddrtmp(15)
i_24 = i_3
i_24 = &NONLOCAL
i_3 = &NULL
i_3 = i_24
derefaddrtmp(18) = &NULL
*dest = derefaddrtmp(18)
derefaddrtmp(19) = &NULL
*dest + 16 = derefaddrtmp(19)
derefaddrtmp(20) = &NONLOCAL
*dest + 16 = derefaddrtmp(20)
_1 = mylong_2
_1 = &NONLOCAL
myword_16 = _1
*dest + 32 = myword_16
myword_18 = mylong_2
*dest + 48 = myword_18
ESCAPED = dest

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"mylong"[label="mylong = { 5 }"];
"dest"[label="dest = { 5 }"];
"derefaddrtmp(10)"[label="derefaddrtmp(10) = { 5 }"];
"mylong_12";
"derefaddrtmp(12)"[label="derefaddrtmp(12) = { 1 }"];
"mylong_2";
"derefaddrtmp(14)"[label="derefaddrtmp(14) = { 5 }"];
"derefaddrtmp(15)"[label="derefaddrtmp(15) = { 1 }"];
"i_24"[label="i_24 = { 1 5 }"];
"derefaddrtmp(18)"[label="derefaddrtmp(18) = { 1 }"];
"derefaddrtmp(19)"[label="derefaddrtmp(19) = { 1 }"];
"derefaddrtmp(20)"[label="derefaddrtmp(20) = { 5 }"];
"_1"[label="_1 = { 5 }"];
"myword_16";
"myword_18";
"normalize";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*mylong";
"*dest";
"*derefaddrtmp(10)";
"*mylong_12";
"*derefaddrtmp(12)";
"*mylong_2";
"*derefaddrtmp(14)";
"*derefaddrtmp(15)";
"*i_24";
"*i_3";
"*derefaddrtmp(18)";
"*derefaddrtmp(19)";
"*derefaddrtmp(20)";
"*_1";
"*myword_16";
"*myword_18";
"*normalize";

  // Edges in the constraint graph:
"dest" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"mylong" -> "mylong_12";
"mylong" -> "mylong_2";
"mylong_12" -> "mylong_2";
"i_24" -> "i_24";
"i_24" -> "i_24";
"mylong_2" -> "_1";
"_1" -> "myword_16";
"mylong_2" -> "myword_18";
"NONLOCAL" -> "*ESCAPED";
"derefaddrtmp(14)" -> "*dest";
"derefaddrtmp(18)" -> "*dest";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"mylong" [label="\N\n*mylong + UNKNOWN = derefaddrtmp(12)\l*mylong = mylong\l*mylong = derefaddrtmp(12)\l*mylong + 8 = mylong\l*mylong + 8 = derefaddrtmp(12)\l*mylong + 16 = mylong\l*mylong + 16 = derefaddrtmp(12)\l*mylong + 32 = mylong\l*mylong + 48 = mylong\l"];
"derefaddrtmp(12)";
"i_24";
"normalize";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"mylong" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"mylong" [label="\N\n*mylong + UNKNOWN = derefaddrtmp(12)\l*mylong = mylong\l*mylong = derefaddrtmp(12)\l*mylong + 8 = mylong\l*mylong + 8 = derefaddrtmp(12)\l*mylong + 16 = mylong\l*mylong + 16 = derefaddrtmp(12)\l*mylong + 32 = mylong\l*mylong + 48 = mylong\l"];
"derefaddrtmp(12)";
"i_24";
"normalize";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"mylong" -> "ESCAPED";
"derefaddrtmp(12)" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
mylong = { NONLOCAL }
dest = { NONLOCAL } same as mylong
derefaddrtmp(10) = { NONLOCAL } same as mylong
mylong_12 = { NONLOCAL } same as mylong
derefaddrtmp(12) = { NULL }
mylong_2 = { NONLOCAL } same as mylong
derefaddrtmp(14) = { NONLOCAL } same as mylong
derefaddrtmp(15) = { NULL } same as derefaddrtmp(12)
i_24 = { NULL NONLOCAL }
i_3 = { NULL NONLOCAL } same as i_24
derefaddrtmp(18) = { NULL } same as derefaddrtmp(12)
derefaddrtmp(19) = { NULL } same as derefaddrtmp(12)
derefaddrtmp(20) = { NONLOCAL } same as mylong
_1 = { NONLOCAL } same as mylong
myword_16 = { NONLOCAL } same as mylong
myword_18 = { NONLOCAL } same as mylong
normalize = { }


Alias information for Int32ToInternalFPF

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

dest_9(D), points-to non-local, points-to NULL, points-to vars: { }

Int32ToInternalFPF (int32 mylong, struct InternalFPF * dest)
{
  short unsigned int myword;
  int i;
  int _1;

  <bb 2> [0.00%]:
  if (mylong_7(D) < 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  dest_9(D)->sign = 1;
  mylong_12 = -mylong_7(D);
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  dest_9(D)->sign = 0;

  <bb 5> [0.00%]:
  # mylong_2 = PHI <mylong_12(3), mylong_7(D)(4)>
  dest_9(D)->type = 2;
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  dest_9(D)->mantissa[i_3] = 0;
  i_24 = i_3 + 1;

  <bb 7> [0.00%]:
  # i_3 = PHI <0(5), i_24(6)>
  if (i_3 <= 3)
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  if (mylong_2 == 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  dest_9(D)->type = 0;
  dest_9(D)->exp = 0;
  goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  dest_9(D)->exp = 32;
  _1 = mylong_2 >> 16;
  myword_16 = (short unsigned int) _1;
  dest_9(D)->mantissa[0] = myword_16;
  myword_18 = (short unsigned int) mylong_2;
  dest_9(D)->mantissa[1] = myword_18;
  normalize (dest_9(D));

  <bb 11> [0.00%]:
  return;

}



;; Function RoundInternalFPF (RoundInternalFPF, funcdef_no=47, decl_uid=2809, cgraph_uid=47, symbol_order=47)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ptr = &NONLOCAL
_1 = *ptr
_2 = _1
_2 = &NONLOCAL
ESCAPED = ptr
ESCAPED = &NONLOCAL
_3 = *ptr
_4 = *ptr + 80
_5 = _4 + UNKNOWN
*ptr + 80 = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"ptr"[label="ptr = { 5 }"];
"_1";
"_2"[label="_2 = { 5 }"];
"denormalize";
"_3";
"_4";
"_5";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*ptr";
"*_1";
"*_2";
"*denormalize";
"*_3";
"*_4";
"*_5";

  // Edges in the constraint graph:
"ptr" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"*ptr" -> "_1";
"_1" -> "_2";
"*ptr" -> "_3";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ptr" [label="\N\n_1 = *ptr\l_4 = *ptr + 80\l*ptr + 80 = _5\l"];
"_1";
"_2";
"denormalize";
"_4" [label="\N\n_5 = _4 + UNKNOWN\l"];
"_5";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "_5";
"ptr" -> "ESCAPED";
"_1" -> "_2";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ptr" [label="\N\n_1 = *ptr\l_4 = *ptr + 80\l*ptr + 80 = _5\l"];
"_1";
"_2";
"denormalize";
"_4" [label="\N\n_5 = _4 + UNKNOWN\l"];
"_5";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "_5";
"ptr" -> "ESCAPED";
"_1" -> "_2";
"_5" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ptr = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
denormalize = { }
_3 = { ESCAPED NONLOCAL } same as _1
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL }


Alias information for RoundInternalFPF

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

ptr_8(D), points-to non-local, points-to NULL, points-to vars: { }

RoundInternalFPF (struct InternalFPF * ptr)
{
  unsigned char _1;
  unsigned char _2;
  unsigned char _3;
  short unsigned int _4;
  short unsigned int _5;

  <bb 2> [0.00%]:
  _1 = ptr_8(D)->type;
  _2 = _1 + 255;
  if (_2 <= 1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 3> [0.00%]:
  denormalize (ptr_8(D), -32767);
  _3 = ptr_8(D)->type;
  if (_3 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _4 = ptr_8(D)->mantissa[3];
  _5 = _4 & 65528;
  ptr_8(D)->mantissa[3] = _5;

  <bb 5> [0.00%]:
  return;

}



;; Function DivideInternalFPF (DivideInternalFPF, funcdef_no=51, decl_uid=2827, cgraph_uid=51, symbol_order=51)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
x = &NONLOCAL
y = &NONLOCAL
z = &NONLOCAL
_1 = *x
_2 = _1
_3 = _2
_3 = &NONLOCAL
_4 = *y
_5 = _4
_6 = _3
_6 = _5
derefaddrtmp(17) = &NONLOCAL
*z = derefaddrtmp(17)
derefaddrtmp(18) = &NONLOCAL
*z + 16 = derefaddrtmp(18)
derefaddrtmp(19) = &NONLOCAL
*z + 8 = derefaddrtmp(19)
derefaddrtmp(20) = &NONLOCAL
*z + 32 = derefaddrtmp(20)
derefaddrtmp(21) = &NULL
*z + UNKNOWN = derefaddrtmp(21)
i_110 = i_109
i_110 = &NONLOCAL
i_109 = &NONLOCAL
i_109 = i_110
_7 = y + UNKNOWN
_112 = i_111
_113 = _112
_113 = &NONLOCAL
_114 = _7 + UNKNOWN
_115 = *_114
_116 = _115
n_118 = _116
n_118 = n_117
i_119 = i_111
i_119 = &NONLOCAL
i_111 = &NULL
i_111 = i_119
n_117 = &NULL
n_117 = n_118
n_120 = n_117
_122 = _121
_285 = _122
_8 = _122
derefaddrtmp(39) = &NONLOCAL
*z = derefaddrtmp(39)
derefaddrtmp(40) = &NONLOCAL
*z + 16 = derefaddrtmp(40)
derefaddrtmp(41) = &NONLOCAL
*z + 8 = derefaddrtmp(41)
derefaddrtmp(42) = &NONLOCAL
*z + 32 = derefaddrtmp(42)
derefaddrtmp(43) = &NULL
*z + UNKNOWN = derefaddrtmp(43)
i_124 = i_123
i_124 = &NONLOCAL
i_123 = &NONLOCAL
i_123 = i_124
_9 = *x + 8
_10 = *y + 8
_11 = _9
_11 = _10
_12 = _11
derefaddrtmp(50) = &NULL
*z = derefaddrtmp(50)
*z + 8 = _11
derefaddrtmp(51) = &NONLOCAL
*z + 16 = derefaddrtmp(51)
derefaddrtmp(52) = &NULL
*z + UNKNOWN = derefaddrtmp(52)
i_127 = i_126
i_127 = &NONLOCAL
i_126 = &NULL
i_126 = i_127
_13 = x + UNKNOWN
_129 = i_128
_130 = _129
_130 = &NONLOCAL
_131 = _13 + UNKNOWN
_132 = *_131
_133 = _132
n_135 = _133
n_135 = n_134
i_136 = i_128
i_136 = &NONLOCAL
i_128 = &NULL
i_128 = i_136
n_134 = &NULL
n_134 = n_135
n_137 = n_134
_139 = _138
_273 = _139
_14 = _139
derefaddrtmp(70) = &NONLOCAL
*z = derefaddrtmp(70)
derefaddrtmp(71) = &NONLOCAL
*z + 16 = derefaddrtmp(71)
derefaddrtmp(72) = &NONLOCAL
*z + 8 = derefaddrtmp(72)
derefaddrtmp(73) = &NONLOCAL
*z + 32 = derefaddrtmp(73)
derefaddrtmp(74) = &NULL
*z + UNKNOWN = derefaddrtmp(74)
i_141 = i_140
i_141 = &NONLOCAL
i_140 = &NONLOCAL
i_140 = i_141
derefaddrtmp(77) = &NONLOCAL
*z = derefaddrtmp(77)
derefaddrtmp(78) = &NULL
*z + 8 = derefaddrtmp(78)
derefaddrtmp(79) = &NONLOCAL
*z + 16 = derefaddrtmp(79)
derefaddrtmp(80) = &NULL
*z + UNKNOWN = derefaddrtmp(80)
i_143 = i_142
i_143 = &NONLOCAL
i_142 = &NULL
i_142 = i_143
_15 = *x + 8
_16 = *y + 8
_17 = _15
_17 = _16
*z + 8 = _17
CALLUSED(87) = CALLUSED(87) + UNKNOWN
CALLUSED(87) = *CALLUSED(87) + UNKNOWN
CALLUSED(87) = x
CALLUSED(87) = &NULL
_70 = CALLUSED(87)
_70 = NONLOCAL
_92 = x
doubledereftmp(91) = *z + UNKNOWN
*x + UNKNOWN = doubledereftmp(91)
CALLUSED(92) = CALLUSED(92) + UNKNOWN
CALLUSED(92) = *CALLUSED(92) + UNKNOWN
CALLUSED(92) = y
CALLUSED(92) = &NULL
_69 = CALLUSED(92)
_69 = NONLOCAL
_95 = y
doubledereftmp(96) = *z + UNKNOWN
*y + UNKNOWN = doubledereftmp(96)
_108 = &locx
locx = *x + UNKNOWN
_248 = _108
_145 = i_144
_146 = _145
_146 = &NONLOCAL
_147 = &locx
_148 = *_147
_149 = _148
n_151 = _149
n_151 = n_150
i_152 = i_144
i_152 = &NONLOCAL
i_144 = &NULL
i_144 = i_152
n_150 = &NULL
n_150 = n_151
n_153 = n_150
_155 = _154
_249 = _155
_18 = _155
_19 = y + UNKNOWN
_157 = i_156
_158 = _157
_158 = &NONLOCAL
_159 = _19 + UNKNOWN
_160 = *_159
_161 = _160
n_163 = _161
n_163 = n_162
i_164 = i_156
i_164 = &NONLOCAL
i_156 = &NULL
i_156 = i_164
n_162 = &NULL
n_162 = n_163
n_165 = n_162
_167 = _166
_263 = _167
_20 = _167
derefaddrtmp(129) = &NONLOCAL
*z = derefaddrtmp(129)
derefaddrtmp(130) = &NONLOCAL
*z + 16 = derefaddrtmp(130)
derefaddrtmp(131) = &NONLOCAL
*z + 8 = derefaddrtmp(131)
derefaddrtmp(132) = &NONLOCAL
*z + 32 = derefaddrtmp(132)
derefaddrtmp(133) = &NULL
*z + UNKNOWN = derefaddrtmp(133)
i_169 = i_168
i_169 = &NONLOCAL
i_168 = &NONLOCAL
i_168 = i_169
derefaddrtmp(136) = &NULL
*z = derefaddrtmp(136)
derefaddrtmp(137) = &NULL
*z + 8 = derefaddrtmp(137)
derefaddrtmp(138) = &NONLOCAL
*z + 16 = derefaddrtmp(138)
derefaddrtmp(139) = &NULL
*z + UNKNOWN = derefaddrtmp(139)
i_171 = i_170
i_171 = &NONLOCAL
i_170 = &NULL
i_170 = i_171
_21 = y + UNKNOWN
_173 = i_172
_174 = _173
_174 = &NONLOCAL
_175 = _21 + UNKNOWN
_176 = *_175
_177 = _176
n_179 = _177
n_179 = n_178
i_180 = i_172
i_180 = &NONLOCAL
i_172 = &NULL
i_172 = i_180
n_178 = &NULL
n_178 = n_179
n_181 = n_178
_183 = _182
_250 = _183
_22 = _183
derefaddrtmp(157) = &NONLOCAL
*z = derefaddrtmp(157)
derefaddrtmp(158) = &NULL
*z + 8 = derefaddrtmp(158)
derefaddrtmp(159) = &NONLOCAL
*z + 16 = derefaddrtmp(159)
derefaddrtmp(160) = &NULL
*z + UNKNOWN = derefaddrtmp(160)
i_185 = i_184
i_185 = &NONLOCAL
i_184 = &NULL
i_184 = i_185
_23 = *x
*z = _23
_24 = *x + 8
_25 = *y + 8
_26 = _24
_26 = _25
*z + 8 = _26
_27 = *x + 16
_28 = _27
_29 = *y + 16
_30 = _29
_31 = _28
_31 = _30
_32 = _31
_32 = &NONLOCAL
_33 = _32
*z + 16 = _33
derefaddrtmp(174) = &NULL
*z + UNKNOWN = derefaddrtmp(174)
extra_bits = &NULL
i_90 = i_52
i_90 = &NONLOCAL
i_52 = &NULL
i_52 = i_90
_198 = i_197
_199 = _198
_199 = &NONLOCAL
_200 = &locx
accum_201 = *_200
_202 = accum_201 + UNKNOWN
accum_203 = accum_201
accum_203 = &NONLOCAL
_204 = carry_301
accum_205 = accum_203
accum_205 = &NONLOCAL
accum_206 = accum_203
accum_206 = accum_205
carry_313 = _202
*_200 = accum_206
i_207 = i_197
i_207 = &NONLOCAL
i_197 = &NONLOCAL
i_197 = i_207
carry_301 = &NULL
carry_301 = carry_313
_187 = i_186
_188 = _187
_188 = &NONLOCAL
_189 = &extra_bits
accum_190 = *_189
_191 = accum_190 + UNKNOWN
accum_192 = accum_190
accum_192 = &NONLOCAL
_193 = carry_302
accum_194 = accum_192
accum_194 = &NONLOCAL
accum_195 = accum_192
accum_195 = accum_194
carry_312 = _191
*_189 = accum_195
i_196 = i_186
i_196 = &NONLOCAL
i_186 = &NONLOCAL
i_186 = i_196
carry_302 = carry_301
carry_302 = carry_312
carry.0_34 = carry_302
_35 = *y + UNKNOWN
_36 = extra_bits
_37 = *y + UNKNOWN
_38 = extra_bits
j_79 = j_53
j_79 = &NONLOCAL
j_53 = &NULL
j_53 = j_79
_39 = *y + UNKNOWN
_40 = _39
_41 = extra_bits
_42 = _41
accum_210 = _41
_211 = _39
accum_212 = accum_210
accum_212 = _211
_213 = carry_303
_214 = carry_303
accum_215 = accum_212
accum_215 = _214
_216 = accum_215
_216 = &NONLOCAL
_217 = _216
_218 = _217 + UNKNOWN
carry_310 = _218
_219 = accum_215
extra_bits = _219
j_85 = j_54
j_85 = &NONLOCAL
j_43 = &NONLOCAL
j_43 = &NONLOCAL
j_43 = &NONLOCAL
carry_100 = &NULL
carry_100 = &NULL
carry_100 = &NULL
j_54 = j_43
j_54 = j_85
carry_303 = carry_100
carry_303 = carry_310
carry_304 = &NULL
carry_304 = &NONLOCAL
_44 = z + UNKNOWN
_221 = i_220
_222 = _221
_222 = &NONLOCAL
_223 = _44 + UNKNOWN
accum_224 = *_223
_225 = accum_224 + UNKNOWN
accum_226 = accum_224
accum_226 = &NONLOCAL
_227 = carry_305
accum_228 = accum_226
accum_228 = &NONLOCAL
accum_229 = accum_226
accum_229 = accum_228
carry_311 = _225
*_223 = accum_229
i_230 = i_220
i_230 = &NONLOCAL
i_220 = &NONLOCAL
i_220 = i_230
carry_305 = carry_304
carry_305 = carry_311
_45 = *z + 16
_47 = _45
_48 = _47
_48 = &NONLOCAL
_49 = _48
*z + 16 = _49
_50 = *z + 32
_51 = _50
ESCAPED = x
ESCAPED = y
ESCAPED = z
ESCAPED = &NULL
_231 = *z
_232 = _231
_232 = &NONLOCAL
ESCAPED = z

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"x"[label="x = { 5 }"];
"y"[label="y = { 5 }"];
"z"[label="z = { 5 }"];
"_1";
"_2";
"_3"[label="_3 = { 5 }"];
"_4";
"_5";
"_6";
"derefaddrtmp(17)"[label="derefaddrtmp(17) = { 5 }"];
"derefaddrtmp(18)"[label="derefaddrtmp(18) = { 5 }"];
"derefaddrtmp(19)"[label="derefaddrtmp(19) = { 5 }"];
"derefaddrtmp(20)"[label="derefaddrtmp(20) = { 5 }"];
"derefaddrtmp(21)"[label="derefaddrtmp(21) = { 1 }"];
"i_110"[label="i_110 = { 5 }"];
"_7";
"_112";
"i_111"[label="i_111 = { 1 5 }"];
"_113"[label="_113 = { 5 }"];
"_114";
"_115";
"_116";
"n_118"[label="n_118 = { 1 }"];
"n_120";
"_121";
"_122";
"_285";
"_8";
"derefaddrtmp(39)"[label="derefaddrtmp(39) = { 5 }"];
"derefaddrtmp(40)"[label="derefaddrtmp(40) = { 5 }"];
"derefaddrtmp(41)"[label="derefaddrtmp(41) = { 5 }"];
"derefaddrtmp(42)"[label="derefaddrtmp(42) = { 5 }"];
"derefaddrtmp(43)"[label="derefaddrtmp(43) = { 1 }"];
"i_124"[label="i_124 = { 5 }"];
"_9";
"_10";
"_11";
"_12";
"derefaddrtmp(50)"[label="derefaddrtmp(50) = { 1 }"];
"derefaddrtmp(51)"[label="derefaddrtmp(51) = { 5 }"];
"derefaddrtmp(52)"[label="derefaddrtmp(52) = { 1 }"];
"i_127"[label="i_127 = { 1 5 }"];
"_13";
"_129";
"i_128"[label="i_128 = { 1 5 }"];
"_130"[label="_130 = { 5 }"];
"_131";
"_132";
"_133";
"n_135"[label="n_135 = { 1 }"];
"n_137";
"_138";
"_139";
"_273";
"_14";
"derefaddrtmp(70)"[label="derefaddrtmp(70) = { 5 }"];
"derefaddrtmp(71)"[label="derefaddrtmp(71) = { 5 }"];
"derefaddrtmp(72)"[label="derefaddrtmp(72) = { 5 }"];
"derefaddrtmp(73)"[label="derefaddrtmp(73) = { 5 }"];
"derefaddrtmp(74)"[label="derefaddrtmp(74) = { 1 }"];
"i_141"[label="i_141 = { 5 }"];
"derefaddrtmp(77)"[label="derefaddrtmp(77) = { 5 }"];
"derefaddrtmp(78)"[label="derefaddrtmp(78) = { 1 }"];
"derefaddrtmp(79)"[label="derefaddrtmp(79) = { 5 }"];
"derefaddrtmp(80)"[label="derefaddrtmp(80) = { 1 }"];
"i_143"[label="i_143 = { 1 5 }"];
"_15";
"_16";
"_17";
"__builtin_object_size";
"CALLUSED(87)"[label="CALLUSED(87) = { 1 }"];
"CALLCLOBBERED(88)";
"_70";
"_92";
"doubledereftmp(91)";
"CALLUSED(92)"[label="CALLUSED(92) = { 1 }"];
"CALLCLOBBERED(93)";
"_69";
"_95";
"doubledereftmp(96)";
"_108"[label="_108 = { 98 }"];
"locx";
"_248";
"_145";
"i_144"[label="i_144 = { 1 5 }"];
"_146"[label="_146 = { 5 }"];
"_147"[label="_147 = { 98 }"];
"_148";
"_149";
"n_151"[label="n_151 = { 1 }"];
"n_153";
"_154";
"_155";
"_249";
"_18";
"_19";
"_157";
"i_156"[label="i_156 = { 1 5 }"];
"_158"[label="_158 = { 5 }"];
"_159";
"_160";
"_161";
"n_163"[label="n_163 = { 1 }"];
"n_165";
"_166";
"_167";
"_263";
"_20";
"derefaddrtmp(129)"[label="derefaddrtmp(129) = { 5 }"];
"derefaddrtmp(130)"[label="derefaddrtmp(130) = { 5 }"];
"derefaddrtmp(131)"[label="derefaddrtmp(131) = { 5 }"];
"derefaddrtmp(132)"[label="derefaddrtmp(132) = { 5 }"];
"derefaddrtmp(133)"[label="derefaddrtmp(133) = { 1 }"];
"i_169"[label="i_169 = { 5 }"];
"derefaddrtmp(136)"[label="derefaddrtmp(136) = { 1 }"];
"derefaddrtmp(137)"[label="derefaddrtmp(137) = { 1 }"];
"derefaddrtmp(138)"[label="derefaddrtmp(138) = { 5 }"];
"derefaddrtmp(139)"[label="derefaddrtmp(139) = { 1 }"];
"i_171"[label="i_171 = { 1 5 }"];
"_21";
"_173";
"i_172"[label="i_172 = { 1 5 }"];
"_174"[label="_174 = { 5 }"];
"_175";
"_176";
"_177";
"n_179"[label="n_179 = { 1 }"];
"n_181";
"_182";
"_183";
"_250";
"_22";
"derefaddrtmp(157)"[label="derefaddrtmp(157) = { 5 }"];
"derefaddrtmp(158)"[label="derefaddrtmp(158) = { 1 }"];
"derefaddrtmp(159)"[label="derefaddrtmp(159) = { 5 }"];
"derefaddrtmp(160)"[label="derefaddrtmp(160) = { 1 }"];
"i_185"[label="i_185 = { 1 5 }"];
"_23";
"_24";
"_25";
"_26";
"_27";
"_28";
"_29";
"_30";
"_31";
"_32"[label="_32 = { 5 }"];
"_33";
"derefaddrtmp(174)"[label="derefaddrtmp(174) = { 1 }"];
"extra_bits"[label="extra_bits = { 1 }"];
"i_90"[label="i_90 = { 1 5 }"];
"_198";
"i_197"[label="i_197 = { 5 }"];
"_199"[label="_199 = { 5 }"];
"_200"[label="_200 = { 98 }"];
"accum_201"[label="accum_201 = { 5 }"];
"_202";
"_204";
"carry_301"[label="carry_301 = { 1 }"];
"carry_313";
"_187";
"i_186"[label="i_186 = { 5 }"];
"_188"[label="_188 = { 5 }"];
"_189"[label="_189 = { 175 }"];
"accum_190"[label="accum_190 = { 5 }"];
"_191";
"_193";
"carry_302";
"carry_312";
"carry.0_34";
"_35";
"_36";
"_37";
"_38";
"j_79"[label="j_79 = { 1 5 }"];
"_39";
"_40";
"_42";
"_211";
"_213";
"carry_303";
"_214";
"_216"[label="_216 = { 5 }"];
"_217";
"_218";
"carry_310";
"j_85"[label="j_85 = { 5 }"];
"j_43"[label="j_43 = { 5 }"];
"carry_100"[label="carry_100 = { 1 }"];
"carry_304"[label="carry_304 = { 1 5 }"];
"_44";
"_221";
"i_220"[label="i_220 = { 5 }"];
"_222"[label="_222 = { 5 }"];
"_223";
"accum_224"[label="accum_224 = { 5 }"];
"_225";
"_227";
"carry_305";
"carry_311";
"_45";
"_47";
"_48"[label="_48 = { 5 }"];
"_49";
"_50";
"_51";
"choose_nan";
"_231";
"_232"[label="_232 = { 5 }"];
"RoundInternalFPF.part.1";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*x";
"*y";
"*z";
"*_1";
"*_2";
"*_3";
"*_4";
"*_5";
"*_6";
"*derefaddrtmp(17)";
"*derefaddrtmp(18)";
"*derefaddrtmp(19)";
"*derefaddrtmp(20)";
"*derefaddrtmp(21)";
"*i_110";
"*i_109";
"*_7";
"*_112";
"*i_111";
"*_113";
"*_114";
"*_115";
"*_116";
"*n_118";
"*n_117";
"*i_119";
"*n_120";
"*_121";
"*_122";
"*_285";
"*_8";
"*derefaddrtmp(39)";
"*derefaddrtmp(40)";
"*derefaddrtmp(41)";
"*derefaddrtmp(42)";
"*derefaddrtmp(43)";
"*i_124";
"*i_123";
"*_9";
"*_10";
"*_11";
"*_12";
"*derefaddrtmp(50)";
"*derefaddrtmp(51)";
"*derefaddrtmp(52)";
"*i_127";
"*i_126";
"*_13";
"*_129";
"*i_128";
"*_130";
"*_131";
"*_132";
"*_133";
"*n_135";
"*n_134";
"*i_136";
"*n_137";
"*_138";
"*_139";
"*_273";
"*_14";
"*derefaddrtmp(70)";
"*derefaddrtmp(71)";
"*derefaddrtmp(72)";
"*derefaddrtmp(73)";
"*derefaddrtmp(74)";
"*i_141";
"*i_140";
"*derefaddrtmp(77)";
"*derefaddrtmp(78)";
"*derefaddrtmp(79)";
"*derefaddrtmp(80)";
"*i_143";
"*i_142";
"*_15";
"*_16";
"*_17";
"*__builtin_object_size";
"*CALLUSED(87)";
"*CALLCLOBBERED(88)";
"*_70";
"*_92";
"*doubledereftmp(91)";
"*CALLUSED(92)";
"*CALLCLOBBERED(93)";
"*_69";
"*_95";
"*doubledereftmp(96)";
"*_108";
"*locx";
"*_248";
"*_145";
"*i_144";
"*_146";
"*_147";
"*_148";
"*_149";
"*n_151";
"*n_150";
"*i_152";
"*n_153";
"*_154";
"*_155";
"*_249";
"*_18";
"*_19";
"*_157";
"*i_156";
"*_158";
"*_159";
"*_160";
"*_161";
"*n_163";
"*n_162";
"*i_164";
"*n_165";
"*_166";
"*_167";
"*_263";
"*_20";
"*derefaddrtmp(129)";
"*derefaddrtmp(130)";
"*derefaddrtmp(131)";
"*derefaddrtmp(132)";
"*derefaddrtmp(133)";
"*i_169";
"*i_168";
"*derefaddrtmp(136)";
"*derefaddrtmp(137)";
"*derefaddrtmp(138)";
"*derefaddrtmp(139)";
"*i_171";
"*i_170";
"*_21";
"*_173";
"*i_172";
"*_174";
"*_175";
"*_176";
"*_177";
"*n_179";
"*n_178";
"*i_180";
"*n_181";
"*_182";
"*_183";
"*_250";
"*_22";
"*derefaddrtmp(157)";
"*derefaddrtmp(158)";
"*derefaddrtmp(159)";
"*derefaddrtmp(160)";
"*i_185";
"*i_184";
"*_23";
"*_24";
"*_25";
"*_26";
"*_27";
"*_28";
"*_29";
"*_30";
"*_31";
"*_32";
"*_33";
"*derefaddrtmp(174)";
"*extra_bits";
"*i_90";
"*i_52";
"*_198";
"*i_197";
"*_199";
"*accum_201";
"*_202";
"*accum_203";
"*_204";
"*carry_301";
"*accum_205";
"*accum_206";
"*carry_313";
"*i_207";
"*_187";
"*i_186";
"*_188";
"*accum_190";
"*_191";
"*accum_192";
"*_193";
"*carry_302";
"*accum_194";
"*accum_195";
"*carry_312";
"*i_196";
"*carry.0_34";
"*_35";
"*_36";
"*_37";
"*_38";
"*j_79";
"*j_53";
"*_39";
"*_40";
"*_41";
"*_42";
"*accum_210";
"*_211";
"*accum_212";
"*_213";
"*carry_303";
"*_214";
"*accum_215";
"*_216";
"*_217";
"*_218";
"*carry_310";
"*_219";
"*j_85";
"*j_54";
"*j_43";
"*carry_100";
"*carry_304";
"*_44";
"*_221";
"*i_220";
"*_222";
"*accum_224";
"*_225";
"*accum_226";
"*_227";
"*carry_305";
"*accum_228";
"*accum_229";
"*carry_311";
"*i_230";
"*_45";
"*_47";
"*_48";
"*_49";
"*_50";
"*_51";
"*choose_nan";
"*_231";
"*_232";
"*RoundInternalFPF.part.1";

  // Edges in the constraint graph:
"x" -> "ESCAPED";
"y" -> "ESCAPED";
"z" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"*x" -> "_1";
"_1" -> "_2";
"_2" -> "_3";
"*y" -> "_4";
"_4" -> "_5";
"_3" -> "_6";
"_5" -> "_6";
"i_110" -> "i_110";
"i_110" -> "i_110";
"i_111" -> "_112";
"i_111" -> "i_111";
"i_111" -> "i_111";
"_112" -> "_113";
"*_114" -> "_115";
"_115" -> "_116";
"_116" -> "n_118";
"n_118" -> "n_118";
"n_118" -> "n_118";
"n_118" -> "n_120";
"_121" -> "_122";
"_122" -> "_285";
"_122" -> "_8";
"i_124" -> "i_124";
"i_124" -> "i_124";
"_9" -> "_11";
"_10" -> "_11";
"_11" -> "_12";
"i_127" -> "i_127";
"i_127" -> "i_127";
"i_128" -> "_129";
"i_128" -> "i_128";
"i_128" -> "i_128";
"_129" -> "_130";
"*_131" -> "_132";
"_132" -> "_133";
"_133" -> "n_135";
"n_135" -> "n_135";
"n_135" -> "n_135";
"n_135" -> "n_137";
"_138" -> "_139";
"_139" -> "_273";
"_139" -> "_14";
"i_141" -> "i_141";
"i_141" -> "i_141";
"i_143" -> "i_143";
"i_143" -> "i_143";
"_15" -> "_17";
"_16" -> "_17";
"x" -> "CALLUSED(87)";
"NONLOCAL" -> "_70";
"CALLUSED(87)" -> "_70";
"x" -> "_92";
"y" -> "CALLUSED(92)";
"NONLOCAL" -> "_69";
"CALLUSED(92)" -> "_69";
"y" -> "_95";
"_108" -> "_248";
"i_144" -> "_145";
"i_144" -> "i_144";
"i_144" -> "i_144";
"_145" -> "_146";
"*_147" -> "_148";
"_148" -> "_149";
"_149" -> "n_151";
"n_151" -> "n_151";
"n_151" -> "n_151";
"n_151" -> "n_153";
"_154" -> "_155";
"_155" -> "_249";
"_155" -> "_18";
"i_156" -> "_157";
"i_156" -> "i_156";
"i_156" -> "i_156";
"_157" -> "_158";
"*_159" -> "_160";
"_160" -> "_161";
"_161" -> "n_163";
"n_163" -> "n_163";
"n_163" -> "n_163";
"n_163" -> "n_165";
"_166" -> "_167";
"_167" -> "_263";
"_167" -> "_20";
"i_169" -> "i_169";
"i_169" -> "i_169";
"i_171" -> "i_171";
"i_171" -> "i_171";
"i_172" -> "_173";
"i_172" -> "i_172";
"i_172" -> "i_172";
"_173" -> "_174";
"*_175" -> "_176";
"_176" -> "_177";
"_177" -> "n_179";
"n_179" -> "n_179";
"n_179" -> "n_179";
"n_179" -> "n_181";
"_182" -> "_183";
"_183" -> "_250";
"_183" -> "_22";
"i_185" -> "i_185";
"i_185" -> "i_185";
"*x" -> "_23";
"_24" -> "_26";
"_25" -> "_26";
"_27" -> "_28";
"_29" -> "_30";
"_28" -> "_31";
"_30" -> "_31";
"_31" -> "_32";
"_32" -> "_33";
"extra_bits" -> "extra_bits";
"extra_bits" -> "extra_bits";
"extra_bits" -> "extra_bits";
"_211" -> "extra_bits";
"extra_bits" -> "extra_bits";
"_214" -> "extra_bits";
"extra_bits" -> "extra_bits";
"extra_bits" -> "extra_bits";
"i_90" -> "i_90";
"i_90" -> "i_90";
"i_197" -> "_198";
"i_197" -> "i_197";
"i_197" -> "i_197";
"_198" -> "_199";
"accum_201" -> "accum_201";
"accum_201" -> "accum_201";
"accum_201" -> "accum_201";
"accum_201" -> "accum_201";
"accum_201" -> "accum_201";
"carry_301" -> "_204";
"carry_313" -> "carry_301";
"_202" -> "carry_313";
"i_186" -> "_187";
"i_186" -> "i_186";
"i_186" -> "i_186";
"_187" -> "_188";
"accum_190" -> "accum_190";
"accum_190" -> "accum_190";
"accum_190" -> "accum_190";
"accum_190" -> "accum_190";
"accum_190" -> "accum_190";
"carry_302" -> "_193";
"carry_301" -> "carry_302";
"carry_312" -> "carry_302";
"_191" -> "carry_312";
"carry_302" -> "carry.0_34";
"extra_bits" -> "_36";
"extra_bits" -> "_38";
"j_79" -> "j_79";
"j_79" -> "j_79";
"_39" -> "_40";
"extra_bits" -> "_42";
"_39" -> "_211";
"carry_303" -> "_213";
"carry_310" -> "carry_303";
"carry_100" -> "carry_303";
"carry_303" -> "_214";
"extra_bits" -> "_216";
"_216" -> "_217";
"_218" -> "carry_310";
"j_85" -> "j_85";
"j_85" -> "j_85";
"j_43" -> "j_85";
"i_220" -> "_221";
"i_220" -> "i_220";
"i_220" -> "i_220";
"_221" -> "_222";
"accum_224" -> "accum_224";
"accum_224" -> "accum_224";
"accum_224" -> "accum_224";
"accum_224" -> "accum_224";
"accum_224" -> "accum_224";
"carry_305" -> "_227";
"carry_304" -> "carry_305";
"carry_311" -> "carry_305";
"_225" -> "carry_311";
"_45" -> "_47";
"_47" -> "_48";
"_48" -> "_49";
"_50" -> "_51";
"*z" -> "_231";
"_231" -> "_232";
"NONLOCAL" -> "*ESCAPED";
"derefaddrtmp(17)" -> "*z";
"derefaddrtmp(39)" -> "*z";
"derefaddrtmp(50)" -> "*z";
"derefaddrtmp(70)" -> "*z";
"derefaddrtmp(77)" -> "*z";
"derefaddrtmp(129)" -> "*z";
"derefaddrtmp(136)" -> "*z";
"derefaddrtmp(157)" -> "*z";
"_23" -> "*z";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"x" [label="\N\n_1 = *x\l_4 = *x\l_7 = x + UNKNOWN\l_9 = *x + 8\l_10 = *x + 8\l_13 = x + UNKNOWN\l_15 = *x + 8\l_16 = *x + 8\ldoubledereftmp(91) = *x + UNKNOWN\ldoubledereftmp(96) = *x + UNKNOWN\llocx = *x + UNKNOWN\l_19 = x + UNKNOWN\l_21 = x + UNKNOWN\l_24 = *x + 8\l_25 = *x + 8\l_27 = *x + 16\l_29 = *x + 16\l_35 = *x + UNKNOWN\l_37 = *x + UNKNOWN\l_39 = *x + UNKNOWN\l_44 = x + UNKNOWN\l_45 = *x + 16\l_50 = *x + 32\l_231 = *x\l*x + UNKNOWN = derefaddrtmp(21)\l*x + UNKNOWN = doubledereftmp(91)\l*x + UNKNOWN = doubledereftmp(96)\l*x = x\l*x = _1\l*x = derefaddrtmp(21)\l*x + 8 = x\l*x + 8 = derefaddrtmp(21)\l*x + 8 = _11\l*x + 8 = _17\l*x + 8 = _26\l*x + 16 = x\l*x + 16 = _32\l*x + 16 = _48\l*x + 32 = x\l"];
"_1";
"_3";
"_4";
"_6";
"derefaddrtmp(21)";
"_7" [label="\N\n_114 = _7 + UNKNOWN\l"];
"_112";
"_114" [label="\N\n_115 = *_114\l"];
"_115";
"n_118";
"_121";
"_122";
"_285";
"_8";
"_9";
"_10";
"_11";
"_13" [label="\N\n_131 = _13 + UNKNOWN\l"];
"_131" [label="\N\n_132 = *_131\l"];
"_132";
"n_135";
"_138";
"_139";
"_273";
"_14";
"_15";
"_16";
"_17";
"__builtin_object_size";
"CALLUSED(87)" [label="\N\nCALLUSED(87) = CALLUSED(87) + UNKNOWN\lCALLUSED(87) = *CALLUSED(87) + UNKNOWN\l"];
"CALLCLOBBERED(88)";
"_70";
"doubledereftmp(91)";
"CALLUSED(92)" [label="\N\nCALLUSED(92) = CALLUSED(92) + UNKNOWN\lCALLUSED(92) = *CALLUSED(92) + UNKNOWN\l"];
"CALLCLOBBERED(93)";
"_69";
"doubledereftmp(96)";
"_108" [label="\N\n_148 = *_108\laccum_201 = *_108\l*_108 = accum_201\l"];
"locx";
"_148";
"n_151";
"_154";
"_155";
"_249";
"_18";
"_19" [label="\N\n_159 = _19 + UNKNOWN\l"];
"_159" [label="\N\n_160 = *_159\l"];
"_160";
"n_163";
"_166";
"_167";
"_263";
"_20";
"_21" [label="\N\n_175 = _21 + UNKNOWN\l"];
"_175" [label="\N\n_176 = *_175\l"];
"_176";
"n_179";
"_182";
"_183";
"_250";
"_22";
"_24";
"_25";
"_26";
"_27";
"_29";
"_31";
"_32";
"accum_201" [label="\N\n_202 = accum_201 + UNKNOWN\l"];
"_202";
"_204";
"_189" [label="\N\naccum_190 = *_189\l*_189 = accum_190\l"];
"accum_190" [label="\N\n_191 = accum_190 + UNKNOWN\l"];
"_191";
"_193";
"_35";
"_36";
"_37";
"_39";
"_213";
"_216" [label="\N\n_218 = _216 + UNKNOWN\l"];
"_218";
"_44" [label="\N\n_223 = _44 + UNKNOWN\l"];
"_223" [label="\N\naccum_224 = *_223\l*_223 = accum_224\l"];
"accum_224" [label="\N\n_225 = accum_224 + UNKNOWN\l"];
"_225";
"_227";
"_45";
"_48";
"_50";
"choose_nan";
"_231";
"RoundInternalFPF.part.1";

  // Edges in the constraint graph:
"NONLOCAL" -> "_70";
"NONLOCAL" -> "_69";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_114";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_10";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_131";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "CALLUSED(87)";
"STOREDANYTHING" -> "doubledereftmp(91)";
"STOREDANYTHING" -> "CALLUSED(92)";
"STOREDANYTHING" -> "doubledereftmp(96)";
"STOREDANYTHING" -> "locx";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "_159";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "_175";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_27";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "accum_201";
"STOREDANYTHING" -> "_202";
"STOREDANYTHING" -> "accum_190";
"STOREDANYTHING" -> "_191";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_37";
"STOREDANYTHING" -> "_39";
"STOREDANYTHING" -> "_218";
"STOREDANYTHING" -> "_44";
"STOREDANYTHING" -> "_223";
"STOREDANYTHING" -> "accum_224";
"STOREDANYTHING" -> "_225";
"STOREDANYTHING" -> "_45";
"STOREDANYTHING" -> "_50";
"x" -> "ESCAPED";
"x" -> "CALLUSED(87)";
"x" -> "CALLUSED(92)";
"_1" -> "_3";
"_3" -> "_6";
"_4" -> "_6";
"derefaddrtmp(21)" -> "_213";
"_112" -> "_227";
"_115" -> "n_118";
"_9" -> "_11";
"_10" -> "_11";
"_132" -> "n_135";
"_15" -> "_17";
"_16" -> "_17";
"CALLUSED(87)" -> "_70";
"CALLUSED(92)" -> "_69";
"_148" -> "n_151";
"_160" -> "n_163";
"_176" -> "n_179";
"_24" -> "_26";
"_25" -> "_26";
"_27" -> "_31";
"_29" -> "_31";
"_31" -> "_32";
"_202" -> "_204";
"_204" -> "_193";
"_191" -> "_193";
"_36" -> "_216";
"_39" -> "_36";
"_213" -> "_36";
"_218" -> "_213";
"_225" -> "_227";
"_45" -> "_48";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _1\l"];
"STOREDANYTHING";
"INTEGER";
"x" [label="\N\n_1 = *x\l_4 = *x\l_7 = x + UNKNOWN\l_9 = *x + 8\l_10 = *x + 8\l_13 = x + UNKNOWN\l_15 = *x + 8\l_16 = *x + 8\ldoubledereftmp(91) = *x + UNKNOWN\ldoubledereftmp(96) = *x + UNKNOWN\laccum_201 = *x + UNKNOWN\l_19 = x + UNKNOWN\l_21 = x + UNKNOWN\l_24 = *x + 8\l_25 = *x + 8\l_27 = *x + 16\l_29 = *x + 16\l_35 = *x + UNKNOWN\l_37 = *x + UNKNOWN\l_39 = *x + UNKNOWN\l_44 = x + UNKNOWN\l_45 = *x + 16\l_50 = *x + 32\l_231 = *x\l*x + UNKNOWN = derefaddrtmp(21)\l*x + UNKNOWN = doubledereftmp(91)\l*x + UNKNOWN = doubledereftmp(96)\l*x = x\l*x = _1\l*x = derefaddrtmp(21)\l*x + 8 = x\l*x + 8 = derefaddrtmp(21)\l*x + 8 = _11\l*x + 8 = _17\l*x + 8 = _26\l*x + 16 = x\l*x + 16 = _32\l*x + 16 = _48\l*x + 32 = x\l"];
"_1";
"_3";
"_4";
"_6";
"derefaddrtmp(21)";
"_7" [label="\N\n_114 = _7 + UNKNOWN\l"];
"_112";
"_114" [label="\N\n_115 = *_114\l"];
"_115";
"n_118";
"_121";
"_122";
"_285";
"_8";
"_9";
"_10";
"_11";
"_13" [label="\N\n_131 = _13 + UNKNOWN\l"];
"_131" [label="\N\n_132 = *_131\l"];
"_132";
"n_135";
"_138";
"_139";
"_273";
"_14";
"_15";
"_16";
"_17";
"__builtin_object_size";
"CALLUSED(87)" [label="\N\nCALLUSED(87) = CALLUSED(87) + UNKNOWN\lCALLUSED(87) = *CALLUSED(87) + UNKNOWN\l"];
"CALLCLOBBERED(88)";
"_70";
"doubledereftmp(91)";
"CALLUSED(92)" [label="\N\nCALLUSED(92) = CALLUSED(92) + UNKNOWN\lCALLUSED(92) = *CALLUSED(92) + UNKNOWN\l"];
"CALLCLOBBERED(93)";
"_69";
"doubledereftmp(96)";
"_108" [label="\N\n_148 = *_108\laccum_201 = *_108\l*_108 = accum_201\l"];
"_148";
"n_151";
"_154";
"_155";
"_249";
"_18";
"_19" [label="\N\n_159 = _19 + UNKNOWN\l"];
"_159" [label="\N\n_160 = *_159\l"];
"_160";
"n_163";
"_166";
"_167";
"_263";
"_20";
"_21" [label="\N\n_175 = _21 + UNKNOWN\l"];
"_175" [label="\N\n_176 = *_175\l"];
"_176";
"n_179";
"_182";
"_183";
"_250";
"_22";
"_24";
"_25";
"_26";
"_27";
"_29";
"_31";
"_32";
"accum_201" [label="\N\n_202 = accum_201 + UNKNOWN\l"];
"_202";
"_204";
"_189" [label="\N\naccum_190 = *_189\l*_189 = accum_190\l"];
"accum_190" [label="\N\n_191 = accum_190 + UNKNOWN\l"];
"_191";
"_193";
"_35";
"_36";
"_37";
"_39";
"_213";
"_216" [label="\N\n_218 = _216 + UNKNOWN\l"];
"_218";
"_44" [label="\N\n_223 = _44 + UNKNOWN\l"];
"_223" [label="\N\naccum_224 = *_223\l*_223 = accum_224\l"];
"accum_224" [label="\N\n_225 = accum_224 + UNKNOWN\l"];
"_225";
"_227";
"_45";
"_48";
"_50";
"choose_nan";
"_231";
"RoundInternalFPF.part.1";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_114";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_10";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_131";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "CALLUSED(87)";
"STOREDANYTHING" -> "doubledereftmp(91)";
"STOREDANYTHING" -> "CALLUSED(92)";
"STOREDANYTHING" -> "doubledereftmp(96)";
"STOREDANYTHING" -> "accum_201";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "_159";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "_175";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_27";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "accum_201";
"STOREDANYTHING" -> "_202";
"STOREDANYTHING" -> "accum_190";
"STOREDANYTHING" -> "_191";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_37";
"STOREDANYTHING" -> "_39";
"STOREDANYTHING" -> "_218";
"STOREDANYTHING" -> "_44";
"STOREDANYTHING" -> "_223";
"STOREDANYTHING" -> "accum_224";
"STOREDANYTHING" -> "_225";
"STOREDANYTHING" -> "_45";
"STOREDANYTHING" -> "_50";
"x" -> "ESCAPED";
"x" -> "CALLUSED(87)";
"x" -> "CALLUSED(92)";
"_1" -> "ESCAPED";
"_1" -> "_3";
"_1" -> "_4";
"_1" -> "_115";
"_1" -> "_9";
"_1" -> "_10";
"_1" -> "_132";
"_1" -> "_15";
"_1" -> "_16";
"_1" -> "CALLUSED(87)";
"_1" -> "_70";
"_1" -> "doubledereftmp(91)";
"_1" -> "CALLUSED(92)";
"_1" -> "_69";
"_1" -> "doubledereftmp(96)";
"_1" -> "_160";
"_1" -> "_176";
"_1" -> "_24";
"_1" -> "_25";
"_1" -> "_27";
"_1" -> "_29";
"_1" -> "accum_201";
"_1" -> "_35";
"_1" -> "_37";
"_1" -> "_39";
"_1" -> "accum_224";
"_1" -> "_45";
"_1" -> "_50";
"_1" -> "_231";
"_3" -> "_6";
"_4" -> "_6";
"derefaddrtmp(21)" -> "ESCAPED";
"derefaddrtmp(21)" -> "_213";
"_112" -> "_227";
"_115" -> "n_118";
"_9" -> "_11";
"_10" -> "_11";
"_11" -> "ESCAPED";
"_132" -> "n_135";
"_15" -> "_17";
"_16" -> "_17";
"_17" -> "ESCAPED";
"CALLUSED(87)" -> "_70";
"doubledereftmp(91)" -> "ESCAPED";
"CALLUSED(92)" -> "_69";
"doubledereftmp(96)" -> "ESCAPED";
"_148" -> "n_151";
"_160" -> "n_163";
"_176" -> "n_179";
"_24" -> "_26";
"_25" -> "_26";
"_26" -> "ESCAPED";
"_27" -> "_31";
"_29" -> "_31";
"_31" -> "_32";
"_32" -> "ESCAPED";
"accum_201" -> "_148";
"_202" -> "_204";
"_204" -> "_193";
"accum_190" -> "_36";
"_191" -> "_193";
"_36" -> "accum_190";
"_36" -> "_216";
"_39" -> "_36";
"_213" -> "_36";
"_218" -> "_213";
"accum_224" -> "ESCAPED";
"_225" -> "_227";
"_45" -> "_48";
"_48" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
x = { NONLOCAL }
y = { NONLOCAL } same as x
z = { NONLOCAL } same as x
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _4
_6 = { ESCAPED NONLOCAL }
derefaddrtmp(17) = { NONLOCAL } same as x
derefaddrtmp(18) = { NONLOCAL } same as x
derefaddrtmp(19) = { NONLOCAL } same as x
derefaddrtmp(20) = { NONLOCAL } same as x
derefaddrtmp(21) = { NULL }
i_110 = { NONLOCAL } same as x
i_109 = { NONLOCAL } same as x
_7 = { NONLOCAL }
_112 = { NULL NONLOCAL }
i_111 = { NULL NONLOCAL } same as _112
_113 = { NULL NONLOCAL } same as _112
_114 = { NONLOCAL }
_115 = { ESCAPED NONLOCAL }
_116 = { ESCAPED NONLOCAL } same as _115
n_118 = { NULL ESCAPED NONLOCAL }
n_117 = { NULL ESCAPED NONLOCAL } same as n_118
i_119 = { NULL NONLOCAL } same as _112
n_120 = { NULL ESCAPED NONLOCAL } same as n_118
_121 = { }
_122 = { }
_285 = { }
_8 = { }
derefaddrtmp(39) = { NONLOCAL } same as x
derefaddrtmp(40) = { NONLOCAL } same as x
derefaddrtmp(41) = { NONLOCAL } same as x
derefaddrtmp(42) = { NONLOCAL } same as x
derefaddrtmp(43) = { NULL } same as derefaddrtmp(21)
i_124 = { NONLOCAL } same as x
i_123 = { NONLOCAL } same as x
_9 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL } same as _11
derefaddrtmp(50) = { NULL } same as derefaddrtmp(21)
derefaddrtmp(51) = { NONLOCAL } same as x
derefaddrtmp(52) = { NULL } same as derefaddrtmp(21)
i_127 = { NULL NONLOCAL } same as _112
i_126 = { NULL NONLOCAL } same as _112
_13 = { NONLOCAL }
_129 = { NULL NONLOCAL } same as _112
i_128 = { NULL NONLOCAL } same as _112
_130 = { NULL NONLOCAL } same as _112
_131 = { NONLOCAL }
_132 = { ESCAPED NONLOCAL }
_133 = { ESCAPED NONLOCAL } same as _132
n_135 = { NULL ESCAPED NONLOCAL }
n_134 = { NULL ESCAPED NONLOCAL } same as n_135
i_136 = { NULL NONLOCAL } same as _112
n_137 = { NULL ESCAPED NONLOCAL } same as n_135
_138 = { }
_139 = { }
_273 = { }
_14 = { }
derefaddrtmp(70) = { NONLOCAL } same as x
derefaddrtmp(71) = { NONLOCAL } same as x
derefaddrtmp(72) = { NONLOCAL } same as x
derefaddrtmp(73) = { NONLOCAL } same as x
derefaddrtmp(74) = { NULL } same as derefaddrtmp(21)
i_141 = { NONLOCAL } same as x
i_140 = { NONLOCAL } same as x
derefaddrtmp(77) = { NONLOCAL } same as x
derefaddrtmp(78) = { NULL } same as derefaddrtmp(21)
derefaddrtmp(79) = { NONLOCAL } same as x
derefaddrtmp(80) = { NULL } same as derefaddrtmp(21)
i_143 = { NULL NONLOCAL } same as _112
i_142 = { NULL NONLOCAL } same as _112
_15 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL }
__builtin_object_size = { }
CALLUSED(87) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(88) = { }
_70 = { NULL ESCAPED NONLOCAL }
_92 = { NONLOCAL } same as x
doubledereftmp(91) = { ESCAPED NONLOCAL }
CALLUSED(92) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(93) = { }
_69 = { NULL ESCAPED NONLOCAL }
_95 = { NONLOCAL } same as x
doubledereftmp(96) = { ESCAPED NONLOCAL }
_108 = { locx }
locx = { ESCAPED NONLOCAL } same as accum_201
_248 = { locx } same as _108
_145 = { NULL NONLOCAL } same as _112
i_144 = { NULL NONLOCAL } same as _112
_146 = { NULL NONLOCAL } same as _112
_147 = { locx } same as _108
_148 = { ESCAPED NONLOCAL }
_149 = { ESCAPED NONLOCAL } same as _148
n_151 = { NULL ESCAPED NONLOCAL }
n_150 = { NULL ESCAPED NONLOCAL } same as n_151
i_152 = { NULL NONLOCAL } same as _112
n_153 = { NULL ESCAPED NONLOCAL } same as n_151
_154 = { }
_155 = { }
_249 = { }
_18 = { }
_19 = { NONLOCAL }
_157 = { NULL NONLOCAL } same as _112
i_156 = { NULL NONLOCAL } same as _112
_158 = { NULL NONLOCAL } same as _112
_159 = { NONLOCAL }
_160 = { ESCAPED NONLOCAL }
_161 = { ESCAPED NONLOCAL } same as _160
n_163 = { NULL ESCAPED NONLOCAL }
n_162 = { NULL ESCAPED NONLOCAL } same as n_163
i_164 = { NULL NONLOCAL } same as _112
n_165 = { NULL ESCAPED NONLOCAL } same as n_163
_166 = { }
_167 = { }
_263 = { }
_20 = { }
derefaddrtmp(129) = { NONLOCAL } same as x
derefaddrtmp(130) = { NONLOCAL } same as x
derefaddrtmp(131) = { NONLOCAL } same as x
derefaddrtmp(132) = { NONLOCAL } same as x
derefaddrtmp(133) = { NULL } same as derefaddrtmp(21)
i_169 = { NONLOCAL } same as x
i_168 = { NONLOCAL } same as x
derefaddrtmp(136) = { NULL } same as derefaddrtmp(21)
derefaddrtmp(137) = { NULL } same as derefaddrtmp(21)
derefaddrtmp(138) = { NONLOCAL } same as x
derefaddrtmp(139) = { NULL } same as derefaddrtmp(21)
i_171 = { NULL NONLOCAL } same as _112
i_170 = { NULL NONLOCAL } same as _112
_21 = { NONLOCAL }
_173 = { NULL NONLOCAL } same as _112
i_172 = { NULL NONLOCAL } same as _112
_174 = { NULL NONLOCAL } same as _112
_175 = { NONLOCAL }
_176 = { ESCAPED NONLOCAL }
_177 = { ESCAPED NONLOCAL } same as _176
n_179 = { NULL ESCAPED NONLOCAL }
n_178 = { NULL ESCAPED NONLOCAL } same as n_179
i_180 = { NULL NONLOCAL } same as _112
n_181 = { NULL ESCAPED NONLOCAL } same as n_179
_182 = { }
_183 = { }
_250 = { }
_22 = { }
derefaddrtmp(157) = { NONLOCAL } same as x
derefaddrtmp(158) = { NULL } same as derefaddrtmp(21)
derefaddrtmp(159) = { NONLOCAL } same as x
derefaddrtmp(160) = { NULL } same as derefaddrtmp(21)
i_185 = { NULL NONLOCAL } same as _112
i_184 = { NULL NONLOCAL } same as _112
_23 = { ESCAPED NONLOCAL } same as _1
_24 = { ESCAPED NONLOCAL }
_25 = { ESCAPED NONLOCAL }
_26 = { ESCAPED NONLOCAL }
_27 = { ESCAPED NONLOCAL }
_28 = { ESCAPED NONLOCAL } same as _27
_29 = { ESCAPED NONLOCAL }
_30 = { ESCAPED NONLOCAL } same as _29
_31 = { ESCAPED NONLOCAL }
_32 = { ESCAPED NONLOCAL }
_33 = { ESCAPED NONLOCAL } same as _32
derefaddrtmp(174) = { NULL } same as derefaddrtmp(21)
extra_bits = { NULL ESCAPED NONLOCAL } same as _36
i_90 = { NULL NONLOCAL } same as _112
i_52 = { NULL NONLOCAL } same as _112
_198 = { NONLOCAL } same as x
i_197 = { NONLOCAL } same as x
_199 = { NONLOCAL } same as x
_200 = { locx } same as _108
accum_201 = { ESCAPED NONLOCAL }
_202 = { ESCAPED NONLOCAL }
accum_203 = { ESCAPED NONLOCAL } same as accum_201
_204 = { NULL ESCAPED NONLOCAL }
carry_301 = { NULL ESCAPED NONLOCAL } same as _204
accum_205 = { ESCAPED NONLOCAL } same as accum_201
accum_206 = { ESCAPED NONLOCAL } same as accum_201
carry_313 = { ESCAPED NONLOCAL } same as _202
i_207 = { NONLOCAL } same as x
_187 = { NONLOCAL } same as x
i_186 = { NONLOCAL } same as x
_188 = { NONLOCAL } same as x
_189 = { extra_bits }
accum_190 = { NULL ESCAPED NONLOCAL }
_191 = { NULL ESCAPED NONLOCAL }
accum_192 = { NULL ESCAPED NONLOCAL } same as accum_190
_193 = { NULL ESCAPED NONLOCAL }
carry_302 = { NULL ESCAPED NONLOCAL } same as _193
accum_194 = { NULL ESCAPED NONLOCAL } same as accum_190
accum_195 = { NULL ESCAPED NONLOCAL } same as accum_190
carry_312 = { NULL ESCAPED NONLOCAL } same as _191
i_196 = { NONLOCAL } same as x
carry.0_34 = { NULL ESCAPED NONLOCAL } same as _193
_35 = { ESCAPED NONLOCAL }
_36 = { NULL ESCAPED NONLOCAL }
_37 = { ESCAPED NONLOCAL }
_38 = { NULL ESCAPED NONLOCAL } same as _36
j_79 = { NULL NONLOCAL } same as _112
j_53 = { NULL NONLOCAL } same as _112
_39 = { ESCAPED NONLOCAL }
_40 = { ESCAPED NONLOCAL } same as _39
_41 = { NULL ESCAPED NONLOCAL } same as _36
_42 = { NULL ESCAPED NONLOCAL } same as _36
accum_210 = { NULL ESCAPED NONLOCAL } same as _36
_211 = { ESCAPED NONLOCAL } same as _39
accum_212 = { NULL ESCAPED NONLOCAL } same as _36
_213 = { NULL ESCAPED NONLOCAL }
carry_303 = { NULL ESCAPED NONLOCAL } same as _213
_214 = { NULL ESCAPED NONLOCAL } same as _213
accum_215 = { NULL ESCAPED NONLOCAL } same as _36
_216 = { NULL ESCAPED NONLOCAL }
_217 = { NULL ESCAPED NONLOCAL } same as _216
_218 = { NULL ESCAPED NONLOCAL }
carry_310 = { NULL ESCAPED NONLOCAL } same as _218
_219 = { NULL ESCAPED NONLOCAL } same as _36
j_85 = { NONLOCAL } same as x
j_54 = { NONLOCAL } same as x
j_43 = { NONLOCAL } same as x
carry_100 = { NULL } same as derefaddrtmp(21)
carry_304 = { NULL NONLOCAL } same as _112
_44 = { NONLOCAL }
_221 = { NONLOCAL } same as x
i_220 = { NONLOCAL } same as x
_222 = { NONLOCAL } same as x
_223 = { NONLOCAL }
accum_224 = { ESCAPED NONLOCAL }
_225 = { ESCAPED NONLOCAL }
accum_226 = { ESCAPED NONLOCAL } same as accum_224
_227 = { NULL ESCAPED NONLOCAL }
carry_305 = { NULL ESCAPED NONLOCAL } same as _227
accum_228 = { ESCAPED NONLOCAL } same as accum_224
accum_229 = { ESCAPED NONLOCAL } same as accum_224
carry_311 = { ESCAPED NONLOCAL } same as _225
i_230 = { NONLOCAL } same as x
_45 = { ESCAPED NONLOCAL }
_47 = { ESCAPED NONLOCAL } same as _45
_48 = { ESCAPED NONLOCAL }
_49 = { ESCAPED NONLOCAL } same as _48
_50 = { ESCAPED NONLOCAL }
_51 = { ESCAPED NONLOCAL } same as _50
choose_nan = { }
_231 = { ESCAPED NONLOCAL }
_232 = { ESCAPED NONLOCAL } same as _231
RoundInternalFPF.part.1 = { }


Alias information for DivideInternalFPF

Aliased symbols

locx, UID D.3079, struct InternalFPF, is addressable
extra_bits, UID D.3078, short unsigned int[4], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_7, points-to non-local, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to NULL, points-to vars: { }
_19, points-to non-local, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to NULL, points-to vars: { }
_44, points-to non-local, points-to NULL, points-to vars: { }
x_63(D), points-to non-local, points-to NULL, points-to vars: { }
y_64(D), points-to non-local, points-to NULL, points-to vars: { }
z_65(D), points-to non-local, points-to NULL, points-to vars: { }
_92, points-to non-local, points-to NULL, points-to vars: { }
_95, points-to non-local, points-to NULL, points-to vars: { }
_108, points-to NULL, points-to vars: { D.3079 }
_114, points-to non-local, points-to NULL, points-to vars: { }
_131, points-to non-local, points-to NULL, points-to vars: { }
_147, points-to NULL, points-to vars: { D.3079 }
_159, points-to non-local, points-to NULL, points-to vars: { }
_175, points-to non-local, points-to NULL, points-to vars: { }
_189, points-to NULL, points-to vars: { D.3078 }
_200, points-to NULL, points-to vars: { D.3079 }
_223, points-to non-local, points-to NULL, points-to vars: { }
_248, points-to NULL, points-to vars: { D.3079 }

DivideInternalFPF (struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  int i;
  short unsigned int accum;
  unsigned int accum;
  short unsigned int b;
  short unsigned int c;
  int i;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  int i;
  int n;
  int D.3388;
  int i;
  int i;
  int i;
  int n;
  int D.3379;
  int i;
  int n;
  int D.3375;
  int i;
  int i;
  int i;
  int n;
  int D.3366;
  int i;
  unsigned char sign;
  int i;
  int i;
  int n;
  int D.3357;
  int i;
  void * D.3351;
  void * D.3347;
  void * D.3343;
  struct InternalFPF locx;
  short unsigned int extra_bits[4];
  short unsigned int carry;
  int j;
  int i;
  unsigned char _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  short unsigned int[4] * _7;
  int _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  int _12;
  short unsigned int[4] * _13;
  int _14;
  unsigned char _15;
  unsigned char _16;
  unsigned char _17;
  int _18;
  short unsigned int[4] * _19;
  int _20;
  short unsigned int[4] * _21;
  int _22;
  unsigned char _23;
  unsigned char _24;
  unsigned char _25;
  unsigned char _26;
  short int _27;
  unsigned short _28;
  short int _29;
  unsigned short _30;
  unsigned short _31;
  unsigned short _32;
  short int _33;
  short unsigned int carry.0_34;
  short unsigned int _35;
  short unsigned int _36;
  short unsigned int _37;
  short unsigned int _38;
  short unsigned int _39;
  int _40;
  short unsigned int _41;
  int _42;
  short unsigned int[4] * _44;
  short int _45;
  unsigned short _47;
  unsigned short _48;
  short int _49;
  short unsigned int _50;
  signed short _51;
  long unsigned int _69;
  long unsigned int _70;
  void * _92;
  void * _95;
  void * _108;
  long unsigned int _112;
  long unsigned int _113;
  short unsigned int * _114;
  short unsigned int _115;
  int _116;
  _Bool _121;
  int _122;
  long unsigned int _129;
  long unsigned int _130;
  short unsigned int * _131;
  short unsigned int _132;
  int _133;
  _Bool _138;
  int _139;
  long unsigned int _145;
  long unsigned int _146;
  short unsigned int * _147;
  short unsigned int _148;
  int _149;
  _Bool _154;
  int _155;
  long unsigned int _157;
  long unsigned int _158;
  short unsigned int * _159;
  short unsigned int _160;
  int _161;
  _Bool _166;
  int _167;
  long unsigned int _173;
  long unsigned int _174;
  short unsigned int * _175;
  short unsigned int _176;
  int _177;
  _Bool _182;
  int _183;
  long unsigned int _187;
  long unsigned int _188;
  short unsigned int * _189;
  short unsigned int _191;
  short unsigned int _193;
  long unsigned int _198;
  long unsigned int _199;
  short unsigned int * _200;
  short unsigned int _202;
  short unsigned int _204;
  unsigned int _211;
  short unsigned int _213;
  unsigned int _214;
  unsigned int _216;
  short unsigned int _217;
  short unsigned int _218;
  short unsigned int _219;
  long unsigned int _221;
  long unsigned int _222;
  short unsigned int * _223;
  short unsigned int _225;
  short unsigned int _227;
  unsigned char _231;
  unsigned char _232;

  <bb 2> [0.00%]:
  _1 = x_63(D)->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y_64(D)->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L54> [0.00%], case 0: <L56> [0.00%], case 1 ... 2: <L2> [0.00%], case 3: <L5> [0.00%], case 4: <L58> [0.00%], case 5: <L9> [0.00%], case 6 ... 7: <L59> [0.00%], case 8: <L5> [0.00%], case 9: <L58> [0.00%], case 10: <L9> [0.00%], case 11 ... 12: <L59> [0.00%], case 13: <L5> [0.00%], case 14: <L58> [0.00%], case 15 ... 17: <L12> [0.00%], case 18: <L56> [0.00%], case 19: <L58> [0.00%], case 20 ... 23: <L57> [0.00%], case 24: <L53> [0.00%]>

<L56> [25.00%]:
  z_65(D)->type = 4;
  z_65(D)->exp = 32767;
  z_65(D)->sign = 1;
  z_65(D)->mantissa[0] = 16384;
  goto <bb 5>; [100.00%]

  <bb 4> [75.00%]:
  z_65(D)->mantissa[i_109] = 0;
  i_110 = i_109 + 1;

  <bb 5> [100.00%]:
  # i_109 = PHI <1(3), i_110(4)>
  if (i_109 <= 3)
    goto <bb 4>; [75.00%]
  else
    goto <bb 77> (<L54>); [25.00%]

<L2> [20.00%]:
  _7 = &y_64(D)->mantissa;
  goto <bb 8>; [100.00%]

  <bb 7> [80.00%]:
  _112 = (long unsigned int) i_111;
  _113 = _112 * 2;
  _114 = _7 + _113;
  _115 = *_114;
  _116 = (int) _115;
  n_118 = _116 | n_117;
  i_119 = i_111 + 1;

  <bb 8> [100.00%]:
  # i_111 = PHI <0(6), i_119(7)>
  # n_117 = PHI <0(6), n_118(7)>
  if (i_111 <= 3)
    goto <bb 7>; [80.00%]
  else
    goto <bb 9>; [20.00%]

  <bb 9> [20.00%]:
  # n_120 = PHI <n_117(8)>
  _121 = n_117 == 0;
  _122 = (int) _121;
  _285 = _122;
  _8 = _122;
  if (n_117 == 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 13> (<L5>); [0.00%]

  <bb 10> [25.00%]:
  z_65(D)->type = 4;
  z_65(D)->exp = 32767;
  z_65(D)->sign = 1;
  z_65(D)->mantissa[0] = 16384;
  goto <bb 12>; [100.00%]

  <bb 11> [75.00%]:
  z_65(D)->mantissa[i_123] = 0;
  i_124 = i_123 + 1;

  <bb 12> [100.00%]:
  # i_123 = PHI <1(10), i_124(11)>
  if (i_123 <= 3)
    goto <bb 11>; [75.00%]
  else
    goto <bb 77> (<L54>); [25.00%]

<L5> [20.00%]:
  _9 = x_63(D)->sign;
  _10 = y_64(D)->sign;
  _11 = _9 ^ _10;
  _12 = (int) _11;
  z_65(D)->type = 0;
  z_65(D)->sign = _11;
  z_65(D)->exp = -32767;
  goto <bb 15>; [100.00%]

  <bb 14> [80.00%]:
  z_65(D)->mantissa[i_126] = 0;
  i_127 = i_126 + 1;

  <bb 15> [100.00%]:
  # i_126 = PHI <0(13), i_127(14)>
  if (i_126 <= 3)
    goto <bb 14>; [80.00%]
  else
    goto <bb 77> (<L54>); [20.00%]

<L9> [20.00%]:
  _13 = &x_63(D)->mantissa;
  goto <bb 18>; [100.00%]

  <bb 17> [80.00%]:
  _129 = (long unsigned int) i_128;
  _130 = _129 * 2;
  _131 = _13 + _130;
  _132 = *_131;
  _133 = (int) _132;
  n_135 = _133 | n_134;
  i_136 = i_128 + 1;

  <bb 18> [100.00%]:
  # i_128 = PHI <0(16), i_136(17)>
  # n_134 = PHI <0(16), n_135(17)>
  if (i_128 <= 3)
    goto <bb 17>; [80.00%]
  else
    goto <bb 19>; [20.00%]

  <bb 19> [20.00%]:
  # n_137 = PHI <n_134(18)>
  _138 = n_134 == 0;
  _139 = (int) _138;
  _273 = _139;
  _14 = _139;
  if (n_134 == 0)
    goto <bb 20>; [0.00%]
  else
    goto <bb 23> (<L12>); [0.00%]

  <bb 20> [25.00%]:
  z_65(D)->type = 4;
  z_65(D)->exp = 32767;
  z_65(D)->sign = 1;
  z_65(D)->mantissa[0] = 16384;
  goto <bb 22>; [100.00%]

  <bb 21> [75.00%]:
  z_65(D)->mantissa[i_140] = 0;
  i_141 = i_140 + 1;

  <bb 22> [100.00%]:
  # i_140 = PHI <1(20), i_141(21)>
  if (i_140 <= 3)
    goto <bb 21>; [75.00%]
  else
    goto <bb 77> (<L54>); [25.00%]

<L12> [20.00%]:
  z_65(D)->type = 3;
  z_65(D)->sign = 0;
  z_65(D)->exp = -32767;
  goto <bb 25>; [100.00%]

  <bb 24> [80.00%]:
  z_65(D)->mantissa[i_142] = 0;
  i_143 = i_142 + 1;

  <bb 25> [100.00%]:
  # i_142 = PHI <0(23), i_143(24)>
  if (i_142 <= 3)
    goto <bb 24>; [80.00%]
  else
    goto <bb 26>; [20.00%]

  <bb 26> [0.00%]:
  _15 = x_63(D)->sign;
  _16 = y_64(D)->sign;
  _17 = _15 ^ _16;
  z_65(D)->sign = _17;
  goto <bb 77> (<L54>); [0.00%]

<L57> [100.00%]:
  _70 = __builtin_object_size (x_63(D), 0);
  _92 = __builtin___memmove_chk (x_63(D), z_65(D), 12, _70);
  goto <bb 77> (<L54>); [100.00%]

<L58> [100.00%]:
  _69 = __builtin_object_size (y_64(D), 0);
  _95 = __builtin___memmove_chk (y_64(D), z_65(D), 12, _69);
  goto <bb 77> (<L54>); [100.00%]

<L59> [100.00%]:
  _108 = __builtin_memmove (&locx, x_63(D), 12);
  _248 = _108;
  goto <bb 31>; [100.00%]

  <bb 30> [80.00%]:
  _145 = (long unsigned int) i_144;
  _146 = _145 * 2;
  _147 = &locx.mantissa + _146;
  _148 = *_147;
  _149 = (int) _148;
  n_151 = _149 | n_150;
  i_152 = i_144 + 1;

  <bb 31> [100.00%]:
  # i_144 = PHI <0(29), i_152(30)>
  # n_150 = PHI <0(29), n_151(30)>
  if (i_144 <= 3)
    goto <bb 30>; [80.00%]
  else
    goto <bb 32>; [20.00%]

  <bb 32> [20.00%]:
  # n_153 = PHI <n_150(31)>
  _154 = n_150 == 0;
  _155 = (int) _154;
  _249 = _155;
  _18 = _155;
  if (n_150 == 0)
    goto <bb 33>; [0.00%]
  else
    goto <bb 43>; [0.00%]

  <bb 33> [20.00%]:
  _19 = &y_64(D)->mantissa;
  goto <bb 35>; [100.00%]

  <bb 34> [80.00%]:
  _157 = (long unsigned int) i_156;
  _158 = _157 * 2;
  _159 = _19 + _158;
  _160 = *_159;
  _161 = (int) _160;
  n_163 = _161 | n_162;
  i_164 = i_156 + 1;

  <bb 35> [100.00%]:
  # i_156 = PHI <0(33), i_164(34)>
  # n_162 = PHI <0(33), n_163(34)>
  if (i_156 <= 3)
    goto <bb 34>; [80.00%]
  else
    goto <bb 36>; [20.00%]

  <bb 36> [20.00%]:
  # n_165 = PHI <n_162(35)>
  _166 = n_162 == 0;
  _167 = (int) _166;
  _263 = _167;
  _20 = _167;
  if (n_162 == 0)
    goto <bb 37>; [0.00%]
  else
    goto <bb 40>; [0.00%]

  <bb 37> [25.00%]:
  z_65(D)->type = 4;
  z_65(D)->exp = 32767;
  z_65(D)->sign = 1;
  z_65(D)->mantissa[0] = 16384;
  goto <bb 39>; [100.00%]

  <bb 38> [75.00%]:
  z_65(D)->mantissa[i_168] = 0;
  i_169 = i_168 + 1;

  <bb 39> [100.00%]:
  # i_168 = PHI <1(37), i_169(38)>
  if (i_168 <= 3)
    goto <bb 38>; [75.00%]
  else
    goto <bb 77> (<L54>); [25.00%]

  <bb 40> [20.00%]:
  z_65(D)->type = 0;
  z_65(D)->sign = 0;
  z_65(D)->exp = -32767;
  goto <bb 42>; [100.00%]

  <bb 41> [80.00%]:
  z_65(D)->mantissa[i_170] = 0;
  i_171 = i_170 + 1;

  <bb 42> [100.00%]:
  # i_170 = PHI <0(40), i_171(41)>
  if (i_170 <= 3)
    goto <bb 41>; [80.00%]
  else
    goto <bb 77> (<L54>); [20.00%]

  <bb 43> [20.00%]:
  _21 = &y_64(D)->mantissa;
  goto <bb 45>; [100.00%]

  <bb 44> [80.00%]:
  _173 = (long unsigned int) i_172;
  _174 = _173 * 2;
  _175 = _21 + _174;
  _176 = *_175;
  _177 = (int) _176;
  n_179 = _177 | n_178;
  i_180 = i_172 + 1;

  <bb 45> [100.00%]:
  # i_172 = PHI <0(43), i_180(44)>
  # n_178 = PHI <0(43), n_179(44)>
  if (i_172 <= 3)
    goto <bb 44>; [80.00%]
  else
    goto <bb 46>; [20.00%]

  <bb 46> [20.00%]:
  # n_181 = PHI <n_178(45)>
  _182 = n_178 == 0;
  _183 = (int) _182;
  _250 = _183;
  _22 = _183;
  if (n_178 == 0)
    goto <bb 47>; [0.00%]
  else
    goto <bb 50>; [0.00%]

  <bb 47> [20.00%]:
  z_65(D)->type = 3;
  z_65(D)->sign = 0;
  z_65(D)->exp = -32767;
  goto <bb 49>; [100.00%]

  <bb 48> [80.00%]:
  z_65(D)->mantissa[i_184] = 0;
  i_185 = i_184 + 1;

  <bb 49> [100.00%]:
  # i_184 = PHI <0(47), i_185(48)>
  if (i_184 <= 3)
    goto <bb 48>; [80.00%]
  else
    goto <bb 77> (<L54>); [20.00%]

  <bb 50> [0.00%]:
  _23 = x_63(D)->type;
  z_65(D)->type = _23;
  _24 = x_63(D)->sign;
  _25 = y_64(D)->sign;
  _26 = _24 ^ _25;
  z_65(D)->sign = _26;
  _27 = x_63(D)->exp;
  _28 = (unsigned short) _27;
  _29 = y_64(D)->exp;
  _30 = (unsigned short) _29;
  _31 = _28 - _30;
  _32 = _31 + 128;
  _33 = (short int) _32;
  z_65(D)->exp = _33;
  goto <bb 52>; [0.00%]

  <bb 51> [0.00%]:
  z_65(D)->mantissa[i_52] = 0;
  extra_bits[i_52] = 0;
  i_90 = i_52 + 1;

  <bb 52> [0.00%]:
  # i_52 = PHI <0(50), i_90(51)>
  if (i_52 <= 3)
    goto <bb 51>; [0.00%]
  else
    goto <bb 75>; [0.00%]

  <bb 53> [80.00%]:
  _198 = (long unsigned int) i_197;
  _199 = _198 * 2;
  _200 = &locx.mantissa + _199;
  accum_201 = *_200;
  _202 = accum_201 & 32768;
  accum_203 = accum_201 << 1;
  _204 = carry_301;
  if (carry_301 != 0)
    goto <bb 54>; [50.00%]
  else
    goto <bb 55>; [50.00%]

  <bb 54> [40.00%]:
  accum_205 = accum_203 | 1;

  <bb 55> [80.00%]:
  # accum_206 = PHI <accum_203(53), accum_205(54)>
  carry_313 = _202;
  *_200 = accum_206;
  i_207 = i_197 + -1;

  <bb 56> [100.00%]:
  # i_197 = PHI <3(75), i_207(55)>
  # carry_301 = PHI <0(75), carry_313(55)>
  if (i_197 >= 0)
    goto <bb 53>; [80.00%]
  else
    goto <bb 60>; [20.00%]

  <bb 57> [80.00%]:
  _187 = (long unsigned int) i_186;
  _188 = _187 * 2;
  _189 = &extra_bits + _188;
  accum_190 = *_189;
  _191 = accum_190 & 32768;
  accum_192 = accum_190 << 1;
  _193 = carry_302;
  if (carry_302 != 0)
    goto <bb 58>; [50.00%]
  else
    goto <bb 59>; [50.00%]

  <bb 58> [40.00%]:
  accum_194 = accum_192 | 1;

  <bb 59> [80.00%]:
  # accum_195 = PHI <accum_192(57), accum_194(58)>
  carry_312 = _191;
  *_189 = accum_195;
  i_196 = i_186 + -1;

  <bb 60> [100.00%]:
  # i_186 = PHI <3(56), i_196(59)>
  # carry_302 = PHI <carry_301(56), carry_312(59)>
  if (i_186 >= 0)
    goto <bb 57>; [80.00%]
  else
    goto <bb 61>; [20.00%]

  <bb 61> [0.00%]:
  carry.0_34 = carry_302;
  if (carry_302 == 0)
    goto <bb 65>; [0.00%]
  else
    goto <bb 67>; [0.00%]

  <bb 62> [0.00%]:
  _35 = y_64(D)->mantissa[j_53];
  _36 = extra_bits[j_53];
  if (_35 > _36)
    goto <bb 69> (no_subtract); [0.00%]
  else
    goto <bb 63>; [0.00%]

  <bb 63> [0.00%]:
  _37 = y_64(D)->mantissa[j_53];
  _38 = extra_bits[j_53];
  if (_37 < _38)
    goto <bb 67>; [0.00%]
  else
    goto <bb 64>; [0.00%]

  <bb 64> [0.00%]:
  j_79 = j_53 + 1;

  <bb 65> [0.00%]:
  # j_53 = PHI <0(61), j_79(64)>
  if (j_53 <= 3)
    goto <bb 62>; [0.00%]
  else
    goto <bb 67>; [0.00%]

  <bb 66> [100.00%]:
  _39 = y_64(D)->mantissa[j_54];
  _40 = (int) _39;
  _41 = extra_bits[j_54];
  _42 = (int) _41;
  accum_210 = (unsigned int) _41;
  _211 = (unsigned int) _39;
  accum_212 = accum_210 - _211;
  _213 = carry_303;
  _214 = (unsigned int) carry_303;
  accum_215 = accum_212 - _214;
  _216 = accum_215 >> 16;
  _217 = (short unsigned int) _216;
  _218 = _217 & 1;
  carry_310 = _218;
  _219 = (short unsigned int) accum_215;
  MEM[(short unsigned int *)&extra_bits][j_54] = _219;
  j_85 = j_54 + -1;
  goto <bb 68>; [0.00%]

  <bb 67> [0.00%]:
  # j_43 = PHI <3(63), 3(65), 3(61)>
  # carry_100 = PHI <0(63), 0(65), 0(61)>

  <bb 68> [0.00%]:
  # j_54 = PHI <j_43(67), j_85(66)>
  # carry_303 = PHI <carry_100(67), carry_310(66)>
  if (j_54 >= 0)
    goto <bb 66>; [0.00%]
  else
    goto <bb 69> (no_subtract); [0.00%]

  # carry_304 = PHI <0(62), 1(68)>
no_subtract [20.00%]:
  _44 = &z_65(D)->mantissa;
  goto <bb 73>; [100.00%]

  <bb 70> [80.00%]:
  _221 = (long unsigned int) i_220;
  _222 = _221 * 2;
  _223 = _44 + _222;
  accum_224 = *_223;
  _225 = accum_224 & 32768;
  accum_226 = accum_224 << 1;
  _227 = carry_305;
  if (carry_305 != 0)
    goto <bb 71>; [50.00%]
  else
    goto <bb 72>; [50.00%]

  <bb 71> [40.00%]:
  accum_228 = accum_226 | 1;

  <bb 72> [80.00%]:
  # accum_229 = PHI <accum_226(70), accum_228(71)>
  carry_311 = _225;
  *_223 = accum_229;
  i_230 = i_220 + -1;

  <bb 73> [100.00%]:
  # i_220 = PHI <3(69), i_230(72)>
  # carry_305 = PHI <carry_304(69), carry_311(72)>
  if (i_220 >= 0)
    goto <bb 70>; [80.00%]
  else
    goto <bb 74>; [20.00%]

  <bb 74> [0.00%]:
  _45 = z_65(D)->exp;
  _47 = (unsigned short) _45;
  _48 = _47 + 65535;
  _49 = (short int) _48;
  z_65(D)->exp = _49;

  <bb 75> [0.00%]:
  _50 = z_65(D)->mantissa[0];
  _51 = (signed short) _50;
  if (_51 >= 0)
    goto <bb 56>; [0.00%]
  else
    goto <bb 77> (<L54>); [0.00%]

<L53> [0.00%]:
  choose_nan (x_63(D), y_64(D), z_65(D), 0);

<L54> [100.00%]:
  _231 = z_65(D)->type;
  _232 = _231 + 255;
  if (_232 <= 1)
    goto <bb 78>; [24.54%]
  else
    goto <bb 79>; [75.46%]

  <bb 78> [24.54%]:
  RoundInternalFPF.part.1 (z_65(D));

  <bb 79> [0.00%]:
  extra_bits ={v} {CLOBBER};
  locx ={v} {CLOBBER};
  return;

}



;; Function SetupCPUEmFloatArrays (SetupCPUEmFloatArrays, funcdef_no=34, decl_uid=2767, cgraph_uid=34, symbol_order=34)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
abase = &NONLOCAL
bbase = &NONLOCAL
cbase = &NONLOCAL
arraysize = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_1 = NONLOCAL
ESCAPED = _1
ESCAPED = &locFPF1
ESCAPED = &NONLOCAL
_2 = NONLOCAL
_3 = _2
_3 = &NONLOCAL
ESCAPED = _3
ESCAPED = &locFPF2
_4 = i_10
_4 = &NONLOCAL
_5 = abase + UNKNOWN
ESCAPED = &locFPF1
ESCAPED = &locFPF2
ESCAPED = _5
ESCAPED = &NONLOCAL
_6 = NONLOCAL
_7 = _6
_7 = &NONLOCAL
ESCAPED = _7
ESCAPED = &locFPF2
_8 = i_10
_8 = &NONLOCAL
_9 = bbase + UNKNOWN
ESCAPED = &locFPF1
ESCAPED = &locFPF2
ESCAPED = _9
i_28 = i_10
i_28 = &NONLOCAL
i_10 = &NULL
i_10 = i_28

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 16 19 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"abase"[label="abase = { 5 }"];
"bbase"[label="bbase = { 5 }"];
"cbase"[label="cbase = { 5 }"];
"arraysize"[label="arraysize = { 5 }"];
"randnum";
"randwc";
"_1";
"Int32ToInternalFPF";
"locFPF1";
"_2";
"_3"[label="_3 = { 5 }"];
"locFPF2";
"_4"[label="_4 = { 5 }"];
"i_10"[label="i_10 = { 1 5 }"];
"_5";
"DivideInternalFPF";
"_6";
"_7"[label="_7 = { 5 }"];
"_8"[label="_8 = { 5 }"];
"_9";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*abase";
"*bbase";
"*cbase";
"*arraysize";
"*randnum";
"*randwc";
"*Int32ToInternalFPF";
"*locFPF1";
"*locFPF2";
"*_4";
"*i_10";
"*_5";
"*DivideInternalFPF";
"*_8";
"*_9";
"*i_28";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_1" -> "ESCAPED";
"_3" -> "ESCAPED";
"_5" -> "ESCAPED";
"_7" -> "ESCAPED";
"_9" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_1";
"NONLOCAL" -> "_2";
"_2" -> "_3";
"i_10" -> "_4";
"i_10" -> "i_10";
"i_10" -> "i_10";
"NONLOCAL" -> "_6";
"_6" -> "_7";
"i_10" -> "_8";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"abase" [label="\N\n_5 = abase + UNKNOWN\l_9 = abase + UNKNOWN\l"];
"randnum";
"randwc";
"_1";
"Int32ToInternalFPF";
"locFPF1";
"locFPF2";
"_4";
"_5";
"DivideInternalFPF";
"_9";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "locFPF1";
"STOREDANYTHING" -> "locFPF2";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_9";
"_1" -> "ESCAPED";
"_5" -> "ESCAPED";
"_9" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _1\l"];
"STOREDANYTHING";
"INTEGER";
"abase" [label="\N\n_5 = abase + UNKNOWN\l_9 = abase + UNKNOWN\l"];
"randnum";
"randwc";
"_1";
"Int32ToInternalFPF";
"locFPF1";
"locFPF2";
"_4";
"_5";
"DivideInternalFPF";
"_9";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "locFPF1";
"STOREDANYTHING" -> "locFPF2";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_9";
"_1" -> "ESCAPED";
"_1" -> "locFPF1";
"_1" -> "locFPF2";
"locFPF1" -> "ESCAPED";
"locFPF2" -> "ESCAPED";
"_5" -> "ESCAPED";
"_9" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL locFPF1 locFPF2 }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
abase = { NONLOCAL }
bbase = { NONLOCAL } same as abase
cbase = { NONLOCAL } same as abase
arraysize = { NONLOCAL } same as abase
randnum = { }
randwc = { }
_1 = { ESCAPED NONLOCAL }
Int32ToInternalFPF = { }
locFPF1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL } same as _1
locFPF2 = { ESCAPED NONLOCAL }
_4 = { NULL NONLOCAL }
i_10 = { NULL NONLOCAL } same as _4
_5 = { NONLOCAL }
DivideInternalFPF = { }
_6 = { ESCAPED NONLOCAL } same as _1
_7 = { ESCAPED NONLOCAL } same as _1
_8 = { NULL NONLOCAL } same as _4
_9 = { NONLOCAL }
i_28 = { NULL NONLOCAL } same as _4


Alias information for SetupCPUEmFloatArrays

Aliased symbols

locFPF2, UID D.2844, struct InternalFPF, is addressable
locFPF1, UID D.2843, struct InternalFPF, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.2843 D.2844 } (escaped)

Flow-insensitive points-to information

_5, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
abase_22(D), points-to non-local, points-to NULL, points-to vars: { }
bbase_26(D), points-to non-local, points-to NULL, points-to vars: { }

SetupCPUEmFloatArrays (struct InternalFPF * abase, struct InternalFPF * bbase, struct InternalFPF * cbase, long unsigned int arraysize)
{
  struct InternalFPF locFPF2;
  struct InternalFPF locFPF1;
  long unsigned int i;
  int _1;
  int _2;
  int _3;
  long unsigned int _4;
  struct InternalFPF * _5;
  int _6;
  int _7;
  long unsigned int _8;
  struct InternalFPF * _9;

  <bb 2> [0.00%]:
  randnum (13);
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = randwc (50000);
  Int32ToInternalFPF (_1, &locFPF1);
  _2 = randwc (50000);
  _3 = _2 + 1;
  Int32ToInternalFPF (_3, &locFPF2);
  _4 = i_10 * 12;
  _5 = abase_22(D) + _4;
  DivideInternalFPF (&locFPF1, &locFPF2, _5);
  _6 = randwc (50000);
  _7 = _6 + 1;
  Int32ToInternalFPF (_7, &locFPF2);
  _8 = i_10 * 12;
  _9 = bbase_26(D) + _8;
  DivideInternalFPF (&locFPF1, &locFPF2, _9);
  i_28 = i_10 + 1;

  <bb 4> [0.00%]:
  # i_10 = PHI <0(2), i_28(3)>
  if (i_10 < arraysize_15(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  locFPF1 ={v} {CLOBBER};
  locFPF2 ={v} {CLOBBER};
  return;

}



;; Function AddSubInternalFPF (AddSubInternalFPF, funcdef_no=49, decl_uid=2819, cgraph_uid=49, symbol_order=49)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
operation = &NONLOCAL
x = &NONLOCAL
y = &NONLOCAL
z = &NONLOCAL
_1 = *x
_2 = _1
_3 = _2
_3 = &NONLOCAL
_4 = *y
_5 = _4
_6 = _3
_6 = _5
CALLUSED(19) = CALLUSED(19) + UNKNOWN
CALLUSED(19) = *CALLUSED(19) + UNKNOWN
CALLUSED(19) = x
CALLUSED(19) = &NULL
_111 = CALLUSED(19)
_111 = NONLOCAL
_128 = x
doubledereftmp(23) = *z + UNKNOWN
*x + UNKNOWN = doubledereftmp(23)
_7 = *x + 8
_8 = *y + 8
_9 = _7
_9 = _8
derefaddrtmp(27) = &NULL
*z + 8 = derefaddrtmp(27)
CALLUSED(28) = CALLUSED(28) + UNKNOWN
CALLUSED(28) = *CALLUSED(28) + UNKNOWN
CALLUSED(28) = x
CALLUSED(28) = &NULL
_129 = CALLUSED(28)
_129 = NONLOCAL
_130 = x
doubledereftmp(32) = *z + UNKNOWN
*x + UNKNOWN = doubledereftmp(32)
CALLUSED(33) = CALLUSED(33) + UNKNOWN
CALLUSED(33) = *CALLUSED(33) + UNKNOWN
CALLUSED(33) = y
CALLUSED(33) = &NULL
_131 = CALLUSED(33)
_131 = NONLOCAL
_132 = y
doubledereftmp(37) = *z + UNKNOWN
*y + UNKNOWN = doubledereftmp(37)
CALLUSED(38) = CALLUSED(38) + UNKNOWN
CALLUSED(38) = *CALLUSED(38) + UNKNOWN
CALLUSED(38) = y
CALLUSED(38) = &NULL
_133 = CALLUSED(38)
_133 = NONLOCAL
_134 = y
doubledereftmp(42) = *z + UNKNOWN
*y + UNKNOWN = doubledereftmp(42)
_10 = *z + 8
_11 = _10
_11 = operation
*z + 8 = _11
_138 = &locx
locx = *x + UNKNOWN
_210 = _138
_136 = &locy
locy = *y + UNKNOWN
_212 = _136
_12 = locx
_13 = _12
_14 = locy
_15 = _14
exponent_difference_80 = _13
exponent_difference_80 = _15
_16 = locx
_17 = locy
derefaddrtmp(58) = &NONLOCAL
*z = derefaddrtmp(58)
derefaddrtmp(59) = &NONLOCAL
*z = derefaddrtmp(59)
_18 = locx
*z + 8 = _18
_19 = locx
*z + 16 = _19
ESCAPED = &locy
ESCAPED = exponent_difference_80
_20 = locx
*z = _20
_21 = locx
*z + 8 = _21
_22 = locx
*z + 16 = _22
_23 = exponent_difference_80
ESCAPED = &locx
ESCAPED = _23
_24 = locy
*z = _24
_25 = locy
_26 = _25
_26 = operation
*z + 8 = _26
_27 = locy
*z + 16 = _27
_28 = locx
_29 = locy
_30 = _28
_30 = _29
_31 = locy
_32 = _31
_33 = locx
_34 = _33
accum_141 = _33
_142 = _31
accum_143 = accum_141
accum_143 = _142
_144 = borrow_231
_145 = borrow_231
accum_146 = accum_143
accum_146 = _145
_147 = accum_146
_147 = &NONLOCAL
_148 = _147
_149 = _148 + UNKNOWN
borrow_242 = _149
_150 = accum_146
*z + UNKNOWN = _150
i_116 = i_62
i_116 = &NONLOCAL
i_62 = &NONLOCAL
i_62 = i_116
borrow_231 = &NULL
borrow_231 = borrow_242
borrow.2_36 = borrow_231
_37 = locy
_38 = _37
_38 = operation
*z + 8 = _38
_39 = *z + UNKNOWN
_40 = _39
_153 = _39
accum_154 = _153
_155 = borrow_232
_156 = borrow_232
accum_157 = accum_154
accum_157 = _156
_158 = accum_157
_158 = &NONLOCAL
_159 = _158
_160 = _159 + UNKNOWN
borrow_241 = _160
_161 = accum_157
*z + UNKNOWN = _161
i_110 = i_63
i_110 = &NONLOCAL
i_63 = &NONLOCAL
i_63 = i_110
borrow_232 = &NULL
borrow_232 = borrow_241
_42 = z + UNKNOWN
_163 = i_162
_164 = _163
_164 = &NONLOCAL
_165 = _42 + UNKNOWN
_166 = *_165
_167 = _166
n_169 = _167
n_169 = n_168
i_170 = i_162
i_170 = &NONLOCAL
i_162 = &NULL
i_162 = i_170
n_168 = &NULL
n_168 = n_169
n_171 = n_168
_173 = _172
_219 = _173
_43 = _173
derefaddrtmp(125) = &NULL
*z = derefaddrtmp(125)
derefaddrtmp(126) = &NULL
*z + 8 = derefaddrtmp(126)
_44 = locx
_45 = locy
ESCAPED = z
_46 = locy
_47 = _46
_48 = locx
_49 = _48
accum_176 = _48
_177 = _46
accum_178 = accum_176
accum_178 = _177
_179 = carry_233
_180 = carry_233
accum_181 = accum_178
accum_181 = _180
_182 = accum_181
_182 = &NONLOCAL
_183 = _182
_184 = _183 + UNKNOWN
carry_238 = _184
_185 = accum_181
*z + UNKNOWN = _185
i_103 = i_64
i_103 = &NONLOCAL
i_64 = &NONLOCAL
i_64 = i_103
carry_233 = &NULL
carry_233 = carry_238
carry.3_51 = carry_233
_52 = *z + 16
_54 = _52
_55 = _54
_55 = &NONLOCAL
_56 = _55
*z + 16 = _56
_57 = z + UNKNOWN
_187 = i_186
_188 = _187
_188 = &NONLOCAL
_189 = _57 + UNKNOWN
accum_190 = *_189
_191 = accum_190 + UNKNOWN
accum_192 = accum_190
accum_192 = &NONLOCAL
_193 = carry_234
accum_194 = accum_192
accum_194 = &NONLOCAL
accum_195 = accum_192
accum_195 = accum_194
carry_237 = _191
*_189 = accum_195
i_196 = i_186
i_196 = &NONLOCAL
i_186 = &NULL
i_186 = i_196
carry_234 = &NULL
carry_234 = carry_237
_58 = *z + 32
_59 = _58
_59 = &NONLOCAL
*z + 32 = _59
derefaddrtmp(169) = &NONLOCAL
*z = derefaddrtmp(169)
_60 = *z + 32
_61 = _60
derefaddrtmp(172) = &NONLOCAL
*z = derefaddrtmp(172)
derefaddrtmp(173) = &NONLOCAL
*z = derefaddrtmp(173)
derefaddrtmp(174) = &NONLOCAL
*z + 16 = derefaddrtmp(174)
derefaddrtmp(175) = &NONLOCAL
*z + 8 = derefaddrtmp(175)
derefaddrtmp(176) = &NONLOCAL
*z + 32 = derefaddrtmp(176)
derefaddrtmp(177) = &NULL
*z + UNKNOWN = derefaddrtmp(177)
i_198 = i_197
i_198 = &NONLOCAL
i_197 = &NONLOCAL
i_197 = i_198
ESCAPED = x
ESCAPED = y
ESCAPED = z
ESCAPED = &NONLOCAL
_199 = *z
_200 = _199
_200 = &NONLOCAL
ESCAPED = z

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 46 49 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"operation"[label="operation = { 5 }"];
"x"[label="x = { 5 }"];
"y"[label="y = { 5 }"];
"z"[label="z = { 5 }"];
"_1";
"_2";
"_3"[label="_3 = { 5 }"];
"_4";
"_5";
"_6";
"__builtin_object_size";
"CALLUSED(19)"[label="CALLUSED(19) = { 1 }"];
"CALLCLOBBERED(20)";
"_111";
"_128";
"doubledereftmp(23)";
"_7";
"_8";
"_9";
"derefaddrtmp(27)"[label="derefaddrtmp(27) = { 1 }"];
"CALLUSED(28)"[label="CALLUSED(28) = { 1 }"];
"CALLCLOBBERED(29)";
"_129";
"_130";
"doubledereftmp(32)";
"CALLUSED(33)"[label="CALLUSED(33) = { 1 }"];
"CALLCLOBBERED(34)";
"_131";
"_132";
"doubledereftmp(37)";
"CALLUSED(38)"[label="CALLUSED(38) = { 1 }"];
"CALLCLOBBERED(39)";
"_133";
"_134";
"doubledereftmp(42)";
"_10";
"_11";
"_138"[label="_138 = { 46 }"];
"locx";
"_210";
"_136"[label="_136 = { 49 }"];
"locy";
"_212";
"_12";
"_13";
"_14";
"_15";
"exponent_difference_80";
"_16";
"_17";
"derefaddrtmp(58)"[label="derefaddrtmp(58) = { 5 }"];
"derefaddrtmp(59)"[label="derefaddrtmp(59) = { 5 }"];
"_18";
"_19";
"StickyShiftRightMant";
"_20";
"_21";
"_22";
"_23";
"_24";
"_25";
"_26";
"_27";
"_28";
"_29";
"_30";
"_31";
"_32";
"_33";
"_34";
"accum_141";
"_142";
"accum_143";
"_144";
"borrow_231"[label="borrow_231 = { 1 }"];
"_145";
"accum_146";
"_147"[label="_147 = { 5 }"];
"_148";
"_149";
"borrow_242";
"_150";
"i_116"[label="i_116 = { 5 }"];
"borrow.2_36";
"_37";
"_38";
"_39";
"_40";
"_153";
"accum_154";
"_155";
"borrow_232"[label="borrow_232 = { 1 }"];
"_156";
"accum_157";
"_158"[label="_158 = { 5 }"];
"_159";
"_160";
"borrow_241";
"_161";
"i_110"[label="i_110 = { 5 }"];
"_42";
"_163";
"i_162"[label="i_162 = { 1 5 }"];
"_164"[label="_164 = { 5 }"];
"_165";
"_166";
"_167";
"n_169"[label="n_169 = { 1 }"];
"n_171";
"_172";
"_173";
"_219";
"_43";
"derefaddrtmp(125)"[label="derefaddrtmp(125) = { 1 }"];
"derefaddrtmp(126)"[label="derefaddrtmp(126) = { 1 }"];
"_44";
"_45";
"normalize";
"_46";
"_47";
"_48";
"_49";
"accum_176";
"_177";
"accum_178";
"_179";
"carry_233"[label="carry_233 = { 1 }"];
"_180";
"accum_181";
"_182"[label="_182 = { 5 }"];
"_183";
"_184";
"carry_238";
"_185";
"i_103"[label="i_103 = { 5 }"];
"carry.3_51";
"_52";
"_54";
"_55"[label="_55 = { 5 }"];
"_56";
"_57";
"_187";
"i_186"[label="i_186 = { 1 5 }"];
"_188"[label="_188 = { 5 }"];
"_189";
"accum_190"[label="accum_190 = { 5 }"];
"_191";
"_193";
"carry_234"[label="carry_234 = { 1 }"];
"carry_237";
"_58";
"_59"[label="_59 = { 5 }"];
"derefaddrtmp(169)"[label="derefaddrtmp(169) = { 5 }"];
"_60";
"_61";
"derefaddrtmp(172)"[label="derefaddrtmp(172) = { 5 }"];
"derefaddrtmp(173)"[label="derefaddrtmp(173) = { 5 }"];
"derefaddrtmp(174)"[label="derefaddrtmp(174) = { 5 }"];
"derefaddrtmp(175)"[label="derefaddrtmp(175) = { 5 }"];
"derefaddrtmp(176)"[label="derefaddrtmp(176) = { 5 }"];
"derefaddrtmp(177)"[label="derefaddrtmp(177) = { 1 }"];
"i_198"[label="i_198 = { 5 }"];
"choose_nan";
"_199";
"_200"[label="_200 = { 5 }"];
"RoundInternalFPF.part.1";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*operation";
"*x";
"*y";
"*z";
"*_1";
"*_2";
"*_3";
"*_4";
"*_5";
"*_6";
"*__builtin_object_size";
"*CALLUSED(19)";
"*CALLCLOBBERED(20)";
"*_111";
"*_128";
"*doubledereftmp(23)";
"*_7";
"*_8";
"*_9";
"*derefaddrtmp(27)";
"*CALLUSED(28)";
"*CALLCLOBBERED(29)";
"*_129";
"*_130";
"*doubledereftmp(32)";
"*CALLUSED(33)";
"*CALLCLOBBERED(34)";
"*_131";
"*_132";
"*doubledereftmp(37)";
"*CALLUSED(38)";
"*CALLCLOBBERED(39)";
"*_133";
"*_134";
"*doubledereftmp(42)";
"*_10";
"*_11";
"*_138";
"*locx";
"*_210";
"*_136";
"*locy";
"*_212";
"*_12";
"*_13";
"*_14";
"*_15";
"*exponent_difference_80";
"*_16";
"*_17";
"*derefaddrtmp(58)";
"*derefaddrtmp(59)";
"*_18";
"*_19";
"*StickyShiftRightMant";
"*_20";
"*_21";
"*_22";
"*_23";
"*_24";
"*_25";
"*_26";
"*_27";
"*_28";
"*_29";
"*_30";
"*_31";
"*_32";
"*_33";
"*_34";
"*accum_141";
"*_142";
"*accum_143";
"*_144";
"*borrow_231";
"*_145";
"*accum_146";
"*_147";
"*_148";
"*_149";
"*borrow_242";
"*_150";
"*i_116";
"*i_62";
"*borrow.2_36";
"*_37";
"*_38";
"*_39";
"*_40";
"*_153";
"*accum_154";
"*_155";
"*borrow_232";
"*_156";
"*accum_157";
"*_158";
"*_159";
"*_160";
"*borrow_241";
"*_161";
"*i_110";
"*i_63";
"*_42";
"*_163";
"*i_162";
"*_164";
"*_165";
"*_166";
"*_167";
"*n_169";
"*n_168";
"*i_170";
"*n_171";
"*_172";
"*_173";
"*_219";
"*_43";
"*derefaddrtmp(125)";
"*derefaddrtmp(126)";
"*_44";
"*_45";
"*normalize";
"*_46";
"*_47";
"*_48";
"*_49";
"*accum_176";
"*_177";
"*accum_178";
"*_179";
"*carry_233";
"*_180";
"*accum_181";
"*_182";
"*_183";
"*_184";
"*carry_238";
"*_185";
"*i_103";
"*i_64";
"*carry.3_51";
"*_52";
"*_54";
"*_55";
"*_56";
"*_57";
"*_187";
"*i_186";
"*_188";
"*accum_190";
"*_191";
"*accum_192";
"*_193";
"*carry_234";
"*accum_194";
"*accum_195";
"*carry_237";
"*i_196";
"*_58";
"*_59";
"*derefaddrtmp(169)";
"*_60";
"*_61";
"*derefaddrtmp(172)";
"*derefaddrtmp(173)";
"*derefaddrtmp(174)";
"*derefaddrtmp(175)";
"*derefaddrtmp(176)";
"*derefaddrtmp(177)";
"*i_198";
"*i_197";
"*choose_nan";
"*_199";
"*_200";
"*RoundInternalFPF.part.1";

  // Edges in the constraint graph:
"x" -> "ESCAPED";
"y" -> "ESCAPED";
"z" -> "ESCAPED";
"exponent_difference_80" -> "ESCAPED";
"_23" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"*x" -> "_1";
"_1" -> "_2";
"_2" -> "_3";
"*y" -> "_4";
"_4" -> "_5";
"_3" -> "_6";
"_5" -> "_6";
"x" -> "CALLUSED(19)";
"NONLOCAL" -> "_111";
"CALLUSED(19)" -> "_111";
"x" -> "_128";
"_7" -> "_9";
"_8" -> "_9";
"x" -> "CALLUSED(28)";
"NONLOCAL" -> "_129";
"CALLUSED(28)" -> "_129";
"x" -> "_130";
"y" -> "CALLUSED(33)";
"NONLOCAL" -> "_131";
"CALLUSED(33)" -> "_131";
"y" -> "_132";
"y" -> "CALLUSED(38)";
"NONLOCAL" -> "_133";
"CALLUSED(38)" -> "_133";
"y" -> "_134";
"operation" -> "_11";
"_10" -> "_11";
"_138" -> "_210";
"_136" -> "_212";
"locx" -> "_12";
"_12" -> "_13";
"locy" -> "_14";
"_14" -> "_15";
"_13" -> "exponent_difference_80";
"_15" -> "exponent_difference_80";
"locx" -> "_16";
"locy" -> "_17";
"locx" -> "_18";
"locx" -> "_19";
"locx" -> "_20";
"locx" -> "_21";
"locx" -> "_22";
"exponent_difference_80" -> "_23";
"locy" -> "_24";
"locy" -> "_25";
"operation" -> "_26";
"_25" -> "_26";
"locy" -> "_27";
"locx" -> "_28";
"locy" -> "_29";
"_28" -> "_30";
"_29" -> "_30";
"locy" -> "_31";
"_31" -> "_32";
"locx" -> "_33";
"_33" -> "_34";
"_33" -> "accum_141";
"_31" -> "_142";
"accum_141" -> "accum_143";
"_142" -> "accum_143";
"borrow_231" -> "_144";
"borrow_242" -> "borrow_231";
"borrow_231" -> "_145";
"accum_143" -> "accum_146";
"_145" -> "accum_146";
"accum_146" -> "_147";
"_147" -> "_148";
"_149" -> "borrow_242";
"accum_146" -> "_150";
"i_116" -> "i_116";
"i_116" -> "i_116";
"borrow_231" -> "borrow.2_36";
"locy" -> "_37";
"operation" -> "_38";
"_37" -> "_38";
"_39" -> "_40";
"_39" -> "_153";
"_153" -> "accum_154";
"borrow_232" -> "_155";
"borrow_241" -> "borrow_232";
"borrow_232" -> "_156";
"accum_154" -> "accum_157";
"_156" -> "accum_157";
"accum_157" -> "_158";
"_158" -> "_159";
"_160" -> "borrow_241";
"accum_157" -> "_161";
"i_110" -> "i_110";
"i_110" -> "i_110";
"i_162" -> "_163";
"i_162" -> "i_162";
"i_162" -> "i_162";
"_163" -> "_164";
"*_165" -> "_166";
"_166" -> "_167";
"_167" -> "n_169";
"n_169" -> "n_169";
"n_169" -> "n_169";
"n_169" -> "n_171";
"_172" -> "_173";
"_173" -> "_219";
"_173" -> "_43";
"locx" -> "_44";
"locy" -> "_45";
"locy" -> "_46";
"_46" -> "_47";
"locx" -> "_48";
"_48" -> "_49";
"_48" -> "accum_176";
"_46" -> "_177";
"accum_176" -> "accum_178";
"_177" -> "accum_178";
"carry_233" -> "_179";
"carry_238" -> "carry_233";
"carry_233" -> "_180";
"accum_178" -> "accum_181";
"_180" -> "accum_181";
"accum_181" -> "_182";
"_182" -> "_183";
"_184" -> "carry_238";
"accum_181" -> "_185";
"i_103" -> "i_103";
"i_103" -> "i_103";
"carry_233" -> "carry.3_51";
"_52" -> "_54";
"_54" -> "_55";
"_55" -> "_56";
"i_186" -> "_187";
"i_186" -> "i_186";
"i_186" -> "i_186";
"_187" -> "_188";
"accum_190" -> "accum_190";
"accum_190" -> "accum_190";
"accum_190" -> "accum_190";
"accum_190" -> "accum_190";
"accum_190" -> "accum_190";
"carry_234" -> "_193";
"carry_237" -> "carry_234";
"_191" -> "carry_237";
"_58" -> "_59";
"_60" -> "_61";
"i_198" -> "i_198";
"i_198" -> "i_198";
"*z" -> "_199";
"_199" -> "_200";
"NONLOCAL" -> "*ESCAPED";
"derefaddrtmp(58)" -> "*z";
"derefaddrtmp(59)" -> "*z";
"_20" -> "*z";
"_24" -> "*z";
"derefaddrtmp(125)" -> "*z";
"derefaddrtmp(169)" -> "*z";
"derefaddrtmp(172)" -> "*z";
"derefaddrtmp(173)" -> "*z";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"operation" [label="\N\n_1 = *operation\l_4 = *operation\ldoubledereftmp(23) = *operation + UNKNOWN\l_7 = *operation + 8\l_8 = *operation + 8\ldoubledereftmp(32) = *operation + UNKNOWN\ldoubledereftmp(37) = *operation + UNKNOWN\ldoubledereftmp(42) = *operation + UNKNOWN\l_10 = *operation + 8\llocx = *operation + UNKNOWN\llocy = *operation + UNKNOWN\l_39 = *operation + UNKNOWN\l_42 = operation + UNKNOWN\l_52 = *operation + 16\l_57 = operation + UNKNOWN\l_58 = *operation + 32\l_60 = *operation + 32\l_199 = *operation\l*operation + UNKNOWN = doubledereftmp(23)\l*operation + UNKNOWN = derefaddrtmp(27)\l*operation + UNKNOWN = doubledereftmp(32)\l*operation + UNKNOWN = doubledereftmp(37)\l*operation + UNKNOWN = doubledereftmp(42)\l*operation + UNKNOWN = accum_146\l*operation + UNKNOWN = accum_157\l*operation + UNKNOWN = accum_181\l*operation = operation\l*operation = derefaddrtmp(27)\l*operation = _12\l*operation = _14\l*operation + 8 = operation\l*operation + 8 = derefaddrtmp(27)\l*operation + 8 = _11\l*operation + 8 = _12\l*operation + 8 = _26\l*operation + 16 = operation\l*operation + 16 = _12\l*operation + 16 = _14\l*operation + 16 = _55\l*operation + 32 = operation\l*operation + 32 = _59\l"];
"_1";
"_3";
"_4";
"_6";
"__builtin_object_size";
"CALLUSED(19)" [label="\N\nCALLUSED(19) = CALLUSED(19) + UNKNOWN\lCALLUSED(19) = *CALLUSED(19) + UNKNOWN\l"];
"CALLCLOBBERED(20)";
"_111";
"doubledereftmp(23)";
"_7";
"_8";
"_9";
"derefaddrtmp(27)";
"CALLUSED(28)" [label="\N\nCALLUSED(28) = CALLUSED(28) + UNKNOWN\lCALLUSED(28) = *CALLUSED(28) + UNKNOWN\l"];
"CALLCLOBBERED(29)";
"_129";
"doubledereftmp(32)";
"CALLUSED(33)" [label="\N\nCALLUSED(33) = CALLUSED(33) + UNKNOWN\lCALLUSED(33) = *CALLUSED(33) + UNKNOWN\l"];
"CALLCLOBBERED(34)";
"_131";
"doubledereftmp(37)";
"CALLUSED(38)" [label="\N\nCALLUSED(38) = CALLUSED(38) + UNKNOWN\lCALLUSED(38) = *CALLUSED(38) + UNKNOWN\l"];
"CALLCLOBBERED(39)";
"_133";
"doubledereftmp(42)";
"_10";
"_11";
"_138";
"_136";
"_12";
"_14";
"exponent_difference_80";
"StickyShiftRightMant";
"_26";
"_144";
"accum_146";
"_147" [label="\N\n_149 = _147 + UNKNOWN\l"];
"_149";
"_39";
"_155";
"accum_157";
"_158" [label="\N\n_160 = _158 + UNKNOWN\l"];
"_160";
"_42" [label="\N\n_165 = _42 + UNKNOWN\l"];
"_163";
"_165" [label="\N\n_166 = *_165\l"];
"_166";
"n_169";
"_172";
"_173";
"_219";
"_43";
"normalize";
"_179";
"accum_181";
"_182" [label="\N\n_184 = _182 + UNKNOWN\l"];
"_184";
"_52";
"_55";
"_57" [label="\N\n_189 = _57 + UNKNOWN\l"];
"_189" [label="\N\naccum_190 = *_189\l*_189 = accum_190\l"];
"accum_190" [label="\N\n_191 = accum_190 + UNKNOWN\l"];
"_191";
"_193";
"_58";
"_59";
"_60";
"choose_nan";
"_199";
"RoundInternalFPF.part.1";

  // Edges in the constraint graph:
"NONLOCAL" -> "_111";
"NONLOCAL" -> "_129";
"NONLOCAL" -> "_131";
"NONLOCAL" -> "_133";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(19)";
"STOREDANYTHING" -> "doubledereftmp(23)";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_8";
"STOREDANYTHING" -> "CALLUSED(28)";
"STOREDANYTHING" -> "doubledereftmp(32)";
"STOREDANYTHING" -> "CALLUSED(33)";
"STOREDANYTHING" -> "doubledereftmp(37)";
"STOREDANYTHING" -> "CALLUSED(38)";
"STOREDANYTHING" -> "doubledereftmp(42)";
"STOREDANYTHING" -> "_10";
"STOREDANYTHING" -> "_12";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "_149";
"STOREDANYTHING" -> "_39";
"STOREDANYTHING" -> "_160";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_165";
"STOREDANYTHING" -> "_184";
"STOREDANYTHING" -> "_52";
"STOREDANYTHING" -> "_57";
"STOREDANYTHING" -> "_189";
"STOREDANYTHING" -> "accum_190";
"STOREDANYTHING" -> "_191";
"STOREDANYTHING" -> "_58";
"STOREDANYTHING" -> "_60";
"operation" -> "ESCAPED";
"operation" -> "CALLUSED(19)";
"operation" -> "CALLUSED(28)";
"operation" -> "CALLUSED(33)";
"operation" -> "CALLUSED(38)";
"operation" -> "_11";
"operation" -> "_26";
"_1" -> "_3";
"_3" -> "_6";
"_4" -> "_6";
"CALLUSED(19)" -> "_111";
"_7" -> "_9";
"_8" -> "_9";
"CALLUSED(28)" -> "_129";
"CALLUSED(33)" -> "_131";
"CALLUSED(38)" -> "_133";
"_10" -> "_11";
"_12" -> "exponent_difference_80";
"_14" -> "exponent_difference_80";
"_14" -> "_26";
"exponent_difference_80" -> "ESCAPED";
"exponent_difference_80" -> "accum_146";
"exponent_difference_80" -> "accum_181";
"_144" -> "accum_146";
"accum_146" -> "_147";
"_149" -> "_144";
"_39" -> "accum_157";
"_155" -> "accum_157";
"accum_157" -> "_158";
"_160" -> "_155";
"_166" -> "n_169";
"_179" -> "accum_181";
"accum_181" -> "_182";
"_184" -> "_179";
"_52" -> "_55";
"_191" -> "_193";
"_58" -> "_59";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"operation" [label="\N\n_1 = *operation\l_4 = *operation\ldoubledereftmp(23) = *operation + UNKNOWN\l_7 = *operation + 8\l_8 = *operation + 8\ldoubledereftmp(32) = *operation + UNKNOWN\ldoubledereftmp(37) = *operation + UNKNOWN\ldoubledereftmp(42) = *operation + UNKNOWN\l_10 = *operation + 8\l_12 = *operation + UNKNOWN\l_14 = *operation + UNKNOWN\l_39 = *operation + UNKNOWN\l_42 = operation + UNKNOWN\l_52 = *operation + 16\l_57 = operation + UNKNOWN\l_58 = *operation + 32\l_60 = *operation + 32\l_199 = *operation\l*operation + UNKNOWN = doubledereftmp(23)\l*operation + UNKNOWN = derefaddrtmp(27)\l*operation + UNKNOWN = doubledereftmp(32)\l*operation + UNKNOWN = doubledereftmp(37)\l*operation + UNKNOWN = doubledereftmp(42)\l*operation + UNKNOWN = accum_146\l*operation + UNKNOWN = accum_157\l*operation + UNKNOWN = accum_181\l*operation = operation\l*operation = derefaddrtmp(27)\l*operation = _12\l*operation = _14\l*operation + 8 = operation\l*operation + 8 = derefaddrtmp(27)\l*operation + 8 = _11\l*operation + 8 = _12\l*operation + 8 = _26\l*operation + 16 = operation\l*operation + 16 = _12\l*operation + 16 = _14\l*operation + 16 = _55\l*operation + 32 = operation\l*operation + 32 = _59\l"];
"_1";
"_3";
"_4";
"_6";
"__builtin_object_size";
"CALLUSED(19)" [label="\N\nCALLUSED(19) = CALLUSED(19) + UNKNOWN\lCALLUSED(19) = *CALLUSED(19) + UNKNOWN\l"];
"CALLCLOBBERED(20)";
"_111";
"doubledereftmp(23)";
"_7";
"_8";
"_9";
"derefaddrtmp(27)";
"CALLUSED(28)" [label="\N\nCALLUSED(28) = CALLUSED(28) + UNKNOWN\lCALLUSED(28) = *CALLUSED(28) + UNKNOWN\l"];
"CALLCLOBBERED(29)";
"_129";
"doubledereftmp(32)";
"CALLUSED(33)" [label="\N\nCALLUSED(33) = CALLUSED(33) + UNKNOWN\lCALLUSED(33) = *CALLUSED(33) + UNKNOWN\l"];
"CALLCLOBBERED(34)";
"_131";
"doubledereftmp(37)";
"CALLUSED(38)" [label="\N\nCALLUSED(38) = CALLUSED(38) + UNKNOWN\lCALLUSED(38) = *CALLUSED(38) + UNKNOWN\l"];
"CALLCLOBBERED(39)";
"_133";
"doubledereftmp(42)";
"_10";
"_11";
"_138";
"_136";
"_12";
"_14";
"exponent_difference_80";
"StickyShiftRightMant";
"_26";
"_144";
"accum_146";
"_147" [label="\N\n_149 = _147 + UNKNOWN\l"];
"_149";
"_39";
"_155";
"accum_157";
"_158" [label="\N\n_160 = _158 + UNKNOWN\l"];
"_160";
"_42" [label="\N\n_165 = _42 + UNKNOWN\l"];
"_163";
"_165" [label="\N\n_166 = *_165\l"];
"_166";
"n_169";
"_172";
"_173";
"_219";
"_43";
"normalize";
"_179";
"accum_181";
"_182" [label="\N\n_184 = _182 + UNKNOWN\l"];
"_184";
"_52";
"_55";
"_57" [label="\N\n_189 = _57 + UNKNOWN\l"];
"_189" [label="\N\naccum_190 = *_189\l*_189 = accum_190\l"];
"accum_190" [label="\N\n_191 = accum_190 + UNKNOWN\l"];
"_191";
"_193";
"_58";
"_59";
"_60";
"choose_nan";
"_199";
"RoundInternalFPF.part.1";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(19)";
"STOREDANYTHING" -> "doubledereftmp(23)";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_8";
"STOREDANYTHING" -> "CALLUSED(28)";
"STOREDANYTHING" -> "doubledereftmp(32)";
"STOREDANYTHING" -> "CALLUSED(33)";
"STOREDANYTHING" -> "doubledereftmp(37)";
"STOREDANYTHING" -> "CALLUSED(38)";
"STOREDANYTHING" -> "doubledereftmp(42)";
"STOREDANYTHING" -> "_10";
"STOREDANYTHING" -> "_12";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "_149";
"STOREDANYTHING" -> "_39";
"STOREDANYTHING" -> "_160";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_165";
"STOREDANYTHING" -> "_184";
"STOREDANYTHING" -> "_52";
"STOREDANYTHING" -> "_57";
"STOREDANYTHING" -> "_189";
"STOREDANYTHING" -> "accum_190";
"STOREDANYTHING" -> "_191";
"STOREDANYTHING" -> "_58";
"STOREDANYTHING" -> "_60";
"operation" -> "ESCAPED";
"operation" -> "CALLUSED(19)";
"operation" -> "CALLUSED(28)";
"operation" -> "CALLUSED(33)";
"operation" -> "CALLUSED(38)";
"operation" -> "_11";
"operation" -> "_26";
"_1" -> "_3";
"_3" -> "_6";
"_4" -> "_6";
"CALLUSED(19)" -> "_111";
"doubledereftmp(23)" -> "ESCAPED";
"_7" -> "_9";
"_8" -> "_9";
"derefaddrtmp(27)" -> "ESCAPED";
"CALLUSED(28)" -> "_129";
"doubledereftmp(32)" -> "ESCAPED";
"CALLUSED(33)" -> "_131";
"doubledereftmp(37)" -> "ESCAPED";
"CALLUSED(38)" -> "_133";
"doubledereftmp(42)" -> "ESCAPED";
"_10" -> "_11";
"_11" -> "ESCAPED";
"_12" -> "ESCAPED";
"_12" -> "exponent_difference_80";
"_14" -> "ESCAPED";
"_14" -> "exponent_difference_80";
"_14" -> "_26";
"exponent_difference_80" -> "ESCAPED";
"exponent_difference_80" -> "accum_146";
"exponent_difference_80" -> "accum_181";
"_26" -> "ESCAPED";
"_144" -> "accum_146";
"accum_146" -> "ESCAPED";
"accum_146" -> "_147";
"_149" -> "_144";
"_39" -> "accum_157";
"_155" -> "accum_157";
"accum_157" -> "ESCAPED";
"accum_157" -> "_158";
"_160" -> "_155";
"_166" -> "n_169";
"_179" -> "accum_181";
"accum_181" -> "ESCAPED";
"accum_181" -> "_182";
"_184" -> "_179";
"_52" -> "_55";
"_55" -> "ESCAPED";
"accum_190" -> "ESCAPED";
"accum_190" -> "_111";
"accum_190" -> "_129";
"accum_190" -> "_131";
"accum_190" -> "_133";
"accum_190" -> "_12";
"accum_190" -> "_14";
"accum_190" -> "_166";
"_191" -> "_193";
"_58" -> "_59";
"_59" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL locx locy }
NONLOCAL = { ESCAPED NONLOCAL } same as accum_190
STOREDANYTHING = { }
INTEGER = { ANYTHING }
operation = { NONLOCAL }
x = { NONLOCAL } same as operation
y = { NONLOCAL } same as operation
z = { NONLOCAL } same as operation
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _4
_6 = { ESCAPED NONLOCAL }
__builtin_object_size = { }
CALLUSED(19) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(20) = { }
_111 = { NULL ESCAPED NONLOCAL }
_128 = { NONLOCAL } same as operation
doubledereftmp(23) = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL }
derefaddrtmp(27) = { NULL }
CALLUSED(28) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(29) = { }
_129 = { NULL ESCAPED NONLOCAL }
_130 = { NONLOCAL } same as operation
doubledereftmp(32) = { ESCAPED NONLOCAL }
CALLUSED(33) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(34) = { }
_131 = { NULL ESCAPED NONLOCAL }
_132 = { NONLOCAL } same as operation
doubledereftmp(37) = { ESCAPED NONLOCAL }
CALLUSED(38) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(39) = { }
_133 = { NULL ESCAPED NONLOCAL }
_134 = { NONLOCAL } same as operation
doubledereftmp(42) = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL }
_138 = { locx }
locx = { ESCAPED NONLOCAL } same as _12
_210 = { locx } same as _138
_136 = { locy }
locy = { ESCAPED NONLOCAL } same as _14
_212 = { locy } same as _136
_12 = { ESCAPED NONLOCAL }
_13 = { ESCAPED NONLOCAL } same as _12
_14 = { ESCAPED NONLOCAL }
_15 = { ESCAPED NONLOCAL } same as _14
exponent_difference_80 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL } same as _12
_17 = { ESCAPED NONLOCAL } same as _14
derefaddrtmp(58) = { NONLOCAL } same as operation
derefaddrtmp(59) = { NONLOCAL } same as operation
_18 = { ESCAPED NONLOCAL } same as _12
_19 = { ESCAPED NONLOCAL } same as _12
StickyShiftRightMant = { }
_20 = { ESCAPED NONLOCAL } same as _12
_21 = { ESCAPED NONLOCAL } same as _12
_22 = { ESCAPED NONLOCAL } same as _12
_23 = { ESCAPED NONLOCAL } same as exponent_difference_80
_24 = { ESCAPED NONLOCAL } same as _14
_25 = { ESCAPED NONLOCAL } same as _14
_26 = { ESCAPED NONLOCAL }
_27 = { ESCAPED NONLOCAL } same as _14
_28 = { ESCAPED NONLOCAL } same as _12
_29 = { ESCAPED NONLOCAL } same as _14
_30 = { ESCAPED NONLOCAL } same as exponent_difference_80
_31 = { ESCAPED NONLOCAL } same as _14
_32 = { ESCAPED NONLOCAL } same as _14
_33 = { ESCAPED NONLOCAL } same as _12
_34 = { ESCAPED NONLOCAL } same as _12
accum_141 = { ESCAPED NONLOCAL } same as _12
_142 = { ESCAPED NONLOCAL } same as _14
accum_143 = { ESCAPED NONLOCAL } same as exponent_difference_80
_144 = { NULL ESCAPED NONLOCAL }
borrow_231 = { NULL ESCAPED NONLOCAL } same as _144
_145 = { NULL ESCAPED NONLOCAL } same as _144
accum_146 = { NULL ESCAPED NONLOCAL }
_147 = { NULL ESCAPED NONLOCAL }
_148 = { NULL ESCAPED NONLOCAL } same as _147
_149 = { NULL ESCAPED NONLOCAL }
borrow_242 = { NULL ESCAPED NONLOCAL } same as _149
_150 = { NULL ESCAPED NONLOCAL } same as accum_146
i_116 = { NONLOCAL } same as operation
i_62 = { NONLOCAL } same as operation
borrow.2_36 = { NULL ESCAPED NONLOCAL } same as _144
_37 = { ESCAPED NONLOCAL } same as _14
_38 = { ESCAPED NONLOCAL } same as _26
_39 = { ESCAPED NONLOCAL }
_40 = { ESCAPED NONLOCAL } same as _39
_153 = { ESCAPED NONLOCAL } same as _39
accum_154 = { ESCAPED NONLOCAL } same as _39
_155 = { NULL ESCAPED NONLOCAL }
borrow_232 = { NULL ESCAPED NONLOCAL } same as _155
_156 = { NULL ESCAPED NONLOCAL } same as _155
accum_157 = { NULL ESCAPED NONLOCAL }
_158 = { NULL ESCAPED NONLOCAL }
_159 = { NULL ESCAPED NONLOCAL } same as _158
_160 = { NULL ESCAPED NONLOCAL }
borrow_241 = { NULL ESCAPED NONLOCAL } same as _160
_161 = { NULL ESCAPED NONLOCAL } same as accum_157
i_110 = { NONLOCAL } same as operation
i_63 = { NONLOCAL } same as operation
_42 = { NONLOCAL }
_163 = { NULL NONLOCAL }
i_162 = { NULL NONLOCAL } same as _163
_164 = { NULL NONLOCAL } same as _163
_165 = { NONLOCAL }
_166 = { ESCAPED NONLOCAL }
_167 = { ESCAPED NONLOCAL } same as _166
n_169 = { NULL ESCAPED NONLOCAL }
n_168 = { NULL ESCAPED NONLOCAL } same as n_169
i_170 = { NULL NONLOCAL } same as _163
n_171 = { NULL ESCAPED NONLOCAL } same as n_169
_172 = { }
_173 = { }
_219 = { }
_43 = { }
derefaddrtmp(125) = { NULL } same as derefaddrtmp(27)
derefaddrtmp(126) = { NULL } same as derefaddrtmp(27)
_44 = { ESCAPED NONLOCAL } same as _12
_45 = { ESCAPED NONLOCAL } same as _14
normalize = { }
_46 = { ESCAPED NONLOCAL } same as _14
_47 = { ESCAPED NONLOCAL } same as _14
_48 = { ESCAPED NONLOCAL } same as _12
_49 = { ESCAPED NONLOCAL } same as _12
accum_176 = { ESCAPED NONLOCAL } same as _12
_177 = { ESCAPED NONLOCAL } same as _14
accum_178 = { ESCAPED NONLOCAL } same as exponent_difference_80
_179 = { NULL ESCAPED NONLOCAL }
carry_233 = { NULL ESCAPED NONLOCAL } same as _179
_180 = { NULL ESCAPED NONLOCAL } same as _179
accum_181 = { NULL ESCAPED NONLOCAL }
_182 = { NULL ESCAPED NONLOCAL }
_183 = { NULL ESCAPED NONLOCAL } same as _182
_184 = { NULL ESCAPED NONLOCAL }
carry_238 = { NULL ESCAPED NONLOCAL } same as _184
_185 = { NULL ESCAPED NONLOCAL } same as accum_181
i_103 = { NONLOCAL } same as operation
i_64 = { NONLOCAL } same as operation
carry.3_51 = { NULL ESCAPED NONLOCAL } same as _179
_52 = { ESCAPED NONLOCAL }
_54 = { ESCAPED NONLOCAL } same as _52
_55 = { ESCAPED NONLOCAL }
_56 = { ESCAPED NONLOCAL } same as _55
_57 = { NONLOCAL }
_187 = { NULL NONLOCAL } same as _163
i_186 = { NULL NONLOCAL } same as _163
_188 = { NULL NONLOCAL } same as _163
_189 = { NONLOCAL }
accum_190 = { ESCAPED NONLOCAL }
_191 = { ESCAPED NONLOCAL }
accum_192 = { ESCAPED NONLOCAL } same as accum_190
_193 = { NULL ESCAPED NONLOCAL }
carry_234 = { NULL ESCAPED NONLOCAL } same as _193
accum_194 = { ESCAPED NONLOCAL } same as accum_190
accum_195 = { ESCAPED NONLOCAL } same as accum_190
carry_237 = { ESCAPED NONLOCAL } same as _191
i_196 = { NULL NONLOCAL } same as _163
_58 = { ESCAPED NONLOCAL }
_59 = { ESCAPED NONLOCAL }
derefaddrtmp(169) = { NONLOCAL } same as operation
_60 = { ESCAPED NONLOCAL }
_61 = { ESCAPED NONLOCAL } same as _60
derefaddrtmp(172) = { NONLOCAL } same as operation
derefaddrtmp(173) = { NONLOCAL } same as operation
derefaddrtmp(174) = { NONLOCAL } same as operation
derefaddrtmp(175) = { NONLOCAL } same as operation
derefaddrtmp(176) = { NONLOCAL } same as operation
derefaddrtmp(177) = { NULL } same as derefaddrtmp(27)
i_198 = { NONLOCAL } same as operation
i_197 = { NONLOCAL } same as operation
choose_nan = { }
_199 = { ESCAPED NONLOCAL }
_200 = { ESCAPED NONLOCAL } same as _199
RoundInternalFPF.part.1 = { }


Alias information for AddSubInternalFPF

Aliased symbols

locy, UID D.2986, struct InternalFPF, is addressable
locx, UID D.2985, struct InternalFPF, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.2985 D.2986 } (escaped)

Flow-insensitive points-to information

_42, points-to non-local, points-to NULL, points-to vars: { }
_57, points-to non-local, points-to NULL, points-to vars: { }
x_73(D), points-to non-local, points-to NULL, points-to vars: { }
y_74(D), points-to non-local, points-to NULL, points-to vars: { }
z_75(D), points-to non-local, points-to NULL, points-to vars: { }
_128, points-to non-local, points-to NULL, points-to vars: { }
_130, points-to non-local, points-to NULL, points-to vars: { }
_132, points-to non-local, points-to NULL, points-to vars: { }
_134, points-to non-local, points-to NULL, points-to vars: { }
_136, points-to NULL, points-to vars: { D.2986 } (escaped)
_138, points-to NULL, points-to vars: { D.2985 } (escaped)
_165, points-to non-local, points-to NULL, points-to vars: { }
_189, points-to non-local, points-to NULL, points-to vars: { }
_210, points-to NULL, points-to vars: { D.2985 } (escaped)
_212, points-to NULL, points-to vars: { D.2986 } (escaped)

AddSubInternalFPF (unsigned char operation, struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  int i;
  int i;
  short unsigned int accum;
  unsigned int accum;
  short unsigned int b;
  short unsigned int c;
  int i;
  int n;
  int D.3453;
  unsigned int accum;
  short unsigned int c;
  unsigned int accum;
  short unsigned int b;
  short unsigned int c;
  void * D.3439;
  void * D.3435;
  void * D.3431;
  void * D.3427;
  void * D.3423;
  void * D.3419;
  struct InternalFPF locy;
  struct InternalFPF locx;
  int i;
  short unsigned int carry;
  short unsigned int borrow;
  int exponent_difference;
  unsigned char _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  short int _12;
  int _13;
  short int _14;
  int _15;
  unsigned char _16;
  unsigned char _17;
  unsigned char _18;
  short int _19;
  unsigned char _20;
  unsigned char _21;
  short int _22;
  int _23;
  unsigned char _24;
  unsigned char _25;
  unsigned char _26;
  short int _27;
  unsigned char _28;
  unsigned char _29;
  unsigned char _30;
  short unsigned int _31;
  int _32;
  short unsigned int _33;
  int _34;
  short unsigned int borrow.2_36;
  unsigned char _37;
  unsigned char _38;
  short unsigned int _39;
  int _40;
  short unsigned int[4] * _42;
  int _43;
  unsigned char _44;
  unsigned char _45;
  short unsigned int _46;
  int _47;
  short unsigned int _48;
  int _49;
  short unsigned int carry.3_51;
  short int _52;
  unsigned short _54;
  unsigned short _55;
  short int _56;
  short unsigned int[4] * _57;
  short unsigned int _58;
  short unsigned int _59;
  short unsigned int _60;
  signed short _61;
  long unsigned int _111;
  void * _128;
  long unsigned int _129;
  void * _130;
  long unsigned int _131;
  void * _132;
  long unsigned int _133;
  void * _134;
  void * _136;
  void * _138;
  unsigned int _142;
  short unsigned int _144;
  unsigned int _145;
  unsigned int _147;
  short unsigned int _148;
  short unsigned int _149;
  short unsigned int _150;
  unsigned int _153;
  short unsigned int _155;
  unsigned int _156;
  unsigned int _158;
  short unsigned int _159;
  short unsigned int _160;
  short unsigned int _161;
  long unsigned int _163;
  long unsigned int _164;
  short unsigned int * _165;
  short unsigned int _166;
  int _167;
  _Bool _172;
  int _173;
  unsigned int _177;
  short unsigned int _179;
  unsigned int _180;
  unsigned int _182;
  short unsigned int _183;
  short unsigned int _184;
  short unsigned int _185;
  long unsigned int _187;
  long unsigned int _188;
  short unsigned int * _189;
  short unsigned int _191;
  short unsigned int _193;
  unsigned char _199;
  unsigned char _200;

  <bb 2> [0.00%]:
  _1 = x_73(D)->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y_74(D)->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L63> [0.00%], case 0: <L67> [0.00%], case 1 ... 3: <L70> [0.00%], case 4: <L69> [0.00%], case 5: <L68> [0.00%], case 6 ... 7: <L71> [0.00%], case 8: <L70> [0.00%], case 9: <L69> [0.00%], case 10: <L68> [0.00%], case 11 ... 12: <L71> [0.00%], case 13: <L70> [0.00%], case 14: <L69> [0.00%], case 15 ... 17: <L68> [0.00%], case 18: <L72> [0.00%], case 19: <L69> [0.00%], case 20 ... 23: <L68> [0.00%], case 24: <L62> [0.00%]>

<L67> [100.00%]:
  _111 = __builtin_object_size (x_73(D), 0);
  _128 = __builtin___memmove_chk (x_73(D), z_75(D), 12, _111);
  _7 = x_73(D)->sign;
  _8 = y_74(D)->sign;
  _9 = _7 ^ _8;
  if (_9 != operation_83(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 47> (<L63>); [0.00%]

  <bb 4> [0.00%]:
  z_75(D)->sign = 0;
  goto <bb 47> (<L63>); [0.00%]

<L68> [100.00%]:
  _129 = __builtin_object_size (x_73(D), 0);
  _130 = __builtin___memmove_chk (x_73(D), z_75(D), 12, _129);
  goto <bb 47> (<L63>); [100.00%]

<L69> [100.00%]:
  _131 = __builtin_object_size (y_74(D), 0);
  _132 = __builtin___memmove_chk (y_74(D), z_75(D), 12, _131);
  goto <bb 47> (<L63>); [100.00%]

<L70> [100.00%]:
  _133 = __builtin_object_size (y_74(D), 0);
  _134 = __builtin___memmove_chk (y_74(D), z_75(D), 12, _133);
  _10 = z_75(D)->sign;
  _11 = _10 ^ operation_83(D);
  z_75(D)->sign = _11;
  goto <bb 47> (<L63>); [0.00%]

<L71> [100.00%]:
  _138 = __builtin_memmove (&locx, x_73(D), 12);
  _210 = _138;
  _136 = __builtin_memmove (&locy, y_74(D), 12);
  _212 = _136;
  _12 = locx.exp;
  _13 = (int) _12;
  _14 = locy.exp;
  _15 = (int) _14;
  exponent_difference_80 = _13 - _15;
  if (exponent_difference_80 == 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 9> [0.00%]:
  _16 = locx.type;
  if (_16 == 1)
    goto <bb 11>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  _17 = locy.type;
  if (_17 == 1)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  z_75(D)->type = 1;
  goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  z_75(D)->type = 2;

  <bb 13> [0.00%]:
  _18 = locx.sign;
  z_75(D)->sign = _18;
  _19 = locx.exp;
  z_75(D)->exp = _19;
  goto <bb 17>; [0.00%]

  <bb 14> [0.00%]:
  if (exponent_difference_80 > 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:
  StickyShiftRightMant (&locy, exponent_difference_80);
  _20 = locx.type;
  z_75(D)->type = _20;
  _21 = locx.sign;
  z_75(D)->sign = _21;
  _22 = locx.exp;
  z_75(D)->exp = _22;
  goto <bb 17>; [0.00%]

  <bb 16> [0.00%]:
  _23 = -exponent_difference_80;
  StickyShiftRightMant (&locx, _23);
  _24 = locy.type;
  z_75(D)->type = _24;
  _25 = locy.sign;
  _26 = _25 ^ operation_83(D);
  z_75(D)->sign = _26;
  _27 = locy.exp;
  z_75(D)->exp = _27;

  <bb 17> [0.00%]:
  _28 = locx.sign;
  _29 = locy.sign;
  _30 = _28 ^ _29;
  if (_30 != operation_83(D))
    goto <bb 19>; [0.00%]
  else
    goto <bb 33>; [0.00%]

  <bb 18> [100.00%]:
  _31 = locy.mantissa[i_62];
  _32 = (int) _31;
  _33 = locx.mantissa[i_62];
  _34 = (int) _33;
  accum_141 = (unsigned int) _33;
  _142 = (unsigned int) _31;
  accum_143 = accum_141 - _142;
  _144 = borrow_231;
  _145 = (unsigned int) borrow_231;
  accum_146 = accum_143 - _145;
  _147 = accum_146 >> 16;
  _148 = (short unsigned int) _147;
  _149 = _148 & 1;
  borrow_242 = _149;
  _150 = (short unsigned int) accum_146;
  MEM[(short unsigned int *)z_75(D)].mantissa[i_62] = _150;
  i_116 = i_62 + -1;

  <bb 19> [0.00%]:
  # i_62 = PHI <3(17), i_116(18)>
  # borrow_231 = PHI <0(17), borrow_242(18)>
  if (i_62 >= 0)
    goto <bb 18>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  borrow.2_36 = borrow_231;
  if (borrow_231 != 0)
    goto <bb 21>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 21> [0.00%]:
  _37 = locy.sign;
  _38 = _37 ^ operation_83(D);
  z_75(D)->sign = _38;
  goto <bb 23>; [0.00%]

  <bb 22> [100.00%]:
  _39 = z_75(D)->mantissa[i_63];
  _40 = (int) _39;
  _153 = (unsigned int) _39;
  accum_154 = -_153;
  _155 = borrow_232;
  _156 = (unsigned int) borrow_232;
  accum_157 = accum_154 - _156;
  _158 = accum_157 >> 16;
  _159 = (short unsigned int) _158;
  _160 = _159 & 1;
  borrow_241 = _160;
  _161 = (short unsigned int) accum_157;
  MEM[(short unsigned int *)z_75(D)].mantissa[i_63] = _161;
  i_110 = i_63 + -1;

  <bb 23> [0.00%]:
  # i_63 = PHI <3(21), i_110(22)>
  # borrow_232 = PHI <0(21), borrow_241(22)>
  if (i_63 >= 0)
    goto <bb 22>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 24> [20.00%]:
  _42 = &z_75(D)->mantissa;
  goto <bb 26>; [100.00%]

  <bb 25> [80.00%]:
  _163 = (long unsigned int) i_162;
  _164 = _163 * 2;
  _165 = _42 + _164;
  _166 = *_165;
  _167 = (int) _166;
  n_169 = _167 | n_168;
  i_170 = i_162 + 1;

  <bb 26> [100.00%]:
  # i_162 = PHI <0(24), i_170(25)>
  # n_168 = PHI <0(24), n_169(25)>
  if (i_162 <= 3)
    goto <bb 25>; [80.00%]
  else
    goto <bb 27>; [20.00%]

  <bb 27> [20.00%]:
  # n_171 = PHI <n_168(26)>
  _172 = n_168 == 0;
  _173 = (int) _172;
  _219 = _173;
  _43 = _173;
  if (n_168 == 0)
    goto <bb 28>; [0.00%]
  else
    goto <bb 29>; [0.00%]

  <bb 28> [0.00%]:
  z_75(D)->type = 0;
  z_75(D)->sign = 0;
  goto <bb 47> (<L63>); [0.00%]

  <bb 29> [0.00%]:
  _44 = locx.type;
  if (_44 == 2)
    goto <bb 31>; [0.00%]
  else
    goto <bb 30>; [0.00%]

  <bb 30> [0.00%]:
  _45 = locy.type;
  if (_45 == 2)
    goto <bb 31>; [0.00%]
  else
    goto <bb 47> (<L63>); [0.00%]

  <bb 31> [0.00%]:
  normalize (z_75(D));
  goto <bb 47> (<L63>); [0.00%]

  <bb 32> [100.00%]:
  _46 = locy.mantissa[i_64];
  _47 = (int) _46;
  _48 = locx.mantissa[i_64];
  _49 = (int) _48;
  accum_176 = (unsigned int) _48;
  _177 = (unsigned int) _46;
  accum_178 = accum_176 + _177;
  _179 = carry_233;
  _180 = (unsigned int) carry_233;
  accum_181 = accum_178 + _180;
  _182 = accum_181 >> 16;
  _183 = (short unsigned int) _182;
  _184 = _183 & 1;
  carry_238 = _184;
  _185 = (short unsigned int) accum_181;
  MEM[(short unsigned int *)z_75(D)].mantissa[i_64] = _185;
  i_103 = i_64 + -1;

  <bb 33> [0.00%]:
  # i_64 = PHI <3(17), i_103(32)>
  # carry_233 = PHI <0(17), carry_238(32)>
  if (i_64 >= 0)
    goto <bb 32>; [0.00%]
  else
    goto <bb 34>; [0.00%]

  <bb 34> [0.00%]:
  carry.3_51 = carry_233;
  if (carry_233 != 0)
    goto <bb 35>; [0.00%]
  else
    goto <bb 41>; [0.00%]

  <bb 35> [20.00%]:
  _52 = z_75(D)->exp;
  _54 = (unsigned short) _52;
  _55 = _54 + 1;
  _56 = (short int) _55;
  z_75(D)->exp = _56;
  _57 = &z_75(D)->mantissa;
  goto <bb 39>; [100.00%]

  <bb 36> [80.00%]:
  _187 = (long unsigned int) i_186;
  _188 = _187 * 2;
  _189 = _57 + _188;
  accum_190 = *_189;
  _191 = accum_190 & 1;
  accum_192 = accum_190 >> 1;
  _193 = carry_234;
  if (carry_234 != 0)
    goto <bb 37>; [50.00%]
  else
    goto <bb 38>; [50.00%]

  <bb 37> [40.00%]:
  accum_194 = accum_192 | 32768;

  <bb 38> [80.00%]:
  # accum_195 = PHI <accum_192(36), accum_194(37)>
  carry_237 = _191;
  *_189 = accum_195;
  i_196 = i_186 + 1;

  <bb 39> [100.00%]:
  # i_186 = PHI <0(35), i_196(38)>
  # carry_234 = PHI <0(35), carry_237(38)>
  if (i_186 <= 3)
    goto <bb 36>; [80.00%]
  else
    goto <bb 40>; [20.00%]

  <bb 40> [0.00%]:
  _58 = z_75(D)->mantissa[0];
  _59 = _58 | 32768;
  z_75(D)->mantissa[0] = _59;
  z_75(D)->type = 2;
  goto <bb 47> (<L63>); [0.00%]

  <bb 41> [0.00%]:
  _60 = z_75(D)->mantissa[0];
  _61 = (signed short) _60;
  if (_61 < 0)
    goto <bb 42>; [0.00%]
  else
    goto <bb 47> (<L63>); [0.00%]

  <bb 42> [0.00%]:
  z_75(D)->type = 2;
  goto <bb 47> (<L63>); [0.00%]

<L72> [25.00%]:
  z_75(D)->type = 4;
  z_75(D)->exp = 32767;
  z_75(D)->sign = 1;
  z_75(D)->mantissa[0] = 16384;
  goto <bb 45>; [100.00%]

  <bb 44> [75.00%]:
  z_75(D)->mantissa[i_197] = 0;
  i_198 = i_197 + 1;

  <bb 45> [100.00%]:
  # i_197 = PHI <1(43), i_198(44)>
  if (i_197 <= 3)
    goto <bb 44>; [75.00%]
  else
    goto <bb 47> (<L63>); [25.00%]

<L62> [0.00%]:
  choose_nan (x_73(D), y_74(D), z_75(D), 1);

<L63> [100.00%]:
  _199 = z_75(D)->type;
  _200 = _199 + 255;
  if (_200 <= 1)
    goto <bb 48>; [24.54%]
  else
    goto <bb 49>; [75.46%]

  <bb 48> [24.54%]:
  RoundInternalFPF.part.1 (z_75(D));

  <bb 49> [0.00%]:
  locx ={v} {CLOBBER};
  locy ={v} {CLOBBER};
  return;

}



;; Function MultiplyInternalFPF (MultiplyInternalFPF, funcdef_no=50, decl_uid=2823, cgraph_uid=50, symbol_order=50)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
x = &NONLOCAL
y = &NONLOCAL
z = &NONLOCAL
_1 = *x
_2 = _1
_3 = _2
_3 = &NONLOCAL
_4 = *y
_5 = _4
_6 = _3
_6 = _5
CALLUSED(18) = CALLUSED(18) + UNKNOWN
CALLUSED(18) = *CALLUSED(18) + UNKNOWN
CALLUSED(18) = x
CALLUSED(18) = &NULL
_74 = CALLUSED(18)
_74 = NONLOCAL
_66 = x
doubledereftmp(22) = *z + UNKNOWN
*x + UNKNOWN = doubledereftmp(22)
_7 = *z + 8
_8 = *y + 8
_9 = _7
_9 = _8
*z + 8 = _9
CALLUSED(26) = CALLUSED(26) + UNKNOWN
CALLUSED(26) = *CALLUSED(26) + UNKNOWN
CALLUSED(26) = y
CALLUSED(26) = &NULL
_65 = CALLUSED(26)
_65 = NONLOCAL
_103 = y
doubledereftmp(30) = *z + UNKNOWN
*y + UNKNOWN = doubledereftmp(30)
_10 = *z + 8
_11 = *x + 8
_12 = _10
_12 = _11
*z + 8 = _12
derefaddrtmp(34) = &NONLOCAL
*z = derefaddrtmp(34)
derefaddrtmp(35) = &NONLOCAL
*z + 16 = derefaddrtmp(35)
derefaddrtmp(36) = &NONLOCAL
*z + 8 = derefaddrtmp(36)
derefaddrtmp(37) = &NONLOCAL
*z + 32 = derefaddrtmp(37)
derefaddrtmp(38) = &NULL
*z + UNKNOWN = derefaddrtmp(38)
i_111 = i_110
i_111 = &NONLOCAL
i_110 = &NONLOCAL
i_110 = i_111
CALLUSED(41) = CALLUSED(41) + UNKNOWN
CALLUSED(41) = *CALLUSED(41) + UNKNOWN
CALLUSED(41) = x
CALLUSED(41) = &NULL
_104 = CALLUSED(41)
_104 = NONLOCAL
_105 = x
doubledereftmp(45) = *z + UNKNOWN
*x + UNKNOWN = doubledereftmp(45)
CALLUSED(46) = CALLUSED(46) + UNKNOWN
CALLUSED(46) = *CALLUSED(46) + UNKNOWN
CALLUSED(46) = y
CALLUSED(46) = &NULL
_106 = CALLUSED(46)
_106 = NONLOCAL
_107 = y
doubledereftmp(50) = *z + UNKNOWN
*y + UNKNOWN = doubledereftmp(50)
_109 = &locy
locy = *y + UNKNOWN
_230 = _109
_13 = x + UNKNOWN
_113 = i_112
_114 = _113
_114 = &NONLOCAL
_115 = _13 + UNKNOWN
_116 = *_115
_117 = _116
n_119 = _117
n_119 = n_118
i_120 = i_112
i_120 = &NONLOCAL
i_112 = &NULL
i_112 = i_120
n_118 = &NULL
n_118 = n_119
n_121 = n_118
_123 = _122
_231 = _123
_14 = _123
_15 = y + UNKNOWN
_125 = i_124
_126 = _125
_126 = &NONLOCAL
_127 = _15 + UNKNOWN
_128 = *_127
_129 = _128
n_131 = _129
n_131 = n_130
i_132 = i_124
i_132 = &NONLOCAL
i_124 = &NULL
i_124 = i_132
n_130 = &NULL
n_130 = n_131
n_133 = n_130
_135 = _134
_232 = _135
_16 = _135
derefaddrtmp(84) = &NONLOCAL
*z = derefaddrtmp(84)
derefaddrtmp(85) = &NULL
*z + 8 = derefaddrtmp(85)
derefaddrtmp(86) = &NONLOCAL
*z + 16 = derefaddrtmp(86)
derefaddrtmp(87) = &NULL
*z + UNKNOWN = derefaddrtmp(87)
i_137 = i_136
i_137 = &NONLOCAL
i_136 = &NULL
i_136 = i_137
_17 = *x
_18 = *y
derefaddrtmp(92) = &NONLOCAL
*z = derefaddrtmp(92)
derefaddrtmp(93) = &NONLOCAL
*z = derefaddrtmp(93)
_19 = *x + 8
_20 = *y + 8
_21 = _19
_21 = _20
*z + 8 = _21
_22 = *x + 16
_23 = _22
_24 = *y + 16
_25 = _24
_26 = _23
_26 = _25
_27 = _26
*z + 16 = _27
derefaddrtmp(103) = &NULL
*z + UNKNOWN = derefaddrtmp(103)
extra_bits = &NULL
i_92 = i_46
i_92 = &NONLOCAL
i_46 = &NULL
i_46 = i_92
_139 = i_138
_140 = _139
_140 = &NONLOCAL
_141 = &locy
accum_142 = *_141
_143 = accum_142 + UNKNOWN
accum_144 = accum_142
accum_144 = &NONLOCAL
_145 = carry_262
accum_146 = accum_144
accum_146 = &NONLOCAL
accum_147 = accum_144
accum_147 = accum_146
carry_278 = _143
*_141 = accum_147
i_148 = i_138
i_148 = &NONLOCAL
i_138 = &NULL
i_138 = i_148
carry_262 = &NULL
carry_262 = carry_278
carry.5_28 = carry_262
_29 = *x + UNKNOWN
_30 = _29
_31 = *z + UNKNOWN
_32 = _31
accum_151 = _31
_152 = _29
accum_153 = accum_151
accum_153 = _152
_154 = carry_263
_155 = carry_263
accum_156 = accum_153
accum_156 = _155
_157 = accum_156
_157 = &NONLOCAL
_158 = _157
_159 = _158 + UNKNOWN
carry_275 = _159
_160 = accum_156
*z + UNKNOWN = _160
j_86 = j_48
j_86 = &NONLOCAL
j_48 = &NONLOCAL
j_48 = j_86
carry_263 = &NULL
carry_263 = carry_275
carry_264 = carry_263
carry_264 = &NULL
_34 = z + UNKNOWN
_173 = i_172
_174 = _173
_174 = &NONLOCAL
_175 = _34 + UNKNOWN
accum_176 = *_175
_177 = accum_176 + UNKNOWN
accum_178 = accum_176
accum_178 = &NONLOCAL
_179 = carry_265
accum_180 = accum_178
accum_180 = &NONLOCAL
accum_181 = accum_178
accum_181 = accum_180
carry_277 = _177
*_175 = accum_181
i_182 = i_172
i_182 = &NONLOCAL
i_172 = &NULL
i_172 = i_182
carry_265 = carry_264
carry_265 = carry_277
_162 = i_161
_163 = _162
_163 = &NONLOCAL
_164 = &extra_bits
accum_165 = *_164
_166 = accum_165 + UNKNOWN
accum_167 = accum_165
accum_167 = &NONLOCAL
_168 = carry_266
accum_169 = accum_167
accum_169 = &NONLOCAL
accum_170 = accum_167
accum_170 = accum_169
carry_276 = _166
*_164 = accum_170
i_171 = i_161
i_171 = &NONLOCAL
i_161 = &NULL
i_161 = i_171
carry_266 = carry_265
carry_266 = carry_276
i_89 = i_47
i_89 = &NONLOCAL
i_47 = &NULL
i_47 = i_89
_195 = i_194
_196 = _195
_196 = &NONLOCAL
_197 = &extra_bits
accum_198 = *_197
_199 = accum_198 + UNKNOWN
accum_200 = accum_198
accum_200 = &NONLOCAL
_201 = carry_267
accum_202 = accum_200
accum_202 = &NONLOCAL
accum_203 = accum_200
accum_203 = accum_202
carry_271 = _199
*_197 = accum_203
i_204 = i_194
i_204 = &NONLOCAL
i_194 = &NONLOCAL
i_194 = i_204
carry_267 = &NULL
carry_267 = carry_271
_35 = z + UNKNOWN
_184 = i_183
_185 = _184
_185 = &NONLOCAL
_186 = _35 + UNKNOWN
accum_187 = *_186
_188 = accum_187 + UNKNOWN
accum_189 = accum_187
accum_189 = &NONLOCAL
_190 = carry_268
accum_191 = accum_189
accum_191 = &NONLOCAL
accum_192 = accum_189
accum_192 = accum_191
carry_270 = _188
*_186 = accum_192
i_193 = i_183
i_193 = &NONLOCAL
i_183 = &NONLOCAL
i_183 = i_193
carry_268 = carry_267
carry_268 = carry_270
_36 = *z + 16
_38 = _36
_39 = _38
_39 = &NONLOCAL
_40 = _39
*z + 16 = _40
_41 = *z + 32
_42 = _41
_206 = i_205
_207 = _206
_207 = &NONLOCAL
_208 = &extra_bits
_209 = *_208
_210 = _209
n_212 = _210
n_212 = n_211
i_213 = i_205
i_213 = &NONLOCAL
i_205 = &NULL
i_205 = i_213
n_211 = &NULL
n_211 = n_212
n_214 = n_211
_216 = _215
_237 = _216
_43 = _216
_44 = *z + 80
_45 = _44
_45 = &NONLOCAL
*z + 80 = _45
ESCAPED = x
ESCAPED = y
ESCAPED = z
ESCAPED = &NULL
_217 = *z
_218 = _217
_218 = &NONLOCAL
ESCAPED = z

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"x"[label="x = { 5 }"];
"y"[label="y = { 5 }"];
"z"[label="z = { 5 }"];
"_1";
"_2";
"_3"[label="_3 = { 5 }"];
"_4";
"_5";
"_6";
"__builtin_object_size";
"CALLUSED(18)"[label="CALLUSED(18) = { 1 }"];
"CALLCLOBBERED(19)";
"_74";
"_66";
"doubledereftmp(22)";
"_7";
"_8";
"_9";
"CALLUSED(26)"[label="CALLUSED(26) = { 1 }"];
"CALLCLOBBERED(27)";
"_65";
"_103";
"doubledereftmp(30)";
"_10";
"_11";
"_12";
"derefaddrtmp(34)"[label="derefaddrtmp(34) = { 5 }"];
"derefaddrtmp(35)"[label="derefaddrtmp(35) = { 5 }"];
"derefaddrtmp(36)"[label="derefaddrtmp(36) = { 5 }"];
"derefaddrtmp(37)"[label="derefaddrtmp(37) = { 5 }"];
"derefaddrtmp(38)"[label="derefaddrtmp(38) = { 1 }"];
"i_111"[label="i_111 = { 5 }"];
"CALLUSED(41)"[label="CALLUSED(41) = { 1 }"];
"CALLCLOBBERED(42)";
"_104";
"_105";
"doubledereftmp(45)";
"CALLUSED(46)"[label="CALLUSED(46) = { 1 }"];
"CALLCLOBBERED(47)";
"_106";
"_107";
"doubledereftmp(50)";
"_109"[label="_109 = { 52 }"];
"locy";
"_230";
"_13";
"_113";
"i_112"[label="i_112 = { 1 5 }"];
"_114"[label="_114 = { 5 }"];
"_115";
"_116";
"_117";
"n_119"[label="n_119 = { 1 }"];
"n_121";
"_122";
"_123";
"_231";
"_14";
"_15";
"_125";
"i_124"[label="i_124 = { 1 5 }"];
"_126"[label="_126 = { 5 }"];
"_127";
"_128";
"_129";
"n_131"[label="n_131 = { 1 }"];
"n_133";
"_134";
"_135";
"_232";
"_16";
"derefaddrtmp(84)"[label="derefaddrtmp(84) = { 5 }"];
"derefaddrtmp(85)"[label="derefaddrtmp(85) = { 1 }"];
"derefaddrtmp(86)"[label="derefaddrtmp(86) = { 5 }"];
"derefaddrtmp(87)"[label="derefaddrtmp(87) = { 1 }"];
"i_137"[label="i_137 = { 1 5 }"];
"_17";
"_18";
"derefaddrtmp(92)"[label="derefaddrtmp(92) = { 5 }"];
"derefaddrtmp(93)"[label="derefaddrtmp(93) = { 5 }"];
"_19";
"_20";
"_21";
"_22";
"_23";
"_24";
"_25";
"_26";
"_27";
"derefaddrtmp(103)"[label="derefaddrtmp(103) = { 1 }"];
"extra_bits"[label="extra_bits = { 1 }"];
"i_92"[label="i_92 = { 1 5 }"];
"_139";
"i_138"[label="i_138 = { 1 5 }"];
"_140"[label="_140 = { 5 }"];
"_141"[label="_141 = { 52 }"];
"accum_142"[label="accum_142 = { 5 }"];
"_143";
"_145";
"carry_262"[label="carry_262 = { 1 }"];
"carry_278";
"carry.5_28";
"_29";
"_30";
"_31";
"_32";
"accum_151";
"_152";
"accum_153";
"_154";
"carry_263"[label="carry_263 = { 1 }"];
"_155";
"accum_156";
"_157"[label="_157 = { 5 }"];
"_158";
"_159";
"carry_275";
"_160";
"j_86"[label="j_86 = { 5 }"];
"carry_264"[label="carry_264 = { 1 }"];
"_34";
"_173";
"i_172"[label="i_172 = { 1 5 }"];
"_174"[label="_174 = { 5 }"];
"_175";
"accum_176"[label="accum_176 = { 5 }"];
"_177";
"_179";
"carry_265";
"carry_277";
"_162";
"i_161"[label="i_161 = { 1 5 }"];
"_163"[label="_163 = { 5 }"];
"_164"[label="_164 = { 104 }"];
"accum_165"[label="accum_165 = { 5 }"];
"_166";
"_168";
"carry_266";
"carry_276";
"i_89"[label="i_89 = { 1 5 }"];
"_195";
"i_194"[label="i_194 = { 5 }"];
"_196"[label="_196 = { 5 }"];
"_197"[label="_197 = { 104 }"];
"accum_198"[label="accum_198 = { 5 }"];
"_199";
"_201";
"carry_267"[label="carry_267 = { 1 }"];
"carry_271";
"_35";
"_184";
"i_183"[label="i_183 = { 5 }"];
"_185"[label="_185 = { 5 }"];
"_186";
"accum_187"[label="accum_187 = { 5 }"];
"_188";
"_190";
"carry_268";
"carry_270";
"_36";
"_38";
"_39"[label="_39 = { 5 }"];
"_40";
"_41";
"_42";
"_206";
"i_205"[label="i_205 = { 1 5 }"];
"_207"[label="_207 = { 5 }"];
"_208"[label="_208 = { 104 }"];
"_209";
"_210";
"n_212"[label="n_212 = { 1 }"];
"n_214";
"_215";
"_216";
"_237";
"_43";
"_44";
"_45"[label="_45 = { 5 }"];
"choose_nan";
"_217";
"_218"[label="_218 = { 5 }"];
"RoundInternalFPF.part.1";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*x";
"*y";
"*z";
"*_1";
"*_2";
"*_3";
"*_4";
"*_5";
"*_6";
"*__builtin_object_size";
"*CALLUSED(18)";
"*CALLCLOBBERED(19)";
"*_74";
"*_66";
"*doubledereftmp(22)";
"*_7";
"*_8";
"*_9";
"*CALLUSED(26)";
"*CALLCLOBBERED(27)";
"*_65";
"*_103";
"*doubledereftmp(30)";
"*_10";
"*_11";
"*_12";
"*derefaddrtmp(34)";
"*derefaddrtmp(35)";
"*derefaddrtmp(36)";
"*derefaddrtmp(37)";
"*derefaddrtmp(38)";
"*i_111";
"*i_110";
"*CALLUSED(41)";
"*CALLCLOBBERED(42)";
"*_104";
"*_105";
"*doubledereftmp(45)";
"*CALLUSED(46)";
"*CALLCLOBBERED(47)";
"*_106";
"*_107";
"*doubledereftmp(50)";
"*_109";
"*locy";
"*_230";
"*_13";
"*_113";
"*i_112";
"*_114";
"*_115";
"*_116";
"*_117";
"*n_119";
"*n_118";
"*i_120";
"*n_121";
"*_122";
"*_123";
"*_231";
"*_14";
"*_15";
"*_125";
"*i_124";
"*_126";
"*_127";
"*_128";
"*_129";
"*n_131";
"*n_130";
"*i_132";
"*n_133";
"*_134";
"*_135";
"*_232";
"*_16";
"*derefaddrtmp(84)";
"*derefaddrtmp(85)";
"*derefaddrtmp(86)";
"*derefaddrtmp(87)";
"*i_137";
"*i_136";
"*_17";
"*_18";
"*derefaddrtmp(92)";
"*derefaddrtmp(93)";
"*_19";
"*_20";
"*_21";
"*_22";
"*_23";
"*_24";
"*_25";
"*_26";
"*_27";
"*derefaddrtmp(103)";
"*extra_bits";
"*i_92";
"*i_46";
"*_139";
"*i_138";
"*_140";
"*accum_142";
"*_143";
"*accum_144";
"*_145";
"*carry_262";
"*accum_146";
"*accum_147";
"*carry_278";
"*i_148";
"*carry.5_28";
"*_29";
"*_30";
"*_31";
"*_32";
"*accum_151";
"*_152";
"*accum_153";
"*_154";
"*carry_263";
"*_155";
"*accum_156";
"*_157";
"*_158";
"*_159";
"*carry_275";
"*_160";
"*j_86";
"*j_48";
"*carry_264";
"*_34";
"*_173";
"*i_172";
"*_174";
"*accum_176";
"*_177";
"*accum_178";
"*_179";
"*carry_265";
"*accum_180";
"*accum_181";
"*carry_277";
"*i_182";
"*_162";
"*i_161";
"*_163";
"*accum_165";
"*_166";
"*accum_167";
"*_168";
"*carry_266";
"*accum_169";
"*accum_170";
"*carry_276";
"*i_171";
"*i_89";
"*i_47";
"*_195";
"*i_194";
"*_196";
"*accum_198";
"*_199";
"*accum_200";
"*_201";
"*carry_267";
"*accum_202";
"*accum_203";
"*carry_271";
"*i_204";
"*_35";
"*_184";
"*i_183";
"*_185";
"*accum_187";
"*_188";
"*accum_189";
"*_190";
"*carry_268";
"*accum_191";
"*accum_192";
"*carry_270";
"*i_193";
"*_36";
"*_38";
"*_39";
"*_40";
"*_41";
"*_42";
"*_206";
"*i_205";
"*_207";
"*_208";
"*_209";
"*_210";
"*n_212";
"*n_211";
"*i_213";
"*n_214";
"*_215";
"*_216";
"*_237";
"*_43";
"*_44";
"*_45";
"*choose_nan";
"*_217";
"*_218";
"*RoundInternalFPF.part.1";

  // Edges in the constraint graph:
"x" -> "ESCAPED";
"y" -> "ESCAPED";
"z" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"*x" -> "_1";
"_1" -> "_2";
"_2" -> "_3";
"*y" -> "_4";
"_4" -> "_5";
"_3" -> "_6";
"_5" -> "_6";
"x" -> "CALLUSED(18)";
"NONLOCAL" -> "_74";
"CALLUSED(18)" -> "_74";
"x" -> "_66";
"_7" -> "_9";
"_8" -> "_9";
"y" -> "CALLUSED(26)";
"NONLOCAL" -> "_65";
"CALLUSED(26)" -> "_65";
"y" -> "_103";
"_10" -> "_12";
"_11" -> "_12";
"i_111" -> "i_111";
"i_111" -> "i_111";
"x" -> "CALLUSED(41)";
"NONLOCAL" -> "_104";
"CALLUSED(41)" -> "_104";
"x" -> "_105";
"y" -> "CALLUSED(46)";
"NONLOCAL" -> "_106";
"CALLUSED(46)" -> "_106";
"y" -> "_107";
"_109" -> "_230";
"i_112" -> "_113";
"i_112" -> "i_112";
"i_112" -> "i_112";
"_113" -> "_114";
"*_115" -> "_116";
"_116" -> "_117";
"_117" -> "n_119";
"n_119" -> "n_119";
"n_119" -> "n_119";
"n_119" -> "n_121";
"_122" -> "_123";
"_123" -> "_231";
"_123" -> "_14";
"i_124" -> "_125";
"i_124" -> "i_124";
"i_124" -> "i_124";
"_125" -> "_126";
"*_127" -> "_128";
"_128" -> "_129";
"_129" -> "n_131";
"n_131" -> "n_131";
"n_131" -> "n_131";
"n_131" -> "n_133";
"_134" -> "_135";
"_135" -> "_232";
"_135" -> "_16";
"i_137" -> "i_137";
"i_137" -> "i_137";
"*x" -> "_17";
"*y" -> "_18";
"_19" -> "_21";
"_20" -> "_21";
"_22" -> "_23";
"_24" -> "_25";
"_23" -> "_26";
"_25" -> "_26";
"_26" -> "_27";
"i_92" -> "i_92";
"i_92" -> "i_92";
"i_138" -> "_139";
"i_138" -> "i_138";
"i_138" -> "i_138";
"_139" -> "_140";
"accum_142" -> "accum_142";
"accum_142" -> "accum_142";
"accum_142" -> "accum_142";
"accum_142" -> "accum_142";
"accum_142" -> "accum_142";
"carry_262" -> "_145";
"carry_278" -> "carry_262";
"_143" -> "carry_278";
"carry_262" -> "carry.5_28";
"_29" -> "_30";
"_31" -> "_32";
"_31" -> "accum_151";
"_29" -> "_152";
"accum_151" -> "accum_153";
"_152" -> "accum_153";
"carry_263" -> "_154";
"carry_275" -> "carry_263";
"carry_263" -> "_155";
"accum_153" -> "accum_156";
"_155" -> "accum_156";
"accum_156" -> "_157";
"_157" -> "_158";
"_159" -> "carry_275";
"accum_156" -> "_160";
"j_86" -> "j_86";
"j_86" -> "j_86";
"carry_263" -> "carry_264";
"i_172" -> "_173";
"i_172" -> "i_172";
"i_172" -> "i_172";
"_173" -> "_174";
"accum_176" -> "accum_176";
"accum_176" -> "accum_176";
"accum_176" -> "accum_176";
"accum_176" -> "accum_176";
"accum_176" -> "accum_176";
"carry_265" -> "_179";
"carry_264" -> "carry_265";
"carry_277" -> "carry_265";
"_177" -> "carry_277";
"i_161" -> "_162";
"i_161" -> "i_161";
"i_161" -> "i_161";
"_162" -> "_163";
"accum_165" -> "accum_165";
"accum_165" -> "accum_165";
"accum_165" -> "accum_165";
"accum_165" -> "accum_165";
"accum_165" -> "accum_165";
"carry_266" -> "_168";
"carry_265" -> "carry_266";
"carry_276" -> "carry_266";
"_166" -> "carry_276";
"i_89" -> "i_89";
"i_89" -> "i_89";
"i_194" -> "_195";
"i_194" -> "i_194";
"i_194" -> "i_194";
"_195" -> "_196";
"accum_198" -> "accum_198";
"accum_198" -> "accum_198";
"accum_198" -> "accum_198";
"accum_198" -> "accum_198";
"accum_198" -> "accum_198";
"carry_267" -> "_201";
"carry_271" -> "carry_267";
"_199" -> "carry_271";
"i_183" -> "_184";
"i_183" -> "i_183";
"i_183" -> "i_183";
"_184" -> "_185";
"accum_187" -> "accum_187";
"accum_187" -> "accum_187";
"accum_187" -> "accum_187";
"accum_187" -> "accum_187";
"accum_187" -> "accum_187";
"carry_268" -> "_190";
"carry_267" -> "carry_268";
"carry_270" -> "carry_268";
"_188" -> "carry_270";
"_36" -> "_38";
"_38" -> "_39";
"_39" -> "_40";
"_41" -> "_42";
"i_205" -> "_206";
"i_205" -> "i_205";
"i_205" -> "i_205";
"_206" -> "_207";
"*_208" -> "_209";
"_209" -> "_210";
"_210" -> "n_212";
"n_212" -> "n_212";
"n_212" -> "n_212";
"n_212" -> "n_214";
"_215" -> "_216";
"_216" -> "_237";
"_216" -> "_43";
"_44" -> "_45";
"*z" -> "_217";
"_217" -> "_218";
"NONLOCAL" -> "*ESCAPED";
"derefaddrtmp(34)" -> "*z";
"derefaddrtmp(84)" -> "*z";
"derefaddrtmp(92)" -> "*z";
"derefaddrtmp(93)" -> "*z";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"x" [label="\N\n_1 = *x\l_4 = *x\ldoubledereftmp(22) = *x + UNKNOWN\l_7 = *x + 8\l_8 = *x + 8\ldoubledereftmp(30) = *x + UNKNOWN\l_10 = *x + 8\l_11 = *x + 8\ldoubledereftmp(45) = *x + UNKNOWN\ldoubledereftmp(50) = *x + UNKNOWN\llocy = *x + UNKNOWN\l_13 = x + UNKNOWN\l_15 = x + UNKNOWN\l_19 = *x + 8\l_20 = *x + 8\l_22 = *x + 16\l_24 = *x + 16\l_29 = *x + UNKNOWN\l_31 = *x + UNKNOWN\l_34 = x + UNKNOWN\l_35 = x + UNKNOWN\l_36 = *x + 16\l_41 = *x + 32\l_44 = *x + 80\l_217 = *x\l*x + UNKNOWN = doubledereftmp(22)\l*x + UNKNOWN = doubledereftmp(30)\l*x + UNKNOWN = derefaddrtmp(38)\l*x + UNKNOWN = doubledereftmp(45)\l*x + UNKNOWN = doubledereftmp(50)\l*x + UNKNOWN = accum_156\l*x = x\l*x + 8 = x\l*x + 8 = _9\l*x + 8 = _12\l*x + 8 = derefaddrtmp(38)\l*x + 8 = _21\l*x + 16 = x\l*x + 16 = _26\l*x + 16 = _39\l*x + 32 = x\l*x + 80 = _45\l"];
"_1";
"_3";
"_4";
"_6";
"__builtin_object_size";
"CALLUSED(18)" [label="\N\nCALLUSED(18) = CALLUSED(18) + UNKNOWN\lCALLUSED(18) = *CALLUSED(18) + UNKNOWN\l"];
"CALLCLOBBERED(19)";
"_74";
"doubledereftmp(22)";
"_7";
"_8";
"_9";
"CALLUSED(26)" [label="\N\nCALLUSED(26) = CALLUSED(26) + UNKNOWN\lCALLUSED(26) = *CALLUSED(26) + UNKNOWN\l"];
"CALLCLOBBERED(27)";
"_65";
"doubledereftmp(30)";
"_10";
"_11";
"_12";
"derefaddrtmp(38)";
"CALLUSED(41)" [label="\N\nCALLUSED(41) = CALLUSED(41) + UNKNOWN\lCALLUSED(41) = *CALLUSED(41) + UNKNOWN\l"];
"CALLCLOBBERED(42)";
"_104";
"doubledereftmp(45)";
"CALLUSED(46)" [label="\N\nCALLUSED(46) = CALLUSED(46) + UNKNOWN\lCALLUSED(46) = *CALLUSED(46) + UNKNOWN\l"];
"CALLCLOBBERED(47)";
"_106";
"doubledereftmp(50)";
"_109" [label="\N\naccum_142 = *_109\l*_109 = accum_142\l"];
"locy";
"_13" [label="\N\n_115 = _13 + UNKNOWN\l"];
"_113";
"_115" [label="\N\n_116 = *_115\l"];
"_116";
"n_119";
"_122";
"_123";
"_231";
"_14";
"_15" [label="\N\n_127 = _15 + UNKNOWN\l"];
"_127" [label="\N\n_128 = *_127\l"];
"_128";
"n_131";
"_134";
"_135";
"_232";
"_16";
"_19";
"_20";
"_21";
"_22";
"_24";
"_26";
"extra_bits";
"accum_142" [label="\N\n_143 = accum_142 + UNKNOWN\l"];
"_143";
"_145";
"_29";
"_31";
"accum_153";
"_154";
"accum_156";
"_157" [label="\N\n_159 = _157 + UNKNOWN\l"];
"_159";
"_34" [label="\N\n_175 = _34 + UNKNOWN\l"];
"_175" [label="\N\naccum_176 = *_175\l*_175 = accum_176\l"];
"accum_176" [label="\N\n_177 = accum_176 + UNKNOWN\l"];
"_177";
"_179";
"_164" [label="\N\naccum_165 = *_164\laccum_198 = *_164\l_209 = *_164\l*_164 = accum_165\l*_164 = accum_198\l"];
"accum_165" [label="\N\n_166 = accum_165 + UNKNOWN\l_199 = accum_165 + UNKNOWN\l"];
"_166";
"_168";
"_199";
"_201";
"_35" [label="\N\n_186 = _35 + UNKNOWN\l"];
"_186" [label="\N\naccum_187 = *_186\l*_186 = accum_187\l"];
"accum_187" [label="\N\n_188 = accum_187 + UNKNOWN\l"];
"_188";
"_190";
"_36";
"_39";
"_41";
"_209";
"n_212";
"_215";
"_216";
"_237";
"_43";
"_44";
"_45";
"choose_nan";
"_217";
"RoundInternalFPF.part.1";

  // Edges in the constraint graph:
"NONLOCAL" -> "_74";
"NONLOCAL" -> "_65";
"NONLOCAL" -> "_104";
"NONLOCAL" -> "_106";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(18)";
"STOREDANYTHING" -> "doubledereftmp(22)";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_8";
"STOREDANYTHING" -> "CALLUSED(26)";
"STOREDANYTHING" -> "doubledereftmp(30)";
"STOREDANYTHING" -> "_10";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "CALLUSED(41)";
"STOREDANYTHING" -> "doubledereftmp(45)";
"STOREDANYTHING" -> "CALLUSED(46)";
"STOREDANYTHING" -> "doubledereftmp(50)";
"STOREDANYTHING" -> "locy";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_115";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_127";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "_22";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "extra_bits";
"STOREDANYTHING" -> "accum_142";
"STOREDANYTHING" -> "_143";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "_31";
"STOREDANYTHING" -> "_159";
"STOREDANYTHING" -> "_34";
"STOREDANYTHING" -> "_175";
"STOREDANYTHING" -> "accum_176";
"STOREDANYTHING" -> "_177";
"STOREDANYTHING" -> "accum_165";
"STOREDANYTHING" -> "_166";
"STOREDANYTHING" -> "accum_165";
"STOREDANYTHING" -> "_199";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_186";
"STOREDANYTHING" -> "accum_187";
"STOREDANYTHING" -> "_188";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_41";
"STOREDANYTHING" -> "_44";
"x" -> "ESCAPED";
"x" -> "CALLUSED(18)";
"x" -> "CALLUSED(26)";
"x" -> "CALLUSED(41)";
"x" -> "CALLUSED(46)";
"_1" -> "_3";
"_3" -> "_6";
"_4" -> "_6";
"CALLUSED(18)" -> "_74";
"_7" -> "_9";
"_8" -> "_9";
"CALLUSED(26)" -> "_65";
"_10" -> "_12";
"_11" -> "_12";
"CALLUSED(41)" -> "_104";
"CALLUSED(46)" -> "_106";
"_116" -> "n_119";
"_128" -> "n_131";
"_19" -> "_21";
"_20" -> "_21";
"_22" -> "_26";
"_24" -> "_26";
"_143" -> "_145";
"_29" -> "accum_153";
"_31" -> "accum_153";
"accum_153" -> "accum_156";
"_154" -> "accum_156";
"_154" -> "_179";
"accum_156" -> "_157";
"_159" -> "_154";
"_177" -> "_179";
"_179" -> "_168";
"_166" -> "_168";
"_199" -> "_201";
"_201" -> "_190";
"_188" -> "_190";
"_36" -> "_39";
"_209" -> "n_212";
"_44" -> "_45";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"x" [label="\N\n_1 = *x\l_4 = *x\ldoubledereftmp(22) = *x + UNKNOWN\l_7 = *x + 8\l_8 = *x + 8\ldoubledereftmp(30) = *x + UNKNOWN\l_10 = *x + 8\l_11 = *x + 8\ldoubledereftmp(45) = *x + UNKNOWN\ldoubledereftmp(50) = *x + UNKNOWN\laccum_142 = *x + UNKNOWN\l_13 = x + UNKNOWN\l_15 = x + UNKNOWN\l_19 = *x + 8\l_20 = *x + 8\l_22 = *x + 16\l_24 = *x + 16\l_29 = *x + UNKNOWN\l_31 = *x + UNKNOWN\l_34 = x + UNKNOWN\l_35 = x + UNKNOWN\l_36 = *x + 16\l_41 = *x + 32\l_44 = *x + 80\l_217 = *x\l*x + UNKNOWN = doubledereftmp(22)\l*x + UNKNOWN = doubledereftmp(30)\l*x + UNKNOWN = derefaddrtmp(38)\l*x + UNKNOWN = doubledereftmp(45)\l*x + UNKNOWN = doubledereftmp(50)\l*x + UNKNOWN = accum_156\l*x = x\l*x + 8 = x\l*x + 8 = _9\l*x + 8 = _12\l*x + 8 = derefaddrtmp(38)\l*x + 8 = _21\l*x + 16 = x\l*x + 16 = _26\l*x + 16 = _39\l*x + 32 = x\l*x + 80 = _45\l"];
"_1";
"_3";
"_4";
"_6";
"__builtin_object_size";
"CALLUSED(18)" [label="\N\nCALLUSED(18) = CALLUSED(18) + UNKNOWN\lCALLUSED(18) = *CALLUSED(18) + UNKNOWN\l"];
"CALLCLOBBERED(19)";
"_74";
"doubledereftmp(22)";
"_7";
"_8";
"_9";
"CALLUSED(26)" [label="\N\nCALLUSED(26) = CALLUSED(26) + UNKNOWN\lCALLUSED(26) = *CALLUSED(26) + UNKNOWN\l"];
"CALLCLOBBERED(27)";
"_65";
"doubledereftmp(30)";
"_10";
"_11";
"_12";
"derefaddrtmp(38)";
"CALLUSED(41)" [label="\N\nCALLUSED(41) = CALLUSED(41) + UNKNOWN\lCALLUSED(41) = *CALLUSED(41) + UNKNOWN\l"];
"CALLCLOBBERED(42)";
"_104";
"doubledereftmp(45)";
"CALLUSED(46)" [label="\N\nCALLUSED(46) = CALLUSED(46) + UNKNOWN\lCALLUSED(46) = *CALLUSED(46) + UNKNOWN\l"];
"CALLCLOBBERED(47)";
"_106";
"doubledereftmp(50)";
"_109" [label="\N\naccum_142 = *_109\l*_109 = accum_142\l"];
"_13" [label="\N\n_115 = _13 + UNKNOWN\l"];
"_113";
"_115" [label="\N\n_116 = *_115\l"];
"_116";
"n_119";
"_122";
"_123";
"_231";
"_14";
"_15" [label="\N\n_127 = _15 + UNKNOWN\l"];
"_127" [label="\N\n_128 = *_127\l"];
"_128";
"n_131";
"_134";
"_135";
"_232";
"_16";
"_19";
"_20";
"_21";
"_22";
"_24";
"_26";
"accum_142" [label="\N\n_143 = accum_142 + UNKNOWN\l"];
"_143";
"_145";
"_29";
"_31";
"accum_153";
"_154";
"accum_156";
"_157" [label="\N\n_159 = _157 + UNKNOWN\l"];
"_159";
"_34" [label="\N\n_175 = _34 + UNKNOWN\l"];
"_175" [label="\N\naccum_176 = *_175\l*_175 = accum_176\l"];
"accum_176" [label="\N\n_177 = accum_176 + UNKNOWN\l"];
"_177";
"_179";
"_164" [label="\N\naccum_165 = *_164\laccum_165 = *_164\l_209 = *_164\l*_164 = accum_165\l*_164 = accum_165\l"];
"accum_165" [label="\N\n_166 = accum_165 + UNKNOWN\l_199 = accum_165 + UNKNOWN\l"];
"_166";
"_168";
"_199";
"_201";
"_35" [label="\N\n_186 = _35 + UNKNOWN\l"];
"_186" [label="\N\naccum_187 = *_186\l*_186 = accum_187\l"];
"accum_187" [label="\N\n_188 = accum_187 + UNKNOWN\l"];
"_188";
"_190";
"_36";
"_39";
"_41";
"_209";
"n_212";
"_215";
"_216";
"_237";
"_43";
"_44";
"_45";
"choose_nan";
"_217";
"RoundInternalFPF.part.1";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(18)";
"STOREDANYTHING" -> "doubledereftmp(22)";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_8";
"STOREDANYTHING" -> "CALLUSED(26)";
"STOREDANYTHING" -> "doubledereftmp(30)";
"STOREDANYTHING" -> "_10";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "CALLUSED(41)";
"STOREDANYTHING" -> "doubledereftmp(45)";
"STOREDANYTHING" -> "CALLUSED(46)";
"STOREDANYTHING" -> "doubledereftmp(50)";
"STOREDANYTHING" -> "accum_142";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_115";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_127";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "_22";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "accum_165";
"STOREDANYTHING" -> "accum_142";
"STOREDANYTHING" -> "_143";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "_31";
"STOREDANYTHING" -> "_159";
"STOREDANYTHING" -> "_34";
"STOREDANYTHING" -> "_175";
"STOREDANYTHING" -> "accum_176";
"STOREDANYTHING" -> "_177";
"STOREDANYTHING" -> "accum_165";
"STOREDANYTHING" -> "_166";
"STOREDANYTHING" -> "accum_165";
"STOREDANYTHING" -> "_199";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_186";
"STOREDANYTHING" -> "accum_187";
"STOREDANYTHING" -> "_188";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_41";
"STOREDANYTHING" -> "_44";
"x" -> "ESCAPED";
"x" -> "CALLUSED(18)";
"x" -> "CALLUSED(26)";
"x" -> "CALLUSED(41)";
"x" -> "CALLUSED(46)";
"_1" -> "_3";
"_3" -> "_6";
"_4" -> "_6";
"CALLUSED(18)" -> "_74";
"doubledereftmp(22)" -> "ESCAPED";
"_7" -> "_9";
"_8" -> "_9";
"_9" -> "ESCAPED";
"CALLUSED(26)" -> "_65";
"doubledereftmp(30)" -> "ESCAPED";
"_10" -> "_12";
"_11" -> "_12";
"_12" -> "ESCAPED";
"derefaddrtmp(38)" -> "ESCAPED";
"CALLUSED(41)" -> "_104";
"doubledereftmp(45)" -> "ESCAPED";
"CALLUSED(46)" -> "_106";
"doubledereftmp(50)" -> "ESCAPED";
"_116" -> "n_119";
"_128" -> "n_131";
"_19" -> "_21";
"_20" -> "_21";
"_21" -> "ESCAPED";
"_22" -> "_26";
"_24" -> "_26";
"_26" -> "ESCAPED";
"_143" -> "_145";
"_29" -> "accum_153";
"_31" -> "accum_153";
"accum_153" -> "accum_156";
"_154" -> "accum_156";
"_154" -> "_179";
"accum_156" -> "ESCAPED";
"accum_156" -> "_157";
"_159" -> "_154";
"accum_176" -> "ESCAPED";
"_177" -> "_179";
"_179" -> "_168";
"accum_165" -> "_209";
"_166" -> "_168";
"_199" -> "_201";
"_201" -> "_190";
"accum_187" -> "ESCAPED";
"accum_187" -> "_74";
"accum_187" -> "_65";
"accum_187" -> "_104";
"accum_187" -> "_106";
"accum_187" -> "_116";
"accum_187" -> "_128";
"accum_187" -> "accum_176";
"_188" -> "_190";
"_36" -> "_39";
"_39" -> "ESCAPED";
"_209" -> "n_212";
"_44" -> "_45";
"_45" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as accum_187
STOREDANYTHING = { }
INTEGER = { ANYTHING }
x = { NONLOCAL }
y = { NONLOCAL } same as x
z = { NONLOCAL } same as x
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _4
_6 = { ESCAPED NONLOCAL }
__builtin_object_size = { }
CALLUSED(18) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(19) = { }
_74 = { NULL ESCAPED NONLOCAL }
_66 = { NONLOCAL } same as x
doubledereftmp(22) = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL }
CALLUSED(26) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(27) = { }
_65 = { NULL ESCAPED NONLOCAL }
_103 = { NONLOCAL } same as x
doubledereftmp(30) = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL }
derefaddrtmp(34) = { NONLOCAL } same as x
derefaddrtmp(35) = { NONLOCAL } same as x
derefaddrtmp(36) = { NONLOCAL } same as x
derefaddrtmp(37) = { NONLOCAL } same as x
derefaddrtmp(38) = { NULL }
i_111 = { NONLOCAL } same as x
i_110 = { NONLOCAL } same as x
CALLUSED(41) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(42) = { }
_104 = { NULL ESCAPED NONLOCAL }
_105 = { NONLOCAL } same as x
doubledereftmp(45) = { ESCAPED NONLOCAL }
CALLUSED(46) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(47) = { }
_106 = { NULL ESCAPED NONLOCAL }
_107 = { NONLOCAL } same as x
doubledereftmp(50) = { ESCAPED NONLOCAL }
_109 = { locy }
locy = { ESCAPED NONLOCAL } same as accum_142
_230 = { locy } same as _109
_13 = { NONLOCAL }
_113 = { NULL NONLOCAL }
i_112 = { NULL NONLOCAL } same as _113
_114 = { NULL NONLOCAL } same as _113
_115 = { NONLOCAL }
_116 = { ESCAPED NONLOCAL }
_117 = { ESCAPED NONLOCAL } same as _116
n_119 = { NULL ESCAPED NONLOCAL }
n_118 = { NULL ESCAPED NONLOCAL } same as n_119
i_120 = { NULL NONLOCAL } same as _113
n_121 = { NULL ESCAPED NONLOCAL } same as n_119
_122 = { }
_123 = { }
_231 = { }
_14 = { }
_15 = { NONLOCAL }
_125 = { NULL NONLOCAL } same as _113
i_124 = { NULL NONLOCAL } same as _113
_126 = { NULL NONLOCAL } same as _113
_127 = { NONLOCAL }
_128 = { ESCAPED NONLOCAL }
_129 = { ESCAPED NONLOCAL } same as _128
n_131 = { NULL ESCAPED NONLOCAL }
n_130 = { NULL ESCAPED NONLOCAL } same as n_131
i_132 = { NULL NONLOCAL } same as _113
n_133 = { NULL ESCAPED NONLOCAL } same as n_131
_134 = { }
_135 = { }
_232 = { }
_16 = { }
derefaddrtmp(84) = { NONLOCAL } same as x
derefaddrtmp(85) = { NULL } same as derefaddrtmp(38)
derefaddrtmp(86) = { NONLOCAL } same as x
derefaddrtmp(87) = { NULL } same as derefaddrtmp(38)
i_137 = { NULL NONLOCAL } same as _113
i_136 = { NULL NONLOCAL } same as _113
_17 = { ESCAPED NONLOCAL } same as _1
_18 = { ESCAPED NONLOCAL } same as _4
derefaddrtmp(92) = { NONLOCAL } same as x
derefaddrtmp(93) = { NONLOCAL } same as x
_19 = { ESCAPED NONLOCAL }
_20 = { ESCAPED NONLOCAL }
_21 = { ESCAPED NONLOCAL }
_22 = { ESCAPED NONLOCAL }
_23 = { ESCAPED NONLOCAL } same as _22
_24 = { ESCAPED NONLOCAL }
_25 = { ESCAPED NONLOCAL } same as _24
_26 = { ESCAPED NONLOCAL }
_27 = { ESCAPED NONLOCAL } same as _26
derefaddrtmp(103) = { NULL } same as derefaddrtmp(38)
extra_bits = { NULL NONLOCAL } same as accum_165
i_92 = { NULL NONLOCAL } same as _113
i_46 = { NULL NONLOCAL } same as _113
_139 = { NULL NONLOCAL } same as _113
i_138 = { NULL NONLOCAL } same as _113
_140 = { NULL NONLOCAL } same as _113
_141 = { locy } same as _109
accum_142 = { ESCAPED NONLOCAL }
_143 = { ESCAPED NONLOCAL }
accum_144 = { ESCAPED NONLOCAL } same as accum_142
_145 = { NULL ESCAPED NONLOCAL }
carry_262 = { NULL ESCAPED NONLOCAL } same as _145
accum_146 = { ESCAPED NONLOCAL } same as accum_142
accum_147 = { ESCAPED NONLOCAL } same as accum_142
carry_278 = { ESCAPED NONLOCAL } same as _143
i_148 = { NULL NONLOCAL } same as _113
carry.5_28 = { NULL ESCAPED NONLOCAL } same as _145
_29 = { ESCAPED NONLOCAL }
_30 = { ESCAPED NONLOCAL } same as _29
_31 = { ESCAPED NONLOCAL }
_32 = { ESCAPED NONLOCAL } same as _31
accum_151 = { ESCAPED NONLOCAL } same as _31
_152 = { ESCAPED NONLOCAL } same as _29
accum_153 = { ESCAPED NONLOCAL }
_154 = { NULL ESCAPED NONLOCAL }
carry_263 = { NULL ESCAPED NONLOCAL } same as _154
_155 = { NULL ESCAPED NONLOCAL } same as _154
accum_156 = { NULL ESCAPED NONLOCAL }
_157 = { NULL ESCAPED NONLOCAL }
_158 = { NULL ESCAPED NONLOCAL } same as _157
_159 = { NULL ESCAPED NONLOCAL }
carry_275 = { NULL ESCAPED NONLOCAL } same as _159
_160 = { NULL ESCAPED NONLOCAL } same as accum_156
j_86 = { NONLOCAL } same as x
j_48 = { NONLOCAL } same as x
carry_264 = { NULL ESCAPED NONLOCAL } same as _154
_34 = { NONLOCAL }
_173 = { NULL NONLOCAL } same as _113
i_172 = { NULL NONLOCAL } same as _113
_174 = { NULL NONLOCAL } same as _113
_175 = { NONLOCAL }
accum_176 = { ESCAPED NONLOCAL }
_177 = { ESCAPED NONLOCAL }
accum_178 = { ESCAPED NONLOCAL } same as accum_176
_179 = { NULL ESCAPED NONLOCAL }
carry_265 = { NULL ESCAPED NONLOCAL } same as _179
accum_180 = { ESCAPED NONLOCAL } same as accum_176
accum_181 = { ESCAPED NONLOCAL } same as accum_176
carry_277 = { ESCAPED NONLOCAL } same as _177
i_182 = { NULL NONLOCAL } same as _113
_162 = { NULL NONLOCAL } same as _113
i_161 = { NULL NONLOCAL } same as _113
_163 = { NULL NONLOCAL } same as _113
_164 = { extra_bits }
accum_165 = { NULL NONLOCAL }
_166 = { NULL NONLOCAL }
accum_167 = { NULL NONLOCAL } same as accum_165
_168 = { NULL ESCAPED NONLOCAL }
carry_266 = { NULL ESCAPED NONLOCAL } same as _168
accum_169 = { NULL NONLOCAL } same as accum_165
accum_170 = { NULL NONLOCAL } same as accum_165
carry_276 = { NULL NONLOCAL } same as _166
i_171 = { NULL NONLOCAL } same as _113
i_89 = { NULL NONLOCAL } same as _113
i_47 = { NULL NONLOCAL } same as _113
_195 = { NONLOCAL } same as x
i_194 = { NONLOCAL } same as x
_196 = { NONLOCAL } same as x
_197 = { extra_bits } same as _164
accum_198 = { NULL NONLOCAL } same as accum_165
_199 = { NULL NONLOCAL }
accum_200 = { NULL NONLOCAL } same as accum_165
_201 = { NULL NONLOCAL }
carry_267 = { NULL NONLOCAL } same as _201
accum_202 = { NULL NONLOCAL } same as accum_165
accum_203 = { NULL NONLOCAL } same as accum_165
carry_271 = { NULL NONLOCAL } same as _199
i_204 = { NONLOCAL } same as x
_35 = { NONLOCAL }
_184 = { NONLOCAL } same as x
i_183 = { NONLOCAL } same as x
_185 = { NONLOCAL } same as x
_186 = { NONLOCAL }
accum_187 = { ESCAPED NONLOCAL }
_188 = { ESCAPED NONLOCAL }
accum_189 = { ESCAPED NONLOCAL } same as accum_187
_190 = { NULL ESCAPED NONLOCAL }
carry_268 = { NULL ESCAPED NONLOCAL } same as _190
accum_191 = { ESCAPED NONLOCAL } same as accum_187
accum_192 = { ESCAPED NONLOCAL } same as accum_187
carry_270 = { ESCAPED NONLOCAL } same as _188
i_193 = { NONLOCAL } same as x
_36 = { ESCAPED NONLOCAL }
_38 = { ESCAPED NONLOCAL } same as _36
_39 = { ESCAPED NONLOCAL }
_40 = { ESCAPED NONLOCAL } same as _39
_41 = { ESCAPED NONLOCAL }
_42 = { ESCAPED NONLOCAL } same as _41
_206 = { NULL NONLOCAL } same as _113
i_205 = { NULL NONLOCAL } same as _113
_207 = { NULL NONLOCAL } same as _113
_208 = { extra_bits } same as _164
_209 = { NULL NONLOCAL }
_210 = { NULL NONLOCAL } same as _209
n_212 = { NULL NONLOCAL }
n_211 = { NULL NONLOCAL } same as n_212
i_213 = { NULL NONLOCAL } same as _113
n_214 = { NULL NONLOCAL } same as n_212
_215 = { }
_216 = { }
_237 = { }
_43 = { }
_44 = { ESCAPED NONLOCAL }
_45 = { ESCAPED NONLOCAL }
choose_nan = { }
_217 = { ESCAPED NONLOCAL }
_218 = { ESCAPED NONLOCAL } same as _217
RoundInternalFPF.part.1 = { }


Alias information for MultiplyInternalFPF

Aliased symbols

locy, UID D.3031, struct InternalFPF, is addressable
extra_bits, UID D.3030, short unsigned int[4], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_13, points-to non-local, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to NULL, points-to vars: { }
_34, points-to non-local, points-to NULL, points-to vars: { }
_35, points-to non-local, points-to NULL, points-to vars: { }
x_59(D), points-to non-local, points-to NULL, points-to vars: { }
y_60(D), points-to non-local, points-to NULL, points-to vars: { }
z_61(D), points-to non-local, points-to NULL, points-to vars: { }
_66, points-to non-local, points-to NULL, points-to vars: { }
_103, points-to non-local, points-to NULL, points-to vars: { }
_105, points-to non-local, points-to NULL, points-to vars: { }
_107, points-to non-local, points-to NULL, points-to vars: { }
_109, points-to NULL, points-to vars: { D.3031 }
_115, points-to non-local, points-to NULL, points-to vars: { }
_127, points-to non-local, points-to NULL, points-to vars: { }
_141, points-to NULL, points-to vars: { D.3031 }
_164, points-to NULL, points-to vars: { D.3030 }
_175, points-to non-local, points-to NULL, points-to vars: { }
_186, points-to non-local, points-to NULL, points-to vars: { }
_197, points-to NULL, points-to vars: { D.3030 }
_208, points-to NULL, points-to vars: { D.3030 }
_230, points-to NULL, points-to vars: { D.3031 }

MultiplyInternalFPF (struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  int i;
  int n;
  int D.3534;
  int i;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  unsigned int accum;
  short unsigned int b;
  short unsigned int c;
  int i;
  short unsigned int accum;
  int i;
  int i;
  int n;
  int D.3502;
  int i;
  int n;
  int D.3498;
  int i;
  void * D.3492;
  void * D.3488;
  void * D.3484;
  void * D.3480;
  void * D.3476;
  struct InternalFPF locy;
  short unsigned int extra_bits[4];
  short unsigned int carry;
  int j;
  int i;
  unsigned char _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  unsigned char _12;
  short unsigned int[4] * _13;
  int _14;
  short unsigned int[4] * _15;
  int _16;
  unsigned char _17;
  unsigned char _18;
  unsigned char _19;
  unsigned char _20;
  unsigned char _21;
  short int _22;
  unsigned short _23;
  short int _24;
  unsigned short _25;
  unsigned short _26;
  short int _27;
  short unsigned int carry.5_28;
  short unsigned int _29;
  int _30;
  short unsigned int _31;
  int _32;
  short unsigned int[4] * _34;
  short unsigned int[4] * _35;
  short int _36;
  unsigned short _38;
  unsigned short _39;
  short int _40;
  short unsigned int _41;
  signed short _42;
  int _43;
  short unsigned int _44;
  short unsigned int _45;
  long unsigned int _65;
  void * _66;
  long unsigned int _74;
  void * _103;
  long unsigned int _104;
  void * _105;
  long unsigned int _106;
  void * _107;
  void * _109;
  long unsigned int _113;
  long unsigned int _114;
  short unsigned int * _115;
  short unsigned int _116;
  int _117;
  _Bool _122;
  int _123;
  long unsigned int _125;
  long unsigned int _126;
  short unsigned int * _127;
  short unsigned int _128;
  int _129;
  _Bool _134;
  int _135;
  long unsigned int _139;
  long unsigned int _140;
  short unsigned int * _141;
  short unsigned int _143;
  short unsigned int _145;
  unsigned int _152;
  short unsigned int _154;
  unsigned int _155;
  unsigned int _157;
  short unsigned int _158;
  short unsigned int _159;
  short unsigned int _160;
  long unsigned int _162;
  long unsigned int _163;
  short unsigned int * _164;
  short unsigned int _166;
  short unsigned int _168;
  long unsigned int _173;
  long unsigned int _174;
  short unsigned int * _175;
  short unsigned int _177;
  short unsigned int _179;
  long unsigned int _184;
  long unsigned int _185;
  short unsigned int * _186;
  short unsigned int _188;
  short unsigned int _190;
  long unsigned int _195;
  long unsigned int _196;
  short unsigned int * _197;
  short unsigned int _199;
  short unsigned int _201;
  long unsigned int _206;
  long unsigned int _207;
  short unsigned int * _208;
  short unsigned int _209;
  int _210;
  _Bool _215;
  int _216;
  unsigned char _217;
  unsigned char _218;

  <bb 2> [0.00%]:
  _1 = x_59(D)->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y_60(D)->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L49> [0.00%], case 0 ... 2: <L53> [0.00%], case 3: <L55> [0.00%], case 4: <L57> [0.00%], case 5: <L54> [0.00%], case 6 ... 7: <L58> [0.00%], case 8: <L54> [0.00%], case 9: <L57> [0.00%], case 10: <L54> [0.00%], case 11 ... 12: <L58> [0.00%], case 13: <L54> [0.00%], case 14: <L57> [0.00%], case 15: <L55> [0.00%], case 16 ... 18: <L53> [0.00%], case 19: <L57> [0.00%], case 20 ... 23: <L56> [0.00%], case 24: <L48> [0.00%]>

<L53> [100.00%]:
  _74 = __builtin_object_size (x_59(D), 0);
  _66 = __builtin___memmove_chk (x_59(D), z_61(D), 12, _74);
  _7 = z_61(D)->sign;
  _8 = y_60(D)->sign;
  _9 = _7 ^ _8;
  z_61(D)->sign = _9;
  goto <bb 62> (<L49>); [0.00%]

<L54> [100.00%]:
  _65 = __builtin_object_size (y_60(D), 0);
  _103 = __builtin___memmove_chk (y_60(D), z_61(D), 12, _65);
  _10 = z_61(D)->sign;
  _11 = x_59(D)->sign;
  _12 = _10 ^ _11;
  z_61(D)->sign = _12;
  goto <bb 62> (<L49>); [0.00%]

<L55> [25.00%]:
  z_61(D)->type = 4;
  z_61(D)->exp = 32767;
  z_61(D)->sign = 1;
  z_61(D)->mantissa[0] = 16384;
  goto <bb 7>; [100.00%]

  <bb 6> [75.00%]:
  z_61(D)->mantissa[i_110] = 0;
  i_111 = i_110 + 1;

  <bb 7> [100.00%]:
  # i_110 = PHI <1(5), i_111(6)>
  if (i_110 <= 3)
    goto <bb 6>; [75.00%]
  else
    goto <bb 62> (<L49>); [25.00%]

<L56> [100.00%]:
  _104 = __builtin_object_size (x_59(D), 0);
  _105 = __builtin___memmove_chk (x_59(D), z_61(D), 12, _104);
  goto <bb 62> (<L49>); [100.00%]

<L57> [100.00%]:
  _106 = __builtin_object_size (y_60(D), 0);
  _107 = __builtin___memmove_chk (y_60(D), z_61(D), 12, _106);
  goto <bb 62> (<L49>); [100.00%]

<L58> [100.00%]:
  _109 = __builtin_memmove (&locy, y_60(D), 12);
  _230 = _109;
  _13 = &x_59(D)->mantissa;
  goto <bb 12>; [100.00%]

  <bb 11> [80.00%]:
  _113 = (long unsigned int) i_112;
  _114 = _113 * 2;
  _115 = _13 + _114;
  _116 = *_115;
  _117 = (int) _116;
  n_119 = _117 | n_118;
  i_120 = i_112 + 1;

  <bb 12> [100.00%]:
  # i_112 = PHI <0(10), i_120(11)>
  # n_118 = PHI <0(10), n_119(11)>
  if (i_112 <= 3)
    goto <bb 11>; [80.00%]
  else
    goto <bb 13>; [20.00%]

  <bb 13> [20.00%]:
  # n_121 = PHI <n_118(12)>
  _122 = n_118 == 0;
  _123 = (int) _122;
  _231 = _123;
  _14 = _123;
  if (n_118 == 0)
    goto <bb 18>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [20.00%]:
  _15 = &y_60(D)->mantissa;
  goto <bb 16>; [100.00%]

  <bb 15> [80.00%]:
  _125 = (long unsigned int) i_124;
  _126 = _125 * 2;
  _127 = _15 + _126;
  _128 = *_127;
  _129 = (int) _128;
  n_131 = _129 | n_130;
  i_132 = i_124 + 1;

  <bb 16> [100.00%]:
  # i_124 = PHI <0(14), i_132(15)>
  # n_130 = PHI <0(14), n_131(15)>
  if (i_124 <= 3)
    goto <bb 15>; [80.00%]
  else
    goto <bb 17>; [20.00%]

  <bb 17> [20.00%]:
  # n_133 = PHI <n_130(16)>
  _134 = n_130 == 0;
  _135 = (int) _134;
  _232 = _135;
  _16 = _135;
  if (n_130 == 0)
    goto <bb 18>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 18> [20.00%]:
  z_61(D)->type = 3;
  z_61(D)->sign = 0;
  z_61(D)->exp = -32767;
  goto <bb 20>; [100.00%]

  <bb 19> [80.00%]:
  z_61(D)->mantissa[i_136] = 0;
  i_137 = i_136 + 1;

  <bb 20> [100.00%]:
  # i_136 = PHI <0(18), i_137(19)>
  if (i_136 <= 3)
    goto <bb 19>; [80.00%]
  else
    goto <bb 21>; [20.00%]

  <bb 21> [0.00%]:
  _17 = x_59(D)->type;
  if (_17 == 1)
    goto <bb 23>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 22> [0.00%]:
  _18 = y_60(D)->type;
  if (_18 == 1)
    goto <bb 23>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 23> [0.00%]:
  z_61(D)->type = 1;
  goto <bb 25>; [0.00%]

  <bb 24> [0.00%]:
  z_61(D)->type = 2;

  <bb 25> [0.00%]:
  _19 = x_59(D)->sign;
  _20 = y_60(D)->sign;
  _21 = _19 ^ _20;
  z_61(D)->sign = _21;
  _22 = x_59(D)->exp;
  _23 = (unsigned short) _22;
  _24 = y_60(D)->exp;
  _25 = (unsigned short) _24;
  _26 = _23 + _25;
  _27 = (short int) _26;
  z_61(D)->exp = _27;
  goto <bb 27>; [0.00%]

  <bb 26> [0.00%]:
  z_61(D)->mantissa[i_46] = 0;
  extra_bits[i_46] = 0;
  i_92 = i_46 + 1;

  <bb 27> [0.00%]:
  # i_46 = PHI <0(25), i_92(26)>
  if (i_46 <= 3)
    goto <bb 26>; [0.00%]
  else
    goto <bb 45>; [0.00%]

  <bb 28> [80.00%]:
  _139 = (long unsigned int) i_138;
  _140 = _139 * 2;
  _141 = &locy.mantissa + _140;
  accum_142 = *_141;
  _143 = accum_142 & 1;
  accum_144 = accum_142 >> 1;
  _145 = carry_262;
  if (carry_262 != 0)
    goto <bb 29>; [50.00%]
  else
    goto <bb 30>; [50.00%]

  <bb 29> [40.00%]:
  accum_146 = accum_144 | 32768;

  <bb 30> [80.00%]:
  # accum_147 = PHI <accum_144(28), accum_146(29)>
  carry_278 = _143;
  *_141 = accum_147;
  i_148 = i_138 + 1;

  <bb 31> [100.00%]:
  # i_138 = PHI <0(45), i_148(30)>
  # carry_262 = PHI <0(45), carry_278(30)>
  if (i_138 <= 3)
    goto <bb 28>; [80.00%]
  else
    goto <bb 32>; [20.00%]

  <bb 32> [0.00%]:
  carry.5_28 = carry_262;
  if (carry_262 != 0)
    goto <bb 34>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 33> [100.00%]:
  _29 = x_59(D)->mantissa[j_48];
  _30 = (int) _29;
  _31 = z_61(D)->mantissa[j_48];
  _32 = (int) _31;
  accum_151 = (unsigned int) _31;
  _152 = (unsigned int) _29;
  accum_153 = accum_151 + _152;
  _154 = carry_263;
  _155 = (unsigned int) carry_263;
  accum_156 = accum_153 + _155;
  _157 = accum_156 >> 16;
  _158 = (short unsigned int) _157;
  _159 = _158 & 1;
  carry_275 = _159;
  _160 = (short unsigned int) accum_156;
  MEM[(short unsigned int *)z_61(D)].mantissa[j_48] = _160;
  j_86 = j_48 + -1;

  <bb 34> [0.00%]:
  # j_48 = PHI <3(32), j_86(33)>
  # carry_263 = PHI <0(32), carry_275(33)>
  if (j_48 >= 0)
    goto <bb 33>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 35> [20.00%]:
  # carry_264 = PHI <carry_263(34), 0(32)>
  _34 = &z_61(D)->mantissa;
  goto <bb 39>; [100.00%]

  <bb 36> [80.00%]:
  _173 = (long unsigned int) i_172;
  _174 = _173 * 2;
  _175 = _34 + _174;
  accum_176 = *_175;
  _177 = accum_176 & 1;
  accum_178 = accum_176 >> 1;
  _179 = carry_265;
  if (carry_265 != 0)
    goto <bb 37>; [50.00%]
  else
    goto <bb 38>; [50.00%]

  <bb 37> [40.00%]:
  accum_180 = accum_178 | 32768;

  <bb 38> [80.00%]:
  # accum_181 = PHI <accum_178(36), accum_180(37)>
  carry_277 = _177;
  *_175 = accum_181;
  i_182 = i_172 + 1;

  <bb 39> [100.00%]:
  # i_172 = PHI <0(35), i_182(38)>
  # carry_265 = PHI <carry_264(35), carry_277(38)>
  if (i_172 <= 3)
    goto <bb 36>; [80.00%]
  else
    goto <bb 43>; [20.00%]

  <bb 40> [80.00%]:
  _162 = (long unsigned int) i_161;
  _163 = _162 * 2;
  _164 = &extra_bits + _163;
  accum_165 = *_164;
  _166 = accum_165 & 1;
  accum_167 = accum_165 >> 1;
  _168 = carry_266;
  if (carry_266 != 0)
    goto <bb 41>; [50.00%]
  else
    goto <bb 42>; [50.00%]

  <bb 41> [40.00%]:
  accum_169 = accum_167 | 32768;

  <bb 42> [80.00%]:
  # accum_170 = PHI <accum_167(40), accum_169(41)>
  carry_276 = _166;
  *_164 = accum_170;
  i_171 = i_161 + 1;

  <bb 43> [100.00%]:
  # i_161 = PHI <0(39), i_171(42)>
  # carry_266 = PHI <carry_265(39), carry_276(42)>
  if (i_161 <= 3)
    goto <bb 40>; [80.00%]
  else
    goto <bb 44>; [20.00%]

  <bb 44> [0.00%]:
  i_89 = i_47 + 1;

  <bb 45> [0.00%]:
  # i_47 = PHI <0(27), i_89(44)>
  if (i_47 <= 63)
    goto <bb 31>; [0.00%]
  else
    goto <bb 56>; [0.00%]

  <bb 46> [80.00%]:
  _195 = (long unsigned int) i_194;
  _196 = _195 * 2;
  _197 = &extra_bits + _196;
  accum_198 = *_197;
  _199 = accum_198 & 32768;
  accum_200 = accum_198 << 1;
  _201 = carry_267;
  if (carry_267 != 0)
    goto <bb 47>; [50.00%]
  else
    goto <bb 48>; [50.00%]

  <bb 47> [40.00%]:
  accum_202 = accum_200 | 1;

  <bb 48> [80.00%]:
  # accum_203 = PHI <accum_200(46), accum_202(47)>
  carry_271 = _199;
  *_197 = accum_203;
  i_204 = i_194 + -1;

  <bb 49> [100.00%]:
  # i_194 = PHI <3(56), i_204(48)>
  # carry_267 = PHI <0(56), carry_271(48)>
  if (i_194 >= 0)
    goto <bb 46>; [80.00%]
  else
    goto <bb 50>; [20.00%]

  <bb 50> [0.00%]:
  _35 = &z_61(D)->mantissa;
  goto <bb 54>; [100.00%]

  <bb 51> [80.00%]:
  _184 = (long unsigned int) i_183;
  _185 = _184 * 2;
  _186 = _35 + _185;
  accum_187 = *_186;
  _188 = accum_187 & 32768;
  accum_189 = accum_187 << 1;
  _190 = carry_268;
  if (carry_268 != 0)
    goto <bb 52>; [50.00%]
  else
    goto <bb 53>; [50.00%]

  <bb 52> [40.00%]:
  accum_191 = accum_189 | 1;

  <bb 53> [80.00%]:
  # accum_192 = PHI <accum_189(51), accum_191(52)>
  carry_270 = _188;
  *_186 = accum_192;
  i_193 = i_183 + -1;

  <bb 54> [100.00%]:
  # i_183 = PHI <3(50), i_193(53)>
  # carry_268 = PHI <carry_267(50), carry_270(53)>
  if (i_183 >= 0)
    goto <bb 51>; [80.00%]
  else
    goto <bb 55>; [20.00%]

  <bb 55> [0.00%]:
  _36 = z_61(D)->exp;
  _38 = (unsigned short) _36;
  _39 = _38 + 65535;
  _40 = (short int) _39;
  z_61(D)->exp = _40;

  <bb 56> [0.00%]:
  _41 = z_61(D)->mantissa[0];
  _42 = (signed short) _41;
  if (_42 >= 0)
    goto <bb 49>; [0.00%]
  else
    goto <bb 58>; [0.00%]

  <bb 57> [80.00%]:
  _206 = (long unsigned int) i_205;
  _207 = _206 * 2;
  _208 = &extra_bits + _207;
  _209 = *_208;
  _210 = (int) _209;
  n_212 = _210 | n_211;
  i_213 = i_205 + 1;

  <bb 58> [100.00%]:
  # i_205 = PHI <0(56), i_213(57)>
  # n_211 = PHI <0(56), n_212(57)>
  if (i_205 <= 3)
    goto <bb 57>; [80.00%]
  else
    goto <bb 59>; [20.00%]

  <bb 59> [20.00%]:
  # n_214 = PHI <n_211(58)>
  _215 = n_211 == 0;
  _216 = (int) _215;
  _237 = _216;
  _43 = _216;
  if (n_211 == 0)
    goto <bb 60>; [0.00%]
  else
    goto <bb 62> (<L49>); [0.00%]

  <bb 60> [0.00%]:
  _44 = z_61(D)->mantissa[3];
  _45 = _44 | 1;
  z_61(D)->mantissa[3] = _45;
  goto <bb 62> (<L49>); [0.00%]

<L48> [0.00%]:
  choose_nan (x_59(D), y_60(D), z_61(D), 0);

<L49> [100.00%]:
  _217 = z_61(D)->type;
  _218 = _217 + 255;
  if (_218 <= 1)
    goto <bb 63>; [24.54%]
  else
    goto <bb 64>; [75.46%]

  <bb 63> [24.54%]:
  RoundInternalFPF.part.1 (z_61(D));

  <bb 64> [0.00%]:
  extra_bits ={v} {CLOBBER};
  locy ={v} {CLOBBER};
  return;

}



;; Function DoEmFloatIteration (DoEmFloatIteration, funcdef_no=35, decl_uid=2773, cgraph_uid=35, symbol_order=35)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
abase = &NONLOCAL
bbase = &NONLOCAL
cbase = &NONLOCAL
arraysize = &NONLOCAL
loops = &NONLOCAL
elapsed_36 = NONLOCAL
_1 = i_30 + UNKNOWN
jtable.2859 = NONLOCAL
_2 = jtable.2859
_3 = _2
_4 = i_30
_4 = &NONLOCAL
_5 = cbase + UNKNOWN
_6 = i_30
_6 = &NONLOCAL
_7 = bbase + UNKNOWN
_8 = i_30
_8 = &NONLOCAL
_9 = abase + UNKNOWN
ESCAPED = &NULL
ESCAPED = _9
ESCAPED = _7
ESCAPED = _5
_10 = i_30
_10 = &NONLOCAL
_11 = cbase + UNKNOWN
_12 = i_30
_12 = &NONLOCAL
_13 = bbase + UNKNOWN
_14 = i_30
_14 = &NONLOCAL
_15 = abase + UNKNOWN
ESCAPED = &NONLOCAL
ESCAPED = _15
ESCAPED = _13
ESCAPED = _11
_16 = i_30
_16 = &NONLOCAL
_17 = cbase + UNKNOWN
_18 = i_30
_18 = &NONLOCAL
_19 = bbase + UNKNOWN
_20 = i_30
_20 = &NONLOCAL
_21 = abase + UNKNOWN
ESCAPED = _21
ESCAPED = _19
ESCAPED = _17
_22 = i_30
_22 = &NONLOCAL
_23 = cbase + UNKNOWN
_24 = i_30
_24 = &NONLOCAL
_25 = bbase + UNKNOWN
_26 = i_30
_26 = &NONLOCAL
_27 = abase + UNKNOWN
ESCAPED = _27
ESCAPED = _25
ESCAPED = _23
i_50 = i_30
i_50 = &NONLOCAL
i_30 = &NULL
i_30 = i_50
loops_29 = loops
loops_29 = loops_38
loops.1_28 = loops_29
loops_38 = loops_29
loops_38 = &NONLOCAL
ESCAPED = elapsed_36
_40 = NONLOCAL
ESCAPED = _40

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"abase"[label="abase = { 5 }"];
"bbase"[label="bbase = { 5 }"];
"cbase"[label="cbase = { 5 }"];
"arraysize"[label="arraysize = { 5 }"];
"loops"[label="loops = { 5 }"];
"StartStopwatch";
"elapsed_36";
"_1";
"i_30"[label="i_30 = { 1 5 }"];
"_2";
"jtable.2859";
"_3";
"_4"[label="_4 = { 5 }"];
"_5";
"_6"[label="_6 = { 5 }"];
"_7";
"_8"[label="_8 = { 5 }"];
"_9";
"AddSubInternalFPF";
"_10"[label="_10 = { 5 }"];
"_11";
"_12"[label="_12 = { 5 }"];
"_13";
"_14"[label="_14 = { 5 }"];
"_15";
"_16"[label="_16 = { 5 }"];
"_17";
"_18"[label="_18 = { 5 }"];
"_19";
"_20"[label="_20 = { 5 }"];
"_21";
"MultiplyInternalFPF";
"_22"[label="_22 = { 5 }"];
"_23";
"_24"[label="_24 = { 5 }"];
"_25";
"_26"[label="_26 = { 5 }"];
"_27";
"DivideInternalFPF";
"loops_29"[label="loops_29 = { 5 }"];
"loops.1_28";
"StopStopwatch";
"_40";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*abase";
"*bbase";
"*cbase";
"*arraysize";
"*loops";
"*StartStopwatch";
"*_1";
"*i_30";
"*_2";
"*jtable.2859";
"*_3";
"*_4";
"*_5";
"*_6";
"*_7";
"*_8";
"*_9";
"*AddSubInternalFPF";
"*_10";
"*_11";
"*_12";
"*_13";
"*_14";
"*_15";
"*_16";
"*_17";
"*_18";
"*_19";
"*_20";
"*_21";
"*MultiplyInternalFPF";
"*_22";
"*_23";
"*_24";
"*_25";
"*_26";
"*_27";
"*DivideInternalFPF";
"*i_50";
"*loops_29";
"*loops_38";
"*loops.1_28";
"*StopStopwatch";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"elapsed_36" -> "ESCAPED";
"_5" -> "ESCAPED";
"_7" -> "ESCAPED";
"_9" -> "ESCAPED";
"_11" -> "ESCAPED";
"_13" -> "ESCAPED";
"_15" -> "ESCAPED";
"_17" -> "ESCAPED";
"_19" -> "ESCAPED";
"_21" -> "ESCAPED";
"_23" -> "ESCAPED";
"_25" -> "ESCAPED";
"_27" -> "ESCAPED";
"_40" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "elapsed_36";
"i_30" -> "i_30";
"i_30" -> "i_30";
"jtable.2859" -> "_2";
"NONLOCAL" -> "jtable.2859";
"_2" -> "_3";
"i_30" -> "_4";
"i_30" -> "_6";
"i_30" -> "_8";
"i_30" -> "_10";
"i_30" -> "_12";
"i_30" -> "_14";
"i_30" -> "_16";
"i_30" -> "_18";
"i_30" -> "_20";
"i_30" -> "_22";
"i_30" -> "_24";
"i_30" -> "_26";
"loops" -> "loops_29";
"loops_29" -> "loops_29";
"loops_29" -> "loops_29";
"loops_29" -> "loops.1_28";
"NONLOCAL" -> "_40";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"abase" [label="\N\n_5 = abase + UNKNOWN\l_7 = abase + UNKNOWN\l_9 = abase + UNKNOWN\l_11 = abase + UNKNOWN\l_13 = abase + UNKNOWN\l_15 = abase + UNKNOWN\l_17 = abase + UNKNOWN\l_19 = abase + UNKNOWN\l_21 = abase + UNKNOWN\l_23 = abase + UNKNOWN\l_25 = abase + UNKNOWN\l_27 = abase + UNKNOWN\l"];
"StartStopwatch";
"elapsed_36";
"_1";
"i_30" [label="\N\n_1 = i_30 + UNKNOWN\l"];
"_5";
"_7";
"_9";
"AddSubInternalFPF";
"_11";
"_13";
"_15";
"_17";
"_19";
"_21";
"MultiplyInternalFPF";
"_23";
"_25";
"_27";
"DivideInternalFPF";
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "_23";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_27";
"elapsed_36" -> "ESCAPED";
"_5" -> "ESCAPED";
"_7" -> "ESCAPED";
"_9" -> "ESCAPED";
"_11" -> "ESCAPED";
"_13" -> "ESCAPED";
"_15" -> "ESCAPED";
"_17" -> "ESCAPED";
"_19" -> "ESCAPED";
"_21" -> "ESCAPED";
"_23" -> "ESCAPED";
"_25" -> "ESCAPED";
"_27" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = elapsed_36\l"];
"STOREDANYTHING";
"INTEGER";
"abase" [label="\N\n_5 = abase + UNKNOWN\l_7 = abase + UNKNOWN\l_9 = abase + UNKNOWN\l_11 = abase + UNKNOWN\l_13 = abase + UNKNOWN\l_15 = abase + UNKNOWN\l_17 = abase + UNKNOWN\l_19 = abase + UNKNOWN\l_21 = abase + UNKNOWN\l_23 = abase + UNKNOWN\l_25 = abase + UNKNOWN\l_27 = abase + UNKNOWN\l"];
"StartStopwatch";
"elapsed_36";
"_1";
"i_30" [label="\N\n_1 = i_30 + UNKNOWN\l"];
"_5";
"_7";
"_9";
"AddSubInternalFPF";
"_11";
"_13";
"_15";
"_17";
"_19";
"_21";
"MultiplyInternalFPF";
"_23";
"_25";
"_27";
"DivideInternalFPF";
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "_23";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_27";
"elapsed_36" -> "ESCAPED";
"_5" -> "ESCAPED";
"_7" -> "ESCAPED";
"_9" -> "ESCAPED";
"_11" -> "ESCAPED";
"_13" -> "ESCAPED";
"_15" -> "ESCAPED";
"_17" -> "ESCAPED";
"_19" -> "ESCAPED";
"_21" -> "ESCAPED";
"_23" -> "ESCAPED";
"_25" -> "ESCAPED";
"_27" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as elapsed_36
STOREDANYTHING = { }
INTEGER = { ANYTHING }
abase = { NONLOCAL }
bbase = { NONLOCAL } same as abase
cbase = { NONLOCAL } same as abase
arraysize = { NONLOCAL } same as abase
loops = { NONLOCAL } same as abase
StartStopwatch = { }
elapsed_36 = { ESCAPED NONLOCAL }
_1 = { NULL NONLOCAL }
i_30 = { NULL NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as elapsed_36
jtable.2859 = { ESCAPED NONLOCAL } same as elapsed_36
_3 = { ESCAPED NONLOCAL } same as elapsed_36
_4 = { NULL NONLOCAL } same as i_30
_5 = { NONLOCAL }
_6 = { NULL NONLOCAL } same as i_30
_7 = { NONLOCAL }
_8 = { NULL NONLOCAL } same as i_30
_9 = { NONLOCAL }
AddSubInternalFPF = { }
_10 = { NULL NONLOCAL } same as i_30
_11 = { NONLOCAL }
_12 = { NULL NONLOCAL } same as i_30
_13 = { NONLOCAL }
_14 = { NULL NONLOCAL } same as i_30
_15 = { NONLOCAL }
_16 = { NULL NONLOCAL } same as i_30
_17 = { NONLOCAL }
_18 = { NULL NONLOCAL } same as i_30
_19 = { NONLOCAL }
_20 = { NULL NONLOCAL } same as i_30
_21 = { NONLOCAL }
MultiplyInternalFPF = { }
_22 = { NULL NONLOCAL } same as i_30
_23 = { NONLOCAL }
_24 = { NULL NONLOCAL } same as i_30
_25 = { NONLOCAL }
_26 = { NULL NONLOCAL } same as i_30
_27 = { NONLOCAL }
DivideInternalFPF = { }
i_50 = { NULL NONLOCAL } same as i_30
loops_29 = { NONLOCAL } same as abase
loops_38 = { NONLOCAL } same as abase
loops.1_28 = { NONLOCAL } same as abase
StopStopwatch = { }
_40 = { ESCAPED NONLOCAL } same as elapsed_36


Alias information for DoEmFloatIteration

Aliased symbols

jtable, UID D.2859, unsigned char[16], is addressable, is global, initial: {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3}

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_5, points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to NULL, points-to vars: { }
_19, points-to non-local, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to NULL, points-to vars: { }
_23, points-to non-local, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to NULL, points-to vars: { }
_27, points-to non-local, points-to NULL, points-to vars: { }
cbase_43(D), points-to non-local, points-to NULL, points-to vars: { }
bbase_44(D), points-to non-local, points-to NULL, points-to vars: { }
abase_45(D), points-to non-local, points-to NULL, points-to vars: { }

DoEmFloatIteration (struct InternalFPF * abase, struct InternalFPF * bbase, struct InternalFPF * cbase, long unsigned int arraysize, long unsigned int loops)
{
  long unsigned int i;
  static unsigned char jtable[16] = {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
  long unsigned int elapsed;
  long unsigned int _1;
  unsigned char _2;
  int _3;
  long unsigned int _4;
  struct InternalFPF * _5;
  long unsigned int _6;
  struct InternalFPF * _7;
  long unsigned int _8;
  struct InternalFPF * _9;
  long unsigned int _10;
  struct InternalFPF * _11;
  long unsigned int _12;
  struct InternalFPF * _13;
  long unsigned int _14;
  struct InternalFPF * _15;
  long unsigned int _16;
  struct InternalFPF * _17;
  long unsigned int _18;
  struct InternalFPF * _19;
  long unsigned int _20;
  struct InternalFPF * _21;
  long unsigned int _22;
  struct InternalFPF * _23;
  long unsigned int _24;
  struct InternalFPF * _25;
  long unsigned int _26;
  struct InternalFPF * _27;
  long unsigned int loops.1_28;
  long unsigned int _40;

  <bb 2> [0.00%]:
  elapsed_36 = StartStopwatch ();
  goto <bb 10>; [0.00%]

  <bb 3> [0.00%]:
  _1 = i_30 & 15;
  _2 = jtable[_1];
  _3 = (int) _2;
  switch (_2) <default: <L6> [0.00%], case 0: <L2> [0.00%], case 1: <L3> [0.00%], case 2: <L4> [0.00%], case 3: <L5> [0.00%]>

<L2> [0.00%]:
  _4 = i_30 * 12;
  _5 = cbase_43(D) + _4;
  _6 = i_30 * 12;
  _7 = bbase_44(D) + _6;
  _8 = i_30 * 12;
  _9 = abase_45(D) + _8;
  AddSubInternalFPF (0, _9, _7, _5);
  goto <bb 8> (<L6>); [0.00%]

<L3> [0.00%]:
  _10 = i_30 * 12;
  _11 = cbase_43(D) + _10;
  _12 = i_30 * 12;
  _13 = bbase_44(D) + _12;
  _14 = i_30 * 12;
  _15 = abase_45(D) + _14;
  AddSubInternalFPF (1, _15, _13, _11);
  goto <bb 8> (<L6>); [0.00%]

<L4> [0.00%]:
  _16 = i_30 * 12;
  _17 = cbase_43(D) + _16;
  _18 = i_30 * 12;
  _19 = bbase_44(D) + _18;
  _20 = i_30 * 12;
  _21 = abase_45(D) + _20;
  MultiplyInternalFPF (_21, _19, _17);
  goto <bb 8> (<L6>); [0.00%]

<L5> [0.00%]:
  _22 = i_30 * 12;
  _23 = cbase_43(D) + _22;
  _24 = i_30 * 12;
  _25 = bbase_44(D) + _24;
  _26 = i_30 * 12;
  _27 = abase_45(D) + _26;
  DivideInternalFPF (_27, _25, _23);

<L6> [0.00%]:
  i_50 = i_30 + 1;

  <bb 9> [0.00%]:
  # i_30 = PHI <0(10), i_50(8)>
  if (i_30 < arraysize_42(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  # loops_29 = PHI <loops_37(D)(2), loops_38(9)>
  loops.1_28 = loops_29;
  loops_38 = loops_29 + 18446744073709551615;
  if (loops_29 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  _40 = StopStopwatch (elapsed_36);
  return _40;

}


