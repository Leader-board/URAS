
;; Function printf (printf, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> [0.00%]:
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function memmove (memmove, funcdef_no=26, decl_uid=730, cgraph_uid=26, symbol_order=26)

__attribute__((__artificial__, __gnu_inline__, __always_inline__, __nothrow__, __leaf__))
memmove (void * __dest, const void * __src, size_t __len)
{
  long unsigned int _1;
  void * _7;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__dest_3(D), 0);
  _7 = __builtin___memmove_chk (__dest_3(D), __src_4(D), __len_5(D), _1);
  return _7;

}



;; Function SetInternalFPFZero (SetInternalFPFZero, funcdef_no=36, decl_uid=2776, cgraph_uid=36, symbol_order=36)

SetInternalFPFZero (struct InternalFPF * dest, unsigned char sign)
{
  int i;

  <bb 2> [0.00%]:
  dest_4(D)->type = 0;
  dest_4(D)->sign = sign_6(D);
  dest_4(D)->exp = -32767;
  i_9 = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  dest_4(D)->mantissa[i_1] = 0;
  i_11 = i_1 + 1;

  <bb 4> [0.00%]:
  # i_1 = PHI <i_9(2), i_11(3)>
  if (i_1 <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  return;

}



;; Function SetInternalFPFInfinity (SetInternalFPFInfinity, funcdef_no=37, decl_uid=2779, cgraph_uid=37, symbol_order=37)

SetInternalFPFInfinity (struct InternalFPF * dest, unsigned char sign)
{
  int i;

  <bb 2> [0.00%]:
  dest_4(D)->type = 3;
  dest_4(D)->sign = sign_6(D);
  dest_4(D)->exp = -32767;
  i_9 = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  dest_4(D)->mantissa[i_1] = 0;
  i_11 = i_1 + 1;

  <bb 4> [0.00%]:
  # i_1 = PHI <i_9(2), i_11(3)>
  if (i_1 <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  return;

}



;; Function SetInternalFPFNaN (SetInternalFPFNaN, funcdef_no=38, decl_uid=2781, cgraph_uid=38, symbol_order=38)

SetInternalFPFNaN (struct InternalFPF * dest)
{
  int i;

  <bb 2> [0.00%]:
  dest_4(D)->type = 4;
  dest_4(D)->exp = 32767;
  dest_4(D)->sign = 1;
  dest_4(D)->mantissa[0] = 16384;
  i_9 = 1;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  dest_4(D)->mantissa[i_1] = 0;
  i_11 = i_1 + 1;

  <bb 4> [0.00%]:
  # i_1 = PHI <i_9(2), i_11(3)>
  if (i_1 <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  return;

}



;; Function IsMantissaZero (IsMantissaZero, funcdef_no=39, decl_uid=2783, cgraph_uid=39, symbol_order=39)

IsMantissaZero (short unsigned int * mant)
{
  int n;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  short unsigned int * _3;
  short unsigned int _4;
  int _5;
  _Bool _6;
  int _11;

  <bb 2> [0.00%]:
  n_9 = 0;
  i_10 = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_7;
  _2 = _1 * 2;
  _3 = mant_13(D) + _2;
  _4 = *_3;
  _5 = (int) _4;
  n_14 = n_8 | _5;
  i_15 = i_7 + 1;

  <bb 4> [0.00%]:
  # i_7 = PHI <i_10(2), i_15(3)>
  # n_8 = PHI <n_9(2), n_14(3)>
  if (i_7 <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  _6 = n_8 == 0;
  _11 = (int) _6;
  return _11;

}



;; Function Add16Bits (Add16Bits, funcdef_no=40, decl_uid=2788, cgraph_uid=40, symbol_order=40)

Add16Bits (short unsigned int * carry, short unsigned int * a, short unsigned int b, short unsigned int c)
{
  unsigned int accum;
  unsigned int _1;
  short unsigned int _2;
  unsigned int _3;
  unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;

  <bb 2> [0.00%]:
  accum_9 = (unsigned int) b_8(D);
  _1 = (unsigned int) c_10(D);
  accum_11 = accum_9 + _1;
  _2 = *carry_13(D);
  _3 = (unsigned int) _2;
  accum_14 = accum_11 + _3;
  _4 = accum_14 >> 16;
  _5 = (short unsigned int) _4;
  _6 = _5 & 1;
  *carry_13(D) = _6;
  _7 = (short unsigned int) accum_14;
  *a_16(D) = _7;
  return;

}



;; Function Sub16Bits (Sub16Bits, funcdef_no=41, decl_uid=2793, cgraph_uid=41, symbol_order=41)

Sub16Bits (short unsigned int * borrow, short unsigned int * a, short unsigned int b, short unsigned int c)
{
  unsigned int accum;
  unsigned int _1;
  short unsigned int _2;
  unsigned int _3;
  unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;

  <bb 2> [0.00%]:
  accum_9 = (unsigned int) b_8(D);
  _1 = (unsigned int) c_10(D);
  accum_11 = accum_9 - _1;
  _2 = *borrow_13(D);
  _3 = (unsigned int) _2;
  accum_14 = accum_11 - _3;
  _4 = accum_14 >> 16;
  _5 = (short unsigned int) _4;
  _6 = _5 & 1;
  *borrow_13(D) = _6;
  _7 = (short unsigned int) accum_14;
  *a_16(D) = _7;
  return;

}



;; Function ShiftMantLeft1 (ShiftMantLeft1, funcdef_no=42, decl_uid=2796, cgraph_uid=42, symbol_order=42)

ShiftMantLeft1 (short unsigned int * carry, short unsigned int * mantissa)
{
  short unsigned int accum;
  int new_carry;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  short unsigned int * _3;
  int _4;
  short unsigned int _5;
  short unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  short unsigned int * _9;

  <bb 2> [0.00%]:
  i_13 = 3;
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_10;
  _2 = _1 * 2;
  _3 = mantissa_15(D) + _2;
  accum_16 = *_3;
  _4 = (int) accum_16;
  new_carry_17 = _4 & 32768;
  accum_18 = accum_16 << 1;
  _5 = *carry_19(D);
  if (_5 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  accum_20 = accum_18 | 1;

  <bb 5> [0.00%]:
  # accum_11 = PHI <accum_18(3), accum_20(4)>
  _6 = (short unsigned int) new_carry_17;
  *carry_19(D) = _6;
  _7 = (long unsigned int) i_10;
  _8 = _7 * 2;
  _9 = mantissa_15(D) + _8;
  *_9 = accum_11;
  i_23 = i_10 + -1;

  <bb 6> [0.00%]:
  # i_10 = PHI <i_13(2), i_23(5)>
  if (i_10 >= 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function ShiftMantRight1 (ShiftMantRight1, funcdef_no=43, decl_uid=2799, cgraph_uid=43, symbol_order=43)

ShiftMantRight1 (short unsigned int * carry, short unsigned int * mantissa)
{
  short unsigned int accum;
  int new_carry;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  short unsigned int * _3;
  int _4;
  short unsigned int _5;
  short unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  short unsigned int * _9;

  <bb 2> [0.00%]:
  i_13 = 0;
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_10;
  _2 = _1 * 2;
  _3 = mantissa_15(D) + _2;
  accum_16 = *_3;
  _4 = (int) accum_16;
  new_carry_17 = _4 & 1;
  accum_18 = accum_16 >> 1;
  _5 = *carry_19(D);
  if (_5 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  accum_20 = accum_18 | 32768;

  <bb 5> [0.00%]:
  # accum_11 = PHI <accum_18(3), accum_20(4)>
  _6 = (short unsigned int) new_carry_17;
  *carry_19(D) = _6;
  _7 = (long unsigned int) i_10;
  _8 = _7 * 2;
  _9 = mantissa_15(D) + _8;
  *_9 = accum_11;
  i_23 = i_10 + 1;

  <bb 6> [0.00%]:
  # i_10 = PHI <i_13(2), i_23(5)>
  if (i_10 <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function StickyShiftRightMant (StickyShiftRightMant, funcdef_no=44, decl_uid=2802, cgraph_uid=44, symbol_order=44)

StickyShiftRightMant (struct InternalFPF * ptr, int amount)
{
  short unsigned int * mantissa;
  short unsigned int carry;
  int i;
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;
  short unsigned int * _4;
  short unsigned int * _5;
  short unsigned int carry.4_6;
  short unsigned int * _7;
  short unsigned int _8;
  short unsigned int * _9;
  short unsigned int _10;

  <bb 2> [0.00%]:
  mantissa_18 = &ptr_17(D)->mantissa;
  _1 = ptr_17(D)->type;
  if (_1 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 3> [0.00%]:
  if (amount_20(D) > 63)
    goto <bb 4>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 4> [0.00%]:
  i_26 = 0;
  goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _2 = (long unsigned int) i_11;
  _3 = _2 * 2;
  _4 = mantissa_18 + _3;
  *_4 = 0;
  i_29 = i_11 + 1;

  <bb 6> [0.00%]:
  # i_11 = PHI <i_26(4), i_29(5)>
  if (i_11 <= 2)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  _5 = mantissa_18 + 6;
  *_5 = 1;
  goto <bb 13>; [0.00%]

  <bb 8> [0.00%]:
  i_21 = 0;
  goto <bb 12>; [0.00%]

  <bb 9> [0.00%]:
  carry = 0;
  ShiftMantRight1 (&carry, mantissa_18);
  carry.4_6 = carry;
  if (carry.4_6 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  _7 = mantissa_18 + 6;
  _8 = *_7;
  _9 = mantissa_18 + 6;
  _10 = _8 | 1;
  *_9 = _10;

  <bb 11> [0.00%]:
  i_25 = i_12 + 1;

  <bb 12> [0.00%]:
  # i_12 = PHI <i_21(8), i_25(11)>
  if (i_12 < amount_20(D))
    goto <bb 9>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:
  carry ={v} {CLOBBER};
  return;

}



;; Function normalize (normalize, funcdef_no=45, decl_uid=2804, cgraph_uid=45, symbol_order=45)

normalize (struct InternalFPF * ptr)
{
  short unsigned int carry;
  short unsigned int[4] * _1;
  short int _2;
  short int _3;
  unsigned short _4;
  unsigned short _5;
  short int _6;
  short unsigned int _7;
  signed short _8;

  <bb 2> [0.00%]:
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  carry = 0;
  _1 = &ptr_11(D)->mantissa;
  ShiftMantLeft1 (&carry, _1);
  _2 = ptr_11(D)->exp;
  _3 = _2;
  _4 = (unsigned short) _3;
  _5 = _4 + 65535;
  _6 = (short int) _5;
  ptr_11(D)->exp = _6;

  <bb 4> [0.00%]:
  _7 = ptr_11(D)->mantissa[0];
  _8 = (signed short) _7;
  if (_8 >= 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  carry ={v} {CLOBBER};
  return;

}



;; Function denormalize (denormalize, funcdef_no=46, decl_uid=2807, cgraph_uid=46, symbol_order=46)

denormalize (struct InternalFPF * ptr, int minimum_exponent)
{
  long int exponent_difference;
  short unsigned int[4] * _1;
  int _2;
  short int _3;
  int _4;
  int _5;
  unsigned char _6;
  int _7;
  short int _8;
  unsigned short _9;
  unsigned short _10;
  unsigned short _11;
  short int _12;
  int _13;

  <bb 2> [0.00%]:
  _1 = &ptr_16(D)->mantissa;
  _2 = IsMantissaZero (_1);
  if (_2 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  printf ("Error:  zero significand in denormalize\n");

  <bb 4> [0.00%]:
  _3 = ptr_16(D)->exp;
  _4 = (int) _3;
  _5 = _4 - minimum_exponent_20(D);
  exponent_difference_21 = (long int) _5;
  if (exponent_difference_21 < 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 5> [0.00%]:
  exponent_difference_22 = -exponent_difference_21;
  if (exponent_difference_22 > 63)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _6 = ptr_16(D)->sign;
  _7 = (int) _6;
  SetInternalFPFZero (ptr_16(D), _7);
  goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  _8 = ptr_16(D)->exp;
  _9 = (unsigned short) _8;
  _10 = (unsigned short) exponent_difference_22;
  _11 = _9 + _10;
  _12 = (short int) _11;
  ptr_16(D)->exp = _12;
  _13 = (int) exponent_difference_22;
  StickyShiftRightMant (ptr_16(D), _13);

  <bb 8> [0.00%]:
  return;

}



;; Function choose_nan (choose_nan, funcdef_no=48, decl_uid=2814, cgraph_uid=48, symbol_order=48)

choose_nan (struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z, int intel_flag)
{
  int i;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;

  <bb 2> [0.00%]:
  i_7 = 0;
  goto <bb 8>; [0.00%]

  <bb 3> [0.00%]:
  _1 = x_13(D)->mantissa[i_5];
  _2 = y_10(D)->mantissa[i_5];
  if (_1 > _2)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  memmove (x_13(D), z_11(D), 12);
  goto <bb 12>; [0.00%]

  <bb 5> [0.00%]:
  _3 = x_13(D)->mantissa[i_5];
  _4 = y_10(D)->mantissa[i_5];
  if (_3 < _4)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  memmove (y_10(D), z_11(D), 12);
  goto <bb 12>; [0.00%]

  <bb 7> [0.00%]:
  i_15 = i_5 + 1;

  <bb 8> [0.00%]:
  # i_5 = PHI <i_7(2), i_15(7)>
  if (i_5 <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  if (intel_flag_8(D) == 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  memmove (x_13(D), z_11(D), 12);
  goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  memmove (y_10(D), z_11(D), 12);

  <bb 12> [0.00%]:
  return;

}



;; Function Int32ToInternalFPF (Int32ToInternalFPF, funcdef_no=52, decl_uid=2830, cgraph_uid=52, symbol_order=52)

Int32ToInternalFPF (int32 mylong, struct InternalFPF * dest)
{
  short unsigned int myword;
  int i;
  int _1;

  <bb 2> [0.00%]:
  if (mylong_7(D) < 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  dest_9(D)->sign = 1;
  mylong_12 = -mylong_7(D);
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  dest_9(D)->sign = 0;

  <bb 5> [0.00%]:
  # mylong_2 = PHI <mylong_12(3), mylong_7(D)(4)>
  dest_9(D)->type = 2;
  i_14 = 0;
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  dest_9(D)->mantissa[i_3] = 0;
  i_24 = i_3 + 1;

  <bb 7> [0.00%]:
  # i_3 = PHI <i_14(5), i_24(6)>
  if (i_3 <= 3)
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  if (mylong_2 == 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  dest_9(D)->type = 0;
  dest_9(D)->exp = 0;
  goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  dest_9(D)->exp = 32;
  _1 = mylong_2 >> 16;
  myword_16 = (short unsigned int) _1;
  dest_9(D)->mantissa[0] = myword_16;
  myword_18 = (short unsigned int) mylong_2;
  dest_9(D)->mantissa[1] = myword_18;
  normalize (dest_9(D));

  <bb 11> [0.00%]:
  return;

}



;; Function RoundInternalFPF (RoundInternalFPF, funcdef_no=47, decl_uid=2809, cgraph_uid=47, symbol_order=47)

RoundInternalFPF (struct InternalFPF * ptr)
{
  unsigned char _1;
  unsigned char _2;
  unsigned char _3;
  short unsigned int _4;
  short unsigned int _5;

  <bb 2> [0.00%]:
  _1 = ptr_8(D)->type;
  _2 = _1 + 255;
  if (_2 <= 1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 3> [0.00%]:
  denormalize (ptr_8(D), -32767);
  _3 = ptr_8(D)->type;
  if (_3 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _4 = ptr_8(D)->mantissa[3];
  _5 = _4 & 65528;
  ptr_8(D)->mantissa[3] = _5;

  <bb 5> [0.00%]:
  return;

}



;; Function DivideInternalFPF (DivideInternalFPF, funcdef_no=51, decl_uid=2827, cgraph_uid=51, symbol_order=51)

DivideInternalFPF (struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  struct InternalFPF locx;
  short unsigned int extra_bits[4];
  short unsigned int carry;
  int j;
  int i;
  unsigned char _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  short unsigned int[4] * _7;
  int _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  int _12;
  short unsigned int[4] * _13;
  int _14;
  unsigned char _15;
  unsigned char _16;
  unsigned char _17;
  int _18;
  short unsigned int[4] * _19;
  int _20;
  short unsigned int[4] * _21;
  int _22;
  unsigned char _23;
  unsigned char _24;
  unsigned char _25;
  unsigned char _26;
  short int _27;
  unsigned short _28;
  short int _29;
  unsigned short _30;
  unsigned short _31;
  unsigned short _32;
  short int _33;
  short unsigned int carry.0_34;
  short unsigned int _35;
  short unsigned int _36;
  short unsigned int _37;
  short unsigned int _38;
  short unsigned int _39;
  int _40;
  short unsigned int _41;
  int _42;
  short unsigned int * _43;
  short unsigned int[4] * _44;
  short int _45;
  short int _46;
  unsigned short _47;
  unsigned short _48;
  short int _49;
  short unsigned int _50;
  signed short _51;

  <bb 2> [0.00%]:
  _1 = x_63(D)->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y_64(D)->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L54> [0.00%], case 0: <L0> [0.00%], case 1 ... 2: <L2> [0.00%], case 3: <L5> [0.00%], case 4: <L20> [0.00%], case 5: <L9> [0.00%], case 6 ... 7: <L24> [0.00%], case 8: <L5> [0.00%], case 9: <L20> [0.00%], case 10: <L9> [0.00%], case 11 ... 12: <L24> [0.00%], case 13: <L5> [0.00%], case 14: <L20> [0.00%], case 15 ... 17: <L12> [0.00%], case 18: <L0> [0.00%], case 19: <L20> [0.00%], case 20 ... 23: <L16> [0.00%], case 24: <L53> [0.00%]>

<L0> [0.00%]:
  SetInternalFPFNaN (z_65(D));
  goto <bb 35> (<L54>); [0.00%]

<L2> [0.00%]:
  _7 = &y_64(D)->mantissa;
  _8 = IsMantissaZero (_7);
  if (_8 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6> (<L5>); [0.00%]

  <bb 5> [0.00%]:
  SetInternalFPFNaN (z_65(D));
  goto <bb 35> (<L54>); [0.00%]

<L5> [0.00%]:
  _9 = x_63(D)->sign;
  _10 = y_64(D)->sign;
  _11 = _9 ^ _10;
  _12 = (int) _11;
  SetInternalFPFZero (z_65(D), _12);
  goto <bb 35> (<L54>); [0.00%]

<L9> [0.00%]:
  _13 = &x_63(D)->mantissa;
  _14 = IsMantissaZero (_13);
  if (_14 != 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9> (<L12>); [0.00%]

  <bb 8> [0.00%]:
  SetInternalFPFNaN (z_65(D));
  goto <bb 35> (<L54>); [0.00%]

<L12> [0.00%]:
  SetInternalFPFInfinity (z_65(D), 0);
  _15 = x_63(D)->sign;
  _16 = y_64(D)->sign;
  _17 = _15 ^ _16;
  z_65(D)->sign = _17;
  goto <bb 35> (<L54>); [0.00%]

<L16> [0.00%]:
  memmove (x_63(D), z_65(D), 12);
  goto <bb 35> (<L54>); [0.00%]

<L20> [0.00%]:
  memmove (y_64(D), z_65(D), 12);
  goto <bb 35> (<L54>); [0.00%]

<L24> [0.00%]:
  memmove (&locx, x_63(D), 12);
  _18 = IsMantissaZero (&locx.mantissa);
  if (_18 != 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 13> [0.00%]:
  _19 = &y_64(D)->mantissa;
  _20 = IsMantissaZero (_19);
  if (_20 != 0)
    goto <bb 14>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  SetInternalFPFNaN (z_65(D));
  goto <bb 35> (<L54>); [0.00%]

  <bb 15> [0.00%]:
  SetInternalFPFZero (z_65(D), 0);
  goto <bb 35> (<L54>); [0.00%]

  <bb 16> [0.00%]:
  _21 = &y_64(D)->mantissa;
  _22 = IsMantissaZero (_21);
  if (_22 != 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  SetInternalFPFInfinity (z_65(D), 0);
  goto <bb 35> (<L54>); [0.00%]

  <bb 18> [0.00%]:
  _23 = x_63(D)->type;
  z_65(D)->type = _23;
  _24 = x_63(D)->sign;
  _25 = y_64(D)->sign;
  _26 = _24 ^ _25;
  z_65(D)->sign = _26;
  _27 = x_63(D)->exp;
  _28 = (unsigned short) _27;
  _29 = y_64(D)->exp;
  _30 = (unsigned short) _29;
  _31 = _28 - _30;
  _32 = _31 + 128;
  _33 = (short int) _32;
  z_65(D)->exp = _33;
  i_74 = 0;
  goto <bb 20>; [0.00%]

  <bb 19> [0.00%]:
  z_65(D)->mantissa[i_52] = 0;
  extra_bits[i_52] = 0;
  i_90 = i_52 + 1;

  <bb 20> [0.00%]:
  # i_52 = PHI <i_74(18), i_90(19)>
  if (i_52 <= 3)
    goto <bb 19>; [0.00%]
  else
    goto <bb 33>; [0.00%]

  <bb 21> [0.00%]:
  carry = 0;
  ShiftMantLeft1 (&carry, &locx.mantissa);
  ShiftMantLeft1 (&carry, &extra_bits);
  carry.0_34 = carry;
  if (carry.0_34 == 0)
    goto <bb 22>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 22> [0.00%]:
  j_78 = 0;
  goto <bb 27>; [0.00%]

  <bb 23> [0.00%]:
  _35 = y_64(D)->mantissa[j_53];
  _36 = extra_bits[j_53];
  if (_35 > _36)
    goto <bb 24>; [0.00%]
  else
    goto <bb 25>; [0.00%]

  <bb 24> [0.00%]:
  carry = 0;
  goto <bb 32> (no_subtract); [0.00%]

  <bb 25> [0.00%]:
  _37 = y_64(D)->mantissa[j_53];
  _38 = extra_bits[j_53];
  if (_37 < _38)
    goto <bb 28>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 26> [0.00%]:
  j_79 = j_53 + 1;

  <bb 27> [0.00%]:
  # j_53 = PHI <j_78(22), j_79(26)>
  if (j_53 <= 3)
    goto <bb 23>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 28> [0.00%]:
  carry = 0;
  j_82 = 3;
  goto <bb 30>; [0.00%]

  <bb 29> [0.00%]:
  _39 = y_64(D)->mantissa[j_54];
  _40 = (int) _39;
  _41 = extra_bits[j_54];
  _42 = (int) _41;
  _43 = &extra_bits[j_54];
  Sub16Bits (&carry, _43, _42, _40);
  j_85 = j_54 + -1;

  <bb 30> [0.00%]:
  # j_54 = PHI <j_82(28), j_85(29)>
  if (j_54 >= 0)
    goto <bb 29>; [0.00%]
  else
    goto <bb 31>; [0.00%]

  <bb 31> [0.00%]:
  carry = 1;

no_subtract [0.00%]:
  _44 = &z_65(D)->mantissa;
  ShiftMantLeft1 (&carry, _44);
  _45 = z_65(D)->exp;
  _46 = _45;
  _47 = (unsigned short) _46;
  _48 = _47 + 65535;
  _49 = (short int) _48;
  z_65(D)->exp = _49;

  <bb 33> [0.00%]:
  _50 = z_65(D)->mantissa[0];
  _51 = (signed short) _50;
  if (_51 >= 0)
    goto <bb 21>; [0.00%]
  else
    goto <bb 35> (<L54>); [0.00%]

<L53> [0.00%]:
  choose_nan (x_63(D), y_64(D), z_65(D), 0);

<L54> [0.00%]:
  RoundInternalFPF (z_65(D));
  carry ={v} {CLOBBER};
  extra_bits ={v} {CLOBBER};
  locx ={v} {CLOBBER};
  return;

}



;; Function SetupCPUEmFloatArrays (SetupCPUEmFloatArrays, funcdef_no=34, decl_uid=2767, cgraph_uid=34, symbol_order=34)

SetupCPUEmFloatArrays (struct InternalFPF * abase, struct InternalFPF * bbase, struct InternalFPF * cbase, long unsigned int arraysize)
{
  struct InternalFPF locFPF2;
  struct InternalFPF locFPF1;
  long unsigned int i;
  int _1;
  int _2;
  int _3;
  long unsigned int _4;
  struct InternalFPF * _5;
  int _6;
  int _7;
  long unsigned int _8;
  struct InternalFPF * _9;

  <bb 2> [0.00%]:
  randnum (13);
  i_14 = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = randwc (50000);
  Int32ToInternalFPF (_1, &locFPF1);
  _2 = randwc (50000);
  _3 = _2 + 1;
  Int32ToInternalFPF (_3, &locFPF2);
  _4 = i_10 * 12;
  _5 = abase_22(D) + _4;
  DivideInternalFPF (&locFPF1, &locFPF2, _5);
  _6 = randwc (50000);
  _7 = _6 + 1;
  Int32ToInternalFPF (_7, &locFPF2);
  _8 = i_10 * 12;
  _9 = bbase_26(D) + _8;
  DivideInternalFPF (&locFPF1, &locFPF2, _9);
  i_28 = i_10 + 1;

  <bb 4> [0.00%]:
  # i_10 = PHI <i_14(2), i_28(3)>
  if (i_10 < arraysize_15(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  locFPF1 ={v} {CLOBBER};
  locFPF2 ={v} {CLOBBER};
  return;

}



;; Function AddSubInternalFPF (AddSubInternalFPF, funcdef_no=49, decl_uid=2819, cgraph_uid=49, symbol_order=49)

AddSubInternalFPF (unsigned char operation, struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  struct InternalFPF locy;
  struct InternalFPF locx;
  int i;
  short unsigned int carry;
  short unsigned int borrow;
  int exponent_difference;
  unsigned char _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  short int _12;
  int _13;
  short int _14;
  int _15;
  unsigned char _16;
  unsigned char _17;
  unsigned char _18;
  short int _19;
  unsigned char _20;
  unsigned char _21;
  short int _22;
  int _23;
  unsigned char _24;
  unsigned char _25;
  unsigned char _26;
  short int _27;
  unsigned char _28;
  unsigned char _29;
  unsigned char _30;
  short unsigned int _31;
  int _32;
  short unsigned int _33;
  int _34;
  short unsigned int * _35;
  short unsigned int borrow.2_36;
  unsigned char _37;
  unsigned char _38;
  short unsigned int _39;
  int _40;
  short unsigned int * _41;
  short unsigned int[4] * _42;
  int _43;
  unsigned char _44;
  unsigned char _45;
  short unsigned int _46;
  int _47;
  short unsigned int _48;
  int _49;
  short unsigned int * _50;
  short unsigned int carry.3_51;
  short int _52;
  short int _53;
  unsigned short _54;
  unsigned short _55;
  short int _56;
  short unsigned int[4] * _57;
  short unsigned int _58;
  short unsigned int _59;
  short unsigned int _60;
  signed short _61;

  <bb 2> [0.00%]:
  _1 = x_73(D)->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y_74(D)->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L63> [0.00%], case 0: <L0> [0.00%], case 1 ... 3: <L16> [0.00%], case 4: <L12> [0.00%], case 5: <L3> [0.00%], case 6 ... 7: <L21> [0.00%], case 8: <L16> [0.00%], case 9: <L12> [0.00%], case 10: <L3> [0.00%], case 11 ... 12: <L21> [0.00%], case 13: <L16> [0.00%], case 14: <L12> [0.00%], case 15 ... 17: <L3> [0.00%], case 18: <L61> [0.00%], case 19: <L12> [0.00%], case 20 ... 23: <L3> [0.00%], case 24: <L62> [0.00%]>

<L0> [0.00%]:
  memmove (x_73(D), z_75(D), 12);
  _7 = x_73(D)->sign;
  _8 = y_74(D)->sign;
  _9 = _7 ^ _8;
  if (operation_83(D) != _9)
    goto <bb 4>; [0.00%]
  else
    goto <bb 39> (<L63>); [0.00%]

  <bb 4> [0.00%]:
  z_75(D)->sign = 0;
  goto <bb 39> (<L63>); [0.00%]

<L3> [0.00%]:
  memmove (x_73(D), z_75(D), 12);
  goto <bb 39> (<L63>); [0.00%]

<L12> [0.00%]:
  memmove (y_74(D), z_75(D), 12);
  goto <bb 39> (<L63>); [0.00%]

<L16> [0.00%]:
  memmove (y_74(D), z_75(D), 12);
  _10 = z_75(D)->sign;
  _11 = operation_83(D) ^ _10;
  z_75(D)->sign = _11;
  goto <bb 39> (<L63>); [0.00%]

<L21> [0.00%]:
  memmove (&locx, x_73(D), 12);
  memmove (&locy, y_74(D), 12);
  _12 = locx.exp;
  _13 = (int) _12;
  _14 = locy.exp;
  _15 = (int) _14;
  exponent_difference_80 = _13 - _15;
  if (exponent_difference_80 == 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 9> [0.00%]:
  _16 = locx.type;
  if (_16 == 1)
    goto <bb 11>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  _17 = locy.type;
  if (_17 == 1)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  z_75(D)->type = 1;
  goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  z_75(D)->type = 2;

  <bb 13> [0.00%]:
  _18 = locx.sign;
  z_75(D)->sign = _18;
  _19 = locx.exp;
  z_75(D)->exp = _19;
  goto <bb 17>; [0.00%]

  <bb 14> [0.00%]:
  if (exponent_difference_80 > 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:
  StickyShiftRightMant (&locy, exponent_difference_80);
  _20 = locx.type;
  z_75(D)->type = _20;
  _21 = locx.sign;
  z_75(D)->sign = _21;
  _22 = locx.exp;
  z_75(D)->exp = _22;
  goto <bb 17>; [0.00%]

  <bb 16> [0.00%]:
  _23 = -exponent_difference_80;
  StickyShiftRightMant (&locx, _23);
  _24 = locy.type;
  z_75(D)->type = _24;
  _25 = locy.sign;
  _26 = operation_83(D) ^ _25;
  z_75(D)->sign = _26;
  _27 = locy.exp;
  z_75(D)->exp = _27;

  <bb 17> [0.00%]:
  _28 = locx.sign;
  _29 = locy.sign;
  _30 = _28 ^ _29;
  if (operation_83(D) != _30)
    goto <bb 18>; [0.00%]
  else
    goto <bb 30>; [0.00%]

  <bb 18> [0.00%]:
  borrow = 0;
  i_105 = 3;
  goto <bb 20>; [0.00%]

  <bb 19> [0.00%]:
  _31 = locy.mantissa[i_62];
  _32 = (int) _31;
  _33 = locx.mantissa[i_62];
  _34 = (int) _33;
  _35 = &z_75(D)->mantissa[i_62];
  Sub16Bits (&borrow, _35, _34, _32);
  i_116 = i_62 + -1;

  <bb 20> [0.00%]:
  # i_62 = PHI <i_105(18), i_116(19)>
  if (i_62 >= 0)
    goto <bb 19>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 21> [0.00%]:
  borrow.2_36 = borrow;
  if (borrow.2_36 != 0)
    goto <bb 22>; [0.00%]
  else
    goto <bb 25>; [0.00%]

  <bb 22> [0.00%]:
  _37 = locy.sign;
  _38 = operation_83(D) ^ _37;
  z_75(D)->sign = _38;
  borrow = 0;
  i_108 = 3;
  goto <bb 24>; [0.00%]

  <bb 23> [0.00%]:
  _39 = z_75(D)->mantissa[i_63];
  _40 = (int) _39;
  _41 = &z_75(D)->mantissa[i_63];
  Sub16Bits (&borrow, _41, 0, _40);
  i_110 = i_63 + -1;

  <bb 24> [0.00%]:
  # i_63 = PHI <i_108(22), i_110(23)>
  if (i_63 >= 0)
    goto <bb 23>; [0.00%]
  else
    goto <bb 25>; [0.00%]

  <bb 25> [0.00%]:
  _42 = &z_75(D)->mantissa;
  _43 = IsMantissaZero (_42);
  if (_43 != 0)
    goto <bb 26>; [0.00%]
  else
    goto <bb 27>; [0.00%]

  <bb 26> [0.00%]:
  z_75(D)->type = 0;
  z_75(D)->sign = 0;
  goto <bb 39> (<L63>); [0.00%]

  <bb 27> [0.00%]:
  _44 = locx.type;
  if (_44 == 2)
    goto <bb 29>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 28> [0.00%]:
  _45 = locy.type;
  if (_45 == 2)
    goto <bb 29>; [0.00%]
  else
    goto <bb 39> (<L63>); [0.00%]

  <bb 29> [0.00%]:
  normalize (z_75(D));
  goto <bb 39> (<L63>); [0.00%]

  <bb 30> [0.00%]:
  carry = 0;
  i_95 = 3;
  goto <bb 32>; [0.00%]

  <bb 31> [0.00%]:
  _46 = locy.mantissa[i_64];
  _47 = (int) _46;
  _48 = locx.mantissa[i_64];
  _49 = (int) _48;
  _50 = &z_75(D)->mantissa[i_64];
  Add16Bits (&carry, _50, _49, _47);
  i_103 = i_64 + -1;

  <bb 32> [0.00%]:
  # i_64 = PHI <i_95(30), i_103(31)>
  if (i_64 >= 0)
    goto <bb 31>; [0.00%]
  else
    goto <bb 33>; [0.00%]

  <bb 33> [0.00%]:
  carry.3_51 = carry;
  if (carry.3_51 != 0)
    goto <bb 34>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 34> [0.00%]:
  _52 = z_75(D)->exp;
  _53 = _52;
  _54 = (unsigned short) _53;
  _55 = _54 + 1;
  _56 = (short int) _55;
  z_75(D)->exp = _56;
  carry = 0;
  _57 = &z_75(D)->mantissa;
  ShiftMantRight1 (&carry, _57);
  _58 = z_75(D)->mantissa[0];
  _59 = _58 | 32768;
  z_75(D)->mantissa[0] = _59;
  z_75(D)->type = 2;
  goto <bb 39> (<L63>); [0.00%]

  <bb 35> [0.00%]:
  _60 = z_75(D)->mantissa[0];
  _61 = (signed short) _60;
  if (_61 < 0)
    goto <bb 36>; [0.00%]
  else
    goto <bb 39> (<L63>); [0.00%]

  <bb 36> [0.00%]:
  z_75(D)->type = 2;
  goto <bb 39> (<L63>); [0.00%]

<L61> [0.00%]:
  SetInternalFPFNaN (z_75(D));
  goto <bb 39> (<L63>); [0.00%]

<L62> [0.00%]:
  choose_nan (x_73(D), y_74(D), z_75(D), 1);

<L63> [0.00%]:
  RoundInternalFPF (z_75(D));
  borrow ={v} {CLOBBER};
  carry ={v} {CLOBBER};
  locx ={v} {CLOBBER};
  locy ={v} {CLOBBER};
  return;

}



;; Function MultiplyInternalFPF (MultiplyInternalFPF, funcdef_no=50, decl_uid=2823, cgraph_uid=50, symbol_order=50)

MultiplyInternalFPF (struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  struct InternalFPF locy;
  short unsigned int extra_bits[4];
  short unsigned int carry;
  int j;
  int i;
  unsigned char _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  unsigned char _12;
  short unsigned int[4] * _13;
  int _14;
  short unsigned int[4] * _15;
  int _16;
  unsigned char _17;
  unsigned char _18;
  unsigned char _19;
  unsigned char _20;
  unsigned char _21;
  short int _22;
  unsigned short _23;
  short int _24;
  unsigned short _25;
  unsigned short _26;
  short int _27;
  short unsigned int carry.5_28;
  short unsigned int _29;
  int _30;
  short unsigned int _31;
  int _32;
  short unsigned int * _33;
  short unsigned int[4] * _34;
  short unsigned int[4] * _35;
  short int _36;
  short int _37;
  unsigned short _38;
  unsigned short _39;
  short int _40;
  short unsigned int _41;
  signed short _42;
  int _43;
  short unsigned int _44;
  short unsigned int _45;

  <bb 2> [0.00%]:
  _1 = x_59(D)->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y_60(D)->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L49> [0.00%], case 0 ... 2: <L0> [0.00%], case 3: <L10> [0.00%], case 4: <L16> [0.00%], case 5: <L6> [0.00%], case 6 ... 7: <L20> [0.00%], case 8: <L6> [0.00%], case 9: <L16> [0.00%], case 10: <L6> [0.00%], case 11 ... 12: <L20> [0.00%], case 13: <L6> [0.00%], case 14: <L16> [0.00%], case 15: <L10> [0.00%], case 16 ... 18: <L0> [0.00%], case 19: <L16> [0.00%], case 20 ... 23: <L12> [0.00%], case 24: <L48> [0.00%]>

<L0> [0.00%]:
  memmove (x_59(D), z_61(D), 12);
  _7 = z_61(D)->sign;
  _8 = y_60(D)->sign;
  _9 = _7 ^ _8;
  z_61(D)->sign = _9;
  goto <bb 31> (<L49>); [0.00%]

<L6> [0.00%]:
  memmove (y_60(D), z_61(D), 12);
  _10 = z_61(D)->sign;
  _11 = x_59(D)->sign;
  _12 = _10 ^ _11;
  z_61(D)->sign = _12;
  goto <bb 31> (<L49>); [0.00%]

<L10> [0.00%]:
  SetInternalFPFNaN (z_61(D));
  goto <bb 31> (<L49>); [0.00%]

<L12> [0.00%]:
  memmove (x_59(D), z_61(D), 12);
  goto <bb 31> (<L49>); [0.00%]

<L16> [0.00%]:
  memmove (y_60(D), z_61(D), 12);
  goto <bb 31> (<L49>); [0.00%]

<L20> [0.00%]:
  memmove (&locy, y_60(D), 12);
  _13 = &x_59(D)->mantissa;
  _14 = IsMantissaZero (_13);
  if (_14 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  _15 = &y_60(D)->mantissa;
  _16 = IsMantissaZero (_15);
  if (_16 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  SetInternalFPFInfinity (z_61(D), 0);

  <bb 11> [0.00%]:
  _17 = x_59(D)->type;
  if (_17 == 1)
    goto <bb 13>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [0.00%]:
  _18 = y_60(D)->type;
  if (_18 == 1)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  z_61(D)->type = 1;
  goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  z_61(D)->type = 2;

  <bb 15> [0.00%]:
  _19 = x_59(D)->sign;
  _20 = y_60(D)->sign;
  _21 = _19 ^ _20;
  z_61(D)->sign = _21;
  _22 = x_59(D)->exp;
  _23 = (unsigned short) _22;
  _24 = y_60(D)->exp;
  _25 = (unsigned short) _24;
  _26 = _23 + _25;
  _27 = (short int) _26;
  z_61(D)->exp = _27;
  i_72 = 0;
  goto <bb 17>; [0.00%]

  <bb 16> [0.00%]:
  z_61(D)->mantissa[i_46] = 0;
  extra_bits[i_46] = 0;
  i_92 = i_46 + 1;

  <bb 17> [0.00%]:
  # i_46 = PHI <i_72(15), i_92(16)>
  if (i_46 <= 3)
    goto <bb 16>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 18> [0.00%]:
  i_73 = 0;
  goto <bb 25>; [0.00%]

  <bb 19> [0.00%]:
  carry = 0;
  ShiftMantRight1 (&carry, &locy.mantissa);
  carry.5_28 = carry;
  if (carry.5_28 != 0)
    goto <bb 20>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 20> [0.00%]:
  carry = 0;
  j_84 = 3;
  goto <bb 22>; [0.00%]

  <bb 21> [0.00%]:
  _29 = x_59(D)->mantissa[j_48];
  _30 = (int) _29;
  _31 = z_61(D)->mantissa[j_48];
  _32 = (int) _31;
  _33 = &z_61(D)->mantissa[j_48];
  Add16Bits (&carry, _33, _32, _30);
  j_86 = j_48 + -1;

  <bb 22> [0.00%]:
  # j_48 = PHI <j_84(20), j_86(21)>
  if (j_48 >= 0)
    goto <bb 21>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 23> [0.00%]:
  carry = 0;

  <bb 24> [0.00%]:
  _34 = &z_61(D)->mantissa;
  ShiftMantRight1 (&carry, _34);
  ShiftMantRight1 (&carry, &extra_bits);
  i_89 = i_47 + 1;

  <bb 25> [0.00%]:
  # i_47 = PHI <i_73(18), i_89(24)>
  if (i_47 <= 63)
    goto <bb 19>; [0.00%]
  else
    goto <bb 27>; [0.00%]

  <bb 26> [0.00%]:
  carry = 0;
  ShiftMantLeft1 (&carry, &extra_bits);
  _35 = &z_61(D)->mantissa;
  ShiftMantLeft1 (&carry, _35);
  _36 = z_61(D)->exp;
  _37 = _36;
  _38 = (unsigned short) _37;
  _39 = _38 + 65535;
  _40 = (short int) _39;
  z_61(D)->exp = _40;

  <bb 27> [0.00%]:
  _41 = z_61(D)->mantissa[0];
  _42 = (signed short) _41;
  if (_42 >= 0)
    goto <bb 26>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 28> [0.00%]:
  _43 = IsMantissaZero (&extra_bits);
  if (_43 != 0)
    goto <bb 29>; [0.00%]
  else
    goto <bb 31> (<L49>); [0.00%]

  <bb 29> [0.00%]:
  _44 = z_61(D)->mantissa[3];
  _45 = _44 | 1;
  z_61(D)->mantissa[3] = _45;
  goto <bb 31> (<L49>); [0.00%]

<L48> [0.00%]:
  choose_nan (x_59(D), y_60(D), z_61(D), 0);

<L49> [0.00%]:
  RoundInternalFPF (z_61(D));
  carry ={v} {CLOBBER};
  extra_bits ={v} {CLOBBER};
  locy ={v} {CLOBBER};
  return;

}



;; Function DoEmFloatIteration (DoEmFloatIteration, funcdef_no=35, decl_uid=2773, cgraph_uid=35, symbol_order=35)

DoEmFloatIteration (struct InternalFPF * abase, struct InternalFPF * bbase, struct InternalFPF * cbase, long unsigned int arraysize, long unsigned int loops)
{
  long unsigned int i;
  static unsigned char jtable[16] = {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
  long unsigned int elapsed;
  long unsigned int _1;
  unsigned char _2;
  int _3;
  long unsigned int _4;
  struct InternalFPF * _5;
  long unsigned int _6;
  struct InternalFPF * _7;
  long unsigned int _8;
  struct InternalFPF * _9;
  long unsigned int _10;
  struct InternalFPF * _11;
  long unsigned int _12;
  struct InternalFPF * _13;
  long unsigned int _14;
  struct InternalFPF * _15;
  long unsigned int _16;
  struct InternalFPF * _17;
  long unsigned int _18;
  struct InternalFPF * _19;
  long unsigned int _20;
  struct InternalFPF * _21;
  long unsigned int _22;
  struct InternalFPF * _23;
  long unsigned int _24;
  struct InternalFPF * _25;
  long unsigned int _26;
  struct InternalFPF * _27;
  long unsigned int loops.1_28;
  long unsigned int _40;

  <bb 2> [0.00%]:
  elapsed_36 = StartStopwatch ();
  goto <bb 11>; [0.00%]

  <bb 3> [0.00%]:
  i_41 = 0;
  goto <bb 10>; [0.00%]

  <bb 4> [0.00%]:
  _1 = i_30 & 15;
  _2 = jtable[_1];
  _3 = (int) _2;
  switch (_3) <default: <L6> [0.00%], case 0: <L2> [0.00%], case 1: <L3> [0.00%], case 2: <L4> [0.00%], case 3: <L5> [0.00%]>

<L2> [0.00%]:
  _4 = i_30 * 12;
  _5 = cbase_43(D) + _4;
  _6 = i_30 * 12;
  _7 = bbase_44(D) + _6;
  _8 = i_30 * 12;
  _9 = abase_45(D) + _8;
  AddSubInternalFPF (0, _9, _7, _5);
  goto <bb 9> (<L6>); [0.00%]

<L3> [0.00%]:
  _10 = i_30 * 12;
  _11 = cbase_43(D) + _10;
  _12 = i_30 * 12;
  _13 = bbase_44(D) + _12;
  _14 = i_30 * 12;
  _15 = abase_45(D) + _14;
  AddSubInternalFPF (1, _15, _13, _11);
  goto <bb 9> (<L6>); [0.00%]

<L4> [0.00%]:
  _16 = i_30 * 12;
  _17 = cbase_43(D) + _16;
  _18 = i_30 * 12;
  _19 = bbase_44(D) + _18;
  _20 = i_30 * 12;
  _21 = abase_45(D) + _20;
  MultiplyInternalFPF (_21, _19, _17);
  goto <bb 9> (<L6>); [0.00%]

<L5> [0.00%]:
  _22 = i_30 * 12;
  _23 = cbase_43(D) + _22;
  _24 = i_30 * 12;
  _25 = bbase_44(D) + _24;
  _26 = i_30 * 12;
  _27 = abase_45(D) + _26;
  DivideInternalFPF (_27, _25, _23);

<L6> [0.00%]:
  i_50 = i_30 + 1;

  <bb 10> [0.00%]:
  # i_30 = PHI <i_41(3), i_50(9)>
  if (i_30 < arraysize_42(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  # loops_29 = PHI <loops_37(D)(2), loops_38(10)>
  loops.1_28 = loops_29;
  loops_38 = loops.1_28 + 18446744073709551615;
  if (loops.1_28 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [0.00%]:
  _40 = StopStopwatch (elapsed_36);
  return _40;

}


