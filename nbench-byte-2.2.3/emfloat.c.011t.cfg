
;; Function SetupCPUEmFloatArrays (SetupCPUEmFloatArrays, funcdef_no=34, decl_uid=2767, cgraph_uid=34, symbol_order=34)

Removing basic block 5
Merging blocks 6 and 7
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
SetupCPUEmFloatArrays (struct InternalFPF * abase, struct InternalFPF * bbase, struct InternalFPF * cbase, long unsigned int arraysize)
{
  struct InternalFPF locFPF2;
  struct InternalFPF locFPF1;
  long unsigned int i;

  <bb 2> [0.00%]:
  randnum (13);
  i = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = randwc (50000);
  Int32ToInternalFPF (_1, &locFPF1);
  _2 = randwc (50000);
  _3 = _2 + 1;
  Int32ToInternalFPF (_3, &locFPF2);
  _4 = i * 12;
  _5 = abase + _4;
  DivideInternalFPF (&locFPF1, &locFPF2, _5);
  _6 = randwc (50000);
  _7 = _6 + 1;
  Int32ToInternalFPF (_7, &locFPF2);
  _8 = i * 12;
  _9 = bbase + _8;
  DivideInternalFPF (&locFPF1, &locFPF2, _9);
  i = i + 1;

  <bb 4> [0.00%]:
  if (i < arraysize)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  locFPF1 = {CLOBBER};
  locFPF2 = {CLOBBER};
  return;

}



;; Function Int32ToInternalFPF (Int32ToInternalFPF, funcdef_no=52, decl_uid=2830, cgraph_uid=52, symbol_order=52)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11
;;
;; Loop 1
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 9 10 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 1 }
Int32ToInternalFPF (int32 mylong, struct InternalFPF * dest)
{
  short unsigned int myword;
  int i;

  <bb 2> [0.00%]:
  if (mylong < 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  dest->sign = 1;
  mylong = -mylong;
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  dest->sign = 0;

  <bb 5> [0.00%]:
  dest->type = 2;
  i = 0;
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  dest->mantissa[i] = 0;
  i = i + 1;

  <bb 7> [0.00%]:
  if (i <= 3)
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  if (mylong == 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  dest->type = 0;
  dest->exp = 0;
  goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  dest->exp = 32;
  _1 = mylong >> 16;
  myword = (short unsigned int) _1;
  dest->mantissa[0] = myword;
  myword = (short unsigned int) mylong;
  dest->mantissa[1] = myword;
  normalize (dest);

  <bb 11> [0.00%]:
  return;

}



;; Function normalize (normalize, funcdef_no=45, decl_uid=2804, cgraph_uid=45, symbol_order=45)

Removing basic block 5
Merging blocks 6 and 7
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
normalize (struct InternalFPF * ptr)
{
  short unsigned int carry;

  <bb 2> [0.00%]:
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  carry = 0;
  _1 = &ptr->mantissa;
  ShiftMantLeft1 (&carry, _1);
  _2 = ptr->exp;
  _3 = _2;
  _4 = (unsigned short) _3;
  _5 = _4 + 65535;
  _6 = (short int) _5;
  ptr->exp = _6;

  <bb 4> [0.00%]:
  _7 = ptr->mantissa[0];
  _8 = (signed short) _7;
  if (_8 >= 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  carry = {CLOBBER};
  return;

}



;; Function ShiftMantLeft1 (ShiftMantLeft1, funcdef_no=42, decl_uid=2796, cgraph_uid=42, symbol_order=42)

Removing basic block 7
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
ShiftMantLeft1 (short unsigned int * carry, short unsigned int * mantissa)
{
  short unsigned int accum;
  int new_carry;
  int i;

  <bb 2> [0.00%]:
  i = 3;
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i;
  _2 = _1 * 2;
  _3 = mantissa + _2;
  accum = *_3;
  _4 = (int) accum;
  new_carry = _4 & 32768;
  accum = accum << 1;
  _5 = *carry;
  if (_5 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  accum = accum | 1;

  <bb 5> [0.00%]:
  _6 = (short unsigned int) new_carry;
  *carry = _6;
  _7 = (long unsigned int) i;
  _8 = _7 * 2;
  _9 = mantissa + _8;
  *_9 = accum;
  i = i + -1;

  <bb 6> [0.00%]:
  if (i >= 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function DivideInternalFPF (DivideInternalFPF, funcdef_no=51, decl_uid=2827, cgraph_uid=51, symbol_order=51)

Removing basic block 16
Removing basic block 22
Removing basic block 36
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35
;;
;; Loop 2
;;  header 33, latch 32
;;  depth 1, outer 0
;;  nodes: 33 32 24 31 30 28 29 21 25 27 22 26 23
;;
;; Loop 4
;;  header 30, latch 29
;;  depth 2, outer 2
;;  nodes: 30 29
;;
;; Loop 3
;;  header 27, latch 26
;;  depth 2, outer 2
;;  nodes: 27 26 25 23
;;
;; Loop 1
;;  header 20, latch 19
;;  depth 1, outer 0
;;  nodes: 20 19
;; 2 succs { 35 3 4 6 11 7 12 9 10 34 }
;; 3 succs { 35 }
;; 4 succs { 5 6 }
;; 5 succs { 35 }
;; 6 succs { 35 }
;; 7 succs { 8 9 }
;; 8 succs { 35 }
;; 9 succs { 35 }
;; 10 succs { 35 }
;; 11 succs { 35 }
;; 12 succs { 13 16 }
;; 13 succs { 14 15 }
;; 14 succs { 35 }
;; 15 succs { 35 }
;; 16 succs { 17 18 }
;; 17 succs { 35 }
;; 18 succs { 20 }
;; 19 succs { 20 }
;; 20 succs { 19 33 }
;; 21 succs { 22 28 }
;; 22 succs { 27 }
;; 23 succs { 24 25 }
;; 24 succs { 32 }
;; 25 succs { 28 26 }
;; 26 succs { 27 }
;; 27 succs { 23 28 }
;; 28 succs { 30 }
;; 29 succs { 30 }
;; 30 succs { 29 31 }
;; 31 succs { 32 }
;; 32 succs { 33 }
;; 33 succs { 21 35 }
;; 34 succs { 35 }
;; 35 succs { 1 }
DivideInternalFPF (struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  struct InternalFPF locx;
  short unsigned int extra_bits[4];
  short unsigned int carry;
  int j;
  int i;

  <bb 2> [0.00%]:
  _1 = x->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L54> [0.00%], case 0: <L0> [0.00%], case 1 ... 2: <L2> [0.00%], case 3: <L5> [0.00%], case 4: <L20> [0.00%], case 5: <L9> [0.00%], case 6 ... 7: <L24> [0.00%], case 8: <L5> [0.00%], case 9: <L20> [0.00%], case 10: <L9> [0.00%], case 11 ... 12: <L24> [0.00%], case 13: <L5> [0.00%], case 14: <L20> [0.00%], case 15 ... 17: <L12> [0.00%], case 18: <L0> [0.00%], case 19: <L20> [0.00%], case 20 ... 23: <L16> [0.00%], case 24: <L53> [0.00%]>

<L0> [0.00%]:
  SetInternalFPFNaN (z);
  goto <bb 35> (<L54>); [0.00%]

<L2> [0.00%]:
  _7 = &y->mantissa;
  _8 = IsMantissaZero (_7);
  if (_8 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6> (<L5>); [0.00%]

  <bb 5> [0.00%]:
  SetInternalFPFNaN (z);
  goto <bb 35> (<L54>); [0.00%]

<L5> [0.00%]:
  _9 = x->sign;
  _10 = y->sign;
  _11 = _9 ^ _10;
  _12 = (int) _11;
  SetInternalFPFZero (z, _12);
  goto <bb 35> (<L54>); [0.00%]

<L9> [0.00%]:
  _13 = &x->mantissa;
  _14 = IsMantissaZero (_13);
  if (_14 != 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9> (<L12>); [0.00%]

  <bb 8> [0.00%]:
  SetInternalFPFNaN (z);
  goto <bb 35> (<L54>); [0.00%]

<L12> [0.00%]:
  SetInternalFPFInfinity (z, 0);
  _15 = x->sign;
  _16 = y->sign;
  _17 = _15 ^ _16;
  z->sign = _17;
  goto <bb 35> (<L54>); [0.00%]

<L16> [0.00%]:
  memmove (x, z, 12);
  goto <bb 35> (<L54>); [0.00%]

<L20> [0.00%]:
  memmove (y, z, 12);
  goto <bb 35> (<L54>); [0.00%]

<L24> [0.00%]:
  memmove (&locx, x, 12);
  _18 = IsMantissaZero (&locx.mantissa);
  if (_18 != 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 13> [0.00%]:
  _19 = &y->mantissa;
  _20 = IsMantissaZero (_19);
  if (_20 != 0)
    goto <bb 14>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  SetInternalFPFNaN (z);
  goto <bb 35> (<L54>); [0.00%]

  <bb 15> [0.00%]:
  SetInternalFPFZero (z, 0);
  goto <bb 35> (<L54>); [0.00%]

  <bb 16> [0.00%]:
  _21 = &y->mantissa;
  _22 = IsMantissaZero (_21);
  if (_22 != 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  SetInternalFPFInfinity (z, 0);
  goto <bb 35> (<L54>); [0.00%]

  <bb 18> [0.00%]:
  _23 = x->type;
  z->type = _23;
  _24 = x->sign;
  _25 = y->sign;
  _26 = _24 ^ _25;
  z->sign = _26;
  _27 = x->exp;
  _28 = (unsigned short) _27;
  _29 = y->exp;
  _30 = (unsigned short) _29;
  _31 = _28 - _30;
  _32 = _31 + 128;
  _33 = (short int) _32;
  z->exp = _33;
  i = 0;
  goto <bb 20>; [0.00%]

  <bb 19> [0.00%]:
  z->mantissa[i] = 0;
  extra_bits[i] = 0;
  i = i + 1;

  <bb 20> [0.00%]:
  if (i <= 3)
    goto <bb 19>; [0.00%]
  else
    goto <bb 33>; [0.00%]

  <bb 21> [0.00%]:
  carry = 0;
  ShiftMantLeft1 (&carry, &locx.mantissa);
  ShiftMantLeft1 (&carry, &extra_bits);
  carry.0_34 = carry;
  if (carry.0_34 == 0)
    goto <bb 22>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 22> [0.00%]:
  j = 0;
  goto <bb 27>; [0.00%]

  <bb 23> [0.00%]:
  _35 = y->mantissa[j];
  _36 = extra_bits[j];
  if (_35 > _36)
    goto <bb 24>; [0.00%]
  else
    goto <bb 25>; [0.00%]

  <bb 24> [0.00%]:
  carry = 0;
  goto <bb 32> (no_subtract); [0.00%]

  <bb 25> [0.00%]:
  _37 = y->mantissa[j];
  _38 = extra_bits[j];
  if (_37 < _38)
    goto <bb 28>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 26> [0.00%]:
  j = j + 1;

  <bb 27> [0.00%]:
  if (j <= 3)
    goto <bb 23>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 28> [0.00%]:
  carry = 0;
  j = 3;
  goto <bb 30>; [0.00%]

  <bb 29> [0.00%]:
  _39 = y->mantissa[j];
  _40 = (int) _39;
  _41 = extra_bits[j];
  _42 = (int) _41;
  _43 = &extra_bits[j];
  Sub16Bits (&carry, _43, _42, _40);
  j = j + -1;

  <bb 30> [0.00%]:
  if (j >= 0)
    goto <bb 29>; [0.00%]
  else
    goto <bb 31>; [0.00%]

  <bb 31> [0.00%]:
  carry = 1;

no_subtract [0.00%]:
  _44 = &z->mantissa;
  ShiftMantLeft1 (&carry, _44);
  _45 = z->exp;
  _46 = _45;
  _47 = (unsigned short) _46;
  _48 = _47 + 65535;
  _49 = (short int) _48;
  z->exp = _49;

  <bb 33> [0.00%]:
  _50 = z->mantissa[0];
  _51 = (signed short) _50;
  if (_51 >= 0)
    goto <bb 21>; [0.00%]
  else
    goto <bb 35> (<L54>); [0.00%]

<L53> [0.00%]:
  choose_nan (x, y, z, 0);

<L54> [0.00%]:
  RoundInternalFPF (z);
  carry = {CLOBBER};
  extra_bits = {CLOBBER};
  locx = {CLOBBER};
  return;

}



;; Function memmove (<unset-asm-name>, funcdef_no=26, decl_uid=730, cgraph_uid=26, symbol_order=26)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
__attribute__((__artificial__, __gnu_inline__, __always_inline__, __nothrow__, __leaf__))
memmove (void * __dest, const void * __src, size_t __len)
{
  void * D.3159;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__dest, 0);
  D.3159 = __builtin___memmove_chk (__dest, __src, __len, _1);
  return D.3159;

}



;; Function SetInternalFPFNaN (SetInternalFPFNaN, funcdef_no=38, decl_uid=2781, cgraph_uid=38, symbol_order=38)

Removing basic block 5
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
SetInternalFPFNaN (struct InternalFPF * dest)
{
  int i;

  <bb 2> [0.00%]:
  dest->type = 4;
  dest->exp = 32767;
  dest->sign = 1;
  dest->mantissa[0] = 16384;
  i = 1;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  dest->mantissa[i] = 0;
  i = i + 1;

  <bb 4> [0.00%]:
  if (i <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  return;

}



;; Function SetInternalFPFZero (SetInternalFPFZero, funcdef_no=36, decl_uid=2776, cgraph_uid=36, symbol_order=36)

Removing basic block 5
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
SetInternalFPFZero (struct InternalFPF * dest, unsigned char sign)
{
  int i;

  <bb 2> [0.00%]:
  dest->type = 0;
  dest->sign = sign;
  dest->exp = -32767;
  i = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  dest->mantissa[i] = 0;
  i = i + 1;

  <bb 4> [0.00%]:
  if (i <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  return;

}



;; Function IsMantissaZero (IsMantissaZero, funcdef_no=39, decl_uid=2783, cgraph_uid=39, symbol_order=39)

Merging blocks 5 and 6
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
IsMantissaZero (short unsigned int * mant)
{
  int n;
  int i;
  int D.3163;

  <bb 2> [0.00%]:
  n = 0;
  i = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i;
  _2 = _1 * 2;
  _3 = mant + _2;
  _4 = *_3;
  _5 = (int) _4;
  n = n | _5;
  i = i + 1;

  <bb 4> [0.00%]:
  if (i <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  _6 = n == 0;
  D.3163 = (int) _6;
  return D.3163;

}



;; Function SetInternalFPFInfinity (SetInternalFPFInfinity, funcdef_no=37, decl_uid=2779, cgraph_uid=37, symbol_order=37)

Removing basic block 5
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
SetInternalFPFInfinity (struct InternalFPF * dest, unsigned char sign)
{
  int i;

  <bb 2> [0.00%]:
  dest->type = 3;
  dest->sign = sign;
  dest->exp = -32767;
  i = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  dest->mantissa[i] = 0;
  i = i + 1;

  <bb 4> [0.00%]:
  if (i <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  return;

}



;; Function Sub16Bits (Sub16Bits, funcdef_no=41, decl_uid=2793, cgraph_uid=41, symbol_order=41)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Sub16Bits (short unsigned int * borrow, short unsigned int * a, short unsigned int b, short unsigned int c)
{
  unsigned int accum;

  <bb 2> [0.00%]:
  accum = (unsigned int) b;
  _1 = (unsigned int) c;
  accum = accum - _1;
  _2 = *borrow;
  _3 = (unsigned int) _2;
  accum = accum - _3;
  _4 = accum >> 16;
  _5 = (short unsigned int) _4;
  _6 = _5 & 1;
  *borrow = _6;
  _7 = (short unsigned int) accum;
  *a = _7;
  return;

}



;; Function choose_nan (choose_nan, funcdef_no=48, decl_uid=2814, cgraph_uid=48, symbol_order=48)

Removing basic block 12
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
;;
;; Loop 1
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7 5 3
;; 2 succs { 8 }
;; 3 succs { 4 5 }
;; 4 succs { 12 }
;; 5 succs { 6 7 }
;; 6 succs { 12 }
;; 7 succs { 8 }
;; 8 succs { 3 9 }
;; 9 succs { 10 11 }
;; 10 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 1 }
choose_nan (struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z, int intel_flag)
{
  int i;

  <bb 2> [0.00%]:
  i = 0;
  goto <bb 8>; [0.00%]

  <bb 3> [0.00%]:
  _1 = x->mantissa[i];
  _2 = y->mantissa[i];
  if (_1 > _2)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  memmove (x, z, 12);
  goto <bb 12>; [0.00%]

  <bb 5> [0.00%]:
  _3 = x->mantissa[i];
  _4 = y->mantissa[i];
  if (_3 < _4)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  memmove (y, z, 12);
  goto <bb 12>; [0.00%]

  <bb 7> [0.00%]:
  i = i + 1;

  <bb 8> [0.00%]:
  if (i <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  if (intel_flag == 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  memmove (x, z, 12);
  goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  memmove (y, z, 12);

  <bb 12> [0.00%]:
  return;

}



;; Function DoEmFloatIteration (DoEmFloatIteration, funcdef_no=35, decl_uid=2773, cgraph_uid=35, symbol_order=35)

Merging blocks 12 and 13
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
;;
;; Loop 1
;;  header 11, latch 10
;;  depth 1, outer 0
;;  nodes: 11 10 3 9 4 5 6 7 8
;;
;; Loop 2
;;  header 10, latch 9
;;  depth 2, outer 1
;;  nodes: 10 9 4 5 6 7 8
;; 2 succs { 11 }
;; 3 succs { 10 }
;; 4 succs { 9 5 6 7 8 }
;; 5 succs { 9 }
;; 6 succs { 9 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 10 }
;; 10 succs { 4 11 }
;; 11 succs { 3 12 }
;; 12 succs { 1 }
DoEmFloatIteration (struct InternalFPF * abase, struct InternalFPF * bbase, struct InternalFPF * cbase, long unsigned int arraysize, long unsigned int loops)
{
  long unsigned int i;
  static unsigned char jtable[16] = {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
  long unsigned int elapsed;
  long unsigned int D.3176;

  <bb 2> [0.00%]:
  elapsed = StartStopwatch ();
  goto <bb 11>; [0.00%]

  <bb 3> [0.00%]:
  i = 0;
  goto <bb 10>; [0.00%]

  <bb 4> [0.00%]:
  _1 = i & 15;
  _2 = jtable[_1];
  _3 = (int) _2;
  switch (_3) <default: <L6> [0.00%], case 0: <L2> [0.00%], case 1: <L3> [0.00%], case 2: <L4> [0.00%], case 3: <L5> [0.00%]>

<L2> [0.00%]:
  _4 = i * 12;
  _5 = cbase + _4;
  _6 = i * 12;
  _7 = bbase + _6;
  _8 = i * 12;
  _9 = abase + _8;
  AddSubInternalFPF (0, _9, _7, _5);
  goto <bb 9> (<L6>); [0.00%]

<L3> [0.00%]:
  _10 = i * 12;
  _11 = cbase + _10;
  _12 = i * 12;
  _13 = bbase + _12;
  _14 = i * 12;
  _15 = abase + _14;
  AddSubInternalFPF (1, _15, _13, _11);
  goto <bb 9> (<L6>); [0.00%]

<L4> [0.00%]:
  _16 = i * 12;
  _17 = cbase + _16;
  _18 = i * 12;
  _19 = bbase + _18;
  _20 = i * 12;
  _21 = abase + _20;
  MultiplyInternalFPF (_21, _19, _17);
  goto <bb 9> (<L6>); [0.00%]

<L5> [0.00%]:
  _22 = i * 12;
  _23 = cbase + _22;
  _24 = i * 12;
  _25 = bbase + _24;
  _26 = i * 12;
  _27 = abase + _26;
  DivideInternalFPF (_27, _25, _23);

<L6> [0.00%]:
  i = i + 1;

  <bb 10> [0.00%]:
  if (i < arraysize)
    goto <bb 4>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  loops.1_28 = loops;
  loops = loops.1_28 + 18446744073709551615;
  if (loops.1_28 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [0.00%]:
  D.3176 = StopStopwatch (elapsed);
  return D.3176;

}



;; Function AddSubInternalFPF (AddSubInternalFPF, funcdef_no=49, decl_uid=2819, cgraph_uid=49, symbol_order=49)

Removing basic block 5
Removing basic block 26
Removing basic block 32
Removing basic block 40
Merging blocks 43 and 44
Merging blocks 43 and 45
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
;;
;; Loop 3
;;  header 24, latch 23
;;  depth 1, outer 0
;;  nodes: 24 23
;;
;; Loop 2
;;  header 20, latch 19
;;  depth 1, outer 0
;;  nodes: 20 19
;;
;; Loop 1
;;  header 32, latch 31
;;  depth 1, outer 0
;;  nodes: 32 31
;; 2 succs { 39 3 7 6 5 8 37 38 }
;; 3 succs { 4 39 }
;; 4 succs { 39 }
;; 5 succs { 39 }
;; 6 succs { 39 }
;; 7 succs { 39 }
;; 8 succs { 9 14 }
;; 9 succs { 11 10 }
;; 10 succs { 11 12 }
;; 11 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 17 }
;; 14 succs { 15 16 }
;; 15 succs { 17 }
;; 16 succs { 17 }
;; 17 succs { 18 30 }
;; 18 succs { 20 }
;; 19 succs { 20 }
;; 20 succs { 19 21 }
;; 21 succs { 22 25 }
;; 22 succs { 24 }
;; 23 succs { 24 }
;; 24 succs { 23 25 }
;; 25 succs { 26 27 }
;; 26 succs { 39 }
;; 27 succs { 29 28 }
;; 28 succs { 29 39 }
;; 29 succs { 39 }
;; 30 succs { 32 }
;; 31 succs { 32 }
;; 32 succs { 31 33 }
;; 33 succs { 34 35 }
;; 34 succs { 39 }
;; 35 succs { 36 39 }
;; 36 succs { 39 }
;; 37 succs { 39 }
;; 38 succs { 39 }
;; 39 succs { 1 }
AddSubInternalFPF (unsigned char operation, struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  struct InternalFPF locy;
  struct InternalFPF locx;
  int i;
  short unsigned int carry;
  short unsigned int borrow;
  int exponent_difference;

  <bb 2> [0.00%]:
  _1 = x->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L63> [0.00%], case 0: <L0> [0.00%], case 1 ... 3: <L16> [0.00%], case 4: <L12> [0.00%], case 5: <L3> [0.00%], case 6 ... 7: <L21> [0.00%], case 8: <L16> [0.00%], case 9: <L12> [0.00%], case 10: <L3> [0.00%], case 11 ... 12: <L21> [0.00%], case 13: <L16> [0.00%], case 14: <L12> [0.00%], case 15 ... 17: <L3> [0.00%], case 18: <L61> [0.00%], case 19: <L12> [0.00%], case 20 ... 23: <L3> [0.00%], case 24: <L62> [0.00%]>

<L0> [0.00%]:
  memmove (x, z, 12);
  _7 = x->sign;
  _8 = y->sign;
  _9 = _7 ^ _8;
  if (operation != _9)
    goto <bb 4>; [0.00%]
  else
    goto <bb 39> (<L63>); [0.00%]

  <bb 4> [0.00%]:
  z->sign = 0;
  goto <bb 39> (<L63>); [0.00%]

<L3> [0.00%]:
  memmove (x, z, 12);
  goto <bb 39> (<L63>); [0.00%]

<L12> [0.00%]:
  memmove (y, z, 12);
  goto <bb 39> (<L63>); [0.00%]

<L16> [0.00%]:
  memmove (y, z, 12);
  _10 = z->sign;
  _11 = operation ^ _10;
  z->sign = _11;
  goto <bb 39> (<L63>); [0.00%]

<L21> [0.00%]:
  memmove (&locx, x, 12);
  memmove (&locy, y, 12);
  _12 = locx.exp;
  _13 = (int) _12;
  _14 = locy.exp;
  _15 = (int) _14;
  exponent_difference = _13 - _15;
  if (exponent_difference == 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 9> [0.00%]:
  _16 = locx.type;
  if (_16 == 1)
    goto <bb 11>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  _17 = locy.type;
  if (_17 == 1)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  z->type = 1;
  goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  z->type = 2;

  <bb 13> [0.00%]:
  _18 = locx.sign;
  z->sign = _18;
  _19 = locx.exp;
  z->exp = _19;
  goto <bb 17>; [0.00%]

  <bb 14> [0.00%]:
  if (exponent_difference > 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:
  StickyShiftRightMant (&locy, exponent_difference);
  _20 = locx.type;
  z->type = _20;
  _21 = locx.sign;
  z->sign = _21;
  _22 = locx.exp;
  z->exp = _22;
  goto <bb 17>; [0.00%]

  <bb 16> [0.00%]:
  _23 = -exponent_difference;
  StickyShiftRightMant (&locx, _23);
  _24 = locy.type;
  z->type = _24;
  _25 = locy.sign;
  _26 = operation ^ _25;
  z->sign = _26;
  _27 = locy.exp;
  z->exp = _27;

  <bb 17> [0.00%]:
  _28 = locx.sign;
  _29 = locy.sign;
  _30 = _28 ^ _29;
  if (operation != _30)
    goto <bb 18>; [0.00%]
  else
    goto <bb 30>; [0.00%]

  <bb 18> [0.00%]:
  borrow = 0;
  i = 3;
  goto <bb 20>; [0.00%]

  <bb 19> [0.00%]:
  _31 = locy.mantissa[i];
  _32 = (int) _31;
  _33 = locx.mantissa[i];
  _34 = (int) _33;
  _35 = &z->mantissa[i];
  Sub16Bits (&borrow, _35, _34, _32);
  i = i + -1;

  <bb 20> [0.00%]:
  if (i >= 0)
    goto <bb 19>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 21> [0.00%]:
  borrow.2_36 = borrow;
  if (borrow.2_36 != 0)
    goto <bb 22>; [0.00%]
  else
    goto <bb 25>; [0.00%]

  <bb 22> [0.00%]:
  _37 = locy.sign;
  _38 = operation ^ _37;
  z->sign = _38;
  borrow = 0;
  i = 3;
  goto <bb 24>; [0.00%]

  <bb 23> [0.00%]:
  _39 = z->mantissa[i];
  _40 = (int) _39;
  _41 = &z->mantissa[i];
  Sub16Bits (&borrow, _41, 0, _40);
  i = i + -1;

  <bb 24> [0.00%]:
  if (i >= 0)
    goto <bb 23>; [0.00%]
  else
    goto <bb 25>; [0.00%]

  <bb 25> [0.00%]:
  _42 = &z->mantissa;
  _43 = IsMantissaZero (_42);
  if (_43 != 0)
    goto <bb 26>; [0.00%]
  else
    goto <bb 27>; [0.00%]

  <bb 26> [0.00%]:
  z->type = 0;
  z->sign = 0;
  goto <bb 39> (<L63>); [0.00%]

  <bb 27> [0.00%]:
  _44 = locx.type;
  if (_44 == 2)
    goto <bb 29>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 28> [0.00%]:
  _45 = locy.type;
  if (_45 == 2)
    goto <bb 29>; [0.00%]
  else
    goto <bb 39> (<L63>); [0.00%]

  <bb 29> [0.00%]:
  normalize (z);
  goto <bb 39> (<L63>); [0.00%]

  <bb 30> [0.00%]:
  carry = 0;
  i = 3;
  goto <bb 32>; [0.00%]

  <bb 31> [0.00%]:
  _46 = locy.mantissa[i];
  _47 = (int) _46;
  _48 = locx.mantissa[i];
  _49 = (int) _48;
  _50 = &z->mantissa[i];
  Add16Bits (&carry, _50, _49, _47);
  i = i + -1;

  <bb 32> [0.00%]:
  if (i >= 0)
    goto <bb 31>; [0.00%]
  else
    goto <bb 33>; [0.00%]

  <bb 33> [0.00%]:
  carry.3_51 = carry;
  if (carry.3_51 != 0)
    goto <bb 34>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 34> [0.00%]:
  _52 = z->exp;
  _53 = _52;
  _54 = (unsigned short) _53;
  _55 = _54 + 1;
  _56 = (short int) _55;
  z->exp = _56;
  carry = 0;
  _57 = &z->mantissa;
  ShiftMantRight1 (&carry, _57);
  _58 = z->mantissa[0];
  _59 = _58 | 32768;
  z->mantissa[0] = _59;
  z->type = 2;
  goto <bb 39> (<L63>); [0.00%]

  <bb 35> [0.00%]:
  _60 = z->mantissa[0];
  _61 = (signed short) _60;
  if (_61 < 0)
    goto <bb 36>; [0.00%]
  else
    goto <bb 39> (<L63>); [0.00%]

  <bb 36> [0.00%]:
  z->type = 2;
  goto <bb 39> (<L63>); [0.00%]

<L61> [0.00%]:
  SetInternalFPFNaN (z);
  goto <bb 39> (<L63>); [0.00%]

<L62> [0.00%]:
  choose_nan (x, y, z, 1);

<L63> [0.00%]:
  RoundInternalFPF (z);
  borrow = {CLOBBER};
  carry = {CLOBBER};
  locx = {CLOBBER};
  locy = {CLOBBER};
  return;

}



;; Function StickyShiftRightMant (StickyShiftRightMant, funcdef_no=44, decl_uid=2802, cgraph_uid=44, symbol_order=44)

Removing basic block 13
Merging blocks 14 and 15
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13
;;
;; Loop 2
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;;
;; Loop 1
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11 9 10
;; 2 succs { 3 13 }
;; 3 succs { 4 8 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 13 }
;; 8 succs { 12 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 12 }
;; 12 succs { 9 13 }
;; 13 succs { 1 }
StickyShiftRightMant (struct InternalFPF * ptr, int amount)
{
  short unsigned int * mantissa;
  short unsigned int carry;
  int i;

  <bb 2> [0.00%]:
  mantissa = &ptr->mantissa;
  _1 = ptr->type;
  if (_1 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 3> [0.00%]:
  if (amount > 63)
    goto <bb 4>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 4> [0.00%]:
  i = 0;
  goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _2 = (long unsigned int) i;
  _3 = _2 * 2;
  _4 = mantissa + _3;
  *_4 = 0;
  i = i + 1;

  <bb 6> [0.00%]:
  if (i <= 2)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  _5 = mantissa + 6;
  *_5 = 1;
  goto <bb 13>; [0.00%]

  <bb 8> [0.00%]:
  i = 0;
  goto <bb 12>; [0.00%]

  <bb 9> [0.00%]:
  carry = 0;
  ShiftMantRight1 (&carry, mantissa);
  carry.4_6 = carry;
  if (carry.4_6 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  _7 = mantissa + 6;
  _8 = *_7;
  _9 = mantissa + 6;
  _10 = _8 | 1;
  *_9 = _10;

  <bb 11> [0.00%]:
  i = i + 1;

  <bb 12> [0.00%]:
  if (i < amount)
    goto <bb 9>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:
  carry = {CLOBBER};
  return;

}



;; Function Add16Bits (Add16Bits, funcdef_no=40, decl_uid=2788, cgraph_uid=40, symbol_order=40)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Add16Bits (short unsigned int * carry, short unsigned int * a, short unsigned int b, short unsigned int c)
{
  unsigned int accum;

  <bb 2> [0.00%]:
  accum = (unsigned int) b;
  _1 = (unsigned int) c;
  accum = accum + _1;
  _2 = *carry;
  _3 = (unsigned int) _2;
  accum = accum + _3;
  _4 = accum >> 16;
  _5 = (short unsigned int) _4;
  _6 = _5 & 1;
  *carry = _6;
  _7 = (short unsigned int) accum;
  *a = _7;
  return;

}



;; Function ShiftMantRight1 (ShiftMantRight1, funcdef_no=43, decl_uid=2799, cgraph_uid=43, symbol_order=43)

Removing basic block 7
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
ShiftMantRight1 (short unsigned int * carry, short unsigned int * mantissa)
{
  short unsigned int accum;
  int new_carry;
  int i;

  <bb 2> [0.00%]:
  i = 0;
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i;
  _2 = _1 * 2;
  _3 = mantissa + _2;
  accum = *_3;
  _4 = (int) accum;
  new_carry = _4 & 1;
  accum = accum >> 1;
  _5 = *carry;
  if (_5 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  accum = accum | 32768;

  <bb 5> [0.00%]:
  _6 = (short unsigned int) new_carry;
  *carry = _6;
  _7 = (long unsigned int) i;
  _8 = _7 * 2;
  _9 = mantissa + _8;
  *_9 = accum;
  i = i + 1;

  <bb 6> [0.00%]:
  if (i <= 3)
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function MultiplyInternalFPF (MultiplyInternalFPF, funcdef_no=50, decl_uid=2823, cgraph_uid=50, symbol_order=50)

Removing basic block 23
Removing basic block 27
Removing basic block 32
Merging blocks 34 and 35
Merging blocks 34 and 36
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
;;
;; Loop 3
;;  header 27, latch 26
;;  depth 1, outer 0
;;  nodes: 27 26
;;
;; Loop 2
;;  header 25, latch 24
;;  depth 1, outer 0
;;  nodes: 25 24 22 23 19 20 21
;;
;; Loop 4
;;  header 22, latch 21
;;  depth 2, outer 2
;;  nodes: 22 21
;;
;; Loop 1
;;  header 17, latch 16
;;  depth 1, outer 0
;;  nodes: 17 16
;; 2 succs { 31 3 5 7 4 8 6 30 }
;; 3 succs { 31 }
;; 4 succs { 31 }
;; 5 succs { 31 }
;; 6 succs { 31 }
;; 7 succs { 31 }
;; 8 succs { 10 9 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 13 12 }
;; 12 succs { 13 14 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 17 }
;; 16 succs { 17 }
;; 17 succs { 16 18 }
;; 18 succs { 25 }
;; 19 succs { 20 23 }
;; 20 succs { 22 }
;; 21 succs { 22 }
;; 22 succs { 21 24 }
;; 23 succs { 24 }
;; 24 succs { 25 }
;; 25 succs { 19 27 }
;; 26 succs { 27 }
;; 27 succs { 26 28 }
;; 28 succs { 29 31 }
;; 29 succs { 31 }
;; 30 succs { 31 }
;; 31 succs { 1 }
MultiplyInternalFPF (struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  struct InternalFPF locy;
  short unsigned int extra_bits[4];
  short unsigned int carry;
  int j;
  int i;

  <bb 2> [0.00%]:
  _1 = x->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L49> [0.00%], case 0 ... 2: <L0> [0.00%], case 3: <L10> [0.00%], case 4: <L16> [0.00%], case 5: <L6> [0.00%], case 6 ... 7: <L20> [0.00%], case 8: <L6> [0.00%], case 9: <L16> [0.00%], case 10: <L6> [0.00%], case 11 ... 12: <L20> [0.00%], case 13: <L6> [0.00%], case 14: <L16> [0.00%], case 15: <L10> [0.00%], case 16 ... 18: <L0> [0.00%], case 19: <L16> [0.00%], case 20 ... 23: <L12> [0.00%], case 24: <L48> [0.00%]>

<L0> [0.00%]:
  memmove (x, z, 12);
  _7 = z->sign;
  _8 = y->sign;
  _9 = _7 ^ _8;
  z->sign = _9;
  goto <bb 31> (<L49>); [0.00%]

<L6> [0.00%]:
  memmove (y, z, 12);
  _10 = z->sign;
  _11 = x->sign;
  _12 = _10 ^ _11;
  z->sign = _12;
  goto <bb 31> (<L49>); [0.00%]

<L10> [0.00%]:
  SetInternalFPFNaN (z);
  goto <bb 31> (<L49>); [0.00%]

<L12> [0.00%]:
  memmove (x, z, 12);
  goto <bb 31> (<L49>); [0.00%]

<L16> [0.00%]:
  memmove (y, z, 12);
  goto <bb 31> (<L49>); [0.00%]

<L20> [0.00%]:
  memmove (&locy, y, 12);
  _13 = &x->mantissa;
  _14 = IsMantissaZero (_13);
  if (_14 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  _15 = &y->mantissa;
  _16 = IsMantissaZero (_15);
  if (_16 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  SetInternalFPFInfinity (z, 0);

  <bb 11> [0.00%]:
  _17 = x->type;
  if (_17 == 1)
    goto <bb 13>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [0.00%]:
  _18 = y->type;
  if (_18 == 1)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  z->type = 1;
  goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  z->type = 2;

  <bb 15> [0.00%]:
  _19 = x->sign;
  _20 = y->sign;
  _21 = _19 ^ _20;
  z->sign = _21;
  _22 = x->exp;
  _23 = (unsigned short) _22;
  _24 = y->exp;
  _25 = (unsigned short) _24;
  _26 = _23 + _25;
  _27 = (short int) _26;
  z->exp = _27;
  i = 0;
  goto <bb 17>; [0.00%]

  <bb 16> [0.00%]:
  z->mantissa[i] = 0;
  extra_bits[i] = 0;
  i = i + 1;

  <bb 17> [0.00%]:
  if (i <= 3)
    goto <bb 16>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 18> [0.00%]:
  i = 0;
  goto <bb 25>; [0.00%]

  <bb 19> [0.00%]:
  carry = 0;
  ShiftMantRight1 (&carry, &locy.mantissa);
  carry.5_28 = carry;
  if (carry.5_28 != 0)
    goto <bb 20>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 20> [0.00%]:
  carry = 0;
  j = 3;
  goto <bb 22>; [0.00%]

  <bb 21> [0.00%]:
  _29 = x->mantissa[j];
  _30 = (int) _29;
  _31 = z->mantissa[j];
  _32 = (int) _31;
  _33 = &z->mantissa[j];
  Add16Bits (&carry, _33, _32, _30);
  j = j + -1;

  <bb 22> [0.00%]:
  if (j >= 0)
    goto <bb 21>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 23> [0.00%]:
  carry = 0;

  <bb 24> [0.00%]:
  _34 = &z->mantissa;
  ShiftMantRight1 (&carry, _34);
  ShiftMantRight1 (&carry, &extra_bits);
  i = i + 1;

  <bb 25> [0.00%]:
  if (i <= 63)
    goto <bb 19>; [0.00%]
  else
    goto <bb 27>; [0.00%]

  <bb 26> [0.00%]:
  carry = 0;
  ShiftMantLeft1 (&carry, &extra_bits);
  _35 = &z->mantissa;
  ShiftMantLeft1 (&carry, _35);
  _36 = z->exp;
  _37 = _36;
  _38 = (unsigned short) _37;
  _39 = _38 + 65535;
  _40 = (short int) _39;
  z->exp = _40;

  <bb 27> [0.00%]:
  _41 = z->mantissa[0];
  _42 = (signed short) _41;
  if (_42 >= 0)
    goto <bb 26>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 28> [0.00%]:
  _43 = IsMantissaZero (&extra_bits);
  if (_43 != 0)
    goto <bb 29>; [0.00%]
  else
    goto <bb 31> (<L49>); [0.00%]

  <bb 29> [0.00%]:
  _44 = z->mantissa[3];
  _45 = _44 | 1;
  z->mantissa[3] = _45;
  goto <bb 31> (<L49>); [0.00%]

<L48> [0.00%]:
  choose_nan (x, y, z, 0);

<L49> [0.00%]:
  RoundInternalFPF (z);
  carry = {CLOBBER};
  extra_bits = {CLOBBER};
  locy = {CLOBBER};
  return;

}



;; Function RoundInternalFPF (RoundInternalFPF, funcdef_no=47, decl_uid=2809, cgraph_uid=47, symbol_order=47)

Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 5 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
RoundInternalFPF (struct InternalFPF * ptr)
{
  <bb 2> [0.00%]:
  _1 = ptr->type;
  _2 = _1 + 255;
  if (_2 <= 1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 3> [0.00%]:
  denormalize (ptr, -32767);
  _3 = ptr->type;
  if (_3 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _4 = ptr->mantissa[3];
  _5 = _4 & 65528;
  ptr->mantissa[3] = _5;

  <bb 5> [0.00%]:
  return;

}



;; Function denormalize (denormalize, funcdef_no=46, decl_uid=2807, cgraph_uid=46, symbol_order=46)

Removing basic block 8
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 8 }
;; 5 succs { 6 7 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 1 }
denormalize (struct InternalFPF * ptr, int minimum_exponent)
{
  long int exponent_difference;

  <bb 2> [0.00%]:
  _1 = &ptr->mantissa;
  _2 = IsMantissaZero (_1);
  if (_2 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  printf ("Error:  zero significand in denormalize\n");

  <bb 4> [0.00%]:
  _3 = ptr->exp;
  _4 = (int) _3;
  _5 = _4 - minimum_exponent;
  exponent_difference = (long int) _5;
  if (exponent_difference < 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 5> [0.00%]:
  exponent_difference = -exponent_difference;
  if (exponent_difference > 63)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _6 = ptr->sign;
  _7 = (int) _6;
  SetInternalFPFZero (ptr, _7);
  goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  _8 = ptr->exp;
  _9 = (unsigned short) _8;
  _10 = (unsigned short) exponent_difference;
  _11 = _9 + _10;
  _12 = (short int) _11;
  ptr->exp = _12;
  _13 = (int) exponent_difference;
  StickyShiftRightMant (ptr, _13);

  <bb 8> [0.00%]:
  return;

}



;; Function printf (<unset-asm-name>, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int D.3251;

  <bb 2> [0.00%]:
  D.3251 = __printf_chk (1, __fmt, __builtin_va_arg_pack ());
  return D.3251;

}



;; Function _GLOBAL__sub_I_00100_0_SetupCPUEmFloatArrays (_GLOBAL__sub_I_00100_0_SetupCPUEmFloatArrays, funcdef_no=53, decl_uid=3575, cgraph_uid=2, symbol_order=122)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
_GLOBAL__sub_I_00100_0_SetupCPUEmFloatArrays ()
{
  <bb 2> [0.00%]:
  __gcov_init (&*.LPBX0);
  return;

}



;; Function _GLOBAL__sub_D_00100_1_SetupCPUEmFloatArrays (_GLOBAL__sub_D_00100_1_SetupCPUEmFloatArrays, funcdef_no=54, decl_uid=3578, cgraph_uid=42, symbol_order=123)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
_GLOBAL__sub_D_00100_1_SetupCPUEmFloatArrays ()
{
  <bb 2> [0.00%]:
  __gcov_exit ();
  return;

}


