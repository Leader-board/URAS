
;; Function printf (printf, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)


Analyzing function body size: printf

Inline summary for printf/15 always_inline inlinable
  self time:       15
  global time:     0
  self size:       7
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000, predicate:(true)
    size:3.000000, time:2.000000, predicate:(not inlined)
  calls:
    __printf_chk/60 function body not available
      loop depth: 0 freq:1000 size: 4 time: 13 callee size: 0 stack: 0
       op0 is compile time invariant

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> [100.00%]:
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function memmove (memmove, funcdef_no=26, decl_uid=730, cgraph_uid=26, symbol_order=26)


Analyzing function body size: memmove

Inline summary for memmove/26 always_inline inlinable
  self time:       17
  global time:     0
  self size:       9
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000, predicate:(true)
    size:3.000000, time:2.000000, predicate:(not inlined)
  calls:
    __builtin___memmove_chk/56 function body not available
      loop depth: 0 freq:1000 size: 6 time: 15 callee size: 0 stack: 0
    __builtin_object_size/55 function body not available
      loop depth: 0 freq:1000 size: 0 time:  0 callee size: 0 stack: 0
       op1 is compile time invariant

__attribute__((__artificial__, __gnu_inline__, __always_inline__, __nothrow__, __leaf__))
memmove (void * __dest, const void * __src, size_t __len)
{
  long unsigned int _1;
  void * _7;

  <bb 2> [100.00%]:
  _1 = __builtin_object_size (__dest_3(D), 0);
  _7 = __builtin___memmove_chk (__dest_3(D), __src_4(D), __len_5(D), _1);
  return _7;

}



;; Function SetInternalFPFZero (SetInternalFPFZero, funcdef_no=36, decl_uid=2776, cgraph_uid=36, symbol_order=36)


Analyzing function body size: SetInternalFPFZero

Inline summary for SetInternalFPFZero/36 inlinable
  self time:       23
  global time:     0
  self size:       10
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:5.000000, time:17.500000, predicate:(true)
    size:5.000000, time:5.500000, predicate:(not inlined)
  calls:

SetInternalFPFZero (struct InternalFPF * dest, unsigned char sign)
{
  int i;

  <bb 2> [20.00%]:
  dest_4(D)->type = 0;
  dest_4(D)->sign = sign_6(D);
  dest_4(D)->exp = -32767;
  goto <bb 4>; [100.00%]

  <bb 3> [80.00%]:
  dest_4(D)->mantissa[i_1] = 0;
  i_10 = i_1 + 1;

  <bb 4> [100.00%]:
  # i_1 = PHI <0(2), i_10(3)>
  if (i_1 <= 3)
    goto <bb 3>; [80.00%]
  else
    goto <bb 5>; [20.00%]

  <bb 5> [20.00%]:
  return;

}



;; Function SetInternalFPFInfinity (SetInternalFPFInfinity, funcdef_no=37, decl_uid=2779, cgraph_uid=37, symbol_order=37)


Analyzing function body size: SetInternalFPFInfinity

Inline summary for SetInternalFPFInfinity/37 inlinable
  self time:       23
  global time:     0
  self size:       10
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:5.000000, time:17.500000, predicate:(true)
    size:5.000000, time:5.500000, predicate:(not inlined)
  calls:

SetInternalFPFInfinity (struct InternalFPF * dest, unsigned char sign)
{
  int i;

  <bb 2> [20.00%]:
  dest_4(D)->type = 3;
  dest_4(D)->sign = sign_6(D);
  dest_4(D)->exp = -32767;
  goto <bb 4>; [100.00%]

  <bb 3> [80.00%]:
  dest_4(D)->mantissa[i_1] = 0;
  i_10 = i_1 + 1;

  <bb 4> [100.00%]:
  # i_1 = PHI <0(2), i_10(3)>
  if (i_1 <= 3)
    goto <bb 3>; [80.00%]
  else
    goto <bb 5>; [20.00%]

  <bb 5> [20.00%]:
  return;

}



;; Function SetInternalFPFNaN (SetInternalFPFNaN, funcdef_no=38, decl_uid=2781, cgraph_uid=38, symbol_order=38)


Analyzing function body size: SetInternalFPFNaN

Inline summary for SetInternalFPFNaN/38 inlinable
  self time:       20
  global time:     0
  self size:       11
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:5.500000, time:14.500000, predicate:(true)
    size:5.500000, time:5.500000, predicate:(not inlined)
  calls:

SetInternalFPFNaN (struct InternalFPF * dest)
{
  int i;

  <bb 2> [25.00%]:
  dest_4(D)->type = 4;
  dest_4(D)->exp = 32767;
  dest_4(D)->sign = 1;
  dest_4(D)->mantissa[0] = 16384;
  goto <bb 4>; [100.00%]

  <bb 3> [75.00%]:
  dest_4(D)->mantissa[i_1] = 0;
  i_10 = i_1 + 1;

  <bb 4> [100.00%]:
  # i_1 = PHI <1(2), i_10(3)>
  if (i_1 <= 3)
    goto <bb 3>; [75.00%]
  else
    goto <bb 5>; [25.00%]

  <bb 5> [25.00%]:
  return;

}



;; Function IsMantissaZero (IsMantissaZero, funcdef_no=39, decl_uid=2783, cgraph_uid=39, symbol_order=39)


Analyzing function body size: IsMantissaZero

Inline summary for IsMantissaZero/39 inlinable
  self time:       33
  global time:     0
  self size:       11
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:8.000000, time:31.000000, predicate:(true)
    size:3.000000, time:2.000000, predicate:(not inlined)
  calls:

IsMantissaZero (short unsigned int * mant)
{
  int n;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  short unsigned int * _3;
  short unsigned int _4;
  int _5;
  _Bool _6;
  int _10;

  <bb 2> [20.00%]:
  goto <bb 4>; [100.00%]

  <bb 3> [80.00%]:
  _1 = (long unsigned int) i_7;
  _2 = _1 * 2;
  _3 = mant_12(D) + _2;
  _4 = *_3;
  _5 = (int) _4;
  n_13 = _5 | n_8;
  i_14 = i_7 + 1;

  <bb 4> [100.00%]:
  # i_7 = PHI <0(2), i_14(3)>
  # n_8 = PHI <0(2), n_13(3)>
  if (i_7 <= 3)
    goto <bb 3>; [80.00%]
  else
    goto <bb 5>; [20.00%]

  <bb 5> [20.00%]:
  # n_9 = PHI <n_8(4)>
  _6 = n_9 == 0;
  _10 = (int) _6;
  return _10;

}



;; Function Add16Bits (Add16Bits, funcdef_no=40, decl_uid=2788, cgraph_uid=40, symbol_order=40)


Analyzing function body size: Add16Bits

Inline summary for Add16Bits/40 inlinable
  self time:       9
  global time:     0
  self size:       10
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000, predicate:(true)
    size:4.000000, time:3.000000, predicate:(not inlined)
    size:1.000000, time:1.000000, predicate:(op2 changed || op3 changed)
    size:0.500000, time:0.500000, predicate:(op0[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000, predicate:(op0[ref offset: 0] changed)
    size:3.000000, time:3.000000, predicate:(op2 changed || op3 changed || op0[ref offset: 0] changed)
  calls:

Add16Bits (short unsigned int * carry, short unsigned int * a, short unsigned int b, short unsigned int c)
{
  unsigned int accum;
  unsigned int _1;
  short unsigned int _2;
  unsigned int _3;
  unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;

  <bb 2> [100.00%]:
  accum_9 = (unsigned int) b_8(D);
  _1 = (unsigned int) c_10(D);
  accum_11 = _1 + accum_9;
  _2 = *carry_13(D);
  _3 = (unsigned int) _2;
  accum_14 = _3 + accum_11;
  _4 = accum_14 >> 16;
  _5 = (short unsigned int) _4;
  _6 = _5 & 1;
  *carry_13(D) = _6;
  _7 = (short unsigned int) accum_14;
  *a_16(D) = _7;
  return;

}



;; Function Sub16Bits (Sub16Bits, funcdef_no=41, decl_uid=2793, cgraph_uid=41, symbol_order=41)


Analyzing function body size: Sub16Bits

Inline summary for Sub16Bits/41 inlinable
  self time:       9
  global time:     0
  self size:       10
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000, predicate:(true)
    size:4.000000, time:3.000000, predicate:(not inlined)
    size:1.000000, time:1.000000, predicate:(op2 changed || op3 changed)
    size:0.500000, time:0.500000, predicate:(op0[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000, predicate:(op0[ref offset: 0] changed)
    size:3.000000, time:3.000000, predicate:(op2 changed || op3 changed || op0[ref offset: 0] changed)
  calls:

Sub16Bits (short unsigned int * borrow, short unsigned int * a, short unsigned int b, short unsigned int c)
{
  unsigned int accum;
  unsigned int _1;
  short unsigned int _2;
  unsigned int _3;
  unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;

  <bb 2> [100.00%]:
  accum_9 = (unsigned int) b_8(D);
  _1 = (unsigned int) c_10(D);
  accum_11 = accum_9 - _1;
  _2 = *borrow_13(D);
  _3 = (unsigned int) _2;
  accum_14 = accum_11 - _3;
  _4 = accum_14 >> 16;
  _5 = (short unsigned int) _4;
  _6 = _5 & 1;
  *borrow_13(D) = _6;
  _7 = (short unsigned int) accum_14;
  *a_16(D) = _7;
  return;

}



;; Function ShiftMantLeft1 (ShiftMantLeft1, funcdef_no=42, decl_uid=2796, cgraph_uid=42, symbol_order=42)


Analyzing function body size: ShiftMantLeft1

Inline summary for ShiftMantLeft1/42 inlinable
  self time:       58
  global time:     0
  self size:       17
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:13.000000, time:52.000000, predicate:(true)
    size:4.000000, time:6.000000, predicate:(not inlined)
  calls:

ShiftMantLeft1 (short unsigned int * carry, short unsigned int * mantissa)
{
  short unsigned int accum;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  short unsigned int * _3;
  short unsigned int _4;
  short unsigned int _8;

  <bb 2> [20.00%]:
  goto <bb 6>; [100.00%]

  <bb 3> [80.00%]:
  _1 = (long unsigned int) i_5;
  _2 = _1 * 2;
  _3 = mantissa_10(D) + _2;
  accum_11 = *_3;
  _8 = accum_11 & 32768;
  accum_12 = accum_11 << 1;
  _4 = *carry_13(D);
  if (_4 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 4> [40.00%]:
  accum_14 = accum_12 | 1;

  <bb 5> [80.00%]:
  # accum_6 = PHI <accum_12(3), accum_14(4)>
  *carry_13(D) = _8;
  *_3 = accum_6;
  i_17 = i_5 + -1;

  <bb 6> [100.00%]:
  # i_5 = PHI <3(2), i_17(5)>
  if (i_5 >= 0)
    goto <bb 3>; [80.00%]
  else
    goto <bb 7>; [20.00%]

  <bb 7> [20.00%]:
  return;

}



;; Function ShiftMantRight1 (ShiftMantRight1, funcdef_no=43, decl_uid=2799, cgraph_uid=43, symbol_order=43)


Analyzing function body size: ShiftMantRight1

Inline summary for ShiftMantRight1/43 inlinable
  self time:       58
  global time:     0
  self size:       17
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:13.000000, time:52.000000, predicate:(true)
    size:4.000000, time:6.000000, predicate:(not inlined)
  calls:

ShiftMantRight1 (short unsigned int * carry, short unsigned int * mantissa)
{
  short unsigned int accum;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  short unsigned int * _3;
  short unsigned int _4;
  short unsigned int _8;

  <bb 2> [20.00%]:
  goto <bb 6>; [100.00%]

  <bb 3> [80.00%]:
  _1 = (long unsigned int) i_5;
  _2 = _1 * 2;
  _3 = mantissa_10(D) + _2;
  accum_11 = *_3;
  _8 = accum_11 & 1;
  accum_12 = accum_11 >> 1;
  _4 = *carry_13(D);
  if (_4 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 4> [40.00%]:
  accum_14 = accum_12 | 32768;

  <bb 5> [80.00%]:
  # accum_6 = PHI <accum_12(3), accum_14(4)>
  *carry_13(D) = _8;
  *_3 = accum_6;
  i_17 = i_5 + 1;

  <bb 6> [100.00%]:
  # i_5 = PHI <0(2), i_17(5)>
  if (i_5 <= 3)
    goto <bb 3>; [80.00%]
  else
    goto <bb 7>; [20.00%]

  <bb 7> [20.00%]:
  return;

}



;; Function StickyShiftRightMant (StickyShiftRightMant, funcdef_no=44, decl_uid=2802, cgraph_uid=44, symbol_order=44)


Analyzing function body size: StickyShiftRightMant

Inline summary for StickyShiftRightMant/44 inlinable
  self time:       96
  global time:     0
  self size:       35
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000, predicate:(true)
    size:3.000000, time:2.000000, predicate:(not inlined)
    size:0.500000, time:0.500000, predicate:(op0[ref offset: 0] changed) && (not inlined)
    size:2.500000, time:2.500000, predicate:(op0[ref offset: 0] changed)
    size:2.000000, time:1.080000, predicate:(op1 changed) && (op0[ref offset: 0] != 0)
    size:19.000000, time:83.162000, predicate:(op1 <= 63) && (op0[ref offset: 0] != 0)
    size:1.000000, time:0.765000, predicate:(op1 <= 63) && (op0[ref offset: 0] != 0) && (not inlined)
    size:6.500000, time:5.535000, predicate:(op1 > 63) && (op0[ref offset: 0] != 0)
    size:0.500000, time:0.135000, predicate:(op1 > 63) && (op0[ref offset: 0] != 0) && (not inlined)
  calls:

StickyShiftRightMant (struct InternalFPF * ptr, int amount)
{
  int i;
  short unsigned int accum;
  short unsigned int * mantissa;
  short unsigned int carry;
  int i;
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;
  short unsigned int * _4;
  short unsigned int _6;
  short unsigned int _7;
  long unsigned int _24;
  long unsigned int _25;
  short unsigned int * _26;
  short unsigned int _28;

  <bb 2> [13.07%]:
  mantissa_15 = &ptr_14(D)->mantissa;
  _1 = ptr_14(D)->type;
  if (_1 != 0)
    goto <bb 3>; [54.00%]
  else
    goto <bb 15>; [46.00%]

  <bb 3> [7.06%]:
  if (amount_17(D) > 63)
    goto <bb 16>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 17> [3.53%]:
  goto <bb 14>; [100.00%]

  <bb 16> [3.53%]:
  goto <bb 5>; [100.00%]

  <bb 4> [10.59%]:
  _2 = (long unsigned int) i_8;
  _3 = _2 * 2;
  _4 = mantissa_15 + _3;
  *_4 = 0;
  i_22 = i_8 + 1;

  <bb 5> [14.12%]:
  # i_8 = PHI <0(16), i_22(4)>
  if (i_8 <= 2)
    goto <bb 4>; [75.00%]
  else
    goto <bb 6>; [25.00%]

  <bb 6> [3.53%]:
  MEM[(short unsigned int *)ptr_14(D) + 10B] = 1;
  goto <bb 15>; [100.00%]

  <bb 7> [80.00%]:
  _24 = (long unsigned int) i_23;
  _25 = _24 * 2;
  _26 = mantissa_15 + _25;
  accum_27 = *_26;
  _28 = accum_27 & 1;
  accum_29 = accum_27 >> 1;
  if (carry_35 != 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 8> [40.00%]:
  accum_30 = accum_29 | 32768;

  <bb 9> [80.00%]:
  # accum_31 = PHI <accum_29(7), accum_30(8)>
  *_26 = accum_31;
  i_32 = i_23 + 1;

  <bb 10> [100.00%]:
  # i_23 = PHI <0(18), i_32(9)>
  # carry_35 = PHI <0(18), _28(9)>
  if (i_23 <= 3)
    goto <bb 7>; [80.00%]
  else
    goto <bb 11>; [20.00%]

  <bb 11> [20.00%]:
  # carry_5 = PHI <carry_35(10)>
  if (carry_5 != 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 12> [10.00%]:
  _6 = MEM[(short unsigned int *)ptr_14(D) + 10B];
  _7 = _6 | 1;
  MEM[(short unsigned int *)ptr_14(D) + 10B] = _7;

  <bb 13> [20.00%]:
  i_19 = i_9 + 1;

  <bb 14> [23.53%]:
  # i_9 = PHI <0(17), i_19(13)>
  if (i_9 < amount_17(D))
    goto <bb 18>; [85.00%]
  else
    goto <bb 15>; [15.00%]

  <bb 18> [20.00%]:
  goto <bb 10>; [100.00%]

  <bb 15> [13.07%]:
  return;

}



;; Function normalize (normalize, funcdef_no=45, decl_uid=2804, cgraph_uid=45, symbol_order=45)


Analyzing function body size: normalize

Inline summary for normalize/45 inlinable
  self time:       311
  global time:     0
  self size:       21
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:16.500000, time:299.937500, predicate:(true)
    size:4.500000, time:10.997500, predicate:(not inlined)
  calls:

normalize (struct InternalFPF * ptr)
{
  int i;
  short unsigned int accum;
  short unsigned int carry;
  short unsigned int[4] * _1;
  short int _2;
  unsigned short _3;
  unsigned short _4;
  short int _5;
  short unsigned int _6;
  signed short _7;
  long unsigned int _13;
  long unsigned int _14;
  short unsigned int * _15;
  short unsigned int _17;

  <bb 2> [3.53%]:
  goto <bb 9>; [100.00%]

  <bb 3> [20.00%]:
  _1 = &ptr_10(D)->mantissa;
  goto <bb 7>; [100.00%]

  <bb 4> [80.00%]:
  _13 = (long unsigned int) i_12;
  _14 = _13 * 2;
  _15 = _1 + _14;
  accum_16 = *_15;
  _17 = accum_16 & 32768;
  accum_18 = accum_16 << 1;
  if (carry_24 != 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 5> [40.00%]:
  accum_19 = accum_18 | 1;

  <bb 6> [80.00%]:
  # accum_20 = PHI <accum_18(4), accum_19(5)>
  *_15 = accum_20;
  i_21 = i_12 + -1;

  <bb 7> [100.00%]:
  # i_12 = PHI <3(3), i_21(6)>
  # carry_24 = PHI <0(3), _17(6)>
  if (i_12 >= 0)
    goto <bb 4>; [80.00%]
  else
    goto <bb 8>; [20.00%]

  <bb 8> [20.00%]:
  _2 = ptr_10(D)->exp;
  _3 = (unsigned short) _2;
  _4 = _3 + 65535;
  _5 = (short int) _4;
  ptr_10(D)->exp = _5;

  <bb 9> [23.53%]:
  _6 = ptr_10(D)->mantissa[0];
  _7 = (signed short) _6;
  if (_7 >= 0)
    goto <bb 3>; [85.00%]
  else
    goto <bb 10>; [15.00%]

  <bb 10> [3.53%]:
  return;

}



;; Function denormalize (denormalize, funcdef_no=46, decl_uid=2807, cgraph_uid=46, symbol_order=46)


Analyzing function body size: denormalize

Inline summary for denormalize/46 inlinable
  self time:       50
  global time:     0
  self size:       33
  global size:     0
  min size:       66
  self stack:      0
  global stack:    0
    size:21.500000, time:41.416500, predicate:(true)
    size:5.500000, time:3.364500, predicate:(not inlined)
  calls:
    StickyShiftRightMant/44 function not considered for inlining
      loop depth: 0 freq: 131 size: 3 time: 12 callee size:17 stack: 0
    __printf_chk/60 function body not available
      loop depth: 0 freq: 330 size: 3 time: 12 callee size: 0 stack: 0
       op0 is compile time invariant
       op1 is compile time invariant

denormalize (struct InternalFPF * ptr, int minimum_exponent)
{
  int i;
  int i;
  int n;
  long int exponent_difference;
  short unsigned int[4] * _1;
  short int _2;
  int _3;
  int _4;
  unsigned short _5;
  unsigned short _6;
  unsigned short _7;
  short int _8;
  int _9;
  long unsigned int _20;
  long unsigned int _21;
  short unsigned int * _22;
  short unsigned int _23;
  int _24;

  <bb 2> [20.00%]:
  _1 = &ptr_12(D)->mantissa;
  goto <bb 4>; [100.00%]

  <bb 3> [80.00%]:
  _20 = (long unsigned int) i_19;
  _21 = _20 * 2;
  _22 = _1 + _21;
  _23 = *_22;
  _24 = (int) _23;
  n_26 = _24 | n_25;
  i_27 = i_19 + 1;

  <bb 4> [100.00%]:
  # i_19 = PHI <0(2), i_27(3)>
  # n_25 = PHI <0(2), n_26(3)>
  if (i_19 <= 3)
    goto <bb 3>; [80.00%]
  else
    goto <bb 5>; [20.00%]

  <bb 5> [20.00%]:
  # n_28 = PHI <n_25(4)>
  if (n_28 == 0)
    goto <bb 6>; [33.00%]
  else
    goto <bb 7>; [67.00%]

  <bb 6> [6.60%]:
  __printf_chk (1, "Error:  zero significand in denormalize\n");

  <bb 7> [20.00%]:
  _2 = ptr_12(D)->exp;
  _3 = (int) _2;
  _4 = _3 - minimum_exponent_14(D);
  exponent_difference_15 = (long int) _4;
  if (exponent_difference_15 < 0)
    goto <bb 8>; [39.77%]
  else
    goto <bb 13>; [60.23%]

  <bb 8> [7.95%]:
  exponent_difference_16 = -exponent_difference_15;
  if (exponent_difference_15 < -63)
    goto <bb 9>; [67.00%]
  else
    goto <bb 12>; [33.00%]

  <bb 9> [5.33%]:
  ptr_12(D)->type = 0;
  ptr_12(D)->exp = -32767;
  goto <bb 11>; [100.00%]

  <bb 10> [21.32%]:
  ptr_12(D)->mantissa[i_29] = 0;
  i_30 = i_29 + 1;

  <bb 11> [26.65%]:
  # i_29 = PHI <0(9), i_30(10)>
  if (i_29 <= 3)
    goto <bb 10>; [80.00%]
  else
    goto <bb 13>; [20.00%]

  <bb 12> [2.62%]:
  _5 = (unsigned short) _2;
  _6 = (unsigned short) exponent_difference_16;
  _7 = _5 + _6;
  _8 = (short int) _7;
  ptr_12(D)->exp = _8;
  _9 = (int) exponent_difference_16;
  StickyShiftRightMant (ptr_12(D), _9);

  <bb 13> [20.00%]:
  return;

}



;; Function choose_nan (choose_nan, funcdef_no=48, decl_uid=2814, cgraph_uid=48, symbol_order=48)


Analyzing function body size: choose_nan

Inline summary for choose_nan/48 inlinable
  self time:       44
  global time:     0
  self size:       32
  global size:     0
  min size:       48
  self stack:      0
  global stack:    0
    size:8.000000, time:23.888000, predicate:(true)
    size:4.000000, time:4.877000, predicate:(not inlined)
    size:2.000000, time:1.438000, predicate:(op3 changed)
  calls:
    __builtin___memmove_chk/56 function body not available
      loop depth: 0 freq: 388 size: 5 time: 14 callee size: 0 stack: 0 predicate: (op3 != 0)
       op2 is compile time invariant
    __builtin_object_size/55 function body not available
      loop depth: 0 freq: 388 size: 0 time:  0 callee size: 0 stack: 0 predicate: (op3 != 0)
       op1 is compile time invariant
    __builtin___memmove_chk/56 function body not available
      loop depth: 0 freq: 330 size: 5 time: 14 callee size: 0 stack: 0 predicate: (op3 == 0)
       op2 is compile time invariant
    __builtin_object_size/55 function body not available
      loop depth: 0 freq: 330 size: 0 time:  0 callee size: 0 stack: 0 predicate: (op3 == 0)
       op1 is compile time invariant
    choose_nan.part.0/69 function not considered for inlining
      loop depth: 0 freq: 136 size: 3 time: 12 callee size: 4 stack: 0
    __builtin___memmove_chk/56 function body not available
      loop depth: 0 freq: 143 size: 5 time: 14 callee size: 0 stack: 0
       op2 is compile time invariant
    __builtin_object_size/55 function body not available
      loop depth: 0 freq: 143 size: 0 time:  0 callee size: 0 stack: 0
       op1 is compile time invariant

choose_nan (struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z, int intel_flag)
{
  int i;
  short unsigned int _1;
  short unsigned int _2;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _13;

  <bb 2> [27.80%]:
  goto <bb 8>; [100.00%]

  <bb 3> [80.00%]:
  _1 = x_8(D)->mantissa[i_3];
  _2 = y_6(D)->mantissa[i_3];
  if (_1 > _2)
    goto <bb 4>; [5.00%]
  else
    goto <bb 5>; [95.00%]

  <bb 4> [4.00%]:
  _10 = __builtin_object_size (x_8(D), 0);
  __builtin___memmove_chk (x_8(D), z_7(D), 12, _10);
  goto <bb 12>; [100.00%]

  <bb 5> [76.00%]:
  if (_1 < _2)
    goto <bb 6>; [5.00%]
  else
    goto <bb 7>; [95.00%]

  <bb 6> [3.80%]:
  choose_nan.part.0 (y_6(D), z_7(D));
  goto <bb 12>; [100.00%]

  <bb 7> [72.20%]:
  i_9 = i_3 + 1;

  <bb 8> [100.00%]:
  # i_3 = PHI <0(2), i_9(7)>
  if (i_3 <= 3)
    goto <bb 3>; [80.00%]
  else
    goto <bb 9>; [20.00%]

  <bb 9> [20.00%]:
  if (intel_flag_4(D) == 0)
    goto <bb 10>; [46.00%]
  else
    goto <bb 11>; [54.00%]

  <bb 10> [9.20%]:
  _11 = __builtin_object_size (x_8(D), 0);
  __builtin___memmove_chk (x_8(D), z_7(D), 12, _11);
  goto <bb 12>; [100.00%]

  <bb 11> [10.80%]:
  _13 = __builtin_object_size (y_6(D), 0);
  __builtin___memmove_chk (y_6(D), z_7(D), 12, _13);

  <bb 12> [27.80%]:
  return;

}



;; Function Int32ToInternalFPF (Int32ToInternalFPF, funcdef_no=52, decl_uid=2830, cgraph_uid=52, symbol_order=52)


Analyzing function body size: Int32ToInternalFPF

Inline summary for Int32ToInternalFPF/52 inlinable
  self time:       33
  global time:     0
  self size:       23
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:9.500000, time:20.048000, predicate:(true)
    size:6.500000, time:5.682000, predicate:(not inlined)
    size:2.000000, time:2.000000, predicate:(op0 changed)
    size:0.500000, time:0.320000, predicate:(op0 >= 0) && (not inlined)
    size:0.500000, time:0.320000, predicate:(op0 >= 0)
    size:0.500000, time:0.180000, predicate:(op0 < 0) && (not inlined)
    size:0.500000, time:0.180000, predicate:(op0 < 0)
    size:1.000000, time:0.360000, predicate:(op0 changed) && (op0 < 0)
  calls:
    normalize/45 function not considered for inlining
      loop depth: 0 freq: 366 size: 2 time: 11 callee size:10 stack: 0

Int32ToInternalFPF (int32 mylong, struct InternalFPF * dest)
{
  short unsigned int myword;
  int i;
  int _1;

  <bb 2> [20.00%]:
  if (mylong_7(D) < 0)
    goto <bb 3>; [36.00%]
  else
    goto <bb 4>; [64.00%]

  <bb 3> [7.20%]:
  dest_9(D)->sign = 1;
  mylong_12 = -mylong_7(D);
  goto <bb 5>; [100.00%]

  <bb 4> [12.80%]:
  dest_9(D)->sign = 0;

  <bb 5> [20.00%]:
  # mylong_2 = PHI <mylong_12(3), mylong_7(D)(4)>
  dest_9(D)->type = 2;
  goto <bb 7>; [100.00%]

  <bb 6> [80.00%]:
  dest_9(D)->mantissa[i_3] = 0;
  i_23 = i_3 + 1;

  <bb 7> [100.00%]:
  # i_3 = PHI <0(5), i_23(6)>
  if (i_3 <= 3)
    goto <bb 6>; [80.00%]
  else
    goto <bb 8>; [20.00%]

  <bb 8> [20.00%]:
  if (mylong_2 == 0)
    goto <bb 9>; [63.36%]
  else
    goto <bb 10>; [36.64%]

  <bb 9> [12.67%]:
  dest_9(D)->type = 0;
  dest_9(D)->exp = 0;
  goto <bb 11>; [100.00%]

  <bb 10> [7.33%]:
  dest_9(D)->exp = 32;
  _1 = mylong_2 >> 16;
  myword_15 = (short unsigned int) _1;
  dest_9(D)->mantissa[0] = myword_15;
  myword_17 = (short unsigned int) mylong_2;
  dest_9(D)->mantissa[1] = myword_17;
  normalize (dest_9(D));

  <bb 11> [20.00%]:
  return;

}



;; Function RoundInternalFPF (RoundInternalFPF, funcdef_no=47, decl_uid=2809, cgraph_uid=47, symbol_order=47)


Analyzing function body size: RoundInternalFPF

Inline summary for RoundInternalFPF/47 inlinable
  self time:       9
  global time:     0
  self size:       9
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000, predicate:(true)
    size:3.000000, time:2.000000, predicate:(not inlined)
    size:0.500000, time:0.500000, predicate:(op0[ref offset: 0] changed) && (not inlined)
    size:3.500000, time:3.500000, predicate:(op0[ref offset: 0] changed)
  calls:
    RoundInternalFPF.part.1/70 function not considered for inlining
      loop depth: 0 freq: 245 size: 2 time: 11 callee size: 6 stack: 0

RoundInternalFPF (struct InternalFPF * ptr)
{
  unsigned char _1;
  unsigned char _2;

  <bb 2> [100.00%]:
  _1 = ptr_4(D)->type;
  _2 = _1 + 255;
  if (_2 <= 1)
    goto <bb 3>; [24.54%]
  else
    goto <bb 4>; [75.46%]

  <bb 3> [24.54%]:
  RoundInternalFPF.part.1 (ptr_4(D));

  <bb 4> [100.00%]:
  return;

}



;; Function DivideInternalFPF (DivideInternalFPF, funcdef_no=51, decl_uid=2827, cgraph_uid=51, symbol_order=51)


Analyzing function body size: DivideInternalFPF

Inline summary for DivideInternalFPF/51 inlinable
  self time:       81
  global time:     0
  self size:       258
  global size:     0
  min size:       346
  self stack:      20
  global stack:    20
    size:159.500000, time:54.998000, predicate:(true)
    size:27.500000, time:5.413000, predicate:(not inlined)
    size:0.500000, time:0.500000, predicate:(op0[ref offset: 0] changed) && (not inlined)
    size:1.500000, time:1.500000, predicate:(op0[ref offset: 0] changed)
    size:0.500000, time:0.500000, predicate:(op1[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000, predicate:(op1[ref offset: 0] changed)
    size:37.000000, time:9.000000, predicate:(op0[ref offset: 0] changed || op1[ref offset: 0] changed)
    size:1.000000, time:0.087500, predicate:(op0[ref offset: 8] changed) && (not inlined)
    size:1.000000, time:0.087500, predicate:(op0[ref offset: 8] changed)
    size:1.000000, time:0.087500, predicate:(op1[ref offset: 8] changed) && (not inlined)
    size:1.000000, time:0.087500, predicate:(op1[ref offset: 8] changed)
    size:2.000000, time:0.175000, predicate:(op0[ref offset: 8] changed || op1[ref offset: 8] changed)
    size:0.500000, time:0.012500, predicate:(op0[ref offset: 16] changed) && (not inlined)
    size:0.500000, time:0.012500, predicate:(op0[ref offset: 16] changed)
    size:0.500000, time:0.012500, predicate:(op1[ref offset: 16] changed) && (not inlined)
    size:0.500000, time:0.012500, predicate:(op1[ref offset: 16] changed)
    size:2.000000, time:0.050000, predicate:(op0[ref offset: 16] changed || op1[ref offset: 16] changed)
  calls:
    RoundInternalFPF.part.1/70 function not considered for inlining
      loop depth: 0 freq: 245 size: 2 time: 11 callee size: 6 stack: 0
    choose_nan/48 function not considered for inlining
      loop depth: 0 freq: 100 size: 5 time: 14 callee size:16 stack: 0
       op3 is compile time invariant
    __builtin_memcpy/91 function body not available
      loop depth: 0 freq: 100 size: 4 time: 13 callee size: 0 stack: 0
       op0 is compile time invariant
       op2 is compile time invariant
    __builtin___memmove_chk/56 function body not available
      loop depth: 0 freq: 100 size: 5 time: 14 callee size: 0 stack: 0
       op2 is compile time invariant
    __builtin_object_size/55 function body not available
      loop depth: 0 freq: 100 size: 0 time:  0 callee size: 0 stack: 0
       op1 is compile time invariant
    __builtin___memmove_chk/56 function body not available
      loop depth: 0 freq: 100 size: 5 time: 14 callee size: 0 stack: 0
       op2 is compile time invariant
    __builtin_object_size/55 function body not available
      loop depth: 0 freq: 100 size: 0 time:  0 callee size: 0 stack: 0
       op1 is compile time invariant

DivideInternalFPF (struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  int i;
  short unsigned int accum;
  unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  int i;
  int n;
  int i;
  int i;
  int i;
  int n;
  int i;
  int n;
  int i;
  int i;
  int i;
  int n;
  int i;
  int i;
  int i;
  int n;
  int i;
  struct InternalFPF locx;
  short unsigned int extra_bits[4];
  short unsigned int carry;
  int j;
  int i;
  unsigned char _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  short unsigned int[4] * _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  short unsigned int[4] * _11;
  unsigned char _12;
  unsigned char _13;
  unsigned char _14;
  short unsigned int[4] * _16;
  short unsigned int[4] * _17;
  unsigned char _20;
  unsigned char _21;
  unsigned char _22;
  short int _23;
  unsigned short _24;
  short int _25;
  unsigned short _26;
  unsigned short _27;
  unsigned short _28;
  short int _29;
  short unsigned int _30;
  short unsigned int _31;
  short unsigned int _32;
  short unsigned int _33;
  short unsigned int[4] * _34;
  short int _35;
  unsigned short _36;
  unsigned short _37;
  short int _38;
  short unsigned int _39;
  signed short _40;
  long unsigned int _54;
  long unsigned int _55;
  long unsigned int _71;
  long unsigned int _72;
  short unsigned int * _73;
  short unsigned int _74;
  int _75;
  long unsigned int _84;
  long unsigned int _85;
  short unsigned int * _86;
  short unsigned int _87;
  int _88;
  long unsigned int _97;
  long unsigned int _98;
  short unsigned int * _99;
  short unsigned int _100;
  int _101;
  long unsigned int _107;
  long unsigned int _108;
  short unsigned int * _109;
  short unsigned int _110;
  int _111;
  long unsigned int _120;
  long unsigned int _121;
  short unsigned int * _122;
  short unsigned int _123;
  int _124;
  long unsigned int _132;
  long unsigned int _133;
  short unsigned int * _134;
  short unsigned int _136;
  long unsigned int _142;
  long unsigned int _143;
  short unsigned int * _144;
  short unsigned int _146;
  unsigned int _152;
  unsigned int _154;
  unsigned int _156;
  short unsigned int _157;
  short unsigned int _158;
  short unsigned int _159;
  long unsigned int _161;
  long unsigned int _162;
  short unsigned int * _163;
  short unsigned int _165;
  unsigned char _170;
  unsigned char _171;

  <bb 2> [100.00%]:
  _1 = x_50(D)->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y_51(D)->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L54> [10.00%], case 0: <L56> [10.00%], case 1 ... 2: <L2> [10.00%], case 3: <L5> [10.00%], case 4: <L58> [10.00%], case 5: <L9> [10.00%], case 6 ... 7: <L59> [10.00%], case 8: <L5> [10.00%], case 9: <L58> [10.00%], case 10: <L9> [10.00%], case 11 ... 12: <L59> [10.00%], case 13: <L5> [10.00%], case 14: <L58> [10.00%], case 15 ... 17: <L12> [10.00%], case 18: <L56> [10.00%], case 19: <L58> [10.00%], case 20 ... 23: <L57> [10.00%], case 24: <L53> [10.00%]>

<L56> [10.00%]:
  z_52(D)->type = 4;
  z_52(D)->exp = 32767;
  z_52(D)->sign = 1;
  z_52(D)->mantissa[0] = 16384;
  goto <bb 5>; [100.00%]

  <bb 4> [30.00%]:
  z_52(D)->mantissa[i_68] = 0;
  i_69 = i_68 + 1;

  <bb 5> [40.00%]:
  # i_68 = PHI <1(3), i_69(4)>
  if (i_68 <= 3)
    goto <bb 4>; [75.00%]
  else
    goto <bb 77> (<L54>); [25.00%]

<L2> [10.00%]:
  _7 = &y_51(D)->mantissa;
  goto <bb 8>; [100.00%]

  <bb 7> [40.00%]:
  _71 = (long unsigned int) i_70;
  _72 = _71 * 2;
  _73 = _7 + _72;
  _74 = *_73;
  _75 = (int) _74;
  n_77 = _75 | n_76;
  i_78 = i_70 + 1;

  <bb 8> [50.00%]:
  # i_70 = PHI <0(6), i_78(7)>
  # n_76 = PHI <0(6), n_77(7)>
  if (i_70 <= 3)
    goto <bb 7>; [80.00%]
  else
    goto <bb 9>; [20.00%]

  <bb 9> [10.00%]:
  # n_186 = PHI <n_76(8)>
  if (n_186 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 13> (<L5>); [50.00%]

  <bb 10> [5.00%]:
  z_52(D)->type = 4;
  z_52(D)->exp = 32767;
  z_52(D)->sign = 1;
  z_52(D)->mantissa[0] = 16384;
  goto <bb 12>; [100.00%]

  <bb 11> [15.00%]:
  z_52(D)->mantissa[i_79] = 0;
  i_80 = i_79 + 1;

  <bb 12> [20.00%]:
  # i_79 = PHI <1(10), i_80(11)>
  if (i_79 <= 3)
    goto <bb 11>; [75.00%]
  else
    goto <bb 77> (<L54>); [25.00%]

<L5> [15.00%]:
  _8 = x_50(D)->sign;
  _9 = y_51(D)->sign;
  _10 = _8 ^ _9;
  z_52(D)->type = 0;
  z_52(D)->sign = _10;
  z_52(D)->exp = -32767;
  goto <bb 15>; [100.00%]

  <bb 14> [60.00%]:
  z_52(D)->mantissa[i_81] = 0;
  i_82 = i_81 + 1;

  <bb 15> [75.00%]:
  # i_81 = PHI <0(13), i_82(14)>
  if (i_81 <= 3)
    goto <bb 14>; [80.00%]
  else
    goto <bb 77> (<L54>); [20.00%]

<L9> [10.00%]:
  _11 = &x_50(D)->mantissa;
  goto <bb 18>; [100.00%]

  <bb 17> [40.00%]:
  _84 = (long unsigned int) i_83;
  _85 = _84 * 2;
  _86 = _11 + _85;
  _87 = *_86;
  _88 = (int) _87;
  n_90 = _88 | n_89;
  i_91 = i_83 + 1;

  <bb 18> [50.00%]:
  # i_83 = PHI <0(16), i_91(17)>
  # n_89 = PHI <0(16), n_90(17)>
  if (i_83 <= 3)
    goto <bb 17>; [80.00%]
  else
    goto <bb 19>; [20.00%]

  <bb 19> [10.00%]:
  # n_105 = PHI <n_89(18)>
  if (n_105 == 0)
    goto <bb 20>; [50.00%]
  else
    goto <bb 23> (<L12>); [50.00%]

  <bb 20> [5.00%]:
  z_52(D)->type = 4;
  z_52(D)->exp = 32767;
  z_52(D)->sign = 1;
  z_52(D)->mantissa[0] = 16384;
  goto <bb 22>; [100.00%]

  <bb 21> [15.00%]:
  z_52(D)->mantissa[i_92] = 0;
  i_93 = i_92 + 1;

  <bb 22> [20.00%]:
  # i_92 = PHI <1(20), i_93(21)>
  if (i_92 <= 3)
    goto <bb 21>; [75.00%]
  else
    goto <bb 77> (<L54>); [25.00%]

<L12> [15.00%]:
  z_52(D)->type = 3;
  z_52(D)->sign = 0;
  z_52(D)->exp = -32767;
  goto <bb 25>; [100.00%]

  <bb 24> [60.00%]:
  z_52(D)->mantissa[i_94] = 0;
  i_95 = i_94 + 1;

  <bb 25> [75.00%]:
  # i_94 = PHI <0(23), i_95(24)>
  if (i_94 <= 3)
    goto <bb 24>; [80.00%]
  else
    goto <bb 26>; [20.00%]

  <bb 26> [15.00%]:
  _12 = x_50(D)->sign;
  _13 = y_51(D)->sign;
  _14 = _12 ^ _13;
  z_52(D)->sign = _14;
  goto <bb 77> (<L54>); [100.00%]

<L57> [10.00%]:
  _55 = __builtin_object_size (x_50(D), 0);
  __builtin___memmove_chk (x_50(D), z_52(D), 12, _55);
  goto <bb 77> (<L54>); [100.00%]

<L58> [10.00%]:
  _54 = __builtin_object_size (y_51(D), 0);
  __builtin___memmove_chk (y_51(D), z_52(D), 12, _54);
  goto <bb 77> (<L54>); [100.00%]

<L59> [10.00%]:
  __builtin_memcpy (&locx, x_50(D), 12);
  goto <bb 31>; [100.00%]

  <bb 30> [40.00%]:
  _97 = (long unsigned int) i_96;
  _98 = _97 * 2;
  _99 = &locx.mantissa + _98;
  _100 = *_99;
  _101 = (int) _100;
  n_103 = _101 | n_102;
  i_104 = i_96 + 1;

  <bb 31> [50.00%]:
  # i_96 = PHI <0(29), i_104(30)>
  # n_102 = PHI <0(29), n_103(30)>
  if (i_96 <= 3)
    goto <bb 30>; [80.00%]
  else
    goto <bb 32>; [20.00%]

  <bb 32> [10.00%]:
  # n_187 = PHI <n_102(31)>
  if (n_187 == 0)
    goto <bb 33>; [50.00%]
  else
    goto <bb 43>; [50.00%]

  <bb 33> [5.00%]:
  _16 = &y_51(D)->mantissa;
  goto <bb 35>; [100.00%]

  <bb 34> [20.00%]:
  _107 = (long unsigned int) i_106;
  _108 = _107 * 2;
  _109 = _16 + _108;
  _110 = *_109;
  _111 = (int) _110;
  n_113 = _111 | n_112;
  i_114 = i_106 + 1;

  <bb 35> [25.00%]:
  # i_106 = PHI <0(33), i_114(34)>
  # n_112 = PHI <0(33), n_113(34)>
  if (i_106 <= 3)
    goto <bb 34>; [80.00%]
  else
    goto <bb 36>; [20.00%]

  <bb 36> [5.00%]:
  # n_15 = PHI <n_112(35)>
  if (n_15 == 0)
    goto <bb 37>; [50.00%]
  else
    goto <bb 40>; [50.00%]

  <bb 37> [2.50%]:
  z_52(D)->type = 4;
  z_52(D)->exp = 32767;
  z_52(D)->sign = 1;
  z_52(D)->mantissa[0] = 16384;
  goto <bb 39>; [100.00%]

  <bb 38> [7.50%]:
  z_52(D)->mantissa[i_115] = 0;
  i_116 = i_115 + 1;

  <bb 39> [10.00%]:
  # i_115 = PHI <1(37), i_116(38)>
  if (i_115 <= 3)
    goto <bb 38>; [75.00%]
  else
    goto <bb 77> (<L54>); [25.00%]

  <bb 40> [2.50%]:
  z_52(D)->type = 0;
  z_52(D)->sign = 0;
  z_52(D)->exp = -32767;
  goto <bb 42>; [100.00%]

  <bb 41> [10.00%]:
  z_52(D)->mantissa[i_117] = 0;
  i_118 = i_117 + 1;

  <bb 42> [12.50%]:
  # i_117 = PHI <0(40), i_118(41)>
  if (i_117 <= 3)
    goto <bb 41>; [80.00%]
  else
    goto <bb 77> (<L54>); [20.00%]

  <bb 43> [5.00%]:
  _17 = &y_51(D)->mantissa;
  goto <bb 45>; [100.00%]

  <bb 44> [20.00%]:
  _120 = (long unsigned int) i_119;
  _121 = _120 * 2;
  _122 = _17 + _121;
  _123 = *_122;
  _124 = (int) _123;
  n_126 = _124 | n_125;
  i_127 = i_119 + 1;

  <bb 45> [25.00%]:
  # i_119 = PHI <0(43), i_127(44)>
  # n_125 = PHI <0(43), n_126(44)>
  if (i_119 <= 3)
    goto <bb 44>; [80.00%]
  else
    goto <bb 46>; [20.00%]

  <bb 46> [5.00%]:
  # n_128 = PHI <n_125(45)>
  if (n_128 == 0)
    goto <bb 47>; [50.00%]
  else
    goto <bb 50>; [50.00%]

  <bb 47> [2.50%]:
  z_52(D)->type = 3;
  z_52(D)->sign = 0;
  z_52(D)->exp = -32767;
  goto <bb 49>; [100.00%]

  <bb 48> [10.00%]:
  z_52(D)->mantissa[i_129] = 0;
  i_130 = i_129 + 1;

  <bb 49> [12.50%]:
  # i_129 = PHI <0(47), i_130(48)>
  if (i_129 <= 3)
    goto <bb 48>; [80.00%]
  else
    goto <bb 77> (<L54>); [20.00%]

  <bb 50> [2.50%]:
  z_52(D)->type = _1;
  _20 = x_50(D)->sign;
  _21 = y_51(D)->sign;
  _22 = _20 ^ _21;
  z_52(D)->sign = _22;
  _23 = x_50(D)->exp;
  _24 = (unsigned short) _23;
  _25 = y_51(D)->exp;
  _26 = (unsigned short) _25;
  _27 = _24 - _26;
  _28 = _27 + 128;
  _29 = (short int) _28;
  z_52(D)->exp = _29;
  goto <bb 52>; [100.00%]

  <bb 51> [10.00%]:
  z_52(D)->mantissa[i_41] = 0;
  extra_bits[i_41] = 0;
  i_64 = i_41 + 1;

  <bb 52> [12.50%]:
  # i_41 = PHI <0(50), i_64(51)>
  if (i_41 <= 3)
    goto <bb 51>; [80.00%]
  else
    goto <bb 80>; [20.00%]

  <bb 80> [2.50%]:
  goto <bb 75>; [100.00%]

  <bb 53> [56.67%]:
  _142 = (long unsigned int) i_141;
  _143 = _142 * 2;
  _144 = &locx.mantissa + _143;
  accum_145 = *_144;
  _146 = accum_145 & 32768;
  accum_147 = accum_145 << 1;
  if (carry_231 != 0)
    goto <bb 54>; [50.00%]
  else
    goto <bb 55>; [50.00%]

  <bb 54> [28.33%]:
  accum_148 = accum_147 | 1;

  <bb 55> [56.67%]:
  # accum_149 = PHI <accum_147(53), accum_148(54)>
  *_144 = accum_149;
  i_150 = i_141 + -1;

  <bb 56> [70.83%]:
  # i_141 = PHI <3(83), i_150(55)>
  # carry_231 = PHI <0(83), _146(55)>
  if (i_141 >= 0)
    goto <bb 53>; [80.00%]
  else
    goto <bb 82>; [20.00%]

  <bb 82> [14.17%]:
  goto <bb 60>; [100.00%]

  <bb 57> [56.67%]:
  _132 = (long unsigned int) i_131;
  _133 = _132 * 2;
  _134 = &extra_bits + _133;
  accum_135 = *_134;
  _136 = accum_135 & 32768;
  accum_137 = accum_135 << 1;
  if (carry_232 != 0)
    goto <bb 58>; [50.00%]
  else
    goto <bb 59>; [50.00%]

  <bb 58> [28.33%]:
  accum_138 = accum_137 | 1;

  <bb 59> [56.67%]:
  # accum_139 = PHI <accum_137(57), accum_138(58)>
  *_134 = accum_139;
  i_140 = i_131 + -1;

  <bb 60> [70.83%]:
  # i_131 = PHI <3(82), i_140(59)>
  # carry_232 = PHI <carry_231(82), _136(59)>
  if (i_131 >= 0)
    goto <bb 57>; [80.00%]
  else
    goto <bb 61>; [20.00%]

  <bb 61> [14.17%]:
  # carry_18 = PHI <carry_232(60)>
  if (carry_18 == 0)
    goto <bb 81>; [50.00%]
  else
    goto <bb 66>; [50.00%]

  <bb 81> [7.08%]:
  goto <bb 65>; [100.00%]

  <bb 62> [20.38%]:
  _30 = y_51(D)->mantissa[j_42];
  _31 = extra_bits[j_42];
  if (_30 > _31)
    goto <bb 69> (no_subtract); [5.00%]
  else
    goto <bb 63>; [95.00%]

  <bb 63> [19.36%]:
  if (_30 < _31)
    goto <bb 66>; [5.00%]
  else
    goto <bb 64>; [95.00%]

  <bb 64> [18.40%]:
  j_59 = j_42 + 1;

  <bb 65> [25.48%]:
  # j_42 = PHI <0(81), j_59(64)>
  if (j_42 <= 3)
    goto <bb 62>; [80.00%]
  else
    goto <bb 66>; [20.00%]

  <bb 66> [13.15%]:
  # j_188 = PHI <3(65), 3(61), 3(63)>
  # carry_19 = PHI <0(65), 0(61), 0(63)>
  goto <bb 68>; [100.00%]

  <bb 67> [52.59%]:
  _32 = y_51(D)->mantissa[j_43];
  _33 = extra_bits[j_43];
  accum_151 = (unsigned int) _33;
  _152 = (unsigned int) _32;
  accum_153 = accum_151 - _152;
  _154 = (unsigned int) carry_233;
  accum_155 = accum_153 - _154;
  _156 = accum_155 >> 16;
  _157 = (short unsigned int) _156;
  _158 = _157 & 1;
  _159 = (short unsigned int) accum_155;
  MEM[(short unsigned int *)&extra_bits][j_43] = _159;
  j_60 = j_43 + -1;

  <bb 68> [65.74%]:
  # j_43 = PHI <j_188(66), j_60(67)>
  # carry_233 = PHI <carry_19(66), _158(67)>
  if (j_43 >= 0)
    goto <bb 67>; [80.00%]
  else
    goto <bb 69> (no_subtract); [20.00%]

  # carry_234 = PHI <0(62), 1(68)>
no_subtract [14.17%]:
  _34 = &z_52(D)->mantissa;
  goto <bb 73>; [100.00%]

  <bb 70> [56.67%]:
  _161 = (long unsigned int) i_160;
  _162 = _161 * 2;
  _163 = _34 + _162;
  accum_164 = *_163;
  _165 = accum_164 & 32768;
  accum_166 = accum_164 << 1;
  if (carry_235 != 0)
    goto <bb 71>; [50.00%]
  else
    goto <bb 72>; [50.00%]

  <bb 71> [28.33%]:
  accum_167 = accum_166 | 1;

  <bb 72> [56.67%]:
  # accum_168 = PHI <accum_166(70), accum_167(71)>
  *_163 = accum_168;
  i_169 = i_160 + -1;

  <bb 73> [70.83%]:
  # i_160 = PHI <3(69), i_169(72)>
  # carry_235 = PHI <carry_234(69), _165(72)>
  if (i_160 >= 0)
    goto <bb 70>; [80.00%]
  else
    goto <bb 74>; [20.00%]

  <bb 74> [14.17%]:
  _35 = z_52(D)->exp;
  _36 = (unsigned short) _35;
  _37 = _36 + 65535;
  _38 = (short int) _37;
  z_52(D)->exp = _38;

  <bb 75> [16.67%]:
  _39 = z_52(D)->mantissa[0];
  _40 = (signed short) _39;
  if (_40 >= 0)
    goto <bb 83>; [85.00%]
  else
    goto <bb 77> (<L54>); [15.00%]

  <bb 83> [14.17%]:
  goto <bb 56>; [100.00%]

<L53> [10.00%]:
  choose_nan (x_50(D), y_51(D), z_52(D), 0);

<L54> [100.00%]:
  _170 = z_52(D)->type;
  _171 = _170 + 255;
  if (_171 <= 1)
    goto <bb 78>; [24.54%]
  else
    goto <bb 79>; [75.46%]

  <bb 78> [24.54%]:
  RoundInternalFPF.part.1 (z_52(D));

  <bb 79> [100.00%]:
  extra_bits ={v} {CLOBBER};
  locx ={v} {CLOBBER};
  return;

}



;; Function SetupCPUEmFloatArrays (SetupCPUEmFloatArrays, funcdef_no=34, decl_uid=2767, cgraph_uid=34, symbol_order=34)


Analyzing function body size: SetupCPUEmFloatArrays

Inline summary for SetupCPUEmFloatArrays/34 inlinable
  self time:       616
  global time:     0
  self size:       39
  global size:     0
  min size:       0
  self stack:      24
  global stack:    24
    size:8.000000, time:47.328000, predicate:(true)
    size:3.000000, time:2.000000, predicate:(not inlined)
  calls:
    DivideInternalFPF/51 function not considered for inlining
      loop depth: 1 freq:5666 size: 4 time: 13 callee size:129 stack:20
       op0 is compile time invariant
       op1 is compile time invariant
    Int32ToInternalFPF/52 function not considered for inlining
      loop depth: 1 freq:5666 size: 3 time: 12 callee size:11 stack: 0
       op1 is compile time invariant
    randwc/54 function body not available
      loop depth: 1 freq:5666 size: 3 time: 12 callee size: 0 stack: 0
       op0 is compile time invariant
    DivideInternalFPF/51 function not considered for inlining
      loop depth: 1 freq:5666 size: 4 time: 13 callee size:129 stack:20
       op0 is compile time invariant
       op1 is compile time invariant
    Int32ToInternalFPF/52 function not considered for inlining
      loop depth: 1 freq:5666 size: 3 time: 12 callee size:11 stack: 0
       op1 is compile time invariant
    randwc/54 function body not available
      loop depth: 1 freq:5666 size: 3 time: 12 callee size: 0 stack: 0
       op0 is compile time invariant
    Int32ToInternalFPF/52 function not considered for inlining
      loop depth: 1 freq:5666 size: 3 time: 12 callee size:11 stack: 0
       op1 is compile time invariant
    randwc/54 function body not available
      loop depth: 1 freq:5666 size: 3 time: 12 callee size: 0 stack: 0
       op0 is compile time invariant
    randnum/53 function body not available
      loop depth: 0 freq:1000 size: 2 time: 11 callee size: 0 stack: 0
       op0 is compile time invariant

SetupCPUEmFloatArrays (struct InternalFPF * abase, struct InternalFPF * bbase, struct InternalFPF * cbase, long unsigned int arraysize)
{
  struct InternalFPF locFPF2;
  struct InternalFPF locFPF1;
  long unsigned int i;
  int _1;
  int _2;
  int _3;
  long unsigned int _4;
  struct InternalFPF * _5;
  int _6;
  int _7;
  struct InternalFPF * _8;

  <bb 2> [15.00%]:
  randnum (13);
  goto <bb 4>; [100.00%]

  <bb 3> [85.00%]:
  _1 = randwc (50000);
  Int32ToInternalFPF (_1, &locFPF1);
  _2 = randwc (50000);
  _3 = _2 + 1;
  Int32ToInternalFPF (_3, &locFPF2);
  _4 = i_9 * 12;
  _5 = abase_20(D) + _4;
  DivideInternalFPF (&locFPF1, &locFPF2, _5);
  _6 = randwc (50000);
  _7 = _6 + 1;
  Int32ToInternalFPF (_7, &locFPF2);
  _8 = bbase_24(D) + _4;
  DivideInternalFPF (&locFPF1, &locFPF2, _8);
  i_26 = i_9 + 1;

  <bb 4> [100.00%]:
  # i_9 = PHI <0(2), i_26(3)>
  if (i_9 < arraysize_13(D))
    goto <bb 3>; [85.00%]
  else
    goto <bb 5>; [15.00%]

  <bb 5> [15.00%]:
  locFPF1 ={v} {CLOBBER};
  locFPF2 ={v} {CLOBBER};
  return;

}



;; Function AddSubInternalFPF (AddSubInternalFPF, funcdef_no=49, decl_uid=2819, cgraph_uid=49, symbol_order=49)


Analyzing function body size: AddSubInternalFPF

Inline summary for AddSubInternalFPF/49 inlinable
  self time:       51
  global time:     0
  self size:       215
  global size:     0
  min size:       398
  self stack:      24
  global stack:    24
    size:108.500000, time:18.701500, predicate:(true)
    size:19.500000, time:3.926500, predicate:(not inlined)
    size:0.500000, time:0.500000, predicate:(op1[ref offset: 0] changed) && (not inlined)
    size:3.500000, time:1.624000, predicate:(op1[ref offset: 0] changed)
    size:0.500000, time:0.500000, predicate:(op2[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000, predicate:(op2[ref offset: 0] changed)
    size:35.000000, time:9.000000, predicate:(op1[ref offset: 0] changed || op2[ref offset: 0] changed)
    size:2.000000, time:0.082000, predicate:(op2[ref offset: 0] changed) && (op1[ref offset: 0] != 1)
    size:0.500000, time:0.013500, predicate:(op2[ref offset: 0] != 1) && (op1[ref offset: 0] != 1) && (not inlined)
    size:0.500000, time:0.013500, predicate:(op2[ref offset: 0] != 1) && (op1[ref offset: 0] != 1)
    size:0.500000, time:0.017500, predicate:(op1[ref offset: 0] == 1 || op2[ref offset: 0] == 1) && (not inlined)
    size:0.500000, time:0.017500, predicate:(op1[ref offset: 0] == 1 || op2[ref offset: 0] == 1)
  calls:
    RoundInternalFPF.part.1/70 function not considered for inlining
      loop depth: 0 freq: 245 size: 2 time: 11 callee size: 6 stack: 0
    choose_nan/48 function not considered for inlining
      loop depth: 0 freq: 125 size: 5 time: 14 callee size:16 stack: 0
       op3 is compile time invariant
    normalize/45 function not considered for inlining
      loop depth: 0 freq:  19 size: 2 time: 11 callee size:10 stack: 0
    StickyShiftRightMant/44 function not considered for inlining
      loop depth: 0 freq:  22 size: 3 time: 12 callee size:17 stack: 0
       op0 is compile time invariant
    StickyShiftRightMant/44 function not considered for inlining
      loop depth: 0 freq:  40 size: 3 time: 12 callee size:17 stack: 0
       op0 is compile time invariant
    __builtin_memcpy/91 function body not available
      loop depth: 0 freq: 125 size: 4 time: 13 callee size: 0 stack: 0
       op0 is compile time invariant
       op2 is compile time invariant
    __builtin_memcpy/91 function body not available
      loop depth: 0 freq: 125 size: 4 time: 13 callee size: 0 stack: 0
       op0 is compile time invariant
       op2 is compile time invariant
    __builtin___memmove_chk/56 function body not available
      loop depth: 0 freq: 125 size: 5 time: 14 callee size: 0 stack: 0
       op2 is compile time invariant
    __builtin_object_size/55 function body not available
      loop depth: 0 freq: 125 size: 0 time:  0 callee size: 0 stack: 0
       op1 is compile time invariant
    __builtin___memmove_chk/56 function body not available
      loop depth: 0 freq: 125 size: 5 time: 14 callee size: 0 stack: 0
       op2 is compile time invariant
    __builtin_object_size/55 function body not available
      loop depth: 0 freq: 125 size: 0 time:  0 callee size: 0 stack: 0
       op1 is compile time invariant
    __builtin___memmove_chk/56 function body not available
      loop depth: 0 freq: 125 size: 5 time: 14 callee size: 0 stack: 0
       op2 is compile time invariant
    __builtin_object_size/55 function body not available
      loop depth: 0 freq: 125 size: 0 time:  0 callee size: 0 stack: 0
       op1 is compile time invariant
    __builtin___memmove_chk/56 function body not available
      loop depth: 0 freq: 125 size: 5 time: 14 callee size: 0 stack: 0
       op2 is compile time invariant
    __builtin_object_size/55 function body not available
      loop depth: 0 freq: 125 size: 0 time:  0 callee size: 0 stack: 0
       op1 is compile time invariant

AddSubInternalFPF (unsigned char operation, struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  int i;
  int i;
  short unsigned int accum;
  unsigned int accum;
  int i;
  int n;
  unsigned int accum;
  unsigned int accum;
  struct InternalFPF locy;
  struct InternalFPF locx;
  int i;
  short unsigned int carry;
  short unsigned int borrow;
  int exponent_difference;
  unsigned char _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  short int _12;
  int _13;
  short int _14;
  int _15;
  unsigned char _17;
  unsigned char _18;
  unsigned char _19;
  short int _20;
  int _21;
  unsigned char _22;
  unsigned char _23;
  unsigned char _24;
  short int _25;
  unsigned char _26;
  unsigned char _27;
  unsigned char _28;
  short unsigned int _29;
  short unsigned int _30;
  unsigned char _31;
  short unsigned int _32;
  short unsigned int[4] * _33;
  unsigned char _34;
  unsigned char _35;
  short unsigned int _36;
  short unsigned int _37;
  short int _38;
  unsigned short _39;
  unsigned short _40;
  short int _41;
  short unsigned int[4] * _42;
  short unsigned int _43;
  short unsigned int _44;
  short unsigned int _45;
  signed short _46;
  long unsigned int _83;
  long unsigned int _92;
  long unsigned int _93;
  long unsigned int _94;
  unsigned int _96;
  unsigned int _98;
  unsigned int _100;
  short unsigned int _101;
  short unsigned int _102;
  short unsigned int _103;
  unsigned int _104;
  unsigned int _106;
  unsigned int _108;
  short unsigned int _109;
  short unsigned int _110;
  short unsigned int _111;
  long unsigned int _113;
  long unsigned int _114;
  short unsigned int * _115;
  short unsigned int _116;
  int _117;
  unsigned int _122;
  unsigned int _124;
  unsigned int _126;
  short unsigned int _127;
  short unsigned int _128;
  short unsigned int _129;
  long unsigned int _131;
  long unsigned int _132;
  short unsigned int * _133;
  short unsigned int _135;
  unsigned char _142;
  unsigned char _143;

  <bb 2> [100.00%]:
  _1 = x_58(D)->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y_59(D)->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L63> [12.50%], case 0: <L67> [12.50%], case 1 ... 3: <L70> [12.50%], case 4: <L69> [12.50%], case 5: <L68> [12.50%], case 6 ... 7: <L71> [12.50%], case 8: <L70> [12.50%], case 9: <L69> [12.50%], case 10: <L68> [12.50%], case 11 ... 12: <L71> [12.50%], case 13: <L70> [12.50%], case 14: <L69> [12.50%], case 15 ... 17: <L68> [12.50%], case 18: <L72> [12.50%], case 19: <L69> [12.50%], case 20 ... 23: <L68> [12.50%], case 24: <L62> [12.50%]>

<L67> [12.50%]:
  _83 = __builtin_object_size (x_58(D), 0);
  __builtin___memmove_chk (x_58(D), z_60(D), 12, _83);
  _7 = x_58(D)->sign;
  _8 = y_59(D)->sign;
  _9 = _7 ^ _8;
  if (_9 != operation_65(D))
    goto <bb 4>; [66.00%]
  else
    goto <bb 47> (<L63>); [34.00%]

  <bb 4> [8.25%]:
  z_60(D)->sign = 0;
  goto <bb 47> (<L63>); [100.00%]

<L68> [12.50%]:
  _92 = __builtin_object_size (x_58(D), 0);
  __builtin___memmove_chk (x_58(D), z_60(D), 12, _92);
  goto <bb 47> (<L63>); [100.00%]

<L69> [12.50%]:
  _93 = __builtin_object_size (y_59(D), 0);
  __builtin___memmove_chk (y_59(D), z_60(D), 12, _93);
  goto <bb 47> (<L63>); [100.00%]

<L70> [12.50%]:
  _94 = __builtin_object_size (y_59(D), 0);
  __builtin___memmove_chk (y_59(D), z_60(D), 12, _94);
  _10 = z_60(D)->sign;
  _11 = _10 ^ operation_65(D);
  z_60(D)->sign = _11;
  goto <bb 47> (<L63>); [100.00%]

<L71> [12.50%]:
  __builtin_memcpy (&locx, x_58(D), 12);
  __builtin_memcpy (&locy, y_59(D), 12);
  _12 = locx.exp;
  _13 = (int) _12;
  _14 = locy.exp;
  _15 = (int) _14;
  exponent_difference_62 = _13 - _15;
  if (exponent_difference_62 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 9> [6.25%]:
  if (_1 == 1)
    goto <bb 11>; [34.00%]
  else
    goto <bb 10>; [66.00%]

  <bb 10> [4.12%]:
  if (_4 == 1)
    goto <bb 11>; [34.00%]
  else
    goto <bb 12>; [66.00%]

  <bb 11> [3.53%]:
  z_60(D)->type = 1;
  goto <bb 13>; [100.00%]

  <bb 12> [2.72%]:
  z_60(D)->type = 2;

  <bb 13> [6.25%]:
  _17 = locx.sign;
  z_60(D)->sign = _17;
  z_60(D)->exp = _12;
  goto <bb 17>; [100.00%]

  <bb 14> [6.25%]:
  if (exponent_difference_62 > 0)
    goto <bb 15>; [64.00%]
  else
    goto <bb 16>; [36.00%]

  <bb 15> [4.00%]:
  StickyShiftRightMant (&locy, exponent_difference_62);
  _18 = locx.type;
  z_60(D)->type = _18;
  _19 = locx.sign;
  z_60(D)->sign = _19;
  _20 = locx.exp;
  z_60(D)->exp = _20;
  goto <bb 17>; [100.00%]

  <bb 16> [2.25%]:
  _21 = -exponent_difference_62;
  StickyShiftRightMant (&locx, _21);
  _22 = locy.type;
  z_60(D)->type = _22;
  _23 = locy.sign;
  _24 = _23 ^ operation_65(D);
  z_60(D)->sign = _24;
  _25 = locy.exp;
  z_60(D)->exp = _25;

  <bb 17> [12.50%]:
  _26 = locx.sign;
  _27 = locy.sign;
  _28 = _26 ^ _27;
  if (_28 != operation_65(D))
    goto <bb 50>; [66.00%]
  else
    goto <bb 51>; [34.00%]

  <bb 51> [4.25%]:
  goto <bb 33>; [100.00%]

  <bb 50> [8.25%]:
  goto <bb 19>; [100.00%]

  <bb 18> [33.00%]:
  _29 = locy.mantissa[i_47];
  _30 = locx.mantissa[i_47];
  accum_95 = (unsigned int) _30;
  _96 = (unsigned int) _29;
  accum_97 = accum_95 - _96;
  _98 = (unsigned int) borrow_165;
  accum_99 = accum_97 - _98;
  _100 = accum_99 >> 16;
  _101 = (short unsigned int) _100;
  _102 = _101 & 1;
  _103 = (short unsigned int) accum_99;
  MEM[(short unsigned int *)z_60(D)].mantissa[i_47] = _103;
  i_87 = i_47 + -1;

  <bb 19> [41.25%]:
  # i_47 = PHI <3(50), i_87(18)>
  # borrow_165 = PHI <0(50), _102(18)>
  if (i_47 >= 0)
    goto <bb 18>; [80.00%]
  else
    goto <bb 20>; [20.00%]

  <bb 20> [8.25%]:
  # borrow_155 = PHI <borrow_165(19)>
  if (borrow_155 != 0)
    goto <bb 21>; [50.00%]
  else
    goto <bb 24>; [50.00%]

  <bb 21> [4.12%]:
  _31 = _27 ^ operation_65(D);
  z_60(D)->sign = _31;
  goto <bb 23>; [100.00%]

  <bb 22> [16.50%]:
  _32 = z_60(D)->mantissa[i_48];
  _104 = (unsigned int) _32;
  accum_105 = -_104;
  _106 = (unsigned int) borrow_166;
  accum_107 = accum_105 - _106;
  _108 = accum_107 >> 16;
  _109 = (short unsigned int) _108;
  _110 = _109 & 1;
  _111 = (short unsigned int) accum_107;
  MEM[(short unsigned int *)z_60(D)].mantissa[i_48] = _111;
  i_82 = i_48 + -1;

  <bb 23> [20.62%]:
  # i_48 = PHI <3(21), i_82(22)>
  # borrow_166 = PHI <0(21), _110(22)>
  if (i_48 >= 0)
    goto <bb 22>; [80.00%]
  else
    goto <bb 24>; [20.00%]

  <bb 24> [8.25%]:
  _33 = &z_60(D)->mantissa;
  goto <bb 26>; [100.00%]

  <bb 25> [33.00%]:
  _113 = (long unsigned int) i_112;
  _114 = _113 * 2;
  _115 = _33 + _114;
  _116 = *_115;
  _117 = (int) _116;
  n_119 = _117 | n_118;
  i_120 = i_112 + 1;

  <bb 26> [41.25%]:
  # i_112 = PHI <0(24), i_120(25)>
  # n_118 = PHI <0(24), n_119(25)>
  if (i_112 <= 3)
    goto <bb 25>; [80.00%]
  else
    goto <bb 27>; [20.00%]

  <bb 27> [8.25%]:
  # n_153 = PHI <n_118(26)>
  if (n_153 == 0)
    goto <bb 28>; [50.00%]
  else
    goto <bb 29>; [50.00%]

  <bb 28> [4.12%]:
  z_60(D)->type = 0;
  z_60(D)->sign = 0;
  goto <bb 47> (<L63>); [100.00%]

  <bb 29> [4.12%]:
  _34 = locx.type;
  if (_34 == 2)
    goto <bb 31>; [20.24%]
  else
    goto <bb 30>; [79.76%]

  <bb 30> [3.29%]:
  _35 = locy.type;
  if (_35 == 2)
    goto <bb 31>; [34.00%]
  else
    goto <bb 47> (<L63>); [66.00%]

  <bb 31> [1.95%]:
  normalize (z_60(D));
  goto <bb 47> (<L63>); [100.00%]

  <bb 32> [17.00%]:
  _36 = locy.mantissa[i_49];
  _37 = locx.mantissa[i_49];
  accum_121 = (unsigned int) _37;
  _122 = (unsigned int) _36;
  accum_123 = accum_121 + _122;
  _124 = (unsigned int) carry_167;
  accum_125 = accum_123 + _124;
  _126 = accum_125 >> 16;
  _127 = (short unsigned int) _126;
  _128 = _127 & 1;
  _129 = (short unsigned int) accum_125;
  MEM[(short unsigned int *)z_60(D)].mantissa[i_49] = _129;
  i_80 = i_49 + -1;

  <bb 33> [21.25%]:
  # i_49 = PHI <3(51), i_80(32)>
  # carry_167 = PHI <0(51), _128(32)>
  if (i_49 >= 0)
    goto <bb 32>; [80.00%]
  else
    goto <bb 34>; [20.00%]

  <bb 34> [4.25%]:
  # carry_16 = PHI <carry_167(33)>
  if (carry_16 != 0)
    goto <bb 35>; [50.00%]
  else
    goto <bb 41>; [50.00%]

  <bb 35> [2.12%]:
  _38 = z_60(D)->exp;
  _39 = (unsigned short) _38;
  _40 = _39 + 1;
  _41 = (short int) _40;
  z_60(D)->exp = _41;
  _42 = &z_60(D)->mantissa;
  goto <bb 39>; [100.00%]

  <bb 36> [8.50%]:
  _131 = (long unsigned int) i_130;
  _132 = _131 * 2;
  _133 = _42 + _132;
  accum_134 = *_133;
  _135 = accum_134 & 1;
  accum_136 = accum_134 >> 1;
  if (carry_168 != 0)
    goto <bb 37>; [50.00%]
  else
    goto <bb 38>; [50.00%]

  <bb 37> [4.25%]:
  accum_137 = accum_136 | 32768;

  <bb 38> [8.50%]:
  # accum_138 = PHI <accum_136(36), accum_137(37)>
  *_133 = accum_138;
  i_139 = i_130 + 1;

  <bb 39> [10.62%]:
  # i_130 = PHI <0(35), i_139(38)>
  # carry_168 = PHI <0(35), _135(38)>
  if (i_130 <= 3)
    goto <bb 36>; [80.00%]
  else
    goto <bb 40>; [20.00%]

  <bb 40> [2.12%]:
  _43 = z_60(D)->mantissa[0];
  _44 = _43 | 32768;
  z_60(D)->mantissa[0] = _44;
  z_60(D)->type = 2;
  goto <bb 47> (<L63>); [100.00%]

  <bb 41> [2.12%]:
  _45 = z_60(D)->mantissa[0];
  _46 = (signed short) _45;
  if (_46 < 0)
    goto <bb 42>; [36.00%]
  else
    goto <bb 47> (<L63>); [64.00%]

  <bb 42> [0.76%]:
  z_60(D)->type = 2;
  goto <bb 47> (<L63>); [100.00%]

<L72> [12.50%]:
  z_60(D)->type = 4;
  z_60(D)->exp = 32767;
  z_60(D)->sign = 1;
  z_60(D)->mantissa[0] = 16384;
  goto <bb 45>; [100.00%]

  <bb 44> [37.50%]:
  z_60(D)->mantissa[i_140] = 0;
  i_141 = i_140 + 1;

  <bb 45> [50.00%]:
  # i_140 = PHI <1(43), i_141(44)>
  if (i_140 <= 3)
    goto <bb 44>; [75.00%]
  else
    goto <bb 47> (<L63>); [25.00%]

<L62> [12.50%]:
  choose_nan (x_58(D), y_59(D), z_60(D), 1);

<L63> [100.00%]:
  _142 = z_60(D)->type;
  _143 = _142 + 255;
  if (_143 <= 1)
    goto <bb 48>; [24.54%]
  else
    goto <bb 49>; [75.46%]

  <bb 48> [24.54%]:
  RoundInternalFPF.part.1 (z_60(D));

  <bb 49> [100.00%]:
  locx ={v} {CLOBBER};
  locy ={v} {CLOBBER};
  return;

}



;; Function MultiplyInternalFPF (MultiplyInternalFPF, funcdef_no=50, decl_uid=2823, cgraph_uid=50, symbol_order=50)


Analyzing function body size: MultiplyInternalFPF

Inline summary for MultiplyInternalFPF/50 inlinable
  self time:       1430
  global time:     0
  self size:       231
  global size:     0
  min size:       358
  self stack:      20
  global stack:    20
    size:141.500000, time:1383.142000, predicate:(true)
    size:20.500000, time:21.934000, predicate:(not inlined)
    size:0.500000, time:0.500000, predicate:(op0[ref offset: 0] changed) && (not inlined)
    size:1.500000, time:1.500000, predicate:(op0[ref offset: 0] changed)
    size:0.500000, time:0.500000, predicate:(op1[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000, predicate:(op1[ref offset: 0] changed)
    size:35.000000, time:9.000000, predicate:(op0[ref offset: 0] changed || op1[ref offset: 0] changed)
  calls:
    RoundInternalFPF.part.1/70 function not considered for inlining
      loop depth: 0 freq: 244 size: 2 time: 11 callee size: 6 stack: 0
    choose_nan/48 function not considered for inlining
      loop depth: 0 freq: 124 size: 5 time: 14 callee size:16 stack: 0
       op3 is compile time invariant
    __builtin_memcpy/91 function body not available
      loop depth: 0 freq: 124 size: 4 time: 13 callee size: 0 stack: 0
       op0 is compile time invariant
       op2 is compile time invariant
    __builtin___memmove_chk/56 function body not available
      loop depth: 0 freq: 124 size: 5 time: 14 callee size: 0 stack: 0
       op2 is compile time invariant
    __builtin_object_size/55 function body not available
      loop depth: 0 freq: 124 size: 0 time:  0 callee size: 0 stack: 0
       op1 is compile time invariant
    __builtin___memmove_chk/56 function body not available
      loop depth: 0 freq: 124 size: 5 time: 14 callee size: 0 stack: 0
       op2 is compile time invariant
    __builtin_object_size/55 function body not available
      loop depth: 0 freq: 124 size: 0 time:  0 callee size: 0 stack: 0
       op1 is compile time invariant
    __builtin___memmove_chk/56 function body not available
      loop depth: 0 freq: 124 size: 5 time: 14 callee size: 0 stack: 0
       op2 is compile time invariant
    __builtin_object_size/55 function body not available
      loop depth: 0 freq: 124 size: 0 time:  0 callee size: 0 stack: 0
       op1 is compile time invariant
    __builtin___memmove_chk/56 function body not available
      loop depth: 0 freq: 124 size: 5 time: 14 callee size: 0 stack: 0
       op2 is compile time invariant
    __builtin_object_size/55 function body not available
      loop depth: 0 freq: 124 size: 0 time:  0 callee size: 0 stack: 0
       op1 is compile time invariant

MultiplyInternalFPF (struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  int i;
  int n;
  int i;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  int i;
  int n;
  int i;
  int n;
  int i;
  struct InternalFPF locy;
  short unsigned int extra_bits[4];
  short unsigned int carry;
  int j;
  int i;
  unsigned char _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  unsigned char _12;
  short unsigned int[4] * _13;
  short unsigned int[4] * _15;
  unsigned char _16;
  unsigned char _17;
  unsigned char _18;
  unsigned char _19;
  unsigned char _20;
  short int _21;
  unsigned short _22;
  short int _23;
  unsigned short _24;
  unsigned short _25;
  short int _26;
  short unsigned int _27;
  short unsigned int _28;
  short unsigned int[4] * _29;
  short unsigned int[4] * _30;
  short int _31;
  unsigned short _32;
  unsigned short _33;
  short int _34;
  short unsigned int _35;
  signed short _36;
  short unsigned int _37;
  short unsigned int _38;
  long unsigned int _55;
  long unsigned int _60;
  long unsigned int _72;
  long unsigned int _73;
  long unsigned int _77;
  long unsigned int _78;
  short unsigned int * _79;
  short unsigned int _80;
  int _81;
  long unsigned int _87;
  long unsigned int _88;
  short unsigned int * _89;
  short unsigned int _90;
  int _91;
  long unsigned int _98;
  long unsigned int _99;
  short unsigned int * _100;
  short unsigned int _102;
  unsigned int _108;
  unsigned int _110;
  unsigned int _112;
  short unsigned int _113;
  short unsigned int _114;
  short unsigned int _115;
  long unsigned int _117;
  long unsigned int _118;
  short unsigned int * _119;
  short unsigned int _121;
  long unsigned int _127;
  long unsigned int _128;
  short unsigned int * _129;
  short unsigned int _131;
  long unsigned int _137;
  long unsigned int _138;
  short unsigned int * _139;
  short unsigned int _141;
  long unsigned int _147;
  long unsigned int _148;
  short unsigned int * _149;
  short unsigned int _151;
  long unsigned int _157;
  long unsigned int _158;
  short unsigned int * _159;
  short unsigned int _160;
  int _161;
  unsigned char _165;
  unsigned char _166;

  <bb 2> [2.50%]:
  _1 = x_51(D)->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y_52(D)->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L49> [12.50%], case 0 ... 2: <L53> [12.50%], case 3: <L55> [12.50%], case 4: <L57> [12.50%], case 5: <L54> [12.50%], case 6 ... 7: <L58> [12.50%], case 8: <L54> [12.50%], case 9: <L57> [12.50%], case 10: <L54> [12.50%], case 11 ... 12: <L58> [12.50%], case 13: <L54> [12.50%], case 14: <L57> [12.50%], case 15: <L55> [12.50%], case 16 ... 18: <L53> [12.50%], case 19: <L57> [12.50%], case 20 ... 23: <L56> [12.50%], case 24: <L48> [12.50%]>

<L53> [0.31%]:
  _60 = __builtin_object_size (x_51(D), 0);
  __builtin___memmove_chk (x_51(D), z_53(D), 12, _60);
  _7 = z_53(D)->sign;
  _8 = y_52(D)->sign;
  _9 = _7 ^ _8;
  z_53(D)->sign = _9;
  goto <bb 62> (<L49>); [100.00%]

<L54> [0.31%]:
  _55 = __builtin_object_size (y_52(D), 0);
  __builtin___memmove_chk (y_52(D), z_53(D), 12, _55);
  _10 = z_53(D)->sign;
  _11 = x_51(D)->sign;
  _12 = _10 ^ _11;
  z_53(D)->sign = _12;
  goto <bb 62> (<L49>); [100.00%]

<L55> [0.31%]:
  z_53(D)->type = 4;
  z_53(D)->exp = 32767;
  z_53(D)->sign = 1;
  z_53(D)->mantissa[0] = 16384;
  goto <bb 7>; [100.00%]

  <bb 6> [0.94%]:
  z_53(D)->mantissa[i_74] = 0;
  i_75 = i_74 + 1;

  <bb 7> [1.25%]:
  # i_74 = PHI <1(5), i_75(6)>
  if (i_74 <= 3)
    goto <bb 6>; [75.00%]
  else
    goto <bb 62> (<L49>); [25.00%]

<L56> [0.31%]:
  _72 = __builtin_object_size (x_51(D), 0);
  __builtin___memmove_chk (x_51(D), z_53(D), 12, _72);
  goto <bb 62> (<L49>); [100.00%]

<L57> [0.31%]:
  _73 = __builtin_object_size (y_52(D), 0);
  __builtin___memmove_chk (y_52(D), z_53(D), 12, _73);
  goto <bb 62> (<L49>); [100.00%]

<L58> [0.31%]:
  __builtin_memcpy (&locy, y_52(D), 12);
  _13 = &x_51(D)->mantissa;
  goto <bb 12>; [100.00%]

  <bb 11> [1.25%]:
  _77 = (long unsigned int) i_76;
  _78 = _77 * 2;
  _79 = _13 + _78;
  _80 = *_79;
  _81 = (int) _80;
  n_83 = _81 | n_82;
  i_84 = i_76 + 1;

  <bb 12> [1.56%]:
  # i_76 = PHI <0(10), i_84(11)>
  # n_82 = PHI <0(10), n_83(11)>
  if (i_76 <= 3)
    goto <bb 11>; [80.00%]
  else
    goto <bb 13>; [20.00%]

  <bb 13> [0.31%]:
  # n_177 = PHI <n_82(12)>
  if (n_177 == 0)
    goto <bb 18>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 14> [0.16%]:
  _15 = &y_52(D)->mantissa;
  goto <bb 16>; [100.00%]

  <bb 15> [0.63%]:
  _87 = (long unsigned int) i_86;
  _88 = _87 * 2;
  _89 = _15 + _88;
  _90 = *_89;
  _91 = (int) _90;
  n_93 = _91 | n_92;
  i_94 = i_86 + 1;

  <bb 16> [0.78%]:
  # i_86 = PHI <0(14), i_94(15)>
  # n_92 = PHI <0(14), n_93(15)>
  if (i_86 <= 3)
    goto <bb 15>; [80.00%]
  else
    goto <bb 17>; [20.00%]

  <bb 17> [0.16%]:
  # n_85 = PHI <n_92(16)>
  if (n_85 == 0)
    goto <bb 18>; [50.00%]
  else
    goto <bb 21>; [50.00%]

  <bb 18> [0.23%]:
  z_53(D)->type = 3;
  z_53(D)->sign = 0;
  z_53(D)->exp = -32767;
  goto <bb 20>; [100.00%]

  <bb 19> [0.94%]:
  z_53(D)->mantissa[i_95] = 0;
  i_96 = i_95 + 1;

  <bb 20> [1.17%]:
  # i_95 = PHI <0(18), i_96(19)>
  if (i_95 <= 3)
    goto <bb 19>; [80.00%]
  else
    goto <bb 21>; [20.00%]

  <bb 21> [0.31%]:
  _16 = x_51(D)->type;
  if (_16 == 1)
    goto <bb 23>; [34.00%]
  else
    goto <bb 22>; [66.00%]

  <bb 22> [0.21%]:
  _17 = y_52(D)->type;
  if (_17 == 1)
    goto <bb 23>; [34.00%]
  else
    goto <bb 24>; [66.00%]

  <bb 23> [0.18%]:
  z_53(D)->type = 1;
  goto <bb 25>; [100.00%]

  <bb 24> [0.14%]:
  z_53(D)->type = 2;

  <bb 25> [0.31%]:
  _18 = x_51(D)->sign;
  _19 = y_52(D)->sign;
  _20 = _18 ^ _19;
  z_53(D)->sign = _20;
  _21 = x_51(D)->exp;
  _22 = (unsigned short) _21;
  _23 = y_52(D)->exp;
  _24 = (unsigned short) _23;
  _25 = _22 + _24;
  _26 = (short int) _25;
  z_53(D)->exp = _26;
  goto <bb 27>; [100.00%]

  <bb 26> [1.25%]:
  z_53(D)->mantissa[i_39] = 0;
  extra_bits[i_39] = 0;
  i_67 = i_39 + 1;

  <bb 27> [1.56%]:
  # i_39 = PHI <0(25), i_67(26)>
  if (i_39 <= 3)
    goto <bb 26>; [80.00%]
  else
    goto <bb 68>; [20.00%]

  <bb 68> [0.31%]:
  goto <bb 45>; [100.00%]

  <bb 28> [80.00%]:
  _98 = (long unsigned int) i_97;
  _99 = _98 * 2;
  _100 = &locy.mantissa + _99;
  accum_101 = *_100;
  _102 = accum_101 & 1;
  accum_103 = accum_101 >> 1;
  if (carry_199 != 0)
    goto <bb 29>; [50.00%]
  else
    goto <bb 30>; [50.00%]

  <bb 29> [40.00%]:
  accum_104 = accum_103 | 32768;

  <bb 30> [80.00%]:
  # accum_105 = PHI <accum_103(28), accum_104(29)>
  *_100 = accum_105;
  i_106 = i_97 + 1;

  <bb 31> [100.00%]:
  # i_97 = PHI <0(71), i_106(30)>
  # carry_199 = PHI <0(71), _102(30)>
  if (i_97 <= 3)
    goto <bb 28>; [80.00%]
  else
    goto <bb 32>; [20.00%]

  <bb 32> [20.00%]:
  # carry_14 = PHI <carry_199(31)>
  if (carry_14 != 0)
    goto <bb 70>; [34.00%]
  else
    goto <bb 35>; [66.00%]

  <bb 70> [6.80%]:
  goto <bb 34>; [100.00%]

  <bb 33> [27.20%]:
  _27 = x_51(D)->mantissa[j_41];
  _28 = z_53(D)->mantissa[j_41];
  accum_107 = (unsigned int) _28;
  _108 = (unsigned int) _27;
  accum_109 = accum_107 + _108;
  _110 = (unsigned int) carry_200;
  accum_111 = accum_109 + _110;
  _112 = accum_111 >> 16;
  _113 = (short unsigned int) _112;
  _114 = _113 & 1;
  _115 = (short unsigned int) accum_111;
  MEM[(short unsigned int *)z_53(D)].mantissa[j_41] = _115;
  j_63 = j_41 + -1;

  <bb 34> [34.00%]:
  # j_41 = PHI <3(70), j_63(33)>
  # carry_200 = PHI <0(70), _114(33)>
  if (j_41 >= 0)
    goto <bb 33>; [80.00%]
  else
    goto <bb 35>; [20.00%]

  <bb 35> [20.00%]:
  # carry_201 = PHI <carry_200(34), 0(32)>
  _29 = &z_53(D)->mantissa;
  goto <bb 39>; [100.00%]

  <bb 36> [80.00%]:
  _127 = (long unsigned int) i_126;
  _128 = _127 * 2;
  _129 = _29 + _128;
  accum_130 = *_129;
  _131 = accum_130 & 1;
  accum_132 = accum_130 >> 1;
  if (carry_202 != 0)
    goto <bb 37>; [50.00%]
  else
    goto <bb 38>; [50.00%]

  <bb 37> [40.00%]:
  accum_133 = accum_132 | 32768;

  <bb 38> [80.00%]:
  # accum_134 = PHI <accum_132(36), accum_133(37)>
  *_129 = accum_134;
  i_135 = i_126 + 1;

  <bb 39> [100.00%]:
  # i_126 = PHI <0(35), i_135(38)>
  # carry_202 = PHI <carry_201(35), _131(38)>
  if (i_126 <= 3)
    goto <bb 36>; [80.00%]
  else
    goto <bb 69>; [20.00%]

  <bb 69> [20.00%]:
  goto <bb 43>; [100.00%]

  <bb 40> [80.00%]:
  _117 = (long unsigned int) i_116;
  _118 = _117 * 2;
  _119 = &extra_bits + _118;
  accum_120 = *_119;
  _121 = accum_120 & 1;
  accum_122 = accum_120 >> 1;
  if (carry_203 != 0)
    goto <bb 41>; [50.00%]
  else
    goto <bb 42>; [50.00%]

  <bb 41> [40.00%]:
  accum_123 = accum_122 | 32768;

  <bb 42> [80.00%]:
  # accum_124 = PHI <accum_122(40), accum_123(41)>
  *_119 = accum_124;
  i_125 = i_116 + 1;

  <bb 43> [100.00%]:
  # i_116 = PHI <0(69), i_125(42)>
  # carry_203 = PHI <carry_202(69), _121(42)>
  if (i_116 <= 3)
    goto <bb 40>; [80.00%]
  else
    goto <bb 44>; [20.00%]

  <bb 44> [20.00%]:
  i_64 = i_40 + 1;

  <bb 45> [20.31%]:
  # i_40 = PHI <0(68), i_64(44)>
  if (i_40 <= 63)
    goto <bb 71>; [98.46%]
  else
    goto <bb 66>; [1.54%]

  <bb 71> [20.00%]:
  goto <bb 31>; [100.00%]

  <bb 66> [0.31%]:
  goto <bb 56>; [100.00%]

  <bb 46> [7.09%]:
  _147 = (long unsigned int) i_146;
  _148 = _147 * 2;
  _149 = &extra_bits + _148;
  accum_150 = *_149;
  _151 = accum_150 & 32768;
  accum_152 = accum_150 << 1;
  if (carry_204 != 0)
    goto <bb 47>; [50.00%]
  else
    goto <bb 48>; [50.00%]

  <bb 47> [3.55%]:
  accum_153 = accum_152 | 1;

  <bb 48> [7.09%]:
  # accum_154 = PHI <accum_152(46), accum_153(47)>
  *_149 = accum_154;
  i_155 = i_146 + -1;

  <bb 49> [8.86%]:
  # i_146 = PHI <3(67), i_155(48)>
  # carry_204 = PHI <0(67), _151(48)>
  if (i_146 >= 0)
    goto <bb 46>; [80.00%]
  else
    goto <bb 50>; [20.00%]

  <bb 50> [1.77%]:
  # carry_179 = PHI <carry_204(49)>
  _30 = &z_53(D)->mantissa;
  goto <bb 54>; [100.00%]

  <bb 51> [7.09%]:
  _137 = (long unsigned int) i_136;
  _138 = _137 * 2;
  _139 = _30 + _138;
  accum_140 = *_139;
  _141 = accum_140 & 32768;
  accum_142 = accum_140 << 1;
  if (carry_205 != 0)
    goto <bb 52>; [50.00%]
  else
    goto <bb 53>; [50.00%]

  <bb 52> [3.55%]:
  accum_143 = accum_142 | 1;

  <bb 53> [7.09%]:
  # accum_144 = PHI <accum_142(51), accum_143(52)>
  *_139 = accum_144;
  i_145 = i_136 + -1;

  <bb 54> [8.86%]:
  # i_136 = PHI <3(50), i_145(53)>
  # carry_205 = PHI <carry_179(50), _141(53)>
  if (i_136 >= 0)
    goto <bb 51>; [80.00%]
  else
    goto <bb 55>; [20.00%]

  <bb 55> [1.77%]:
  _31 = z_53(D)->exp;
  _32 = (unsigned short) _31;
  _33 = _32 + 65535;
  _34 = (short int) _33;
  z_53(D)->exp = _34;

  <bb 56> [2.09%]:
  _35 = z_53(D)->mantissa[0];
  _36 = (signed short) _35;
  if (_36 >= 0)
    goto <bb 67>; [85.00%]
  else
    goto <bb 65>; [15.00%]

  <bb 67> [1.77%]:
  goto <bb 49>; [100.00%]

  <bb 65> [0.31%]:
  goto <bb 58>; [100.00%]

  <bb 57> [1.25%]:
  _157 = (long unsigned int) i_156;
  _158 = _157 * 2;
  _159 = &extra_bits + _158;
  _160 = *_159;
  _161 = (int) _160;
  n_163 = _161 | n_162;
  i_164 = i_156 + 1;

  <bb 58> [1.56%]:
  # i_156 = PHI <0(65), i_164(57)>
  # n_162 = PHI <0(65), n_163(57)>
  if (i_156 <= 3)
    goto <bb 57>; [80.00%]
  else
    goto <bb 59>; [20.00%]

  <bb 59> [0.31%]:
  # n_178 = PHI <n_162(58)>
  if (n_178 == 0)
    goto <bb 60>; [50.00%]
  else
    goto <bb 62> (<L49>); [50.00%]

  <bb 60> [0.16%]:
  _37 = z_53(D)->mantissa[3];
  _38 = _37 | 1;
  z_53(D)->mantissa[3] = _38;
  goto <bb 62> (<L49>); [100.00%]

<L48> [0.31%]:
  choose_nan (x_51(D), y_52(D), z_53(D), 0);

<L49> [2.50%]:
  _165 = z_53(D)->type;
  _166 = _165 + 255;
  if (_166 <= 1)
    goto <bb 63>; [24.54%]
  else
    goto <bb 64>; [75.46%]

  <bb 63> [0.61%]:
  RoundInternalFPF.part.1 (z_53(D));

  <bb 64> [2.50%]:
  extra_bits ={v} {CLOBBER};
  locy ={v} {CLOBBER};
  return;

}



;; Function DoEmFloatIteration (DoEmFloatIteration, funcdef_no=35, decl_uid=2773, cgraph_uid=35, symbol_order=35)


Analyzing function body size: DoEmFloatIteration

Inline summary for DoEmFloatIteration/35 inlinable
  self time:       794
  global time:     0
  self size:       60
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:34.000000, time:422.615000, predicate:(true)
    size:3.000000, time:2.000000, predicate:(not inlined)
  calls:
    StopStopwatch/59 function body not available
      loop depth: 0 freq:1000 size: 3 time: 12 callee size: 0 stack: 0
    DivideInternalFPF/51 function not considered for inlining
      loop depth: 2 freq:6415 size: 4 time: 13 callee size:129 stack:20
    MultiplyInternalFPF/50 function not considered for inlining
      loop depth: 2 freq:6415 size: 4 time: 13 callee size:115 stack:20
    AddSubInternalFPF/49 function not considered for inlining
      loop depth: 2 freq:6415 size: 5 time: 14 callee size:107 stack:24
       op0 is compile time invariant
    AddSubInternalFPF/49 function not considered for inlining
      loop depth: 2 freq:6415 size: 5 time: 14 callee size:107 stack:24
       op0 is compile time invariant
    StartStopwatch/57 function body not available
      loop depth: 0 freq:1000 size: 2 time: 11 callee size: 0 stack: 0

DoEmFloatIteration (struct InternalFPF * abase, struct InternalFPF * bbase, struct InternalFPF * cbase, long unsigned int arraysize, long unsigned int loops)
{
  long unsigned int i;
  static unsigned char jtable[16] = {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
  long unsigned int elapsed;
  long unsigned int _1;
  unsigned char _2;
  long unsigned int _3;
  struct InternalFPF * _4;
  struct InternalFPF * _5;
  struct InternalFPF * _6;
  long unsigned int _7;
  struct InternalFPF * _8;
  struct InternalFPF * _9;
  struct InternalFPF * _10;
  long unsigned int _11;
  struct InternalFPF * _12;
  struct InternalFPF * _13;
  struct InternalFPF * _14;
  long unsigned int _15;
  struct InternalFPF * _16;
  struct InternalFPF * _17;
  struct InternalFPF * _18;
  long unsigned int _30;

  <bb 2> [2.65%]:
  elapsed_26 = StartStopwatch ();
  goto <bb 10>; [100.00%]

  <bb 3> [85.00%]:
  _1 = i_20 & 15;
  _2 = jtable[_1];
  switch (_2) <default: <L6> [20.00%], case 0: <L2> [20.00%], case 1: <L3> [20.00%], case 2: <L4> [20.00%], case 3: <L5> [20.00%]>

<L2> [17.00%]:
  _3 = i_20 * 12;
  _4 = cbase_32(D) + _3;
  _5 = bbase_33(D) + _3;
  _6 = abase_34(D) + _3;
  AddSubInternalFPF (0, _6, _5, _4);
  goto <bb 8> (<L6>); [100.00%]

<L3> [17.00%]:
  _7 = i_20 * 12;
  _8 = cbase_32(D) + _7;
  _9 = bbase_33(D) + _7;
  _10 = abase_34(D) + _7;
  AddSubInternalFPF (1, _10, _9, _8);
  goto <bb 8> (<L6>); [100.00%]

<L4> [17.00%]:
  _11 = i_20 * 12;
  _12 = cbase_32(D) + _11;
  _13 = bbase_33(D) + _11;
  _14 = abase_34(D) + _11;
  MultiplyInternalFPF (_14, _13, _12);
  goto <bb 8> (<L6>); [100.00%]

<L5> [17.00%]:
  _15 = i_20 * 12;
  _16 = cbase_32(D) + _15;
  _17 = bbase_33(D) + _15;
  _18 = abase_34(D) + _15;
  DivideInternalFPF (_18, _17, _16);

<L6> [85.00%]:
  i_39 = i_20 + 1;

  <bb 9> [100.00%]:
  # i_20 = PHI <0(12), i_39(8)>
  if (i_20 < arraysize_31(D))
    goto <bb 3>; [85.00%]
  else
    goto <bb 13>; [15.00%]

  <bb 13> [15.00%]:

  <bb 10> [17.65%]:
  # loops_19 = PHI <loops_27(D)(2), loops_28(13)>
  loops_28 = loops_19 + 18446744073709551615;
  if (loops_19 != 0)
    goto <bb 12>; [85.00%]
  else
    goto <bb 11>; [15.00%]

  <bb 12> [15.00%]:
  goto <bb 9>; [100.00%]

  <bb 11> [2.65%]:
  _30 = StopStopwatch (elapsed_26);
  return _30;

}


