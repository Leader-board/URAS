
;; Function randnum (randnum, funcdef_no=25, decl_uid=2518, cgraph_uid=25, symbol_order=25)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
lngval = &NONLOCAL
randw.2530 = NONLOCAL
randw.2530 = &NONLOCAL
ESCAPED = &NONLOCAL
randw.2530 = &NONLOCAL
ESCAPED = &NONLOCAL
_1 = randw.2530
_2 = _1
_2 = &NONLOCAL
_3 = randw.2530
_4 = _3
_4 = &NONLOCAL
_5 = _2
_5 = _4
interm_12 = _5
interm_12 = &NONLOCAL
_6 = randw.2530
randw.2530 = _6
ESCAPED = _6
randw.2530 = interm_12
ESCAPED = interm_12
ESCAPED = interm_12

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"lngval"[label="lngval = { 5 }"];
"interm_12"[label="interm_12 = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*lngval";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"interm_12" -> "ESCAPED";
"interm_12" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "interm_12";
"interm_12" -> "interm_12";
"interm_12" -> "interm_12";
"interm_12" -> "interm_12";
"interm_12" -> "interm_12";
"interm_12" -> "interm_12";
"interm_12" -> "interm_12";
"interm_12" -> "interm_12";
"interm_12" -> "interm_12";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"lngval";
"randw.2530";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"randw.2530" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = randw.2530\l"];
"STOREDANYTHING";
"INTEGER";
"lngval";
"randw.2530";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"randw.2530" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as randw.2530
STOREDANYTHING = { }
INTEGER = { ANYTHING }
lngval = { NONLOCAL }
randw.2530 = { ESCAPED NONLOCAL }
_1 = { ESCAPED NONLOCAL } same as randw.2530
_2 = { ESCAPED NONLOCAL } same as randw.2530
_3 = { ESCAPED NONLOCAL } same as randw.2530
_4 = { ESCAPED NONLOCAL } same as randw.2530
_5 = { ESCAPED NONLOCAL } same as randw.2530
interm_12 = { ESCAPED NONLOCAL } same as randw.2530
_6 = { ESCAPED NONLOCAL } same as randw.2530


Alias information for randnum

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


randnum (int32 lngval)
{
  static int32 randw[2] = {13, 117};
  register int32 interm;
  int _1;
  int _2;
  int _3;
  int _4;
  int _5;
  int _6;

  <bb 2> [0.00%]:
  if (lngval_8(D) != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  randw[0] = 13;
  randw[1] = 117;

  <bb 4> [0.00%]:
  _1 = randw[0];
  _2 = _1 * 254754;
  _3 = randw[1];
  _4 = _3 * 529562;
  _5 = _2 + _4;
  interm_12 = _5 % 999563;
  _6 = randw[0];
  randw[1] = _6;
  randw[0] = interm_12;
  return interm_12;

}



;; Function randwc (randwc, funcdef_no=23, decl_uid=2514, cgraph_uid=23, symbol_order=23)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
num = &NONLOCAL
randw.2530 = NONLOCAL
_6 = randw.2530
_7 = _6
_7 = &NONLOCAL
_8 = randw.2530
_9 = _8
_9 = &NONLOCAL
_10 = _7
_10 = _9
interm_11 = _10
interm_11 = &NONLOCAL
randw.2530 = _6
ESCAPED = _6
randw.2530 = interm_11
ESCAPED = interm_11
_5 = interm_11
_5 = num
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"num"[label="num = { 5 }"];
"_6"[label="_6 = { 5 }"];
"_5";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*num";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_6" -> "ESCAPED";
"_6" -> "ESCAPED";
"_5" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_6";
"_6" -> "_6";
"_6" -> "_6";
"_6" -> "_6";
"_6" -> "_6";
"_6" -> "_6";
"_6" -> "_6";
"_6" -> "_6";
"num" -> "_5";
"_6" -> "_5";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"num";
"randw.2530";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"num" -> "randw.2530";
"randw.2530" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = randw.2530\l"];
"STOREDANYTHING";
"INTEGER";
"num";
"randw.2530";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"num" -> "randw.2530";
"randw.2530" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as randw.2530
STOREDANYTHING = { }
INTEGER = { ANYTHING }
num = { NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as randw.2530
randw.2530 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as randw.2530
_8 = { ESCAPED NONLOCAL } same as randw.2530
_9 = { ESCAPED NONLOCAL } same as randw.2530
_10 = { ESCAPED NONLOCAL } same as randw.2530
interm_11 = { ESCAPED NONLOCAL } same as randw.2530
_5 = { ESCAPED NONLOCAL } same as randw.2530


Alias information for randwc

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


randwc (int32 num)
{
  register int32 interm;
  int32 D.2548;
  static int32 randw[2] = {13, 117};
  int32 _5;
  int _6;
  int _7;
  int _8;
  int _9;
  int _10;

  <bb 2> [100.00%]:
  _6 = randw[0];
  _7 = _6 * 254754;
  _8 = randw[1];
  _9 = _8 * 529562;
  _10 = _7 + _9;
  interm_11 = _10 % 999563;
  randw[1] = _6;
  randw[0] = interm_11;
  _5 = interm_11 % num_4(D);
  return _5;

}



;; Function abs_randwc (abs_randwc, funcdef_no=24, decl_uid=2516, cgraph_uid=24, symbol_order=24)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
num = &NONLOCAL
num.0_1 = num
randw.2530 = NONLOCAL
_9 = randw.2530
_10 = _9
_10 = &NONLOCAL
_11 = randw.2530
_12 = _11
_12 = &NONLOCAL
_13 = _10
_13 = _12
interm_14 = _13
interm_14 = &NONLOCAL
randw.2530 = _9
ESCAPED = _9
randw.2530 = interm_14
ESCAPED = interm_14
_15 = interm_14
_15 = num.0_1
temp_7 = _15
temp_2 = _15
temp_2 = temp_7
_8 = temp_2
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"num"[label="num = { 5 }"];
"num.0_1";
"_9"[label="_9 = { 5 }"];
"_15";
"temp_7";
"temp_2";
"_8";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*num";
"*num.0_1";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_9" -> "ESCAPED";
"_9" -> "ESCAPED";
"_8" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"num" -> "num.0_1";
"NONLOCAL" -> "_9";
"_9" -> "_9";
"_9" -> "_9";
"_9" -> "_9";
"_9" -> "_9";
"_9" -> "_9";
"_9" -> "_9";
"_9" -> "_9";
"num.0_1" -> "_15";
"_9" -> "_15";
"_15" -> "temp_7";
"_15" -> "temp_2";
"temp_7" -> "temp_2";
"temp_2" -> "_8";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"num";
"randw.2530";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"num" -> "randw.2530";
"randw.2530" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = randw.2530\l"];
"STOREDANYTHING";
"INTEGER";
"num";
"randw.2530";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"num" -> "randw.2530";
"randw.2530" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as randw.2530
STOREDANYTHING = { }
INTEGER = { ANYTHING }
num = { NONLOCAL }
num.0_1 = { NONLOCAL } same as num
_9 = { ESCAPED NONLOCAL } same as randw.2530
randw.2530 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL } same as randw.2530
_11 = { ESCAPED NONLOCAL } same as randw.2530
_12 = { ESCAPED NONLOCAL } same as randw.2530
_13 = { ESCAPED NONLOCAL } same as randw.2530
interm_14 = { ESCAPED NONLOCAL } same as randw.2530
_15 = { ESCAPED NONLOCAL } same as randw.2530
temp_7 = { ESCAPED NONLOCAL } same as randw.2530
temp_2 = { ESCAPED NONLOCAL } same as randw.2530
_8 = { ESCAPED NONLOCAL } same as randw.2530


Alias information for abs_randwc

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


abs_randwc (u32 num)
{
  register int32 interm;
  int32 D.2552;
  int32 temp;
  int num.0_1;
  u32 _8;
  int _9;
  int _10;
  int _11;
  int _12;
  int _13;
  int _15;

  <bb 2> [100.00%]:
  num.0_1 = (int) num_3(D);
  _9 = randw[0];
  _10 = _9 * 254754;
  _11 = randw[1];
  _12 = _11 * 529562;
  _13 = _10 + _12;
  interm_14 = _13 % 999563;
  randw[1] = _9;
  randw[0] = interm_14;
  _15 = interm_14 % num.0_1;
  if (_15 < 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  temp_7 = -_15;

  <bb 4> [0.00%]:
  # temp_2 = PHI <_15(2), temp_7(3)>
  _8 = (u32) temp_2;
  return _8;

}


