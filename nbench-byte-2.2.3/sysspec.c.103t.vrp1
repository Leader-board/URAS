
;; Function AllocateMemory (AllocateMemory, funcdef_no=52, decl_uid=3587, cgraph_uid=52, symbol_order=52)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 19 10 11 12 13 14 15 16 17 18
;;
;; Loop 1
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 6 9 }
;; 6 succs { 7 8 }
;; 7 succs { 18 }
;; 8 succs { 18 }
;; 9 succs { 10 19 }
;; 19 succs { 12 }
;; 10 succs { 15 }
;; 11 succs { 12 }
;; 12 succs { 11 13 }
;; 13 succs { 14 15 }
;; 14 succs { 15 }
;; 15 succs { 17 16 }
;; 16 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

adj_addr_30 -> { adj_addr_12 }
_31 -> { _7 }
Incremental SSA update started at block: 9
Number of blocks in CFG: 20
Number of blocks to update: 5 ( 25%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

global_align.1_43 -> { global_align.1_6 }
global_align.1_44 -> { global_align.1_6 }
returnval_45 -> { returnval_20 }
returnval_46 -> { returnval_20 }
errorcode_47 -> { errorcode_21(D) }
errorcode_48 -> { errorcode_21(D) }
mem_array_ents.7_49 -> { mem_array_ents.7_33 }
mem_array_ents.7_50 -> { mem_array_ents.7_35 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 20
Number of blocks to update: 15 ( 75%)



Value ranges after VRP:

global_align.0_1: VARYING
_2: [-2147483648, 2147483647]
_3: [-4294967296, 4294967294]
_4: ~[4294967295, 18446744069414584319]
_5: [0, +INF]
global_align.1_6: VARYING
_7: [2, +INF]
_8: [0, 18446744073709551614]
_9: ~[-1, 3]
_10: [4, 18446744073709551614]
_11: [0, 18446744073709551613]
adj_addr_12: [0, +INF]
adj_addr_13: [0, +INF]
_14: VARYING
.MEM_15: VARYING
.MEM_16: VARYING
nbytes_18(D): VARYING
returnval_20: VARYING
errorcode_21(D): VARYING
true_addr_24: [0, +INF]
adj_addr_25: [0, +INF]
adj_addr_26: [0, +INF]
adj_addr_27: [0, +INF]
returnval_28: VARYING
adj_addr_30: [0, +INF]
_31: [2, +INF]
mem_array_ents.7_33: VARYING
_34: [-2147483647, 20]
mem_array_ents.7_35: VARYING
_36: [-2147483647, 20]
global_align.1_43: ~[0, 0]  EQUIVALENCES: { global_align.1_6 } (1 elements)
global_align.1_44: ~[0, 1]  EQUIVALENCES: { global_align.1_6 global_align.1_43 } (2 elements)
returnval_45: [0B, 0B]  EQUIVALENCES: { returnval_20 } (1 elements)
returnval_46: ~[0B, 0B]  EQUIVALENCES: { returnval_20 } (1 elements)
errorcode_47: ~[0B, 0B]  EQUIVALENCES: { errorcode_21(D) } (1 elements)
errorcode_48: ~[0B, 0B]  EQUIVALENCES: { errorcode_21(D) } (1 elements)
mem_array_ents.7_49: [-INF, 19]  EQUIVALENCES: { mem_array_ents.7_33 } (1 elements)
mem_array_ents.7_50: [-INF, 19]  EQUIVALENCES: { mem_array_ents.7_35 } (1 elements)


Removing basic block 19
AllocateMemory (long unsigned int nbytes, int * errorcode)
{
  long unsigned int adj_addr;
  long unsigned int true_addr;
  farvoid * returnval;
  int global_align.0_1;
  long int _2;
  long int _3;
  long unsigned int _4;
  long unsigned int _5;
  int global_align.1_6;
  long unsigned int _7;
  long unsigned int _8;
  int _9;
  long unsigned int _10;
  long unsigned int _11;
  farvoid * _14;
  long unsigned int _31;
  int mem_array_ents.7_33;
  int _34;
  int mem_array_ents.7_35;
  int _36;

  <bb 2> [45.45%]:
  global_align.0_1 = global_align;
  _2 = (long int) global_align.0_1;
  _3 = _2 * 2;
  _4 = (long unsigned int) _3;
  _5 = _4 + nbytes_18(D);
  returnval_20 = malloc (_5);
  if (returnval_20 == 0B)
    goto <bb 3>; [30.00%]
  else
    goto <bb 4>; [70.00%]

  <bb 3> [13.64%]:
  *errorcode_21(D) = 1;
  goto <bb 5>; [100.00%]

  <bb 4> [31.82%]:
  *errorcode_21(D) = 0;

  <bb 5> [45.45%]:
  true_addr_24 = (long unsigned int) returnval_20;
  global_align.1_6 = global_align;
  if (global_align.1_6 == 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 6> [22.73%]:
  mem_array_ents.7_33 = mem_array_ents;
  if (mem_array_ents.7_33 > 19)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [11.36%]:
  *errorcode_21(D) = 2;
  goto <bb 18>; [100.00%]

  <bb 8> [11.36%]:
  mem_array[0][mem_array_ents.7_33] = true_addr_24;
  mem_array[1][mem_array_ents.7_33] = true_addr_24;
  _34 = mem_array_ents.7_33 + 1;
  mem_array_ents = _34;
  goto <bb 18>; [100.00%]

  <bb 9> [22.73%]:
  if (global_align.1_6 == 1)
    goto <bb 10>; [34.00%]
  else
    goto <bb 12>; [66.00%]

  <bb 10> [7.73%]:
  adj_addr_27 = true_addr_24 + 1;
  goto <bb 15>; [100.00%]

  <bb 11> [85.00%]:
  adj_addr_26 = adj_addr_12 + 1;

  <bb 12> [100.00%]:
  # adj_addr_12 = PHI <true_addr_24(9), adj_addr_26(11)>
  _7 = (long unsigned int) global_align.1_6;
  _8 = adj_addr_12 % _7;
  if (_8 != 0)
    goto <bb 11>; [85.00%]
  else
    goto <bb 13>; [15.00%]

  <bb 13> [15.00%]:
  # _31 = PHI <_7(12)>
  # adj_addr_30 = PHI <adj_addr_12(12)>
  _9 = global_align.1_6 * 2;
  _10 = (long unsigned int) _9;
  _11 = adj_addr_30 % _10;
  if (_11 == 0)
    goto <bb 14>; [50.00%]
  else
    goto <bb 15>; [50.00%]

  <bb 14> [7.50%]:
  adj_addr_25 = _31 + adj_addr_30;

  <bb 15> [22.73%]:
  # adj_addr_13 = PHI <adj_addr_27(10), adj_addr_30(13), adj_addr_25(14)>
  returnval_28 = (farvoid *) adj_addr_13;
  mem_array_ents.7_35 = mem_array_ents;
  if (mem_array_ents.7_35 > 19)
    goto <bb 17>; [54.00%]
  else
    goto <bb 16>; [46.00%]

  <bb 16> [10.45%]:
  mem_array[0][mem_array_ents.7_35] = true_addr_24;
  mem_array[1][mem_array_ents.7_35] = adj_addr_13;
  _36 = mem_array_ents.7_35 + 1;
  mem_array_ents = _36;
  goto <bb 18>; [100.00%]

  <bb 17> [12.27%]:
  *errorcode_21(D) = 2;

  <bb 18> [45.45%]:
  # _14 = PHI <returnval_20(7), returnval_28(17), returnval_28(16), returnval_20(8)>
  return _14;

}



;; Function FreeMemory (FreeMemory, funcdef_no=53, decl_uid=3590, cgraph_uid=53, symbol_order=53)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;;
;; Loop 2
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8 3
;; 2 succs { 9 }
;; 3 succs { 4 8 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 11 }
;; 8 succs { 9 }
;; 9 succs { 3 10 }
;; 10 succs { 11 }
;; 11 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

mem_array_ents.13_1 -> { mem_array_ents.13_21 }
i_2 -> { i_12 }
Incremental SSA update started at block: 9
Number of blocks in CFG: 12
Number of blocks to update: 8 ( 67%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

mem_array_ents.13_26 -> { mem_array_ents.13_1 }
i_27 -> { i_12 }
_28 -> { _15 }
mem_array_ents.13_29 -> { mem_array_ents.13_21 }
Incremental SSA update started at block: 9
Number of blocks in CFG: 12
Number of blocks to update: 7 ( 58%)



Value ranges after VRP:

mem_array_ents.13_1: [i_27 + 1, +INF]  EQUIVALENCES: { mem_array_ents.13_21 } (1 elements)
i_2: [-INF, mem_array_ents.13_21 + -1]  EQUIVALENCES: { i_12 } (1 elements)
.MEM_3: VARYING
mempointer_4(D): VARYING
adj_addr_5: [0, +INF]
mempointer_7: VARYING
i_12: [0, 20]
_13: VARYING
_14: VARYING
_15: VARYING
_16: VARYING
j_17: [i_2, +INF]  EQUIVALENCES: { } (0 elements)
_18: VARYING
_19: VARYING
i_20: VARYING
mem_array_ents.13_21: VARYING
.MEM_22: VARYING
mem_array_ents.13_26: [-INF, _15]  EQUIVALENCES: { mem_array_ents.13_1 mem_array_ents.13_21 } (2 elements)
i_27: [-INF, mem_array_ents.13_21 + -1]  EQUIVALENCES: { i_12 } (1 elements)
_28: [-INF, mem_array_ents.13_1 + -1]  EQUIVALENCES: { _15 } (1 elements)
mem_array_ents.13_29: [i_27 + 1, +INF]  EQUIVALENCES: { mem_array_ents.13_21 } (1 elements)


FreeMemory (farvoid * mempointer, int * errorcode)
{
  int i;
  int j;
  long unsigned int adj_addr;
  int mem_array_ents.13_1;
  long unsigned int _13;
  long unsigned int _14;
  int _15;
  long unsigned int _16;
  long unsigned int _18;
  int _19;
  int mem_array_ents.13_21;

  <bb 2> [14.44%]:
  adj_addr_5 = (long unsigned int) mempointer_4(D);
  goto <bb 9>; [100.00%]

  <bb 3> [92.50%]:
  _13 = mem_array[1][i_12];
  if (adj_addr_5 == _13)
    goto <bb 4>; [7.50%]
  else
    goto <bb 8>; [92.50%]

  <bb 4> [6.94%]:
  # i_2 = PHI <i_12(3)>
  # mem_array_ents.13_1 = PHI <mem_array_ents.13_21(3)>
  _14 = mem_array[0][i_2];
  goto <bb 6>; [100.00%]

  <bb 5> [39.31%]:
  _16 = mem_array[0][_15];
  mem_array[0][j_17] = _16;
  _18 = mem_array[1][_15];
  mem_array[1][j_17] = _18;

  <bb 6> [46.25%]:
  # j_17 = PHI <i_2(4), _15(5)>
  _15 = j_17 + 1;
  if (_15 < mem_array_ents.13_1)
    goto <bb 5>; [85.00%]
  else
    goto <bb 7>; [15.00%]

  <bb 7> [6.94%]:
  _19 = mem_array_ents.13_1 + -1;
  mem_array_ents = _19;
  mempointer_7 = (farvoid *) _14;
  free (mempointer_7);
  *errorcode_9(D) = 0;
  goto <bb 11>; [100.00%]

  <bb 8> [85.56%]:
  i_20 = i_12 + 1;

  <bb 9> [100.00%]:
  # i_12 = PHI <0(2), i_20(8)>
  mem_array_ents.13_21 = mem_array_ents;
  if (i_12 < mem_array_ents.13_21)
    goto <bb 3>; [92.50%]
  else
    goto <bb 10>; [7.50%]

  <bb 10> [7.50%]:
  *errorcode_9(D) = 3;

  <bb 11> [14.44%]:
  return;

}



;; Function MoveMemory (MoveMemory, funcdef_no=54, decl_uid=3594, cgraph_uid=54, symbol_order=54)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

destination_2(D): VARYING
_5: VARYING


MoveMemory (farvoid * destination, farvoid * source, long unsigned int nbytes)
{
  long unsigned int _5;

  <bb 2> [100.00%]:
  _5 = __builtin_object_size (destination_2(D), 0);
  __builtin_memmove (destination_2(D), source_3(D), nbytes_4(D));
  return;

}



;; Function InitMemArray (InitMemArray, funcdef_no=55, decl_uid=3596, cgraph_uid=55, symbol_order=55)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:



InitMemArray ()
{
  <bb 2> [100.00%]:
  mem_array_ents = 0;
  return;

}



;; Function AddMemArray (AddMemArray, funcdef_no=56, decl_uid=3599, cgraph_uid=56, symbol_order=56)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

mem_array_ents.7_11 -> { mem_array_ents.7_1 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 5
Number of blocks to update: 2 ( 40%)



Value ranges after VRP:

mem_array_ents.7_1: VARYING
_2: [-2147483647, 20]
_3: [-1, 0]
.MEM_4: VARYING
mem_array_ents.7_11: [-INF, 19]  EQUIVALENCES: { mem_array_ents.7_1 } (1 elements)


AddMemArray (long unsigned int true_addr, long unsigned int adj_addr)
{
  int mem_array_ents.7_1;
  int _2;
  int _3;

  <bb 2> [100.00%]:
  mem_array_ents.7_1 = mem_array_ents;
  if (mem_array_ents.7_1 > 19)
    goto <bb 4>; [2.00%]
  else
    goto <bb 3>; [98.00%]

  <bb 3> [98.00%]:
  mem_array[0][mem_array_ents.7_1] = true_addr_6(D);
  mem_array[1][mem_array_ents.7_1] = adj_addr_8(D);
  _2 = mem_array_ents.7_1 + 1;
  mem_array_ents = _2;

  <bb 4> [100.00%]:
  # _3 = PHI <-1(2), 0(3)>
  return _3;

}



;; Function RemoveMemArray (RemoveMemArray, funcdef_no=57, decl_uid=3602, cgraph_uid=57, symbol_order=57)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;;
;; Loop 2
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;;
;; Loop 1
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8 3
;; 2 succs { 9 }
;; 3 succs { 4 8 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 10 }
;; 8 succs { 9 }
;; 9 succs { 3 10 }
;; 10 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

mem_array_ents.13_6 -> { mem_array_ents.13_8 }
i_19 -> { i_9 }
Incremental SSA update started at block: 9
Number of blocks in CFG: 11
Number of blocks to update: 7 ( 64%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_23 -> { _5 }
mem_array_ents.13_24 -> { mem_array_ents.13_6 }
mem_array_ents.13_25 -> { mem_array_ents.13_8 }
i_26 -> { i_9 }
Incremental SSA update started at block: 9
Number of blocks in CFG: 11
Number of blocks to update: 7 ( 64%)



Value ranges after VRP:

_1: VARYING
_2: VARYING
_3: VARYING
_4: VARYING
_5: [1, 41]
mem_array_ents.13_6: [1, +INF]  EQUIVALENCES: { mem_array_ents.13_8 } (1 elements)
_7: [0, 40]
mem_array_ents.13_8: VARYING
i_9: [0, 20]
j_10: [0, 40]  EQUIVALENCES: { } (0 elements)
_11: [-1, 0]
.MEM_12: VARYING
.MEM_13: VARYING
adj_addr_15(D): VARYING
i_16: [1, 21]
i_19: [0, 20]  EQUIVALENCES: { i_9 } (1 elements)
_23: [1, 41]  EQUIVALENCES: { _5 } (1 elements)
mem_array_ents.13_24: [1, 41]  EQUIVALENCES: { mem_array_ents.13_6 mem_array_ents.13_8 } (2 elements)
mem_array_ents.13_25: [1, +INF]  EQUIVALENCES: { mem_array_ents.13_8 } (1 elements)
i_26: [0, 20]  EQUIVALENCES: { i_9 } (1 elements)


RemoveMemArray (long unsigned int adj_addr, long unsigned int * true_addr)
{
  int j;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  int _5;
  int mem_array_ents.13_6;
  int _7;
  int mem_array_ents.13_8;
  int _11;

  <bb 2> [14.44%]:
  goto <bb 9>; [100.00%]

  <bb 3> [92.50%]:
  _1 = mem_array[1][i_9];
  if (_1 == adj_addr_15(D))
    goto <bb 4>; [7.50%]
  else
    goto <bb 8>; [92.50%]

  <bb 4> [6.94%]:
  # mem_array_ents.13_6 = PHI <mem_array_ents.13_8(3)>
  # i_19 = PHI <i_9(3)>
  _2 = mem_array[0][i_19];
  *true_addr_17(D) = _2;
  goto <bb 6>; [100.00%]

  <bb 5> [39.31%]:
  _3 = mem_array[0][_5];
  mem_array[0][j_10] = _3;
  _4 = mem_array[1][_5];
  mem_array[1][j_10] = _4;

  <bb 6> [46.25%]:
  # j_10 = PHI <i_19(4), _5(5)>
  _5 = j_10 + 1;
  if (_5 < mem_array_ents.13_6)
    goto <bb 5>; [85.00%]
  else
    goto <bb 7>; [15.00%]

  <bb 7> [6.94%]:
  _7 = mem_array_ents.13_6 + -1;
  mem_array_ents = _7;
  goto <bb 10>; [100.00%]

  <bb 8> [85.56%]:
  i_16 = i_9 + 1;

  <bb 9> [100.00%]:
  # i_9 = PHI <0(2), i_16(8)>
  mem_array_ents.13_8 = mem_array_ents;
  if (mem_array_ents.13_8 > i_9)
    goto <bb 3>; [92.50%]
  else
    goto <bb 10>; [7.50%]

  <bb 10> [14.44%]:
  # _11 = PHI <0(7), -1(9)>
  return _11;

}



;; Function CreateFile (CreateFile, funcdef_no=58, decl_uid=3609, cgraph_uid=58, symbol_order=58)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

fhandle_10 -> { fhandle_5 }
fhandle_11 -> { fhandle_5 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 6
Number of blocks to update: 4 ( 67%)



Value ranges after VRP:

.MEM_1: VARYING
fhandle_5: VARYING
fhandle_10: [0B, 0B]  EQUIVALENCES: { fhandle_5 } (1 elements)
fhandle_11: ~[0B, 0B]  EQUIVALENCES: { fhandle_5 } (1 elements)


CreateFile (char * filename, int * errorcode)
{
  struct FILE * fhandle;

  <bb 2> [100.00%]:
  fhandle_5 = fopen (filename_3(D), "w");
  if (fhandle_5 == 0B)
    goto <bb 3>; [26.74%]
  else
    goto <bb 4>; [73.26%]

  <bb 3> [26.74%]:
  *errorcode_6(D) = 10;
  goto <bb 5>; [100.00%]

  <bb 4> [73.26%]:
  *errorcode_6(D) = 0;

  <bb 5> [100.00%]:
  fclose (fhandle_5);
  return;

}



;; Function bmOpenFile (bmOpenFile, funcdef_no=59, decl_uid=3612, cgraph_uid=59, symbol_order=59)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

fhandle_9 -> { fhandle_5 }
fhandle_10 -> { fhandle_5 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 6
Number of blocks to update: 4 ( 67%)



Value ranges after VRP:

.MEM_1: VARYING
fhandle_5: VARYING
fhandle_9: [0B, 0B]  EQUIVALENCES: { fhandle_5 } (1 elements)
fhandle_10: ~[0B, 0B]  EQUIVALENCES: { fhandle_5 } (1 elements)


bmOpenFile (char * fname, int * errorcode)
{
  struct FILE * fhandle;

  <bb 2> [100.00%]:
  fhandle_5 = fopen (fname_3(D), "w+");
  if (fhandle_5 == 0B)
    goto <bb 3>; [26.74%]
  else
    goto <bb 4>; [73.26%]

  <bb 3> [26.74%]:
  *errorcode_6(D) = 13;
  goto <bb 5>; [100.00%]

  <bb 4> [73.26%]:
  *errorcode_6(D) = 0;

  <bb 5> [100.00%]:
  return fhandle_5;

}



;; Function CloseFile (CloseFile, funcdef_no=60, decl_uid=3615, cgraph_uid=60, symbol_order=60)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:



CloseFile (struct FILE * fhandle, int * errorcode)
{
  <bb 2> [100.00%]:
  fclose (fhandle_2(D));
  *errorcode_4(D) = 0;
  return;

}



;; Function readfile (readfile, funcdef_no=61, decl_uid=3621, cgraph_uid=61, symbol_order=61)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 3 4 }
;; 3 succs { 6 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

errorcode_21 -> { errorcode_5(D) }
Incremental SSA update started at block: 2
Number of blocks in CFG: 7
Number of blocks to update: 3 ( 43%)



Value ranges after VRP:

offset.14_1: VARYING
_2: VARYING
.MEM_3: VARYING
errorcode_5(D): VARYING
offset_7(D): VARYING
nbytes_10(D): VARYING
nelems_11: [0, 65535]
buffer_12(D): VARYING
_15: VARYING
_19: VARYING
errorcode_21: ~[0B, 0B]  EQUIVALENCES: { errorcode_5(D) } (1 elements)


readfile (struct FILE * fhandle, long unsigned int offset, long unsigned int nbytes, void * buffer, int * errorcode)
{
  size_t nelems;
  long int offset.14_1;
  int _2;
  long unsigned int _15;
  long unsigned int _19;

  <bb 2> [100.00%]:
  *errorcode_5(D) = 0;
  offset.14_1 = (long int) offset_7(D);
  _2 = fseek (fhandle_8(D), offset.14_1, 0);
  if (_2 == -1)
    goto <bb 3>; [30.50%]
  else
    goto <bb 4>; [69.50%]

  <bb 3> [30.50%]:
  *errorcode_5(D) = 14;
  goto <bb 6>; [100.00%]

  <bb 4> [69.50%]:
  nelems_11 = nbytes_10(D) & 65535;
  _15 = __builtin_object_size (buffer_12(D), 0);
  _19 = __fread_alias (buffer_12(D), 1, nelems_11, fhandle_8(D));
  if (nelems_11 != _19)
    goto <bb 5>; [69.50%]
  else
    goto <bb 6>; [30.50%]

  <bb 5> [48.30%]:
  *errorcode_5(D) = 11;

  <bb 6> [100.00%]:
  return;

}



;; Function writefile (writefile, funcdef_no=62, decl_uid=3627, cgraph_uid=62, symbol_order=62)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 3 4 }
;; 3 succs { 6 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

errorcode_17 -> { errorcode_5(D) }
Incremental SSA update started at block: 2
Number of blocks in CFG: 7
Number of blocks to update: 3 ( 43%)



Value ranges after VRP:

offset.15_1: VARYING
_2: VARYING
.MEM_3: VARYING
errorcode_5(D): VARYING
offset_7(D): VARYING
fhandle_8(D): VARYING
nbytes_10(D): VARYING
nelems_11: [0, 65535]
buffer_12(D): VARYING
writecode_14: VARYING
errorcode_17: ~[0B, 0B]  EQUIVALENCES: { errorcode_5(D) } (1 elements)


writefile (struct FILE * fhandle, long unsigned int offset, long unsigned int nbytes, void * buffer, int * errorcode)
{
  size_t writecode;
  size_t nelems;
  long int offset.15_1;
  int _2;

  <bb 2> [100.00%]:
  *errorcode_5(D) = 0;
  offset.15_1 = (long int) offset_7(D);
  _2 = fseek (fhandle_8(D), offset.15_1, 0);
  if (_2 == -1)
    goto <bb 3>; [47.12%]
  else
    goto <bb 4>; [52.88%]

  <bb 3> [47.12%]:
  *errorcode_5(D) = 14;
  goto <bb 6>; [100.00%]

  <bb 4> [52.88%]:
  nelems_11 = nbytes_10(D) & 65535;
  writecode_14 = fwrite (buffer_12(D), 1, nelems_11, fhandle_8(D));
  if (nelems_11 == writecode_14)
    goto <bb 5>; [37.68%]
  else
    goto <bb 6>; [62.32%]

  <bb 5> [19.93%]:
  *errorcode_5(D) = 12;

  <bb 6> [100.00%]:
  return;

}



;; Function ReportError (ReportError, funcdef_no=63, decl_uid=3605, cgraph_uid=63, symbol_order=63)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:



ReportError (char * errorcontext, int errorcode)
{
  <bb 2> [100.00%]:
  __printf_chk (1, "ERROR CONDITION\nContext: %s\n", errorcontext_2(D));
  __printf_chk (1, "Code: %d", errorcode_3(D));
  return;

}



;; Function ErrorExit (ErrorExit, funcdef_no=64, decl_uid=3606, cgraph_uid=64, symbol_order=64) (executed once)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { }

Value ranges after VRP:



ErrorExit ()
{
  <bb 2> [100.00%]:
  exit (1);

}



;; Function StartStopwatch (StartStopwatch, funcdef_no=65, decl_uid=3628, cgraph_uid=65, symbol_order=65)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

_1: VARYING
_4: [0, +INF]


StartStopwatch ()
{
  long int _1;
  long unsigned int _4;

  <bb 2> [100.00%]:
  _1 = clock ();
  _4 = (long unsigned int) _1;
  return _4;

}



;; Function StopStopwatch (StopStopwatch, funcdef_no=66, decl_uid=3630, cgraph_uid=66, symbol_order=66)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

_1: VARYING
_2: [0, +INF]
startticks_5(D): VARYING
_6: [0, +INF]


StopStopwatch (long unsigned int startticks)
{
  long int _1;
  long unsigned int _2;
  long unsigned int _6;

  <bb 2> [100.00%]:
  _1 = clock ();
  _2 = (long unsigned int) _1;
  _6 = _2 - startticks_5(D);
  return _6;

}



;; Function TicksToSecs (TicksToSecs, funcdef_no=67, decl_uid=3632, cgraph_uid=67, symbol_order=67)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

tickamount_1(D): VARYING
_2: [0, 18446744073709]


TicksToSecs (long unsigned int tickamount)
{
  long unsigned int _2;

  <bb 2> [100.00%]:
  _2 = tickamount_1(D) / 1000000;
  return _2;

}



;; Function TicksToFracSecs (TicksToFracSecs, funcdef_no=68, decl_uid=3634, cgraph_uid=68, symbol_order=68)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

_1: VARYING
_3: VARYING


TicksToFracSecs (long unsigned int tickamount)
{
  double _1;
  double _3;

  <bb 2> [100.00%]:
  _1 = (double) tickamount_2(D);
  _3 = _1 / 1.0e+6;
  return _3;

}


