
;; Function DivideInternalFPF (DivideInternalFPF, funcdef_no=51, decl_uid=2827, cgraph_uid=51, symbol_order=51)

Created preheader block for loop 25
Created preheader block for loop 21
;; 27 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 100 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 99 85 86 87 88 89 90 91 92 93 94 95 96 97 98
;;
;; Loop 25
;;  header 88, latch 87
;;  depth 1, outer 0
;;  nodes: 88 87 95 86 93 94 91 92 89 90
;;
;; Loop 23
;;  header 77, latch 76
;;  depth 1, outer 0
;;  nodes: 77 76
;;
;; Loop 6
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;;
;; Loop 9
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11
;;
;; Loop 13
;;  header 21, latch 20
;;  depth 1, outer 0
;;  nodes: 21 20
;;
;; Loop 2
;;  header 59, latch 58
;;  depth 1, outer 0
;;  nodes: 59 58 56 57 54 55 52 53 49 51 40 43 46 45 44 42 41 39 38 36 37 34 35 32 33 66 31 64 65 62 63 60 61 50 47 48
;;
;; Loop 16
;;  header 27, latch 26
;;  depth 1, outer 0
;;  nodes: 27 26
;;
;; Loop 21
;;  header 72, latch 71
;;  depth 1, outer 0
;;  nodes: 72 71 69 67
;; 2 succs { 74 3 4 9 17 10 18 15 16 100 }
;; 100 succs { 72 }
;; 3 succs { 74 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 8 9 }
;; 8 succs { 74 }
;; 9 succs { 74 }
;; 10 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 11 13 }
;; 13 succs { 14 15 }
;; 14 succs { 74 }
;; 15 succs { 74 }
;; 16 succs { 74 }
;; 17 succs { 74 }
;; 18 succs { 19 25 }
;; 19 succs { 21 }
;; 20 succs { 21 }
;; 21 succs { 20 22 }
;; 22 succs { 23 24 }
;; 23 succs { 74 }
;; 24 succs { 74 }
;; 25 succs { 27 }
;; 26 succs { 27 }
;; 27 succs { 26 28 }
;; 28 succs { 29 30 }
;; 29 succs { 74 }
;; 30 succs { 59 }
;; 31 succs { 32 }
;; 32 succs { 33 34 }
;; 33 succs { 34 }
;; 34 succs { 35 36 }
;; 35 succs { 36 }
;; 36 succs { 37 38 }
;; 37 succs { 38 }
;; 38 succs { 39 50 }
;; 39 succs { 40 41 }
;; 40 succs { 52 }
;; 41 succs { 50 42 }
;; 42 succs { 43 44 }
;; 43 succs { 52 }
;; 44 succs { 50 45 }
;; 45 succs { 46 47 }
;; 46 succs { 52 }
;; 47 succs { 50 48 }
;; 48 succs { 49 50 }
;; 49 succs { 52 }
;; 50 succs { 51 }
;; 51 succs { 52 }
;; 52 succs { 53 54 }
;; 53 succs { 54 }
;; 54 succs { 55 56 }
;; 55 succs { 56 }
;; 56 succs { 57 58 }
;; 57 succs { 58 }
;; 58 succs { 59 }
;; 59 succs { 60 74 }
;; 60 succs { 61 62 }
;; 61 succs { 62 }
;; 62 succs { 63 64 }
;; 63 succs { 64 }
;; 64 succs { 65 66 }
;; 65 succs { 66 }
;; 66 succs { 31 32 }
;; 67 succs { 68 69 }
;; 68 succs { 74 }
;; 69 succs { 70 71 }
;; 70 succs { 74 }
;; 71 succs { 72 }
;; 72 succs { 67 73 }
;; 73 succs { 74 }
;; 74 succs { 75 98 }
;; 75 succs { 77 }
;; 76 succs { 77 }
;; 77 succs { 76 78 }
;; 78 succs { 79 80 }
;; 79 succs { 80 }
;; 80 succs { 81 96 }
;; 81 succs { 82 83 }
;; 82 succs { 96 }
;; 83 succs { 84 96 }
;; 84 succs { 85 99 }
;; 99 succs { 88 }
;; 85 succs { 96 }
;; 86 succs { 87 }
;; 87 succs { 88 }
;; 88 succs { 89 96 }
;; 89 succs { 90 91 }
;; 90 succs { 91 }
;; 91 succs { 92 93 }
;; 92 succs { 93 }
;; 93 succs { 94 95 }
;; 94 succs { 95 }
;; 95 succs { 86 87 }
;; 96 succs { 97 98 }
;; 97 succs { 98 }
;; 98 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

n_234 -> { n_256 }
n_518 -> { n_125 }
n_519 -> { n_112 }
n_520 -> { n_89 }
n_521 -> { n_76 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 101
Number of blocks to update: 15 ( 15%)


Adding assert for _39 from _39 + 32768

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

z_15 -> { z_52(D) }
x_34 -> { x_50(D) }
_46 -> { _39 }
z_105 -> { z_52(D) }
i_186 -> { i_237 }
accum_259 -> { accum_655 }
accum_272 -> { accum_668 }
accum_291 -> { accum_668 }
accum_328 -> { accum_681 }
accum_330 -> { accum_681 }
accum_331 -> { accum_681 }
accum_332 -> { accum_694 }
accum_334 -> { accum_694 }
accum_337 -> { accum_694 }
accum_354 -> { accum_668 }
_404 -> { _630 }
_408 -> { _634 }
_412 -> { _638 }
_416 -> { _238 }
_420 -> { _239 }
_424 -> { _249 }
i_428 -> { i_250 }
exponent_difference_432 -> { exponent_difference_263 }
_436 -> { _271 }
i_440 -> { i_293 }
z_444 -> { z_52(D) }
z_448 -> { z_52(D) }
z_452 -> { z_52(D) }
i_456 -> { i_70 }
i_460 -> { i_83 }
i_464 -> { i_106 }
i_468 -> { i_119 }
z_472 -> { z_52(D) }
z_476 -> { z_52(D) }
z_480 -> { z_52(D) }
z_484 -> { z_52(D) }
z_488 -> { z_52(D) }
z_492 -> { z_52(D) }
z_496 -> { z_52(D) }
z_500 -> { z_52(D) }
z_504 -> { z_52(D) }
z_508 -> { z_52(D) }
z_512 -> { z_52(D) }
z_557 -> { z_52(D) }
z_558 -> { z_52(D) }
x_573 -> { x_50(D) }
y_574 -> { y_51(D) }
y_580 -> { y_51(D) }
y_585 -> { y_51(D) }
z_596 -> { z_52(D) }
z_601 -> { z_52(D) }
z_612 -> { z_52(D) }
z_617 -> { z_52(D) }
z_628 -> { z_52(D) }
Incremental SSA update started at block: 2
Number of blocks in CFG: 107
Number of blocks to update: 80 ( 75%)



Value ranges after VRP:

_1: VARYING
_2: [0, 255]
_3: [0, 1275]
_4: VARYING
_5: [0, 255]
_6: [0, 1530]
_7: ~[0B, 0B]
_8: VARYING
_9: VARYING
_10: [0, +INF]
_11: ~[0B, 0B]
_12: VARYING
_13: VARYING
_14: [0, +INF]
z_15: ~[0B, 0B]  EQUIVALENCES: { z_52(D) z_512 } (2 elements)
_16: ~[0B, 0B]
_17: ~[0B, 0B]
_18: VARYING
.MEM_19: VARYING
_20: VARYING
_21: VARYING
_22: [0, +INF]
_23: VARYING
_24: [0, +INF]
_25: VARYING
_26: [0, +INF]
_27: [0, +INF]
_28: [0, +INF]
_29: VARYING
x_34: ~[0B, 0B]  EQUIVALENCES: { x_50(D) } (1 elements)
_35: VARYING
_36: [0, +INF]
_37: [0, +INF]
_38: VARYING
_39: VARYING
_40: VARYING
_46: [0, 32767]  EQUIVALENCES: { _39 } (1 elements)
.MEM_47: VARYING
.MEM_48: VARYING
x_50(D): VARYING
y_51(D): VARYING
z_52(D): VARYING
_54: VARYING
_55: VARYING
i_70: [0, 4]
_71: [0, 3]
_72: [0, 6]
_73: VARYING
_74: VARYING
_75: [0, 65535]
n_76: [0, 65535]
n_77: [0, 65535]  EQUIVALENCES: { } (0 elements)
i_78: [1, 4]
i_83: [0, 4]
_84: [0, 3]
_85: [0, 6]
_86: VARYING
_87: VARYING
_88: [0, 65535]
n_89: [0, 65535]
n_90: [0, 65535]  EQUIVALENCES: { } (0 elements)
i_91: [1, 4]
z_105: ~[0B, 0B]  EQUIVALENCES: { z_52(D) } (1 elements)
i_106: [0, 4]
_107: [0, 3]
_108: [0, 6]
_109: VARYING
_110: VARYING
_111: [0, 65535]
n_112: [0, 65535]
n_113: [0, 65535]  EQUIVALENCES: { } (0 elements)
i_114: [1, 4]
i_119: [0, 4]
_120: [0, 3]
_121: [0, 6]
_122: VARYING
_123: VARYING
_124: [0, 65535]
n_125: [0, 65535]
n_126: [0, 65535]  EQUIVALENCES: { } (0 elements)
i_127: [1, 4]
_128: ~[0B, 0B]
_170: VARYING
_171: [0, +INF]
.MEM_183: VARYING
i_186: [0, 3]  EQUIVALENCES: { i_237 } (1 elements)
accum_188: [0, +INF]
n_234: [0, 65535]
i_237: [0, 4]
_238: VARYING
_239: VARYING
_240: VARYING
i_241: [1, 4]
_242: VARYING
.MEM_244: VARYING
_245: VARYING
_246: VARYING
_247: VARYING
_248: [0, 65528]
_249: ~[0B, 0B]
i_250: [0, 4]
_251: [0, 3]
_252: [0, 6]
_253: VARYING
_254: VARYING
_255: [0, 65535]
n_256: [0, 65535]
n_257: [0, 65535]  EQUIVALENCES: { } (0 elements)
i_258: [1, 4]
accum_259: [_642, +INF]  EQUIVALENCES: { accum_655 } (1 elements)
_260: VARYING
_261: [-32768, 32767]
_262: [-1, 65534]
exponent_difference_263: [-1, 65534]
exponent_difference_264: [1, 1]
_267: [0, +INF]
_268: [1, 1]
_269: [0, +INF]
_270: VARYING
_271: [1, 1]
accum_272: [0, +INF]  EQUIVALENCES: { accum_668 } (1 elements)
_273: VARYING
_274: VARYING
_290: VARYING
accum_291: [1, +INF]  EQUIVALENCES: { accum_272 accum_668 } (2 elements)
_292: [1, +INF]
i_293: [0, 1]
i_294: [1, 1]
.MEM_295: VARYING
_297: VARYING
.MEM_299: VARYING
.MEM_300: VARYING
.MEM_301: VARYING
accum_328: [0, +INF]  EQUIVALENCES: { accum_681 } (1 elements)
.MEM_329: VARYING
accum_330: [0, +INF]  EQUIVALENCES: { accum_328 accum_681 } (2 elements)
accum_331: [1, +INF]  EQUIVALENCES: { accum_328 accum_681 } (2 elements)
accum_332: [0, +INF]  EQUIVALENCES: { accum_694 } (1 elements)
accum_334: [0, +INF]  EQUIVALENCES: { accum_332 accum_694 } (2 elements)
accum_337: [1, +INF]  EQUIVALENCES: { accum_332 accum_694 } (2 elements)
_342: VARYING
_343: VARYING
.MEM_351: VARYING
accum_354: [0, +INF]  EQUIVALENCES: { accum_272 accum_668 } (2 elements)
accum_355: VARYING
_356: [0, 1]
accum_357: [0, 32767]
_359: VARYING
_363: VARYING
_364: VARYING
_367: ~[0B, 0B]
accum_368: VARYING
_369: [0, 1]
accum_370: [0, 32767]
accum_371: [32768, +INF]
accum_372: [0, +INF]
_380: ~[0B, 0B]
accum_381: VARYING
_382: [0, 1]
accum_383: [0, 32767]
accum_384: [32768, +INF]
accum_385: [0, +INF]
_393: ~[0B, 0B]
accum_394: VARYING
_395: [0, 1]
accum_396: [0, 32767]
accum_397: [32768, +INF]
accum_398: [0, +INF]
_404: [0, +INF]  EQUIVALENCES: { _630 } (1 elements)
_408: [0, +INF]  EQUIVALENCES: { _634 } (1 elements)
_412: [0, +INF]  EQUIVALENCES: { _638 } (1 elements)
_416: [0, _239]  EQUIVALENCES: { _238 } (1 elements)
_420: [_416, +INF]  EQUIVALENCES: { _239 } (1 elements)
i_428: [0, 3]  EQUIVALENCES: { i_250 } (1 elements)
exponent_difference_432: [-1, -1]  EQUIVALENCES: { exponent_difference_263 } (1 elements)
_436: [1, 1]  EQUIVALENCES: { _271 } (1 elements)
i_440: [0, 0]  EQUIVALENCES: { i_293 } (1 elements)
z_448: ~[0B, 0B]  EQUIVALENCES: { z_52(D) z_105 } (2 elements)
z_452: ~[0B, 0B]  EQUIVALENCES: { z_52(D) z_105 z_448 } (3 elements)
i_456: [0, 3]  EQUIVALENCES: { i_70 } (1 elements)
i_460: [0, 3]  EQUIVALENCES: { i_83 } (1 elements)
i_464: [0, 3]  EQUIVALENCES: { i_106 } (1 elements)
i_468: [0, 3]  EQUIVALENCES: { i_119 } (1 elements)
z_472: ~[0B, 0B]  EQUIVALENCES: { z_52(D) } (1 elements)
z_476: ~[0B, 0B]  EQUIVALENCES: { z_52(D) } (1 elements)
z_480: ~[0B, 0B]  EQUIVALENCES: { z_52(D) } (1 elements)
z_484: ~[0B, 0B]  EQUIVALENCES: { z_52(D) z_512 } (2 elements)
z_488: ~[0B, 0B]  EQUIVALENCES: { z_52(D) z_512 } (2 elements)
z_492: ~[0B, 0B]  EQUIVALENCES: { z_52(D) z_512 } (2 elements)
z_496: ~[0B, 0B]  EQUIVALENCES: { z_52(D) z_512 } (2 elements)
z_500: ~[0B, 0B]  EQUIVALENCES: { z_52(D) } (1 elements)
z_504: ~[0B, 0B]  EQUIVALENCES: { z_52(D) } (1 elements)
z_508: ~[0B, 0B]  EQUIVALENCES: { z_52(D) } (1 elements)
z_512: ~[0B, 0B]  EQUIVALENCES: { z_52(D) } (1 elements)
n_518: [0, 65535]
n_519: [0, 65535]
n_520: [0, 65535]
n_521: [0, 65535]
accum_522: [1, +INF]
accum_523: [0, +INF]
_531: ~[0B, 0B]
accum_532: VARYING
_533: [0, 32768]
accum_534: [0, +INF]
accum_535: [1, +INF]
accum_536: [0, +INF]
_544: ~[0B, 0B]
accum_545: VARYING
_546: [0, 32768]
accum_547: [0, +INF]
accum_548: [1, +INF]
accum_549: [0, +INF]
z_557: ~[0B, 0B]  EQUIVALENCES: { z_52(D) } (1 elements)
z_558: ~[0B, 0B]  EQUIVALENCES: { z_52(D) } (1 elements)
_559: [0, 0]
accum_560: [0, 65534]
accum_561: [1, +INF]
accum_562: [0, +INF]
_568: VARYING
accum_569: VARYING
accum_570: [0, 65535]
_571: [0, 65535]
accum_572: ~[65536, 4294901760]
x_573: ~[0B, 0B]  EQUIVALENCES: { x_34 x_50(D) } (2 elements)
y_574: ~[0B, 0B]  EQUIVALENCES: { y_51(D) } (1 elements)
_575: [0, 65535]
_576: [0, +INF]
_577: [0, 1]
_578: [0, +INF]
y_580: ~[0B, 0B]  EQUIVALENCES: { y_51(D) y_574 } (2 elements)
_584: VARYING
y_585: ~[0B, 0B]  EQUIVALENCES: { y_51(D) y_574 } (2 elements)
accum_586: [0, 65535]
_587: [0, 65535]
accum_588: ~[65536, 4294901760]
_589: [0, 1]
accum_590: ~[65536, 4294901759]
_591: [0, 65535]
_592: [0, +INF]
_593: [0, 1]
_594: [0, +INF]
z_596: ~[0B, 0B]  EQUIVALENCES: { z_52(D) } (1 elements)
_600: VARYING
z_601: ~[0B, 0B]  EQUIVALENCES: { z_52(D) } (1 elements)
accum_602: [0, 65535]
_603: [0, 65535]
accum_604: ~[65536, 4294901760]
_605: [0, 1]
accum_606: ~[65536, 4294901759]
_607: [0, 65535]
_608: [0, +INF]
_609: [0, 1]
_610: [0, +INF]
z_612: ~[0B, 0B]  EQUIVALENCES: { z_52(D) } (1 elements)
_616: VARYING
z_617: ~[0B, 0B]  EQUIVALENCES: { z_52(D) } (1 elements)
accum_618: [0, 65535]
_619: [0, 65535]
accum_620: ~[65536, 4294901760]
_621: [0, 1]
accum_622: ~[65536, 4294901759]
_623: [0, 65535]
_624: [0, +INF]
_625: [0, 1]
_626: [0, +INF]
z_628: ~[0B, 0B]  EQUIVALENCES: { z_52(D) } (1 elements)
_630: VARYING
_631: ~[0B, 0B]
_634: VARYING
_635: ~[0B, 0B]
_638: VARYING
accum_639: VARYING
_642: VARYING
_643: [0, 32768]
_646: [0, +INF]
_647: [0, +INF]
_650: [0, 32768]
accum_651: VARYING
_652: [0, 32768]
accum_653: [0, +INF]
accum_654: [1, +INF]
accum_655: [0, +INF]
accum_663: [0, +INF]
accum_664: VARYING
_665: [0, 32768]
accum_666: [0, +INF]
accum_667: [1, +INF]
accum_668: [0, +INF]
.MEM_676: VARYING
accum_677: VARYING
_678: [0, 32768]
accum_679: [0, +INF]
accum_680: [1, +INF]
accum_681: [0, +INF]
carry_689: [1, 1]
accum_690: VARYING
_691: [0, 32768]
accum_692: [0, +INF]
accum_693: [1, +INF]
accum_694: [0, +INF]
.MEM_698: VARYING
carry_702: [0, 0]
accum_703: VARYING
_704: [0, 32768]
accum_705: [0, +INF]
_707: VARYING
_711: VARYING
_712: [0, +INF]
_715: ~[0B, 0B]
accum_716: VARYING
_717: [0, 32768]
accum_718: [0, +INF]
accum_719: [1, +INF]
accum_720: [0, +INF]
_728: ~[0B, 0B]
accum_729: VARYING
_730: [0, 32768]
accum_731: [0, +INF]
accum_732: [1, +INF]
accum_733: [0, +INF]
accum_741: VARYING
accum_742: VARYING
_743: [0, 32768]
accum_744: [0, +INF]
accum_745: [1, +INF]
accum_746: [0, +INF]
accum_753: VARYING
_758: [0, 32768]
accum_763: [0, +INF]
.MEM_768: VARYING
.MEM_771: VARYING
carry_772: [0, 0]
_773: ~[0B, 0B]
_774: VARYING
_775: [0, 65535]
_776: ~[0B, 0B]
accum_777: VARYING
_780: [0, 32768]
accum_781: [0, +INF]
.MEM_782: VARYING
_783: VARYING
_784: [0, 65535]
n_785: [0, 65535]
carry_786: [0, 0]
_789: ~[0B, 0B]
_790: ~[0B, 0B]
accum_791: VARYING
_792: VARYING
_793: [0, 65535]
n_794: [0, 65535]
_795: [0, 32768]
accum_798: [0, +INF]
.MEM_799: VARYING
carry_800: [0, 0]
_801: VARYING
_802: [0, 65535]
n_803: [0, 65535]
_804: ~[0B, 0B]


Simplified relational if (i_237 <= 3)
 into if (i_237 != 4)

Simplified relational if (i_119 <= 3)
 into if (i_119 != 4)

Simplified relational if (i_106 <= 3)
 into if (i_106 != 4)

Simplified relational if (i_83 <= 3)
 into if (i_83 != 4)

Simplified relational if (i_70 <= 3)
 into if (i_70 != 4)

Simplified relational if (i_250 <= 3)
 into if (i_250 != 4)

Simplified relational if (exponent_difference_263 < 0)
 into if (exponent_difference_263 == -1)

Simplified relational if (i_293 <= 0)
 into if (i_293 == 0)

Removing basic block 82
Removing basic block 81
Removing basic block 80
Removing basic block 85
Removing basic block 5
Removing basic block 11
Removing basic block 20
Removing basic block 26
Merging blocks 50 and 51
Removing basic block 67
Removing basic block 76
Removing basic block 84
Removing basic block 99
Removing basic block 100
Removing basic block 101
Removing basic block 102
Removing basic block 103
Removing basic block 104
Removing basic block 105
Removing basic block 106
Removing basic block 107
Merging blocks 110 and 89

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

n_43 -> { n_89 }
i_45 -> { i_83 }
n_233 -> { n_76 }
n_265 -> { n_89 }
i_296 -> { i_83 }
i_315 -> { i_293 }
i_316 -> { i_70 }
i_317 -> { i_237 }
.MEM_319 -> { .MEM_300 }
n_320 -> { n_125 }
i_321 -> { i_119 }
i_323 -> { i_250 }
n_324 -> { n_112 }
i_325 -> { i_106 }
n_327 -> { n_256 }
n_335 -> { n_76 }
i_336 -> { i_70 }
.MEM_338 -> { .MEM_295 }
_341 -> { _260 }
_344 -> { _261 }
_345 -> { _262 }
exponent_difference_348 -> { exponent_difference_263 }
.MEM_582 -> { .MEM_300 }
n_583 -> { n_256 }
i_597 -> { i_250 }
i_598 -> { i_237 }
n_599 -> { n_125 }
i_613 -> { i_119 }
n_614 -> { n_112 }
i_615 -> { i_106 }

SSA names to release after updating the SSA web

_260 _261 _262 exponent_difference_263 .MEM_295 
Incremental SSA update started at block: 2
Number of blocks in CFG: 101
Number of blocks to update: 30 ( 30%)


DivideInternalFPF (struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  int i;
  short unsigned int carry;
  short unsigned int * mantissa;
  short unsigned int accum;
  int i;
  int i;
  int i;
  int n;
  long int exponent_difference;
  int i;
  int i;
  short unsigned int accum;
  unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  int i;
  int n;
  int i;
  int i;
  int i;
  int n;
  int i;
  int n;
  int i;
  int i;
  int i;
  int n;
  int i;
  int i;
  int i;
  int n;
  int i;
  struct InternalFPF locx;
  short unsigned int extra_bits[4];
  short unsigned int carry;
  int j;
  int i;
  unsigned char _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  short unsigned int[4] * _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  short unsigned int[4] * _11;
  unsigned char _12;
  unsigned char _13;
  unsigned char _14;
  short unsigned int[4] * _16;
  short unsigned int[4] * _17;
  signed short _18;
  unsigned char _20;
  unsigned char _21;
  unsigned char _22;
  short int _23;
  unsigned short _24;
  short int _25;
  unsigned short _26;
  unsigned short _27;
  unsigned short _28;
  short int _29;
  short int _35;
  unsigned short _36;
  unsigned short _37;
  short int _38;
  short unsigned int _39;
  signed short _40;
  long unsigned int _54;
  long unsigned int _55;
  long unsigned int _71;
  long unsigned int _72;
  short unsigned int * _73;
  short unsigned int _74;
  int _75;
  long unsigned int _84;
  long unsigned int _85;
  short unsigned int * _86;
  short unsigned int _87;
  int _88;
  long unsigned int _107;
  long unsigned int _108;
  short unsigned int * _109;
  short unsigned int _110;
  int _111;
  long unsigned int _120;
  long unsigned int _121;
  short unsigned int * _122;
  short unsigned int _123;
  int _124;
  short unsigned int * _128;
  unsigned char _170;
  unsigned char _171;
  short unsigned int _238;
  short unsigned int _239;
  long unsigned int _240;
  long unsigned int _242;
  long unsigned int _245;
  unsigned char _246;
  short unsigned int _247;
  short unsigned int _248;
  short unsigned int[4] * _249;
  long unsigned int _251;
  long unsigned int _252;
  short unsigned int * _253;
  short unsigned int _254;
  int _255;
  unsigned short _267;
  unsigned short _269;
  short int _270;
  unsigned char _273;
  signed short _274;
  signed short _290;
  short unsigned int _292;
  signed short _297;
  short int _341;
  signed short _342;
  signed short _343;
  int _344;
  int _345;
  short unsigned int _356;
  signed short _359;
  signed short _363;
  signed short _364;
  short unsigned int * _367;
  short unsigned int _369;
  short unsigned int * _380;
  short unsigned int _382;
  short unsigned int * _393;
  short unsigned int _395;
  short unsigned int * _531;
  short unsigned int _533;
  short unsigned int * _544;
  short unsigned int _546;
  short unsigned int _568;
  unsigned int _571;
  unsigned int _575;
  short unsigned int _576;
  short unsigned int _577;
  short unsigned int _578;
  short unsigned int _584;
  unsigned int _587;
  unsigned int _589;
  unsigned int _591;
  short unsigned int _592;
  short unsigned int _593;
  short unsigned int _594;
  short unsigned int _600;
  unsigned int _603;
  unsigned int _605;
  unsigned int _607;
  short unsigned int _608;
  short unsigned int _609;
  short unsigned int _610;
  short unsigned int _616;
  unsigned int _619;
  unsigned int _621;
  unsigned int _623;
  short unsigned int _624;
  short unsigned int _625;
  short unsigned int _626;
  short unsigned int _630;
  short unsigned int[4] * _631;
  short unsigned int _634;
  short unsigned int * _635;
  short unsigned int _638;
  short unsigned int _642;
  short unsigned int _643;
  short unsigned int _646;
  short unsigned int _647;
  short unsigned int _650;
  short unsigned int _652;
  short unsigned int _665;
  short unsigned int _678;
  short unsigned int _691;
  short unsigned int _704;
  signed short _707;
  signed short _711;
  short unsigned int _712;
  short unsigned int[4] * _715;
  short unsigned int _717;
  short unsigned int * _728;
  short unsigned int _730;
  short unsigned int _743;
  short unsigned int _758;
  short unsigned int[4] * _773;
  short unsigned int _774;
  int _775;
  short unsigned int * _776;
  short unsigned int _780;
  short unsigned int _783;
  int _784;
  short unsigned int[4] * _789;
  short unsigned int * _790;
  short unsigned int _792;
  int _793;
  short unsigned int _795;
  short unsigned int _801;
  int _802;
  short unsigned int[4] * _804;

  <bb 2> [81.50%]:
  _1 = x_50(D)->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y_51(D)->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L54> [10.00%], case 0: <L56> [10.00%], case 1 ... 2: <L2> [10.00%], case 3: <L5> [10.00%], case 4: <L58> [10.00%], case 5: <L9> [10.00%], case 6 ... 7: <L59> [10.00%], case 8: <L5> [10.00%], case 9: <L58> [10.00%], case 10: <L9> [10.00%], case 11 ... 12: <L59> [10.00%], case 13: <L5> [10.00%], case 14: <L58> [10.00%], case 15 ... 17: <L12> [10.00%], case 18: <L56> [10.00%], case 19: <L58> [10.00%], case 20 ... 23: <L57> [10.00%], case 24: <L65> [10.00%]>

<L56> [8.15%]:
  z_52(D)->type = 4;
  z_52(D)->exp = 32767;
  z_52(D)->sign = 1;
  z_52(D)->mantissa[0] = 16384;
  z_52(D)->mantissa[1] = 0;
  z_52(D)->mantissa[2] = 0;
  z_52(D)->mantissa[3] = 0;
  goto <bb 73> (<L54>); [100.00%]

<L2> [8.15%]:
  _7 = &y_51(D)->mantissa;
  goto <bb 96>; [100.00%]

  <bb 5> [32.60%]:
  # i_316 = PHI <i_70(6), i_336(96)>
  # n_233 = PHI <n_76(6), n_335(96)>
  _71 = (long unsigned int) i_316;
  _72 = _71 * 2;
  _73 = _7 + _72;
  _74 = *_73;
  _75 = (int) _74;
  n_77 = _75 | n_233;
  i_78 = i_316 + 1;

  <bb 6> [32.60%]:
  # i_70 = PHI <i_78(5)>
  # n_76 = PHI <n_77(5)>
  if (i_70 != 4)
    goto <bb 5>; [75.00%]
  else
    goto <bb 7>; [25.00%]

  <bb 7> [8.15%]:
  # n_521 = PHI <n_76(6)>
  if (n_521 == 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 9> (<L5>); [50.00%]

  <bb 8> [4.08%]:
  z_52(D)->type = 4;
  z_52(D)->exp = 32767;
  z_52(D)->sign = 1;
  z_52(D)->mantissa[0] = 16384;
  z_52(D)->mantissa[1] = 0;
  z_52(D)->mantissa[2] = 0;
  z_52(D)->mantissa[3] = 0;
  goto <bb 73> (<L54>); [100.00%]

<L5> [12.23%]:
  _8 = x_50(D)->sign;
  _9 = y_51(D)->sign;
  _10 = _8 ^ _9;
  z_52(D)->type = 0;
  z_52(D)->sign = _10;
  z_52(D)->exp = -32767;
  z_52(D)->mantissa[0] = 0;
  z_52(D)->mantissa[1] = 0;
  z_52(D)->mantissa[2] = 0;
  z_52(D)->mantissa[3] = 0;
  goto <bb 73> (<L54>); [100.00%]

<L9> [8.15%]:
  _11 = &x_50(D)->mantissa;
  goto <bb 97>; [100.00%]

  <bb 11> [32.60%]:
  # i_45 = PHI <i_83(12), i_296(97)>
  # n_43 = PHI <n_89(12), n_265(97)>
  _84 = (long unsigned int) i_45;
  _85 = _84 * 2;
  _86 = _11 + _85;
  _87 = *_86;
  _88 = (int) _87;
  n_90 = _88 | n_43;
  i_91 = i_45 + 1;

  <bb 12> [32.60%]:
  # i_83 = PHI <i_91(11)>
  # n_89 = PHI <n_90(11)>
  if (i_83 != 4)
    goto <bb 11>; [75.00%]
  else
    goto <bb 13>; [25.00%]

  <bb 13> [8.15%]:
  # n_520 = PHI <n_89(12)>
  if (n_520 == 0)
    goto <bb 14>; [50.00%]
  else
    goto <bb 15> (<L12>); [50.00%]

  <bb 14> [4.08%]:
  z_52(D)->type = 4;
  z_52(D)->exp = 32767;
  z_52(D)->sign = 1;
  z_52(D)->mantissa[0] = 16384;
  z_52(D)->mantissa[1] = 0;
  z_52(D)->mantissa[2] = 0;
  z_52(D)->mantissa[3] = 0;
  goto <bb 73> (<L54>); [100.00%]

<L12> [12.23%]:
  z_52(D)->type = 3;
  z_52(D)->sign = 0;
  z_52(D)->exp = -32767;
  z_52(D)->mantissa[0] = 0;
  z_52(D)->mantissa[1] = 0;
  z_52(D)->mantissa[2] = 0;
  z_52(D)->mantissa[3] = 0;
  _12 = x_50(D)->sign;
  _13 = y_51(D)->sign;
  _14 = _12 ^ _13;
  z_52(D)->sign = _14;
  goto <bb 73> (<L54>); [100.00%]

<L57> [8.15%]:
  _55 = __builtin_object_size (x_50(D), 0);
  __builtin_memmove (x_50(D), z_52(D), 12);
  goto <bb 73> (<L54>); [100.00%]

<L58> [8.15%]:
  _54 = __builtin_object_size (y_51(D), 0);
  __builtin_memmove (y_51(D), z_52(D), 12);
  goto <bb 73> (<L54>); [100.00%]

<L59> [8.15%]:
  __builtin_memcpy (&locx, x_50(D), 12);
  _774 = MEM[(short unsigned int *)&locx + 4B];
  _775 = (int) _774;
  _783 = MEM[(short unsigned int *)&locx + 6B];
  _784 = (int) _783;
  _647 = _774 | _783;
  n_785 = (int) _647;
  _792 = MEM[(short unsigned int *)&locx + 8B];
  _793 = (int) _792;
  _646 = _647 | _792;
  n_794 = (int) _646;
  _801 = MEM[(short unsigned int *)&locx + 10B];
  _802 = (int) _801;
  _712 = _646 | _801;
  n_803 = (int) _712;
  if (_712 == 0)
    goto <bb 19>; [50.00%]
  else
    goto <bb 25>; [50.00%]

  <bb 19> [4.07%]:
  _16 = &y_51(D)->mantissa;
  goto <bb 98>; [100.00%]

  <bb 20> [16.30%]:
  # i_615 = PHI <i_106(21), i_325(98)>
  # n_614 = PHI <n_112(21), n_324(98)>
  _107 = (long unsigned int) i_615;
  _108 = _107 * 2;
  _109 = _16 + _108;
  _110 = *_109;
  _111 = (int) _110;
  n_113 = _111 | n_614;
  i_114 = i_615 + 1;

  <bb 21> [16.30%]:
  # i_106 = PHI <i_114(20)>
  # n_112 = PHI <n_113(20)>
  if (i_106 != 4)
    goto <bb 20>; [75.01%]
  else
    goto <bb 22>; [24.99%]

  <bb 22> [4.07%]:
  # n_519 = PHI <n_112(21)>
  if (n_519 == 0)
    goto <bb 23>; [50.00%]
  else
    goto <bb 24>; [50.00%]

  <bb 23> [2.04%]:
  z_52(D)->type = 4;
  z_52(D)->exp = 32767;
  z_52(D)->sign = 1;
  z_52(D)->mantissa[0] = 16384;
  z_52(D)->mantissa[1] = 0;
  z_52(D)->mantissa[2] = 0;
  z_52(D)->mantissa[3] = 0;
  goto <bb 73> (<L54>); [100.00%]

  <bb 24> [2.04%]:
  z_52(D)->type = 0;
  z_52(D)->sign = 0;
  z_52(D)->exp = -32767;
  z_52(D)->mantissa[0] = 0;
  z_52(D)->mantissa[1] = 0;
  z_52(D)->mantissa[2] = 0;
  z_52(D)->mantissa[3] = 0;
  goto <bb 73> (<L54>); [100.00%]

  <bb 25> [4.07%]:
  _17 = &y_51(D)->mantissa;
  goto <bb 99>; [100.00%]

  <bb 26> [16.30%]:
  # i_613 = PHI <i_119(27), i_321(99)>
  # n_599 = PHI <n_125(27), n_320(99)>
  _120 = (long unsigned int) i_613;
  _121 = _120 * 2;
  _122 = _17 + _121;
  _123 = *_122;
  _124 = (int) _123;
  n_126 = _124 | n_599;
  i_127 = i_613 + 1;

  <bb 27> [16.30%]:
  # i_119 = PHI <i_127(26)>
  # n_125 = PHI <n_126(26)>
  if (i_119 != 4)
    goto <bb 26>; [75.01%]
  else
    goto <bb 28>; [24.99%]

  <bb 28> [4.07%]:
  # n_518 = PHI <n_125(27)>
  if (n_518 == 0)
    goto <bb 29>; [50.00%]
  else
    goto <bb 30>; [50.00%]

  <bb 29> [2.04%]:
  z_52(D)->type = 3;
  z_52(D)->sign = 0;
  z_52(D)->exp = -32767;
  z_52(D)->mantissa[0] = 0;
  z_52(D)->mantissa[1] = 0;
  z_52(D)->mantissa[2] = 0;
  z_52(D)->mantissa[3] = 0;
  goto <bb 73> (<L54>); [100.00%]

  <bb 30> [2.04%]:
  z_52(D)->type = _1;
  _20 = x_50(D)->sign;
  _21 = y_51(D)->sign;
  _22 = _20 ^ _21;
  z_52(D)->sign = _22;
  _23 = x_50(D)->exp;
  _24 = (unsigned short) _23;
  _25 = y_51(D)->exp;
  _26 = (unsigned short) _25;
  _27 = _24 - _26;
  _28 = _27 + 128;
  _29 = (short int) _28;
  z_52(D)->exp = _29;
  z_52(D)->mantissa[0] = 0;
  extra_bits[0] = 0;
  z_52(D)->mantissa[1] = 0;
  extra_bits[1] = 0;
  z_52(D)->mantissa[2] = 0;
  extra_bits[2] = 0;
  z_52(D)->mantissa[3] = 0;
  extra_bits[3] = 0;
  goto <bb 58>; [100.00%]

  <bb 31> [5.77%]:
  accum_654 = accum_653 | 1;

  <bb 32> [11.55%]:
  # accum_655 = PHI <accum_653(65), accum_654(31)>
  MEM[(short unsigned int *)&extra_bits + 6B] = accum_655;
  accum_664 = MEM[(short unsigned int *)&extra_bits + 4B];
  _665 = accum_664 & 32768;
  accum_666 = accum_664 << 1;
  _364 = (signed short) accum_651;
  if (_364 < 0)
    goto <bb 33>; [50.00%]
  else
    goto <bb 34>; [50.00%]

  <bb 33> [5.77%]:
  accum_667 = accum_666 | 1;

  <bb 34> [11.55%]:
  # accum_668 = PHI <accum_666(32), accum_667(33)>
  MEM[(short unsigned int *)&extra_bits + 4B] = accum_668;
  accum_677 = MEM[(short unsigned int *)&extra_bits + 2B];
  _678 = accum_677 & 32768;
  accum_679 = accum_677 << 1;
  _363 = (signed short) accum_664;
  if (_363 < 0)
    goto <bb 35>; [50.00%]
  else
    goto <bb 36>; [50.00%]

  <bb 35> [5.77%]:
  accum_680 = accum_679 | 1;

  <bb 36> [11.55%]:
  # accum_681 = PHI <accum_679(34), accum_680(35)>
  MEM[(short unsigned int *)&extra_bits + 2B] = accum_681;
  accum_690 = MEM[(short unsigned int *)&extra_bits];
  _691 = accum_690 & 32768;
  accum_692 = accum_690 << 1;
  _359 = (signed short) accum_677;
  if (_359 < 0)
    goto <bb 37>; [50.00%]
  else
    goto <bb 38>; [50.00%]

  <bb 37> [5.77%]:
  accum_693 = accum_692 | 1;

  <bb 38> [11.55%]:
  # accum_694 = PHI <accum_692(36), accum_693(37)>
  MEM[(short unsigned int *)&extra_bits] = accum_694;
  _297 = (signed short) accum_690;
  if (_297 >= 0)
    goto <bb 39>; [50.00%]
  else
    goto <bb 50>; [50.00%]

  <bb 39> [5.77%]:
  _630 = y_51(D)->mantissa[0];
  if (_630 > accum_694)
    goto <bb 40>; [5.00%]
  else
    goto <bb 41>; [95.00%]

  <bb 40> [0.29%]:
  _773 = &z_52(D)->mantissa;
  _776 = &MEM[(void *)z_52(D) + 10B];
  accum_777 = MEM[(short unsigned int *)z_52(D) + 10B];
  _780 = accum_777 & 32768;
  accum_781 = accum_777 << 1;
  goto <bb 51>; [100.00%]

  <bb 41> [5.48%]:
  if (_630 < accum_694)
    goto <bb 50>; [5.00%]
  else
    goto <bb 42>; [95.00%]

  <bb 42> [5.34%]:
  _634 = y_51(D)->mantissa[1];
  if (_634 > accum_681)
    goto <bb 43>; [5.00%]
  else
    goto <bb 44>; [95.00%]

  <bb 43> [0.27%]:
  _789 = &z_52(D)->mantissa;
  _790 = &MEM[(void *)z_52(D) + 10B];
  accum_791 = MEM[(short unsigned int *)z_52(D) + 10B];
  _795 = accum_791 & 32768;
  accum_798 = accum_791 << 1;
  goto <bb 51>; [100.00%]

  <bb 44> [5.07%]:
  if (_634 < accum_681)
    goto <bb 50>; [5.00%]
  else
    goto <bb 45>; [95.00%]

  <bb 45> [4.90%]:
  _638 = y_51(D)->mantissa[2];
  if (_638 > accum_668)
    goto <bb 46>; [5.00%]
  else
    goto <bb 47>; [95.00%]

  <bb 46> [0.25%]:
  _804 = &z_52(D)->mantissa;
  _128 = &MEM[(void *)z_52(D) + 10B];
  accum_753 = MEM[(short unsigned int *)z_52(D) + 10B];
  _758 = accum_753 & 32768;
  accum_763 = accum_753 << 1;
  goto <bb 51>; [100.00%]

  <bb 47> [4.66%]:
  if (_638 < accum_668)
    goto <bb 50>; [5.00%]
  else
    goto <bb 48>; [95.00%]

  <bb 48> [4.53%]:
  _642 = y_51(D)->mantissa[3];
  if (_642 > accum_655)
    goto <bb 49>; [5.00%]
  else
    goto <bb 50>; [95.00%]

  <bb 49> [0.23%]:
  _715 = &z_52(D)->mantissa;
  _728 = &MEM[(void *)z_52(D) + 10B];
  accum_741 = MEM[(short unsigned int *)z_52(D) + 10B];
  _650 = accum_741 & 32768;
  accum_663 = accum_741 << 1;
  goto <bb 51>; [100.00%]

  <bb 50> [10.72%]:
  _568 = y_51(D)->mantissa[3];
  accum_570 = (unsigned int) accum_655;
  _571 = (unsigned int) _568;
  accum_572 = accum_570 - _571;
  _575 = accum_572 >> 16;
  _576 = (short unsigned int) _575;
  _577 = _576 & 1;
  _578 = accum_655 - _568;
  MEM[(short unsigned int *)&extra_bits][3] = _578;
  _584 = y_51(D)->mantissa[2];
  accum_586 = (unsigned int) accum_668;
  _587 = (unsigned int) _584;
  accum_588 = accum_586 - _587;
  _589 = (unsigned int) _577;
  accum_590 = accum_588 - _589;
  _591 = accum_590 >> 16;
  _592 = (short unsigned int) _591;
  _593 = _592 & 1;
  _594 = (short unsigned int) accum_590;
  MEM[(short unsigned int *)&extra_bits][2] = _594;
  _600 = y_51(D)->mantissa[1];
  accum_602 = (unsigned int) accum_681;
  _603 = (unsigned int) _600;
  accum_604 = accum_602 - _603;
  _605 = (unsigned int) _593;
  accum_606 = accum_604 - _605;
  _607 = accum_606 >> 16;
  _608 = (short unsigned int) _607;
  _609 = _608 & 1;
  _610 = (short unsigned int) accum_606;
  MEM[(short unsigned int *)&extra_bits][1] = _610;
  _616 = y_51(D)->mantissa[0];
  accum_618 = (unsigned int) accum_694;
  _619 = (unsigned int) _616;
  accum_620 = accum_618 - _619;
  _621 = (unsigned int) _609;
  accum_622 = accum_620 - _621;
  _623 = accum_622 >> 16;
  _624 = (short unsigned int) _623;
  _625 = _624 & 1;
  _626 = (short unsigned int) accum_622;
  MEM[(short unsigned int *)&extra_bits][0] = _626;
  _631 = &z_52(D)->mantissa;
  _635 = &MEM[(void *)z_52(D) + 10B];
  accum_639 = MEM[(short unsigned int *)z_52(D) + 10B];
  _643 = accum_639 & 32768;
  accum_188 = accum_639 << 1;
  accum_522 = accum_188 | 1;

  <bb 51> [11.55%]:
  # accum_523 = PHI <accum_663(49), accum_522(50), accum_781(40), accum_798(43), accum_763(46)>
  # accum_569 = PHI <accum_741(49), accum_639(50), accum_777(40), accum_791(43), accum_753(46)>
  MEM[(short unsigned int *)z_52(D) + 10B] = accum_523;
  _531 = &MEM[(void *)z_52(D) + 8B];
  accum_532 = MEM[(short unsigned int *)z_52(D) + 8B];
  _533 = accum_532 & 32768;
  accum_534 = accum_532 << 1;
  _274 = (signed short) accum_569;
  if (_274 < 0)
    goto <bb 52>; [50.00%]
  else
    goto <bb 53>; [50.00%]

  <bb 52> [5.77%]:
  accum_535 = accum_534 | 1;

  <bb 53> [11.55%]:
  # accum_536 = PHI <accum_534(51), accum_535(52)>
  MEM[(short unsigned int *)z_52(D) + 8B] = accum_536;
  _544 = &MEM[(void *)z_52(D) + 6B];
  accum_545 = MEM[(short unsigned int *)z_52(D) + 6B];
  _546 = accum_545 & 32768;
  accum_547 = accum_545 << 1;
  _343 = (signed short) accum_532;
  if (_343 < 0)
    goto <bb 54>; [50.00%]
  else
    goto <bb 55>; [50.00%]

  <bb 54> [5.77%]:
  accum_548 = accum_547 | 1;

  <bb 55> [11.55%]:
  # accum_549 = PHI <accum_547(53), accum_548(54)>
  MEM[(short unsigned int *)z_52(D) + 6B] = accum_549;
  accum_560 = _39 << 1;
  _342 = (signed short) accum_545;
  if (_342 < 0)
    goto <bb 56>; [50.00%]
  else
    goto <bb 57>; [50.00%]

  <bb 56> [5.77%]:
  accum_561 = accum_560 | 1;

  <bb 57> [11.55%]:
  # accum_562 = PHI <accum_560(55), accum_561(56)>
  MEM[(short unsigned int *)z_52(D) + 4B] = accum_562;
  _35 = z_52(D)->exp;
  _36 = (unsigned short) _35;
  _37 = _36 + 65535;
  _38 = (short int) _37;
  z_52(D)->exp = _38;

  <bb 58> [13.58%]:
  _39 = z_52(D)->mantissa[0];
  _40 = (signed short) _39;
  if (_40 >= 0)
    goto <bb 59>; [85.00%]
  else
    goto <bb 73> (<L54>); [15.00%]

  <bb 59> [11.55%]:
  accum_703 = MEM[(short unsigned int *)&locx + 10B];
  _704 = accum_703 & 32768;
  accum_705 = accum_703 << 1;
  MEM[(short unsigned int *)&locx + 10B] = accum_705;
  accum_716 = MEM[(short unsigned int *)&locx + 8B];
  _717 = accum_716 & 32768;
  accum_718 = accum_716 << 1;
  _711 = (signed short) accum_703;
  if (_711 < 0)
    goto <bb 60>; [50.00%]
  else
    goto <bb 61>; [50.00%]

  <bb 60> [5.77%]:
  accum_719 = accum_718 | 1;

  <bb 61> [11.55%]:
  # accum_720 = PHI <accum_718(59), accum_719(60)>
  MEM[(short unsigned int *)&locx + 8B] = accum_720;
  accum_729 = MEM[(short unsigned int *)&locx + 6B];
  _730 = accum_729 & 32768;
  accum_731 = accum_729 << 1;
  _707 = (signed short) accum_716;
  if (_707 < 0)
    goto <bb 62>; [50.00%]
  else
    goto <bb 63>; [50.00%]

  <bb 62> [5.77%]:
  accum_732 = accum_731 | 1;

  <bb 63> [11.55%]:
  # accum_733 = PHI <accum_731(61), accum_732(62)>
  MEM[(short unsigned int *)&locx + 6B] = accum_733;
  accum_742 = MEM[(short unsigned int *)&locx + 4B];
  _743 = accum_742 & 32768;
  accum_744 = accum_742 << 1;
  _18 = (signed short) accum_729;
  if (_18 < 0)
    goto <bb 64>; [50.00%]
  else
    goto <bb 65>; [50.00%]

  <bb 64> [5.77%]:
  accum_745 = accum_744 | 1;

  <bb 65> [11.55%]:
  # accum_746 = PHI <accum_744(63), accum_745(64)>
  MEM[(short unsigned int *)&locx + 4B] = accum_746;
  accum_651 = MEM[(short unsigned int *)&extra_bits + 6B];
  _652 = accum_651 & 32768;
  accum_653 = accum_651 << 1;
  _290 = (signed short) accum_742;
  if (_290 < 0)
    goto <bb 31>; [50.00%]
  else
    goto <bb 32>; [50.00%]

  <bb 66> [23.45%]:
  # i_598 = PHI <i_237(71), i_317(100)>
  _238 = x_50(D)->mantissa[i_598];
  _239 = y_51(D)->mantissa[i_598];
  if (_238 > _239)
    goto <bb 67>; [5.00%]
  else
    goto <bb 68>; [95.00%]

  <bb 67> [1.17%]:
  _240 = __builtin_object_size (x_50(D), 0);
  __builtin_memmove (x_50(D), z_52(D), 12);
  goto <bb 73> (<L54>); [100.00%]

  <bb 68> [22.28%]:
  if (_238 < _239)
    goto <bb 69>; [5.00%]
  else
    goto <bb 70>; [95.00%]

  <bb 69> [1.11%]:
  _245 = __builtin_object_size (y_51(D), 0);
  __builtin_memmove (y_51(D), z_52(D), 12);
  goto <bb 73> (<L54>); [100.00%]

  <bb 70> [21.17%]:
  i_241 = i_598 + 1;

  # i_237 = PHI <i_241(70)>
<L61> [21.17%]:
  if (i_237 != 4)
    goto <bb 66>; [72.30%]
  else
    goto <bb 72>; [27.70%]

  <bb 72> [5.86%]:
  _242 = __builtin_object_size (x_50(D), 0);
  __builtin_memmove (x_50(D), z_52(D), 12);

<L54> [81.50%]:
  _170 = z_52(D)->type;
  _171 = _170 + 255;
  if (_171 <= 1)
    goto <bb 74>; [24.54%]
  else
    goto <bb 92>; [75.46%]

  <bb 74> [20.00%]:
  _249 = &z_52(D)->mantissa;
  goto <bb 95>; [100.00%]

  <bb 75> [80.00%]:
  # i_597 = PHI <i_250(76), i_323(95)>
  # n_583 = PHI <n_256(76), n_327(95)>
  _251 = (long unsigned int) i_597;
  _252 = _251 * 2;
  _253 = _249 + _252;
  _254 = *_253;
  _255 = (int) _254;
  n_257 = _255 | n_583;
  i_258 = i_597 + 1;

  <bb 76> [80.00%]:
  # i_250 = PHI <i_258(75)>
  # n_256 = PHI <n_257(75)>
  if (i_250 != 4)
    goto <bb 75>; [75.00%]
  else
    goto <bb 77>; [25.00%]

  <bb 77> [20.00%]:
  # n_234 = PHI <n_256(76)>
  if (n_234 == 0)
    goto <bb 78>; [33.00%]
  else
    goto <bb 93>; [67.00%]

  <bb 78> [6.60%]:
  __builtin_puts (&"Error:  zero significand in denormalize"[0]);
  goto <bb 93>; [100.00%]

  <bb 79> [2.62%]:
  _267 = (unsigned short) _341;
  _269 = _267 + 1;
  _270 = (short int) _269;
  z_52(D)->exp = _270;
  _273 = z_52(D)->type;
  if (_273 != 0)
    goto <bb 94>; [54.00%]
  else
    goto <bb 90>; [46.00%]

  <bb 80> [2.01%]:
  _292 = accum_398 | 1;
  MEM[(short unsigned int *)z_52(D) + 10B] = _292;

  <bb 81> [4.02%]:

  <bb 82> [4.01%]:
  # i_293 = PHI <1(81)>
  if (i_293 == 0)
    goto <bb 83>; [82.34%]
  else
    goto <bb 90>; [17.66%]

  <bb 83> [4.02%]:
  accum_355 = MEM[(short unsigned int *)z_52(D) + 4B];
  _356 = accum_355 & 1;
  accum_357 = accum_355 >> 1;
  MEM[(short unsigned int *)z_52(D) + 4B] = accum_357;
  _367 = &MEM[(void *)z_52(D) + 6B];
  accum_368 = MEM[(short unsigned int *)z_52(D) + 6B];
  _369 = accum_368 & 1;
  accum_370 = accum_368 >> 1;
  if (_356 != 0)
    goto <bb 84>; [50.00%]
  else
    goto <bb 85>; [50.00%]

  <bb 84> [2.01%]:
  accum_371 = accum_370 | 32768;

  <bb 85> [4.02%]:
  # accum_372 = PHI <accum_370(83), accum_371(84)>
  MEM[(short unsigned int *)z_52(D) + 6B] = accum_372;
  _380 = &MEM[(void *)z_52(D) + 8B];
  accum_381 = MEM[(short unsigned int *)z_52(D) + 8B];
  _382 = accum_381 & 1;
  accum_383 = accum_381 >> 1;
  if (_369 != 0)
    goto <bb 86>; [50.00%]
  else
    goto <bb 87>; [50.00%]

  <bb 86> [2.01%]:
  accum_384 = accum_383 | 32768;

  <bb 87> [4.02%]:
  # accum_385 = PHI <accum_383(85), accum_384(86)>
  MEM[(short unsigned int *)z_52(D) + 8B] = accum_385;
  _393 = &MEM[(void *)z_52(D) + 10B];
  accum_394 = MEM[(short unsigned int *)z_52(D) + 10B];
  _395 = accum_394 & 1;
  accum_396 = accum_394 >> 1;
  if (_382 != 0)
    goto <bb 88>; [50.00%]
  else
    goto <bb 89>; [50.00%]

  <bb 88> [2.01%]:
  accum_397 = accum_396 | 32768;

  <bb 89> [4.02%]:
  # accum_398 = PHI <accum_396(87), accum_397(88)>
  MEM[(short unsigned int *)z_52(D) + 10B] = accum_398;
  if (_395 != 0)
    goto <bb 80>; [50.00%]
  else
    goto <bb 81>; [50.00%]

  <bb 90> [20.00%]:
  _246 = z_52(D)->type;
  if (_246 != 0)
    goto <bb 91>; [54.00%]
  else
    goto <bb 92>; [46.00%]

  <bb 91> [10.80%]:
  _247 = z_52(D)->mantissa[3];
  _248 = _247 & 65528;
  z_52(D)->mantissa[3] = _248;

  <bb 92> [81.50%]:
  extra_bits ={v} {CLOBBER};
  locx ={v} {CLOBBER};
  return;

  <bb 93> [20.00%]:
  _341 = z_52(D)->exp;
  _344 = (int) _341;
  _345 = _344 + 32767;
  exponent_difference_348 = (long int) _345;
  if (exponent_difference_348 == -1)
    goto <bb 79>; [13.12%]
  else
    goto <bb 90>; [86.88%]

  <bb 94> [0.71%]:
  # i_315 = PHI <0(79)>
  goto <bb 83>; [100.00%]

  <bb 95> [20.00%]:
  # i_323 = PHI <0(74)>
  # n_327 = PHI <0(74)>
  goto <bb 75>; [100.00%]

  <bb 96> [8.15%]:
  # i_336 = PHI <0(4)>
  # n_335 = PHI <0(4)>
  goto <bb 5>; [100.00%]

  <bb 97> [8.15%]:
  # i_296 = PHI <0(10)>
  # n_265 = PHI <0(10)>
  goto <bb 11>; [100.00%]

  <bb 98> [4.07%]:
  # i_325 = PHI <0(19)>
  # n_324 = PHI <0(19)>
  goto <bb 20>; [100.00%]

  <bb 99> [4.07%]:
  # i_321 = PHI <0(25)>
  # n_320 = PHI <0(25)>
  goto <bb 26>; [100.00%]

  # i_317 = PHI <0(2)>
<L65> [8.15%]:
  goto <bb 66>; [100.00%]

}



;; Function AddSubInternalFPF (AddSubInternalFPF, funcdef_no=49, decl_uid=2819, cgraph_uid=49, symbol_order=49)

;; 21 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 116 3 4 5 6 7 8 9 10 11 12 13 14 15 16 114 17 18 19 20 21 22 23 24 25 26 27 28 29 30 115 31 32 33 34 35 36 37 38 39 40 41 42 43 113 112 44 45 46 47 48 49 50 51 52 53 54 55 56 65 57 58 59 60 61 62 63 111 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 110 96 97 98 99 100 101 102 103 104 105 106 107 108 109
;;
;; Loop 19
;;  header 99, latch 98
;;  depth 1, outer 0
;;  nodes: 99 98 106 97 104 105 102 103 100 101
;;
;; Loop 17
;;  header 88, latch 87
;;  depth 1, outer 0
;;  nodes: 88 87
;;
;; Loop 13
;;  header 111, latch 63
;;  depth 1, outer 0
;;  nodes: 111 63 61 62 59 60 57 58
;;
;; Loop 4
;;  header 52, latch 51
;;  depth 1, outer 0
;;  nodes: 52 51
;;
;; Loop 3
;;  header 49, latch 48
;;  depth 1, outer 0
;;  nodes: 49 48
;;
;; Loop 2
;;  header 45, latch 44
;;  depth 1, outer 0
;;  nodes: 45 44
;;
;; Loop 5
;;  header 73, latch 72
;;  depth 1, outer 0
;;  nodes: 73 72 70 71
;;
;; Loop 1
;;  header 67, latch 66
;;  depth 1, outer 0
;;  nodes: 67 66
;;
;; Loop 8
;;  header 20, latch 19
;;  depth 1, outer 0
;;  nodes: 20 19 27 18 25 26 23 24 21 22
;;
;; Loop 11
;;  header 34, latch 33
;;  depth 1, outer 0
;;  nodes: 34 33 41 32 39 40 37 38 35 36
;;
;; Loop 15
;;  header 83, latch 82
;;  depth 1, outer 0
;;  nodes: 83 82 80 78
;; 2 succs { 85 3 7 6 5 8 77 116 }
;; 116 succs { 83 }
;; 3 succs { 4 85 }
;; 4 succs { 85 }
;; 5 succs { 85 }
;; 6 succs { 85 }
;; 7 succs { 85 }
;; 8 succs { 9 14 }
;; 9 succs { 11 10 }
;; 10 succs { 11 12 }
;; 11 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 43 }
;; 14 succs { 15 29 }
;; 15 succs { 16 28 }
;; 16 succs { 17 114 }
;; 114 succs { 20 }
;; 17 succs { 28 }
;; 18 succs { 19 }
;; 19 succs { 20 }
;; 20 succs { 21 28 }
;; 21 succs { 22 23 }
;; 22 succs { 23 }
;; 23 succs { 24 25 }
;; 24 succs { 25 }
;; 25 succs { 26 27 }
;; 26 succs { 27 }
;; 27 succs { 18 19 }
;; 28 succs { 43 }
;; 29 succs { 30 42 }
;; 30 succs { 31 115 }
;; 115 succs { 34 }
;; 31 succs { 42 }
;; 32 succs { 33 }
;; 33 succs { 34 }
;; 34 succs { 35 42 }
;; 35 succs { 36 37 }
;; 36 succs { 37 }
;; 37 succs { 38 39 }
;; 38 succs { 39 }
;; 39 succs { 40 41 }
;; 40 succs { 41 }
;; 41 succs { 32 33 }
;; 42 succs { 43 }
;; 43 succs { 112 113 }
;; 113 succs { 67 }
;; 112 succs { 45 }
;; 44 succs { 45 }
;; 45 succs { 44 46 }
;; 46 succs { 47 50 }
;; 47 succs { 49 }
;; 48 succs { 49 }
;; 49 succs { 48 50 }
;; 50 succs { 52 }
;; 51 succs { 52 }
;; 52 succs { 51 53 }
;; 53 succs { 54 55 }
;; 54 succs { 85 }
;; 55 succs { 65 56 }
;; 56 succs { 65 85 }
;; 65 succs { 111 }
;; 57 succs { 58 59 }
;; 58 succs { 59 }
;; 59 succs { 60 61 }
;; 60 succs { 61 }
;; 61 succs { 62 63 }
;; 62 succs { 63 }
;; 63 succs { 111 }
;; 111 succs { 57 85 }
;; 66 succs { 67 }
;; 67 succs { 66 68 }
;; 68 succs { 69 75 }
;; 69 succs { 73 }
;; 70 succs { 71 72 }
;; 71 succs { 72 }
;; 72 succs { 73 }
;; 73 succs { 70 74 }
;; 74 succs { 85 }
;; 75 succs { 76 85 }
;; 76 succs { 85 }
;; 77 succs { 85 }
;; 78 succs { 79 80 }
;; 79 succs { 85 }
;; 80 succs { 81 82 }
;; 81 succs { 85 }
;; 82 succs { 83 }
;; 83 succs { 78 84 }
;; 84 succs { 85 }
;; 85 succs { 86 109 }
;; 86 succs { 88 }
;; 87 succs { 88 }
;; 88 succs { 87 89 }
;; 89 succs { 90 91 }
;; 90 succs { 91 }
;; 91 succs { 92 107 }
;; 92 succs { 93 94 }
;; 93 succs { 107 }
;; 94 succs { 95 107 }
;; 95 succs { 96 110 }
;; 110 succs { 99 }
;; 96 succs { 107 }
;; 97 succs { 98 }
;; 98 succs { 99 }
;; 99 succs { 100 107 }
;; 100 succs { 101 102 }
;; 101 succs { 102 }
;; 102 succs { 103 104 }
;; 103 succs { 104 }
;; 104 succs { 105 106 }
;; 105 succs { 106 }
;; 106 succs { 97 98 }
;; 107 succs { 108 109 }
;; 108 succs { 109 }
;; 109 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

n_195 -> { n_254 }
n_617 -> { n_118 }
borrow_621 -> { borrow_165 }
carry_625 -> { carry_167 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 117
Number of blocks to update: 12 ( 10%)


Adding assert for _233 from _233 + 32768

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_16 -> { _237 }
i_18 -> { i_235 }
_20 -> { _236 }
z_22 -> { z_60(D) }
z_25 -> { z_60(D) }
i_153 -> { i_248 }
_155 -> { _247 }
z_172 -> { z_60(D) }
z_190 -> { z_60(D) }
x_213 -> { x_58(D) }
exponent_difference_217 -> { exponent_difference_261 }
_460 -> { _269 }
i_461 -> { i_291 }
z_468 -> { z_60(D) }
z_470 -> { z_60(D) }
exponent_difference_471 -> { exponent_difference_62 }
exponent_difference_472 -> { exponent_difference_62 }
exponent_difference_474 -> { exponent_difference_62 }
exponent_difference_477 -> { exponent_difference_62 }
operation_478 -> { operation_65(D) }
i_479 -> { i_112 }
i_481 -> { i_130 }
_484 -> { _133 }
i_485 -> { i_192 }
i_486 -> { i_215 }
_488 -> { _233 }
z_494 -> { z_60(D) }
z_507 -> { z_60(D) }
z_520 -> { z_60(D) }
z_533 -> { z_60(D) }
y_541 -> { y_59(D) }
z_543 -> { z_60(D) }
z_544 -> { z_60(D) }
z_545 -> { z_60(D) }
z_547 -> { z_60(D) }
z_550 -> { z_60(D) }
z_551 -> { z_60(D) }
z_552 -> { z_60(D) }
z_554 -> { z_60(D) }
z_557 -> { z_60(D) }
z_558 -> { z_60(D) }
z_559 -> { z_60(D) }
z_561 -> { z_60(D) }
i_567 -> { i_47 }
i_580 -> { i_48 }
i_593 -> { i_49 }
x_606 -> { x_58(D) }
Incremental SSA update started at block: 2
Number of blocks in CFG: 120
Number of blocks to update: 78 ( 65%)



Value ranges after VRP:

_1: VARYING
_2: [0, 255]
_3: [0, 1275]
_4: VARYING
_5: [0, 255]
_6: [0, 1530]
_7: VARYING
_8: VARYING
_9: [0, +INF]
_10: VARYING
_11: [0, +INF]
_12: VARYING
_13: [-32768, 32767]
_14: VARYING
_15: [-32768, 32767]
_16: [_20, +INF]  EQUIVALENCES: { _237 } (1 elements)
_17: VARYING
i_18: [0, 3]  EQUIVALENCES: { i_235 } (1 elements)
_19: VARYING
_20: [0, _237]  EQUIVALENCES: { _236 } (1 elements)
_21: [0, 65535]
z_22: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
_23: VARYING
_24: [0, +INF]
z_25: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
_26: VARYING
_27: VARYING
_28: [0, +INF]
_29: VARYING
_30: VARYING
_31: [0, +INF]
_32: VARYING
_33: VARYING
_34: VARYING
_35: VARYING
_36: VARYING
_37: VARYING
_38: VARYING
_39: [0, +INF]
_40: [0, +INF]
_41: VARYING
_42: ~[0B, 0B]
_43: VARYING
_44: [32768, +INF]
_45: VARYING
_46: VARYING
i_47: [-1, 3]
i_48: [-1, 3]
i_49: [-1, 3]
.MEM_50: VARYING
.MEM_51: VARYING
.MEM_52: VARYING
.MEM_53: VARYING
.MEM_54: VARYING
.MEM_55: VARYING
.MEM_56: VARYING
x_58(D): VARYING
y_59(D): VARYING
z_60(D): VARYING
exponent_difference_62: [-65535, 65535]
operation_65(D): [0, 1]
i_80: [-1, 2]
i_82: [-1, 2]
_83: VARYING
i_87: [-1, 2]
_92: VARYING
_93: VARYING
_94: VARYING
accum_95: [0, 65535]
_96: [0, 65535]
accum_97: ~[65536, 4294901760]
_98: [0, 1]
accum_99: ~[65536, 4294901759]  EQUIVALENCES: { } (0 elements)
_100: [0, 65535]
_101: [0, +INF]
_102: [0, 1]
_103: [0, +INF]
_104: [0, 65535]
accum_105: ~[1, 4294901760]
_106: [0, 1]
accum_107: ~[1, 4294901759]  EQUIVALENCES: { } (0 elements)
_108: [0, 65535]
_109: [0, +INF]
_110: [0, 1]
_111: [0, +INF]
i_112: [0, 4]
_113: [0, 3]
_114: [0, 6]
_115: VARYING
_116: VARYING
_117: [0, 65535]
n_118: [0, 65535]
n_119: [0, 65535]  EQUIVALENCES: { } (0 elements)
i_120: [1, 4]
accum_121: [0, 65535]
_122: [0, 65535]
accum_123: [0, 131070]
_124: [0, 1]
accum_125: [0, 131071]  EQUIVALENCES: { } (0 elements)
_126: [0, 1]
_127: [0, 1]
_128: [0, 1]
_129: [0, +INF]
i_130: [0, 4]
_131: [0, 3]
_132: [0, 6]
_133: VARYING
accum_134: VARYING
_135: [0, 1]
accum_136: [0, 32767]
accum_137: [32768, +INF]
accum_138: [0, +INF]
i_139: [1, 4]
_142: VARYING
_143: [0, +INF]
.MEM_144: VARYING
.MEM_146: VARYING
i_153: [0, 3]  EQUIVALENCES: { i_248 } (1 elements)
borrow_165: [0, 1]
borrow_166: [0, 1]
carry_167: [0, 1]
carry_168: [0, 1]
z_172: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
z_190: ~[0B, 0B]  EQUIVALENCES: { z_60(D) z_520 } (2 elements)
_191: [1, +INF]
i_192: [0, 63]
i_193: [1, 63]
n_195: [0, 65535]
_212: VARYING
x_213: ~[0B, 0B]  EQUIVALENCES: { x_58(D) x_606 } (2 elements)
_214: [1, +INF]
i_215: [0, 63]
i_216: [1, 64]
exponent_difference_217: [-1, -1]  EQUIVALENCES: { exponent_difference_261 } (1 elements)
_229: VARYING
_230: [0, +INF]
_231: [0, +INF]
_232: VARYING
_233: VARYING
_234: VARYING
i_235: [0, 4]
_236: VARYING
_237: VARYING
_238: VARYING
i_239: [1, 4]
_241: VARYING
.MEM_242: VARYING
_243: VARYING
_244: VARYING
_245: VARYING
_246: [0, 65528]
_247: ~[0B, 0B]
i_248: [0, 4]
_249: [0, 3]
_250: [0, 6]
_251: VARYING
_252: VARYING
_253: [0, 65535]
n_254: [0, 65535]
n_255: [0, 65535]  EQUIVALENCES: { } (0 elements)
i_256: [1, 4]
_258: VARYING
_259: [-32768, 32767]
_260: [-1, 65534]
exponent_difference_261: [-1, 65534]
exponent_difference_262: [1, 1]
_265: [0, +INF]
_266: [1, 1]
_267: [0, +INF]
_268: VARYING
_269: [1, 1]
_271: VARYING
_290: [1, +INF]
i_291: [0, 1]
i_292: [1, 1]
.MEM_295: VARYING
.MEM_296: VARYING
.MEM_297: VARYING
.MEM_300: VARYING
.MEM_301: VARYING
.MEM_302: VARYING
.MEM_304: VARYING
.MEM_305: VARYING
.MEM_309: VARYING
.MEM_310: VARYING
.MEM_311: VARYING
.MEM_344: VARYING
.MEM_366: VARYING
accum_370: VARYING
_371: [0, 1]
accum_372: [0, 32767]
_382: ~[0B, 0B]
accum_383: VARYING
_384: [0, 1]
accum_385: [0, 32767]
accum_386: [32768, +INF]
accum_387: [0, +INF]
_395: ~[0B, 0B]
accum_396: VARYING
_397: [0, 1]
accum_398: [0, 32767]
accum_399: [32768, +INF]
accum_400: [0, +INF]
_408: ~[0B, 0B]
accum_409: VARYING
_410: [0, 1]
accum_411: [0, 32767]
accum_412: [32768, +INF]
accum_413: [0, +INF]
_421: ~[0B, 0B]
accum_422: VARYING
_423: [0, 32768]
accum_424: [0, +INF]
_434: ~[0B, 0B]
accum_435: VARYING
_436: [0, 32768]
accum_437: [0, +INF]
accum_438: [1, +INF]
accum_439: [0, +INF]
_447: ~[0B, 0B]
accum_448: VARYING
_449: [0, 32768]
accum_450: [0, +INF]
accum_451: [1, +INF]
accum_452: [0, +INF]
_460: [1, 1]  EQUIVALENCES: { _269 } (1 elements)
i_461: [0, 0]  EQUIVALENCES: { i_291 } (1 elements)
_462: [0, 0]
accum_463: [0, 65534]
accum_464: [1, +INF]
accum_465: [0, +INF]
z_468: ~[0B, 0B]  EQUIVALENCES: { z_60(D) z_190 z_520 } (3 elements)
.MEM_469: VARYING
z_470: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
exponent_difference_471: [-65535, 65535]  EQUIVALENCES: { exponent_difference_62 } (1 elements)
exponent_difference_472: [1, 65535]  EQUIVALENCES: { exponent_difference_62 exponent_difference_471 } (2 elements)
exponent_difference_474: [-65535, 0]  EQUIVALENCES: { exponent_difference_62 exponent_difference_471 } (2 elements)
exponent_difference_477: [1, 63]  EQUIVALENCES: { exponent_difference_62 exponent_difference_471 exponent_difference_472 } (3 elements)
operation_478: ~[_28, _28]  EQUIVALENCES: { operation_65(D) } (1 elements)
i_479: [0, 3]  EQUIVALENCES: { i_112 } (1 elements)
i_481: [0, 3]  EQUIVALENCES: { i_130 } (1 elements)
_484: ~[0B, 0B]  EQUIVALENCES: { _133 } (1 elements)
i_485: [0, 62]  EQUIVALENCES: { i_192 } (1 elements)
i_486: [0, 63]  EQUIVALENCES: { i_215 } (1 elements)
_488: [0, 32767]  EQUIVALENCES: { _233 } (1 elements)
.MEM_491: VARYING
z_494: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
accum_495: VARYING
_496: [0, 1]
accum_497: [0, 32767]
z_507: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
accum_508: VARYING
_509: [0, 1]
accum_510: [0, 32767]
accum_511: [32768, +INF]
accum_512: [0, +INF]
z_520: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
accum_521: VARYING
_522: [0, 1]
accum_523: [0, 32767]
accum_524: [32768, +INF]
accum_525: [0, +INF]
accum_534: VARYING
_535: [0, 1]
accum_536: [0, 32767]
accum_537: [32768, +INF]
accum_538: [0, +INF]
y_541: ~[0B, 0B]  EQUIVALENCES: { y_59(D) } (1 elements)
.MEM_542: VARYING
z_543: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
z_544: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
z_545: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
z_547: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
z_550: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
z_551: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
z_552: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
z_554: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
z_557: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
z_558: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
z_559: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
z_561: ~[0B, 0B]  EQUIVALENCES: { z_60(D) } (1 elements)
.MEM_564: VARYING
i_567: [0, 3]  EQUIVALENCES: { i_47 } (1 elements)
accum_568: VARYING
_569: [0, 1]
accum_570: [0, 32767]
_576: VARYING
_577: VARYING
i_580: [0, 3]  EQUIVALENCES: { i_48 } (1 elements)
accum_581: VARYING
_582: [0, 1]
accum_583: [0, 32767]
accum_584: [32768, +INF]
accum_585: [0, +INF]
i_593: [0, 3]  EQUIVALENCES: { i_49 } (1 elements)
accum_594: VARYING
_595: [0, 1]
accum_596: [0, 32767]
accum_597: [32768, +INF]
accum_598: [0, +INF]
x_606: ~[0B, 0B]  EQUIVALENCES: { x_58(D) } (1 elements)
accum_607: VARYING
_608: [0, 1]
accum_609: [0, 32767]
accum_610: [32768, +INF]
accum_611: [0, +INF]
n_617: [0, 65535]
borrow_621: [0, 1]
carry_625: [0, 1]


Simplified relational if (i_235 <= 3)
 into if (i_235 != 4)

Simplified relational if (i_49 >= 0)
 into if (i_49 != -1)

Simplified relational if (i_130 <= 3)
 into if (i_130 != 4)

Simplified relational if (i_47 >= 0)
 into if (i_47 != -1)

Simplified relational if (i_48 >= 0)
 into if (i_48 != -1)

Simplified relational if (i_112 <= 3)
 into if (i_112 != 4)

Simplified relational if (i_248 <= 3)
 into if (i_248 != 4)

Simplified relational if (exponent_difference_261 < 0)
 into if (exponent_difference_261 == -1)

Simplified relational if (i_291 <= 0)
 into if (i_291 == 0)

Removing basic block 93
Removing basic block 92
Removing basic block 91
Removing basic block 96
Removing basic block 44
Removing basic block 48
Removing basic block 51
Removing basic block 66
Removing basic block 70
Removing basic block 78
Removing basic block 87
Removing basic block 95
Removing basic block 110
Removing basic block 112
Removing basic block 113
Removing basic block 114
Removing basic block 115
Removing basic block 116
Removing basic block 117
Removing basic block 118
Removing basic block 119
Removing basic block 120
Merging blocks 123 and 100
Merging blocks 137 and 21

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

borrow_68 -> { borrow_165 }
.MEM_164 -> { .MEM_52 }
.MEM_173 -> { .MEM_55 }
i_189 -> { i_47 }
.MEM_196 -> { .MEM_55 }
.MEM_257 -> { .MEM_305 }
_270 -> { _258 }
i_272 -> { i_235 }
borrow_288 -> { borrow_165 }
_289 -> { _260 }
.MEM_293 -> { .MEM_53 }
i_298 -> { i_49 }
i_307 -> { i_192 }
i_338 -> { i_130 }
.MEM_342 -> { .MEM_144 }
exponent_difference_343 -> { exponent_difference_261 }
i_345 -> { i_291 }
.MEM_346 -> { .MEM_310 }
i_347 -> { i_248 }
n_349 -> { n_254 }
.MEM_350 -> { .MEM_310 }
.MEM_351 -> { .MEM_296 }
i_352 -> { i_112 }
n_353 -> { n_118 }
i_356 -> { i_48 }
n_357 -> { n_254 }
i_358 -> { i_248 }
.MEM_359 -> { .MEM_53 }
borrow_360 -> { borrow_166 }
i_363 -> { i_47 }
_369 -> { _259 }
carry_374 -> { carry_168 }
carry_378 -> { carry_167 }
borrow_379 -> { borrow_166 }
.MEM_475 -> { .MEM_144 }
i_476 -> { i_130 }
n_482 -> { n_118 }
i_483 -> { i_112 }
.MEM_499 -> { .MEM_52 }
i_503 -> { i_49 }
i_504 -> { i_48 }
i_548 -> { i_235 }
.MEM_549 -> { .MEM_296 }
i_555 -> { i_192 }
carry_556 -> { carry_167 }
carry_572 -> { carry_168 }

SSA names to release after updating the SSA web

_258 _259 _260 exponent_difference_261 .MEM_305 
Incremental SSA update started at block: 2
Number of blocks in CFG: 115
Number of blocks to update: 45 ( 39%)


AddSubInternalFPF (unsigned char operation, struct InternalFPF * x, struct InternalFPF * y, struct InternalFPF * z)
{
  int i;
  short unsigned int carry;
  short unsigned int * mantissa;
  short unsigned int accum;
  int i;
  int i;
  int i;
  int n;
  long int exponent_difference;
  int i;
  short unsigned int carry;
  short unsigned int accum;
  int i;
  int i;
  short unsigned int carry;
  short unsigned int * mantissa;
  short unsigned int accum;
  int i;
  int i;
  short unsigned int carry;
  short unsigned int * mantissa;
  short unsigned int accum;
  int i;
  int i;
  int i;
  short unsigned int accum;
  unsigned int accum;
  int i;
  int n;
  unsigned int accum;
  unsigned int accum;
  struct InternalFPF locy;
  struct InternalFPF locx;
  int i;
  short unsigned int carry;
  short unsigned int borrow;
  int exponent_difference;
  unsigned char _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  short int _12;
  int _13;
  short int _14;
  int _15;
  unsigned char _17;
  unsigned char _19;
  int _21;
  unsigned char _23;
  unsigned char _24;
  unsigned char _26;
  unsigned char _27;
  unsigned char _28;
  short unsigned int _29;
  short unsigned int _30;
  unsigned char _31;
  short unsigned int _32;
  short unsigned int[4] * _33;
  unsigned char _34;
  unsigned char _35;
  short unsigned int _36;
  short unsigned int _37;
  short int _38;
  unsigned short _39;
  unsigned short _40;
  short int _41;
  short unsigned int[4] * _42;
  short unsigned int _43;
  short unsigned int _44;
  short unsigned int _45;
  signed short _46;
  long unsigned int _83;
  long unsigned int _92;
  long unsigned int _93;
  long unsigned int _94;
  unsigned int _96;
  unsigned int _98;
  unsigned int _100;
  short unsigned int _101;
  short unsigned int _102;
  short unsigned int _103;
  unsigned int _104;
  unsigned int _106;
  unsigned int _108;
  short unsigned int _109;
  short unsigned int _110;
  short unsigned int _111;
  long unsigned int _113;
  long unsigned int _114;
  short unsigned int * _115;
  short unsigned int _116;
  int _117;
  unsigned int _122;
  unsigned int _124;
  unsigned int _126;
  short unsigned int _127;
  short unsigned int _128;
  short unsigned int _129;
  long unsigned int _131;
  long unsigned int _132;
  short unsigned int * _133;
  short unsigned int _135;
  unsigned char _142;
  unsigned char _143;
  short unsigned int _191;
  signed short _212;
  short unsigned int _214;
  short int _229;
  unsigned short _230;
  unsigned short _231;
  short int _232;
  short unsigned int _233;
  signed short _234;
  short unsigned int _236;
  short unsigned int _237;
  long unsigned int _238;
  long unsigned int _241;
  long unsigned int _243;
  unsigned char _244;
  short unsigned int _245;
  short unsigned int _246;
  short unsigned int[4] * _247;
  long unsigned int _249;
  long unsigned int _250;
  short unsigned int * _251;
  short unsigned int _252;
  int _253;
  unsigned short _265;
  unsigned short _267;
  short int _268;
  short int _270;
  unsigned char _271;
  int _289;
  short unsigned int _290;
  int _369;
  short unsigned int _371;
  short unsigned int * _382;
  short unsigned int _384;
  short unsigned int * _395;
  short unsigned int _397;
  short unsigned int * _408;
  short unsigned int _410;
  short unsigned int * _421;
  short unsigned int _423;
  short unsigned int * _434;
  short unsigned int _436;
  short unsigned int * _447;
  short unsigned int _449;
  short unsigned int _496;
  short unsigned int _509;
  short unsigned int _522;
  short unsigned int _535;
  short unsigned int _569;
  signed short _576;
  signed short _577;
  short unsigned int _582;
  short unsigned int _595;
  short unsigned int _608;

  <bb 2> [81.50%]:
  _1 = x_58(D)->type;
  _2 = (int) _1;
  _3 = _2 * 5;
  _4 = y_59(D)->type;
  _5 = (int) _4;
  _6 = _3 + _5;
  switch (_6) <default: <L63> [12.50%], case 0: <L67> [12.50%], case 1 ... 3: <L70> [12.50%], case 4: <L69> [12.50%], case 5: <L68> [12.50%], case 6 ... 7: <L71> [12.50%], case 8: <L70> [12.50%], case 9: <L69> [12.50%], case 10: <L68> [12.50%], case 11 ... 12: <L71> [12.50%], case 13: <L70> [12.50%], case 14: <L69> [12.50%], case 15 ... 17: <L68> [12.50%], case 18: <L72> [12.50%], case 19: <L69> [12.50%], case 20 ... 23: <L68> [12.50%], case 24: <L77> [12.50%]>

<L67> [10.19%]:
  _83 = __builtin_object_size (x_58(D), 0);
  __builtin_memmove (x_58(D), z_60(D), 12);
  _7 = x_58(D)->sign;
  _8 = y_59(D)->sign;
  _9 = _7 ^ _8;
  if (_9 != operation_65(D))
    goto <bb 4>; [66.00%]
  else
    goto <bb 85> (<L63>); [34.00%]

  <bb 4> [6.72%]:
  z_60(D)->sign = 0;
  goto <bb 85> (<L63>); [100.00%]

<L68> [10.19%]:
  _92 = __builtin_object_size (x_58(D), 0);
  __builtin_memmove (x_58(D), z_60(D), 12);
  goto <bb 85> (<L63>); [100.00%]

<L69> [10.19%]:
  _93 = __builtin_object_size (y_59(D), 0);
  __builtin_memmove (y_59(D), z_60(D), 12);
  goto <bb 85> (<L63>); [100.00%]

<L70> [10.19%]:
  _94 = __builtin_object_size (y_59(D), 0);
  __builtin_memmove (y_59(D), z_60(D), 12);
  _10 = z_60(D)->sign;
  _11 = _10 ^ operation_65(D);
  z_60(D)->sign = _11;
  goto <bb 85> (<L63>); [100.00%]

<L71> [10.19%]:
  __builtin_memcpy (&locx, x_58(D), 12);
  __builtin_memcpy (&locy, y_59(D), 12);
  _12 = locx.exp;
  _13 = (int) _12;
  _14 = locy.exp;
  _15 = (int) _14;
  exponent_difference_62 = _13 - _15;
  if (exponent_difference_62 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 9> [5.09%]:
  if (_1 == 1)
    goto <bb 11>; [34.00%]
  else
    goto <bb 10>; [66.00%]

  <bb 10> [3.36%]:
  if (_4 == 1)
    goto <bb 11>; [34.00%]
  else
    goto <bb 12>; [66.00%]

  <bb 11> [2.87%]:
  z_60(D)->type = 1;
  goto <bb 13>; [100.00%]

  <bb 12> [2.22%]:
  z_60(D)->type = 2;

  <bb 13> [5.09%]:
  _17 = locx.sign;
  z_60(D)->sign = _17;
  z_60(D)->exp = _12;
  goto <bb 43>; [100.00%]

  <bb 14> [5.09%]:
  if (exponent_difference_62 > 0)
    goto <bb 15>; [64.00%]
  else
    goto <bb 29>; [36.00%]

  <bb 15> [3.26%]:
  if (_4 != 0)
    goto <bb 16>; [54.00%]
  else
    goto <bb 28>; [46.00%]

  <bb 16> [1.76%]:
  if (exponent_difference_62 > 63)
    goto <bb 17>; [50.00%]
  else
    goto <bb 113>; [50.00%]

  <bb 17> [0.88%]:
  MEM[(short unsigned int *)&locy + 4B] = 0;
  MEM[(short unsigned int *)&locy + 6B] = 0;
  MEM[(short unsigned int *)&locy + 8B] = 0;
  MEM[(short unsigned int *)&locy + 10B] = 1;
  goto <bb 28>; [100.00%]

  <bb 18> [2.49%]:
  _191 = accum_538 | 1;
  MEM[(short unsigned int *)&locy + 10B] = _191;

  <bb 19> [4.99%]:
  i_193 = i_307 + 1;

  <bb 20> [4.99%]:
  # i_192 = PHI <i_193(19)>
  if (exponent_difference_62 > i_192)
    goto <bb 21>; [82.35%]
  else
    goto <bb 28>; [17.65%]

  <bb 21> [4.99%]:
  # i_307 = PHI <i_192(20), i_555(113)>
  accum_495 = MEM[(short unsigned int *)&locy + 4B];
  _496 = accum_495 & 1;
  accum_497 = accum_495 >> 1;
  MEM[(short unsigned int *)&locy + 4B] = accum_497;
  accum_508 = MEM[(short unsigned int *)&locy + 6B];
  _509 = accum_508 & 1;
  accum_510 = accum_508 >> 1;
  if (_496 != 0)
    goto <bb 22>; [50.00%]
  else
    goto <bb 23>; [50.00%]

  <bb 22> [2.50%]:
  accum_511 = accum_510 | 32768;

  <bb 23> [4.99%]:
  # accum_512 = PHI <accum_510(21), accum_511(22)>
  MEM[(short unsigned int *)&locy + 6B] = accum_512;
  accum_521 = MEM[(short unsigned int *)&locy + 8B];
  _522 = accum_521 & 1;
  accum_523 = accum_521 >> 1;
  if (_509 != 0)
    goto <bb 24>; [50.00%]
  else
    goto <bb 25>; [50.00%]

  <bb 24> [2.50%]:
  accum_524 = accum_523 | 32768;

  <bb 25> [4.99%]:
  # accum_525 = PHI <accum_523(23), accum_524(24)>
  MEM[(short unsigned int *)&locy + 8B] = accum_525;
  accum_534 = MEM[(short unsigned int *)&locy + 10B];
  _535 = accum_534 & 1;
  accum_536 = accum_534 >> 1;
  if (_522 != 0)
    goto <bb 26>; [50.00%]
  else
    goto <bb 27>; [50.00%]

  <bb 26> [2.50%]:
  accum_537 = accum_536 | 32768;

  <bb 27> [4.99%]:
  # accum_538 = PHI <accum_536(25), accum_537(26)>
  MEM[(short unsigned int *)&locy + 10B] = accum_538;
  if (_535 != 0)
    goto <bb 18>; [50.00%]
  else
    goto <bb 19>; [50.00%]

  <bb 28> [3.26%]:
  z_60(D)->type = _1;
  _19 = locx.sign;
  z_60(D)->sign = _19;
  z_60(D)->exp = _12;
  goto <bb 43>; [100.00%]

  <bb 29> [1.83%]:
  _21 = -exponent_difference_62;
  if (_1 != 0)
    goto <bb 30>; [54.00%]
  else
    goto <bb 42>; [46.00%]

  <bb 30> [0.99%]:
  if (exponent_difference_62 < -63)
    goto <bb 31>; [50.00%]
  else
    goto <bb 34>; [50.00%]

  <bb 31> [0.50%]:
  MEM[(short unsigned int *)&locx + 4B] = 0;
  MEM[(short unsigned int *)&locx + 6B] = 0;
  MEM[(short unsigned int *)&locx + 8B] = 0;
  MEM[(short unsigned int *)&locx + 10B] = 1;
  goto <bb 42>; [100.00%]

  <bb 32> [1.40%]:
  _214 = accum_611 | 1;
  MEM[(short unsigned int *)&locx + 10B] = _214;

  <bb 33> [2.81%]:
  i_216 = i_215 + 1;

  <bb 34> [3.30%]:
  # i_215 = PHI <0(30), i_216(33)>
  if (_21 > i_215)
    goto <bb 35>; [85.00%]
  else
    goto <bb 42>; [15.00%]

  <bb 35> [2.81%]:
  accum_568 = MEM[(short unsigned int *)&locx + 4B];
  _569 = accum_568 & 1;
  accum_570 = accum_568 >> 1;
  MEM[(short unsigned int *)&locx + 4B] = accum_570;
  accum_581 = MEM[(short unsigned int *)&locx + 6B];
  _582 = accum_581 & 1;
  accum_583 = accum_581 >> 1;
  if (_569 != 0)
    goto <bb 36>; [50.00%]
  else
    goto <bb 37>; [50.00%]

  <bb 36> [1.40%]:
  accum_584 = accum_583 | 32768;

  <bb 37> [2.81%]:
  # accum_585 = PHI <accum_583(35), accum_584(36)>
  MEM[(short unsigned int *)&locx + 6B] = accum_585;
  accum_594 = MEM[(short unsigned int *)&locx + 8B];
  _595 = accum_594 & 1;
  accum_596 = accum_594 >> 1;
  if (_582 != 0)
    goto <bb 38>; [50.00%]
  else
    goto <bb 39>; [50.00%]

  <bb 38> [1.40%]:
  accum_597 = accum_596 | 32768;

  <bb 39> [2.81%]:
  # accum_598 = PHI <accum_596(37), accum_597(38)>
  MEM[(short unsigned int *)&locx + 8B] = accum_598;
  accum_607 = MEM[(short unsigned int *)&locx + 10B];
  _608 = accum_607 & 1;
  accum_609 = accum_607 >> 1;
  if (_595 != 0)
    goto <bb 40>; [50.00%]
  else
    goto <bb 41>; [50.00%]

  <bb 40> [1.40%]:
  accum_610 = accum_609 | 32768;

  <bb 41> [2.81%]:
  # accum_611 = PHI <accum_609(39), accum_610(40)>
  MEM[(short unsigned int *)&locx + 10B] = accum_611;
  if (_608 != 0)
    goto <bb 32>; [50.00%]
  else
    goto <bb 33>; [50.00%]

  <bb 42> [1.83%]:
  z_60(D)->type = _4;
  _23 = locy.sign;
  _24 = _23 ^ operation_65(D);
  z_60(D)->sign = _24;
  z_60(D)->exp = _14;

  <bb 43> [10.19%]:
  _26 = locx.sign;
  _27 = locy.sign;
  _28 = _26 ^ _27;
  if (_28 != operation_65(D))
    goto <bb 110>; [66.00%]
  else
    goto <bb 112>; [34.00%]

  <bb 44> [26.89%]:
  # i_189 = PHI <i_47(45), i_363(110)>
  # borrow_288 = PHI <borrow_165(45), borrow_68(110)>
  _29 = locy.mantissa[i_189];
  _30 = locx.mantissa[i_189];
  accum_95 = (unsigned int) _30;
  _96 = (unsigned int) _29;
  accum_97 = accum_95 - _96;
  _98 = (unsigned int) borrow_288;
  accum_99 = accum_97 - _98;
  _100 = accum_99 >> 16;
  _101 = (short unsigned int) _100;
  _102 = _101 & 1;
  _103 = (short unsigned int) accum_99;
  MEM[(short unsigned int *)z_60(D)].mantissa[i_189] = _103;
  i_87 = i_189 + -1;

  <bb 45> [26.89%]:
  # i_47 = PHI <i_87(44)>
  # borrow_165 = PHI <_102(44)>
  if (i_47 != -1)
    goto <bb 44>; [74.99%]
  else
    goto <bb 46>; [25.01%]

  <bb 46> [6.72%]:
  # borrow_621 = PHI <borrow_165(45)>
  if (borrow_621 != 0)
    goto <bb 47>; [50.00%]
  else
    goto <bb 50>; [50.00%]

  <bb 47> [3.36%]:
  _31 = _27 ^ operation_65(D);
  z_60(D)->sign = _31;
  goto <bb 109>; [100.00%]

  <bb 48> [13.45%]:
  # i_504 = PHI <i_48(49), i_356(109)>
  # borrow_379 = PHI <borrow_166(49), borrow_360(109)>
  _32 = z_60(D)->mantissa[i_504];
  _104 = (unsigned int) _32;
  accum_105 = -_104;
  _106 = (unsigned int) borrow_379;
  accum_107 = accum_105 - _106;
  _108 = accum_107 >> 16;
  _109 = (short unsigned int) _108;
  _110 = _109 & 1;
  _111 = (short unsigned int) accum_107;
  MEM[(short unsigned int *)z_60(D)].mantissa[i_504] = _111;
  i_82 = i_504 + -1;

  <bb 49> [13.45%]:
  # i_48 = PHI <i_82(48)>
  # borrow_166 = PHI <_110(48)>
  if (i_48 != -1)
    goto <bb 48>; [75.00%]
  else
    goto <bb 50>; [25.00%]

  <bb 50> [6.72%]:
  _33 = &z_60(D)->mantissa;
  goto <bb 108>; [100.00%]

  <bb 51> [26.89%]:
  # i_483 = PHI <i_112(52), i_352(108)>
  # n_482 = PHI <n_118(52), n_353(108)>
  _113 = (long unsigned int) i_483;
  _114 = _113 * 2;
  _115 = _33 + _114;
  _116 = *_115;
  _117 = (int) _116;
  n_119 = _117 | n_482;
  i_120 = i_483 + 1;

  <bb 52> [26.90%]:
  # i_112 = PHI <i_120(51)>
  # n_118 = PHI <n_119(51)>
  if (i_112 != 4)
    goto <bb 51>; [75.00%]
  else
    goto <bb 53>; [25.00%]

  <bb 53> [6.72%]:
  # n_617 = PHI <n_118(52)>
  if (n_617 == 0)
    goto <bb 54>; [50.00%]
  else
    goto <bb 55>; [50.00%]

  <bb 54> [3.36%]:
  z_60(D)->type = 0;
  z_60(D)->sign = 0;
  goto <bb 85> (<L63>); [100.00%]

  <bb 55> [3.36%]:
  _34 = locx.type;
  if (_34 == 2)
    goto <bb 57>; [20.24%]
  else
    goto <bb 56>; [79.76%]

  <bb 56> [2.68%]:
  _35 = locy.type;
  if (_35 == 2)
    goto <bb 57>; [34.00%]
  else
    goto <bb 85> (<L63>); [66.00%]

  <bb 57> [1.59%]:
  goto <bb 65>; [100.00%]

  <bb 58> [9.02%]:
  _421 = &MEM[(void *)z_60(D) + 10B];
  accum_422 = MEM[(short unsigned int *)z_60(D) + 10B];
  _423 = accum_422 & 32768;
  accum_424 = accum_422 << 1;
  MEM[(short unsigned int *)z_60(D) + 10B] = accum_424;
  _434 = &MEM[(void *)z_60(D) + 8B];
  accum_435 = MEM[(short unsigned int *)z_60(D) + 8B];
  _436 = accum_435 & 32768;
  accum_437 = accum_435 << 1;
  _212 = (signed short) accum_422;
  if (_212 < 0)
    goto <bb 59>; [50.00%]
  else
    goto <bb 60>; [50.00%]

  <bb 59> [4.51%]:
  accum_438 = accum_437 | 1;

  <bb 60> [9.02%]:
  # accum_439 = PHI <accum_437(58), accum_438(59)>
  MEM[(short unsigned int *)z_60(D) + 8B] = accum_439;
  _447 = &MEM[(void *)z_60(D) + 6B];
  accum_448 = MEM[(short unsigned int *)z_60(D) + 6B];
  _449 = accum_448 & 32768;
  accum_450 = accum_448 << 1;
  _577 = (signed short) accum_435;
  if (_577 < 0)
    goto <bb 61>; [50.00%]
  else
    goto <bb 62>; [50.00%]

  <bb 61> [4.51%]:
  accum_451 = accum_450 | 1;

  <bb 62> [9.02%]:
  # accum_452 = PHI <accum_450(60), accum_451(61)>
  MEM[(short unsigned int *)z_60(D) + 6B] = accum_452;
  accum_463 = _233 << 1;
  _576 = (signed short) accum_448;
  if (_576 < 0)
    goto <bb 63>; [50.00%]
  else
    goto <bb 64>; [50.00%]

  <bb 63> [4.51%]:
  accum_464 = accum_463 | 1;

  <bb 64> [9.02%]:
  # accum_465 = PHI <accum_463(62), accum_464(63)>
  MEM[(short unsigned int *)z_60(D) + 4B] = accum_465;
  _229 = z_60(D)->exp;
  _230 = (unsigned short) _229;
  _231 = _230 + 65535;
  _232 = (short int) _231;
  z_60(D)->exp = _232;

  <bb 65> [10.61%]:
  _233 = z_60(D)->mantissa[0];
  _234 = (signed short) _233;
  if (_234 >= 0)
    goto <bb 58>; [85.00%]
  else
    goto <bb 85> (<L63>); [15.00%]

  <bb 66> [13.85%]:
  # i_503 = PHI <i_49(67), i_298(112)>
  # carry_378 = PHI <carry_167(67), carry_556(112)>
  _36 = locy.mantissa[i_503];
  _37 = locx.mantissa[i_503];
  accum_121 = (unsigned int) _37;
  _122 = (unsigned int) _36;
  accum_123 = accum_121 + _122;
  _124 = (unsigned int) carry_378;
  accum_125 = accum_123 + _124;
  _126 = accum_125 >> 16;
  _127 = (short unsigned int) _126;
  _128 = _127;
  _129 = (short unsigned int) accum_125;
  MEM[(short unsigned int *)z_60(D)].mantissa[i_503] = _129;
  i_80 = i_503 + -1;

  <bb 67> [13.86%]:
  # i_49 = PHI <i_80(66)>
  # carry_167 = PHI <_128(66)>
  if (i_49 != -1)
    goto <bb 66>; [75.01%]
  else
    goto <bb 68>; [24.99%]

  <bb 68> [3.46%]:
  # carry_625 = PHI <carry_167(67)>
  if (carry_625 != 0)
    goto <bb 69>; [50.00%]
  else
    goto <bb 75>; [50.00%]

  <bb 69> [1.73%]:
  _38 = z_60(D)->exp;
  _39 = (unsigned short) _38;
  _40 = _39 + 1;
  _41 = (short int) _40;
  z_60(D)->exp = _41;
  _42 = &z_60(D)->mantissa;
  goto <bb 111>; [100.00%]

  <bb 70> [6.93%]:
  # i_476 = PHI <i_130(73), i_338(111)>
  # carry_374 = PHI <carry_168(73), carry_572(111)>
  _131 = (long unsigned int) i_476;
  _132 = _131 * 2;
  _133 = _42 + _132;
  accum_134 = *_133;
  _135 = accum_134 & 1;
  accum_136 = accum_134 >> 1;
  if (carry_374 != 0)
    goto <bb 71>; [50.00%]
  else
    goto <bb 72>; [50.00%]

  <bb 71> [3.46%]:
  accum_137 = accum_136 | 32768;

  <bb 72> [6.93%]:
  # accum_138 = PHI <accum_136(70), accum_137(71)>
  *_133 = accum_138;
  i_139 = i_476 + 1;

  <bb 73> [6.93%]:
  # i_130 = PHI <i_139(72)>
  # carry_168 = PHI <_135(72)>
  if (i_130 != 4)
    goto <bb 70>; [75.01%]
  else
    goto <bb 74>; [24.99%]

  <bb 74> [1.73%]:
  _43 = z_60(D)->mantissa[0];
  _44 = _43 | 32768;
  z_60(D)->mantissa[0] = _44;
  z_60(D)->type = 2;
  goto <bb 85> (<L63>); [100.00%]

  <bb 75> [1.73%]:
  _45 = z_60(D)->mantissa[0];
  _46 = (signed short) _45;
  if (_46 < 0)
    goto <bb 76>; [36.00%]
  else
    goto <bb 85> (<L63>); [64.00%]

  <bb 76> [0.62%]:
  z_60(D)->type = 2;
  goto <bb 85> (<L63>); [100.00%]

<L72> [10.19%]:
  z_60(D)->type = 4;
  z_60(D)->exp = 32767;
  z_60(D)->sign = 1;
  z_60(D)->mantissa[0] = 16384;
  z_60(D)->mantissa[1] = 0;
  z_60(D)->mantissa[2] = 0;
  z_60(D)->mantissa[3] = 0;
  goto <bb 85> (<L63>); [100.00%]

  <bb 78> [29.32%]:
  # i_272 = PHI <i_235(83), i_548(114)>
  _236 = x_58(D)->mantissa[i_272];
  _237 = y_59(D)->mantissa[i_272];
  if (_236 > _237)
    goto <bb 79>; [5.00%]
  else
    goto <bb 80>; [95.00%]

  <bb 79> [1.47%]:
  _238 = __builtin_object_size (x_58(D), 0);
  __builtin_memmove (x_58(D), z_60(D), 12);
  goto <bb 85> (<L63>); [100.00%]

  <bb 80> [27.85%]:
  if (_236 < _237)
    goto <bb 81>; [5.00%]
  else
    goto <bb 82>; [95.00%]

  <bb 81> [1.39%]:
  _243 = __builtin_object_size (y_59(D), 0);
  __builtin_memmove (y_59(D), z_60(D), 12);
  goto <bb 85> (<L63>); [100.00%]

  <bb 82> [26.46%]:
  i_239 = i_272 + 1;

  # i_235 = PHI <i_239(82)>
<L74> [26.46%]:
  if (i_235 != 4)
    goto <bb 78>; [72.30%]
  else
    goto <bb 84>; [27.70%]

  <bb 84> [7.33%]:
  _241 = __builtin_object_size (y_59(D), 0);
  __builtin_memmove (y_59(D), z_60(D), 12);

<L63> [81.50%]:
  _142 = z_60(D)->type;
  _143 = _142 + 255;
  if (_143 <= 1)
    goto <bb 86>; [24.54%]
  else
    goto <bb 104>; [75.46%]

  <bb 86> [20.00%]:
  _247 = &z_60(D)->mantissa;
  goto <bb 107>; [100.00%]

  <bb 87> [80.00%]:
  # i_358 = PHI <i_248(88), i_347(107)>
  # n_357 = PHI <n_254(88), n_349(107)>
  _249 = (long unsigned int) i_358;
  _250 = _249 * 2;
  _251 = _247 + _250;
  _252 = *_251;
  _253 = (int) _252;
  n_255 = _253 | n_357;
  i_256 = i_358 + 1;

  <bb 88> [80.00%]:
  # i_248 = PHI <i_256(87)>
  # n_254 = PHI <n_255(87)>
  if (i_248 != 4)
    goto <bb 87>; [75.00%]
  else
    goto <bb 89>; [25.00%]

  <bb 89> [20.00%]:
  # n_195 = PHI <n_254(88)>
  if (n_195 == 0)
    goto <bb 90>; [33.00%]
  else
    goto <bb 105>; [67.00%]

  <bb 90> [6.60%]:
  __builtin_puts (&"Error:  zero significand in denormalize"[0]);
  goto <bb 105>; [100.00%]

  <bb 91> [2.62%]:
  _265 = (unsigned short) _270;
  _267 = _265 + 1;
  _268 = (short int) _267;
  z_60(D)->exp = _268;
  _271 = z_60(D)->type;
  if (_271 != 0)
    goto <bb 106>; [54.00%]
  else
    goto <bb 102>; [46.00%]

  <bb 92> [2.01%]:
  _290 = accum_413 | 1;
  MEM[(short unsigned int *)z_60(D) + 10B] = _290;

  <bb 93> [4.02%]:

  <bb 94> [4.01%]:
  # i_291 = PHI <1(93)>
  if (i_291 == 0)
    goto <bb 95>; [82.34%]
  else
    goto <bb 102>; [17.66%]

  <bb 95> [4.02%]:
  accum_370 = MEM[(short unsigned int *)z_60(D) + 4B];
  _371 = accum_370 & 1;
  accum_372 = accum_370 >> 1;
  MEM[(short unsigned int *)z_60(D) + 4B] = accum_372;
  _382 = &MEM[(void *)z_60(D) + 6B];
  accum_383 = MEM[(short unsigned int *)z_60(D) + 6B];
  _384 = accum_383 & 1;
  accum_385 = accum_383 >> 1;
  if (_371 != 0)
    goto <bb 96>; [50.00%]
  else
    goto <bb 97>; [50.00%]

  <bb 96> [2.01%]:
  accum_386 = accum_385 | 32768;

  <bb 97> [4.02%]:
  # accum_387 = PHI <accum_385(95), accum_386(96)>
  MEM[(short unsigned int *)z_60(D) + 6B] = accum_387;
  _395 = &MEM[(void *)z_60(D) + 8B];
  accum_396 = MEM[(short unsigned int *)z_60(D) + 8B];
  _397 = accum_396 & 1;
  accum_398 = accum_396 >> 1;
  if (_384 != 0)
    goto <bb 98>; [50.00%]
  else
    goto <bb 99>; [50.00%]

  <bb 98> [2.01%]:
  accum_399 = accum_398 | 32768;

  <bb 99> [4.02%]:
  # accum_400 = PHI <accum_398(97), accum_399(98)>
  MEM[(short unsigned int *)z_60(D) + 8B] = accum_400;
  _408 = &MEM[(void *)z_60(D) + 10B];
  accum_409 = MEM[(short unsigned int *)z_60(D) + 10B];
  _410 = accum_409 & 1;
  accum_411 = accum_409 >> 1;
  if (_397 != 0)
    goto <bb 100>; [50.00%]
  else
    goto <bb 101>; [50.00%]

  <bb 100> [2.01%]:
  accum_412 = accum_411 | 32768;

  <bb 101> [4.02%]:
  # accum_413 = PHI <accum_411(99), accum_412(100)>
  MEM[(short unsigned int *)z_60(D) + 10B] = accum_413;
  if (_410 != 0)
    goto <bb 92>; [50.00%]
  else
    goto <bb 93>; [50.00%]

  <bb 102> [20.00%]:
  _244 = z_60(D)->type;
  if (_244 != 0)
    goto <bb 103>; [54.00%]
  else
    goto <bb 104>; [46.00%]

  <bb 103> [10.80%]:
  _245 = z_60(D)->mantissa[3];
  _246 = _245 & 65528;
  z_60(D)->mantissa[3] = _246;

  <bb 104> [81.50%]:
  locx ={v} {CLOBBER};
  locy ={v} {CLOBBER};
  return;

  <bb 105> [20.00%]:
  _270 = z_60(D)->exp;
  _369 = (int) _270;
  _289 = _369 + 32767;
  exponent_difference_343 = (long int) _289;
  if (exponent_difference_343 == -1)
    goto <bb 91>; [13.12%]
  else
    goto <bb 102>; [86.88%]

  <bb 106> [0.71%]:
  # i_345 = PHI <0(91)>
  goto <bb 95>; [100.00%]

  <bb 107> [20.00%]:
  # i_347 = PHI <0(86)>
  # n_349 = PHI <0(86)>
  goto <bb 87>; [100.00%]

  <bb 108> [6.72%]:
  # i_352 = PHI <0(50)>
  # n_353 = PHI <0(50)>
  goto <bb 51>; [100.00%]

  <bb 109> [3.36%]:
  # i_356 = PHI <3(47)>
  # borrow_360 = PHI <0(47)>
  goto <bb 48>; [100.00%]

  <bb 110> [6.73%]:
  # i_363 = PHI <3(43)>
  # borrow_68 = PHI <0(43)>
  goto <bb 44>; [100.00%]

  <bb 111> [1.73%]:
  # i_338 = PHI <0(69)>
  # carry_572 = PHI <0(69)>
  goto <bb 70>; [100.00%]

  <bb 112> [3.46%]:
  # i_298 = PHI <3(43)>
  # carry_556 = PHI <0(43)>
  goto <bb 66>; [100.00%]

  <bb 113> [0.88%]:
  # i_555 = PHI <0(16)>
  goto <bb 21>; [100.00%]

  # i_548 = PHI <0(2)>
<L77> [10.19%]:
  goto <bb 78>; [100.00%]

}



;; Function SetupCPUEmFloatArrays (SetupCPUEmFloatArrays, funcdef_no=34, decl_uid=2767, cgraph_uid=34, symbol_order=34)

;; 11 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
;;
;; Loop 1
;;  header 46, latch 45
;;  depth 1, outer 0
;;  nodes: 46 45 37 35 34 32 33 31 23 21 20 18 19 17 9 7 6 4 5 3 8 16 14 15 12 13 10 11 22 30 28 29 26 27 24 25 36 44 42 43 40 41 38 39
;;
;; Loop 9
;;  header 37, latch 44
;;  depth 2, outer 1
;;  nodes: 37 44 42 43 40 41 38 39
;;
;; Loop 7
;;  header 23, latch 30
;;  depth 2, outer 1
;;  nodes: 23 30 28 29 26 27 24 25
;;
;; Loop 5
;;  header 9, latch 16
;;  depth 2, outer 1
;;  nodes: 9 16 14 15 12 13 10 11
;; 2 succs { 46 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 17 }
;; 8 succs { 9 }
;; 9 succs { 10 17 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 16 }
;; 15 succs { 16 }
;; 16 succs { 9 }
;; 17 succs { 18 19 }
;; 18 succs { 20 }
;; 19 succs { 20 }
;; 20 succs { 21 22 }
;; 21 succs { 31 }
;; 22 succs { 23 }
;; 23 succs { 24 31 }
;; 24 succs { 25 26 }
;; 25 succs { 26 }
;; 26 succs { 27 28 }
;; 27 succs { 28 }
;; 28 succs { 29 30 }
;; 29 succs { 30 }
;; 30 succs { 23 }
;; 31 succs { 32 33 }
;; 32 succs { 34 }
;; 33 succs { 34 }
;; 34 succs { 35 36 }
;; 35 succs { 45 }
;; 36 succs { 37 }
;; 37 succs { 38 45 }
;; 38 succs { 39 40 }
;; 39 succs { 40 }
;; 40 succs { 41 42 }
;; 41 succs { 42 }
;; 42 succs { 43 44 }
;; 43 succs { 44 }
;; 44 succs { 37 }
;; 45 succs { 46 }
;; 46 succs { 3 47 }
;; 47 succs { 1 }
Adding assert for _100 from _100 + 32768
Adding assert for _82 from _82 + 32768
Adding assert for _64 from _64 + 32768

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_23 -> { _64 }
_162 -> { _82 }
_175 -> { _100 }
_217 -> { _7 }
i_230 -> { i_9 }
mylong_243 -> { mylong_30 }
mylong_256 -> { mylong_37 }
mylong_257 -> { mylong_44 }
_285 -> { _1 }
_298 -> { _1 }
_311 -> { _3 }
_324 -> { _3 }
_325 -> { _7 }
Incremental SSA update started at block: 46
Number of blocks in CFG: 51
Number of blocks to update: 26 ( 51%)



Value ranges after VRP:

_1: VARYING
_2: VARYING
_3: VARYING
_4: [0, +INF]
_5: VARYING
_6: VARYING
_7: VARYING
_8: VARYING
i_9: [0, 1537228672809129302]
.MEM_10: VARYING
arraysize_13(D): VARYING
abase_20(D): VARYING
_23: [0, 32767]  EQUIVALENCES: { _64 } (1 elements)
bbase_24(D): VARYING
i_26: [0, +INF]
mylong_27: VARYING
mylong_30: VARYING
_31: [-32768, 32767]
myword_32: [0, +INF]
myword_33: [0, +INF]
mylong_34: VARYING
mylong_37: VARYING
_38: [-32768, 32767]
myword_39: [0, +INF]
myword_40: [0, +INF]
mylong_41: [1, +INF(OVF)]
mylong_44: [0, +INF(OVF)]
_45: VARYING
myword_46: [0, +INF]
myword_47: [0, +INF]
_60: VARYING
_61: [0, +INF]
_62: [0, +INF]
_63: VARYING
_64: VARYING
_65: VARYING
_78: VARYING
_79: [0, +INF]
_80: [0, +INF]
_81: VARYING
_82: VARYING
_83: VARYING
.MEM_84: VARYING
_96: VARYING
_97: [0, +INF]
_98: [0, +INF]
_99: VARYING
_100: VARYING
_101: VARYING
.MEM_102: VARYING
.MEM_105: VARYING
.MEM_106: VARYING
.MEM_107: VARYING
.MEM_110: VARYING
.MEM_111: VARYING
.MEM_112: VARYING
.MEM_115: VARYING
.MEM_116: VARYING
accum_150: VARYING
_151: [0, 32768]
accum_152: [0, +INF]
_154: VARYING
_158: VARYING
_159: VARYING
_162: [0, 32767]  EQUIVALENCES: { _82 } (1 elements)
accum_163: VARYING
_164: [0, 32768]
accum_165: [0, +INF]
accum_166: [1, +INF]
accum_167: [0, +INF]
_175: [0, 32767]  EQUIVALENCES: { _100 } (1 elements)
accum_176: VARYING
_177: [0, 32768]
accum_178: [0, +INF]
accum_179: [1, +INF]
accum_180: [0, +INF]
_190: [0, 0]
accum_191: [0, 65534]
accum_192: [1, +INF]
accum_193: [0, +INF]
.MEM_214: VARYING
_217: [0, +INF]  EQUIVALENCES: { _7 } (1 elements)
accum_218: VARYING
_219: [0, 32768]
accum_220: [0, +INF]
_222: VARYING
_226: VARYING
_227: VARYING
i_230: [0, arraysize_13(D) + 18446744073709551615]  EQUIVALENCES: { i_9 } (1 elements)
accum_231: VARYING
_232: [0, 32768]
accum_233: [0, +INF]
accum_234: [1, +INF]
accum_235: [0, +INF]
mylong_243: ~[0, 0]  EQUIVALENCES: { mylong_30 } (1 elements)
accum_244: VARYING
_245: [0, 32768]
accum_246: [0, +INF]
accum_247: [1, +INF]
accum_248: [0, +INF]
mylong_256: ~[0, 0]  EQUIVALENCES: { mylong_37 } (1 elements)
mylong_257: [1, +INF(OVF)]  EQUIVALENCES: { mylong_44 } (1 elements)
_258: [0, 0]
accum_259: [0, 65534]
accum_260: [1, +INF]
accum_261: [0, +INF]
.MEM_282: VARYING
_285: [-INF, -1]  EQUIVALENCES: { _1 } (1 elements)
accum_286: VARYING
_287: [0, 32768]
accum_288: [0, +INF]
_290: VARYING
_294: VARYING
_295: VARYING
_298: [0, +INF]  EQUIVALENCES: { _1 } (1 elements)
accum_299: VARYING
_300: [0, 32768]
accum_301: [0, +INF]
accum_302: [1, +INF]
accum_303: [0, +INF]
_311: [-INF, -1]  EQUIVALENCES: { _3 } (1 elements)
accum_312: VARYING
_313: [0, 32768]
accum_314: [0, +INF]
accum_315: [1, +INF]
accum_316: [0, +INF]
_324: [0, +INF]  EQUIVALENCES: { _3 } (1 elements)
_325: [-INF, -1]  EQUIVALENCES: { _7 } (1 elements)
_326: [0, 0]
accum_327: [0, 65534]
accum_328: [1, +INF]
accum_329: [0, +INF]


Removing basic block 48
Removing basic block 49
Removing basic block 50

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_108 -> { .MEM_346 }
.MEM_113 -> { .MEM_119 }
mylong_188 -> { mylong_44 }
.MEM_189 -> { .MEM_102 }
.MEM_201 -> { .MEM_342 }
.MEM_205 -> { .MEM_338 }
.MEM_209 -> { .MEM_334 }
.MEM_273 -> { .MEM_346 }
mylong_277 -> { mylong_44 }
Incremental SSA update started at block: 3
Number of blocks in CFG: 49
Number of blocks to update: 6 ( 12%)


SetupCPUEmFloatArrays (struct InternalFPF * abase, struct InternalFPF * bbase, struct InternalFPF * cbase, long unsigned int arraysize)
{
  short unsigned int carry;
  short unsigned int accum;
  int i;
  short unsigned int carry;
  short unsigned int accum;
  int i;
  short unsigned int carry;
  short unsigned int accum;
  int i;
  int i;
  short unsigned int myword;
  int32 mylong;
  int i;
  short unsigned int myword;
  int32 mylong;
  int i;
  short unsigned int myword;
  int32 mylong;
  struct InternalFPF locFPF2;
  struct InternalFPF locFPF1;
  long unsigned int i;
  int _1;
  int _2;
  int _3;
  long unsigned int _4;
  struct InternalFPF * _5;
  int _6;
  int _7;
  struct InternalFPF * _8;
  int _31;
  int _38;
  int _45;
  short int _60;
  unsigned short _61;
  unsigned short _62;
  short int _63;
  short unsigned int _64;
  signed short _65;
  short int _78;
  unsigned short _79;
  unsigned short _80;
  short int _81;
  short unsigned int _82;
  signed short _83;
  short int _96;
  unsigned short _97;
  unsigned short _98;
  short int _99;
  short unsigned int _100;
  signed short _101;
  short unsigned int _151;
  signed short _154;
  signed short _158;
  signed short _159;
  short unsigned int _164;
  short unsigned int _177;
  short unsigned int _219;
  signed short _222;
  signed short _226;
  signed short _227;
  short unsigned int _232;
  short unsigned int _245;
  short unsigned int _287;
  signed short _290;
  signed short _294;
  signed short _295;
  short unsigned int _300;
  short unsigned int _313;

  <bb 2> [1.70%]:
  randnum (13);
  goto <bb 46>; [100.00%]

  <bb 3> [9.63%]:
  _1 = randwc (50000);
  if (_1 < 0)
    goto <bb 4>; [36.00%]
  else
    goto <bb 5>; [64.00%]

  <bb 4> [3.47%]:
  locFPF1.sign = 1;
  mylong_41 = -_1;
  goto <bb 48>; [100.00%]

  <bb 5> [6.16%]:
  locFPF1.sign = 0;

  <bb 6> [6.16%]:
  # mylong_44 = PHI <_1(5)>
  locFPF1.type = 2;
  locFPF1.mantissa[0] = 0;
  locFPF1.mantissa[1] = 0;
  locFPF1.mantissa[2] = 0;
  locFPF1.mantissa[3] = 0;
  if (mylong_44 == 0)
    goto <bb 7>; [99.05%]
  else
    goto <bb 8>; [0.95%]

  <bb 7> [6.10%]:
  locFPF1.type = 0;
  locFPF1.exp = 0;
  goto <bb 17>; [100.00%]

  <bb 8> [3.53%]:
  # mylong_277 = PHI <mylong_44(6), mylong_188(48)>
  locFPF1.exp = 32;
  _45 = mylong_277 >> 16;
  myword_46 = (short unsigned int) _45;
  locFPF1.mantissa[0] = myword_46;
  myword_47 = (short unsigned int) mylong_277;
  locFPF1.mantissa[1] = myword_47;

  <bb 9> [23.53%]:
  _64 = locFPF1.mantissa[0];
  _65 = (signed short) _64;
  if (_65 >= 0)
    goto <bb 10>; [85.00%]
  else
    goto <bb 17>; [15.00%]

  <bb 10> [20.00%]:
  accum_286 = MEM[(short unsigned int *)&locFPF1 + 10B];
  _287 = accum_286 & 32768;
  accum_288 = accum_286 << 1;
  MEM[(short unsigned int *)&locFPF1 + 10B] = accum_288;
  accum_299 = MEM[(short unsigned int *)&locFPF1 + 8B];
  _300 = accum_299 & 32768;
  accum_301 = accum_299 << 1;
  _295 = (signed short) accum_286;
  if (_295 < 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 11> [10.00%]:
  accum_302 = accum_301 | 1;

  <bb 12> [20.00%]:
  # accum_303 = PHI <accum_301(10), accum_302(11)>
  MEM[(short unsigned int *)&locFPF1 + 8B] = accum_303;
  accum_312 = MEM[(short unsigned int *)&locFPF1 + 6B];
  _313 = accum_312 & 32768;
  accum_314 = accum_312 << 1;
  _294 = (signed short) accum_299;
  if (_294 < 0)
    goto <bb 13>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 13> [10.00%]:
  accum_315 = accum_314 | 1;

  <bb 14> [20.00%]:
  # accum_316 = PHI <accum_314(12), accum_315(13)>
  MEM[(short unsigned int *)&locFPF1 + 6B] = accum_316;
  accum_327 = _64 << 1;
  _290 = (signed short) accum_312;
  if (_290 < 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 15> [10.00%]:
  accum_328 = accum_327 | 1;

  <bb 16> [20.00%]:
  # accum_329 = PHI <accum_327(14), accum_328(15)>
  MEM[(short unsigned int *)&locFPF1 + 4B] = accum_329;
  _60 = locFPF1.exp;
  _61 = (unsigned short) _60;
  _62 = _61 + 65535;
  _63 = (short int) _62;
  locFPF1.exp = _63;
  goto <bb 9>; [100.00%]

  <bb 17> [9.63%]:
  _2 = randwc (50000);
  _3 = _2 + 1;
  if (_3 < 0)
    goto <bb 18>; [36.00%]
  else
    goto <bb 19>; [64.00%]

  <bb 18> [3.47%]:
  locFPF2.sign = 1;
  mylong_34 = ~_2;
  goto <bb 20>; [100.00%]

  <bb 19> [6.16%]:
  locFPF2.sign = 0;

  <bb 20> [9.63%]:
  # mylong_37 = PHI <mylong_34(18), _3(19)>
  locFPF2.type = 2;
  locFPF2.mantissa[0] = 0;
  locFPF2.mantissa[1] = 0;
  locFPF2.mantissa[2] = 0;
  locFPF2.mantissa[3] = 0;
  if (mylong_37 == 0)
    goto <bb 21>; [63.36%]
  else
    goto <bb 22>; [36.64%]

  <bb 21> [6.10%]:
  locFPF2.type = 0;
  locFPF2.exp = 0;
  goto <bb 31>; [100.00%]

  <bb 22> [3.53%]:
  locFPF2.exp = 32;
  _38 = mylong_37 >> 16;
  myword_39 = (short unsigned int) _38;
  locFPF2.mantissa[0] = myword_39;
  myword_40 = (short unsigned int) mylong_37;
  locFPF2.mantissa[1] = myword_40;

  <bb 23> [23.53%]:
  _82 = locFPF2.mantissa[0];
  _83 = (signed short) _82;
  if (_83 >= 0)
    goto <bb 24>; [85.00%]
  else
    goto <bb 31>; [15.00%]

  <bb 24> [20.00%]:
  accum_218 = MEM[(short unsigned int *)&locFPF2 + 10B];
  _219 = accum_218 & 32768;
  accum_220 = accum_218 << 1;
  MEM[(short unsigned int *)&locFPF2 + 10B] = accum_220;
  accum_231 = MEM[(short unsigned int *)&locFPF2 + 8B];
  _232 = accum_231 & 32768;
  accum_233 = accum_231 << 1;
  _227 = (signed short) accum_218;
  if (_227 < 0)
    goto <bb 25>; [50.00%]
  else
    goto <bb 26>; [50.00%]

  <bb 25> [10.00%]:
  accum_234 = accum_233 | 1;

  <bb 26> [20.00%]:
  # accum_235 = PHI <accum_233(24), accum_234(25)>
  MEM[(short unsigned int *)&locFPF2 + 8B] = accum_235;
  accum_244 = MEM[(short unsigned int *)&locFPF2 + 6B];
  _245 = accum_244 & 32768;
  accum_246 = accum_244 << 1;
  _226 = (signed short) accum_231;
  if (_226 < 0)
    goto <bb 27>; [50.00%]
  else
    goto <bb 28>; [50.00%]

  <bb 27> [10.00%]:
  accum_247 = accum_246 | 1;

  <bb 28> [20.00%]:
  # accum_248 = PHI <accum_246(26), accum_247(27)>
  MEM[(short unsigned int *)&locFPF2 + 6B] = accum_248;
  accum_259 = _82 << 1;
  _222 = (signed short) accum_244;
  if (_222 < 0)
    goto <bb 29>; [50.00%]
  else
    goto <bb 30>; [50.00%]

  <bb 29> [10.00%]:
  accum_260 = accum_259 | 1;

  <bb 30> [20.00%]:
  # accum_261 = PHI <accum_259(28), accum_260(29)>
  MEM[(short unsigned int *)&locFPF2 + 4B] = accum_261;
  _78 = locFPF2.exp;
  _79 = (unsigned short) _78;
  _80 = _79 + 65535;
  _81 = (short int) _80;
  locFPF2.exp = _81;
  goto <bb 23>; [100.00%]

  <bb 31> [9.63%]:
  _4 = i_9 * 12;
  _5 = abase_20(D) + _4;
  DivideInternalFPF (&locFPF1, &locFPF2, _5);
  _6 = randwc (50000);
  _7 = _6 + 1;
  if (_7 < 0)
    goto <bb 32>; [36.00%]
  else
    goto <bb 33>; [64.00%]

  <bb 32> [3.47%]:
  locFPF2.sign = 1;
  mylong_27 = ~_6;
  goto <bb 34>; [100.00%]

  <bb 33> [6.16%]:
  locFPF2.sign = 0;

  <bb 34> [9.63%]:
  # mylong_30 = PHI <mylong_27(32), _7(33)>
  locFPF2.type = 2;
  locFPF2.mantissa[0] = 0;
  locFPF2.mantissa[1] = 0;
  locFPF2.mantissa[2] = 0;
  locFPF2.mantissa[3] = 0;
  if (mylong_30 == 0)
    goto <bb 35>; [63.36%]
  else
    goto <bb 36>; [36.64%]

  <bb 35> [6.10%]:
  locFPF2.type = 0;
  locFPF2.exp = 0;
  goto <bb 45>; [100.00%]

  <bb 36> [3.53%]:
  locFPF2.exp = 32;
  _31 = mylong_30 >> 16;
  myword_32 = (short unsigned int) _31;
  locFPF2.mantissa[0] = myword_32;
  myword_33 = (short unsigned int) mylong_30;
  locFPF2.mantissa[1] = myword_33;

  <bb 37> [23.53%]:
  _100 = locFPF2.mantissa[0];
  _101 = (signed short) _100;
  if (_101 >= 0)
    goto <bb 38>; [85.00%]
  else
    goto <bb 45>; [15.00%]

  <bb 38> [20.00%]:
  accum_150 = MEM[(short unsigned int *)&locFPF2 + 10B];
  _151 = accum_150 & 32768;
  accum_152 = accum_150 << 1;
  MEM[(short unsigned int *)&locFPF2 + 10B] = accum_152;
  accum_163 = MEM[(short unsigned int *)&locFPF2 + 8B];
  _164 = accum_163 & 32768;
  accum_165 = accum_163 << 1;
  _159 = (signed short) accum_150;
  if (_159 < 0)
    goto <bb 39>; [50.00%]
  else
    goto <bb 40>; [50.00%]

  <bb 39> [10.00%]:
  accum_166 = accum_165 | 1;

  <bb 40> [20.00%]:
  # accum_167 = PHI <accum_165(38), accum_166(39)>
  MEM[(short unsigned int *)&locFPF2 + 8B] = accum_167;
  accum_176 = MEM[(short unsigned int *)&locFPF2 + 6B];
  _177 = accum_176 & 32768;
  accum_178 = accum_176 << 1;
  _158 = (signed short) accum_163;
  if (_158 < 0)
    goto <bb 41>; [50.00%]
  else
    goto <bb 42>; [50.00%]

  <bb 41> [10.00%]:
  accum_179 = accum_178 | 1;

  <bb 42> [20.00%]:
  # accum_180 = PHI <accum_178(40), accum_179(41)>
  MEM[(short unsigned int *)&locFPF2 + 6B] = accum_180;
  accum_191 = _100 << 1;
  _154 = (signed short) accum_176;
  if (_154 < 0)
    goto <bb 43>; [50.00%]
  else
    goto <bb 44>; [50.00%]

  <bb 43> [10.00%]:
  accum_192 = accum_191 | 1;

  <bb 44> [20.00%]:
  # accum_193 = PHI <accum_191(42), accum_192(43)>
  MEM[(short unsigned int *)&locFPF2 + 4B] = accum_193;
  _96 = locFPF2.exp;
  _97 = (unsigned short) _96;
  _98 = _97 + 65535;
  _99 = (short int) _98;
  locFPF2.exp = _99;
  goto <bb 37>; [100.00%]

  <bb 45> [9.63%]:
  _8 = bbase_24(D) + _4;
  DivideInternalFPF (&locFPF1, &locFPF2, _8);
  i_26 = i_9 + 1;

  <bb 46> [11.33%]:
  # i_9 = PHI <0(2), i_26(45)>
  if (i_9 < arraysize_13(D))
    goto <bb 3>; [85.00%]
  else
    goto <bb 47>; [15.00%]

  <bb 47> [1.70%]:
  locFPF1 ={v} {CLOBBER};
  locFPF2 ={v} {CLOBBER};
  return;

  <bb 48> [3.47%]:
  # mylong_188 = PHI <mylong_41(4)>
  locFPF1.type = 2;
  locFPF1.mantissa[0] = 0;
  locFPF1.mantissa[1] = 0;
  locFPF1.mantissa[2] = 0;
  locFPF1.mantissa[3] = 0;
  goto <bb 8>; [100.00%]

}



;; Function DoEmFloatIteration (DoEmFloatIteration, funcdef_no=35, decl_uid=2773, cgraph_uid=35, symbol_order=35)

Created preheader block for loop 2
Created preheader block for loop 21
Created preheader block for loop 5
;; 23 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 105 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 104 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 106 101 103 102
;;
;; Loop 1
;;  header 101, latch 106
;;  depth 1, outer 0
;;  nodes: 101 106 100 103 99 3 4 5 97 98 76 96 95 81 79 84 82 87 104 86 94 85 92 93 90 91 88 89 83 80 77 78 6 15 16 17 18 19 71 72 74 73 75 14 13 12 11 10 9 8 7 63 105 62 60 61 58 59 56 57 70 55 68 69 66 67 64 65 46 27 45 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 54 53 51 52 49 50 47 48 28 25 26 24 23 21 22 20
;;
;; Loop 2
;;  header 100, latch 99
;;  depth 2, outer 1
;;  nodes: 100 99 3 4 5 97 98 76 96 95 81 79 84 82 87 104 86 94 85 92 93 90 91 88 89 83 80 77 78 6 15 16 17 18 19 71 72 74 73 75 14 13 12 11 10 9 8 7 63 105 62 60 61 58 59 56 57 70 55 68 69 66 67 64 65 46 27 45 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 54 53 51 52 49 50 47 48 28 25 26 24 23 21 22 20
;;
;; Loop 21
;;  header 87, latch 86
;;  depth 3, outer 2
;;  nodes: 87 86 94 85 92 93 90 91 88 89
;;
;; Loop 5
;;  header 63, latch 62
;;  depth 3, outer 2
;;  nodes: 63 62 60 61 58 59 56 57 70 55 68 69 66 67 64 65
;;
;; Loop 8
;;  header 46, latch 45
;;  depth 3, outer 2
;;  nodes: 46 45 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 54 53 51 52 49 50 47 48 28
;; 2 succs { 101 }
;; 3 succs { 99 4 5 6 98 }
;; 4 succs { 99 }
;; 5 succs { 99 }
;; 6 succs { 76 15 17 19 16 20 18 7 }
;; 7 succs { 73 8 }
;; 8 succs { 74 9 }
;; 9 succs { 73 10 }
;; 10 succs { 74 11 }
;; 11 succs { 73 12 }
;; 12 succs { 74 13 }
;; 13 succs { 73 14 }
;; 14 succs { 74 75 }
;; 15 succs { 76 }
;; 16 succs { 76 }
;; 17 succs { 76 }
;; 18 succs { 76 }
;; 19 succs { 76 }
;; 20 succs { 22 21 }
;; 21 succs { 22 23 }
;; 22 succs { 23 }
;; 23 succs { 25 24 }
;; 24 succs { 25 26 }
;; 25 succs { 27 }
;; 26 succs { 27 }
;; 27 succs { 46 }
;; 28 succs { 29 }
;; 29 succs { 30 31 }
;; 30 succs { 31 }
;; 31 succs { 32 33 }
;; 32 succs { 33 }
;; 33 succs { 34 35 }
;; 34 succs { 35 }
;; 35 succs { 36 37 }
;; 36 succs { 37 }
;; 37 succs { 38 39 }
;; 38 succs { 39 }
;; 39 succs { 40 41 }
;; 40 succs { 41 }
;; 41 succs { 42 43 }
;; 42 succs { 43 }
;; 43 succs { 44 45 }
;; 44 succs { 45 }
;; 45 succs { 46 }
;; 46 succs { 47 105 }
;; 105 succs { 63 }
;; 47 succs { 48 49 }
;; 48 succs { 49 }
;; 49 succs { 50 51 }
;; 50 succs { 51 }
;; 51 succs { 52 53 }
;; 52 succs { 53 }
;; 53 succs { 28 54 }
;; 54 succs { 31 }
;; 55 succs { 56 }
;; 56 succs { 57 58 }
;; 57 succs { 58 }
;; 58 succs { 59 60 }
;; 59 succs { 60 }
;; 60 succs { 61 62 }
;; 61 succs { 62 }
;; 62 succs { 63 }
;; 63 succs { 64 71 }
;; 64 succs { 65 66 }
;; 65 succs { 66 }
;; 66 succs { 67 68 }
;; 67 succs { 68 }
;; 68 succs { 69 70 }
;; 69 succs { 70 }
;; 70 succs { 55 56 }
;; 71 succs { 72 76 }
;; 72 succs { 76 }
;; 73 succs { 76 }
;; 74 succs { 76 }
;; 75 succs { 76 }
;; 76 succs { 77 97 }
;; 77 succs { 78 79 }
;; 78 succs { 79 }
;; 79 succs { 80 95 }
;; 80 succs { 81 82 }
;; 81 succs { 95 }
;; 82 succs { 83 95 }
;; 83 succs { 84 104 }
;; 104 succs { 87 }
;; 84 succs { 95 }
;; 85 succs { 86 }
;; 86 succs { 87 }
;; 87 succs { 88 95 }
;; 88 succs { 89 90 }
;; 89 succs { 90 }
;; 90 succs { 91 92 }
;; 91 succs { 92 }
;; 92 succs { 93 94 }
;; 93 succs { 94 }
;; 94 succs { 85 86 }
;; 95 succs { 96 97 }
;; 96 succs { 97 }
;; 97 succs { 99 }
;; 98 succs { 99 }
;; 99 succs { 100 }
;; 100 succs { 3 106 }
;; 106 succs { 101 }
;; 101 succs { 103 102 }
;; 103 succs { 100 }
;; 102 succs { 1 }
Adding assert for _173 from _173 + 32768

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

exponent_difference_58 -> { exponent_difference_217 }
_69 -> { _14 }
_181 -> { _928 }
_184 -> { _925 }
_203 -> { _12 }
_244 -> { _933 }
_245 -> { _12 }
_334 -> { _12 }
_356 -> { _12 }
_407 -> { _12 }
_410 -> { _12 }
_416 -> { _12 }
_425 -> { _12 }
_434 -> { _12 }
_455 -> { _13 }
_464 -> { _13 }
_470 -> { _932 }
_473 -> { _13 }
_479 -> { _929 }
_482 -> { _13 }
_532 -> { _12 }
_549 -> { _924 }
_596 -> { _12 }
_609 -> { _12 }
_622 -> { _12 }
_635 -> { _12 }
_648 -> { _12 }
_704 -> { _12 }
_764 -> { _12 }
_777 -> { _12 }
_790 -> { _12 }
_803 -> { _12 }
_851 -> { _14 }
i_860 -> { i_20 }
i_869 -> { i_144 }
_878 -> { _173 }
_887 -> { _225 }
i_896 -> { i_247 }
_905 -> { _920 }
_914 -> { _921 }
Incremental SSA update started at block: 100
Number of blocks in CFG: 110
Number of blocks to update: 68 ( 62%)



Value ranges after VRP:

_1: [0, 15]
_2: VARYING
_3: [0, +INF]
_4: VARYING
_5: VARYING
_6: VARYING
_7: [0, +INF]
_8: VARYING
_9: VARYING
_10: VARYING
_11: [0, +INF]
_12: VARYING
_13: VARYING
_14: VARYING
_15: [0, +INF]
_16: VARYING
_17: VARYING
_18: VARYING
loops_19: [0, loops_27(D)]
i_20: [0, +INF]
.MEM_21: VARYING
.MEM_22: VARYING
.MEM_23: VARYING
elapsed_26: VARYING
loops_27(D): VARYING
loops_28: [0, +INF]
_30: VARYING
arraysize_31(D): VARYING
cbase_32(D): VARYING
bbase_33(D): VARYING
abase_34(D): VARYING
i_39: [0, +INF]
_40: VARYING
_41: [0, 255]
_42: [0, 1275]
_43: VARYING
_44: [0, 255]
_45: [0, 1530]
_46: VARYING
_47: VARYING
_48: VARYING
_49: [0, +INF]
_50: VARYING
_51: VARYING
_52: VARYING
_53: [0, +INF]
_56: VARYING
_57: VARYING
exponent_difference_58: [-1, -1]  EQUIVALENCES: { exponent_difference_217 } (1 elements)
_69: ~[0B, 0B]  EQUIVALENCES: { _14 } (1 elements)
_82: VARYING
_83: VARYING
_84: VARYING
_85: VARYING
_86: [0, +INF]
_87: VARYING
_88: [0, +INF]
_89: VARYING
_90: [0, +INF]
_91: [0, +INF]
_92: VARYING
_106: [0, +INF]
_113: [0, +INF]
_121: ~[0B, 0B]
i_144: [0, 64]
i_145: [1, 64]
_157: ~[0B, 0B]
_169: VARYING
_170: [0, +INF]
_171: [0, +INF]
_172: VARYING
_173: VARYING
_174: VARYING
_181: [0, _929]  EQUIVALENCES: { _928 } (1 elements)
_184: [_549, +INF]  EQUIVALENCES: { _925 } (1 elements)
_185: VARYING
_186: [1, +INF]
_187: VARYING
_188: [0, +INF]
carry_189: [0, 1]
_190: [0, +INF]
_194: VARYING
_196: VARYING
_199: VARYING
_200: VARYING
_201: VARYING
_202: [0, 65528]
_203: ~[0B, 0B]  EQUIVALENCES: { _12 } (1 elements)
_214: VARYING
_215: [-32768, 32767]
_216: [-1, 65534]
exponent_difference_217: [-1, 65534]
exponent_difference_218: [1, 1]
_221: [0, +INF]
_222: [1, 1]
_223: [0, +INF]
_224: VARYING
_225: [1, 1]
mantissa_226: ~[0B, 0B]
_227: VARYING
_244: [_470, +INF]  EQUIVALENCES: { _933 } (1 elements)
_245: ~[0B, 0B]  EQUIVALENCES: { _12 } (1 elements)
_246: [1, +INF]
i_247: [0, 1]
i_248: [1, 1]
.MEM_251: VARYING
.MEM_252: VARYING
_255: [0, +INF]
.MEM_256: VARYING
.MEM_259: VARYING
.MEM_262: VARYING
.MEM_263: VARYING
.MEM_264: VARYING
.MEM_268: VARYING
.MEM_269: VARYING
.MEM_270: VARYING
.MEM_271: VARYING
.MEM_331: VARYING
_334: ~[0B, 0B]  EQUIVALENCES: { _12 } (1 elements)
.MEM_353: VARYING
_356: ~[0B, 0B]  EQUIVALENCES: { _12 _410 _609 } (3 elements)
accum_357: VARYING
_358: [0, 1]
accum_359: [0, 32767]
_369: ~[0B, 0B]
accum_370: VARYING
_371: [0, 1]
accum_372: [0, 32767]
accum_373: [32768, +INF]
accum_374: [0, +INF]
_382: ~[0B, 0B]
accum_383: VARYING
_384: [0, 1]
accum_385: [0, 32767]
accum_386: [32768, +INF]
accum_387: [0, +INF]
_395: ~[0B, 0B]
accum_396: VARYING
_397: [0, 1]
accum_398: [0, 32767]
accum_399: [32768, +INF]
accum_400: [0, +INF]
_407: ~[0B, 0B]  EQUIVALENCES: { _12 } (1 elements)
_408: VARYING
_409: [0, 65535]
_410: ~[0B, 0B]  EQUIVALENCES: { _12 _609 } (2 elements)
_417: VARYING
_418: [0, 65535]
n_419: [0, 65535]
_425: ~[0B, 0B]  EQUIVALENCES: { _12 _407 } (2 elements)
_426: VARYING
_427: [0, 65535]
n_428: [0, 65535]
_434: ~[0B, 0B]  EQUIVALENCES: { _12 _407 _425 } (3 elements)
_435: VARYING
_436: [0, 65535]
n_437: [0, 65535]
_455: ~[0B, 0B]  EQUIVALENCES: { _13 _482 } (2 elements)
_456: VARYING
_457: [0, 65535]
_458: ~[0B, 0B]
_464: ~[0B, 0B]  EQUIVALENCES: { _13 _482 } (2 elements)
_465: VARYING
_466: [0, 65535]
n_467: [0, 65535]
_470: [0, _933]  EQUIVALENCES: { _932 } (1 elements)
_473: ~[0B, 0B]  EQUIVALENCES: { _13 _482 } (2 elements)
_474: VARYING
_475: [0, 65535]
n_476: [0, 65535]
_479: [_181, +INF]  EQUIVALENCES: { _929 } (1 elements)
_482: ~[0B, 0B]  EQUIVALENCES: { _13 } (1 elements)
_483: VARYING
_484: [0, 65535]
n_485: [0, 65535]
_488: VARYING
_489: VARYING
_492: ~[0B, 0B]
accum_493: VARYING
_494: [0, 32768]
accum_495: [0, +INF]
accum_496: [1, +INF]
accum_497: [0, +INF]
_505: ~[0B, 0B]
accum_506: VARYING
_507: [0, 32768]
accum_508: [0, +INF]
accum_509: [1, +INF]
accum_510: [0, +INF]
_518: ~[0B, 0B]
accum_519: VARYING
_520: [0, 32768]
accum_521: [0, +INF]
accum_522: [1, +INF]
accum_523: [0, +INF]
_531: [0, 1]
_532: ~[0B, 0B]  EQUIVALENCES: { _12 } (1 elements)
_533: [0, 0]
accum_534: [0, 65534]
accum_535: [1, +INF]
accum_536: [0, +INF]
.MEM_541: VARYING
accum_544: VARYING
accum_545: VARYING
_546: [0, 32768]
accum_547: [0, +INF]
_549: [0, _925]  EQUIVALENCES: { _924 } (1 elements)
_553: [0, +INF]
_554: [0, +INF]
_557: [0, 1]
accum_558: VARYING
_559: [0, 32768]
accum_560: [0, +INF]
accum_561: [1, +INF]
accum_562: [0, +INF]
accum_570: [0, 32767]
accum_571: VARYING
_572: [0, 32768]
accum_573: [0, +INF]
accum_574: [1, +INF]
accum_575: [0, +INF]
.MEM_583: VARYING
accum_584: VARYING
_585: [0, 32768]
accum_586: [0, +INF]
accum_587: [1, +INF]
accum_588: [0, +INF]
_592: VARYING
_593: VARYING
_596: ~[0B, 0B]  EQUIVALENCES: { _12 } (1 elements)
accum_597: VARYING
_598: [0, 1]
accum_599: [0, 32767]
accum_600: [32768, +INF]
accum_601: [0, +INF]
_609: ~[0B, 0B]  EQUIVALENCES: { _12 } (1 elements)
accum_610: VARYING
_611: [0, 1]
accum_612: [0, 32767]
accum_613: [32768, +INF]
accum_614: [0, +INF]
_622: ~[0B, 0B]  EQUIVALENCES: { _12 _609 } (2 elements)
accum_623: VARYING
_624: [0, 1]
accum_625: [0, 32767]
accum_626: [32768, +INF]
accum_627: [0, +INF]
_635: ~[0B, 0B]  EQUIVALENCES: { _12 _609 } (2 elements)
accum_636: VARYING
_637: [0, 1]
accum_638: [0, 32767]
accum_639: [32768, +INF]
accum_640: [0, +INF]
_648: ~[0B, 0B]  EQUIVALENCES: { _12 } (1 elements)
accum_649: VARYING
_650: [0, 1]
accum_651: [0, 32767]
accum_652: [32768, +INF]
accum_653: [0, +INF]
_661: ~[0B, 0B]
accum_662: VARYING
_663: [0, 1]
accum_664: [0, 32767]
accum_665: [32768, +INF]
accum_666: [0, +INF]
_674: ~[0B, 0B]
accum_675: VARYING
_676: [0, 1]
accum_677: [0, 32767]
accum_678: [32768, +INF]
accum_679: [0, +INF]
_687: ~[0B, 0B]
accum_688: VARYING
_689: [0, 1]
accum_690: [0, 32767]
accum_691: [32768, +INF]
accum_692: [0, +INF]
.MEM_697: VARYING
_698: VARYING
_699: VARYING
accum_700: [0, 65535]
_701: [0, 65535]
accum_702: [0, 131070]
_704: ~[0B, 0B]  EQUIVALENCES: { _12 } (1 elements)
_705: [0, 1]
_706: [0, 1]
_707: [0, 1]
_708: [0, +INF]
_712: VARYING
_713: VARYING
_714: VARYING
_715: VARYING
accum_716: [0, 65535]
_717: [0, 65535]
accum_718: [0, 131070]
_719: [0, 1]
accum_720: [0, 131071]
_721: [0, 1]
_722: [0, 1]
_723: [0, 1]
_724: [0, +INF]
_728: VARYING
_729: [0, +INF]
_730: VARYING
_731: VARYING
accum_732: [0, 65535]
_733: [0, 65535]
accum_734: [0, 131070]
_735: [0, 1]
accum_736: [0, 131071]
_737: [0, 1]
_738: [0, 1]
_739: [0, 1]
_740: [0, +INF]
_744: [0, +INF]
_745: [0, +INF]
_746: VARYING
_747: VARYING
accum_748: [0, 65535]
_749: [0, 65535]
accum_750: [0, 131070]
_751: [0, 1]
accum_752: [0, 131071]
_753: [0, 1]
_754: [0, 1]
_755: [0, 1]
_756: [0, +INF]
.MEM_761: VARYING
_764: ~[0B, 0B]  EQUIVALENCES: { _12 } (1 elements)
accum_765: VARYING
_766: [0, 1]
accum_767: [0, 32767]
_769: [0, +INF]
_773: [0, +INF]
_774: [0, +INF]
_777: ~[0B, 0B]  EQUIVALENCES: { _12 } (1 elements)
accum_778: VARYING
_779: [0, 1]
accum_780: [0, 32767]
accum_781: [32768, +INF]
accum_782: [0, +INF]
_790: ~[0B, 0B]  EQUIVALENCES: { _12 } (1 elements)
accum_791: VARYING
_792: [0, 1]
accum_793: [0, 32767]
accum_794: [32768, +INF]
accum_795: [0, +INF]
_803: ~[0B, 0B]  EQUIVALENCES: { _12 } (1 elements)
accum_804: VARYING
_805: [0, 1]
accum_806: [0, 32767]
accum_807: [32768, +INF]
accum_808: [0, +INF]
_851: ~[0B, 0B]  EQUIVALENCES: { _14 _69 } (2 elements)
_852: VARYING
_853: [0, 65535]
.MEM_854: VARYING
i_860: [0, arraysize_31(D) + 18446744073709551615]  EQUIVALENCES: { i_20 } (1 elements)
_861: VARYING
_862: [0, 65535]
n_863: [0, 65535]
i_869: [0, 63]  EQUIVALENCES: { i_144 } (1 elements)
_870: VARYING
_871: [0, 65535]
n_872: [0, 65535]
_878: [0, 32767]  EQUIVALENCES: { _173 } (1 elements)
_879: VARYING
_880: [0, 65535]
n_881: [0, 65535]
_887: [1, 1]  EQUIVALENCES: { _225 } (1 elements)
_888: VARYING
_889: [0, 65535]
carry_890: [0, 0]
i_896: [0, 0]  EQUIVALENCES: { i_247 } (1 elements)
_897: VARYING
_898: [0, 65535]
n_899: [0, 65535]
_905: [0, _921]  EQUIVALENCES: { _920 } (1 elements)
_906: VARYING
_907: [0, 65535]
n_908: [0, 65535]
_914: [_905, +INF]  EQUIVALENCES: { _921 } (1 elements)
_915: VARYING
_916: [0, 65535]
n_917: [0, 65535]
_920: VARYING
_921: VARYING
_924: VARYING
_925: VARYING
_928: VARYING
_929: VARYING
_932: VARYING
_933: VARYING


Simplified relational if (i_144 <= 63)
 into if (i_144 != 64)

Simplified relational if (exponent_difference_217 < 0)
 into if (exponent_difference_217 == -1)

Simplified relational if (i_247 <= 0)
 into if (i_247 == 0)

Removing basic block 81
Removing basic block 80
Removing basic block 79
Removing basic block 84
Merging blocks 28 and 29
Removing basic block 83
Removing basic block 103
Removing basic block 104
Removing basic block 105
Removing basic block 106
Removing basic block 107
Removing basic block 108
Removing basic block 109
Removing basic block 110
Merging blocks 113 and 88
Merging blocks 115 and 47

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_210 -> { .MEM_269 }
.MEM_213 -> { .MEM_259 }
.MEM_265 -> { .MEM_269 }
_266 -> { _216 }
i_319 -> { i_144 }
.MEM_323 -> { .MEM_259 }
i_327 -> { i_144 }
i_338 -> { i_247 }
exponent_difference_345 -> { exponent_difference_217 }
_361 -> { _215 }
_365 -> { _214 }
.MEM_366 -> { .MEM_264 }

SSA names to release after updating the SSA web

_214 _215 _216 exponent_difference_217 .MEM_264 
Incremental SSA update started at block: 6
Number of blocks in CFG: 100
Number of blocks to update: 11 ( 11%)


DoEmFloatIteration (struct InternalFPF * abase, struct InternalFPF * bbase, struct InternalFPF * cbase, long unsigned int arraysize, long unsigned int loops)
{
  int i;
  short unsigned int carry;
  short unsigned int * mantissa;
  short unsigned int accum;
  int i;
  int i;
  int i;
  int n;
  long int exponent_difference;
  int i;
  int i;
  int j;
  short unsigned int carry;
  short unsigned int extra_bits[4];
  struct InternalFPF locy;
  int i;
  int n;
  int i;
  int n;
  int i;
  int i;
  short unsigned int accum;
  int i;
  unsigned int accum;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  short unsigned int accum;
  int i;
  int n;
  int i;
  long unsigned int i;
  static unsigned char jtable[16] = {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
  long unsigned int elapsed;
  long unsigned int _1;
  unsigned char _2;
  long unsigned int _3;
  struct InternalFPF * _4;
  struct InternalFPF * _5;
  struct InternalFPF * _6;
  long unsigned int _7;
  struct InternalFPF * _8;
  struct InternalFPF * _9;
  struct InternalFPF * _10;
  long unsigned int _11;
  struct InternalFPF * _12;
  struct InternalFPF * _13;
  struct InternalFPF * _14;
  long unsigned int _15;
  struct InternalFPF * _16;
  struct InternalFPF * _17;
  struct InternalFPF * _18;
  long unsigned int _30;
  unsigned char _40;
  int _41;
  int _42;
  unsigned char _43;
  int _44;
  int _45;
  long unsigned int _46;
  unsigned char _47;
  unsigned char _48;
  unsigned char _49;
  long unsigned int _50;
  unsigned char _51;
  unsigned char _52;
  unsigned char _53;
  long unsigned int _56;
  long unsigned int _57;
  unsigned char _82;
  unsigned char _83;
  unsigned char _84;
  unsigned char _85;
  unsigned char _86;
  short int _87;
  unsigned short _88;
  short int _89;
  unsigned short _90;
  unsigned short _91;
  short int _92;
  short unsigned int _106;
  short unsigned int _113;
  short unsigned int[4] * _121;
  short unsigned int[4] * _157;
  short int _169;
  unsigned short _170;
  unsigned short _171;
  short int _172;
  short unsigned int _173;
  signed short _174;
  short unsigned int _185;
  short unsigned int _186;
  unsigned char _187;
  unsigned char _188;
  short unsigned int _190;
  long unsigned int _194;
  long unsigned int _196;
  long unsigned int _199;
  unsigned char _200;
  short unsigned int _201;
  short unsigned int _202;
  unsigned short _221;
  unsigned short _223;
  short int _224;
  unsigned char _227;
  short unsigned int _246;
  short unsigned int _255;
  int _266;
  short unsigned int _358;
  int _361;
  short int _365;
  short unsigned int * _369;
  short unsigned int _371;
  short unsigned int * _382;
  short unsigned int _384;
  short unsigned int * _395;
  short unsigned int _397;
  short unsigned int _408;
  int _409;
  short unsigned int _417;
  int _418;
  short unsigned int _426;
  int _427;
  short unsigned int _435;
  int _436;
  short unsigned int _456;
  int _457;
  short unsigned int[4] * _458;
  short unsigned int _465;
  int _466;
  short unsigned int _474;
  int _475;
  short unsigned int _483;
  int _484;
  signed short _488;
  signed short _489;
  short unsigned int * _492;
  short unsigned int _494;
  short unsigned int * _505;
  short unsigned int _507;
  short unsigned int * _518;
  short unsigned int _520;
  short unsigned int _531;
  short unsigned int _546;
  short unsigned int _553;
  short unsigned int _554;
  short unsigned int _557;
  short unsigned int _559;
  short unsigned int _572;
  short unsigned int _585;
  signed short _592;
  signed short _593;
  short unsigned int _598;
  short unsigned int _611;
  short unsigned int _624;
  short unsigned int _637;
  short unsigned int _650;
  short unsigned int * _661;
  short unsigned int _663;
  short unsigned int * _674;
  short unsigned int _676;
  short unsigned int * _687;
  short unsigned int _689;
  short unsigned int _698;
  short unsigned int _699;
  unsigned int _701;
  unsigned int _705;
  short unsigned int _706;
  short unsigned int _707;
  short unsigned int _708;
  signed short _712;
  signed short _713;
  short unsigned int _714;
  short unsigned int _715;
  unsigned int _717;
  unsigned int _719;
  unsigned int _721;
  short unsigned int _722;
  short unsigned int _723;
  short unsigned int _724;
  signed short _728;
  short unsigned int _729;
  short unsigned int _730;
  short unsigned int _731;
  unsigned int _733;
  unsigned int _735;
  unsigned int _737;
  short unsigned int _738;
  short unsigned int _739;
  short unsigned int _740;
  short unsigned int _744;
  short unsigned int _745;
  short unsigned int _746;
  short unsigned int _747;
  unsigned int _749;
  unsigned int _751;
  unsigned int _753;
  short unsigned int _754;
  short unsigned int _755;
  short unsigned int _756;
  short unsigned int _766;
  short unsigned int _769;
  short unsigned int _773;
  short unsigned int _774;
  short unsigned int _779;
  short unsigned int _792;
  short unsigned int _805;
  short unsigned int _852;
  int _853;
  short unsigned int _861;
  int _862;
  short unsigned int _870;
  int _871;
  short unsigned int _879;
  int _880;
  short unsigned int _888;
  int _889;
  short unsigned int _897;
  int _898;
  short unsigned int _906;
  int _907;
  short unsigned int _915;
  int _916;
  short unsigned int _920;
  short unsigned int _921;
  short unsigned int _924;
  short unsigned int _925;
  short unsigned int _928;
  short unsigned int _929;
  short unsigned int _932;
  short unsigned int _933;

  <bb 2> [0.39%]:
  elapsed_26 = StartStopwatch ();
  goto <bb 95>; [100.00%]

  <bb 3> [12.51%]:
  _1 = i_20 & 15;
  _2 = jtable[_1];
  switch (_2) <default: <L6> [20.00%], case 0: <L2> [20.00%], case 1: <L3> [20.00%], case 2: <L4> [20.00%], case 3: <L5> [20.00%]>

<L2> [2.50%]:
  _3 = i_20 * 12;
  _4 = cbase_32(D) + _3;
  _5 = bbase_33(D) + _3;
  _6 = abase_34(D) + _3;
  AddSubInternalFPF (0, _6, _5, _4);
  goto <bb 93> (<L6>); [100.00%]

<L3> [2.50%]:
  _7 = i_20 * 12;
  _8 = cbase_32(D) + _7;
  _9 = bbase_33(D) + _7;
  _10 = abase_34(D) + _7;
  AddSubInternalFPF (1, _10, _9, _8);
  goto <bb 93> (<L6>); [100.00%]

<L4> [2.50%]:
  _11 = i_20 * 12;
  _12 = cbase_32(D) + _11;
  _13 = bbase_33(D) + _11;
  _14 = abase_34(D) + _11;
  _40 = _14->type;
  _41 = (int) _40;
  _42 = _41 * 5;
  _43 = _13->type;
  _44 = (int) _43;
  _45 = _42 + _44;
  switch (_45) <default: <L20> [12.50%], case 0 ... 2: <L13> [12.50%], case 3: <L15> [12.50%], case 4: <L17> [12.50%], case 5: <L14> [12.50%], case 6 ... 7: <L18> [12.50%], case 8: <L14> [12.50%], case 9: <L17> [12.50%], case 10: <L14> [12.50%], case 11 ... 12: <L18> [12.50%], case 13: <L14> [12.50%], case 14: <L17> [12.50%], case 15: <L15> [12.50%], case 16 ... 18: <L13> [12.50%], case 19: <L17> [12.50%], case 20 ... 23: <L16> [12.50%], case 24: <L25> [12.50%]>

<L25> [0.31%]:
  _920 = _14->mantissa[0];
  _921 = _13->mantissa[0];
  if (_920 > _921)
    goto <bb 72>; [5.00%]
  else
    goto <bb 8>; [95.00%]

  <bb 8> [0.30%]:
  if (_920 < _921)
    goto <bb 73>; [5.00%]
  else
    goto <bb 9>; [95.00%]

  <bb 9> [0.29%]:
  _924 = _14->mantissa[1];
  _925 = _13->mantissa[1];
  if (_924 > _925)
    goto <bb 72>; [5.00%]
  else
    goto <bb 10>; [95.00%]

  <bb 10> [0.27%]:
  if (_924 < _925)
    goto <bb 73>; [5.00%]
  else
    goto <bb 11>; [95.00%]

  <bb 11> [0.26%]:
  _928 = _14->mantissa[2];
  _929 = _13->mantissa[2];
  if (_928 > _929)
    goto <bb 72>; [5.00%]
  else
    goto <bb 12>; [95.00%]

  <bb 12> [0.25%]:
  if (_928 < _929)
    goto <bb 73>; [5.00%]
  else
    goto <bb 13>; [95.00%]

  <bb 13> [0.24%]:
  _932 = _14->mantissa[3];
  _933 = _13->mantissa[3];
  if (_932 > _933)
    goto <bb 72>; [5.00%]
  else
    goto <bb 14>; [95.00%]

  <bb 14> [0.23%]:
  if (_932 < _933)
    goto <bb 73>; [5.00%]
  else
    goto <bb 74>; [95.00%]

<L13> [0.31%]:
  _46 = __builtin_object_size (_14, 0);
  __builtin_memmove (_14, _12, 12);
  _47 = _12->sign;
  _48 = _13->sign;
  _49 = _47 ^ _48;
  _12->sign = _49;
  goto <bb 75> (<L20>); [100.00%]

<L14> [0.31%]:
  _50 = __builtin_object_size (_13, 0);
  __builtin_memmove (_13, _12, 12);
  _51 = _12->sign;
  _52 = _14->sign;
  _53 = _51 ^ _52;
  _12->sign = _53;
  goto <bb 75> (<L20>); [100.00%]

<L15> [0.31%]:
  _12->type = 4;
  _12->exp = 32767;
  _12->sign = 1;
  _12->mantissa[0] = 16384;
  _12->mantissa[1] = 0;
  _12->mantissa[2] = 0;
  _12->mantissa[3] = 0;
  goto <bb 75> (<L20>); [100.00%]

<L16> [0.31%]:
  _56 = __builtin_object_size (_14, 0);
  __builtin_memmove (_14, _12, 12);
  goto <bb 75> (<L20>); [100.00%]

<L17> [0.31%]:
  _57 = __builtin_object_size (_13, 0);
  __builtin_memmove (_13, _12, 12);
  goto <bb 75> (<L20>); [100.00%]

<L18> [0.31%]:
  __builtin_memcpy (&locy, _13, 12);
  _888 = MEM[(short unsigned int *)_14 + 4B];
  _889 = (int) _888;
  _897 = MEM[(short unsigned int *)_14 + 6B];
  _898 = (int) _897;
  _106 = _888 | _897;
  n_899 = (int) _106;
  _906 = MEM[(short unsigned int *)_14 + 8B];
  _907 = (int) _906;
  _774 = _106 | _906;
  n_908 = (int) _774;
  _915 = MEM[(short unsigned int *)_14 + 10B];
  _916 = (int) _915;
  _773 = _774 | _915;
  n_917 = (int) _773;
  if (_773 == 0)
    goto <bb 22>; [50.00%]
  else
    goto <bb 21>; [50.00%]

  <bb 21> [0.16%]:
  _852 = MEM[(short unsigned int *)_13 + 4B];
  _853 = (int) _852;
  _861 = MEM[(short unsigned int *)_13 + 6B];
  _862 = (int) _861;
  _769 = _852 | _861;
  n_863 = (int) _769;
  _870 = MEM[(short unsigned int *)_13 + 8B];
  _871 = (int) _870;
  _255 = _769 | _870;
  n_872 = (int) _255;
  _879 = MEM[(short unsigned int *)_13 + 10B];
  _880 = (int) _879;
  _113 = _255 | _879;
  n_881 = (int) _113;
  if (_113 == 0)
    goto <bb 22>; [50.00%]
  else
    goto <bb 23>; [50.00%]

  <bb 22> [0.23%]:
  _12->type = 3;
  _12->sign = 0;
  _12->exp = -32767;
  _12->mantissa[0] = 0;
  _12->mantissa[1] = 0;
  _12->mantissa[2] = 0;
  _12->mantissa[3] = 0;

  <bb 23> [0.31%]:
  _82 = _14->type;
  if (_82 == 1)
    goto <bb 25>; [34.00%]
  else
    goto <bb 24>; [66.00%]

  <bb 24> [0.21%]:
  _83 = _13->type;
  if (_83 == 1)
    goto <bb 25>; [34.00%]
  else
    goto <bb 26>; [66.00%]

  <bb 25> [0.18%]:
  _12->type = 1;
  goto <bb 27>; [100.00%]

  <bb 26> [0.14%]:
  _12->type = 2;

  <bb 27> [0.31%]:
  _84 = _14->sign;
  _85 = _13->sign;
  _86 = _84 ^ _85;
  _12->sign = _86;
  _87 = _14->exp;
  _88 = (unsigned short) _87;
  _89 = _13->exp;
  _90 = (unsigned short) _89;
  _91 = _88 + _90;
  _92 = (short int) _91;
  _12->exp = _92;
  _12->mantissa[0] = 0;
  extra_bits[0] = 0;
  _12->mantissa[1] = 0;
  extra_bits[1] = 0;
  _12->mantissa[2] = 0;
  extra_bits[2] = 0;
  _12->mantissa[3] = 0;
  extra_bits[3] = 0;
  goto <bb 99>; [100.00%]

  <bb 28> [6.80%]:
  _698 = _14->mantissa[3];
  _699 = _12->mantissa[3];
  accum_700 = (unsigned int) _699;
  _701 = (unsigned int) _698;
  accum_702 = accum_700 + _701;
  _705 = accum_702 >> 16;
  _706 = (short unsigned int) _705;
  _707 = _706;
  _708 = _698 + _699;
  MEM[(short unsigned int *)_12].mantissa[3] = _708;
  _714 = _14->mantissa[2];
  _715 = _12->mantissa[2];
  accum_716 = (unsigned int) _715;
  _717 = (unsigned int) _714;
  accum_718 = accum_716 + _717;
  _719 = (unsigned int) _707;
  accum_720 = accum_718 + _719;
  _721 = accum_720 >> 16;
  _722 = (short unsigned int) _721;
  _723 = _722;
  _724 = (short unsigned int) accum_720;
  MEM[(short unsigned int *)_12].mantissa[2] = _724;
  _730 = _14->mantissa[1];
  _731 = _12->mantissa[1];
  accum_732 = (unsigned int) _731;
  _733 = (unsigned int) _730;
  accum_734 = accum_732 + _733;
  _735 = (unsigned int) _723;
  accum_736 = accum_734 + _735;
  _737 = accum_736 >> 16;
  _738 = (short unsigned int) _737;
  _739 = _738;
  _740 = (short unsigned int) accum_736;
  MEM[(short unsigned int *)_12].mantissa[1] = _740;
  _746 = _14->mantissa[0];
  _747 = _12->mantissa[0];
  accum_748 = (unsigned int) _747;
  _749 = (unsigned int) _746;
  accum_750 = accum_748 + _749;
  _751 = (unsigned int) _739;
  accum_752 = accum_750 + _751;
  _753 = accum_752 >> 16;
  _754 = (short unsigned int) _753;
  _755 = _754;
  _756 = (short unsigned int) accum_752;
  MEM[(short unsigned int *)_12].mantissa[0] = _756;
  _121 = &_12->mantissa;
  accum_649 = MEM[(short unsigned int *)_12 + 4B];
  _650 = accum_649 & 1;
  accum_651 = accum_649 >> 1;
  if (_755 != 0)
    goto <bb 29>; [80.00%]
  else
    goto <bb 30>; [20.00%]

  <bb 29> [10.00%]:
  accum_652 = accum_651 | 32768;

  <bb 30> [20.00%]:
  # accum_653 = PHI <accum_651(28), accum_652(29), accum_570(53)>
  # _531 = PHI <_650(28), _650(29), _557(53)>
  MEM[(short unsigned int *)_12 + 4B] = accum_653;
  _661 = &MEM[(void *)_12 + 6B];
  accum_662 = MEM[(short unsigned int *)_12 + 6B];
  _663 = accum_662 & 1;
  accum_664 = accum_662 >> 1;
  if (_531 != 0)
    goto <bb 31>; [50.00%]
  else
    goto <bb 32>; [50.00%]

  <bb 31> [10.00%]:
  accum_665 = accum_664 | 32768;

  <bb 32> [20.00%]:
  # accum_666 = PHI <accum_664(30), accum_665(31)>
  MEM[(short unsigned int *)_12 + 6B] = accum_666;
  _674 = &MEM[(void *)_12 + 8B];
  accum_675 = MEM[(short unsigned int *)_12 + 8B];
  _676 = accum_675 & 1;
  accum_677 = accum_675 >> 1;
  if (_663 != 0)
    goto <bb 33>; [50.00%]
  else
    goto <bb 34>; [50.00%]

  <bb 33> [10.00%]:
  accum_678 = accum_677 | 32768;

  <bb 34> [20.00%]:
  # accum_679 = PHI <accum_677(32), accum_678(33)>
  MEM[(short unsigned int *)_12 + 8B] = accum_679;
  _687 = &MEM[(void *)_12 + 10B];
  accum_688 = MEM[(short unsigned int *)_12 + 10B];
  _689 = accum_688 & 1;
  accum_690 = accum_688 >> 1;
  if (_676 != 0)
    goto <bb 35>; [50.00%]
  else
    goto <bb 36>; [50.00%]

  <bb 35> [10.00%]:
  accum_691 = accum_690 | 32768;

  <bb 36> [20.00%]:
  # accum_692 = PHI <accum_690(34), accum_691(35)>
  MEM[(short unsigned int *)_12 + 10B] = accum_692;
  accum_597 = MEM[(short unsigned int *)&extra_bits];
  _598 = accum_597 & 1;
  accum_599 = accum_597 >> 1;
  if (_689 != 0)
    goto <bb 37>; [50.00%]
  else
    goto <bb 38>; [50.00%]

  <bb 37> [10.00%]:
  accum_600 = accum_599 | 32768;

  <bb 38> [20.00%]:
  # accum_601 = PHI <accum_599(36), accum_600(37)>
  MEM[(short unsigned int *)&extra_bits] = accum_601;
  accum_610 = MEM[(short unsigned int *)&extra_bits + 2B];
  _611 = accum_610 & 1;
  accum_612 = accum_610 >> 1;
  if (_598 != 0)
    goto <bb 39>; [50.00%]
  else
    goto <bb 40>; [50.00%]

  <bb 39> [10.00%]:
  accum_613 = accum_612 | 32768;

  <bb 40> [20.00%]:
  # accum_614 = PHI <accum_612(38), accum_613(39)>
  MEM[(short unsigned int *)&extra_bits + 2B] = accum_614;
  accum_623 = MEM[(short unsigned int *)&extra_bits + 4B];
  _624 = accum_623 & 1;
  accum_625 = accum_623 >> 1;
  if (_611 != 0)
    goto <bb 41>; [50.00%]
  else
    goto <bb 42>; [50.00%]

  <bb 41> [10.00%]:
  accum_626 = accum_625 | 32768;

  <bb 42> [20.00%]:
  # accum_627 = PHI <accum_625(40), accum_626(41)>
  MEM[(short unsigned int *)&extra_bits + 4B] = accum_627;
  accum_636 = MEM[(short unsigned int *)&extra_bits + 6B];
  _637 = accum_636 & 1;
  accum_638 = accum_636 >> 1;
  if (_624 != 0)
    goto <bb 43>; [50.00%]
  else
    goto <bb 44>; [50.00%]

  <bb 43> [10.00%]:
  accum_639 = accum_638 | 32768;

  <bb 44> [20.00%]:
  # accum_640 = PHI <accum_638(42), accum_639(43)>
  MEM[(short unsigned int *)&extra_bits + 6B] = accum_640;
  i_145 = i_319 + 1;

  <bb 45> [20.00%]:
  # i_144 = PHI <i_145(44)>
  if (i_144 != 64)
    goto <bb 46>; [98.44%]
  else
    goto <bb 62>; [1.56%]

  <bb 46> [20.00%]:
  # i_319 = PHI <i_144(45), i_327(99)>
  accum_765 = MEM[(short unsigned int *)&locy + 4B];
  _766 = accum_765 & 1;
  accum_767 = accum_765 >> 1;
  MEM[(short unsigned int *)&locy + 4B] = accum_767;
  accum_778 = MEM[(short unsigned int *)&locy + 6B];
  _779 = accum_778 & 1;
  accum_780 = accum_778 >> 1;
  if (_766 != 0)
    goto <bb 47>; [50.00%]
  else
    goto <bb 48>; [50.00%]

  <bb 47> [10.00%]:
  accum_781 = accum_780 | 32768;

  <bb 48> [20.00%]:
  # accum_782 = PHI <accum_780(46), accum_781(47)>
  MEM[(short unsigned int *)&locy + 6B] = accum_782;
  accum_791 = MEM[(short unsigned int *)&locy + 8B];
  _792 = accum_791 & 1;
  accum_793 = accum_791 >> 1;
  if (_779 != 0)
    goto <bb 49>; [50.00%]
  else
    goto <bb 50>; [50.00%]

  <bb 49> [10.00%]:
  accum_794 = accum_793 | 32768;

  <bb 50> [20.00%]:
  # accum_795 = PHI <accum_793(48), accum_794(49)>
  MEM[(short unsigned int *)&locy + 8B] = accum_795;
  accum_804 = MEM[(short unsigned int *)&locy + 10B];
  _805 = accum_804 & 1;
  accum_806 = accum_804 >> 1;
  if (_792 != 0)
    goto <bb 51>; [50.00%]
  else
    goto <bb 52>; [50.00%]

  <bb 51> [10.00%]:
  accum_807 = accum_806 | 32768;

  <bb 52> [20.00%]:
  # accum_808 = PHI <accum_806(50), accum_807(51)>
  MEM[(short unsigned int *)&locy + 10B] = accum_808;
  if (_805 != 0)
    goto <bb 28>; [34.00%]
  else
    goto <bb 53>; [66.00%]

  <bb 53> [13.20%]:
  _458 = &_12->mantissa;
  accum_544 = MEM[(short unsigned int *)_12 + 4B];
  _557 = accum_544 & 1;
  accum_570 = accum_544 >> 1;
  goto <bb 30>; [100.00%]

  <bb 54> [0.89%]:
  accum_496 = accum_495 | 1;

  <bb 55> [1.77%]:
  # accum_497 = PHI <accum_495(69), accum_496(54)>
  MEM[(short unsigned int *)_12 + 10B] = accum_497;
  _505 = &MEM[(void *)_12 + 8B];
  accum_506 = MEM[(short unsigned int *)_12 + 8B];
  _507 = accum_506 & 32768;
  accum_508 = accum_506 << 1;
  _592 = (signed short) accum_493;
  if (_592 < 0)
    goto <bb 56>; [50.00%]
  else
    goto <bb 57>; [50.00%]

  <bb 56> [0.89%]:
  accum_509 = accum_508 | 1;

  <bb 57> [1.77%]:
  # accum_510 = PHI <accum_508(55), accum_509(56)>
  MEM[(short unsigned int *)_12 + 8B] = accum_510;
  _518 = &MEM[(void *)_12 + 6B];
  accum_519 = MEM[(short unsigned int *)_12 + 6B];
  _520 = accum_519 & 32768;
  accum_521 = accum_519 << 1;
  _489 = (signed short) accum_506;
  if (_489 < 0)
    goto <bb 58>; [50.00%]
  else
    goto <bb 59>; [50.00%]

  <bb 58> [0.89%]:
  accum_522 = accum_521 | 1;

  <bb 59> [1.77%]:
  # accum_523 = PHI <accum_521(57), accum_522(58)>
  MEM[(short unsigned int *)_12 + 6B] = accum_523;
  accum_534 = _173 << 1;
  _488 = (signed short) accum_519;
  if (_488 < 0)
    goto <bb 60>; [50.00%]
  else
    goto <bb 61>; [50.00%]

  <bb 60> [0.89%]:
  accum_535 = accum_534 | 1;

  <bb 61> [1.77%]:
  # accum_536 = PHI <accum_534(59), accum_535(60)>
  MEM[(short unsigned int *)_12 + 4B] = accum_536;
  _169 = _12->exp;
  _170 = (unsigned short) _169;
  _171 = _170 + 65535;
  _172 = (short int) _171;
  _12->exp = _172;

  <bb 62> [2.09%]:
  _173 = _12->mantissa[0];
  _174 = (signed short) _173;
  if (_174 >= 0)
    goto <bb 63>; [85.00%]
  else
    goto <bb 70>; [15.00%]

  <bb 63> [1.78%]:
  accum_545 = MEM[(short unsigned int *)&extra_bits + 6B];
  _546 = accum_545 & 32768;
  accum_547 = accum_545 << 1;
  MEM[(short unsigned int *)&extra_bits + 6B] = accum_547;
  accum_558 = MEM[(short unsigned int *)&extra_bits + 4B];
  _559 = accum_558 & 32768;
  accum_560 = accum_558 << 1;
  _728 = (signed short) accum_545;
  if (_728 < 0)
    goto <bb 64>; [50.00%]
  else
    goto <bb 65>; [50.00%]

  <bb 64> [0.89%]:
  accum_561 = accum_560 | 1;

  <bb 65> [1.78%]:
  # accum_562 = PHI <accum_560(63), accum_561(64)>
  MEM[(short unsigned int *)&extra_bits + 4B] = accum_562;
  accum_571 = MEM[(short unsigned int *)&extra_bits + 2B];
  _572 = accum_571 & 32768;
  accum_573 = accum_571 << 1;
  _713 = (signed short) accum_558;
  if (_713 < 0)
    goto <bb 66>; [50.00%]
  else
    goto <bb 67>; [50.00%]

  <bb 66> [0.89%]:
  accum_574 = accum_573 | 1;

  <bb 67> [1.78%]:
  # accum_575 = PHI <accum_573(65), accum_574(66)>
  MEM[(short unsigned int *)&extra_bits + 2B] = accum_575;
  accum_584 = MEM[(short unsigned int *)&extra_bits];
  _585 = accum_584 & 32768;
  accum_586 = accum_584 << 1;
  _712 = (signed short) accum_571;
  if (_712 < 0)
    goto <bb 68>; [50.00%]
  else
    goto <bb 69>; [50.00%]

  <bb 68> [0.89%]:
  accum_587 = accum_586 | 1;

  <bb 69> [1.78%]:
  # accum_588 = PHI <accum_586(67), accum_587(68)>
  MEM[(short unsigned int *)&extra_bits] = accum_588;
  _157 = &_12->mantissa;
  _492 = &MEM[(void *)_12 + 10B];
  accum_493 = MEM[(short unsigned int *)_12 + 10B];
  _494 = accum_493 & 32768;
  accum_495 = accum_493 << 1;
  _593 = (signed short) accum_584;
  if (_593 < 0)
    goto <bb 54>; [50.00%]
  else
    goto <bb 55>; [50.00%]

  <bb 70> [0.31%]:
  _456 = MEM[(short unsigned int *)&extra_bits];
  _457 = (int) _456;
  _465 = MEM[(short unsigned int *)&extra_bits + 2B];
  _466 = (int) _465;
  _745 = _456 | _465;
  n_467 = (int) _745;
  _474 = MEM[(short unsigned int *)&extra_bits + 4B];
  _475 = (int) _474;
  _744 = _474 | _745;
  n_476 = (int) _744;
  _483 = MEM[(short unsigned int *)&extra_bits + 6B];
  _484 = (int) _483;
  _729 = _483 | _744;
  n_485 = (int) _729;
  if (_729 == 0)
    goto <bb 71>; [50.00%]
  else
    goto <bb 75> (<L20>); [50.00%]

  <bb 71> [0.16%]:
  _185 = _12->mantissa[3];
  _186 = _185 | 1;
  _12->mantissa[3] = _186;
  goto <bb 75> (<L20>); [100.00%]

  <bb 72> [0.05%]:
  _194 = __builtin_object_size (_14, 0);
  __builtin_memmove (_14, _12, 12);
  goto <bb 75> (<L20>); [100.00%]

  <bb 73> [0.04%]:
  _199 = __builtin_object_size (_13, 0);
  __builtin_memmove (_13, _12, 12);
  goto <bb 75> (<L20>); [100.00%]

  <bb 74> [0.23%]:
  _196 = __builtin_object_size (_14, 0);
  __builtin_memmove (_14, _12, 12);

<L20> [2.50%]:
  _187 = _12->type;
  _188 = _187 + 255;
  if (_188 <= 1)
    goto <bb 76>; [24.54%]
  else
    goto <bb 91>; [75.46%]

  <bb 76> [0.61%]:
  _408 = MEM[(short unsigned int *)_12 + 4B];
  _409 = (int) _408;
  _417 = MEM[(short unsigned int *)_12 + 6B];
  _418 = (int) _417;
  _190 = _408 | _417;
  n_419 = (int) _190;
  _426 = MEM[(short unsigned int *)_12 + 8B];
  _427 = (int) _426;
  _554 = _190 | _426;
  n_428 = (int) _554;
  _435 = MEM[(short unsigned int *)_12 + 10B];
  _436 = (int) _435;
  _553 = _435 | _554;
  n_437 = (int) _553;
  if (_553 == 0)
    goto <bb 77>; [33.00%]
  else
    goto <bb 97>; [67.00%]

  <bb 77> [0.20%]:
  __builtin_puts (&"Error:  zero significand in denormalize"[0]);
  goto <bb 97>; [100.00%]

  <bb 78> [0.08%]:
  _221 = (unsigned short) _365;
  _223 = _221 + 1;
  _224 = (short int) _223;
  _12->exp = _224;
  mantissa_226 = &_12->mantissa;
  _227 = _12->type;
  if (_227 != 0)
    goto <bb 98>; [54.00%]
  else
    goto <bb 89>; [46.00%]

  <bb 79> [0.06%]:
  _246 = accum_400 | 1;
  MEM[(short unsigned int *)_12 + 10B] = _246;

  <bb 80> [0.12%]:

  <bb 81> [0.13%]:
  # i_247 = PHI <1(80)>
  if (i_247 == 0)
    goto <bb 82>; [82.69%]
  else
    goto <bb 89>; [17.31%]

  <bb 82> [0.13%]:
  accum_357 = MEM[(short unsigned int *)_12 + 4B];
  _358 = accum_357 & 1;
  accum_359 = accum_357 >> 1;
  MEM[(short unsigned int *)_12 + 4B] = accum_359;
  _369 = &MEM[(void *)_12 + 6B];
  accum_370 = MEM[(short unsigned int *)_12 + 6B];
  _371 = accum_370 & 1;
  accum_372 = accum_370 >> 1;
  if (_358 != 0)
    goto <bb 83>; [50.00%]
  else
    goto <bb 84>; [50.00%]

  <bb 83> [0.06%]:
  accum_373 = accum_372 | 32768;

  <bb 84> [0.13%]:
  # accum_374 = PHI <accum_372(82), accum_373(83)>
  MEM[(short unsigned int *)_12 + 6B] = accum_374;
  _382 = &MEM[(void *)_12 + 8B];
  accum_383 = MEM[(short unsigned int *)_12 + 8B];
  _384 = accum_383 & 1;
  accum_385 = accum_383 >> 1;
  if (_371 != 0)
    goto <bb 85>; [50.00%]
  else
    goto <bb 86>; [50.00%]

  <bb 85> [0.06%]:
  accum_386 = accum_385 | 32768;

  <bb 86> [0.12%]:
  # accum_387 = PHI <accum_385(84), accum_386(85)>
  MEM[(short unsigned int *)_12 + 8B] = accum_387;
  _395 = &MEM[(void *)_12 + 10B];
  accum_396 = MEM[(short unsigned int *)_12 + 10B];
  _397 = accum_396 & 1;
  accum_398 = accum_396 >> 1;
  if (_384 != 0)
    goto <bb 87>; [50.00%]
  else
    goto <bb 88>; [50.00%]

  <bb 87> [0.06%]:
  accum_399 = accum_398 | 32768;

  <bb 88> [0.13%]:
  # accum_400 = PHI <accum_398(86), accum_399(87)>
  MEM[(short unsigned int *)_12 + 10B] = accum_400;
  if (_397 != 0)
    goto <bb 79>; [50.00%]
  else
    goto <bb 80>; [50.00%]

  <bb 89> [0.61%]:
  _200 = _12->type;
  if (_200 != 0)
    goto <bb 90>; [54.00%]
  else
    goto <bb 91>; [46.00%]

  <bb 90> [0.33%]:
  _201 = _12->mantissa[3];
  _202 = _201 & 65528;
  _12->mantissa[3] = _202;

  <bb 91> [2.50%]:
  extra_bits ={v} {CLOBBER};
  locy ={v} {CLOBBER};
  goto <bb 93> (<L6>); [100.00%]

<L5> [2.50%]:
  _15 = i_20 * 12;
  _16 = cbase_32(D) + _15;
  _17 = bbase_33(D) + _15;
  _18 = abase_34(D) + _15;
  DivideInternalFPF (_18, _17, _16);

<L6> [12.51%]:
  i_39 = i_20 + 1;

  <bb 94> [14.72%]:
  # i_20 = PHI <0(95), i_39(93)>
  if (i_20 < arraysize_31(D))
    goto <bb 3>; [85.00%]
  else
    goto <bb 95>; [15.00%]

  <bb 95> [2.60%]:
  # loops_19 = PHI <loops_27(D)(2), loops_28(94)>
  loops_28 = loops_19 + 18446744073709551615;
  if (loops_19 != 0)
    goto <bb 94>; [85.00%]
  else
    goto <bb 96>; [15.00%]

  <bb 96> [0.39%]:
  _30 = StopStopwatch (elapsed_26);
  return _30;

  <bb 97> [0.61%]:
  _365 = _12->exp;
  _361 = (int) _365;
  _266 = _361 + 32767;
  exponent_difference_345 = (long int) _266;
  if (exponent_difference_345 == -1)
    goto <bb 78>; [13.01%]
  else
    goto <bb 89>; [86.99%]

  <bb 98> [0.02%]:
  # i_338 = PHI <0(78)>
  goto <bb 82>; [100.00%]

  <bb 99> [0.31%]:
  # i_327 = PHI <0(27)>
  goto <bb 46>; [100.00%]

}



;; Function RoundInternalFPF (RoundInternalFPF, funcdef_no=47, decl_uid=2809, cgraph_uid=47, symbol_order=47)

;; 6 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 27 13 14 15 16 17 18 19 20 21 22 23 24 25 26
;;
;; Loop 4
;;  header 16, latch 15
;;  depth 1, outer 0
;;  nodes: 16 15 23 14 21 22 19 20 17 18
;;
;; Loop 2
;;  header 5, latch 4
;;  depth 1, outer 0
;;  nodes: 5 4
;; 2 succs { 3 26 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 4 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 24 }
;; 9 succs { 10 11 }
;; 10 succs { 24 }
;; 11 succs { 12 24 }
;; 12 succs { 13 27 }
;; 27 succs { 16 }
;; 13 succs { 24 }
;; 14 succs { 15 }
;; 15 succs { 16 }
;; 16 succs { 17 24 }
;; 17 succs { 18 19 }
;; 18 succs { 19 }
;; 19 succs { 20 21 }
;; 20 succs { 21 }
;; 21 succs { 22 23 }
;; 22 succs { 23 }
;; 23 succs { 14 15 }
;; 24 succs { 25 26 }
;; 25 succs { 26 }
;; 26 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

n_20 -> { n_17 }
Incremental SSA update started at block: 5
Number of blocks in CFG: 28
Number of blocks to update: 3 ( 11%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

ptr_33 -> { ptr_4(D) }
ptr_52 -> { ptr_4(D) }
ptr_88 -> { ptr_4(D) }
_90 -> { _10 }
i_91 -> { i_11 }
exponent_difference_92 -> { exponent_difference_24 }
_94 -> { _32 }
i_97 -> { i_54 }
ptr_114 -> { ptr_4(D) }
Incremental SSA update started at block: 2
Number of blocks in CFG: 29
Number of blocks to update: 21 ( 72%)



Value ranges after VRP:

_1: VARYING
_2: [0, +INF]
ptr_4(D): VARYING
.MEM_5: VARYING
_7: VARYING
_8: VARYING
_9: [0, 65528]
_10: ~[0B, 0B]
i_11: [0, 4]
_12: [0, 3]
_13: [0, 6]
_14: VARYING
_15: VARYING
_16: [0, 65535]
n_17: [0, 65535]
n_18: [0, 65535]  EQUIVALENCES: { } (0 elements)
i_19: [1, 4]
n_20: [0, 65535]
_21: VARYING
_22: [-32768, 32767]
_23: [-1, 65534]
exponent_difference_24: [-1, 65534]
exponent_difference_25: [1, 1]
_28: [0, +INF]
_29: [1, 1]
_30: [0, +INF]
_31: VARYING
_32: [1, 1]
ptr_33: ~[0B, 0B]  EQUIVALENCES: { ptr_4(D) } (1 elements)
_34: VARYING
ptr_52: ~[0B, 0B]  EQUIVALENCES: { ptr_4(D) ptr_33 } (2 elements)
_53: [1, +INF]
i_54: [0, 1]
i_55: [1, 1]
.MEM_56: VARYING
.MEM_60: VARYING
.MEM_61: VARYING
.MEM_62: VARYING
ptr_88: ~[0B, 0B]  EQUIVALENCES: { ptr_4(D) ptr_33 ptr_52 } (3 elements)
.MEM_89: VARYING
i_91: [0, 3]  EQUIVALENCES: { i_11 } (1 elements)
exponent_difference_92: [-1, -1]  EQUIVALENCES: { exponent_difference_24 } (1 elements)
_94: [1, 1]  EQUIVALENCES: { _32 } (1 elements)
i_97: [0, 0]  EQUIVALENCES: { i_54 } (1 elements)
.MEM_111: VARYING
accum_115: VARYING
_116: [0, 1]
accum_117: [0, 32767]
_127: ~[0B, 0B]
accum_128: VARYING
_129: [0, 1]
accum_130: [0, 32767]
accum_131: [32768, +INF]
accum_132: [0, +INF]
_140: ~[0B, 0B]
accum_141: VARYING
_142: [0, 1]
accum_143: [0, 32767]
accum_144: [32768, +INF]
accum_145: [0, +INF]
_153: ~[0B, 0B]
accum_154: VARYING
_155: [0, 1]
accum_156: [0, 32767]
accum_157: [32768, +INF]
accum_158: [0, +INF]


Simplified relational if (i_11 <= 3)
 into if (i_11 != 4)

Simplified relational if (exponent_difference_24 < 0)
 into if (exponent_difference_24 == -1)

Simplified relational if (i_54 <= 0)
 into if (i_54 == 0)

Removing basic block 10
Removing basic block 9
Removing basic block 8
Removing basic block 13
Removing basic block 4
Removing basic block 12
Removing basic block 27
Removing basic block 28
Removing basic block 29
Merging blocks 32 and 17

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

i_51 -> { i_11 }
i_75 -> { i_54 }
.MEM_79 -> { .MEM_61 }
i_83 -> { i_11 }
n_87 -> { n_17 }
.MEM_98 -> { .MEM_56 }
_101 -> { _21 }
_104 -> { _22 }
_105 -> { _23 }
exponent_difference_108 -> { exponent_difference_24 }
.MEM_123 -> { .MEM_61 }
n_124 -> { n_17 }

SSA names to release after updating the SSA web

_21 _22 _23 exponent_difference_24 .MEM_56 
Incremental SSA update started at block: 24
Number of blocks in CFG: 25
Number of blocks to update: 10 ( 40%)


RoundInternalFPF (struct InternalFPF * ptr)
{
  int i;
  short unsigned int carry;
  short unsigned int * mantissa;
  short unsigned int accum;
  int i;
  int i;
  int i;
  int n;
  long int exponent_difference;
  unsigned char _1;
  unsigned char _2;
  unsigned char _7;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int[4] * _10;
  long unsigned int _12;
  long unsigned int _13;
  short unsigned int * _14;
  short unsigned int _15;
  int _16;
  unsigned short _28;
  unsigned short _30;
  short int _31;
  unsigned char _34;
  short unsigned int _53;
  short int _101;
  int _104;
  int _105;
  short unsigned int _116;
  short unsigned int * _127;
  short unsigned int _129;
  short unsigned int * _140;
  short unsigned int _142;
  short unsigned int * _153;
  short unsigned int _155;

  <bb 2> [81.50%]:
  _1 = ptr_4(D)->type;
  _2 = _1 + 255;
  if (_2 <= 1)
    goto <bb 3>; [24.54%]
  else
    goto <bb 21>; [75.46%]

  <bb 3> [20.00%]:
  _10 = &ptr_4(D)->mantissa;
  goto <bb 24>; [100.00%]

  <bb 4> [80.00%]:
  # i_51 = PHI <i_11(5), i_83(24)>
  # n_124 = PHI <n_17(5), n_87(24)>
  _12 = (long unsigned int) i_51;
  _13 = _12 * 2;
  _14 = _10 + _13;
  _15 = *_14;
  _16 = (int) _15;
  n_18 = _16 | n_124;
  i_19 = i_51 + 1;

  <bb 5> [80.00%]:
  # i_11 = PHI <i_19(4)>
  # n_17 = PHI <n_18(4)>
  if (i_11 != 4)
    goto <bb 4>; [75.00%]
  else
    goto <bb 6>; [25.00%]

  <bb 6> [20.00%]:
  # n_20 = PHI <n_17(5)>
  if (n_20 == 0)
    goto <bb 7>; [33.00%]
  else
    goto <bb 22>; [67.00%]

  <bb 7> [6.60%]:
  __builtin_puts (&"Error:  zero significand in denormalize"[0]);
  goto <bb 22>; [100.00%]

  <bb 8> [2.62%]:
  _28 = (unsigned short) _101;
  _30 = _28 + 1;
  _31 = (short int) _30;
  ptr_4(D)->exp = _31;
  _34 = ptr_4(D)->type;
  if (_34 != 0)
    goto <bb 23>; [54.00%]
  else
    goto <bb 19>; [46.00%]

  <bb 9> [2.01%]:
  _53 = accum_158 | 1;
  MEM[(short unsigned int *)ptr_4(D) + 10B] = _53;

  <bb 10> [4.02%]:

  <bb 11> [4.01%]:
  # i_54 = PHI <1(10)>
  if (i_54 == 0)
    goto <bb 12>; [82.34%]
  else
    goto <bb 19>; [17.66%]

  <bb 12> [4.02%]:
  accum_115 = MEM[(short unsigned int *)ptr_4(D) + 4B];
  _116 = accum_115 & 1;
  accum_117 = accum_115 >> 1;
  MEM[(short unsigned int *)ptr_4(D) + 4B] = accum_117;
  _127 = &MEM[(void *)ptr_4(D) + 6B];
  accum_128 = MEM[(short unsigned int *)ptr_4(D) + 6B];
  _129 = accum_128 & 1;
  accum_130 = accum_128 >> 1;
  if (_116 != 0)
    goto <bb 13>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 13> [2.01%]:
  accum_131 = accum_130 | 32768;

  <bb 14> [4.02%]:
  # accum_132 = PHI <accum_130(12), accum_131(13)>
  MEM[(short unsigned int *)ptr_4(D) + 6B] = accum_132;
  _140 = &MEM[(void *)ptr_4(D) + 8B];
  accum_141 = MEM[(short unsigned int *)ptr_4(D) + 8B];
  _142 = accum_141 & 1;
  accum_143 = accum_141 >> 1;
  if (_129 != 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 15> [2.01%]:
  accum_144 = accum_143 | 32768;

  <bb 16> [4.02%]:
  # accum_145 = PHI <accum_143(14), accum_144(15)>
  MEM[(short unsigned int *)ptr_4(D) + 8B] = accum_145;
  _153 = &MEM[(void *)ptr_4(D) + 10B];
  accum_154 = MEM[(short unsigned int *)ptr_4(D) + 10B];
  _155 = accum_154 & 1;
  accum_156 = accum_154 >> 1;
  if (_142 != 0)
    goto <bb 17>; [50.00%]
  else
    goto <bb 18>; [50.00%]

  <bb 17> [2.01%]:
  accum_157 = accum_156 | 32768;

  <bb 18> [4.02%]:
  # accum_158 = PHI <accum_156(16), accum_157(17)>
  MEM[(short unsigned int *)ptr_4(D) + 10B] = accum_158;
  if (_155 != 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 19> [20.00%]:
  _7 = ptr_4(D)->type;
  if (_7 != 0)
    goto <bb 20>; [54.00%]
  else
    goto <bb 21>; [46.00%]

  <bb 20> [10.80%]:
  _8 = ptr_4(D)->mantissa[3];
  _9 = _8 & 65528;
  ptr_4(D)->mantissa[3] = _9;

  <bb 21> [81.50%]:
  return;

  <bb 22> [20.00%]:
  _101 = ptr_4(D)->exp;
  _104 = (int) _101;
  _105 = _104 + 32767;
  exponent_difference_108 = (long int) _105;
  if (exponent_difference_108 == -1)
    goto <bb 8>; [13.12%]
  else
    goto <bb 19>; [86.88%]

  <bb 23> [0.71%]:
  # i_75 = PHI <0(8)>
  goto <bb 12>; [100.00%]

  <bb 24> [20.00%]:
  # i_83 = PHI <0(3)>
  # n_87 = PHI <0(3)>
  goto <bb 4>; [100.00%]

}


