
;; Function sprintf (sprintf, funcdef_no=10, decl_uid=814, cgraph_uid=10, symbol_order=10)

__attribute__((__artificial__, __gnu_inline__, __always_inline__, __leaf__, __nothrow__))
sprintf (char * restrict __s, const char * restrict __fmt)
{
  long unsigned int _1;
  int _6;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__s_3(D), 1);
  _6 = __builtin___sprintf_chk (__s_3(D), 1, _1, __fmt_4(D), __builtin_va_arg_pack ());
  return _6;

}



;; Function fprintf (fprintf, funcdef_no=14, decl_uid=776, cgraph_uid=14, symbol_order=14)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
fprintf (struct FILE * restrict __stream, const char * restrict __fmt)
{
  int _5;

  <bb 2> [0.00%]:
  _5 = __fprintf_chk (__stream_2(D), 1, __fmt_3(D), __builtin_va_arg_pack ());
  return _5;

}



;; Function printf (printf, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> [0.00%]:
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function fgets (fgets, funcdef_no=20, decl_uid=2151, cgraph_uid=20, symbol_order=20)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
fgets (char * restrict __s, int __n, struct FILE * restrict __stream)
{
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  char * _7;
  char * _14;
  char * _16;
  char * _18;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__s_10(D), 1);
  if (_1 != 18446744073709551615)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 3> [0.00%]:
  _2 = __builtin_constant_p (__n_11(D));
  if (_2 == 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [0.00%]:
  if (__n_11(D) <= 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _3 = __builtin_object_size (__s_10(D), 1);
  _16 = __fgets_chk (__s_10(D), _3, __n_11(D), __stream_12(D));
  goto <bb 9>; [0.00%]

  <bb 6> [0.00%]:
  _4 = (long unsigned int) __n_11(D);
  _5 = __builtin_object_size (__s_10(D), 1);
  if (_4 > _5)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  _6 = __builtin_object_size (__s_10(D), 1);
  _14 = __fgets_chk_warn (__s_10(D), _6, __n_11(D), __stream_12(D));
  goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  _18 = __fgets_alias (__s_10(D), __n_11(D), __stream_12(D));

  <bb 9> [0.00%]:
  # _7 = PHI <_16(5), _14(7), _18(8)>
  return _7;

}



;; Function strcpy (strcpy, funcdef_no=29, decl_uid=750, cgraph_uid=29, symbol_order=29)

__attribute__((__artificial__, __gnu_inline__, __always_inline__, __nothrow__, __leaf__))
strcpy (char * restrict __dest, const char * restrict __src)
{
  long unsigned int _1;
  char * _6;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__dest_3(D), 1);
  _6 = __builtin___strcpy_chk (__dest_3(D), __src_4(D), _1);
  return _6;

}



;; Function atof (atof, funcdef_no=46, decl_uid=2709, cgraph_uid=46, symbol_order=46)

Iterations: 0
__attribute__((__gnu_inline__, __pure__, __leaf__, __nothrow__))
atof (const char * __nptr)
{
  double _4;

  <bb 2> [0.00%]:
  _4 = strtod (__nptr_2(D), 0B);
  return _4;

}



;; Function output_string (output_string, funcdef_no=52, decl_uid=3332, cgraph_uid=52, symbol_order=52)

  Inlining fprintf into output_string (always_inline).
  Inlining printf into output_string (always_inline).
Iterations: 0
Merging blocks 2 and 6
Removing basic block 3
Removing basic block 7
Merging blocks 2 and 5

Symbols to be put in SSA form
{ D.3474 D.3495 D.3498 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 5
Number of blocks to update: 4 ( 80%)


output_string (const char * buffer, const int write_to_file, struct FILE * global_ofile)
{
  int D.3498;
  int D.3495;
  int _8;
  int _9;

  <bb 2> [100.00%]:
  _8 = __printf_chk (1, "%s", buffer_3(D));
  _11 = _8;
  if (write_to_file_5(D) != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  _9 = __fprintf_chk (global_ofile_6(D), 1, "%s", buffer_3(D));
  _13 = _9;

  <bb 4> [0.00%]:
  return;

}



;; Function removeNewLine (removeNewLine, funcdef_no=53, decl_uid=3335, cgraph_uid=53, symbol_order=53)

Iterations: 0
removeNewLine (char * s)
{
  char _1;
  long unsigned int _2;
  sizetype _3;
  char * _4;
  char _5;
  long unsigned int _6;
  sizetype _7;
  char * _8;

  <bb 2> [0.00%]:
  _1 = MEM[(const char *)s_11(D)];
  if (_1 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 3> [0.00%]:
  _2 = strlen (s_11(D));
  _3 = _2 + 18446744073709551615;
  _4 = s_11(D) + _3;
  _5 = *_4;
  if (_5 == 10)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _6 = strlen (s_11(D));
  _7 = _6 + 18446744073709551615;
  _8 = s_11(D) + _7;
  *_8 = 0;

  <bb 5> [0.00%]:
  return;

}



;; Function runCommand (runCommand, funcdef_no=54, decl_uid=3339, cgraph_uid=54, symbol_order=54)

  Inlining fgets into runCommand (always_inline).
Considering inline candidate removeNewLine.
 Inlining removeNewLine into runCommand.
Iterations: 1
Removing basic block 4
Merging blocks 7 and 18
Removing basic block 11
Merging blocks 16 and 8
Removing basic block 20

Symbols to be put in SSA form
{ D.3476 D.3516 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 16
Number of blocks to update: 15 ( 94%)


runCommand (const char * command, char * result)
{
  char * D.3516;
  struct FILE * pipe;
  char * _1;
  long unsigned int _14;
  int _15;
  char * _16;
  long unsigned int _17;
  char * _18;
  char * _19;
  char * _20;
  char _21;

  <bb 2> [0.00%]:
  pipe_7 = popen (command_5(D), "r");
  if (pipe_7 == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  *result_8(D) = 0;
  goto <bb 13>; [0.00%]

  <bb 4> [100.00%]:
  _14 = __builtin_object_size (result_8(D), 1);
  if (_14 != 18446744073709551615)
    goto <bb 5>; [79.76%]
  else
    goto <bb 9>; [20.24%]

  <bb 5> [79.76%]:
  _15 = 1;
  if (_15 == 0)
    goto <bb 6>; [29.56%]
  else
    goto <bb 7>; [70.44%]

  <bb 6> [41.77%]:
  _16 = __fgets_chk (result_8(D), _14, 1024, pipe_7);
  goto <bb 10>; [100.00%]

  <bb 7> [37.99%]:
  _17 = 1024;
  if (_14 < _17)
    goto <bb 8>; [29.56%]
  else
    goto <bb 9>; [70.44%]

  <bb 8> [11.23%]:
  _18 = __fgets_chk_warn (result_8(D), _14, 1024, pipe_7);
  goto <bb 10>; [100.00%]

  <bb 9> [47.00%]:
  _19 = __fgets_alias (result_8(D), 1024, pipe_7);

  <bb 10> [100.00%]:
  # _20 = PHI <_16(6), _18(8), _19(9)>
  _27 = _20;
  _1 = _27;
  if (_1 == 0B)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  *result_8(D) = 0;

  <bb 12> [0.00%]:
  pclose (pipe_7);

  <bb 13> [100.00%]:
  _21 = MEM[(const char *)result_8(D)];
  if (_21 != 0)
    goto <bb 14>; [54.00%]
  else
    goto <bb 15>; [46.00%]

  <bb 14> [54.00%]:
  removeNewLine.part.1 (result_8(D));

  <bb 15> [0.00%]:
  return;

}



;; Function readProcCpuInfo (readProcCpuInfo, funcdef_no=55, decl_uid=3344, cgraph_uid=55, symbol_order=55)

  Inlining strcpy into readProcCpuInfo (always_inline).
  Inlining sprintf into readProcCpuInfo (always_inline).
  Inlining atof into readProcCpuInfo (always_inline).
  Inlining strcpy into readProcCpuInfo (always_inline).
  Inlining strcpy into readProcCpuInfo (always_inline).
  Inlining sprintf into readProcCpuInfo (always_inline).
  Inlining strcpy into readProcCpuInfo (always_inline).
  Inlining fgets into readProcCpuInfo (always_inline).
  Inlining strcpy into readProcCpuInfo (always_inline).
  Inlining strcpy into readProcCpuInfo (always_inline).
  Inlining strcpy into readProcCpuInfo (always_inline).
  Inlining strcpy into readProcCpuInfo (always_inline).
Considering inline candidate removeNewLine.
 Inlining removeNewLine into readProcCpuInfo.
Considering inline candidate removeNewLine.
 Inlining removeNewLine into readProcCpuInfo.
Considering inline candidate removeNewLine.
 Inlining removeNewLine into readProcCpuInfo.
Considering inline candidate removeNewLine.
 Inlining removeNewLine into readProcCpuInfo.
Iterations: 1
Removing basic block 12
Merging blocks 13 and 92
Removing basic block 21
Merging blocks 22 and 96
Removing basic block 30
Merging blocks 31 and 100
Removing basic block 39
Merging blocks 40 and 104
Merging blocks 41 and 69
Removing basic block 44
Removing basic block 45
Merging blocks 49 and 82
Merging blocks 53 and 84
Merging blocks 57 and 90
Removing basic block 60
Removing basic block 62
Removing basic block 64
Removing basic block 66
Removing basic block 71
Merging blocks 76 and 68
Removing basic block 77
Removing basic block 79
Removing basic block 87
Removing basic block 91
Removing basic block 94
Removing basic block 95
Removing basic block 98
Removing basic block 99
Removing basic block 102
Removing basic block 103
Removing basic block 106
Merging blocks 49 and 81
Merging blocks 53 and 83
Merging blocks 57 and 89
Merging blocks 57 and 88
Merging blocks 57 and 86
Merging blocks 57 and 85

Symbols to be put in SSA form
{ D.3477 D.3521 D.3524 D.3527 D.3530 D.3534 D.3537 D.3540 D.3543 D.3546 D.3549 D.3552 D.3554 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 70
Number of blocks to update: 69 ( 99%)


readProcCpuInfo (char * model, char * cache)
{
  double D.3554;
  int D.3552;
  char * D.3549;
  char * D.3546;
  char * D.3543;
  int D.3540;
  char * D.3537;
  char * D.3534;
  char * D.3530;
  char * D.3527;
  char * D.3524;
  char * D.3521;
  float f;
  int i;
  char cpu_MHz[1024];
  char model_name[1024];
  char vendor_id[1024];
  char buffer[1024];
  char * buffer_end;
  int cpus;
  char * cp;
  struct FILE * info;
  char _1;
  char _2;
  char _3;
  char _4;
  long unsigned int _5;
  int _6;
  int _7;
  _Bool _8;
  _Bool _9;
  _Bool _10;
  char _11;
  int _12;
  _Bool _13;
  _Bool _14;
  _Bool _15;
  char _16;
  int _17;
  _Bool _18;
  _Bool _19;
  _Bool _20;
  char _21;
  int _22;
  _Bool _23;
  _Bool _24;
  _Bool _25;
  char _26;
  char * _27;
  long unsigned int _28;
  char _29;
  char * cp.0_30;
  long unsigned int _31;
  char _32;
  char * cp.1_33;
  long unsigned int _34;
  char _35;
  char * cp.2_36;
  double _37;
  float _38;
  long unsigned int _39;
  char _97;
  char _102;
  char _107;
  char _112;
  long unsigned int _121;
  char * _122;
  long unsigned int _123;
  char * _124;
  long unsigned int _125;
  char * _126;
  long unsigned int _127;
  char * _128;
  long unsigned int _129;
  int _130;
  char * _131;
  long unsigned int _132;
  char * _133;
  char * _134;
  char * _135;
  long unsigned int _136;
  char * _137;
  long unsigned int _138;
  int _139;
  long unsigned int _140;
  char * _141;
  long unsigned int _142;
  char * _143;
  long unsigned int _144;
  char * _145;
  long unsigned int _146;
  int _147;
  double _148;
  char _149;
  char _150;
  char _151;
  char _152;

  <bb 2> [0.00%]:
  cpus_63 = 0;
  *cache_65(D) = 0;
  _1 = *cache_65(D);
  *model_67(D) = _1;
  _2 = *model_67(D);
  cpu_MHz[0] = _2;
  _3 = cpu_MHz[0];
  model_name[0] = _3;
  _4 = model_name[0];
  vendor_id[0] = _4;
  info_73 = fopen ("/proc/cpuinfo", "r");
  if (info_73 != 0B)
    goto <bb 45>; [0.00%]
  else
    goto <bb 69>; [0.00%]

  <bb 3> [0.00%]:
  _5 = strlen (&buffer);
  buffer_end_94 = &buffer + _5;
  cp_95 = &buffer;
  _6 = strncmp (&buffer, "processor", 9);
  if (_6 == 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  cpus_116 = cpus_49 + 1;
  goto <bb 45>; [0.00%]

  <bb 5> [0.00%]:
  _7 = strncmp (&buffer, "vendor_id", 9);
  if (_7 == 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 6> [0.00%]:
  cp_111 = cp_95 + 9;
  goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  cp_113 = cp_40 + 1;

  <bb 8> [0.00%]:
  # cp_40 = PHI <cp_111(6), cp_113(7)>
  if (cp_40 < buffer_end_94)
    goto <bb 9>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 9> [0.00%]:
  _112 = *cp_40;
  _8 = _112 == 32;
  _9 = _112 == 58;
  _10 = _8 | _9;
  if (_10 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  _11 = *cp_40;
  if (_11 == 9)
    goto <bb 7>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  if (cp_40 < buffer_end_94)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [100.00%]:
  _121 = 1024;
  _122 = __builtin___strcpy_chk (&vendor_id, cp_40, _121);
  _182 = _122;

  <bb 13> [100.00%]:
  _149 = MEM[(const char *)&vendor_id];
  if (_149 != 0)
    goto <bb 14>; [54.00%]
  else
    goto <bb 45>; [46.00%]

  <bb 14> [54.00%]:
  removeNewLine.part.1 (&vendor_id);
  goto <bb 45>; [100.00%]

  <bb 15> [0.00%]:
  _12 = strncmp (&buffer, "model name", 10);
  if (_12 == 0)
    goto <bb 16>; [0.00%]
  else
    goto <bb 25>; [0.00%]

  <bb 16> [0.00%]:
  cp_106 = cp_95 + 10;
  goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  cp_108 = cp_41 + 1;

  <bb 18> [0.00%]:
  # cp_41 = PHI <cp_106(16), cp_108(17)>
  if (cp_41 < buffer_end_94)
    goto <bb 19>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 19> [0.00%]:
  _107 = *cp_41;
  _13 = _107 == 32;
  _14 = _107 == 58;
  _15 = _13 | _14;
  if (_15 != 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  _16 = *cp_41;
  if (_16 == 9)
    goto <bb 17>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 21> [0.00%]:
  if (cp_41 < buffer_end_94)
    goto <bb 22>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 22> [100.00%]:
  _123 = 1024;
  _124 = __builtin___strcpy_chk (&model_name, cp_41, _123);
  _179 = _124;

  <bb 23> [100.00%]:
  _150 = MEM[(const char *)&model_name];
  if (_150 != 0)
    goto <bb 24>; [54.00%]
  else
    goto <bb 45>; [46.00%]

  <bb 24> [54.00%]:
  removeNewLine.part.1 (&model_name);
  goto <bb 45>; [100.00%]

  <bb 25> [0.00%]:
  _17 = strncmp (&buffer, "cpu MHz", 7);
  if (_17 == 0)
    goto <bb 26>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 26> [0.00%]:
  cp_101 = cp_95 + 7;
  goto <bb 28>; [0.00%]

  <bb 27> [0.00%]:
  cp_103 = cp_42 + 1;

  <bb 28> [0.00%]:
  # cp_42 = PHI <cp_101(26), cp_103(27)>
  if (cp_42 < buffer_end_94)
    goto <bb 29>; [0.00%]
  else
    goto <bb 31>; [0.00%]

  <bb 29> [0.00%]:
  _102 = *cp_42;
  _18 = _102 == 32;
  _19 = _102 == 58;
  _20 = _18 | _19;
  if (_20 != 0)
    goto <bb 27>; [0.00%]
  else
    goto <bb 30>; [0.00%]

  <bb 30> [0.00%]:
  _21 = *cp_42;
  if (_21 == 9)
    goto <bb 27>; [0.00%]
  else
    goto <bb 31>; [0.00%]

  <bb 31> [0.00%]:
  if (cp_42 < buffer_end_94)
    goto <bb 32>; [0.00%]
  else
    goto <bb 33>; [0.00%]

  <bb 32> [100.00%]:
  _125 = 1024;
  _126 = __builtin___strcpy_chk (&cpu_MHz, cp_42, _125);
  _176 = _126;

  <bb 33> [100.00%]:
  _151 = MEM[(const char *)&cpu_MHz];
  if (_151 != 0)
    goto <bb 34>; [54.00%]
  else
    goto <bb 45>; [46.00%]

  <bb 34> [54.00%]:
  removeNewLine.part.1 (&cpu_MHz);
  goto <bb 45>; [100.00%]

  <bb 35> [0.00%]:
  _22 = strncmp (&buffer, "cache size", 10);
  if (_22 == 0)
    goto <bb 36>; [0.00%]
  else
    goto <bb 45>; [0.00%]

  <bb 36> [0.00%]:
  cp_96 = cp_95 + 10;
  goto <bb 38>; [0.00%]

  <bb 37> [0.00%]:
  cp_98 = cp_43 + 1;

  <bb 38> [0.00%]:
  # cp_43 = PHI <cp_96(36), cp_98(37)>
  if (cp_43 < buffer_end_94)
    goto <bb 39>; [0.00%]
  else
    goto <bb 41>; [0.00%]

  <bb 39> [0.00%]:
  _97 = *cp_43;
  _23 = _97 == 32;
  _24 = _97 == 58;
  _25 = _23 | _24;
  if (_25 != 0)
    goto <bb 37>; [0.00%]
  else
    goto <bb 40>; [0.00%]

  <bb 40> [0.00%]:
  _26 = *cp_43;
  if (_26 == 9)
    goto <bb 37>; [0.00%]
  else
    goto <bb 41>; [0.00%]

  <bb 41> [0.00%]:
  if (cp_43 < buffer_end_94)
    goto <bb 42>; [0.00%]
  else
    goto <bb 43>; [0.00%]

  <bb 42> [100.00%]:
  _127 = __builtin_object_size (cache_65(D), 1);
  _128 = __builtin___strcpy_chk (cache_65(D), cp_43, _127);
  _173 = _128;

  <bb 43> [100.00%]:
  _152 = MEM[(const char *)cache_65(D)];
  if (_152 != 0)
    goto <bb 44>; [54.00%]
  else
    goto <bb 45>; [46.00%]

  <bb 44> [54.00%]:
  removeNewLine.part.1 (cache_65(D));

  <bb 45> [100.00%]:
  # cpus_49 = PHI <cpus_63(2), cpus_116(4), cpus_49(14), cpus_49(24), cpus_49(34), cpus_49(35), cpus_49(44), cpus_49(13), cpus_49(23), cpus_49(33), cpus_49(43)>
  _129 = 1024;
  if (_129 != 18446744073709551615)
    goto <bb 46>; [79.76%]
  else
    goto <bb 50>; [20.24%]

  <bb 46> [79.76%]:
  _130 = 1;
  if (_130 == 0)
    goto <bb 47>; [29.56%]
  else
    goto <bb 48>; [70.44%]

  <bb 47> [41.77%]:
  _131 = __fgets_chk (&buffer, _129, 1024, info_73);
  goto <bb 51>; [100.00%]

  <bb 48> [37.99%]:
  _132 = 1024;
  if (_129 < _132)
    goto <bb 49>; [29.56%]
  else
    goto <bb 50>; [70.44%]

  <bb 49> [11.23%]:
  _133 = __fgets_chk_warn (&buffer, _129, 1024, info_73);
  goto <bb 51>; [100.00%]

  <bb 50> [47.00%]:
  _134 = __fgets_alias (&buffer, 1024, info_73);

  <bb 51> [100.00%]:
  # _135 = PHI <_131(47), _133(49), _134(50)>
  _157 = _135;
  _27 = _157;
  if (_27 != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 52>; [0.00%]

  <bb 52> [0.00%]:
  if (cpus_49 > 1)
    goto <bb 53>; [0.00%]
  else
    goto <bb 56>; [0.00%]

  <bb 53> [0.00%]:
  if (cpus_49 == 2)
    goto <bb 54>; [0.00%]
  else
    goto <bb 55>; [0.00%]

  <bb 54> [100.00%]:
  _136 = __builtin_object_size (model_67(D), 1);
  _137 = __builtin___strcpy_chk (model_67(D), "Dual", _136);
  _161 = _137;
  goto <bb 56>; [100.00%]

  <bb 55> [100.00%]:
  _138 = __builtin_object_size (model_67(D), 1);
  _139 = __builtin___sprintf_chk (model_67(D), 1, _138, "%d CPU", cpus_49);
  _159 = _139;

  <bb 56> [0.00%]:
  _28 = strlen (model_67(D));
  cp_77 = model_67(D) + _28;
  _29 = vendor_id[0];
  if (_29 != 0)
    goto <bb 57>; [0.00%]
  else
    goto <bb 60>; [0.00%]

  <bb 57> [0.00%]:
  if (cp_77 != model_67(D))
    goto <bb 58>; [0.00%]
  else
    goto <bb 59>; [0.00%]

  <bb 58> [0.00%]:
  cp.0_30 = cp_77;
  cp_78 = cp.0_30 + 1;
  *cp.0_30 = 32;

  <bb 59> [100.00%]:
  # cp_44 = PHI <cp_77(57), cp_78(58)>
  _140 = __builtin_object_size (cp_44, 1);
  _141 = __builtin___strcpy_chk (cp_44, &vendor_id, _140);
  _163 = _141;
  _31 = strlen (&vendor_id);
  cp_81 = cp_44 + _31;

  <bb 60> [0.00%]:
  # cp_45 = PHI <cp_77(56), cp_81(59)>
  _32 = model_name[0];
  if (_32 != 0)
    goto <bb 61>; [0.00%]
  else
    goto <bb 64>; [0.00%]

  <bb 61> [0.00%]:
  if (cp_45 != model_67(D))
    goto <bb 62>; [0.00%]
  else
    goto <bb 63>; [0.00%]

  <bb 62> [0.00%]:
  cp.1_33 = cp_45;
  cp_82 = cp.1_33 + 1;
  *cp.1_33 = 32;

  <bb 63> [100.00%]:
  # cp_46 = PHI <cp_45(61), cp_82(62)>
  _142 = __builtin_object_size (cp_46, 1);
  _143 = __builtin___strcpy_chk (cp_46, &model_name, _142);
  _165 = _143;
  _34 = strlen (&model_name);
  cp_85 = cp_46 + _34;

  <bb 64> [0.00%]:
  # cp_47 = PHI <cp_45(60), cp_85(63)>
  _35 = cpu_MHz[0];
  if (_35 != 0)
    goto <bb 65>; [0.00%]
  else
    goto <bb 68>; [0.00%]

  <bb 65> [0.00%]:
  if (cp_47 != model_67(D))
    goto <bb 66>; [0.00%]
  else
    goto <bb 67>; [0.00%]

  <bb 66> [0.00%]:
  cp.2_36 = cp_47;
  cp_86 = cp.2_36 + 1;
  *cp.2_36 = 32;

  <bb 67> [100.00%]:
  # cp_48 = PHI <cp_47(65), cp_86(66)>
  _148 = strtod (&cpu_MHz, 0B);
  _167 = _148;
  _37 = _167;
  f_88 = (float) _37;
  _38 = f_88 + 5.0e-1;
  i_89 = (int) _38;
  _146 = 1024;
  _147 = __builtin___sprintf_chk (&cpu_MHz, 1, _146, "%dMHz", i_89);
  _169 = _147;
  _144 = __builtin_object_size (cp_48, 1);
  _145 = __builtin___strcpy_chk (cp_48, &cpu_MHz, _144);
  _171 = _145;
  _39 = strlen (&cpu_MHz);
  cp_92 = cp_48 + _39;

  <bb 68> [0.00%]:
  fclose (info_73);

  <bb 69> [0.00%]:
  buffer ={v} {CLOBBER};
  vendor_id ={v} {CLOBBER};
  model_name ={v} {CLOBBER};
  cpu_MHz ={v} {CLOBBER};
  return;

}



;; Function hardware (hardware, funcdef_no=56, decl_uid=3373, cgraph_uid=56, symbol_order=56)

  Inlining sprintf into hardware (always_inline).
  Inlining sprintf into hardware (always_inline).
  Inlining sprintf into hardware (always_inline).
Considering inline candidate output_string.
  will not early inline: hardware/56->output_string/52, growth 5 exceeds --param early-inlining-insns divided by number of calls
Considering inline candidate output_string.
  will not early inline: hardware/56->output_string/52, growth 5 exceeds --param early-inlining-insns divided by number of calls
Considering inline candidate output_string.
  will not early inline: hardware/56->output_string/52, growth 5 exceeds --param early-inlining-insns divided by number of calls
Considering inline candidate readProcCpuInfo.
  will not early inline: hardware/56->readProcCpuInfo/55, growth 215 exceeds --param early-inlining-insns
Considering inline candidate runCommand.
  will not early inline: hardware/56->runCommand/54, growth 28 exceeds --param early-inlining-insns
Iterations: 0
Merging blocks 5 and 11
Merging blocks 5 and 10
Merging blocks 5 and 9
Merging blocks 5 and 8
Merging blocks 5 and 7
Merging blocks 5 and 6

Symbols to be put in SSA form
{ D.3478 D.3562 D.3565 D.3568 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


hardware (const int write_to_file, struct FILE * global_ofile)
{
  int D.3568;
  int D.3565;
  int D.3562;
  char os_command[12];
  char cache[1024];
  char model[1024];
  char os[1024];
  char buffer[1024];
  char * _1;
  long unsigned int _22;
  int _23;
  long unsigned int _24;
  int _25;
  long unsigned int _26;
  int _27;

  <bb 2> [0.00%]:
  os_command = "uname -s -r";
  runCommand (&os_command, &os);
  _1 = strstr (&os, "Linux");
  if (_1 != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  readProcCpuInfo (&model, &cache);
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  model[0] = 0;
  cache[0] = 0;

  <bb 5> [100.00%]:
  _26 = 1024;
  _27 = __builtin___sprintf_chk (&buffer, 1, _26, "CPU                 : %s\n", &model);
  _29 = _27;
  output_string (&buffer, write_to_file_10(D), global_ofile_11(D));
  _24 = 1024;
  _25 = __builtin___sprintf_chk (&buffer, 1, _24, "L2 Cache            : %s\n", &cache);
  _31 = _25;
  output_string (&buffer, write_to_file_10(D), global_ofile_11(D));
  _22 = 1024;
  _23 = __builtin___sprintf_chk (&buffer, 1, _22, "OS                  : %s\n", &os);
  _33 = _23;
  output_string (&buffer, write_to_file_10(D), global_ofile_11(D));
  buffer ={v} {CLOBBER};
  os ={v} {CLOBBER};
  model ={v} {CLOBBER};
  cache ={v} {CLOBBER};
  os_command ={v} {CLOBBER};
  return;

}


