
;; Function hardware (hardware, funcdef_no=56, decl_uid=3373, cgraph_uid=56, symbol_order=56)

;; 6 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 83 12 13 14 84 15 16 17 18 19 20 21 22 23 24 85 25 26 27 28 29 30 31 32 33 34 86 35 36 37 38 39 40 41 42 43 44 87 45 46 47 48 49 50 51 52 53 55 82 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81
;;
;; Loop 1
;;  header 82, latch 55
;;  depth 1, outer 0
;;  nodes: 82 55 23 21 13 52 42 32 22 53 51 44 43 41 33 31 29 30 26 28 27 85 25 24 14 12 39 40 36 38 37 86 35 34 49 50 46 48 47 87 45 19 20 16 18 17 84 15
;;
;; Loop 2
;;  header 16, latch 15
;;  depth 2, outer 1
;;  nodes: 16 15 17 18
;;
;; Loop 3
;;  header 26, latch 25
;;  depth 2, outer 1
;;  nodes: 26 25 27 28
;;
;; Loop 4
;;  header 36, latch 35
;;  depth 2, outer 1
;;  nodes: 36 35 37 38
;;
;; Loop 5
;;  header 46, latch 45
;;  depth 2, outer 1
;;  nodes: 46 45 47 48
;; 2 succs { 3 4 }
;; 3 succs { 7 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 8 10 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 11 74 }
;; 11 succs { 83 73 }
;; 83 succs { 82 }
;; 12 succs { 13 14 }
;; 13 succs { 55 }
;; 14 succs { 84 24 }
;; 84 succs { 16 }
;; 15 succs { 16 }
;; 16 succs { 17 19 }
;; 17 succs { 15 18 }
;; 18 succs { 15 19 }
;; 19 succs { 20 21 }
;; 20 succs { 21 }
;; 21 succs { 22 55 }
;; 22 succs { 23 55 }
;; 23 succs { 55 }
;; 24 succs { 85 34 }
;; 85 succs { 26 }
;; 25 succs { 26 }
;; 26 succs { 27 29 }
;; 27 succs { 25 28 }
;; 28 succs { 25 29 }
;; 29 succs { 30 31 }
;; 30 succs { 31 }
;; 31 succs { 32 55 }
;; 32 succs { 33 55 }
;; 33 succs { 55 }
;; 34 succs { 86 44 }
;; 86 succs { 36 }
;; 35 succs { 36 }
;; 36 succs { 37 39 }
;; 37 succs { 35 38 }
;; 38 succs { 35 39 }
;; 39 succs { 40 41 }
;; 40 succs { 41 }
;; 41 succs { 42 55 }
;; 42 succs { 43 55 }
;; 43 succs { 55 }
;; 44 succs { 87 55 }
;; 87 succs { 46 }
;; 45 succs { 46 }
;; 46 succs { 47 49 }
;; 47 succs { 45 48 }
;; 48 succs { 45 49 }
;; 49 succs { 50 51 }
;; 50 succs { 51 }
;; 51 succs { 52 55 }
;; 52 succs { 53 55 }
;; 53 succs { 55 }
;; 55 succs { 82 }
;; 82 succs { 12 56 }
;; 56 succs { 57 60 }
;; 57 succs { 58 59 }
;; 58 succs { 60 }
;; 59 succs { 60 }
;; 60 succs { 61 64 }
;; 61 succs { 62 63 }
;; 62 succs { 63 }
;; 63 succs { 64 }
;; 64 succs { 65 68 }
;; 65 succs { 66 67 }
;; 66 succs { 67 }
;; 67 succs { 68 }
;; 68 succs { 69 72 }
;; 69 succs { 70 71 }
;; 70 succs { 71 }
;; 71 succs { 72 }
;; 72 succs { 73 }
;; 73 succs { 75 }
;; 74 succs { 75 }
;; 75 succs { 76 77 }
;; 76 succs { 77 }
;; 77 succs { 78 79 }
;; 78 succs { 79 }
;; 79 succs { 80 81 }
;; 80 succs { 81 }
;; 81 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

cp_45 -> { cp_66 }
cp_54 -> { cp_57 }
cp_63 -> { cp_48 }
cp_72 -> { cp_39 }
cpus_76 -> { cpus_36 }
Incremental SSA update started at block: 82
Number of blocks in CFG: 88
Number of blocks to update: 43 ( 49%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

buffer_end_5 -> { buffer_end_34 }
buffer_end_8 -> { buffer_end_34 }
info_11 -> { info_32 }
buffer_end_12 -> { buffer_end_34 }
buffer_end_13 -> { buffer_end_34 }
global_ofile_23 -> { global_ofile_10(D) }
write_to_file_24 -> { write_to_file_9(D) }
write_to_file_26 -> { write_to_file_9(D) }
_73 -> { _30 }
pipe_77 -> { pipe_22 }
global_ofile_78 -> { global_ofile_10(D) }
write_to_file_120 -> { write_to_file_9(D) }
write_to_file_142 -> { write_to_file_9(D) }
buffer_end_184 -> { buffer_end_34 }
buffer_end_185 -> { buffer_end_34 }
buffer_end_186 -> { buffer_end_34 }
buffer_end_187 -> { buffer_end_34 }
cp_188 -> { cp_39 }
cp_189 -> { cp_39 }
cp_190 -> { cp_39 }
_191 -> { _41 }
_192 -> { _41 }
cp_193 -> { cp_45 }
cp_194 -> { cp_48 }
cp_195 -> { cp_48 }
cp_196 -> { cp_48 }
_197 -> { _50 }
_198 -> { _50 }
cp_199 -> { cp_54 }
cp_200 -> { cp_57 }
cp_201 -> { cp_57 }
cp_202 -> { cp_57 }
_203 -> { _59 }
_204 -> { _59 }
cp_205 -> { cp_63 }
cp_206 -> { cp_66 }
cp_207 -> { cp_66 }
cp_208 -> { cp_66 }
_209 -> { _68 }
_210 -> { _68 }
cp_211 -> { cp_72 }
cpus_212 -> { cpus_76 }
cpus_213 -> { cpus_76 }
cp_214 -> { cp_80 }
cp_215 -> { cp_80 }
cp_216 -> { cp_80 }
cp_217 -> { cp_83 }
cp_218 -> { cp_88 }
cp_219 -> { cp_88 }
cp_220 -> { cp_88 }
cp_221 -> { cp_90 }
cp_222 -> { cp_95 }
cp_223 -> { cp_95 }
cp_224 -> { cp_95 }
_225 -> { _106 }
_226 -> { _110 }
_227 -> { _114 }
_228 -> { _118 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 97
Number of blocks to update: 72 ( 74%)



Value ranges after VRP:

_1: VARYING
.MEM_2: VARYING
buffer_end_5: VARYING
buffer_end_8: VARYING
write_to_file_9(D): VARYING
global_ofile_10(D): VARYING
info_11: ~[0B, 0B]  EQUIVALENCES: { info_32 } (1 elements)
buffer_end_12: VARYING
buffer_end_13: VARYING
pipe_22: VARYING
global_ofile_23: ~[0B, 0B]  EQUIVALENCES: { global_ofile_10(D) } (1 elements)
write_to_file_24: ~[0, 0]  EQUIVALENCES: { write_to_file_9(D) } (1 elements)
_25: VARYING
write_to_file_26: [0, 0]  EQUIVALENCES: { write_to_file_9(D) } (1 elements)
_27: VARYING
_28: [0, 9223372036854775806]
_29: ~[9223372036854775806, 18446744073709551614]
_30: VARYING
_31: VARYING
info_32: VARYING
_33: [0, 9223372036854775806]
buffer_end_34: VARYING
_35: VARYING
cpus_36: [0, +INF(OVF)]
cpus_37: [1, +INF(OVF)]
_38: VARYING
cp_39: [&MEM[(void *)&buffer + 9B], -1B]
cp_40: VARYING
_41: VARYING
_42: [0, +INF]
_43: [0, +INF]
_44: [0, +INF]
cp_45: VARYING
_46: VARYING
_47: VARYING
cp_48: [&MEM[(void *)&buffer + 10B], -1B]
cp_49: VARYING
_50: VARYING
_51: [0, +INF]
_52: [0, +INF]
_53: [0, +INF]
cp_54: VARYING
_55: VARYING
_56: VARYING
cp_57: [&MEM[(void *)&buffer + 7B], -1B]
cp_58: VARYING
_59: VARYING
_60: [0, +INF]
_61: [0, +INF]
_62: [0, +INF]
cp_63: VARYING
_64: VARYING
_65: VARYING
cp_66: [&MEM[(void *)&buffer + 10B], -1B]
cp_67: VARYING
_68: VARYING
_69: [0, +INF]
_70: [0, +INF]
_71: [0, +INF]
cp_72: VARYING
_73: ~[0B, 0B]  EQUIVALENCES: { _30 } (1 elements)
_74: VARYING
_75: VARYING
cpus_76: [0, +INF(OVF)]
pipe_77: ~[0B, 0B]  EQUIVALENCES: { pipe_22 } (1 elements)
global_ofile_78: ~[0B, 0B]  EQUIVALENCES: { global_ofile_10(D) } (1 elements)
_79: [0, 9223372036854775806]
cp_80: VARYING
_81: VARYING
cp_82: VARYING
cp_83: VARYING
_84: VARYING
_85: [0, 9223372036854775806]
cp_86: VARYING
_87: VARYING
cp_88: VARYING
cp_89: VARYING
cp_90: VARYING
_91: VARYING
_92: [0, 9223372036854775806]
cp_93: VARYING
_94: VARYING
cp_95: VARYING
cp_96: VARYING
_97: VARYING
f_98: VARYING
_99: VARYING
i_100: VARYING
cp_101: VARYING
_102: VARYING
.MEM_103: VARYING
_104: [0, 9223372036854775806]
_105: ~[9223372036854775806, 18446744073709551614]
_106: VARYING
_107: VARYING
_108: [0, 9223372036854775806]
_109: ~[9223372036854775806, 18446744073709551614]
_110: VARYING
_111: VARYING
_112: [0, 9223372036854775806]
_113: ~[9223372036854775806, 18446744073709551614]
_114: VARYING
_115: VARYING
_116: [0, 9223372036854775806]
_117: ~[9223372036854775806, 18446744073709551614]
_118: VARYING
_119: VARYING
write_to_file_120: ~[0, 0]  EQUIVALENCES: { write_to_file_9(D) } (1 elements)
.MEM_121: VARYING
.MEM_122: VARYING
.MEM_123: VARYING
.MEM_124: VARYING
.MEM_125: VARYING
.MEM_126: VARYING
.MEM_127: VARYING
cpus_128: [0, +INF(OVF)]
.MEM_129: VARYING
.MEM_130: VARYING
.MEM_131: VARYING
.MEM_132: VARYING
.MEM_133: VARYING
.MEM_134: VARYING
.MEM_135: VARYING
.MEM_136: VARYING
.MEM_137: VARYING
.MEM_138: VARYING
.MEM_139: VARYING
.MEM_140: VARYING
write_to_file_142: [0, 0]  EQUIVALENCES: { write_to_file_9(D) } (1 elements)
buffer_end_184: VARYING
buffer_end_185: VARYING
buffer_end_186: VARYING
buffer_end_187: VARYING
cp_188: VARYING
cp_189: VARYING
cp_190: ~[0B, 0B]  EQUIVALENCES: { cp_188 } (1 elements)
_191: ~[32, 32]  EQUIVALENCES: { _41 } (1 elements)
_192: ~[58, 58]  EQUIVALENCES: { _41 _191 } (2 elements)
cp_193: VARYING
cp_194: VARYING
cp_195: VARYING
cp_196: ~[0B, 0B]  EQUIVALENCES: { cp_194 } (1 elements)
_197: ~[58, 58]  EQUIVALENCES: { _50 } (1 elements)
_198: ~[32, 32]  EQUIVALENCES: { _50 _197 } (2 elements)
cp_199: VARYING
cp_200: VARYING
cp_201: VARYING
cp_202: ~[0B, 0B]  EQUIVALENCES: { cp_200 } (1 elements)
_203: ~[58, 58]  EQUIVALENCES: { _59 } (1 elements)
_204: ~[32, 32]  EQUIVALENCES: { _59 _203 } (2 elements)
cp_205: VARYING
cp_206: VARYING
cp_207: VARYING
cp_208: ~[0B, 0B]  EQUIVALENCES: { cp_206 } (1 elements)
_209: ~[58, 58]  EQUIVALENCES: { _68 } (1 elements)
_210: ~[32, 32]  EQUIVALENCES: { _68 _209 } (2 elements)
cp_211: VARYING
cpus_212: [2, +INF]  EQUIVALENCES: { cpus_76 } (1 elements)
cpus_213: [3, +INF]  EQUIVALENCES: { cpus_76 cpus_212 } (2 elements)
cp_214: ~[&model, &model]  EQUIVALENCES: { cp_80 } (1 elements)
cp_215: [&model, &model]  EQUIVALENCES: { cp_80 } (1 elements)
cp_216: ~[0B, 0B]  EQUIVALENCES: { cp_80 cp_214 } (2 elements)
cp_217: ~[0B, 0B]  EQUIVALENCES: { cp_83 } (1 elements)
cp_218: ~[&model, &model]  EQUIVALENCES: { cp_88 } (1 elements)
cp_219: [&model, &model]  EQUIVALENCES: { cp_88 } (1 elements)
cp_220: ~[0B, 0B]  EQUIVALENCES: { cp_88 cp_218 } (2 elements)
cp_221: ~[0B, 0B]  EQUIVALENCES: { cp_90 } (1 elements)
cp_222: ~[&model, &model]  EQUIVALENCES: { cp_95 } (1 elements)
cp_223: [&model, &model]  EQUIVALENCES: { cp_95 } (1 elements)
cp_224: ~[0B, 0B]  EQUIVALENCES: { cp_95 cp_222 } (2 elements)
_225: ~[0B, 0B]  EQUIVALENCES: { _106 } (1 elements)
_226: ~[0B, 0B]  EQUIVALENCES: { _110 } (1 elements)
_227: ~[0B, 0B]  EQUIVALENCES: { _114 } (1 elements)
_228: ~[0B, 0B]  EQUIVALENCES: { _118 } (1 elements)


Removing basic block 79
Removing basic block 77
Removing basic block 83
Removing basic block 84
Removing basic block 85
Removing basic block 86
Removing basic block 87
Removing basic block 88
Removing basic block 89
Removing basic block 90
Removing basic block 91
Removing basic block 92
Removing basic block 93
Removing basic block 94
Removing basic block 95
Removing basic block 96
Merging blocks 101 and 78
Merging blocks 103 and 80

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

cp_229 -> { cp_72 }
cp_230 -> { cp_63 }
cp_231 -> { cp_54 }
cp_232 -> { cp_45 }
.MEM_233 -> { .MEM_138 }
.MEM_234 -> { .MEM_20 }
.MEM_235 -> { .MEM_180 }
.MEM_236 -> { .MEM_138 .MEM_233 }
.MEM_237 -> { .MEM_20 .MEM_234 }
.MEM_238 -> { .MEM_180 .MEM_235 }
.MEM_239 -> { .MEM_139 }
.MEM_240 -> { .MEM_21 }
.MEM_241 -> { .MEM_182 }
.MEM_242 -> { .MEM_139 .MEM_239 }
.MEM_243 -> { .MEM_21 .MEM_240 }
.MEM_244 -> { .MEM_182 .MEM_241 }

SSA names to release after updating the SSA web

.MEM_20 .MEM_21 .MEM_138 .MEM_139 .MEM_180 .MEM_182 
Incremental SSA update started at block: 10
Number of blocks in CFG: 86
Number of blocks to update: 21 ( 24%)


hardware (const int write_to_file, struct FILE * global_ofile)
{
  struct FILE * info;
  char * cp;
  int cpus;
  char * buffer_end;
  char buffer[1024];
  char vendor_id[1024];
  char model_name[1024];
  char cpu_MHz[1024];
  int i;
  float f;
  struct FILE * pipe;
  char os_command[12];
  char cache[1024];
  char model[1024];
  char os[1024];
  char buffer[1024];
  char * _1;
  char * _25;
  char _27;
  long unsigned int _28;
  sizetype _29;
  char * _30;
  char _31;
  long unsigned int _33;
  int _35;
  int _38;
  char _41;
  _Bool _42;
  _Bool _43;
  _Bool _44;
  char _46;
  int _47;
  char _50;
  _Bool _51;
  _Bool _52;
  _Bool _53;
  char _55;
  int _56;
  char _59;
  _Bool _60;
  _Bool _61;
  _Bool _62;
  char _64;
  int _65;
  char _68;
  _Bool _69;
  _Bool _70;
  _Bool _71;
  char _74;
  char * _75;
  long unsigned int _79;
  char _81;
  long unsigned int _84;
  long unsigned int _85;
  char _87;
  long unsigned int _91;
  long unsigned int _92;
  char _94;
  double _97;
  float _99;
  long unsigned int _102;
  long unsigned int _104;
  sizetype _105;
  char * _106;
  char _107;
  long unsigned int _108;
  sizetype _109;
  char * _110;
  char _111;
  long unsigned int _112;
  sizetype _113;
  char * _114;
  char _115;
  long unsigned int _116;
  sizetype _117;
  char * _118;
  char _119;

  <bb 2> [31.42%]:
  os_command = "uname -s -r";
  pipe_22 = popen (&os_command, "r");
  if (pipe_22 == 0B)
    goto <bb 3>; [30.00%]
  else
    goto <bb 4>; [70.00%]

  <bb 3> [9.43%]:
  MEM[(char *)&os] = 0;
  goto <bb 7>; [100.00%]

  <bb 4> [21.99%]:
  _25 = __fgets_alias (&os, 1024, pipe_22);
  if (_25 == 0B)
    goto <bb 5>; [30.00%]
  else
    goto <bb 6>; [70.00%]

  <bb 5> [6.60%]:
  MEM[(char *)&os] = 0;

  <bb 6> [21.99%]:
  pclose (pipe_22);

  <bb 7> [31.42%]:
  _27 = MEM[(const char *)&os];
  if (_27 != 0)
    goto <bb 8>; [36.64%]
  else
    goto <bb 10>; [63.36%]

  <bb 8> [11.51%]:
  _28 = strlen (&os);
  _29 = _28 + 18446744073709551615;
  _30 = &os + _29;
  _31 = *_30;
  if (_31 == 10)
    goto <bb 9>; [37.68%]
  else
    goto <bb 10>; [62.32%]

  <bb 9> [4.34%]:
  *_30 = 0;

  <bb 10> [31.42%]:
  _1 = strstr (&os, "Linux");
  if (_1 != 0B)
    goto <bb 11>; [49.47%]
  else
    goto <bb 74>; [50.53%]

  <bb 11> [15.54%]:
  MEM[(char *)&cache] = 0;
  MEM[(char *)&model] = 0;
  cpu_MHz[0] = 0;
  model_name[0] = 0;
  vendor_id[0] = 0;
  info_32 = fopen ("/proc/cpuinfo", "r");
  if (info_32 != 0B)
    goto <bb 55>; [73.26%]
  else
    goto <bb 73>; [26.74%]

  <bb 12> [64.52%]:
  _33 = strlen (&buffer);
  buffer_end_34 = &buffer + _33;
  _35 = strncmp (&buffer, "processor", 9);
  if (_35 == 0)
    goto <bb 13>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 13> [32.26%]:
  cpus_37 = cpus_36 + 1;
  goto <bb 54>; [100.00%]

  <bb 14> [32.26%]:
  _38 = strncmp (&buffer, "vendor_id", 9);
  if (_38 == 0)
    goto <bb 16>; [34.00%]
  else
    goto <bb 24>; [66.00%]

  <bb 15> [89.03%]:
  cp_40 = cp_39 + 1;

  <bb 16> [100.00%]:
  # cp_39 = PHI <&MEM[(void *)&buffer + 9B](14), cp_40(15)>
  if (buffer_end_34 > cp_39)
    goto <bb 17>; [92.50%]
  else
    goto <bb 78>; [7.50%]

  <bb 17> [92.50%]:
  _41 = *cp_39;
  _42 = _41 == 32;
  _43 = _41 == 58;
  _44 = _42 | _43;
  if (_44 != 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 18>; [50.00%]

  <bb 18> [46.25%]:
  if (_41 == 9)
    goto <bb 15>; [92.50%]
  else
    goto <bb 19>; [7.50%]

  <bb 19> [3.47%]:
  # cp_72 = PHI <cp_39(18)>
  if (buffer_end_34 > cp_72)
    goto <bb 20>; [100.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 20> [3.62%]:
  __builtin___strcpy_chk (&vendor_id, cp_72, 1024);

  <bb 21> [10.97%]:
  _46 = MEM[(const char *)&vendor_id];
  if (_46 != 0)
    goto <bb 22>; [33.00%]
  else
    goto <bb 54>; [67.00%]

  <bb 22> [3.62%]:
  _104 = strlen (&vendor_id);
  _105 = _104 + 18446744073709551615;
  _106 = &vendor_id + _105;
  _107 = *_106;
  if (_107 == 10)
    goto <bb 23>; [37.68%]
  else
    goto <bb 54>; [62.32%]

  <bb 23> [1.36%]:
  *_106 = 0;
  goto <bb 54>; [100.00%]

  <bb 24> [21.29%]:
  _47 = strncmp (&buffer, "model name", 10);
  if (_47 == 0)
    goto <bb 26>; [34.00%]
  else
    goto <bb 34>; [66.00%]

  <bb 25> [58.76%]:
  cp_49 = cp_48 + 1;

  <bb 26> [66.00%]:
  # cp_48 = PHI <&MEM[(void *)&buffer + 10B](24), cp_49(25)>
  if (buffer_end_34 > cp_48)
    goto <bb 27>; [92.50%]
  else
    goto <bb 79>; [7.50%]

  <bb 27> [61.05%]:
  _50 = *cp_48;
  _51 = _50 == 32;
  _52 = _50 == 58;
  _53 = _51 | _52;
  if (_53 != 0)
    goto <bb 25>; [50.00%]
  else
    goto <bb 28>; [50.00%]

  <bb 28> [30.52%]:
  if (_50 == 9)
    goto <bb 25>; [92.50%]
  else
    goto <bb 29>; [7.50%]

  <bb 29> [2.29%]:
  # cp_63 = PHI <cp_48(28)>
  if (buffer_end_34 > cp_63)
    goto <bb 30>; [100.00%]
  else
    goto <bb 31>; [0.00%]

  <bb 30> [2.39%]:
  __builtin___strcpy_chk (&model_name, cp_63, 1024);

  <bb 31> [7.24%]:
  _55 = MEM[(const char *)&model_name];
  if (_55 != 0)
    goto <bb 32>; [33.00%]
  else
    goto <bb 54>; [67.00%]

  <bb 32> [2.39%]:
  _108 = strlen (&model_name);
  _109 = _108 + 18446744073709551615;
  _110 = &model_name + _109;
  _111 = *_110;
  if (_111 == 10)
    goto <bb 33>; [37.68%]
  else
    goto <bb 54>; [62.32%]

  <bb 33> [0.90%]:
  *_110 = 0;
  goto <bb 54>; [100.00%]

  <bb 34> [14.05%]:
  _56 = strncmp (&buffer, "cpu MHz", 7);
  if (_56 == 0)
    goto <bb 36>; [34.00%]
  else
    goto <bb 44>; [66.00%]

  <bb 35> [38.78%]:
  cp_58 = cp_57 + 1;

  <bb 36> [43.56%]:
  # cp_57 = PHI <&MEM[(void *)&buffer + 7B](34), cp_58(35)>
  if (buffer_end_34 > cp_57)
    goto <bb 37>; [92.50%]
  else
    goto <bb 80>; [7.50%]

  <bb 37> [40.29%]:
  _59 = *cp_57;
  _60 = _59 == 32;
  _61 = _59 == 58;
  _62 = _60 | _61;
  if (_62 != 0)
    goto <bb 35>; [50.00%]
  else
    goto <bb 38>; [50.00%]

  <bb 38> [20.15%]:
  if (_59 == 9)
    goto <bb 35>; [92.50%]
  else
    goto <bb 39>; [7.50%]

  <bb 39> [1.51%]:
  # cp_54 = PHI <cp_57(38)>
  if (buffer_end_34 > cp_54)
    goto <bb 40>; [100.00%]
  else
    goto <bb 41>; [0.00%]

  <bb 40> [1.58%]:
  __builtin___strcpy_chk (&cpu_MHz, cp_54, 1024);

  <bb 41> [4.78%]:
  _64 = MEM[(const char *)&cpu_MHz];
  if (_64 != 0)
    goto <bb 42>; [33.00%]
  else
    goto <bb 54>; [67.00%]

  <bb 42> [1.58%]:
  _112 = strlen (&cpu_MHz);
  _113 = _112 + 18446744073709551615;
  _114 = &cpu_MHz + _113;
  _115 = *_114;
  if (_115 == 10)
    goto <bb 43>; [37.68%]
  else
    goto <bb 54>; [62.32%]

  <bb 43> [0.59%]:
  *_114 = 0;
  goto <bb 54>; [100.00%]

  <bb 44> [9.27%]:
  _65 = strncmp (&buffer, "cache size", 10);
  if (_65 == 0)
    goto <bb 46>; [34.00%]
  else
    goto <bb 54>; [66.00%]

  <bb 45> [25.60%]:
  cp_67 = cp_66 + 1;

  <bb 46> [28.75%]:
  # cp_66 = PHI <&MEM[(void *)&buffer + 10B](44), cp_67(45)>
  if (buffer_end_34 > cp_66)
    goto <bb 47>; [92.50%]
  else
    goto <bb 81>; [7.50%]

  <bb 47> [26.59%]:
  _68 = *cp_66;
  _69 = _68 == 32;
  _70 = _68 == 58;
  _71 = _69 | _70;
  if (_71 != 0)
    goto <bb 45>; [50.00%]
  else
    goto <bb 48>; [50.00%]

  <bb 48> [13.30%]:
  if (_68 == 9)
    goto <bb 45>; [92.50%]
  else
    goto <bb 49>; [7.50%]

  <bb 49> [0.99%]:
  # cp_45 = PHI <cp_66(48)>
  if (buffer_end_34 > cp_45)
    goto <bb 50>; [100.00%]
  else
    goto <bb 51>; [0.00%]

  <bb 50> [1.04%]:
  __builtin___strcpy_chk (&cache, cp_45, 1024);

  <bb 51> [3.15%]:
  _74 = MEM[(const char *)&cache];
  if (_74 != 0)
    goto <bb 52>; [33.00%]
  else
    goto <bb 54>; [67.00%]

  <bb 52> [1.04%]:
  _116 = strlen (&cache);
  _117 = _116 + 18446744073709551615;
  _118 = &cache + _117;
  _119 = *_118;
  if (_119 == 10)
    goto <bb 53>; [37.68%]
  else
    goto <bb 54>; [62.32%]

  <bb 53> [0.39%]:
  *_118 = 0;

  <bb 54> [64.51%]:
  # cpus_128 = PHI <cpus_36(23), cpus_36(21), cpus_37(13), cpus_36(52), cpus_36(42), cpus_36(32), cpus_36(22), cpus_36(53), cpus_36(51), cpus_36(44), cpus_36(43), cpus_36(41), cpus_36(33), cpus_36(31)>

  <bb 55> [75.91%]:
  # cpus_36 = PHI <cpus_128(54), 0(11)>
  _75 = __fgets_alias (&buffer, 1024, info_32);
  if (_75 != 0B)
    goto <bb 12>; [85.00%]
  else
    goto <bb 56>; [15.00%]

  <bb 56> [11.39%]:
  # cpus_76 = PHI <cpus_36(55)>
  if (cpus_76 > 1)
    goto <bb 57>; [64.00%]
  else
    goto <bb 60>; [36.00%]

  <bb 57> [7.29%]:
  if (cpus_76 == 2)
    goto <bb 58>; [34.00%]
  else
    goto <bb 59>; [66.00%]

  <bb 58> [2.48%]:
  __builtin_memcpy (&model, "Dual", 5);
  goto <bb 60>; [100.00%]

  <bb 59> [4.81%]:
  __builtin___sprintf_chk (&model, 1, 1024, "%d CPU", cpus_76);

  <bb 60> [11.39%]:
  _79 = strlen (&model);
  cp_80 = &model + _79;
  _81 = vendor_id[0];
  if (_81 != 0)
    goto <bb 61>; [50.00%]
  else
    goto <bb 64>; [50.00%]

  <bb 61> [5.69%]:
  if (&model != cp_80)
    goto <bb 62>; [70.00%]
  else
    goto <bb 63>; [30.00%]

  <bb 62> [3.99%]:
  cp_82 = cp_80 + 1;
  *cp_80 = 32;

  <bb 63> [5.69%]:
  # cp_83 = PHI <&model(61), cp_82(62)>
  _84 = __builtin_object_size (cp_83, 1);
  __builtin_strcpy (cp_83, &vendor_id);
  _85 = strlen (&vendor_id);
  cp_86 = cp_83 + _85;

  <bb 64> [11.39%]:
  # cp_88 = PHI <cp_80(60), cp_86(63)>
  _87 = model_name[0];
  if (_87 != 0)
    goto <bb 65>; [50.00%]
  else
    goto <bb 68>; [50.00%]

  <bb 65> [5.69%]:
  if (&model != cp_88)
    goto <bb 66>; [70.00%]
  else
    goto <bb 67>; [30.00%]

  <bb 66> [3.99%]:
  cp_89 = cp_88 + 1;
  *cp_88 = 32;

  <bb 67> [5.69%]:
  # cp_90 = PHI <&model(65), cp_89(66)>
  _91 = __builtin_object_size (cp_90, 1);
  __builtin_strcpy (cp_90, &model_name);
  _92 = strlen (&model_name);
  cp_93 = cp_90 + _92;

  <bb 68> [11.39%]:
  # cp_95 = PHI <cp_88(64), cp_93(67)>
  _94 = cpu_MHz[0];
  if (_94 != 0)
    goto <bb 69>; [50.00%]
  else
    goto <bb 72>; [50.00%]

  <bb 69> [5.69%]:
  if (&model != cp_95)
    goto <bb 70>; [70.00%]
  else
    goto <bb 71>; [30.00%]

  <bb 70> [3.99%]:
  cp_96 = cp_95 + 1;
  *cp_95 = 32;

  <bb 71> [5.69%]:
  # cp_101 = PHI <&model(69), cp_96(70)>
  _97 = strtod (&cpu_MHz, 0B);
  f_98 = (float) _97;
  _99 = f_98 + 5.0e-1;
  i_100 = (int) _99;
  __builtin___sprintf_chk (&cpu_MHz, 1, 1024, "%dMHz", i_100);
  _102 = __builtin_object_size (cp_101, 1);
  __builtin_strcpy (cp_101, &cpu_MHz);

  <bb 72> [11.39%]:
  fclose (info_32);

  <bb 73> [15.54%]:
  buffer ={v} {CLOBBER};
  vendor_id ={v} {CLOBBER};
  model_name ={v} {CLOBBER};
  cpu_MHz ={v} {CLOBBER};
  goto <bb 75>; [100.00%]

  <bb 74> [15.88%]:
  model[0] = 0;
  cache[0] = 0;

  <bb 75> [31.42%]:
  __builtin___sprintf_chk (&buffer, 1, 1024, "CPU                 : %s\n", &model);
  __printf_chk (1, "%s", &buffer);
  if (write_to_file_9(D) != 0)
    goto <bb 76>; [36.64%]
  else
    goto <bb 83>; [63.36%]

  <bb 76> [11.51%]:
  __builtin_fputs (&buffer, global_ofile_10(D));
  goto <bb 82>; [100.00%]

  <bb 77> [31.42%]:
  buffer ={v} {CLOBBER};
  os ={v} {CLOBBER};
  model ={v} {CLOBBER};
  cache ={v} {CLOBBER};
  os_command ={v} {CLOBBER};
  return;

  <bb 78> [7.50%]:
  # cp_229 = PHI <cp_39(16)>
  goto <bb 21>; [100.00%]

  <bb 79> [4.95%]:
  # cp_230 = PHI <cp_48(26)>
  goto <bb 31>; [100.00%]

  <bb 80> [3.27%]:
  # cp_231 = PHI <cp_57(36)>
  goto <bb 41>; [100.00%]

  <bb 81> [2.16%]:
  # cp_232 = PHI <cp_66(46)>
  goto <bb 51>; [100.00%]

  <bb 82> [11.51%]:
  __builtin___sprintf_chk (&buffer, 1, 1024, "L2 Cache            : %s\n", &cache);
  __printf_chk (1, "%s", &buffer);
  __builtin_fputs (&buffer, global_ofile_10(D));
  goto <bb 84>; [100.00%]

  <bb 83> [19.91%]:
  __builtin___sprintf_chk (&buffer, 1, 1024, "L2 Cache            : %s\n", &cache);
  __printf_chk (1, "%s", &buffer);
  goto <bb 85>; [100.00%]

  <bb 84> [11.51%]:
  __builtin___sprintf_chk (&buffer, 1, 1024, "OS                  : %s\n", &os);
  __printf_chk (1, "%s", &buffer);
  __builtin_fputs (&buffer, global_ofile_10(D));
  goto <bb 77>; [100.00%]

  <bb 85> [19.91%]:
  __builtin___sprintf_chk (&buffer, 1, 1024, "OS                  : %s\n", &os);
  __printf_chk (1, "%s", &buffer);
  goto <bb 77>; [100.00%]

}


