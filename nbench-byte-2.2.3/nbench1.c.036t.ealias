
;; Function printf (printf, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__fmt = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = __fmt
_4 = NONLOCAL
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__fmt"[label="__fmt = { 9 }"];
"PARM_NOALIAS(9)"[label="PARM_NOALIAS(9) = { 5 }"];
"__printf_chk";
"_4";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*__fmt";
"*PARM_NOALIAS(9)";
"*__printf_chk";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"__fmt" -> "ESCAPED";
"_4" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_4";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__fmt";
"PARM_NOALIAS(9)";
"__printf_chk";
"_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "PARM_NOALIAS(9)";
"__fmt" -> "ESCAPED";
"_4" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _4\l"];
"STOREDANYTHING";
"INTEGER";
"__fmt";
"PARM_NOALIAS(9)";
"__printf_chk";
"_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "PARM_NOALIAS(9)";
"__fmt" -> "ESCAPED";
"PARM_NOALIAS(9)" -> "ESCAPED";
"_4" -> "ESCAPED";
"_4" -> "PARM_NOALIAS(9)";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__fmt = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__printf_chk = { }
_4 = { ESCAPED NONLOCAL }


Alias information for printf

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.6344 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__fmt_2(D), points-to NULL, points-to vars: { D.6344 } (nonlocal, escaped, restrict)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> [0.00%]:
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function bzero (bzero, funcdef_no=42, decl_uid=720, cgraph_uid=42, symbol_order=42)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__dest = &NONLOCAL
__len = &NONLOCAL
CALLUSED(11) = CALLUSED(11) + UNKNOWN
CALLUSED(11) = *CALLUSED(11) + UNKNOWN
CALLUSED(11) = __dest
CALLUSED(11) = &NULL
_1 = CALLUSED(11)
_1 = NONLOCAL
derefaddrtmp(14) = &NULL
*__dest + UNKNOWN = derefaddrtmp(14)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__dest"[label="__dest = { 5 }"];
"__len"[label="__len = { 5 }"];
"__builtin_object_size";
"CALLUSED(11)"[label="CALLUSED(11) = { 1 }"];
"CALLCLOBBERED(12)";
"_1";
"derefaddrtmp(14)"[label="derefaddrtmp(14) = { 1 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*__dest";
"*__len";
"*__builtin_object_size";
"*CALLUSED(11)";
"*CALLCLOBBERED(12)";
"*_1";
"*derefaddrtmp(14)";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"__dest" -> "CALLUSED(11)";
"NONLOCAL" -> "_1";
"CALLUSED(11)" -> "_1";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__dest" [label="\N\n*__dest + UNKNOWN = derefaddrtmp(14)\l"];
"__builtin_object_size";
"CALLUSED(11)" [label="\N\nCALLUSED(11) = CALLUSED(11) + UNKNOWN\lCALLUSED(11) = *CALLUSED(11) + UNKNOWN\l"];
"CALLCLOBBERED(12)";
"_1";
"derefaddrtmp(14)";

  // Edges in the constraint graph:
"NONLOCAL" -> "_1";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(11)";
"__dest" -> "CALLUSED(11)";
"CALLUSED(11)" -> "_1";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__dest" [label="\N\n*__dest + UNKNOWN = derefaddrtmp(14)\l"];
"__builtin_object_size";
"CALLUSED(11)" [label="\N\nCALLUSED(11) = CALLUSED(11) + UNKNOWN\lCALLUSED(11) = *CALLUSED(11) + UNKNOWN\l"];
"CALLCLOBBERED(12)";
"_1";
"derefaddrtmp(14)";

  // Edges in the constraint graph:
"NONLOCAL" -> "_1";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(11)";
"__dest" -> "CALLUSED(11)";
"CALLUSED(11)" -> "_1";
"derefaddrtmp(14)" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__dest = { NONLOCAL }
__len = { NONLOCAL } same as __dest
__builtin_object_size = { }
CALLUSED(11) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(12) = { }
_1 = { NULL ESCAPED NONLOCAL }
derefaddrtmp(14) = { NULL }


Alias information for bzero

Aliased symbols


Call clobber information

ESCAPED, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

__dest_3(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((__artificial__, __gnu_inline__, __always_inline__, __leaf__, __nothrow__))
bzero (void * __dest, size_t __len)
{
  long unsigned int _1;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__dest_3(D), 0);
  __builtin___memset_chk (__dest_3(D), 0, __len_4(D), _1);
  return;

}



;; Function NumSift (NumSift, funcdef_no=56, decl_uid=4506, cgraph_uid=56, symbol_order=81)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
array = &NONLOCAL
i = &NONLOCAL
j = &NONLOCAL
k_30 = i_24
k_30 = &NONLOCAL
_1 = k_30
_1 = &NONLOCAL
_2 = array + UNKNOWN
_3 = *_2
_4 = k_30
_4 = &NONLOCAL
_5 = _4
_5 = &NONLOCAL
_6 = array + UNKNOWN
_7 = *_6
k_32 = k_30
k_32 = &NONLOCAL
k_25 = k_30
k_25 = k_30
k_25 = k_32
_8 = i_24
_8 = &NONLOCAL
_9 = array + UNKNOWN
_10 = *_9
_11 = k_25
_11 = &NONLOCAL
_12 = array + UNKNOWN
_13 = *_12
_14 = k_25
_14 = &NONLOCAL
_15 = array + UNKNOWN
temp_34 = *_15
_16 = i_24
_16 = &NONLOCAL
_17 = array + UNKNOWN
_18 = k_25
_18 = &NONLOCAL
_19 = array + UNKNOWN
_20 = *_17
*_19 = _20
_21 = i_24
_21 = &NONLOCAL
_22 = array + UNKNOWN
*_22 = temp_34
i_33 = j
i_33 = &NONLOCAL
i_24 = i
i_24 = k_25
i_24 = i_33
_23 = i_24
_23 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"array"[label="array = { 5 }"];
"i"[label="i = { 5 }"];
"j"[label="j = { 5 }"];
"k_30"[label="k_30 = { 5 }"];
"_1"[label="_1 = { 5 }"];
"_2";
"_3";
"_4"[label="_4 = { 5 }"];
"_5"[label="_5 = { 5 }"];
"_6";
"_7";
"_8"[label="_8 = { 5 }"];
"_9";
"_10";
"_11"[label="_11 = { 5 }"];
"_12";
"_13";
"_14"[label="_14 = { 5 }"];
"_15";
"temp_34";
"_16"[label="_16 = { 5 }"];
"_17";
"_18"[label="_18 = { 5 }"];
"_19";
"_20";
"_21"[label="_21 = { 5 }"];
"_22";
"i_33"[label="i_33 = { 5 }"];
"_23"[label="_23 = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*array";
"*i";
"*j";
"*k_30";
"*i_24";
"*_1";
"*_2";
"*_3";
"*_4";
"*_5";
"*_6";
"*_7";
"*k_32";
"*k_25";
"*_8";
"*_9";
"*_10";
"*_11";
"*_12";
"*_13";
"*_14";
"*_15";
"*temp_34";
"*_16";
"*_17";
"*_18";
"*_19";
"*_20";
"*_21";
"*_22";
"*i_33";
"*_23";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"i" -> "k_30";
"k_30" -> "k_30";
"k_30" -> "k_30";
"k_30" -> "k_30";
"k_30" -> "k_30";
"i_33" -> "k_30";
"k_30" -> "_1";
"*_2" -> "_3";
"k_30" -> "_4";
"_4" -> "_5";
"*_6" -> "_7";
"k_30" -> "_8";
"*_9" -> "_10";
"k_30" -> "_11";
"*_12" -> "_13";
"k_30" -> "_14";
"*_15" -> "temp_34";
"k_30" -> "_16";
"k_30" -> "_18";
"*_17" -> "_20";
"k_30" -> "_21";
"j" -> "i_33";
"k_30" -> "_23";
"NONLOCAL" -> "*ESCAPED";
"_20" -> "*_19";
"temp_34" -> "*_22";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"array" [label="\N\n_2 = array + UNKNOWN\l_6 = array + UNKNOWN\l_9 = array + UNKNOWN\l_12 = array + UNKNOWN\l_15 = array + UNKNOWN\l_17 = array + UNKNOWN\l_19 = array + UNKNOWN\l_22 = array + UNKNOWN\l"];
"_2" [label="\N\n_3 = *_2\l"];
"_3";
"_6" [label="\N\n_7 = *_6\l"];
"_7";
"_9" [label="\N\n_10 = *_9\l"];
"_10";
"_12" [label="\N\n_13 = *_12\l"];
"_13";
"_15" [label="\N\ntemp_34 = *_15\l"];
"temp_34";
"_17" [label="\N\n_20 = *_17\l"];
"_19" [label="\N\n*_19 = _20\l"];
"_20";
"_22" [label="\N\n*_22 = temp_34\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "_6";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_12";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "_22";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"array" [label="\N\n_2 = array + UNKNOWN\l_6 = array + UNKNOWN\l_9 = array + UNKNOWN\l_12 = array + UNKNOWN\l_15 = array + UNKNOWN\l_17 = array + UNKNOWN\l_19 = array + UNKNOWN\l_22 = array + UNKNOWN\l"];
"_2" [label="\N\n_3 = *_2\l"];
"_3";
"_6" [label="\N\n_7 = *_6\l"];
"_7";
"_9" [label="\N\n_10 = *_9\l"];
"_10";
"_12" [label="\N\n_13 = *_12\l"];
"_13";
"_15" [label="\N\ntemp_34 = *_15\l"];
"temp_34";
"_17" [label="\N\n_20 = *_17\l"];
"_19" [label="\N\n*_19 = _20\l"];
"_20";
"_22" [label="\N\n*_22 = temp_34\l"];

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "_6";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_12";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "_22";
"temp_34" -> "ESCAPED";
"_20" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
array = { NONLOCAL }
i = { NONLOCAL } same as array
j = { NONLOCAL } same as array
k_30 = { NONLOCAL } same as array
i_24 = { NONLOCAL } same as array
_1 = { NONLOCAL } same as array
_2 = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { NONLOCAL } same as array
_5 = { NONLOCAL } same as array
_6 = { NONLOCAL }
_7 = { ESCAPED NONLOCAL }
k_32 = { NONLOCAL } same as array
k_25 = { NONLOCAL } same as array
_8 = { NONLOCAL } same as array
_9 = { NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_11 = { NONLOCAL } same as array
_12 = { NONLOCAL }
_13 = { ESCAPED NONLOCAL }
_14 = { NONLOCAL } same as array
_15 = { NONLOCAL }
temp_34 = { ESCAPED NONLOCAL }
_16 = { NONLOCAL } same as array
_17 = { NONLOCAL }
_18 = { NONLOCAL } same as array
_19 = { NONLOCAL }
_20 = { ESCAPED NONLOCAL }
_21 = { NONLOCAL } same as array
_22 = { NONLOCAL }
i_33 = { NONLOCAL } same as array
_23 = { NONLOCAL } same as array


Alias information for NumSift

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to NULL, points-to vars: { }
_19, points-to non-local, points-to NULL, points-to vars: { }
_22, points-to non-local, points-to NULL, points-to vars: { }
array_31(D), points-to non-local, points-to NULL, points-to vars: { }

NumSift (farlong * array, long unsigned int i, long unsigned int j)
{
  long int temp;
  long unsigned int k;
  long unsigned int _1;
  farlong * _2;
  long int _3;
  sizetype _4;
  sizetype _5;
  farlong * _6;
  long int _7;
  long unsigned int _8;
  farlong * _9;
  long int _10;
  long unsigned int _11;
  farlong * _12;
  long int _13;
  long unsigned int _14;
  farlong * _15;
  long unsigned int _16;
  farlong * _17;
  long unsigned int _18;
  farlong * _19;
  long int _20;
  long unsigned int _21;
  farlong * _22;
  long unsigned int _23;

  <bb 2> [0.00%]:
  goto <bb 9>; [0.00%]

  <bb 3> [0.00%]:
  k_30 = i_24 * 2;
  if (j_29(D) > k_30)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  _1 = k_30 * 8;
  _2 = array_31(D) + _1;
  _3 = *_2;
  _4 = k_30 + 1;
  _5 = _4 * 8;
  _6 = array_31(D) + _5;
  _7 = *_6;
  if (_3 < _7)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  k_32 = k_30 + 1;

  <bb 6> [0.00%]:
  # k_25 = PHI <k_30(3), k_30(4), k_32(5)>
  _8 = i_24 * 8;
  _9 = array_31(D) + _8;
  _10 = *_9;
  _11 = k_25 * 8;
  _12 = array_31(D) + _11;
  _13 = *_12;
  if (_10 < _13)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  _14 = k_25 * 8;
  _15 = array_31(D) + _14;
  temp_34 = *_15;
  _16 = i_24 * 8;
  _17 = array_31(D) + _16;
  _18 = k_25 * 8;
  _19 = array_31(D) + _18;
  _20 = *_17;
  *_19 = _20;
  _21 = i_24 * 8;
  _22 = array_31(D) + _21;
  *_22 = temp_34;
  goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  i_33 = j_29(D) + 1;

  <bb 9> [0.00%]:
  # i_24 = PHI <i_27(D)(2), k_25(7), i_33(8)>
  _23 = i_24 * 2;
  if (_23 <= j_29(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  return;

}



;; Function NumHeapSort (NumHeapSort, funcdef_no=55, decl_uid=4502, cgraph_uid=55, symbol_order=80)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
array = &NONLOCAL
bottom = &NONLOCAL
top = &NONLOCAL
i_13 = top
i_13 = &NONLOCAL
ESCAPED = array
ESCAPED = i_8
ESCAPED = top
i_24 = i_8
i_24 = &NONLOCAL
i_8 = i_13
i_8 = i_24
ESCAPED = array
ESCAPED = bottom
ESCAPED = i_9
_1 = *array
temp_19 = _1
_2 = i_9
_2 = &NONLOCAL
_3 = array + UNKNOWN
_4 = *_3
*array = _4
_5 = i_9
_5 = &NONLOCAL
_6 = array + UNKNOWN
*_6 = _1
i_22 = i_9
i_22 = &NONLOCAL
i_9 = top
i_9 = i_22

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"array"[label="array = { 5 }"];
"bottom"[label="bottom = { 5 }"];
"top"[label="top = { 5 }"];
"i_13"[label="i_13 = { 5 }"];
"NumSift";
"i_8"[label="i_8 = { 5 }"];
"i_9"[label="i_9 = { 5 }"];
"_1";
"temp_19";
"_2"[label="_2 = { 5 }"];
"_3";
"_4";
"_5"[label="_5 = { 5 }"];
"_6";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*array";
"*bottom";
"*top";
"*i_13";
"*NumSift";
"*i_8";
"*i_9";
"*_1";
"*temp_19";
"*_2";
"*_3";
"*_4";
"*_5";
"*_6";

  // Edges in the constraint graph:
"array" -> "ESCAPED";
"bottom" -> "ESCAPED";
"top" -> "ESCAPED";
"i_8" -> "ESCAPED";
"i_9" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"top" -> "i_13";
"i_13" -> "i_8";
"i_8" -> "i_8";
"i_8" -> "i_8";
"top" -> "i_9";
"i_9" -> "i_9";
"i_9" -> "i_9";
"*array" -> "_1";
"_1" -> "temp_19";
"i_9" -> "_2";
"*_3" -> "_4";
"i_9" -> "_5";
"NONLOCAL" -> "*ESCAPED";
"_4" -> "*array";
"_1" -> "*_6";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"array" [label="\N\n_1 = *array\l_3 = array + UNKNOWN\l_6 = array + UNKNOWN\l*array = _4\l"];
"NumSift";
"_1";
"_3" [label="\N\n_4 = *_3\l"];
"_4";
"_6" [label="\N\n*_6 = _1\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_6";
"array" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"array" [label="\N\n_1 = *array\l_3 = array + UNKNOWN\l_6 = array + UNKNOWN\l*array = _4\l"];
"NumSift";
"_1";
"_3" [label="\N\n_4 = *_3\l"];
"_4";
"_6" [label="\N\n*_6 = _1\l"];

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_6";
"array" -> "ESCAPED";
"_1" -> "ESCAPED";
"_4" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
array = { NONLOCAL }
bottom = { NONLOCAL } same as array
top = { NONLOCAL } same as array
i_13 = { NONLOCAL } same as array
NumSift = { }
i_8 = { NONLOCAL } same as array
i_24 = { NONLOCAL } same as array
i_9 = { NONLOCAL } same as array
_1 = { ESCAPED NONLOCAL }
temp_19 = { ESCAPED NONLOCAL } same as _1
_2 = { NONLOCAL } same as array
_3 = { NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { NONLOCAL } same as array
_6 = { NONLOCAL }
i_22 = { NONLOCAL } same as array


Alias information for NumHeapSort

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to NULL, points-to vars: { }
array_16(D), points-to non-local, points-to NULL, points-to vars: { }

NumHeapSort (farlong * array, long unsigned int bottom, long unsigned int top)
{
  long unsigned int i;
  long unsigned int temp;
  long int _1;
  long unsigned int _2;
  farlong * _3;
  long int _4;
  long unsigned int _5;
  farlong * _6;

  <bb 2> [0.00%]:
  i_13 = top_12(D) / 2;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  NumSift (array_16(D), i_8, top_12(D));
  i_24 = i_8 + 18446744073709551615;

  <bb 4> [0.00%]:
  # i_8 = PHI <i_13(2), i_24(3)>
  if (i_8 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  NumSift (array_16(D), bottom_17(D), i_9);
  _1 = *array_16(D);
  temp_19 = (long unsigned int) _1;
  _2 = i_9 * 8;
  _3 = array_16(D) + _2;
  _4 = *_3;
  *array_16(D) = _4;
  _5 = i_9 * 8;
  _6 = array_16(D) + _5;
  *_6 = _1;
  i_22 = i_9 + 18446744073709551615;

  <bb 6> [0.00%]:
  # i_9 = PHI <top_12(D)(4), i_22(5)>
  if (i_9 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function ToggleBitRun (ToggleBitRun, funcdef_no=66, decl_uid=4553, cgraph_uid=66, symbol_order=91)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
bitmap = &NONLOCAL
bit_addr = &NONLOCAL
nbits = &NONLOCAL
val = &NONLOCAL
bindex_29 = bit_addr_21
bindex_29 = &NONLOCAL
bitnumb_30 = bit_addr_21 + UNKNOWN
_1 = bindex_29
_1 = &NONLOCAL
_2 = bitmap + UNKNOWN
_3 = *_2
_4 = bitnumb_30
_5 = &NONLOCAL
_5 = _4
_6 = _5
_7 = bindex_29
_7 = &NONLOCAL
_8 = bitmap + UNKNOWN
_9 = _3
_9 = _6
*_8 = _9
_10 = bindex_29
_10 = &NONLOCAL
_11 = bitmap + UNKNOWN
_12 = *_11
_13 = bitnumb_30
_14 = &NONLOCAL
_14 = _13
_15 = _14
_16 = _15
_17 = bindex_29
_17 = &NONLOCAL
_18 = bitmap + UNKNOWN
_19 = _12
_19 = _16
*_18 = _19
bit_addr_35 = bit_addr_21
bit_addr_35 = &NONLOCAL
bit_addr_21 = bit_addr
bit_addr_21 = bit_addr_35
nbits_22 = nbits
nbits_22 = nbits_28
nbits.48_20 = nbits_22
nbits_28 = nbits_22
nbits_28 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"bitmap"[label="bitmap = { 5 }"];
"bit_addr"[label="bit_addr = { 5 }"];
"nbits"[label="nbits = { 5 }"];
"val"[label="val = { 5 }"];
"bindex_29"[label="bindex_29 = { 5 }"];
"bit_addr_21"[label="bit_addr_21 = { 5 }"];
"bitnumb_30";
"_1"[label="_1 = { 5 }"];
"_2";
"_3";
"_4";
"_5"[label="_5 = { 5 }"];
"_6";
"_7"[label="_7 = { 5 }"];
"_8";
"_9";
"_10"[label="_10 = { 5 }"];
"_11";
"_12";
"_13";
"_14"[label="_14 = { 5 }"];
"_15";
"_16";
"_17"[label="_17 = { 5 }"];
"_18";
"_19";
"nbits_22"[label="nbits_22 = { 5 }"];
"nbits.48_20";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*bitmap";
"*bit_addr";
"*nbits";
"*val";
"*bindex_29";
"*bit_addr_21";
"*bitnumb_30";
"*_1";
"*_2";
"*_3";
"*_4";
"*_5";
"*_6";
"*_7";
"*_8";
"*_9";
"*_10";
"*_11";
"*_12";
"*_13";
"*_14";
"*_15";
"*_16";
"*_17";
"*_18";
"*_19";
"*bit_addr_35";
"*nbits_22";
"*nbits_28";
"*nbits.48_20";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"bit_addr_21" -> "bindex_29";
"bit_addr" -> "bit_addr_21";
"bit_addr_21" -> "bit_addr_21";
"bit_addr_21" -> "bit_addr_21";
"bindex_29" -> "_1";
"*_2" -> "_3";
"bitnumb_30" -> "_4";
"_4" -> "_5";
"_5" -> "_6";
"bindex_29" -> "_7";
"_3" -> "_9";
"_6" -> "_9";
"bindex_29" -> "_10";
"*_11" -> "_12";
"bitnumb_30" -> "_13";
"_13" -> "_14";
"_14" -> "_15";
"_15" -> "_16";
"bindex_29" -> "_17";
"_12" -> "_19";
"_16" -> "_19";
"nbits" -> "nbits_22";
"nbits_22" -> "nbits_22";
"nbits_22" -> "nbits_22";
"nbits_22" -> "nbits.48_20";
"NONLOCAL" -> "*ESCAPED";
"_9" -> "*_8";
"_19" -> "*_18";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"bitmap" [label="\N\nbitnumb_30 = bitmap + UNKNOWN\l_2 = bitmap + UNKNOWN\l_8 = bitmap + UNKNOWN\l_11 = bitmap + UNKNOWN\l_18 = bitmap + UNKNOWN\l"];
"bitnumb_30";
"_2" [label="\N\n_3 = *_2\l"];
"_3";
"_5";
"_8" [label="\N\n*_8 = _9\l"];
"_9";
"_11" [label="\N\n_12 = *_11\l"];
"_12";
"_18" [label="\N\n*_18 = _19\l"];
"_19";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "bitnumb_30";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "_8";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "_18";
"bitnumb_30" -> "_5";
"_3" -> "_9";
"_5" -> "_9";
"_5" -> "_19";
"_12" -> "_19";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"bitmap" [label="\N\nbitnumb_30 = bitmap + UNKNOWN\l_2 = bitmap + UNKNOWN\l_8 = bitmap + UNKNOWN\l_11 = bitmap + UNKNOWN\l_18 = bitmap + UNKNOWN\l"];
"bitnumb_30";
"_2" [label="\N\n_3 = *_2\l"];
"_3";
"_5";
"_8" [label="\N\n*_8 = _9\l"];
"_9";
"_11" [label="\N\n_12 = *_11\l"];
"_12";
"_18" [label="\N\n*_18 = _19\l"];
"_19";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "bitnumb_30";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "_8";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "_18";
"bitnumb_30" -> "_5";
"_3" -> "_9";
"_5" -> "_9";
"_5" -> "_19";
"_9" -> "ESCAPED";
"_12" -> "_19";
"_19" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
bitmap = { NONLOCAL }
bit_addr = { NONLOCAL } same as bitmap
nbits = { NONLOCAL } same as bitmap
val = { NONLOCAL } same as bitmap
bindex_29 = { NONLOCAL } same as bitmap
bit_addr_21 = { NONLOCAL } same as bitmap
bitnumb_30 = { NONLOCAL }
_1 = { NONLOCAL } same as bitmap
_2 = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { NONLOCAL } same as bitnumb_30
_5 = { NONLOCAL }
_6 = { NONLOCAL } same as _5
_7 = { NONLOCAL } same as bitmap
_8 = { NONLOCAL }
_9 = { ESCAPED NONLOCAL }
_10 = { NONLOCAL } same as bitmap
_11 = { NONLOCAL }
_12 = { ESCAPED NONLOCAL }
_13 = { NONLOCAL } same as bitnumb_30
_14 = { NONLOCAL } same as _5
_15 = { NONLOCAL } same as _5
_16 = { NONLOCAL } same as _5
_17 = { NONLOCAL } same as bitmap
_18 = { NONLOCAL }
_19 = { ESCAPED NONLOCAL }
bit_addr_35 = { NONLOCAL } same as bitmap
nbits_22 = { NONLOCAL } same as bitmap
nbits_28 = { NONLOCAL } same as bitmap
nbits.48_20 = { NONLOCAL } same as bitmap


Alias information for ToggleBitRun

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to NULL, points-to vars: { }
_18, points-to non-local, points-to NULL, points-to vars: { }
bitmap_32(D), points-to non-local, points-to NULL, points-to vars: { }

ToggleBitRun (farulong * bitmap, long unsigned int bit_addr, long unsigned int nbits, unsigned int val)
{
  long unsigned int bitnumb;
  long unsigned int bindex;
  long unsigned int _1;
  farulong * _2;
  long unsigned int _3;
  unsigned int _4;
  long int _5;
  long unsigned int _6;
  long unsigned int _7;
  farulong * _8;
  long unsigned int _9;
  long unsigned int _10;
  farulong * _11;
  long unsigned int _12;
  unsigned int _13;
  long int _14;
  long int _15;
  long unsigned int _16;
  long unsigned int _17;
  farulong * _18;
  long unsigned int _19;
  long unsigned int nbits.48_20;

  <bb 2> [0.00%]:
  goto <bb 7>; [0.00%]

  <bb 3> [0.00%]:
  bindex_29 = bit_addr_21 >> 6;
  bitnumb_30 = bit_addr_21 & 63;
  if (val_31(D) != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _1 = bindex_29 * 8;
  _2 = bitmap_32(D) + _1;
  _3 = *_2;
  _4 = (unsigned int) bitnumb_30;
  _5 = 1 << _4;
  _6 = (long unsigned int) _5;
  _7 = bindex_29 * 8;
  _8 = bitmap_32(D) + _7;
  _9 = _3 | _6;
  *_8 = _9;
  goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _10 = bindex_29 * 8;
  _11 = bitmap_32(D) + _10;
  _12 = *_11;
  _13 = (unsigned int) bitnumb_30;
  _14 = 1 << _13;
  _15 = ~_14;
  _16 = (long unsigned int) _15;
  _17 = bindex_29 * 8;
  _18 = bitmap_32(D) + _17;
  _19 = _12 & _16;
  *_18 = _19;

  <bb 6> [0.00%]:
  bit_addr_35 = bit_addr_21 + 1;

  <bb 7> [0.00%]:
  # bit_addr_21 = PHI <bit_addr_25(D)(2), bit_addr_35(6)>
  # nbits_22 = PHI <nbits_26(D)(2), nbits_28(6)>
  nbits.48_20 = nbits_22;
  nbits_28 = nbits_22 + 18446744073709551615;
  if (nbits_22 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  return;

}



;; Function FlipBitRun (FlipBitRun, funcdef_no=67, decl_uid=4557, cgraph_uid=67, symbol_order=92)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
bitmap = &NONLOCAL
bit_addr = &NONLOCAL
nbits = &NONLOCAL
bindex_18 = bit_addr_11
bindex_18 = &NONLOCAL
bitnumb_19 = bit_addr_11 + UNKNOWN
_1 = bindex_18
_1 = &NONLOCAL
_2 = bitmap + UNKNOWN
_3 = *_2
_4 = bitnumb_19
_5 = &NONLOCAL
_5 = _4
_6 = _5
_7 = bindex_18
_7 = &NONLOCAL
_8 = bitmap + UNKNOWN
_9 = _3
_9 = _6
*_8 = _9
bit_addr_22 = bit_addr_11
bit_addr_22 = &NONLOCAL
bit_addr_11 = bit_addr
bit_addr_11 = bit_addr_22
nbits_12 = nbits
nbits_12 = nbits_17
nbits.49_10 = nbits_12
nbits_17 = nbits_12
nbits_17 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"bitmap"[label="bitmap = { 5 }"];
"bit_addr"[label="bit_addr = { 5 }"];
"nbits"[label="nbits = { 5 }"];
"bindex_18"[label="bindex_18 = { 5 }"];
"bit_addr_11"[label="bit_addr_11 = { 5 }"];
"bitnumb_19";
"_1"[label="_1 = { 5 }"];
"_2";
"_3";
"_4";
"_5"[label="_5 = { 5 }"];
"_6";
"_7"[label="_7 = { 5 }"];
"_8";
"_9";
"nbits_12"[label="nbits_12 = { 5 }"];
"nbits.49_10";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*bitmap";
"*bit_addr";
"*nbits";
"*bindex_18";
"*bit_addr_11";
"*bitnumb_19";
"*_1";
"*_2";
"*_3";
"*_4";
"*_5";
"*_6";
"*_7";
"*_8";
"*_9";
"*bit_addr_22";
"*nbits_12";
"*nbits_17";
"*nbits.49_10";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"bit_addr_11" -> "bindex_18";
"bit_addr" -> "bit_addr_11";
"bit_addr_11" -> "bit_addr_11";
"bit_addr_11" -> "bit_addr_11";
"bindex_18" -> "_1";
"*_2" -> "_3";
"bitnumb_19" -> "_4";
"_4" -> "_5";
"_5" -> "_6";
"bindex_18" -> "_7";
"_3" -> "_9";
"_6" -> "_9";
"nbits" -> "nbits_12";
"nbits_12" -> "nbits_12";
"nbits_12" -> "nbits_12";
"nbits_12" -> "nbits.49_10";
"NONLOCAL" -> "*ESCAPED";
"_9" -> "*_8";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"bitmap" [label="\N\nbitnumb_19 = bitmap + UNKNOWN\l_2 = bitmap + UNKNOWN\l_8 = bitmap + UNKNOWN\l"];
"bitnumb_19";
"_2" [label="\N\n_3 = *_2\l"];
"_3";
"_5";
"_8" [label="\N\n*_8 = _9\l"];
"_9";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "bitnumb_19";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "_8";
"bitnumb_19" -> "_5";
"_3" -> "_9";
"_5" -> "_9";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"bitmap" [label="\N\nbitnumb_19 = bitmap + UNKNOWN\l_2 = bitmap + UNKNOWN\l_8 = bitmap + UNKNOWN\l"];
"bitnumb_19";
"_2" [label="\N\n_3 = *_2\l"];
"_3";
"_5";
"_8" [label="\N\n*_8 = _9\l"];
"_9";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "bitnumb_19";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "_8";
"bitnumb_19" -> "_5";
"_3" -> "_9";
"_5" -> "_9";
"_9" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
bitmap = { NONLOCAL }
bit_addr = { NONLOCAL } same as bitmap
nbits = { NONLOCAL } same as bitmap
bindex_18 = { NONLOCAL } same as bitmap
bit_addr_11 = { NONLOCAL } same as bitmap
bitnumb_19 = { NONLOCAL }
_1 = { NONLOCAL } same as bitmap
_2 = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { NONLOCAL } same as bitnumb_19
_5 = { NONLOCAL }
_6 = { NONLOCAL } same as _5
_7 = { NONLOCAL } same as bitmap
_8 = { NONLOCAL }
_9 = { ESCAPED NONLOCAL }
bit_addr_22 = { NONLOCAL } same as bitmap
nbits_12 = { NONLOCAL } same as bitmap
nbits_17 = { NONLOCAL } same as bitmap
nbits.49_10 = { NONLOCAL } same as bitmap


Alias information for FlipBitRun

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }
bitmap_20(D), points-to non-local, points-to NULL, points-to vars: { }

FlipBitRun (farulong * bitmap, long unsigned int bit_addr, long unsigned int nbits)
{
  long unsigned int bitnumb;
  long unsigned int bindex;
  long unsigned int _1;
  farulong * _2;
  long unsigned int _3;
  unsigned int _4;
  long int _5;
  long unsigned int _6;
  long unsigned int _7;
  farulong * _8;
  long unsigned int _9;
  long unsigned int nbits.49_10;

  <bb 2> [0.00%]:
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  bindex_18 = bit_addr_11 >> 6;
  bitnumb_19 = bit_addr_11 & 63;
  _1 = bindex_18 * 8;
  _2 = bitmap_20(D) + _1;
  _3 = *_2;
  _4 = (unsigned int) bitnumb_19;
  _5 = 1 << _4;
  _6 = (long unsigned int) _5;
  _7 = bindex_18 * 8;
  _8 = bitmap_20(D) + _7;
  _9 = _3 ^ _6;
  *_8 = _9;
  bit_addr_22 = bit_addr_11 + 1;

  <bb 4> [0.00%]:
  # bit_addr_11 = PHI <bit_addr_14(D)(2), bit_addr_22(3)>
  # nbits_12 = PHI <nbits_15(D)(2), nbits_17(3)>
  nbits.49_10 = nbits_12;
  nbits_17 = nbits_12 + 18446744073709551615;
  if (nbits_12 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  return;

}



;; Function CopyToAssign (CopyToAssign, funcdef_no=77, decl_uid=4611, cgraph_uid=77, symbol_order=102)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
arrayfrom = &NONLOCAL
arrayto = &NONLOCAL
_1 = i_12
_2 = _1
_2 = &NONLOCAL
_3 = arrayfrom + UNKNOWN
_4 = j_13
_5 = i_12
_6 = _5
_6 = &NONLOCAL
_7 = arrayto + UNKNOWN
_8 = j_13
_9 = *_3 + UNKNOWN
*_7 + UNKNOWN = _9
j.73_10 = j_13
j_23 = j_13
j_23 = &NONLOCAL
j_13 = &NULL
j_13 = j_23
i.74_11 = i_12
i_19 = i_12
i_19 = &NONLOCAL
i_12 = &NULL
i_12 = i_19

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"arrayfrom"[label="arrayfrom = { 5 }"];
"arrayto"[label="arrayto = { 5 }"];
"_1";
"i_12"[label="i_12 = { 1 5 }"];
"_2"[label="_2 = { 5 }"];
"_3";
"_4";
"j_13"[label="j_13 = { 1 5 }"];
"_5";
"_6"[label="_6 = { 5 }"];
"_7";
"_8";
"_9";
"j.73_10";
"i.74_11";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*arrayfrom";
"*arrayto";
"*_1";
"*i_12";
"*_2";
"*_3";
"*_4";
"*j_13";
"*_5";
"*_6";
"*_7";
"*_8";
"*_9";
"*j.73_10";
"*j_23";
"*i.74_11";
"*i_19";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"i_12" -> "_1";
"i_12" -> "i_12";
"i_12" -> "i_12";
"_1" -> "_2";
"j_13" -> "_4";
"j_13" -> "j_13";
"j_13" -> "j_13";
"i_12" -> "_5";
"_5" -> "_6";
"j_13" -> "_8";
"j_13" -> "j.73_10";
"i_12" -> "i.74_11";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"arrayfrom" [label="\N\n_3 = arrayfrom + UNKNOWN\l_7 = arrayfrom + UNKNOWN\l"];
"_1";
"_3" [label="\N\n_9 = *_3 + UNKNOWN\l"];
"_7" [label="\N\n*_7 + UNKNOWN = _9\l"];
"_9";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_9";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"arrayfrom" [label="\N\n_3 = arrayfrom + UNKNOWN\l_7 = arrayfrom + UNKNOWN\l"];
"_1";
"_3" [label="\N\n_9 = *_3 + UNKNOWN\l"];
"_7" [label="\N\n*_7 + UNKNOWN = _9\l"];
"_9";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_9";
"_9" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
arrayfrom = { NONLOCAL }
arrayto = { NONLOCAL } same as arrayfrom
_1 = { NULL NONLOCAL }
i_12 = { NULL NONLOCAL } same as _1
_2 = { NULL NONLOCAL } same as _1
_3 = { NONLOCAL }
_4 = { NULL NONLOCAL } same as _1
j_13 = { NULL NONLOCAL } same as _1
_5 = { NULL NONLOCAL } same as _1
_6 = { NULL NONLOCAL } same as _1
_7 = { NONLOCAL }
_8 = { NULL NONLOCAL } same as _1
_9 = { ESCAPED NONLOCAL }
j.73_10 = { NULL NONLOCAL } same as _1
j_23 = { NULL NONLOCAL } same as _1
i.74_11 = { NULL NONLOCAL } same as _1
i_19 = { NULL NONLOCAL } same as _1


Alias information for CopyToAssign

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to NULL, points-to vars: { }
arrayfrom_20(D), points-to non-local, points-to NULL, points-to vars: { }
arrayto_21(D), points-to non-local, points-to NULL, points-to vars: { }

CopyToAssign (farlong[101] * arrayfrom, farlong[101] * arrayto)
{
  short unsigned int j;
  short unsigned int i;
  long unsigned int _1;
  long unsigned int _2;
  farlong[101] * _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;
  farlong[101] * _7;
  int _8;
  long int _9;
  short unsigned int j.73_10;
  short unsigned int i.74_11;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_12;
  _2 = _1 * 808;
  _3 = arrayfrom_20(D) + _2;
  _4 = (int) j_13;
  _5 = (long unsigned int) i_12;
  _6 = _5 * 808;
  _7 = arrayto_21(D) + _6;
  _8 = (int) j_13;
  _9 = *_3[_4];
  *_7[_8] = _9;
  j.73_10 = j_13;
  j_23 = j_13 + 1;

  <bb 4> [0.00%]:
  # j_13 = PHI <0(6), j_23(3)>
  if (j_13 <= 100)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  i.74_11 = i_12;
  i_19 = i_12 + 1;

  <bb 6> [0.00%]:
  # i_12 = PHI <0(2), i_19(5)>
  if (i_12 <= 100)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function calc_minimum_costs (calc_minimum_costs, funcdef_no=79, decl_uid=4615, cgraph_uid=79, symbol_order=104)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
tableau = &NONLOCAL
_1 = i_45
_2 = _1
_2 = &NONLOCAL
_3 = tableau + UNKNOWN
_4 = j_48
_5 = *_3 + UNKNOWN
_6 = i_45
_7 = _6
_7 = &NONLOCAL
_8 = tableau + UNKNOWN
_9 = j_48
currentmin_78 = *_8 + UNKNOWN
currentmin_51 = currentmin_52
currentmin_51 = currentmin_78
j.75_10 = j_48
j_79 = j_48
j_79 = &NONLOCAL
j_48 = &NULL
j_48 = j_79
currentmin_52 = &NONLOCAL
currentmin_52 = currentmin_51
_11 = i_45
_12 = _11
_12 = &NONLOCAL
_13 = tableau + UNKNOWN
_14 = j_49
_15 = *_13 + UNKNOWN
_16 = i_45
_17 = _16
_17 = &NONLOCAL
_18 = tableau + UNKNOWN
_19 = j_49
_20 = _15
_20 = currentmin_52
*_18 + UNKNOWN = _20
j.76_21 = j_49
j_77 = j_49
j_77 = &NONLOCAL
j_49 = &NULL
j_49 = j_77
i.77_22 = i_45
i_75 = i_45
i_75 = &NONLOCAL
i_45 = &NULL
i_45 = i_75
_23 = i_46
_24 = _23
_24 = &NONLOCAL
_25 = tableau + UNKNOWN
_26 = j_50
_27 = *_25 + UNKNOWN
_28 = i_46
_29 = _28
_29 = &NONLOCAL
_30 = tableau + UNKNOWN
_31 = j_50
currentmin_70 = *_30 + UNKNOWN
currentmin_53 = currentmin_54
currentmin_53 = currentmin_70
i.78_32 = i_46
i_71 = i_46
i_71 = &NONLOCAL
i_46 = &NULL
i_46 = i_71
currentmin_54 = &NONLOCAL
currentmin_54 = currentmin_53
_33 = i_47
_34 = _33
_34 = &NONLOCAL
_35 = tableau + UNKNOWN
_36 = j_50
_37 = *_35 + UNKNOWN
_38 = i_47
_39 = _38
_39 = &NONLOCAL
_40 = tableau + UNKNOWN
_41 = j_50
_42 = _37
_42 = currentmin_54
*_40 + UNKNOWN = _42
i.79_43 = i_47
i_68 = i_47
i_68 = &NONLOCAL
i_47 = &NULL
i_47 = i_68
j.80_44 = j_50
j_69 = j_50
j_69 = &NONLOCAL
j_50 = &NULL
j_50 = j_69

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"tableau"[label="tableau = { 5 }"];
"_1";
"i_45"[label="i_45 = { 1 5 }"];
"_2"[label="_2 = { 5 }"];
"_3";
"_4";
"j_48"[label="j_48 = { 1 5 }"];
"_5";
"_6";
"_7"[label="_7 = { 5 }"];
"_8";
"_9";
"currentmin_78";
"currentmin_51"[label="currentmin_51 = { 5 }"];
"j.75_10";
"_11";
"_12"[label="_12 = { 5 }"];
"_13";
"_14";
"j_49"[label="j_49 = { 1 5 }"];
"_15";
"_16";
"_17"[label="_17 = { 5 }"];
"_18";
"_19";
"_20";
"j.76_21";
"i.77_22";
"_23";
"i_46"[label="i_46 = { 1 5 }"];
"_24"[label="_24 = { 5 }"];
"_25";
"_26";
"j_50"[label="j_50 = { 1 5 }"];
"_27";
"_28";
"_29"[label="_29 = { 5 }"];
"_30";
"_31";
"currentmin_70";
"currentmin_53"[label="currentmin_53 = { 5 }"];
"i.78_32";
"_33";
"i_47"[label="i_47 = { 1 5 }"];
"_34"[label="_34 = { 5 }"];
"_35";
"_36";
"_37";
"_38";
"_39"[label="_39 = { 5 }"];
"_40";
"_41";
"_42";
"i.79_43";
"j.80_44";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*tableau";
"*_1";
"*i_45";
"*_2";
"*_3";
"*_4";
"*j_48";
"*_5";
"*_6";
"*_7";
"*_8";
"*_9";
"*currentmin_78";
"*currentmin_51";
"*currentmin_52";
"*j.75_10";
"*j_79";
"*_11";
"*_12";
"*_13";
"*_14";
"*j_49";
"*_15";
"*_16";
"*_17";
"*_18";
"*_19";
"*_20";
"*j.76_21";
"*j_77";
"*i.77_22";
"*i_75";
"*_23";
"*i_46";
"*_24";
"*_25";
"*_26";
"*j_50";
"*_27";
"*_28";
"*_29";
"*_30";
"*_31";
"*currentmin_70";
"*currentmin_53";
"*currentmin_54";
"*i.78_32";
"*i_71";
"*_33";
"*i_47";
"*_34";
"*_35";
"*_36";
"*_37";
"*_38";
"*_39";
"*_40";
"*_41";
"*_42";
"*i.79_43";
"*i_68";
"*j.80_44";
"*j_69";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"i_45" -> "_1";
"i_45" -> "i_45";
"i_45" -> "i_45";
"_1" -> "_2";
"j_48" -> "_4";
"j_48" -> "j_48";
"j_48" -> "j_48";
"i_45" -> "_6";
"_6" -> "_7";
"j_48" -> "_9";
"currentmin_78" -> "currentmin_51";
"currentmin_51" -> "currentmin_51";
"currentmin_51" -> "currentmin_51";
"j_48" -> "j.75_10";
"i_45" -> "_11";
"_11" -> "_12";
"j_49" -> "_14";
"j_49" -> "j_49";
"j_49" -> "j_49";
"i_45" -> "_16";
"_16" -> "_17";
"j_49" -> "_19";
"currentmin_51" -> "_20";
"_15" -> "_20";
"j_49" -> "j.76_21";
"i_45" -> "i.77_22";
"i_46" -> "_23";
"i_46" -> "i_46";
"i_46" -> "i_46";
"_23" -> "_24";
"j_50" -> "_26";
"j_50" -> "j_50";
"j_50" -> "j_50";
"i_46" -> "_28";
"_28" -> "_29";
"j_50" -> "_31";
"currentmin_70" -> "currentmin_53";
"currentmin_53" -> "currentmin_53";
"currentmin_53" -> "currentmin_53";
"i_46" -> "i.78_32";
"i_47" -> "_33";
"i_47" -> "i_47";
"i_47" -> "i_47";
"_33" -> "_34";
"j_50" -> "_36";
"i_47" -> "_38";
"_38" -> "_39";
"j_50" -> "_41";
"currentmin_53" -> "_42";
"_37" -> "_42";
"i_47" -> "i.79_43";
"j_50" -> "j.80_44";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"tableau" [label="\N\n_3 = tableau + UNKNOWN\l_8 = tableau + UNKNOWN\l_13 = tableau + UNKNOWN\l_18 = tableau + UNKNOWN\l_25 = tableau + UNKNOWN\l_30 = tableau + UNKNOWN\l_35 = tableau + UNKNOWN\l_40 = tableau + UNKNOWN\l"];
"_1";
"_3" [label="\N\n_5 = *_3 + UNKNOWN\l"];
"_5";
"_8" [label="\N\ncurrentmin_78 = *_8 + UNKNOWN\l"];
"currentmin_78";
"currentmin_51";
"_13" [label="\N\n_15 = *_13 + UNKNOWN\l"];
"_15";
"_18" [label="\N\n*_18 + UNKNOWN = _20\l"];
"_20";
"_25" [label="\N\n_27 = *_25 + UNKNOWN\l"];
"_27";
"_30" [label="\N\ncurrentmin_70 = *_30 + UNKNOWN\l"];
"currentmin_70";
"currentmin_53";
"_35" [label="\N\n_37 = *_35 + UNKNOWN\l"];
"_37";
"_40" [label="\N\n*_40 + UNKNOWN = _42\l"];
"_42";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_8";
"STOREDANYTHING" -> "currentmin_78";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_18";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_27";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "currentmin_70";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_37";
"STOREDANYTHING" -> "_40";
"currentmin_78" -> "currentmin_51";
"currentmin_51" -> "_20";
"_15" -> "_20";
"currentmin_70" -> "currentmin_53";
"currentmin_53" -> "_42";
"_37" -> "_42";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"tableau" [label="\N\n_3 = tableau + UNKNOWN\l_8 = tableau + UNKNOWN\l_13 = tableau + UNKNOWN\l_18 = tableau + UNKNOWN\l_25 = tableau + UNKNOWN\l_30 = tableau + UNKNOWN\l_35 = tableau + UNKNOWN\l_40 = tableau + UNKNOWN\l"];
"_1";
"_3" [label="\N\n_5 = *_3 + UNKNOWN\l"];
"_5";
"_8" [label="\N\ncurrentmin_78 = *_8 + UNKNOWN\l"];
"currentmin_78";
"currentmin_51";
"_13" [label="\N\n_15 = *_13 + UNKNOWN\l"];
"_15";
"_18" [label="\N\n*_18 + UNKNOWN = _20\l"];
"_20";
"_25" [label="\N\n_27 = *_25 + UNKNOWN\l"];
"_27";
"_30" [label="\N\ncurrentmin_70 = *_30 + UNKNOWN\l"];
"currentmin_70";
"currentmin_53";
"_35" [label="\N\n_37 = *_35 + UNKNOWN\l"];
"_37";
"_40" [label="\N\n*_40 + UNKNOWN = _42\l"];
"_42";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_8";
"STOREDANYTHING" -> "currentmin_78";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_18";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_27";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "currentmin_70";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_37";
"STOREDANYTHING" -> "_40";
"currentmin_78" -> "currentmin_51";
"currentmin_51" -> "_20";
"_15" -> "_20";
"_20" -> "ESCAPED";
"currentmin_70" -> "currentmin_53";
"currentmin_53" -> "_42";
"_37" -> "_42";
"_42" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
tableau = { NONLOCAL }
_1 = { NULL NONLOCAL }
i_45 = { NULL NONLOCAL } same as _1
_2 = { NULL NONLOCAL } same as _1
_3 = { NONLOCAL }
_4 = { NULL NONLOCAL } same as _1
j_48 = { NULL NONLOCAL } same as _1
_5 = { ESCAPED NONLOCAL }
_6 = { NULL NONLOCAL } same as _1
_7 = { NULL NONLOCAL } same as _1
_8 = { NONLOCAL }
_9 = { NULL NONLOCAL } same as _1
currentmin_78 = { ESCAPED NONLOCAL }
currentmin_51 = { ESCAPED NONLOCAL }
currentmin_52 = { ESCAPED NONLOCAL } same as currentmin_51
j.75_10 = { NULL NONLOCAL } same as _1
j_79 = { NULL NONLOCAL } same as _1
_11 = { NULL NONLOCAL } same as _1
_12 = { NULL NONLOCAL } same as _1
_13 = { NONLOCAL }
_14 = { NULL NONLOCAL } same as _1
j_49 = { NULL NONLOCAL } same as _1
_15 = { ESCAPED NONLOCAL }
_16 = { NULL NONLOCAL } same as _1
_17 = { NULL NONLOCAL } same as _1
_18 = { NONLOCAL }
_19 = { NULL NONLOCAL } same as _1
_20 = { ESCAPED NONLOCAL }
j.76_21 = { NULL NONLOCAL } same as _1
j_77 = { NULL NONLOCAL } same as _1
i.77_22 = { NULL NONLOCAL } same as _1
i_75 = { NULL NONLOCAL } same as _1
_23 = { NULL NONLOCAL } same as _1
i_46 = { NULL NONLOCAL } same as _1
_24 = { NULL NONLOCAL } same as _1
_25 = { NONLOCAL }
_26 = { NULL NONLOCAL } same as _1
j_50 = { NULL NONLOCAL } same as _1
_27 = { ESCAPED NONLOCAL }
_28 = { NULL NONLOCAL } same as _1
_29 = { NULL NONLOCAL } same as _1
_30 = { NONLOCAL }
_31 = { NULL NONLOCAL } same as _1
currentmin_70 = { ESCAPED NONLOCAL }
currentmin_53 = { ESCAPED NONLOCAL }
currentmin_54 = { ESCAPED NONLOCAL } same as currentmin_53
i.78_32 = { NULL NONLOCAL } same as _1
i_71 = { NULL NONLOCAL } same as _1
_33 = { NULL NONLOCAL } same as _1
i_47 = { NULL NONLOCAL } same as _1
_34 = { NULL NONLOCAL } same as _1
_35 = { NONLOCAL }
_36 = { NULL NONLOCAL } same as _1
_37 = { ESCAPED NONLOCAL }
_38 = { NULL NONLOCAL } same as _1
_39 = { NULL NONLOCAL } same as _1
_40 = { NONLOCAL }
_41 = { NULL NONLOCAL } same as _1
_42 = { ESCAPED NONLOCAL }
i.79_43 = { NULL NONLOCAL } same as _1
i_68 = { NULL NONLOCAL } same as _1
j.80_44 = { NULL NONLOCAL } same as _1
j_69 = { NULL NONLOCAL } same as _1


Alias information for calc_minimum_costs

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to NULL, points-to vars: { }
_18, points-to non-local, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to NULL, points-to vars: { }
_30, points-to non-local, points-to NULL, points-to vars: { }
_35, points-to non-local, points-to NULL, points-to vars: { }
_40, points-to non-local, points-to NULL, points-to vars: { }
tableau_66(D), points-to non-local, points-to NULL, points-to vars: { }

calc_minimum_costs (long int[101] * tableau)
{
  long int currentmin;
  short unsigned int j;
  short unsigned int i;
  long unsigned int _1;
  long unsigned int _2;
  long int[101] * _3;
  int _4;
  long int _5;
  long unsigned int _6;
  long unsigned int _7;
  long int[101] * _8;
  int _9;
  short unsigned int j.75_10;
  long unsigned int _11;
  long unsigned int _12;
  long int[101] * _13;
  int _14;
  long int _15;
  long unsigned int _16;
  long unsigned int _17;
  long int[101] * _18;
  int _19;
  long int _20;
  short unsigned int j.76_21;
  short unsigned int i.77_22;
  long unsigned int _23;
  long unsigned int _24;
  long int[101] * _25;
  int _26;
  long int _27;
  long unsigned int _28;
  long unsigned int _29;
  long int[101] * _30;
  int _31;
  short unsigned int i.78_32;
  long unsigned int _33;
  long unsigned int _34;
  long int[101] * _35;
  int _36;
  long int _37;
  long unsigned int _38;
  long unsigned int _39;
  long int[101] * _40;
  int _41;
  long int _42;
  short unsigned int i.79_43;
  short unsigned int j.80_44;

  <bb 2> [0.00%]:
  goto <bb 10>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_45;
  _2 = _1 * 808;
  _3 = tableau_66(D) + _2;
  _4 = (int) j_48;
  _5 = *_3[_4];
  if (_5 < currentmin_52)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _6 = (long unsigned int) i_45;
  _7 = _6 * 808;
  _8 = tableau_66(D) + _7;
  _9 = (int) j_48;
  currentmin_78 = *_8[_9];

  <bb 5> [0.00%]:
  # currentmin_51 = PHI <currentmin_52(3), currentmin_78(4)>
  j.75_10 = j_48;
  j_79 = j_48 + 1;

  <bb 6> [0.00%]:
  # j_48 = PHI <0(10), j_79(5)>
  # currentmin_52 = PHI <9223372036854775807(10), currentmin_51(5)>
  if (j_48 <= 100)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  _11 = (long unsigned int) i_45;
  _12 = _11 * 808;
  _13 = tableau_66(D) + _12;
  _14 = (int) j_49;
  _15 = *_13[_14];
  _16 = (long unsigned int) i_45;
  _17 = _16 * 808;
  _18 = tableau_66(D) + _17;
  _19 = (int) j_49;
  _20 = _15 - currentmin_52;
  *_18[_19] = _20;
  j.76_21 = j_49;
  j_77 = j_49 + 1;

  <bb 8> [0.00%]:
  # j_49 = PHI <0(6), j_77(7)>
  if (j_49 <= 100)
    goto <bb 7>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  i.77_22 = i_45;
  i_75 = i_45 + 1;

  <bb 10> [0.00%]:
  # i_45 = PHI <0(2), i_75(9)>
  if (i_45 <= 100)
    goto <bb 6>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 11> [0.00%]:
  _23 = (long unsigned int) i_46;
  _24 = _23 * 808;
  _25 = tableau_66(D) + _24;
  _26 = (int) j_50;
  _27 = *_25[_26];
  if (_27 < currentmin_54)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  _28 = (long unsigned int) i_46;
  _29 = _28 * 808;
  _30 = tableau_66(D) + _29;
  _31 = (int) j_50;
  currentmin_70 = *_30[_31];

  <bb 13> [0.00%]:
  # currentmin_53 = PHI <currentmin_54(11), currentmin_70(12)>
  i.78_32 = i_46;
  i_71 = i_46 + 1;

  <bb 14> [0.00%]:
  # i_46 = PHI <0(19), i_71(13)>
  # currentmin_54 = PHI <9223372036854775807(19), currentmin_53(13)>
  if (i_46 <= 100)
    goto <bb 11>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 15> [0.00%]:
  if (currentmin_54 != 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 16> [0.00%]:
  _33 = (long unsigned int) i_47;
  _34 = _33 * 808;
  _35 = tableau_66(D) + _34;
  _36 = (int) j_50;
  _37 = *_35[_36];
  _38 = (long unsigned int) i_47;
  _39 = _38 * 808;
  _40 = tableau_66(D) + _39;
  _41 = (int) j_50;
  _42 = _37 - currentmin_54;
  *_40[_41] = _42;
  i.79_43 = i_47;
  i_68 = i_47 + 1;

  <bb 17> [0.00%]:
  # i_47 = PHI <0(15), i_68(16)>
  if (i_47 <= 100)
    goto <bb 16>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 18> [0.00%]:
  j.80_44 = j_50;
  j_69 = j_50 + 1;

  <bb 19> [0.00%]:
  # j_50 = PHI <0(10), j_69(18)>
  if (j_50 <= 100)
    goto <bb 14>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  return;

}



;; Function first_assignments (first_assignments, funcdef_no=80, decl_uid=4618, cgraph_uid=80, symbol_order=105)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
tableau = &NONLOCAL
assignedtableau = &NONLOCAL
_1 = i_97
_2 = _1
_2 = &NONLOCAL
_3 = assignedtableau + UNKNOWN
_4 = j_101
derefaddrtmp(16) = &NULL
*_3 + UNKNOWN = derefaddrtmp(16)
j.83_5 = j_101
j_203 = j_101
j_203 = &NONLOCAL
j_101 = &NULL
j_101 = j_203
i.84_6 = i_97
i_201 = i_97
i_201 = &NONLOCAL
i_97 = &NULL
i_97 = i_201
totnumassigns_113 = &NULL
totnumassigns_113 = totnumassigns_117
selected_124 = &NULL
selected_124 = selected_130
_7 = i_98
_8 = _7
_8 = &NONLOCAL
_9 = tableau + UNKNOWN
_10 = j_102
_11 = *_9 + UNKNOWN
_12 = i_98
_13 = _12
_13 = &NONLOCAL
_14 = assignedtableau + UNKNOWN
_15 = j_102
_16 = *_14 + UNKNOWN
numzeros.85_17 = numzeros_121
numzeros_197 = numzeros_121
numzeros_197 = &NONLOCAL
selected_198 = j_102
numzeros_120 = numzeros_121
numzeros_120 = numzeros_121
numzeros_120 = numzeros_197
selected_125 = selected_126
selected_125 = selected_126
selected_125 = selected_198
j.86_18 = j_102
j_199 = j_102
j_199 = &NONLOCAL
j_102 = &NULL
j_102 = j_199
numzeros_121 = &NULL
numzeros_121 = numzeros_120
selected_126 = selected_127
selected_126 = selected_125
numassigns.87_19 = numassigns_110
numassigns_190 = numassigns_110
numassigns_190 = &NONLOCAL
totnumassigns.88_20 = totnumassigns_115
totnumassigns_191 = totnumassigns_115
totnumassigns_191 = &NONLOCAL
_21 = i_98
_22 = _21
_22 = &NONLOCAL
_23 = assignedtableau + UNKNOWN
derefaddrtmp(56) = &NONLOCAL
*_23 + UNKNOWN = derefaddrtmp(56)
_24 = k_105
_25 = _24
_25 = &NONLOCAL
_26 = tableau + UNKNOWN
_27 = *_26 + UNKNOWN
_28 = k_105
_29 = _28
_29 = &NONLOCAL
_30 = assignedtableau + UNKNOWN
derefaddrtmp(65) = &NONLOCAL
*_30 + UNKNOWN = derefaddrtmp(65)
k.89_31 = k_105
k_195 = k_105
k_195 = &NONLOCAL
k_105 = &NULL
k_105 = k_195
numassigns_109 = numassigns_110
numassigns_109 = numassigns_190
totnumassigns_114 = totnumassigns_115
totnumassigns_114 = totnumassigns_191
i.90_32 = i_98
i_196 = i_98
i_196 = &NONLOCAL
i_98 = &NULL
i_98 = i_196
numassigns_110 = &NULL
numassigns_110 = numassigns_109
totnumassigns_115 = totnumassigns_113
totnumassigns_115 = totnumassigns_114
selected_127 = selected_124
selected_127 = selected_126
_33 = i_99
_34 = _33
_34 = &NONLOCAL
_35 = tableau + UNKNOWN
_36 = j_103
_37 = *_35 + UNKNOWN
_38 = i_99
_39 = _38
_39 = &NONLOCAL
_40 = assignedtableau + UNKNOWN
_41 = j_103
_42 = *_40 + UNKNOWN
numzeros.91_43 = numzeros_123
numzeros_185 = numzeros_123
numzeros_185 = &NONLOCAL
selected_186 = i_99
numzeros_122 = numzeros_123
numzeros_122 = numzeros_123
numzeros_122 = numzeros_185
selected_128 = selected_129
selected_128 = selected_129
selected_128 = selected_186
i.92_44 = i_99
i_187 = i_99
i_187 = &NONLOCAL
i_99 = &NULL
i_99 = i_187
numzeros_123 = &NULL
numzeros_123 = numzeros_122
selected_129 = selected_130
selected_129 = selected_128
numassigns.93_45 = numassigns_112
numassigns_178 = numassigns_112
numassigns_178 = &NONLOCAL
totnumassigns.94_46 = totnumassigns_117
totnumassigns_179 = totnumassigns_117
totnumassigns_179 = &NONLOCAL
_47 = selected_129
_48 = _47
_48 = &NONLOCAL
_49 = assignedtableau + UNKNOWN
_50 = j_103
derefaddrtmp(102) = &NONLOCAL
*_49 + UNKNOWN = derefaddrtmp(102)
_51 = selected_129
_52 = _51
_52 = &NONLOCAL
_53 = tableau + UNKNOWN
_54 = k_106
_55 = *_53 + UNKNOWN
_56 = selected_129
_57 = _56
_57 = &NONLOCAL
_58 = assignedtableau + UNKNOWN
_59 = k_106
derefaddrtmp(113) = &NONLOCAL
*_58 + UNKNOWN = derefaddrtmp(113)
k.95_60 = k_106
k_183 = k_106
k_183 = &NONLOCAL
k_106 = &NULL
k_106 = k_183
numassigns_111 = numassigns_112
numassigns_111 = numassigns_178
totnumassigns_116 = totnumassigns_117
totnumassigns_116 = totnumassigns_179
j.96_61 = j_103
j_184 = j_103
j_184 = &NONLOCAL
j_103 = &NULL
j_103 = j_184
numassigns_112 = numassigns_110
numassigns_112 = numassigns_111
totnumassigns_117 = totnumassigns_115
totnumassigns_117 = totnumassigns_116
selected_130 = selected_127
selected_130 = selected_129
_175 = totnumassigns_117
_62 = i_100
_63 = _62
_63 = &NONLOCAL
_64 = tableau + UNKNOWN
_65 = j_104
_66 = *_64 + UNKNOWN
_67 = i_100
_68 = _67
_68 = &NONLOCAL
_69 = assignedtableau + UNKNOWN
_70 = j_104
_71 = *_69 + UNKNOWN
selected_164 = j_104
j.97_72 = j_104
j_165 = j_104
j_165 = &NONLOCAL
j_104 = &NULL
j_104 = j_165
selected_131 = selected_164
selected_131 = &NONLOCAL
_73 = i_100
_74 = _73
_74 = &NONLOCAL
_75 = assignedtableau + UNKNOWN
derefaddrtmp(140) = &NONLOCAL
*_75 + UNKNOWN = derefaddrtmp(140)
totnumassigns.98_76 = totnumassigns_119
totnumassigns_167 = totnumassigns_119
totnumassigns_167 = &NONLOCAL
_77 = k_107
_78 = i_100
_79 = _78
_79 = &NONLOCAL
_80 = tableau + UNKNOWN
_81 = k_107
_82 = *_80 + UNKNOWN
_83 = i_100
_84 = _83
_84 = &NONLOCAL
_85 = assignedtableau + UNKNOWN
_86 = k_107
derefaddrtmp(155) = &NONLOCAL
*_85 + UNKNOWN = derefaddrtmp(155)
k.99_87 = k_107
k_173 = k_107
k_173 = &NONLOCAL
k_107 = &NULL
k_107 = k_173
_88 = k_108
_89 = _88
_89 = &NONLOCAL
_90 = tableau + UNKNOWN
_91 = *_90 + UNKNOWN
_92 = k_108
_93 = _92
_93 = &NONLOCAL
_94 = assignedtableau + UNKNOWN
derefaddrtmp(166) = &NONLOCAL
*_94 + UNKNOWN = derefaddrtmp(166)
k.100_95 = k_108
k_171 = k_108
k_171 = &NONLOCAL
k_108 = &NULL
k_108 = k_171
totnumassigns_118 = totnumassigns_119
totnumassigns_118 = totnumassigns_167
i.101_96 = i_100
i_174 = i_100
i_174 = &NONLOCAL
i_100 = &NULL
i_100 = i_174
totnumassigns_119 = totnumassigns_117
totnumassigns_119 = totnumassigns_118
_159 = totnumassigns_119
_132 = _175
_132 = _159
ESCAPED = _132

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"tableau"[label="tableau = { 5 }"];
"assignedtableau"[label="assignedtableau = { 5 }"];
"_1";
"i_97"[label="i_97 = { 1 5 }"];
"_2"[label="_2 = { 5 }"];
"_3";
"_4";
"j_101"[label="j_101 = { 1 5 }"];
"derefaddrtmp(16)"[label="derefaddrtmp(16) = { 1 }"];
"j.83_5";
"i.84_6";
"totnumassigns_117"[label="totnumassigns_117 = { 1 5 }"];
"selected_124"[label="selected_124 = { 1 }"];
"_7";
"i_98"[label="i_98 = { 1 5 }"];
"_8"[label="_8 = { 5 }"];
"_9";
"_10";
"j_102"[label="j_102 = { 1 5 }"];
"_11";
"_12";
"_13"[label="_13 = { 5 }"];
"_14";
"_15";
"_16";
"numzeros.85_17";
"numzeros_121"[label="numzeros_121 = { 1 5 }"];
"selected_198";
"j.86_18";
"numassigns.87_19";
"numassigns_110"[label="numassigns_110 = { 1 5 }"];
"totnumassigns.88_20";
"_21";
"_22"[label="_22 = { 5 }"];
"_23";
"derefaddrtmp(56)"[label="derefaddrtmp(56) = { 5 }"];
"_24";
"k_105"[label="k_105 = { 1 5 }"];
"_25"[label="_25 = { 5 }"];
"_26";
"_27";
"_28";
"_29"[label="_29 = { 5 }"];
"_30";
"derefaddrtmp(65)"[label="derefaddrtmp(65) = { 5 }"];
"k.89_31";
"i.90_32";
"_33";
"i_99"[label="i_99 = { 1 5 }"];
"_34"[label="_34 = { 5 }"];
"_35";
"_36";
"j_103"[label="j_103 = { 1 5 }"];
"_37";
"_38";
"_39"[label="_39 = { 5 }"];
"_40";
"_41";
"_42";
"numzeros.91_43";
"numzeros_123"[label="numzeros_123 = { 1 5 }"];
"selected_186";
"i.92_44";
"numassigns.93_45";
"numassigns_112"[label="numassigns_112 = { 5 }"];
"totnumassigns.94_46";
"_47";
"_48"[label="_48 = { 5 }"];
"_49";
"_50";
"derefaddrtmp(102)"[label="derefaddrtmp(102) = { 5 }"];
"_51";
"_52"[label="_52 = { 5 }"];
"_53";
"_54";
"k_106"[label="k_106 = { 1 5 }"];
"_55";
"_56";
"_57"[label="_57 = { 5 }"];
"_58";
"_59";
"derefaddrtmp(113)"[label="derefaddrtmp(113) = { 5 }"];
"k.95_60";
"j.96_61";
"_175";
"_62";
"i_100"[label="i_100 = { 1 5 }"];
"_63"[label="_63 = { 5 }"];
"_64";
"_65";
"j_104"[label="j_104 = { 1 5 }"];
"_66";
"_67";
"_68"[label="_68 = { 5 }"];
"_69";
"_70";
"_71";
"selected_164";
"j.97_72";
"selected_131"[label="selected_131 = { 5 }"];
"_73";
"_74"[label="_74 = { 5 }"];
"_75";
"derefaddrtmp(140)"[label="derefaddrtmp(140) = { 5 }"];
"totnumassigns.98_76";
"totnumassigns_119"[label="totnumassigns_119 = { 5 }"];
"_77";
"k_107"[label="k_107 = { 1 5 }"];
"_78";
"_79"[label="_79 = { 5 }"];
"_80";
"_81";
"_82";
"_83";
"_84"[label="_84 = { 5 }"];
"_85";
"_86";
"derefaddrtmp(155)"[label="derefaddrtmp(155) = { 5 }"];
"k.99_87";
"_88";
"k_108"[label="k_108 = { 1 5 }"];
"_89"[label="_89 = { 5 }"];
"_90";
"_91";
"_92";
"_93"[label="_93 = { 5 }"];
"_94";
"derefaddrtmp(166)"[label="derefaddrtmp(166) = { 5 }"];
"k.100_95";
"i.101_96";
"_159";
"_132";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*tableau";
"*assignedtableau";
"*_1";
"*i_97";
"*_2";
"*_3";
"*_4";
"*j_101";
"*derefaddrtmp(16)";
"*j.83_5";
"*j_203";
"*i.84_6";
"*i_201";
"*totnumassigns_117";
"*selected_124";
"*selected_130";
"*_7";
"*i_98";
"*_8";
"*_9";
"*_10";
"*j_102";
"*_11";
"*_12";
"*_13";
"*_14";
"*_15";
"*_16";
"*numzeros.85_17";
"*numzeros_121";
"*numzeros_197";
"*selected_198";
"*numzeros_120";
"*selected_125";
"*selected_126";
"*j.86_18";
"*j_199";
"*selected_127";
"*numassigns.87_19";
"*numassigns_110";
"*numassigns_190";
"*totnumassigns.88_20";
"*_21";
"*_22";
"*_23";
"*derefaddrtmp(56)";
"*_24";
"*k_105";
"*_25";
"*_26";
"*_27";
"*_28";
"*_29";
"*_30";
"*derefaddrtmp(65)";
"*k.89_31";
"*k_195";
"*numassigns_109";
"*i.90_32";
"*i_196";
"*_33";
"*i_99";
"*_34";
"*_35";
"*_36";
"*j_103";
"*_37";
"*_38";
"*_39";
"*_40";
"*_41";
"*_42";
"*numzeros.91_43";
"*numzeros_123";
"*numzeros_185";
"*selected_186";
"*numzeros_122";
"*selected_128";
"*selected_129";
"*i.92_44";
"*i_187";
"*numassigns.93_45";
"*numassigns_112";
"*numassigns_178";
"*totnumassigns.94_46";
"*_47";
"*_48";
"*_49";
"*_50";
"*derefaddrtmp(102)";
"*_51";
"*_52";
"*_53";
"*_54";
"*k_106";
"*_55";
"*_56";
"*_57";
"*_58";
"*_59";
"*derefaddrtmp(113)";
"*k.95_60";
"*k_183";
"*numassigns_111";
"*j.96_61";
"*j_184";
"*_175";
"*_62";
"*i_100";
"*_63";
"*_64";
"*_65";
"*j_104";
"*_66";
"*_67";
"*_68";
"*_69";
"*_70";
"*_71";
"*selected_164";
"*j.97_72";
"*j_165";
"*selected_131";
"*_73";
"*_74";
"*_75";
"*derefaddrtmp(140)";
"*totnumassigns.98_76";
"*totnumassigns_119";
"*_77";
"*k_107";
"*_78";
"*_79";
"*_80";
"*_81";
"*_82";
"*_83";
"*_84";
"*_85";
"*_86";
"*derefaddrtmp(155)";
"*k.99_87";
"*k_173";
"*_88";
"*k_108";
"*_89";
"*_90";
"*_91";
"*_92";
"*_93";
"*_94";
"*derefaddrtmp(166)";
"*k.100_95";
"*k_171";
"*i.101_96";
"*i_174";
"*_159";
"*_132";

  // Edges in the constraint graph:
"_132" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"i_97" -> "_1";
"i_97" -> "i_97";
"i_97" -> "i_97";
"_1" -> "_2";
"j_101" -> "_4";
"j_101" -> "j_101";
"j_101" -> "j_101";
"j_101" -> "j.83_5";
"i_97" -> "i.84_6";
"totnumassigns_117" -> "totnumassigns_117";
"totnumassigns_117" -> "totnumassigns_117";
"totnumassigns_117" -> "totnumassigns_117";
"totnumassigns_117" -> "totnumassigns_117";
"totnumassigns_117" -> "totnumassigns_117";
"totnumassigns_117" -> "totnumassigns_117";
"totnumassigns_117" -> "totnumassigns_117";
"selected_124" -> "selected_124";
"selected_124" -> "selected_124";
"selected_198" -> "selected_124";
"selected_124" -> "selected_124";
"selected_124" -> "selected_124";
"selected_124" -> "selected_124";
"selected_186" -> "selected_124";
"selected_124" -> "selected_124";
"selected_124" -> "selected_124";
"i_98" -> "_7";
"i_98" -> "i_98";
"i_98" -> "i_98";
"_7" -> "_8";
"j_102" -> "_10";
"j_102" -> "j_102";
"j_102" -> "j_102";
"i_98" -> "_12";
"_12" -> "_13";
"j_102" -> "_15";
"numzeros_121" -> "numzeros.85_17";
"numzeros_121" -> "numzeros_121";
"numzeros_121" -> "numzeros_121";
"numzeros_121" -> "numzeros_121";
"j_102" -> "selected_198";
"j_102" -> "j.86_18";
"numassigns_110" -> "numassigns.87_19";
"numassigns_110" -> "numassigns_110";
"numassigns_110" -> "numassigns_110";
"numassigns_110" -> "numassigns_110";
"totnumassigns_117" -> "totnumassigns.88_20";
"i_98" -> "_21";
"_21" -> "_22";
"k_105" -> "_24";
"k_105" -> "k_105";
"k_105" -> "k_105";
"_24" -> "_25";
"k_105" -> "_28";
"_28" -> "_29";
"k_105" -> "k.89_31";
"i_98" -> "i.90_32";
"i_99" -> "_33";
"i_99" -> "i_99";
"i_99" -> "i_99";
"_33" -> "_34";
"j_103" -> "_36";
"j_103" -> "j_103";
"j_103" -> "j_103";
"i_99" -> "_38";
"_38" -> "_39";
"j_103" -> "_41";
"numzeros_123" -> "numzeros.91_43";
"numzeros_123" -> "numzeros_123";
"numzeros_123" -> "numzeros_123";
"numzeros_123" -> "numzeros_123";
"i_99" -> "selected_186";
"i_99" -> "i.92_44";
"numassigns_112" -> "numassigns.93_45";
"numassigns_110" -> "numassigns_112";
"numassigns_112" -> "numassigns_112";
"numassigns_112" -> "numassigns_112";
"numassigns_112" -> "numassigns_112";
"totnumassigns_117" -> "totnumassigns.94_46";
"selected_124" -> "_47";
"_47" -> "_48";
"j_103" -> "_50";
"selected_124" -> "_51";
"_51" -> "_52";
"k_106" -> "_54";
"k_106" -> "k_106";
"k_106" -> "k_106";
"selected_124" -> "_56";
"_56" -> "_57";
"k_106" -> "_59";
"k_106" -> "k.95_60";
"j_103" -> "j.96_61";
"totnumassigns_117" -> "_175";
"i_100" -> "_62";
"i_100" -> "i_100";
"i_100" -> "i_100";
"_62" -> "_63";
"j_104" -> "_65";
"j_104" -> "j_104";
"j_104" -> "j_104";
"i_100" -> "_67";
"_67" -> "_68";
"j_104" -> "_70";
"j_104" -> "selected_164";
"j_104" -> "j.97_72";
"selected_164" -> "selected_131";
"i_100" -> "_73";
"_73" -> "_74";
"totnumassigns_119" -> "totnumassigns.98_76";
"totnumassigns_117" -> "totnumassigns_119";
"totnumassigns_119" -> "totnumassigns_119";
"totnumassigns_119" -> "totnumassigns_119";
"totnumassigns_119" -> "totnumassigns_119";
"k_107" -> "_77";
"k_107" -> "k_107";
"k_107" -> "k_107";
"i_100" -> "_78";
"_78" -> "_79";
"k_107" -> "_81";
"i_100" -> "_83";
"_83" -> "_84";
"k_107" -> "_86";
"k_107" -> "k.99_87";
"k_108" -> "_88";
"k_108" -> "k_108";
"k_108" -> "k_108";
"_88" -> "_89";
"k_108" -> "_92";
"_92" -> "_93";
"k_108" -> "k.100_95";
"i_100" -> "i.101_96";
"totnumassigns_119" -> "_159";
"_175" -> "_132";
"_159" -> "_132";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"tableau" [label="\N\n_3 = tableau + UNKNOWN\l_9 = tableau + UNKNOWN\l_14 = tableau + UNKNOWN\l_23 = tableau + UNKNOWN\l_26 = tableau + UNKNOWN\l_30 = tableau + UNKNOWN\l_35 = tableau + UNKNOWN\l_40 = tableau + UNKNOWN\l_49 = tableau + UNKNOWN\l_53 = tableau + UNKNOWN\l_58 = tableau + UNKNOWN\l_64 = tableau + UNKNOWN\l_69 = tableau + UNKNOWN\l_75 = tableau + UNKNOWN\l_80 = tableau + UNKNOWN\l_85 = tableau + UNKNOWN\l_90 = tableau + UNKNOWN\l_94 = tableau + UNKNOWN\l"];
"_1";
"_3" [label="\N\n*_3 + UNKNOWN = derefaddrtmp(16)\l"];
"derefaddrtmp(16)";
"_9" [label="\N\n_11 = *_9 + UNKNOWN\l"];
"_11";
"_14" [label="\N\n_16 = *_14 + UNKNOWN\l"];
"_16";
"_23" [label="\N\n*_23 + UNKNOWN = tableau\l"];
"_26" [label="\N\n_27 = *_26 + UNKNOWN\l"];
"_27";
"_30" [label="\N\n*_30 + UNKNOWN = tableau\l"];
"_35" [label="\N\n_37 = *_35 + UNKNOWN\l"];
"_37";
"_40" [label="\N\n_42 = *_40 + UNKNOWN\l"];
"_42";
"_49" [label="\N\n*_49 + UNKNOWN = tableau\l"];
"_53" [label="\N\n_55 = *_53 + UNKNOWN\l"];
"_55";
"_58" [label="\N\n*_58 + UNKNOWN = tableau\l"];
"_64" [label="\N\n_66 = *_64 + UNKNOWN\l"];
"_66";
"_69" [label="\N\n_71 = *_69 + UNKNOWN\l"];
"_71";
"_75" [label="\N\n*_75 + UNKNOWN = tableau\l"];
"_80" [label="\N\n_82 = *_80 + UNKNOWN\l"];
"_82";
"_85" [label="\N\n*_85 + UNKNOWN = tableau\l"];
"_90" [label="\N\n_91 = *_90 + UNKNOWN\l"];
"_91";
"_94" [label="\N\n*_94 + UNKNOWN = tableau\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_23";
"STOREDANYTHING" -> "_26";
"STOREDANYTHING" -> "_27";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_37";
"STOREDANYTHING" -> "_40";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_49";
"STOREDANYTHING" -> "_53";
"STOREDANYTHING" -> "_55";
"STOREDANYTHING" -> "_58";
"STOREDANYTHING" -> "_64";
"STOREDANYTHING" -> "_66";
"STOREDANYTHING" -> "_69";
"STOREDANYTHING" -> "_71";
"STOREDANYTHING" -> "_75";
"STOREDANYTHING" -> "_80";
"STOREDANYTHING" -> "_82";
"STOREDANYTHING" -> "_85";
"STOREDANYTHING" -> "_90";
"STOREDANYTHING" -> "_91";
"STOREDANYTHING" -> "_94";
"_1" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"tableau" [label="\N\n_3 = tableau + UNKNOWN\l_9 = tableau + UNKNOWN\l_14 = tableau + UNKNOWN\l_23 = tableau + UNKNOWN\l_26 = tableau + UNKNOWN\l_30 = tableau + UNKNOWN\l_35 = tableau + UNKNOWN\l_40 = tableau + UNKNOWN\l_49 = tableau + UNKNOWN\l_53 = tableau + UNKNOWN\l_58 = tableau + UNKNOWN\l_64 = tableau + UNKNOWN\l_69 = tableau + UNKNOWN\l_75 = tableau + UNKNOWN\l_80 = tableau + UNKNOWN\l_85 = tableau + UNKNOWN\l_90 = tableau + UNKNOWN\l_94 = tableau + UNKNOWN\l"];
"_1";
"_3" [label="\N\n*_3 + UNKNOWN = derefaddrtmp(16)\l"];
"derefaddrtmp(16)";
"_9" [label="\N\n_11 = *_9 + UNKNOWN\l"];
"_11";
"_14" [label="\N\n_16 = *_14 + UNKNOWN\l"];
"_16";
"_23" [label="\N\n*_23 + UNKNOWN = tableau\l"];
"_26" [label="\N\n_27 = *_26 + UNKNOWN\l"];
"_27";
"_30" [label="\N\n*_30 + UNKNOWN = tableau\l"];
"_35" [label="\N\n_37 = *_35 + UNKNOWN\l"];
"_37";
"_40" [label="\N\n_42 = *_40 + UNKNOWN\l"];
"_42";
"_49" [label="\N\n*_49 + UNKNOWN = tableau\l"];
"_53" [label="\N\n_55 = *_53 + UNKNOWN\l"];
"_55";
"_58" [label="\N\n*_58 + UNKNOWN = tableau\l"];
"_64" [label="\N\n_66 = *_64 + UNKNOWN\l"];
"_66";
"_69" [label="\N\n_71 = *_69 + UNKNOWN\l"];
"_71";
"_75" [label="\N\n*_75 + UNKNOWN = tableau\l"];
"_80" [label="\N\n_82 = *_80 + UNKNOWN\l"];
"_82";
"_85" [label="\N\n*_85 + UNKNOWN = tableau\l"];
"_90" [label="\N\n_91 = *_90 + UNKNOWN\l"];
"_91";
"_94" [label="\N\n*_94 + UNKNOWN = tableau\l"];

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_23";
"STOREDANYTHING" -> "_26";
"STOREDANYTHING" -> "_27";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_37";
"STOREDANYTHING" -> "_40";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_49";
"STOREDANYTHING" -> "_53";
"STOREDANYTHING" -> "_55";
"STOREDANYTHING" -> "_58";
"STOREDANYTHING" -> "_64";
"STOREDANYTHING" -> "_66";
"STOREDANYTHING" -> "_69";
"STOREDANYTHING" -> "_71";
"STOREDANYTHING" -> "_75";
"STOREDANYTHING" -> "_80";
"STOREDANYTHING" -> "_82";
"STOREDANYTHING" -> "_85";
"STOREDANYTHING" -> "_90";
"STOREDANYTHING" -> "_91";
"STOREDANYTHING" -> "_94";
"tableau" -> "ESCAPED";
"_1" -> "ESCAPED";
"derefaddrtmp(16)" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
tableau = { NONLOCAL }
assignedtableau = { NONLOCAL } same as tableau
_1 = { NULL NONLOCAL }
i_97 = { NULL NONLOCAL } same as _1
_2 = { NULL NONLOCAL } same as _1
_3 = { NONLOCAL }
_4 = { NULL NONLOCAL } same as _1
j_101 = { NULL NONLOCAL } same as _1
derefaddrtmp(16) = { NULL }
j.83_5 = { NULL NONLOCAL } same as _1
j_203 = { NULL NONLOCAL } same as _1
i.84_6 = { NULL NONLOCAL } same as _1
i_201 = { NULL NONLOCAL } same as _1
totnumassigns_113 = { NULL NONLOCAL } same as _1
totnumassigns_117 = { NULL NONLOCAL } same as _1
selected_124 = { NULL NONLOCAL } same as _1
selected_130 = { NULL NONLOCAL } same as _1
_7 = { NULL NONLOCAL } same as _1
i_98 = { NULL NONLOCAL } same as _1
_8 = { NULL NONLOCAL } same as _1
_9 = { NONLOCAL }
_10 = { NULL NONLOCAL } same as _1
j_102 = { NULL NONLOCAL } same as _1
_11 = { ESCAPED NONLOCAL }
_12 = { NULL NONLOCAL } same as _1
_13 = { NULL NONLOCAL } same as _1
_14 = { NONLOCAL }
_15 = { NULL NONLOCAL } same as _1
_16 = { ESCAPED NONLOCAL }
numzeros.85_17 = { NULL NONLOCAL } same as _1
numzeros_121 = { NULL NONLOCAL } same as _1
numzeros_197 = { NULL NONLOCAL } same as _1
selected_198 = { NULL NONLOCAL } same as _1
numzeros_120 = { NULL NONLOCAL } same as _1
selected_125 = { NULL NONLOCAL } same as _1
selected_126 = { NULL NONLOCAL } same as _1
j.86_18 = { NULL NONLOCAL } same as _1
j_199 = { NULL NONLOCAL } same as _1
selected_127 = { NULL NONLOCAL } same as _1
numassigns.87_19 = { NULL NONLOCAL } same as _1
numassigns_110 = { NULL NONLOCAL } same as _1
numassigns_190 = { NULL NONLOCAL } same as _1
totnumassigns.88_20 = { NULL NONLOCAL } same as _1
totnumassigns_115 = { NULL NONLOCAL } same as _1
totnumassigns_191 = { NULL NONLOCAL } same as _1
_21 = { NULL NONLOCAL } same as _1
_22 = { NULL NONLOCAL } same as _1
_23 = { NONLOCAL }
derefaddrtmp(56) = { NONLOCAL } same as tableau
_24 = { NULL NONLOCAL } same as _1
k_105 = { NULL NONLOCAL } same as _1
_25 = { NULL NONLOCAL } same as _1
_26 = { NONLOCAL }
_27 = { ESCAPED NONLOCAL }
_28 = { NULL NONLOCAL } same as _1
_29 = { NULL NONLOCAL } same as _1
_30 = { NONLOCAL }
derefaddrtmp(65) = { NONLOCAL } same as tableau
k.89_31 = { NULL NONLOCAL } same as _1
k_195 = { NULL NONLOCAL } same as _1
numassigns_109 = { NULL NONLOCAL } same as _1
totnumassigns_114 = { NULL NONLOCAL } same as _1
i.90_32 = { NULL NONLOCAL } same as _1
i_196 = { NULL NONLOCAL } same as _1
_33 = { NULL NONLOCAL } same as _1
i_99 = { NULL NONLOCAL } same as _1
_34 = { NULL NONLOCAL } same as _1
_35 = { NONLOCAL }
_36 = { NULL NONLOCAL } same as _1
j_103 = { NULL NONLOCAL } same as _1
_37 = { ESCAPED NONLOCAL }
_38 = { NULL NONLOCAL } same as _1
_39 = { NULL NONLOCAL } same as _1
_40 = { NONLOCAL }
_41 = { NULL NONLOCAL } same as _1
_42 = { ESCAPED NONLOCAL }
numzeros.91_43 = { NULL NONLOCAL } same as _1
numzeros_123 = { NULL NONLOCAL } same as _1
numzeros_185 = { NULL NONLOCAL } same as _1
selected_186 = { NULL NONLOCAL } same as _1
numzeros_122 = { NULL NONLOCAL } same as _1
selected_128 = { NULL NONLOCAL } same as _1
selected_129 = { NULL NONLOCAL } same as _1
i.92_44 = { NULL NONLOCAL } same as _1
i_187 = { NULL NONLOCAL } same as _1
numassigns.93_45 = { NULL NONLOCAL } same as _1
numassigns_112 = { NULL NONLOCAL } same as _1
numassigns_178 = { NULL NONLOCAL } same as _1
totnumassigns.94_46 = { NULL NONLOCAL } same as _1
totnumassigns_179 = { NULL NONLOCAL } same as _1
_47 = { NULL NONLOCAL } same as _1
_48 = { NULL NONLOCAL } same as _1
_49 = { NONLOCAL }
_50 = { NULL NONLOCAL } same as _1
derefaddrtmp(102) = { NONLOCAL } same as tableau
_51 = { NULL NONLOCAL } same as _1
_52 = { NULL NONLOCAL } same as _1
_53 = { NONLOCAL }
_54 = { NULL NONLOCAL } same as _1
k_106 = { NULL NONLOCAL } same as _1
_55 = { ESCAPED NONLOCAL }
_56 = { NULL NONLOCAL } same as _1
_57 = { NULL NONLOCAL } same as _1
_58 = { NONLOCAL }
_59 = { NULL NONLOCAL } same as _1
derefaddrtmp(113) = { NONLOCAL } same as tableau
k.95_60 = { NULL NONLOCAL } same as _1
k_183 = { NULL NONLOCAL } same as _1
numassigns_111 = { NULL NONLOCAL } same as _1
totnumassigns_116 = { NULL NONLOCAL } same as _1
j.96_61 = { NULL NONLOCAL } same as _1
j_184 = { NULL NONLOCAL } same as _1
_175 = { NULL NONLOCAL } same as _1
_62 = { NULL NONLOCAL } same as _1
i_100 = { NULL NONLOCAL } same as _1
_63 = { NULL NONLOCAL } same as _1
_64 = { NONLOCAL }
_65 = { NULL NONLOCAL } same as _1
j_104 = { NULL NONLOCAL } same as _1
_66 = { ESCAPED NONLOCAL }
_67 = { NULL NONLOCAL } same as _1
_68 = { NULL NONLOCAL } same as _1
_69 = { NONLOCAL }
_70 = { NULL NONLOCAL } same as _1
_71 = { ESCAPED NONLOCAL }
selected_164 = { NULL NONLOCAL } same as _1
j.97_72 = { NULL NONLOCAL } same as _1
j_165 = { NULL NONLOCAL } same as _1
selected_131 = { NULL NONLOCAL } same as _1
_73 = { NULL NONLOCAL } same as _1
_74 = { NULL NONLOCAL } same as _1
_75 = { NONLOCAL }
derefaddrtmp(140) = { NONLOCAL } same as tableau
totnumassigns.98_76 = { NULL NONLOCAL } same as _1
totnumassigns_119 = { NULL NONLOCAL } same as _1
totnumassigns_167 = { NULL NONLOCAL } same as _1
_77 = { NULL NONLOCAL } same as _1
k_107 = { NULL NONLOCAL } same as _1
_78 = { NULL NONLOCAL } same as _1
_79 = { NULL NONLOCAL } same as _1
_80 = { NONLOCAL }
_81 = { NULL NONLOCAL } same as _1
_82 = { ESCAPED NONLOCAL }
_83 = { NULL NONLOCAL } same as _1
_84 = { NULL NONLOCAL } same as _1
_85 = { NONLOCAL }
_86 = { NULL NONLOCAL } same as _1
derefaddrtmp(155) = { NONLOCAL } same as tableau
k.99_87 = { NULL NONLOCAL } same as _1
k_173 = { NULL NONLOCAL } same as _1
_88 = { NULL NONLOCAL } same as _1
k_108 = { NULL NONLOCAL } same as _1
_89 = { NULL NONLOCAL } same as _1
_90 = { NONLOCAL }
_91 = { ESCAPED NONLOCAL }
_92 = { NULL NONLOCAL } same as _1
_93 = { NULL NONLOCAL } same as _1
_94 = { NONLOCAL }
derefaddrtmp(166) = { NONLOCAL } same as tableau
k.100_95 = { NULL NONLOCAL } same as _1
k_171 = { NULL NONLOCAL } same as _1
totnumassigns_118 = { NULL NONLOCAL } same as _1
i.101_96 = { NULL NONLOCAL } same as _1
i_174 = { NULL NONLOCAL } same as _1
_159 = { NULL NONLOCAL } same as _1
_132 = { NULL NONLOCAL } same as _1


Alias information for first_assignments

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
_14, points-to non-local, points-to NULL, points-to vars: { }
_23, points-to non-local, points-to NULL, points-to vars: { }
_26, points-to non-local, points-to NULL, points-to vars: { }
_30, points-to non-local, points-to NULL, points-to vars: { }
_35, points-to non-local, points-to NULL, points-to vars: { }
_40, points-to non-local, points-to NULL, points-to vars: { }
_49, points-to non-local, points-to NULL, points-to vars: { }
_53, points-to non-local, points-to NULL, points-to vars: { }
_58, points-to non-local, points-to NULL, points-to vars: { }
_64, points-to non-local, points-to NULL, points-to vars: { }
_69, points-to non-local, points-to NULL, points-to vars: { }
_75, points-to non-local, points-to NULL, points-to vars: { }
_80, points-to non-local, points-to NULL, points-to vars: { }
_85, points-to non-local, points-to NULL, points-to vars: { }
_90, points-to non-local, points-to NULL, points-to vars: { }
_94, points-to non-local, points-to NULL, points-to vars: { }
tableau_162(D), points-to non-local, points-to NULL, points-to vars: { }
assignedtableau_163(D), points-to non-local, points-to NULL, points-to vars: { }

first_assignments (long int[101] * tableau, short int[101] * assignedtableau)
{
  int selected;
  short unsigned int numzeros;
  short unsigned int totnumassigns;
  short unsigned int numassigns;
  short unsigned int k;
  short unsigned int j;
  short unsigned int i;
  long unsigned int _1;
  long unsigned int _2;
  short int[101] * _3;
  int _4;
  short unsigned int j.83_5;
  short unsigned int i.84_6;
  long unsigned int _7;
  long unsigned int _8;
  long int[101] * _9;
  int _10;
  long int _11;
  long unsigned int _12;
  long unsigned int _13;
  short int[101] * _14;
  int _15;
  short int _16;
  short unsigned int numzeros.85_17;
  short unsigned int j.86_18;
  short unsigned int numassigns.87_19;
  short unsigned int totnumassigns.88_20;
  long unsigned int _21;
  long unsigned int _22;
  short int[101] * _23;
  long unsigned int _24;
  long unsigned int _25;
  long int[101] * _26;
  long int _27;
  long unsigned int _28;
  long unsigned int _29;
  short int[101] * _30;
  short unsigned int k.89_31;
  short unsigned int i.90_32;
  long unsigned int _33;
  long unsigned int _34;
  long int[101] * _35;
  int _36;
  long int _37;
  long unsigned int _38;
  long unsigned int _39;
  short int[101] * _40;
  int _41;
  short int _42;
  short unsigned int numzeros.91_43;
  short unsigned int i.92_44;
  short unsigned int numassigns.93_45;
  short unsigned int totnumassigns.94_46;
  long unsigned int _47;
  long unsigned int _48;
  short int[101] * _49;
  int _50;
  long unsigned int _51;
  long unsigned int _52;
  long int[101] * _53;
  int _54;
  long int _55;
  long unsigned int _56;
  long unsigned int _57;
  short int[101] * _58;
  int _59;
  short unsigned int k.95_60;
  short unsigned int j.96_61;
  long unsigned int _62;
  long unsigned int _63;
  long int[101] * _64;
  int _65;
  long int _66;
  long unsigned int _67;
  long unsigned int _68;
  short int[101] * _69;
  int _70;
  short int _71;
  short unsigned int j.97_72;
  long unsigned int _73;
  long unsigned int _74;
  short int[101] * _75;
  short unsigned int totnumassigns.98_76;
  int _77;
  long unsigned int _78;
  long unsigned int _79;
  long int[101] * _80;
  int _81;
  long int _82;
  long unsigned int _83;
  long unsigned int _84;
  short int[101] * _85;
  int _86;
  short unsigned int k.99_87;
  long unsigned int _88;
  long unsigned int _89;
  long int[101] * _90;
  long int _91;
  long unsigned int _92;
  long unsigned int _93;
  short int[101] * _94;
  short unsigned int k.100_95;
  short unsigned int i.101_96;
  int _132;
  int _159;
  int _175;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_97;
  _2 = _1 * 202;
  _3 = assignedtableau_163(D) + _2;
  _4 = (int) j_101;
  *_3[_4] = 0;
  j.83_5 = j_101;
  j_203 = j_101 + 1;

  <bb 4> [0.00%]:
  # j_101 = PHI <0(6), j_203(3)>
  if (j_101 <= 100)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  i.84_6 = i_97;
  i_201 = i_97 + 1;

  <bb 6> [0.00%]:
  # i_97 = PHI <0(2), i_201(5)>
  if (i_97 <= 100)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  # totnumassigns_113 = PHI <0(6), totnumassigns_117(36)>
  # selected_124 = PHI <0(6), selected_130(36)>
  goto <bb 21>; [0.00%]

  <bb 8> [0.00%]:
  _7 = (long unsigned int) i_98;
  _8 = _7 * 808;
  _9 = tableau_162(D) + _8;
  _10 = (int) j_102;
  _11 = *_9[_10];
  if (_11 == 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 9> [0.00%]:
  _12 = (long unsigned int) i_98;
  _13 = _12 * 202;
  _14 = assignedtableau_163(D) + _13;
  _15 = (int) j_102;
  _16 = *_14[_15];
  if (_16 == 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  numzeros.85_17 = numzeros_121;
  numzeros_197 = numzeros_121 + 1;
  selected_198 = (int) j_102;

  <bb 11> [0.00%]:
  # numzeros_120 = PHI <numzeros_121(8), numzeros_121(9), numzeros_197(10)>
  # selected_125 = PHI <selected_126(8), selected_126(9), selected_198(10)>
  j.86_18 = j_102;
  j_199 = j_102 + 1;

  <bb 12> [0.00%]:
  # j_102 = PHI <0(21), j_199(11)>
  # numzeros_121 = PHI <0(21), numzeros_120(11)>
  # selected_126 = PHI <selected_127(21), selected_125(11)>
  if (j_102 <= 100)
    goto <bb 8>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:
  if (numzeros_121 == 1)
    goto <bb 14>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 14> [0.00%]:
  numassigns.87_19 = numassigns_110;
  numassigns_190 = numassigns_110 + 1;
  totnumassigns.88_20 = totnumassigns_115;
  totnumassigns_191 = totnumassigns_115 + 1;
  _21 = (long unsigned int) i_98;
  _22 = _21 * 202;
  _23 = assignedtableau_163(D) + _22;
  *_23[selected_126] = 1;
  goto <bb 19>; [0.00%]

  <bb 15> [0.00%]:
  if (i_98 != k_105)
    goto <bb 16>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 16> [0.00%]:
  _24 = (long unsigned int) k_105;
  _25 = _24 * 808;
  _26 = tableau_162(D) + _25;
  _27 = *_26[selected_126];
  if (_27 == 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  _28 = (long unsigned int) k_105;
  _29 = _28 * 202;
  _30 = assignedtableau_163(D) + _29;
  *_30[selected_126] = 2;

  <bb 18> [0.00%]:
  k.89_31 = k_105;
  k_195 = k_105 + 1;

  <bb 19> [0.00%]:
  # k_105 = PHI <0(14), k_195(18)>
  if (k_105 <= 100)
    goto <bb 15>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  # numassigns_109 = PHI <numassigns_110(13), numassigns_190(19)>
  # totnumassigns_114 = PHI <totnumassigns_115(13), totnumassigns_191(19)>
  i.90_32 = i_98;
  i_196 = i_98 + 1;

  <bb 21> [0.00%]:
  # i_98 = PHI <0(7), i_196(20)>
  # numassigns_110 = PHI <0(7), numassigns_109(20)>
  # totnumassigns_115 = PHI <totnumassigns_113(7), totnumassigns_114(20)>
  # selected_127 = PHI <selected_124(7), selected_126(20)>
  if (i_98 <= 100)
    goto <bb 12>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 22> [0.00%]:
  _33 = (long unsigned int) i_99;
  _34 = _33 * 808;
  _35 = tableau_162(D) + _34;
  _36 = (int) j_103;
  _37 = *_35[_36];
  if (_37 == 0)
    goto <bb 23>; [0.00%]
  else
    goto <bb 25>; [0.00%]

  <bb 23> [0.00%]:
  _38 = (long unsigned int) i_99;
  _39 = _38 * 202;
  _40 = assignedtableau_163(D) + _39;
  _41 = (int) j_103;
  _42 = *_40[_41];
  if (_42 == 0)
    goto <bb 24>; [0.00%]
  else
    goto <bb 25>; [0.00%]

  <bb 24> [0.00%]:
  numzeros.91_43 = numzeros_123;
  numzeros_185 = numzeros_123 + 1;
  selected_186 = (int) i_99;

  <bb 25> [0.00%]:
  # numzeros_122 = PHI <numzeros_123(22), numzeros_123(23), numzeros_185(24)>
  # selected_128 = PHI <selected_129(22), selected_129(23), selected_186(24)>
  i.92_44 = i_99;
  i_187 = i_99 + 1;

  <bb 26> [0.00%]:
  # i_99 = PHI <0(35), i_187(25)>
  # numzeros_123 = PHI <0(35), numzeros_122(25)>
  # selected_129 = PHI <selected_130(35), selected_128(25)>
  if (i_99 <= 100)
    goto <bb 22>; [0.00%]
  else
    goto <bb 27>; [0.00%]

  <bb 27> [0.00%]:
  if (numzeros_123 == 1)
    goto <bb 28>; [0.00%]
  else
    goto <bb 34>; [0.00%]

  <bb 28> [0.00%]:
  numassigns.93_45 = numassigns_112;
  numassigns_178 = numassigns_112 + 1;
  totnumassigns.94_46 = totnumassigns_117;
  totnumassigns_179 = totnumassigns_117 + 1;
  _47 = (long unsigned int) selected_129;
  _48 = _47 * 202;
  _49 = assignedtableau_163(D) + _48;
  _50 = (int) j_103;
  *_49[_50] = 1;
  goto <bb 33>; [0.00%]

  <bb 29> [0.00%]:
  if (j_103 != k_106)
    goto <bb 30>; [0.00%]
  else
    goto <bb 32>; [0.00%]

  <bb 30> [0.00%]:
  _51 = (long unsigned int) selected_129;
  _52 = _51 * 808;
  _53 = tableau_162(D) + _52;
  _54 = (int) k_106;
  _55 = *_53[_54];
  if (_55 == 0)
    goto <bb 31>; [0.00%]
  else
    goto <bb 32>; [0.00%]

  <bb 31> [0.00%]:
  _56 = (long unsigned int) selected_129;
  _57 = _56 * 202;
  _58 = assignedtableau_163(D) + _57;
  _59 = (int) k_106;
  *_58[_59] = 2;

  <bb 32> [0.00%]:
  k.95_60 = k_106;
  k_183 = k_106 + 1;

  <bb 33> [0.00%]:
  # k_106 = PHI <0(28), k_183(32)>
  if (k_106 <= 100)
    goto <bb 29>; [0.00%]
  else
    goto <bb 34>; [0.00%]

  <bb 34> [0.00%]:
  # numassigns_111 = PHI <numassigns_112(27), numassigns_178(33)>
  # totnumassigns_116 = PHI <totnumassigns_117(27), totnumassigns_179(33)>
  j.96_61 = j_103;
  j_184 = j_103 + 1;

  <bb 35> [0.00%]:
  # j_103 = PHI <0(21), j_184(34)>
  # numassigns_112 = PHI <numassigns_110(21), numassigns_111(34)>
  # totnumassigns_117 = PHI <totnumassigns_115(21), totnumassigns_116(34)>
  # selected_130 = PHI <selected_127(21), selected_129(34)>
  if (j_103 <= 100)
    goto <bb 26>; [0.00%]
  else
    goto <bb 36>; [0.00%]

  <bb 36> [0.00%]:
  if (numassigns_112 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 37>; [0.00%]

  <bb 37> [0.00%]:
  if (totnumassigns_117 == 101)
    goto <bb 38>; [0.00%]
  else
    goto <bb 57>; [0.00%]

  <bb 38> [0.00%]:
  _175 = (int) totnumassigns_117;
  goto <bb 59>; [0.00%]

  <bb 39> [0.00%]:
  _62 = (long unsigned int) i_100;
  _63 = _62 * 808;
  _64 = tableau_162(D) + _63;
  _65 = (int) j_104;
  _66 = *_64[_65];
  if (_66 == 0)
    goto <bb 40>; [0.00%]
  else
    goto <bb 42>; [0.00%]

  <bb 40> [0.00%]:
  _67 = (long unsigned int) i_100;
  _68 = _67 * 202;
  _69 = assignedtableau_163(D) + _68;
  _70 = (int) j_104;
  _71 = *_69[_70];
  if (_71 == 0)
    goto <bb 41>; [0.00%]
  else
    goto <bb 42>; [0.00%]

  <bb 41> [0.00%]:
  selected_164 = (int) j_104;
  goto <bb 44>; [0.00%]

  <bb 42> [0.00%]:
  j.97_72 = j_104;
  j_165 = j_104 + 1;

  <bb 43> [0.00%]:
  # j_104 = PHI <0(57), j_165(42)>
  if (j_104 <= 100)
    goto <bb 39>; [0.00%]
  else
    goto <bb 44>; [0.00%]

  <bb 44> [0.00%]:
  # selected_131 = PHI <selected_164(41), -1(43)>
  if (selected_131 != -1)
    goto <bb 45>; [0.00%]
  else
    goto <bb 56>; [0.00%]

  <bb 45> [0.00%]:
  _73 = (long unsigned int) i_100;
  _74 = _73 * 202;
  _75 = assignedtableau_163(D) + _74;
  *_75[selected_131] = 1;
  totnumassigns.98_76 = totnumassigns_119;
  totnumassigns_167 = totnumassigns_119 + 1;
  goto <bb 50>; [0.00%]

  <bb 46> [0.00%]:
  _77 = (int) k_107;
  if (_77 != selected_131)
    goto <bb 47>; [0.00%]
  else
    goto <bb 49>; [0.00%]

  <bb 47> [0.00%]:
  _78 = (long unsigned int) i_100;
  _79 = _78 * 808;
  _80 = tableau_162(D) + _79;
  _81 = (int) k_107;
  _82 = *_80[_81];
  if (_82 == 0)
    goto <bb 48>; [0.00%]
  else
    goto <bb 49>; [0.00%]

  <bb 48> [0.00%]:
  _83 = (long unsigned int) i_100;
  _84 = _83 * 202;
  _85 = assignedtableau_163(D) + _84;
  _86 = (int) k_107;
  *_85[_86] = 2;

  <bb 49> [0.00%]:
  k.99_87 = k_107;
  k_173 = k_107 + 1;

  <bb 50> [0.00%]:
  # k_107 = PHI <0(45), k_173(49)>
  if (k_107 <= 100)
    goto <bb 46>; [0.00%]
  else
    goto <bb 55>; [0.00%]

  <bb 51> [0.00%]:
  if (i_100 != k_108)
    goto <bb 52>; [0.00%]
  else
    goto <bb 54>; [0.00%]

  <bb 52> [0.00%]:
  _88 = (long unsigned int) k_108;
  _89 = _88 * 808;
  _90 = tableau_162(D) + _89;
  _91 = *_90[selected_131];
  if (_91 == 0)
    goto <bb 53>; [0.00%]
  else
    goto <bb 54>; [0.00%]

  <bb 53> [0.00%]:
  _92 = (long unsigned int) k_108;
  _93 = _92 * 202;
  _94 = assignedtableau_163(D) + _93;
  *_94[selected_131] = 2;

  <bb 54> [0.00%]:
  k.100_95 = k_108;
  k_171 = k_108 + 1;

  <bb 55> [0.00%]:
  # k_108 = PHI <0(50), k_171(54)>
  if (k_108 <= 100)
    goto <bb 51>; [0.00%]
  else
    goto <bb 56>; [0.00%]

  <bb 56> [0.00%]:
  # totnumassigns_118 = PHI <totnumassigns_119(44), totnumassigns_167(55)>
  i.101_96 = i_100;
  i_174 = i_100 + 1;

  <bb 57> [0.00%]:
  # i_100 = PHI <0(37), i_174(56)>
  # totnumassigns_119 = PHI <totnumassigns_117(37), totnumassigns_118(56)>
  if (i_100 <= 100)
    goto <bb 43>; [0.00%]
  else
    goto <bb 58>; [0.00%]

  <bb 58> [0.00%]:
  _159 = (int) totnumassigns_119;

  <bb 59> [0.00%]:
  # _132 = PHI <_175(38), _159(58)>
  return _132;

}



;; Function second_assignments (second_assignments, funcdef_no=81, decl_uid=4621, cgraph_uid=81, symbol_order=106)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
tableau = &NONLOCAL
assignedtableau = &NONLOCAL
linesrow = &NULL
i_136 = i_47
i_136 = &NONLOCAL
i_47 = &NULL
i_47 = i_136
linescol = &NULL
i_134 = i_48
i_134 = &NONLOCAL
i_48 = &NULL
i_48 = i_134
_1 = i_49
_2 = _1
_2 = &NONLOCAL
_3 = assignedtableau + UNKNOWN
_4 = *_3 + UNKNOWN
j_129 = j_55
j_129 = &NONLOCAL
j_55 = &NULL
j_55 = j_129
numassigns_65 = &NONLOCAL
numassigns_65 = &NULL
linesrow = &NONLOCAL
i_132 = i_49
i_132 = &NONLOCAL
i_49 = &NULL
i_49 = i_132
_6 = linesrow
_7 = i_50
_8 = _7
_8 = &NONLOCAL
_9 = tableau + UNKNOWN
_10 = *_9 + UNKNOWN
linescol = &NONLOCAL
j_125 = j_56
j_125 = &NONLOCAL
j_56 = &NULL
j_56 = j_125
i_126 = i_50
i_126 = &NONLOCAL
i_50 = &NULL
i_50 = i_126
_11 = linescol
_12 = i_51
_13 = _12
_13 = &NONLOCAL
_14 = assignedtableau + UNKNOWN
_15 = *_14 + UNKNOWN
_16 = linesrow
linesrow = &NONLOCAL
newrows.82_17 = newrows_67
newrows_120 = newrows_67
newrows_120 = &NONLOCAL
newrows_66 = newrows_67
newrows_66 = newrows_67
newrows_66 = newrows_120
i_121 = i_51
i_121 = &NONLOCAL
i_51 = &NULL
i_51 = i_121
newrows_67 = newrows_69
newrows_67 = newrows_66
newrows_68 = newrows_69
newrows_68 = newrows_67
j_122 = j_57
j_122 = &NONLOCAL
j_57 = &NULL
j_57 = j_122
newrows_69 = &NULL
newrows_69 = newrows_68
_18 = linesrow
_19 = linescol
_20 = i_52
_21 = _20
_21 = &NONLOCAL
_22 = tableau + UNKNOWN
_23 = *_22 + UNKNOWN
_24 = i_52
_25 = _24
_25 = &NONLOCAL
_26 = tableau + UNKNOWN
smallest_114 = *_26 + UNKNOWN
smallest_61 = smallest_62
smallest_61 = smallest_62
smallest_61 = smallest_114
j_115 = j_58
j_115 = &NONLOCAL
j_58 = &NULL
j_58 = j_115
smallest_62 = smallest_64
smallest_62 = smallest_61
smallest_63 = smallest_64
smallest_63 = smallest_62
i_116 = i_52
i_116 = &NONLOCAL
i_52 = &NULL
i_52 = i_116
smallest_64 = &NONLOCAL
smallest_64 = smallest_63
_27 = linesrow
_28 = linescol
_29 = i_53
_30 = _29
_30 = &NONLOCAL
_31 = tableau + UNKNOWN
_32 = *_31 + UNKNOWN
_33 = i_53
_34 = _33
_34 = &NONLOCAL
_35 = tableau + UNKNOWN
_36 = _32
_36 = smallest_64
*_35 + UNKNOWN = _36
j_111 = j_59
j_111 = &NONLOCAL
j_59 = &NULL
j_59 = j_111
i_112 = i_53
i_112 = &NONLOCAL
i_53 = &NULL
i_53 = i_112
_37 = linesrow
_38 = linescol
_39 = i_54
_40 = _39
_40 = &NONLOCAL
_41 = tableau + UNKNOWN
_42 = *_41 + UNKNOWN
_43 = i_54
_44 = _43
_44 = &NONLOCAL
_45 = tableau + UNKNOWN
_46 = _42
_46 = smallest_64
*_45 + UNKNOWN = _46
j_107 = j_60
j_107 = &NONLOCAL
j_60 = &NULL
j_60 = j_107
i_108 = i_54
i_108 = &NONLOCAL
i_54 = &NULL
i_54 = i_108

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"tableau"[label="tableau = { 5 }"];
"assignedtableau"[label="assignedtableau = { 5 }"];
"linesrow"[label="linesrow = { 1 5 }"];
"i_136"[label="i_136 = { 1 5 }"];
"linescol"[label="linescol = { 1 5 }"];
"i_134"[label="i_134 = { 1 5 }"];
"_1";
"i_49"[label="i_49 = { 1 5 }"];
"_2"[label="_2 = { 5 }"];
"_3";
"_4";
"j_129"[label="j_129 = { 1 5 }"];
"numassigns_65"[label="numassigns_65 = { 1 5 }"];
"_6";
"_7";
"i_50"[label="i_50 = { 1 5 }"];
"_8"[label="_8 = { 5 }"];
"_9";
"_10";
"j_125"[label="j_125 = { 1 5 }"];
"_11";
"_12";
"i_51"[label="i_51 = { 1 5 }"];
"_13"[label="_13 = { 5 }"];
"_14";
"_15";
"_16";
"newrows.82_17";
"newrows_67"[label="newrows_67 = { 1 5 }"];
"j_122"[label="j_122 = { 1 5 }"];
"_18";
"_19";
"_20";
"i_52"[label="i_52 = { 1 5 }"];
"_21"[label="_21 = { 5 }"];
"_22";
"_23";
"_24";
"_25"[label="_25 = { 5 }"];
"_26";
"smallest_114";
"smallest_61"[label="smallest_61 = { 5 }"];
"j_115"[label="j_115 = { 1 5 }"];
"_27";
"_28";
"_29";
"i_53"[label="i_53 = { 1 5 }"];
"_30"[label="_30 = { 5 }"];
"_31";
"_32";
"_33";
"_34"[label="_34 = { 5 }"];
"_35";
"_36";
"j_111"[label="j_111 = { 1 5 }"];
"_37";
"_38";
"_39";
"i_54"[label="i_54 = { 1 5 }"];
"_40"[label="_40 = { 5 }"];
"_41";
"_42";
"_43";
"_44"[label="_44 = { 5 }"];
"_45";
"_46";
"j_107"[label="j_107 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*tableau";
"*assignedtableau";
"*linesrow";
"*i_136";
"*i_47";
"*linescol";
"*i_134";
"*i_48";
"*_1";
"*i_49";
"*_2";
"*_3";
"*_4";
"*j_129";
"*j_55";
"*numassigns_65";
"*i_132";
"*_6";
"*_7";
"*i_50";
"*_8";
"*_9";
"*_10";
"*j_125";
"*j_56";
"*i_126";
"*_11";
"*_12";
"*i_51";
"*_13";
"*_14";
"*_15";
"*_16";
"*newrows.82_17";
"*newrows_67";
"*newrows_120";
"*newrows_66";
"*i_121";
"*newrows_69";
"*newrows_68";
"*j_122";
"*j_57";
"*_18";
"*_19";
"*_20";
"*i_52";
"*_21";
"*_22";
"*_23";
"*_24";
"*_25";
"*_26";
"*smallest_114";
"*smallest_61";
"*smallest_62";
"*j_115";
"*j_58";
"*smallest_64";
"*smallest_63";
"*i_116";
"*_27";
"*_28";
"*_29";
"*i_53";
"*_30";
"*_31";
"*_32";
"*_33";
"*_34";
"*_35";
"*_36";
"*j_111";
"*j_59";
"*i_112";
"*_37";
"*_38";
"*_39";
"*i_54";
"*_40";
"*_41";
"*_42";
"*_43";
"*_44";
"*_45";
"*_46";
"*j_107";
"*j_60";
"*i_108";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"i_136" -> "i_136";
"i_136" -> "i_136";
"i_134" -> "i_134";
"i_134" -> "i_134";
"i_49" -> "_1";
"i_49" -> "i_49";
"i_49" -> "i_49";
"_1" -> "_2";
"j_129" -> "j_129";
"j_129" -> "j_129";
"linesrow" -> "_6";
"i_50" -> "_7";
"i_50" -> "i_50";
"i_50" -> "i_50";
"_7" -> "_8";
"j_125" -> "j_125";
"j_125" -> "j_125";
"linescol" -> "_11";
"i_51" -> "_12";
"i_51" -> "i_51";
"i_51" -> "i_51";
"_12" -> "_13";
"linesrow" -> "_16";
"newrows_67" -> "newrows.82_17";
"newrows_67" -> "newrows_67";
"newrows_67" -> "newrows_67";
"newrows_67" -> "newrows_67";
"newrows_67" -> "newrows_67";
"newrows_67" -> "newrows_67";
"j_122" -> "j_122";
"j_122" -> "j_122";
"linesrow" -> "_18";
"linescol" -> "_19";
"i_52" -> "_20";
"i_52" -> "i_52";
"i_52" -> "i_52";
"_20" -> "_21";
"i_52" -> "_24";
"_24" -> "_25";
"smallest_114" -> "smallest_61";
"smallest_61" -> "smallest_61";
"smallest_61" -> "smallest_61";
"smallest_61" -> "smallest_61";
"smallest_61" -> "smallest_61";
"j_115" -> "j_115";
"j_115" -> "j_115";
"linesrow" -> "_27";
"linescol" -> "_28";
"i_53" -> "_29";
"i_53" -> "i_53";
"i_53" -> "i_53";
"_29" -> "_30";
"i_53" -> "_33";
"_33" -> "_34";
"smallest_61" -> "_36";
"_32" -> "_36";
"j_111" -> "j_111";
"j_111" -> "j_111";
"linesrow" -> "_37";
"linescol" -> "_38";
"i_54" -> "_39";
"i_54" -> "i_54";
"i_54" -> "i_54";
"_39" -> "_40";
"i_54" -> "_43";
"_43" -> "_44";
"smallest_61" -> "_46";
"_42" -> "_46";
"j_107" -> "j_107";
"j_107" -> "j_107";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"tableau" [label="\N\n_3 = tableau + UNKNOWN\l_9 = tableau + UNKNOWN\l_14 = tableau + UNKNOWN\l_22 = tableau + UNKNOWN\l_26 = tableau + UNKNOWN\l_31 = tableau + UNKNOWN\l_35 = tableau + UNKNOWN\l_41 = tableau + UNKNOWN\l_45 = tableau + UNKNOWN\l"];
"linesrow";
"_3" [label="\N\n_4 = *_3 + UNKNOWN\l"];
"_4";
"_9" [label="\N\n_10 = *_9 + UNKNOWN\l"];
"_10";
"_14" [label="\N\n_15 = *_14 + UNKNOWN\l"];
"_15";
"_22" [label="\N\n_23 = *_22 + UNKNOWN\l"];
"_23";
"_26" [label="\N\nsmallest_114 = *_26 + UNKNOWN\l"];
"smallest_114";
"smallest_61";
"_31" [label="\N\n_32 = *_31 + UNKNOWN\l"];
"_32";
"_35" [label="\N\n*_35 + UNKNOWN = _36\l"];
"_36";
"_41" [label="\N\n_42 = *_41 + UNKNOWN\l"];
"_42";
"_45" [label="\N\n*_45 + UNKNOWN = _46\l"];
"_46";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_10";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_22";
"STOREDANYTHING" -> "_23";
"STOREDANYTHING" -> "_26";
"STOREDANYTHING" -> "smallest_114";
"STOREDANYTHING" -> "_31";
"STOREDANYTHING" -> "_32";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_41";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_45";
"smallest_114" -> "smallest_61";
"smallest_61" -> "_36";
"smallest_61" -> "_46";
"_32" -> "_36";
"_42" -> "_46";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"tableau" [label="\N\n_3 = tableau + UNKNOWN\l_9 = tableau + UNKNOWN\l_14 = tableau + UNKNOWN\l_22 = tableau + UNKNOWN\l_26 = tableau + UNKNOWN\l_31 = tableau + UNKNOWN\l_35 = tableau + UNKNOWN\l_41 = tableau + UNKNOWN\l_45 = tableau + UNKNOWN\l"];
"linesrow";
"_3" [label="\N\n_4 = *_3 + UNKNOWN\l"];
"_4";
"_9" [label="\N\n_10 = *_9 + UNKNOWN\l"];
"_10";
"_14" [label="\N\n_15 = *_14 + UNKNOWN\l"];
"_15";
"_22" [label="\N\n_23 = *_22 + UNKNOWN\l"];
"_23";
"_26" [label="\N\nsmallest_114 = *_26 + UNKNOWN\l"];
"smallest_114";
"smallest_61";
"_31" [label="\N\n_32 = *_31 + UNKNOWN\l"];
"_32";
"_35" [label="\N\n*_35 + UNKNOWN = _36\l"];
"_36";
"_41" [label="\N\n_42 = *_41 + UNKNOWN\l"];
"_42";
"_45" [label="\N\n*_45 + UNKNOWN = _46\l"];
"_46";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_10";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_22";
"STOREDANYTHING" -> "_23";
"STOREDANYTHING" -> "_26";
"STOREDANYTHING" -> "smallest_114";
"STOREDANYTHING" -> "_31";
"STOREDANYTHING" -> "_32";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_41";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_45";
"smallest_114" -> "smallest_61";
"smallest_61" -> "_36";
"smallest_61" -> "_46";
"_32" -> "_36";
"_36" -> "ESCAPED";
"_42" -> "_46";
"_46" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
tableau = { NONLOCAL }
assignedtableau = { NONLOCAL } same as tableau
linesrow = { NULL NONLOCAL }
i_136 = { NULL NONLOCAL } same as linesrow
i_47 = { NULL NONLOCAL } same as linesrow
linescol = { NULL NONLOCAL } same as linesrow
i_134 = { NULL NONLOCAL } same as linesrow
i_48 = { NULL NONLOCAL } same as linesrow
_1 = { NULL NONLOCAL } same as linesrow
i_49 = { NULL NONLOCAL } same as linesrow
_2 = { NULL NONLOCAL } same as linesrow
_3 = { NONLOCAL }
_4 = { ESCAPED NONLOCAL }
j_129 = { NULL NONLOCAL } same as linesrow
j_55 = { NULL NONLOCAL } same as linesrow
numassigns_65 = { NULL NONLOCAL } same as linesrow
i_132 = { NULL NONLOCAL } same as linesrow
_6 = { NULL NONLOCAL } same as linesrow
_7 = { NULL NONLOCAL } same as linesrow
i_50 = { NULL NONLOCAL } same as linesrow
_8 = { NULL NONLOCAL } same as linesrow
_9 = { NONLOCAL }
_10 = { ESCAPED NONLOCAL }
j_125 = { NULL NONLOCAL } same as linesrow
j_56 = { NULL NONLOCAL } same as linesrow
i_126 = { NULL NONLOCAL } same as linesrow
_11 = { NULL NONLOCAL } same as linesrow
_12 = { NULL NONLOCAL } same as linesrow
i_51 = { NULL NONLOCAL } same as linesrow
_13 = { NULL NONLOCAL } same as linesrow
_14 = { NONLOCAL }
_15 = { ESCAPED NONLOCAL }
_16 = { NULL NONLOCAL } same as linesrow
newrows.82_17 = { NULL NONLOCAL } same as linesrow
newrows_67 = { NULL NONLOCAL } same as linesrow
newrows_120 = { NULL NONLOCAL } same as linesrow
newrows_66 = { NULL NONLOCAL } same as linesrow
i_121 = { NULL NONLOCAL } same as linesrow
newrows_69 = { NULL NONLOCAL } same as linesrow
newrows_68 = { NULL NONLOCAL } same as linesrow
j_122 = { NULL NONLOCAL } same as linesrow
j_57 = { NULL NONLOCAL } same as linesrow
_18 = { NULL NONLOCAL } same as linesrow
_19 = { NULL NONLOCAL } same as linesrow
_20 = { NULL NONLOCAL } same as linesrow
i_52 = { NULL NONLOCAL } same as linesrow
_21 = { NULL NONLOCAL } same as linesrow
_22 = { NONLOCAL }
_23 = { ESCAPED NONLOCAL }
_24 = { NULL NONLOCAL } same as linesrow
_25 = { NULL NONLOCAL } same as linesrow
_26 = { NONLOCAL }
smallest_114 = { ESCAPED NONLOCAL }
smallest_61 = { ESCAPED NONLOCAL }
smallest_62 = { ESCAPED NONLOCAL } same as smallest_61
j_115 = { NULL NONLOCAL } same as linesrow
j_58 = { NULL NONLOCAL } same as linesrow
smallest_64 = { ESCAPED NONLOCAL } same as smallest_61
smallest_63 = { ESCAPED NONLOCAL } same as smallest_61
i_116 = { NULL NONLOCAL } same as linesrow
_27 = { NULL NONLOCAL } same as linesrow
_28 = { NULL NONLOCAL } same as linesrow
_29 = { NULL NONLOCAL } same as linesrow
i_53 = { NULL NONLOCAL } same as linesrow
_30 = { NULL NONLOCAL } same as linesrow
_31 = { NONLOCAL }
_32 = { ESCAPED NONLOCAL }
_33 = { NULL NONLOCAL } same as linesrow
_34 = { NULL NONLOCAL } same as linesrow
_35 = { NONLOCAL }
_36 = { ESCAPED NONLOCAL }
j_111 = { NULL NONLOCAL } same as linesrow
j_59 = { NULL NONLOCAL } same as linesrow
i_112 = { NULL NONLOCAL } same as linesrow
_37 = { NULL NONLOCAL } same as linesrow
_38 = { NULL NONLOCAL } same as linesrow
_39 = { NULL NONLOCAL } same as linesrow
i_54 = { NULL NONLOCAL } same as linesrow
_40 = { NULL NONLOCAL } same as linesrow
_41 = { NONLOCAL }
_42 = { ESCAPED NONLOCAL }
_43 = { NULL NONLOCAL } same as linesrow
_44 = { NULL NONLOCAL } same as linesrow
_45 = { NONLOCAL }
_46 = { ESCAPED NONLOCAL }
j_107 = { NULL NONLOCAL } same as linesrow
j_60 = { NULL NONLOCAL } same as linesrow
i_108 = { NULL NONLOCAL } same as linesrow


Alias information for second_assignments

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
_14, points-to non-local, points-to NULL, points-to vars: { }
_22, points-to non-local, points-to NULL, points-to vars: { }
_26, points-to non-local, points-to NULL, points-to vars: { }
_31, points-to non-local, points-to NULL, points-to vars: { }
_35, points-to non-local, points-to NULL, points-to vars: { }
_41, points-to non-local, points-to NULL, points-to vars: { }
_45, points-to non-local, points-to NULL, points-to vars: { }
tableau_105(D), points-to non-local, points-to NULL, points-to vars: { }
assignedtableau_118(D), points-to non-local, points-to NULL, points-to vars: { }

second_assignments (long int[101] * tableau, short int[101] * assignedtableau)
{
  short unsigned int newrows;
  short unsigned int numassigns;
  long int smallest;
  short int linescol[101];
  short int linesrow[101];
  int j;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  short int[101] * _3;
  short int _4;
  short int _6;
  long unsigned int _7;
  long unsigned int _8;
  long int[101] * _9;
  long int _10;
  short int _11;
  long unsigned int _12;
  long unsigned int _13;
  short int[101] * _14;
  short int _15;
  short int _16;
  short unsigned int newrows.82_17;
  short int _18;
  short int _19;
  long unsigned int _20;
  long unsigned int _21;
  long int[101] * _22;
  long int _23;
  long unsigned int _24;
  long unsigned int _25;
  long int[101] * _26;
  short int _27;
  short int _28;
  long unsigned int _29;
  long unsigned int _30;
  long int[101] * _31;
  long int _32;
  long unsigned int _33;
  long unsigned int _34;
  long int[101] * _35;
  long int _36;
  short int _37;
  short int _38;
  long unsigned int _39;
  long unsigned int _40;
  long int[101] * _41;
  long int _42;
  long unsigned int _43;
  long unsigned int _44;
  long int[101] * _45;
  long int _46;

  <bb 2> [0.00%]:
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  linesrow[i_47] = 0;
  i_136 = i_47 + 1;

  <bb 4> [0.00%]:
  # i_47 = PHI <0(2), i_136(3)>
  if (i_47 <= 100)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  linescol[i_48] = 0;
  i_134 = i_48 + 1;

  <bb 6> [0.00%]:
  # i_48 = PHI <0(4), i_134(5)>
  if (i_48 <= 100)
    goto <bb 5>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 7> [0.00%]:
  _1 = (long unsigned int) i_49;
  _2 = _1 * 202;
  _3 = assignedtableau_118(D) + _2;
  _4 = *_3[j_55];
  if (_4 == 1)
    goto <bb 10>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  j_129 = j_55 + 1;

  <bb 9> [0.00%]:
  # j_55 = PHI <0(13), j_129(8)>
  if (j_55 <= 100)
    goto <bb 7>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  # numassigns_65 = PHI <1(7), 0(9)>
  if (numassigns_65 == 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  linesrow[i_49] = 1;

  <bb 12> [0.00%]:
  i_132 = i_49 + 1;

  <bb 13> [0.00%]:
  # i_49 = PHI <0(6), i_132(12)>
  if (i_49 <= 100)
    goto <bb 9>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [0.00%]:
  goto <bb 21>; [0.00%]

  <bb 15> [0.00%]:
  _6 = linesrow[i_50];
  if (_6 == 1)
    goto <bb 19>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 16> [0.00%]:
  _7 = (long unsigned int) i_50;
  _8 = _7 * 808;
  _9 = tableau_105(D) + _8;
  _10 = *_9[j_56];
  if (_10 == 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  linescol[j_56] = 1;

  <bb 18> [0.00%]:
  j_125 = j_56 + 1;

  <bb 19> [0.00%]:
  # j_56 = PHI <0(15), j_125(18)>
  if (j_56 <= 100)
    goto <bb 16>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  i_126 = i_50 + 1;

  <bb 21> [0.00%]:
  # i_50 = PHI <0(14), i_126(20)>
  if (i_50 <= 100)
    goto <bb 15>; [0.00%]
  else
    goto <bb 29>; [0.00%]

  <bb 22> [0.00%]:
  _11 = linescol[j_57];
  if (_11 == 1)
    goto <bb 27>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 23> [0.00%]:
  _12 = (long unsigned int) i_51;
  _13 = _12 * 202;
  _14 = assignedtableau_118(D) + _13;
  _15 = *_14[j_57];
  if (_15 == 1)
    goto <bb 24>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 24> [0.00%]:
  _16 = linesrow[i_51];
  if (_16 != 1)
    goto <bb 25>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 25> [0.00%]:
  linesrow[i_51] = 1;
  newrows.82_17 = newrows_67;
  newrows_120 = newrows_67 + 1;

  <bb 26> [0.00%]:
  # newrows_66 = PHI <newrows_67(23), newrows_67(24), newrows_120(25)>
  i_121 = i_51 + 1;

  <bb 27> [0.00%]:
  # i_51 = PHI <0(22), i_121(26)>
  # newrows_67 = PHI <newrows_69(22), newrows_66(26)>
  if (i_51 <= 100)
    goto <bb 23>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 28> [0.00%]:
  # newrows_68 = PHI <newrows_69(22), newrows_67(27)>
  j_122 = j_57 + 1;

  <bb 29> [0.00%]:
  # j_57 = PHI <0(21), j_122(28)>
  # newrows_69 = PHI <0(21), newrows_68(28)>
  if (j_57 <= 100)
    goto <bb 22>; [0.00%]
  else
    goto <bb 30>; [0.00%]

  <bb 30> [0.00%]:
  if (newrows_69 != 0)
    goto <bb 14>; [0.00%]
  else
    goto <bb 38>; [0.00%]

  <bb 31> [0.00%]:
  _18 = linesrow[i_52];
  if (_18 != 0)
    goto <bb 36>; [0.00%]
  else
    goto <bb 37>; [0.00%]

  <bb 32> [0.00%]:
  _19 = linescol[j_58];
  if (_19 != 1)
    goto <bb 33>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 33> [0.00%]:
  _20 = (long unsigned int) i_52;
  _21 = _20 * 808;
  _22 = tableau_105(D) + _21;
  _23 = *_22[j_58];
  if (_23 < smallest_62)
    goto <bb 34>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 34> [0.00%]:
  _24 = (long unsigned int) i_52;
  _25 = _24 * 808;
  _26 = tableau_105(D) + _25;
  smallest_114 = *_26[j_58];

  <bb 35> [0.00%]:
  # smallest_61 = PHI <smallest_62(32), smallest_62(33), smallest_114(34)>
  j_115 = j_58 + 1;

  <bb 36> [0.00%]:
  # j_58 = PHI <0(31), j_115(35)>
  # smallest_62 = PHI <smallest_64(31), smallest_61(35)>
  if (j_58 <= 100)
    goto <bb 32>; [0.00%]
  else
    goto <bb 37>; [0.00%]

  <bb 37> [0.00%]:
  # smallest_63 = PHI <smallest_64(31), smallest_62(36)>
  i_116 = i_52 + 1;

  <bb 38> [0.00%]:
  # i_52 = PHI <0(30), i_116(37)>
  # smallest_64 = PHI <9223372036854775807(30), smallest_63(37)>
  if (i_52 <= 100)
    goto <bb 31>; [0.00%]
  else
    goto <bb 45>; [0.00%]

  <bb 39> [0.00%]:
  _27 = linesrow[i_53];
  if (_27 != 0)
    goto <bb 43>; [0.00%]
  else
    goto <bb 44>; [0.00%]

  <bb 40> [0.00%]:
  _28 = linescol[j_59];
  if (_28 != 1)
    goto <bb 41>; [0.00%]
  else
    goto <bb 42>; [0.00%]

  <bb 41> [0.00%]:
  _29 = (long unsigned int) i_53;
  _30 = _29 * 808;
  _31 = tableau_105(D) + _30;
  _32 = *_31[j_59];
  _33 = (long unsigned int) i_53;
  _34 = _33 * 808;
  _35 = tableau_105(D) + _34;
  _36 = _32 - smallest_64;
  *_35[j_59] = _36;

  <bb 42> [0.00%]:
  j_111 = j_59 + 1;

  <bb 43> [0.00%]:
  # j_59 = PHI <0(39), j_111(42)>
  if (j_59 <= 100)
    goto <bb 40>; [0.00%]
  else
    goto <bb 44>; [0.00%]

  <bb 44> [0.00%]:
  i_112 = i_53 + 1;

  <bb 45> [0.00%]:
  # i_53 = PHI <0(38), i_112(44)>
  if (i_53 <= 100)
    goto <bb 39>; [0.00%]
  else
    goto <bb 52>; [0.00%]

  <bb 46> [0.00%]:
  _37 = linesrow[i_54];
  if (_37 == 0)
    goto <bb 50>; [0.00%]
  else
    goto <bb 51>; [0.00%]

  <bb 47> [0.00%]:
  _38 = linescol[j_60];
  if (_38 == 1)
    goto <bb 48>; [0.00%]
  else
    goto <bb 49>; [0.00%]

  <bb 48> [0.00%]:
  _39 = (long unsigned int) i_54;
  _40 = _39 * 808;
  _41 = tableau_105(D) + _40;
  _42 = *_41[j_60];
  _43 = (long unsigned int) i_54;
  _44 = _43 * 808;
  _45 = tableau_105(D) + _44;
  _46 = _42 + smallest_64;
  *_45[j_60] = _46;

  <bb 49> [0.00%]:
  j_107 = j_60 + 1;

  <bb 50> [0.00%]:
  # j_60 = PHI <0(46), j_107(49)>
  if (j_60 <= 100)
    goto <bb 47>; [0.00%]
  else
    goto <bb 51>; [0.00%]

  <bb 51> [0.00%]:
  i_108 = i_54 + 1;

  <bb 52> [0.00%]:
  # i_54 = PHI <0(45), i_108(51)>
  if (i_54 <= 100)
    goto <bb 46>; [0.00%]
  else
    goto <bb 53>; [0.00%]

  <bb 53> [0.00%]:
  linesrow ={v} {CLOBBER};
  linescol ={v} {CLOBBER};
  return;

}



;; Function Assignment (Assignment, funcdef_no=78, decl_uid=4613, cgraph_uid=78, symbol_order=103)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
arraybase = &NONLOCAL
ESCAPED = arraybase
ESCAPED = arraybase
ESCAPED = &assignedtableau
ESCAPED = arraybase
ESCAPED = &assignedtableau
_1 = NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 11 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"arraybase"[label="arraybase = { 5 }"];
"calc_minimum_costs";
"second_assignments";
"assignedtableau";
"first_assignments";
"_1";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*arraybase";
"*calc_minimum_costs";
"*second_assignments";
"*assignedtableau";
"*first_assignments";
"*_1";

  // Edges in the constraint graph:
"arraybase" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_1";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"arraybase";
"calc_minimum_costs";
"second_assignments";
"assignedtableau";
"first_assignments";
"_1";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "assignedtableau";
"arraybase" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _1\l"];
"STOREDANYTHING";
"INTEGER";
"arraybase";
"calc_minimum_costs";
"second_assignments";
"assignedtableau";
"first_assignments";
"_1";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "assignedtableau";
"arraybase" -> "ESCAPED";
"assignedtableau" -> "ESCAPED";
"_1" -> "ESCAPED";
"_1" -> "assignedtableau";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL assignedtableau }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
arraybase = { NONLOCAL }
calc_minimum_costs = { }
second_assignments = { }
assignedtableau = { ESCAPED NONLOCAL }
first_assignments = { }
_1 = { ESCAPED NONLOCAL }


Alias information for Assignment

Aliased symbols

assignedtableau, UID D.5123, short int[101][101], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.5123 } (escaped)

Flow-insensitive points-to information

arraybase_4(D), points-to non-local, points-to NULL, points-to vars: { }

Assignment (farlong[101] * arraybase)
{
  short int assignedtableau[101][101];
  int _1;

  <bb 2> [0.00%]:
  calc_minimum_costs (arraybase_4(D));
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  second_assignments (arraybase_4(D), &assignedtableau);

  <bb 4> [0.00%]:
  _1 = first_assignments (arraybase_4(D), &assignedtableau);
  if (_1 != 101)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  assignedtableau ={v} {CLOBBER};
  return;

}



;; Function mul (mul, funcdef_no=84, decl_uid=4635, cgraph_uid=84, symbol_order=109)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
a = &NONLOCAL
b = &NONLOCAL
_1 = a
_2 = b
_3 = _1
_3 = _2
p_13 = _3
b_14 = _3
_4 = p_13
_4 = &NONLOCAL
a_15 = _4
_5 = b_14
_5 = a_15
_7 = _6
_16 = _5
_16 = _7
_12 = &NONLOCAL
_12 = a
_11 = &NONLOCAL
_11 = b
_8 = _16
_8 = _12
_8 = _11
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"a"[label="a = { 5 }"];
"b"[label="b = { 5 }"];
"_1";
"_2";
"_3";
"p_13";
"b_14";
"_4"[label="_4 = { 5 }"];
"a_15";
"_5";
"_6";
"_7";
"_16";
"_12"[label="_12 = { 5 }"];
"_11"[label="_11 = { 5 }"];
"_8";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*a";
"*b";
"*_1";
"*_2";
"*_3";
"*p_13";
"*b_14";
"*_4";
"*a_15";
"*_5";
"*_6";
"*_7";
"*_16";
"*_12";
"*_11";
"*_8";

  // Edges in the constraint graph:
"_8" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"a" -> "_1";
"b" -> "_2";
"_1" -> "_3";
"_2" -> "_3";
"_3" -> "p_13";
"_3" -> "b_14";
"p_13" -> "_4";
"_4" -> "a_15";
"b_14" -> "_5";
"a_15" -> "_5";
"_6" -> "_7";
"_5" -> "_16";
"_7" -> "_16";
"a" -> "_12";
"b" -> "_11";
"_16" -> "_8";
"_12" -> "_8";
"_11" -> "_8";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"a";
"_6";
"_7";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"a" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"a";
"_6";
"_7";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"a" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
a = { NONLOCAL }
b = { NONLOCAL } same as a
_1 = { NONLOCAL } same as a
_2 = { NONLOCAL } same as a
_3 = { NONLOCAL } same as a
p_13 = { NONLOCAL } same as a
b_14 = { NONLOCAL } same as a
_4 = { NONLOCAL } same as a
a_15 = { NONLOCAL } same as a
_5 = { NONLOCAL } same as a
_6 = { }
_7 = { }
_16 = { NONLOCAL } same as a
_12 = { NONLOCAL } same as a
_11 = { NONLOCAL } same as a
_8 = { NONLOCAL } same as a


Alias information for mul

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


mul (u16 a, u16 b)
{
  register u32 p;
  int _1;
  int _2;
  int _3;
  unsigned int _4;
  short unsigned int _5;
  _Bool _6;
  short unsigned int _7;
  u16 _8;
  u16 _11;
  u16 _12;
  u16 _16;

  <bb 2> [0.00%]:
  if (a_9(D) != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  if (b_10(D) != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _1 = (int) a_9(D);
  _2 = (int) b_10(D);
  _3 = _1 * _2;
  p_13 = (u32) _3;
  b_14 = (u16) _3;
  _4 = p_13 >> 16;
  a_15 = (u16) _4;
  _5 = b_14 - a_15;
  _6 = b_14 < a_15;
  _7 = (short unsigned int) _6;
  _16 = _5 + _7;
  goto <bb 7>; [0.00%]

  <bb 5> [0.00%]:
  _12 = 1 - a_9(D);
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _11 = 1 - b_10(D);

  <bb 7> [0.00%]:
  # _8 = PHI <_16(4), _12(5), _11(6)>
  return _8;

}



;; Function inv (inv, funcdef_no=85, decl_uid=4637, cgraph_uid=85, symbol_order=110)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
x = &NONLOCAL
_1 = x
_2 = &NONLOCAL
_2 = _1
t1_13 = _2
_3 = x
_4 = &NONLOCAL
_4 = _3
y_14 = _4
_24 = &NONLOCAL
_24 = t1_13
x_7 = x
x_7 = x_17
t0_8 = &NONLOCAL
t0_8 = t0_18
t1_9 = t1_13
t1_9 = t1_21
y_10 = y_14
y_10 = y_20
q_16 = x_7
q_16 = y_10
x_17 = x_7
x_17 = y_10
_5 = t1_9
_5 = q_16
t0_18 = _5
t0_18 = t0_8
q_19 = y_10
q_19 = x_17
y_20 = y_10
y_20 = x_17
_6 = t0_18
_6 = q_19
t1_21 = _6
t1_21 = t1_9
_22 = &NONLOCAL
_22 = t1_21
_11 = x
_11 = _24
_11 = t0_18
_11 = _22
ESCAPED = _11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"x"[label="x = { 5 }"];
"_1";
"_2"[label="_2 = { 5 }"];
"t1_13";
"_3";
"_4"[label="_4 = { 5 }"];
"y_14";
"_24"[label="_24 = { 5 }"];
"x_17";
"t0_18"[label="t0_18 = { 5 }"];
"q_16";
"q_19";
"_22"[label="_22 = { 5 }"];
"_11";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*x";
"*_1";
"*_2";
"*t1_13";
"*_3";
"*_4";
"*y_14";
"*_24";
"*x_17";
"*t0_18";
"*q_16";
"*q_19";
"*_22";
"*_11";

  // Edges in the constraint graph:
"_11" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"x" -> "_1";
"_1" -> "_2";
"_2" -> "t1_13";
"x" -> "_3";
"_3" -> "_4";
"_4" -> "y_14";
"t1_13" -> "_24";
"x" -> "x_17";
"y_14" -> "x_17";
"x_17" -> "x_17";
"x_17" -> "x_17";
"x_17" -> "x_17";
"x_17" -> "x_17";
"t1_13" -> "t0_18";
"t0_18" -> "t0_18";
"t0_18" -> "t0_18";
"t0_18" -> "t0_18";
"t0_18" -> "t0_18";
"q_16" -> "t0_18";
"t0_18" -> "t0_18";
"q_19" -> "t0_18";
"t0_18" -> "t0_18";
"x_17" -> "q_16";
"x_17" -> "q_16";
"x_17" -> "q_19";
"x_17" -> "q_19";
"t0_18" -> "_22";
"x" -> "_11";
"_24" -> "_11";
"t0_18" -> "_11";
"_22" -> "_11";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"x";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"x" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"x";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"x" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
x = { NONLOCAL }
_1 = { NONLOCAL } same as x
_2 = { NONLOCAL } same as x
t1_13 = { NONLOCAL } same as x
_3 = { NONLOCAL } same as x
_4 = { NONLOCAL } same as x
y_14 = { NONLOCAL } same as x
_24 = { NONLOCAL } same as x
x_7 = { NONLOCAL } same as x
x_17 = { NONLOCAL } same as x
t0_8 = { NONLOCAL } same as x
t0_18 = { NONLOCAL } same as x
t1_9 = { NONLOCAL } same as x
t1_21 = { NONLOCAL } same as x
y_10 = { NONLOCAL } same as x
y_20 = { NONLOCAL } same as x
q_16 = { NONLOCAL } same as x
_5 = { NONLOCAL } same as x
q_19 = { NONLOCAL } same as x
_6 = { NONLOCAL } same as x
_22 = { NONLOCAL } same as x
_11 = { NONLOCAL } same as x


Alias information for inv

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


inv (u16 x)
{
  u16 y;
  u16 q;
  u16 t1;
  u16 t0;
  int _1;
  int _2;
  int _3;
  int _4;
  short unsigned int _5;
  short unsigned int _6;
  u16 _11;
  u16 _22;
  u16 _24;

  <bb 2> [0.00%]:
  if (x_12(D) <= 1)
    goto <bb 8>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (int) x_12(D);
  _2 = 65537 / _1;
  t1_13 = (u16) _2;
  _3 = (int) x_12(D);
  _4 = 65537 % _3;
  y_14 = (u16) _4;
  if (y_14 == 1)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _24 = 1 - t1_13;
  goto <bb 8>; [0.00%]

  <bb 5> [0.00%]:
  # x_7 = PHI <x_12(D)(3), x_17(6)>
  # t0_8 = PHI <1(3), t0_18(6)>
  # t1_9 = PHI <t1_13(3), t1_21(6)>
  # y_10 = PHI <y_14(3), y_20(6)>
  q_16 = x_7 / y_10;
  x_17 = x_7 % y_10;
  _5 = t1_9 * q_16;
  t0_18 = _5 + t0_8;
  if (x_17 == 1)
    goto <bb 8>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  q_19 = y_10 / x_17;
  y_20 = y_10 % x_17;
  _6 = t0_18 * q_19;
  t1_21 = _6 + t1_9;
  if (y_20 != 1)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  _22 = 1 - t1_21;

  <bb 8> [0.00%]:
  # _11 = PHI <x_12(D)(2), _24(4), t0_18(5), _22(7)>
  return _11;

}



;; Function en_key_idea (en_key_idea, funcdef_no=86, decl_uid=4640, cgraph_uid=86, symbol_order=111)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
userkey = &NONLOCAL
Z = &NONLOCAL
userkey.109_1 = userkey_31
userkey_48 = userkey_31 + 16
_2 = j_34
_3 = _2
_3 = &NONLOCAL
_4 = Z + UNKNOWN
_5 = *userkey.109_1
*_4 = _5
j_50 = j_34
j_50 = &NONLOCAL
userkey_31 = userkey
userkey_31 = userkey_48
j_34 = &NULL
j_34 = j_50
i_43 = i_33
i_43 = &NONLOCAL
_6 = i_43
_38 = i_43 + UNKNOWN
_7 = _38
_8 = _7
_8 = &NONLOCAL
_9 = Z_32 + UNKNOWN
_10 = *_9
_11 = _10
_12 = _11
_12 = &NONLOCAL
_13 = _12
_14 = i_33
_14 = &NONLOCAL
_15 = _14
_41 = _14 + UNKNOWN
_16 = _41
_17 = _16
_17 = &NONLOCAL
_18 = Z_32 + UNKNOWN
_19 = *_18
_20 = _19
_20 = &NONLOCAL
_21 = _20
_22 = _13
_22 = _21
_23 = i_43
_24 = _23
_24 = &NONLOCAL
_25 = _24
_25 = &NONLOCAL
_26 = Z_32 + UNKNOWN
_27 = _22
*_26 = _27
_28 = i_43
_51 = i_43 + UNKNOWN
_29 = _51
_30 = _29
_30 = &NONLOCAL
Z_45 = Z_32 + UNKNOWN
i_46 = i_43 + UNKNOWN
j_47 = j_35
j_47 = &NONLOCAL
Z_32 = Z
Z_32 = Z_45
i_33 = &NULL
i_33 = i_46
j_35 = j_34
j_35 = j_47

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"userkey"[label="userkey = { 5 }"];
"Z"[label="Z = { 5 }"];
"userkey.109_1";
"userkey_31";
"userkey_48";
"_2";
"j_34"[label="j_34 = { 1 5 }"];
"_3"[label="_3 = { 5 }"];
"_4";
"_5";
"i_43"[label="i_43 = { 5 }"];
"i_33"[label="i_33 = { 1 }"];
"_6";
"_38";
"_7";
"_8"[label="_8 = { 5 }"];
"_9";
"Z_32";
"_10";
"_11";
"_12"[label="_12 = { 5 }"];
"_13";
"_14"[label="_14 = { 5 }"];
"_15";
"_41";
"_16";
"_17"[label="_17 = { 5 }"];
"_18";
"_19";
"_20"[label="_20 = { 5 }"];
"_21";
"_22";
"_23";
"_24"[label="_24 = { 5 }"];
"_25"[label="_25 = { 5 }"];
"_26";
"_27";
"_28";
"_51";
"_29";
"_30"[label="_30 = { 5 }"];
"Z_45";
"i_46";
"j_47"[label="j_47 = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*userkey";
"*Z";
"*userkey.109_1";
"*userkey_31";
"*userkey_48";
"*_2";
"*j_34";
"*_3";
"*_4";
"*_5";
"*j_50";
"*i_43";
"*i_33";
"*_6";
"*_38";
"*_7";
"*_8";
"*_9";
"*Z_32";
"*_10";
"*_11";
"*_12";
"*_13";
"*_14";
"*_15";
"*_41";
"*_16";
"*_17";
"*_18";
"*_19";
"*_20";
"*_21";
"*_22";
"*_23";
"*_24";
"*_25";
"*_26";
"*_27";
"*_28";
"*_51";
"*_29";
"*_30";
"*Z_45";
"*i_46";
"*j_47";
"*j_35";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"userkey_31" -> "userkey.109_1";
"userkey" -> "userkey_31";
"userkey_48" -> "userkey_31";
"j_34" -> "_2";
"j_34" -> "j_34";
"j_34" -> "j_34";
"_2" -> "_3";
"*userkey.109_1" -> "_5";
"i_33" -> "i_43";
"i_46" -> "i_33";
"i_43" -> "_6";
"_38" -> "_7";
"_7" -> "_8";
"Z" -> "Z_32";
"Z_45" -> "Z_32";
"*_9" -> "_10";
"_10" -> "_11";
"_11" -> "_12";
"_12" -> "_13";
"i_33" -> "_14";
"_14" -> "_15";
"_41" -> "_16";
"_16" -> "_17";
"*_18" -> "_19";
"_19" -> "_20";
"_20" -> "_21";
"_13" -> "_22";
"_21" -> "_22";
"i_43" -> "_23";
"_23" -> "_24";
"_24" -> "_25";
"_22" -> "_27";
"i_43" -> "_28";
"_51" -> "_29";
"_29" -> "_30";
"j_34" -> "j_47";
"j_47" -> "j_47";
"j_47" -> "j_47";
"NONLOCAL" -> "*ESCAPED";
"_5" -> "*_4";
"_27" -> "*_26";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"userkey" [label="\N\n_4 = userkey + UNKNOWN\l"];
"userkey.109_1" [label="\N\nuserkey_48 = userkey.109_1 + 16\l_5 = *userkey.109_1\l"];
"userkey_48";
"_2";
"_4" [label="\N\n*_4 = _5\l"];
"_5";
"i_43" [label="\N\n_38 = i_43 + UNKNOWN\l_41 = i_43 + UNKNOWN\l_51 = i_43 + UNKNOWN\li_46 = i_43 + UNKNOWN\l"];
"i_33";
"_38";
"_8";
"_9" [label="\N\n_10 = *_9\l"];
"Z_32" [label="\N\n_9 = Z_32 + UNKNOWN\l_18 = Z_32 + UNKNOWN\l_26 = Z_32 + UNKNOWN\lZ_45 = Z_32 + UNKNOWN\l"];
"_10";
"_12";
"_41";
"_17";
"_18" [label="\N\n_19 = *_18\l"];
"_19";
"_20";
"_22";
"_26" [label="\N\n*_26 = _22\l"];
"_51";
"_30";
"Z_45";
"i_46";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "userkey_48";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "_38";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_41";
"STOREDANYTHING" -> "_18";
"STOREDANYTHING" -> "_26";
"STOREDANYTHING" -> "_51";
"STOREDANYTHING" -> "Z_45";
"STOREDANYTHING" -> "i_46";
"userkey" -> "userkey.109_1";
"userkey" -> "Z_32";
"userkey_48" -> "userkey.109_1";
"i_33" -> "i_43";
"_38" -> "_8";
"_10" -> "_12";
"_12" -> "_22";
"_41" -> "_17";
"_19" -> "_20";
"_20" -> "_22";
"_51" -> "_30";
"Z_45" -> "Z_32";
"i_46" -> "i_33";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"userkey" [label="\N\n_4 = userkey + UNKNOWN\l"];
"userkey.109_1" [label="\N\nuserkey_48 = userkey.109_1 + 16\l_5 = *userkey.109_1\l"];
"userkey_48";
"_2";
"_4" [label="\N\n*_4 = _5\l"];
"_5";
"i_43" [label="\N\n_38 = i_43 + UNKNOWN\l_41 = i_43 + UNKNOWN\l_51 = i_43 + UNKNOWN\li_46 = i_43 + UNKNOWN\l"];
"i_33";
"_38";
"_8";
"_9" [label="\N\n_10 = *_9\l"];
"Z_32" [label="\N\n_9 = Z_32 + UNKNOWN\l_18 = Z_32 + UNKNOWN\l_26 = Z_32 + UNKNOWN\lZ_45 = Z_32 + UNKNOWN\l"];
"_10";
"_12";
"_41";
"_17";
"_18" [label="\N\n_19 = *_18\l"];
"_19";
"_20";
"_22";
"_26" [label="\N\n*_26 = _22\l"];
"_51";
"_30";
"Z_45";
"i_46";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "userkey_48";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "_38";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_41";
"STOREDANYTHING" -> "_18";
"STOREDANYTHING" -> "_26";
"STOREDANYTHING" -> "_51";
"STOREDANYTHING" -> "Z_45";
"STOREDANYTHING" -> "i_46";
"userkey" -> "userkey.109_1";
"userkey" -> "Z_32";
"userkey_48" -> "userkey.109_1";
"_5" -> "ESCAPED";
"i_33" -> "i_43";
"_38" -> "_8";
"_10" -> "_12";
"_12" -> "_22";
"_41" -> "_17";
"_19" -> "_20";
"_20" -> "_22";
"_22" -> "ESCAPED";
"_51" -> "_30";
"Z_45" -> "Z_32";
"i_46" -> "i_33";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
userkey = { NONLOCAL }
Z = { NONLOCAL } same as userkey
userkey.109_1 = { NONLOCAL }
userkey_31 = { NONLOCAL } same as userkey.109_1
userkey_48 = { NONLOCAL }
_2 = { NULL NONLOCAL }
j_34 = { NULL NONLOCAL } same as _2
_3 = { NULL NONLOCAL } same as _2
_4 = { NONLOCAL }
_5 = { ESCAPED NONLOCAL }
j_50 = { NULL NONLOCAL } same as _2
i_43 = { NULL NONLOCAL }
i_33 = { NULL NONLOCAL }
_6 = { NULL NONLOCAL } same as i_43
_38 = { NULL NONLOCAL }
_7 = { NULL NONLOCAL } same as _38
_8 = { NULL NONLOCAL }
_9 = { NONLOCAL }
Z_32 = { NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as _10
_12 = { ESCAPED NONLOCAL }
_13 = { ESCAPED NONLOCAL } same as _12
_14 = { NULL NONLOCAL } same as i_43
_15 = { NULL NONLOCAL } same as i_43
_41 = { NULL NONLOCAL }
_16 = { NULL NONLOCAL } same as _41
_17 = { NULL NONLOCAL }
_18 = { NONLOCAL }
_19 = { ESCAPED NONLOCAL }
_20 = { ESCAPED NONLOCAL }
_21 = { ESCAPED NONLOCAL } same as _20
_22 = { ESCAPED NONLOCAL }
_23 = { NULL NONLOCAL } same as i_43
_24 = { NULL NONLOCAL } same as i_43
_25 = { NULL NONLOCAL } same as i_43
_26 = { NONLOCAL }
_27 = { ESCAPED NONLOCAL } same as _22
_28 = { NULL NONLOCAL } same as i_43
_51 = { NULL NONLOCAL }
_29 = { NULL NONLOCAL } same as _51
_30 = { NULL NONLOCAL }
Z_45 = { NONLOCAL }
i_46 = { NULL NONLOCAL }
j_47 = { NULL NONLOCAL } same as _2
j_35 = { NULL NONLOCAL } same as _2


Alias information for en_key_idea

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

userkey.109_1, points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
_18, points-to non-local, points-to NULL, points-to vars: { }
_26, points-to non-local, points-to NULL, points-to vars: { }
userkey_31, points-to non-local, points-to NULL, points-to vars: { }
Z_32, points-to non-local, points-to NULL, points-to vars: { }
userkey_39(D), points-to non-local, points-to NULL, points-to vars: { }
Z_42(D), points-to non-local, points-to NULL, points-to vars: { }
Z_45, points-to non-local, points-to NULL, points-to vars: { }
userkey_48, points-to non-local, points-to NULL, points-to vars: { }

en_key_idea (u16 * userkey, u16 * Z)
{
  int j;
  int i;
  u16 * userkey.109_1;
  long unsigned int _2;
  long unsigned int _3;
  u16 * _4;
  short unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  u16 * _9;
  short unsigned int _10;
  int _11;
  int _12;
  signed short _13;
  int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  u16 * _18;
  short unsigned int _19;
  short unsigned int _20;
  signed short _21;
  signed short _22;
  sizetype _23;
  sizetype _24;
  sizetype _25;
  u16 * _26;
  short unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  int _38;
  int _41;
  int _51;

  <bb 2> [0.00%]:
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  userkey.109_1 = userkey_31;
  userkey_48 = userkey_31 + 2;
  _2 = (long unsigned int) j_34;
  _3 = _2 * 2;
  _4 = Z_42(D) + _3;
  _5 = *userkey.109_1;
  *_4 = _5;
  j_50 = j_34 + 1;

  <bb 4> [0.00%]:
  # userkey_31 = PHI <userkey_39(D)(2), userkey_48(3)>
  # j_34 = PHI <0(2), j_50(3)>
  if (j_34 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  i_43 = i_33 + 1;
  _6 = (long unsigned int) i_43;
  _38 = i_43 & 7;
  _7 = (long unsigned int) _38;
  _8 = _7 * 2;
  _9 = Z_32 + _8;
  _10 = *_9;
  _11 = (int) _10;
  _12 = _11 << 9;
  _13 = (signed short) _12;
  _14 = i_33 + 2;
  _15 = (long unsigned int) _14;
  _41 = _14 & 7;
  _16 = (long unsigned int) _41;
  _17 = _16 * 2;
  _18 = Z_32 + _17;
  _19 = *_18;
  _20 = _19 >> 7;
  _21 = (signed short) _20;
  _22 = _13 | _21;
  _23 = (sizetype) i_43;
  _24 = _23 + 7;
  _25 = _24 * 2;
  _26 = Z_32 + _25;
  _27 = (short unsigned int) _22;
  *_26 = _27;
  _28 = (long unsigned int) i_43;
  _51 = i_43 & 8;
  _29 = (long unsigned int) _51;
  _30 = _29 * 2;
  Z_45 = Z_32 + _30;
  i_46 = i_43 & 7;
  j_47 = j_35 + 1;

  <bb 6> [0.00%]:
  # Z_32 = PHI <Z_42(D)(4), Z_45(5)>
  # i_33 = PHI <0(4), i_46(5)>
  # j_35 = PHI <j_34(4), j_47(5)>
  if (j_35 <= 51)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function de_key_idea (de_key_idea, funcdef_no=87, decl_uid=4643, cgraph_uid=87, symbol_order=112)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
Z = &NONLOCAL
DK = &NONLOCAL
_2 = *Z
_3 = _2
_55 = _2
callarg(14) = _55
_130 = callarg(14) + UNKNOWN
_130 = &NONLOCAL
_131 = _2
_131 = _130
_5 = *Z + 16
t2_58 = _5
_7 = *Z + 32
t3_60 = _7
Z_61 = Z + 64
_9 = *Z + 48
_10 = _9
_80 = _9
callarg(25) = _80
_121 = callarg(25) + UNKNOWN
_121 = &NONLOCAL
_113 = _9
_113 = _121
TT = _113
TT = t3_60
TT = t2_58
TT = _131
Z.114_12 = Z_43
t1_106 = *Z.114_12
p_108 = p_47 + -16
_14 = *Z.114_12 + 16
*p_47 + -16 = _14
p_110 = p_47 + -32
*p_47 + -32 = t1_106
_16 = *Z.114_12 + 32
_17 = _16
_137 = _16
callarg(39) = _137
_138 = callarg(39) + UNKNOWN
_138 = &NONLOCAL
_139 = _16
_139 = _138
_19 = *Z.114_12 + 48
t2_116 = _19
_21 = *Z.114_12 + 64
t3_118 = _21
Z_119 = Z.114_12 + 96
_23 = *Z.114_12 + 80
_24 = _23
p_120 = p_47 + -48
_133 = _23
callarg(51) = _133
_134 = callarg(51) + UNKNOWN
_134 = &NONLOCAL
_135 = _23
_135 = _134
*p_47 + -48 = _135
p_123 = p_47 + -64
*p_47 + -64 = t2_116
p_125 = p_47 + -80
*p_47 + -80 = t3_118
p_127 = p_47 + -96
*p_47 + -96 = _139
j_129 = j_45
j_129 = &NONLOCAL
Z_43 = Z_61
Z_43 = Z_119
j_45 = &NONLOCAL
j_45 = j_129
p_47 = &TT
p_47 = p_127
t1_73 = *Z_43
p_75 = p_47 + -16
_28 = *Z_43 + 16
*p_47 + -16 = _28
p_77 = p_47 + -32
*p_47 + -32 = t1_73
_30 = *Z_43 + 32
_31 = _30
_145 = _30
callarg(66) = _145
_146 = callarg(66) + UNKNOWN
_146 = &NONLOCAL
_147 = _30
_147 = _146
_33 = *Z_43 + 48
t2_83 = _33
_35 = *Z_43 + 64
t3_85 = _35
_37 = *Z_43 + 80
_38 = _37
p_87 = p_47 + -48
_141 = _37
callarg(77) = _141
_142 = callarg(77) + UNKNOWN
_142 = &NONLOCAL
_143 = _37
_143 = _142
*p_47 + -48 = _143
p_90 = p_47 + -64
*p_47 + -64 = t3_85
p_92 = p_47 + -80
*p_47 + -80 = t2_83
p_94 = p_47 + -96
*p_47 + -96 = _147
DK.126_40 = DK_44
DK_100 = DK_44 + 16
_41 = *p_48
*DK.126_40 = _41
p.127_42 = p_48
p_102 = p_48 + 16
derefaddrtmp(90) = &NULL
*p.127_42 = derefaddrtmp(90)
j_104 = j_46
j_104 = &NONLOCAL
DK_44 = DK
DK_44 = DK_100
j_46 = &NULL
j_46 = j_104
p_48 = &TT
p_48 = p_102

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"Z"[label="Z = { 5 }"];
"DK"[label="DK = { 5 }"];
"_2";
"_3";
"_55";
"inv.part.1";
"callarg(14)";
"_130"[label="_130 = { 5 }"];
"_131";
"_5";
"t2_58";
"_7";
"t3_60";
"Z_61";
"_9";
"_10";
"_80";
"callarg(25)";
"_121"[label="_121 = { 5 }"];
"_113";
"TT";
"Z.114_12";
"Z_43";
"t1_106";
"p_108";
"p_47"[label="p_47 = { 28 }"];
"_14";
"p_110";
"_16";
"_17";
"_137";
"callarg(39)";
"_138"[label="_138 = { 5 }"];
"_139";
"_19";
"t2_116";
"_21";
"t3_118";
"Z_119";
"_23";
"_24";
"p_120";
"_133";
"callarg(51)";
"_134"[label="_134 = { 5 }"];
"_135";
"p_123";
"p_125";
"p_127";
"j_129"[label="j_129 = { 5 }"];
"t1_73";
"p_75";
"_28";
"p_77";
"_30";
"_31";
"_145";
"callarg(66)";
"_146"[label="_146 = { 5 }"];
"_147";
"_33";
"t2_83";
"_35";
"t3_85";
"_37";
"_38";
"p_87";
"_141";
"callarg(77)";
"_142"[label="_142 = { 5 }"];
"_143";
"p_90";
"p_92";
"p_94";
"DK.126_40";
"DK_44";
"DK_100";
"_41";
"p_48"[label="p_48 = { 28 }"];
"p.127_42";
"p_102";
"derefaddrtmp(90)"[label="derefaddrtmp(90) = { 1 }"];
"j_104"[label="j_104 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*Z";
"*DK";
"*_2";
"*_3";
"*_55";
"*inv.part.1";
"*callarg(14)";
"*_130";
"*_131";
"*_5";
"*t2_58";
"*_7";
"*t3_60";
"*Z_61";
"*_9";
"*_10";
"*_80";
"*callarg(25)";
"*_121";
"*_113";
"*TT";
"*Z.114_12";
"*Z_43";
"*t1_106";
"*p_108";
"*p_47";
"*_14";
"*p_110";
"*_16";
"*_17";
"*_137";
"*callarg(39)";
"*_138";
"*_139";
"*_19";
"*t2_116";
"*_21";
"*t3_118";
"*Z_119";
"*_23";
"*_24";
"*p_120";
"*_133";
"*callarg(51)";
"*_134";
"*_135";
"*p_123";
"*p_125";
"*p_127";
"*j_129";
"*j_45";
"*t1_73";
"*p_75";
"*_28";
"*p_77";
"*_30";
"*_31";
"*_145";
"*callarg(66)";
"*_146";
"*_147";
"*_33";
"*t2_83";
"*_35";
"*t3_85";
"*_37";
"*_38";
"*p_87";
"*_141";
"*callarg(77)";
"*_142";
"*_143";
"*p_90";
"*p_92";
"*p_94";
"*DK.126_40";
"*DK_44";
"*DK_100";
"*_41";
"*p_48";
"*p.127_42";
"*p_102";
"*derefaddrtmp(90)";
"*j_104";
"*j_46";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"*Z" -> "_2";
"_2" -> "_3";
"_2" -> "_55";
"_55" -> "callarg(14)";
"_2" -> "_131";
"_130" -> "_131";
"_5" -> "t2_58";
"_7" -> "t3_60";
"_9" -> "_10";
"_9" -> "_80";
"_80" -> "callarg(25)";
"_9" -> "_113";
"_121" -> "_113";
"_131" -> "TT";
"t2_58" -> "TT";
"t3_60" -> "TT";
"_113" -> "TT";
"Z_43" -> "Z.114_12";
"Z_61" -> "Z_43";
"Z_119" -> "Z_43";
"*Z.114_12" -> "t1_106";
"p_127" -> "p_47";
"_16" -> "_17";
"_16" -> "_137";
"_137" -> "callarg(39)";
"_16" -> "_139";
"_138" -> "_139";
"_19" -> "t2_116";
"_21" -> "t3_118";
"_23" -> "_24";
"_23" -> "_133";
"_133" -> "callarg(51)";
"_23" -> "_135";
"_134" -> "_135";
"j_129" -> "j_129";
"j_129" -> "j_129";
"*Z_43" -> "t1_73";
"_30" -> "_31";
"_30" -> "_145";
"_145" -> "callarg(66)";
"_30" -> "_147";
"_146" -> "_147";
"_33" -> "t2_83";
"_35" -> "t3_85";
"_37" -> "_38";
"_37" -> "_141";
"_141" -> "callarg(77)";
"_37" -> "_143";
"_142" -> "_143";
"DK_44" -> "DK.126_40";
"DK" -> "DK_44";
"DK_100" -> "DK_44";
"*p_48" -> "_41";
"p_102" -> "p_48";
"p_48" -> "p.127_42";
"j_104" -> "j_104";
"j_104" -> "j_104";
"NONLOCAL" -> "*ESCAPED";
"_41" -> "*DK.126_40";
"derefaddrtmp(90)" -> "*p.127_42";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"Z" [label="\N\n_2 = *Z\l_5 = *Z + 16\l_7 = *Z + 32\lZ_61 = Z + 64\l_9 = *Z + 48\l"];
"_2" [label="\N\n_130 = _2 + UNKNOWN\l"];
"inv.part.1";
"_130";
"_131";
"_5";
"_7";
"Z_61";
"_9" [label="\N\n_121 = _9 + UNKNOWN\l"];
"_121";
"_113";
"TT";
"Z.114_12" [label="\N\nt1_106 = *Z.114_12\l_14 = *Z.114_12 + 16\l_16 = *Z.114_12 + 32\l_19 = *Z.114_12 + 48\l_21 = *Z.114_12 + 64\lZ_119 = Z.114_12 + 96\l_23 = *Z.114_12 + 80\lt1_73 = *Z.114_12\l_28 = *Z.114_12 + 16\l_30 = *Z.114_12 + 32\l_33 = *Z.114_12 + 48\l_35 = *Z.114_12 + 64\l_37 = *Z.114_12 + 80\l"];
"t1_106";
"p_108";
"p_47" [label="\N\np_108 = p_47 + -16\lp_110 = p_47 + -32\lp_120 = p_47 + -48\lp_123 = p_47 + -64\lp_125 = p_47 + -80\lp_127 = p_47 + -96\lp_75 = p_47 + -16\lp_77 = p_47 + -32\lp_87 = p_47 + -48\lp_90 = p_47 + -64\lp_92 = p_47 + -80\lp_94 = p_47 + -96\l*p_47 + -96 = _139\l*p_47 + -96 = _147\l*p_47 + -80 = _21\l*p_47 + -80 = _33\l*p_47 + -64 = _19\l*p_47 + -64 = _35\l*p_47 + -48 = _135\l*p_47 + -48 = _143\l*p_47 + -32 = t1_106\l*p_47 + -32 = t1_73\l*p_47 + -16 = _14\l*p_47 + -16 = _28\l"];
"_14";
"p_110";
"_16" [label="\N\n_138 = _16 + UNKNOWN\l"];
"_138";
"_139";
"_19";
"_21";
"Z_119";
"_23" [label="\N\n_134 = _23 + UNKNOWN\l"];
"p_120";
"_134";
"_135";
"p_123";
"p_125";
"p_127";
"t1_73";
"p_75";
"_28";
"p_77";
"_30" [label="\N\n_146 = _30 + UNKNOWN\l"];
"_146";
"_147";
"_33";
"_35";
"_37" [label="\N\n_142 = _37 + UNKNOWN\l"];
"p_87";
"_142";
"_143";
"p_90";
"p_92";
"p_94";
"DK.126_40" [label="\N\nDK_100 = DK.126_40 + 16\l*DK.126_40 = _41\l"];
"DK_100";
"_41";
"p_48" [label="\N\n_41 = *p_48\lp_102 = p_48 + 16\l*p_48 = derefaddrtmp(90)\l"];
"p_102";
"derefaddrtmp(90)";
"j_104";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_130";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "Z_61";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_121";
"STOREDANYTHING" -> "TT";
"STOREDANYTHING" -> "p_108";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "p_110";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_138";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "Z_119";
"STOREDANYTHING" -> "_23";
"STOREDANYTHING" -> "p_120";
"STOREDANYTHING" -> "_134";
"STOREDANYTHING" -> "p_123";
"STOREDANYTHING" -> "p_125";
"STOREDANYTHING" -> "p_127";
"STOREDANYTHING" -> "p_75";
"STOREDANYTHING" -> "_28";
"STOREDANYTHING" -> "p_77";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "_146";
"STOREDANYTHING" -> "_33";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_37";
"STOREDANYTHING" -> "p_87";
"STOREDANYTHING" -> "_142";
"STOREDANYTHING" -> "p_90";
"STOREDANYTHING" -> "p_92";
"STOREDANYTHING" -> "p_94";
"STOREDANYTHING" -> "DK_100";
"STOREDANYTHING" -> "p_102";
"Z" -> "DK.126_40";
"_2" -> "_131";
"_130" -> "_131";
"_131" -> "TT";
"_5" -> "TT";
"_7" -> "TT";
"Z_61" -> "Z.114_12";
"_9" -> "_113";
"_121" -> "_113";
"_113" -> "TT";
"_16" -> "_139";
"_138" -> "_139";
"Z_119" -> "Z.114_12";
"_23" -> "_135";
"_134" -> "_135";
"p_127" -> "p_47";
"_30" -> "_147";
"_146" -> "_147";
"_37" -> "_143";
"_142" -> "_143";
"DK_100" -> "DK.126_40";
"p_102" -> "p_48";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"Z" [label="\N\n_2 = *Z\l_5 = *Z + 16\l_7 = *Z + 32\lZ_61 = Z + 64\l_9 = *Z + 48\l"];
"_2" [label="\N\n_130 = _2 + UNKNOWN\l"];
"inv.part.1";
"_130";
"_131";
"_5";
"_7";
"Z_61";
"_9" [label="\N\n_121 = _9 + UNKNOWN\l"];
"_121";
"_113";
"TT";
"Z.114_12" [label="\N\nt1_106 = *Z.114_12\l_14 = *Z.114_12 + 16\l_16 = *Z.114_12 + 32\l_19 = *Z.114_12 + 48\l_21 = *Z.114_12 + 64\lZ_119 = Z.114_12 + 96\l_23 = *Z.114_12 + 80\lt1_73 = *Z.114_12\l_28 = *Z.114_12 + 16\l_30 = *Z.114_12 + 32\l_33 = *Z.114_12 + 48\l_35 = *Z.114_12 + 64\l_37 = *Z.114_12 + 80\l"];
"t1_106";
"p_108";
"p_47" [label="\N\np_108 = p_47 + -16\lp_110 = p_47 + -32\lp_120 = p_47 + -48\lp_123 = p_47 + -64\lp_125 = p_47 + -80\lp_127 = p_47 + -96\lp_75 = p_47 + -16\lp_77 = p_47 + -32\lp_87 = p_47 + -48\lp_90 = p_47 + -64\lp_92 = p_47 + -80\lp_94 = p_47 + -96\l*p_47 + -96 = _139\l*p_47 + -96 = _147\l*p_47 + -80 = _21\l*p_47 + -80 = _33\l*p_47 + -64 = _19\l*p_47 + -64 = _35\l*p_47 + -48 = _135\l*p_47 + -48 = _143\l*p_47 + -32 = t1_106\l*p_47 + -32 = t1_73\l*p_47 + -16 = _14\l*p_47 + -16 = _28\l"];
"_14";
"p_110";
"_16" [label="\N\n_138 = _16 + UNKNOWN\l"];
"_138";
"_139";
"_19";
"_21";
"Z_119";
"_23" [label="\N\n_134 = _23 + UNKNOWN\l"];
"p_120";
"_134";
"_135";
"p_123";
"p_125";
"p_127";
"t1_73";
"p_75";
"_28";
"p_77";
"_30" [label="\N\n_146 = _30 + UNKNOWN\l"];
"_146";
"_147";
"_33";
"_35";
"_37" [label="\N\n_142 = _37 + UNKNOWN\l"];
"p_87";
"_142";
"_143";
"p_90";
"p_92";
"p_94";
"DK.126_40" [label="\N\nDK_100 = DK.126_40 + 16\l*DK.126_40 = _41\l"];
"DK_100";
"_41";
"p_48" [label="\N\n_41 = *p_48\lp_102 = p_48 + 16\l*p_48 = derefaddrtmp(90)\l"];
"p_102";
"derefaddrtmp(90)";
"j_104";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_130";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "Z_61";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_121";
"STOREDANYTHING" -> "TT";
"STOREDANYTHING" -> "p_108";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "p_110";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_138";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "Z_119";
"STOREDANYTHING" -> "_23";
"STOREDANYTHING" -> "p_120";
"STOREDANYTHING" -> "_134";
"STOREDANYTHING" -> "p_123";
"STOREDANYTHING" -> "p_125";
"STOREDANYTHING" -> "p_127";
"STOREDANYTHING" -> "p_75";
"STOREDANYTHING" -> "_28";
"STOREDANYTHING" -> "p_77";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "_146";
"STOREDANYTHING" -> "_33";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_37";
"STOREDANYTHING" -> "p_87";
"STOREDANYTHING" -> "_142";
"STOREDANYTHING" -> "p_90";
"STOREDANYTHING" -> "p_92";
"STOREDANYTHING" -> "p_94";
"STOREDANYTHING" -> "DK_100";
"STOREDANYTHING" -> "p_102";
"Z" -> "DK.126_40";
"_2" -> "_131";
"_130" -> "_131";
"_131" -> "TT";
"_5" -> "TT";
"_7" -> "TT";
"Z_61" -> "Z.114_12";
"_9" -> "_113";
"_121" -> "_113";
"_113" -> "TT";
"TT" -> "_41";
"t1_106" -> "TT";
"_14" -> "TT";
"_16" -> "_139";
"_138" -> "_139";
"_139" -> "TT";
"_19" -> "TT";
"_21" -> "TT";
"Z_119" -> "Z.114_12";
"_23" -> "_135";
"_134" -> "_135";
"_135" -> "TT";
"p_127" -> "p_47";
"t1_73" -> "TT";
"_28" -> "TT";
"_30" -> "_147";
"_146" -> "_147";
"_147" -> "TT";
"_33" -> "TT";
"_35" -> "TT";
"_37" -> "_143";
"_142" -> "_143";
"_143" -> "TT";
"DK_100" -> "DK.126_40";
"_41" -> "ESCAPED";
"p_102" -> "p_48";
"derefaddrtmp(90)" -> "TT";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
Z = { NONLOCAL }
DK = { NONLOCAL } same as Z
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _2
_55 = { ESCAPED NONLOCAL } same as _2
inv.part.1 = { }
callarg(14) = { ESCAPED NONLOCAL } same as _2
_130 = { ESCAPED NONLOCAL }
_131 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL }
t2_58 = { ESCAPED NONLOCAL } same as _5
_7 = { ESCAPED NONLOCAL }
t3_60 = { ESCAPED NONLOCAL } same as _7
Z_61 = { NONLOCAL }
_9 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL } same as _9
_80 = { ESCAPED NONLOCAL } same as _9
callarg(25) = { ESCAPED NONLOCAL } same as _9
_121 = { ESCAPED NONLOCAL }
_113 = { ESCAPED NONLOCAL }
TT = { NULL ESCAPED NONLOCAL }
Z.114_12 = { NONLOCAL }
Z_43 = { NONLOCAL } same as Z.114_12
t1_106 = { ESCAPED NONLOCAL }
p_108 = { TT }
p_47 = { TT }
_14 = { ESCAPED NONLOCAL }
p_110 = { TT }
_16 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL } same as _16
_137 = { ESCAPED NONLOCAL } same as _16
callarg(39) = { ESCAPED NONLOCAL } same as _16
_138 = { ESCAPED NONLOCAL }
_139 = { ESCAPED NONLOCAL }
_19 = { ESCAPED NONLOCAL }
t2_116 = { ESCAPED NONLOCAL } same as _19
_21 = { ESCAPED NONLOCAL }
t3_118 = { ESCAPED NONLOCAL } same as _21
Z_119 = { NONLOCAL }
_23 = { ESCAPED NONLOCAL }
_24 = { ESCAPED NONLOCAL } same as _23
p_120 = { TT }
_133 = { ESCAPED NONLOCAL } same as _23
callarg(51) = { ESCAPED NONLOCAL } same as _23
_134 = { ESCAPED NONLOCAL }
_135 = { ESCAPED NONLOCAL }
p_123 = { TT }
p_125 = { TT }
p_127 = { TT }
j_129 = { NONLOCAL } same as Z
j_45 = { NONLOCAL } same as Z
t1_73 = { ESCAPED NONLOCAL }
p_75 = { TT }
_28 = { ESCAPED NONLOCAL }
p_77 = { TT }
_30 = { ESCAPED NONLOCAL }
_31 = { ESCAPED NONLOCAL } same as _30
_145 = { ESCAPED NONLOCAL } same as _30
callarg(66) = { ESCAPED NONLOCAL } same as _30
_146 = { ESCAPED NONLOCAL }
_147 = { ESCAPED NONLOCAL }
_33 = { ESCAPED NONLOCAL }
t2_83 = { ESCAPED NONLOCAL } same as _33
_35 = { ESCAPED NONLOCAL }
t3_85 = { ESCAPED NONLOCAL } same as _35
_37 = { ESCAPED NONLOCAL }
_38 = { ESCAPED NONLOCAL } same as _37
p_87 = { TT }
_141 = { ESCAPED NONLOCAL } same as _37
callarg(77) = { ESCAPED NONLOCAL } same as _37
_142 = { ESCAPED NONLOCAL }
_143 = { ESCAPED NONLOCAL }
p_90 = { TT }
p_92 = { TT }
p_94 = { TT }
DK.126_40 = { NONLOCAL }
DK_44 = { NONLOCAL } same as DK.126_40
DK_100 = { NONLOCAL }
_41 = { NULL ESCAPED NONLOCAL }
p_48 = { TT }
p.127_42 = { TT } same as p_48
p_102 = { TT }
derefaddrtmp(90) = { NULL }
j_104 = { NULL NONLOCAL }
j_46 = { NULL NONLOCAL } same as j_104


Alias information for de_key_idea

Aliased symbols

TT, UID D.5335, u16[52], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

Z.114_12, points-to non-local, points-to NULL, points-to vars: { }
DK.126_40, points-to non-local, points-to NULL, points-to vars: { }
p.127_42, points-to NULL, points-to vars: { D.5335 }
Z_43, points-to non-local, points-to NULL, points-to vars: { }
DK_44, points-to non-local, points-to NULL, points-to vars: { }
p_47, points-to NULL, points-to vars: { D.5335 }
p_48, points-to NULL, points-to vars: { D.5335 }
Z_52(D), points-to non-local, points-to NULL, points-to vars: { }
Z_61, points-to non-local, points-to NULL, points-to vars: { }
p_75, points-to NULL, points-to vars: { D.5335 }
p_77, points-to NULL, points-to vars: { D.5335 }
p_87, points-to NULL, points-to vars: { D.5335 }
p_90, points-to NULL, points-to vars: { D.5335 }
p_92, points-to NULL, points-to vars: { D.5335 }
p_94, points-to NULL, points-to vars: { D.5335 }
DK_98(D), points-to non-local, points-to NULL, points-to vars: { }
DK_100, points-to non-local, points-to NULL, points-to vars: { }
p_102, points-to NULL, points-to vars: { D.5335 }
p_108, points-to NULL, points-to vars: { D.5335 }
p_110, points-to NULL, points-to vars: { D.5335 }
Z_119, points-to non-local, points-to NULL, points-to vars: { }
p_120, points-to NULL, points-to vars: { D.5335 }
p_123, points-to NULL, points-to vars: { D.5335 }
p_125, points-to NULL, points-to vars: { D.5335 }
p_127, points-to NULL, points-to vars: { D.5335 }

de_key_idea (u16 * Z, u16 * DK)
{
  u16 D.6384;
  u16 x;
  u16 D.6382;
  u16 x;
  u16 D.6380;
  u16 x;
  u16 D.6378;
  u16 x;
  u16 D.6376;
  u16 x;
  u16 D.6374;
  u16 x;
  u16 * p;
  u16 t3;
  u16 t2;
  u16 t1;
  int j;
  u16 TT[52];
  short unsigned int _2;
  int _3;
  short unsigned int _5;
  short unsigned int _7;
  short unsigned int _9;
  int _10;
  u16 * Z.114_12;
  short unsigned int _14;
  short unsigned int _16;
  int _17;
  short unsigned int _19;
  short unsigned int _21;
  short unsigned int _23;
  int _24;
  short unsigned int _28;
  short unsigned int _30;
  int _31;
  short unsigned int _33;
  short unsigned int _35;
  short unsigned int _37;
  int _38;
  u16 * DK.126_40;
  short unsigned int _41;
  u16 * p.127_42;
  int _55;
  int _80;
  short unsigned int _113;
  short unsigned int _121;
  short unsigned int _130;
  short unsigned int _131;
  int _133;
  short unsigned int _134;
  short unsigned int _135;
  int _137;
  short unsigned int _138;
  short unsigned int _139;
  int _141;
  short unsigned int _142;
  short unsigned int _143;
  int _145;
  short unsigned int _146;
  short unsigned int _147;

  <bb 2> [30.73%]:
  _2 = *Z_52(D);
  _3 = (int) _2;
  if (_2 <= 1)
    goto <bb 4>; [32.39%]
  else
    goto <bb 3>; [67.61%]

  <bb 3> [20.77%]:
  _55 = (int) _2;
  _130 = inv.part.1 (_55);

  <bb 4> [30.73%]:
  # _131 = PHI <_2(2), _130(3)>
  _5 = MEM[(u16 *)Z_52(D) + 2B];
  t2_58 = -_5;
  _7 = MEM[(u16 *)Z_52(D) + 4B];
  t3_60 = -_7;
  Z_61 = &MEM[(void *)Z_52(D) + 8B];
  _9 = MEM[(u16 *)Z_52(D) + 6B];
  _10 = (int) _9;
  if (_9 <= 1)
    goto <bb 6>; [32.39%]
  else
    goto <bb 5>; [67.61%]

  <bb 5> [20.77%]:
  _80 = (int) _9;
  _121 = inv.part.1 (_80);

  <bb 6> [30.73%]:
  # _113 = PHI <_9(4), _121(5)>
  MEM[(u16 *)&TT + 102B] = _113;
  MEM[(u16 *)&TT + 100B] = t3_60;
  MEM[(u16 *)&TT + 98B] = t2_58;
  MEM[(u16 *)&TT + 96B] = _131;
  goto <bb 12>; [0.00%]

  <bb 7> [30.73%]:
  Z.114_12 = Z_43;
  t1_106 = *Z.114_12;
  p_108 = p_47 + 18446744073709551614;
  _14 = MEM[(u16 *)Z.114_12 + 2B];
  MEM[(u16 *)p_47 + -2B] = _14;
  p_110 = &MEM[(void *)p_47 + -4B];
  MEM[(u16 *)p_47 + -4B] = t1_106;
  _16 = MEM[(u16 *)Z.114_12 + 4B];
  _17 = (int) _16;
  if (_16 <= 1)
    goto <bb 9>; [32.39%]
  else
    goto <bb 8>; [67.61%]

  <bb 8> [20.77%]:
  _137 = (int) _16;
  _138 = inv.part.1 (_137);

  <bb 9> [30.73%]:
  # _139 = PHI <_16(7), _138(8)>
  _19 = MEM[(u16 *)Z.114_12 + 6B];
  t2_116 = -_19;
  _21 = MEM[(u16 *)Z.114_12 + 8B];
  t3_118 = -_21;
  Z_119 = &MEM[(void *)Z.114_12 + 12B];
  _23 = MEM[(u16 *)Z.114_12 + 10B];
  _24 = (int) _23;
  p_120 = &MEM[(void *)p_47 + -6B];
  if (_23 <= 1)
    goto <bb 11>; [32.39%]
  else
    goto <bb 10>; [67.61%]

  <bb 10> [20.77%]:
  _133 = (int) _23;
  _134 = inv.part.1 (_133);

  <bb 11> [30.73%]:
  # _135 = PHI <_23(9), _134(10)>
  MEM[(u16 *)p_47 + -6B] = _135;
  p_123 = &MEM[(void *)p_47 + -8B];
  MEM[(u16 *)p_47 + -8B] = t2_116;
  p_125 = &MEM[(void *)p_47 + -10B];
  MEM[(u16 *)p_47 + -10B] = t3_118;
  p_127 = &MEM[(void *)p_47 + -12B];
  MEM[(u16 *)p_47 + -12B] = _139;
  j_129 = j_45 + 1;

  <bb 12> [0.00%]:
  # Z_43 = PHI <Z_61(6), Z_119(11)>
  # j_45 = PHI <1(6), j_129(11)>
  # p_47 = PHI <&MEM[(void *)&TT + 96B](6), p_127(11)>
  if (j_45 <= 7)
    goto <bb 7>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [30.73%]:
  t1_73 = *Z_43;
  p_75 = p_47 + 18446744073709551614;
  _28 = MEM[(u16 *)Z_43 + 2B];
  MEM[(u16 *)p_47 + -2B] = _28;
  p_77 = &MEM[(void *)p_47 + -4B];
  MEM[(u16 *)p_47 + -4B] = t1_73;
  _30 = MEM[(u16 *)Z_43 + 4B];
  _31 = (int) _30;
  if (_30 <= 1)
    goto <bb 15>; [32.39%]
  else
    goto <bb 14>; [67.61%]

  <bb 14> [20.77%]:
  _145 = (int) _30;
  _146 = inv.part.1 (_145);

  <bb 15> [30.73%]:
  # _147 = PHI <_30(13), _146(14)>
  _33 = MEM[(u16 *)Z_43 + 6B];
  t2_83 = -_33;
  _35 = MEM[(u16 *)Z_43 + 8B];
  t3_85 = -_35;
  _37 = MEM[(u16 *)Z_43 + 10B];
  _38 = (int) _37;
  p_87 = &MEM[(void *)p_47 + -6B];
  if (_37 <= 1)
    goto <bb 17>; [32.39%]
  else
    goto <bb 16>; [67.61%]

  <bb 16> [20.77%]:
  _141 = (int) _37;
  _142 = inv.part.1 (_141);

  <bb 17> [30.73%]:
  # _143 = PHI <_37(15), _142(16)>
  MEM[(u16 *)p_47 + -6B] = _143;
  p_90 = &MEM[(void *)p_47 + -8B];
  MEM[(u16 *)p_47 + -8B] = t3_85;
  p_92 = &MEM[(void *)p_47 + -10B];
  MEM[(u16 *)p_47 + -10B] = t2_83;
  p_94 = &MEM[(void *)p_47 + -12B];
  MEM[(u16 *)p_47 + -12B] = _147;
  goto <bb 19>; [0.00%]

  <bb 18> [0.00%]:
  DK.126_40 = DK_44;
  DK_100 = DK_44 + 2;
  _41 = *p_48;
  *DK.126_40 = _41;
  p.127_42 = p_48;
  p_102 = p_48 + 2;
  *p.127_42 = 0;
  j_104 = j_46 + 1;

  <bb 19> [0.00%]:
  # DK_44 = PHI <DK_98(D)(17), DK_100(18)>
  # j_46 = PHI <0(17), j_104(18)>
  # p_48 = PHI <&TT(17), p_102(18)>
  if (j_46 <= 51)
    goto <bb 18>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  TT ={v} {CLOBBER};
  return;

}



;; Function cipher_idea (cipher_idea, funcdef_no=88, decl_uid=4647, cgraph_uid=88, symbol_order=113)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
in = &NONLOCAL
out = &NONLOCAL
Z = &NONLOCAL
x1_50 = *in
x2_52 = *in + 16
x3_54 = *in + 32
x4_55 = *in + 48
Z_39 = Z
Z_39 = Z_74
x1_40 = x1_50
x1_40 = x1_78
x2_41 = x2_52
x2_41 = x2_81
x3_42 = x3_54
x3_42 = t2_80
x4_43 = x4_55
x4_43 = x4_79
r_44 = &NONLOCAL
r_44 = r_83
Z.131_4 = Z_39
_5 = *Z.131_4
_6 = _5
_7 = x1_40
a_117 = x1_40
_119 = x1_40
_120 = _5
callarg(35) = _119
callarg(35) = _120
_121 = callarg(35) + UNKNOWN
_121 = &NONLOCAL
_122 = &NONLOCAL
_122 = x1_40
_123 = &NONLOCAL
_123 = _5
_124 = _121
_124 = _122
_124 = _123
_61 = *Z.131_4 + 16
x2_62 = x2_41
x2_62 = _61
_64 = *Z.131_4 + 32
x3_65 = x3_42
x3_65 = _64
_11 = *Z.131_4 + 48
_12 = _11
_13 = x4_43
a_109 = x4_43
_111 = x4_43
_112 = _11
callarg(50) = _111
callarg(50) = _112
_113 = callarg(50) + UNKNOWN
_113 = &NONLOCAL
_114 = &NONLOCAL
_114 = x4_43
_115 = &NONLOCAL
_115 = _11
_116 = _113
_116 = _114
_116 = _115
t2_69 = x3_65
t2_69 = _124
_15 = *Z.131_4 + 64
_16 = _15
_17 = t2_69
_103 = t2_69
_104 = _15
callarg(61) = _103
callarg(61) = _104
_105 = callarg(61) + UNKNOWN
_105 = &NONLOCAL
_106 = &NONLOCAL
_106 = t2_69
_107 = &NONLOCAL
_107 = _15
_108 = _105
_108 = _106
_108 = _107
_18 = x2_62
_18 = _116
t1_73 = _18
t1_73 = _108
Z_74 = Z.131_4 + 96
_20 = *Z.131_4 + 80
_21 = _20
_22 = t1_73
_75 = t1_73
_71 = _20
callarg(73) = _75
callarg(73) = _71
_67 = callarg(73) + UNKNOWN
_67 = &NONLOCAL
_58 = &NONLOCAL
_58 = t1_73
_99 = &NONLOCAL
_99 = _20
_100 = _67
_100 = _58
_100 = _99
t2_77 = _100
t2_77 = _108
x1_78 = _100
x1_78 = _124
x4_79 = t2_77
x4_79 = _116
t2_80 = x2_62
t2_80 = t2_77
x2_81 = x3_65
x2_81 = _100
r_83 = r_44
r_83 = &NONLOCAL
_24 = *Z.131_4 + 96
_25 = _24
_26 = x1_78
_135 = x1_78
_136 = _24
callarg(84) = _135
callarg(84) = _136
_137 = callarg(84) + UNKNOWN
_137 = &NONLOCAL
_138 = &NONLOCAL
_138 = x1_78
_139 = &NONLOCAL
_139 = _24
_140 = _137
_140 = _138
_140 = _139
out_88 = out + 16
*out = _140
_29 = *Z.131_4 + 112
out_91 = out + 32
_31 = _29
_31 = t2_80
*out + 16 = _31
_33 = *Z.131_4 + 128
out_94 = out + 48
_35 = _33
_35 = x2_81
*out + 32 = _35
_36 = *Z.131_4 + 144
_37 = _36
_38 = x4_79
_127 = x4_79
_128 = _36
callarg(101) = _127
callarg(101) = _128
_129 = callarg(101) + UNKNOWN
_129 = &NONLOCAL
_130 = &NONLOCAL
_130 = x4_79
_131 = &NONLOCAL
_131 = _36
_132 = _129
_132 = _130
_132 = _131
*out + 48 = _132

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"in"[label="in = { 5 }"];
"out"[label="out = { 5 }"];
"Z"[label="Z = { 5 }"];
"x1_50";
"x2_52";
"x3_54";
"x4_55";
"Z_39";
"Z_74";
"x1_40"[label="x1_40 = { 5 }"];
"r_44"[label="r_44 = { 5 }"];
"Z.131_4";
"_5";
"_6";
"_7";
"a_117";
"_119";
"_120";
"mul.part.0";
"callarg(35)";
"_121"[label="_121 = { 5 }"];
"_123"[label="_123 = { 5 }"];
"_61";
"_64";
"_11";
"_12";
"_13";
"a_109";
"_111";
"_112";
"callarg(50)";
"_113"[label="_113 = { 5 }"];
"_115"[label="_115 = { 5 }"];
"_15";
"_16";
"_17";
"_103";
"_104";
"callarg(61)";
"_105"[label="_105 = { 5 }"];
"_107"[label="_107 = { 5 }"];
"_20";
"_21";
"_22";
"_75";
"_71";
"callarg(73)";
"_67"[label="_67 = { 5 }"];
"_99"[label="_99 = { 5 }"];
"_24";
"_25";
"_26";
"_135";
"_136";
"callarg(84)";
"_137"[label="_137 = { 5 }"];
"_138"[label="_138 = { 5 }"];
"_139"[label="_139 = { 5 }"];
"_140";
"out_88";
"_29";
"out_91";
"_31";
"_33";
"out_94";
"_35";
"_36";
"_37";
"_38";
"_127";
"_128";
"callarg(101)";
"_129"[label="_129 = { 5 }"];
"_130"[label="_130 = { 5 }"];
"_131"[label="_131 = { 5 }"];
"_132";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*in";
"*out";
"*Z";
"*x1_50";
"*x2_52";
"*x3_54";
"*x4_55";
"*Z_39";
"*Z_74";
"*x1_40";
"*x1_78";
"*x2_41";
"*x2_81";
"*x3_42";
"*t2_80";
"*x4_43";
"*x4_79";
"*r_44";
"*r_83";
"*Z.131_4";
"*_5";
"*_6";
"*_7";
"*a_117";
"*_119";
"*_120";
"*mul.part.0";
"*callarg(35)";
"*_121";
"*_122";
"*_123";
"*_124";
"*_61";
"*x2_62";
"*_64";
"*x3_65";
"*_11";
"*_12";
"*_13";
"*a_109";
"*_111";
"*_112";
"*callarg(50)";
"*_113";
"*_114";
"*_115";
"*_116";
"*t2_69";
"*_15";
"*_16";
"*_17";
"*_103";
"*_104";
"*callarg(61)";
"*_105";
"*_106";
"*_107";
"*_108";
"*_18";
"*t1_73";
"*_20";
"*_21";
"*_22";
"*_75";
"*_71";
"*callarg(73)";
"*_67";
"*_58";
"*_99";
"*_100";
"*t2_77";
"*_24";
"*_25";
"*_26";
"*_135";
"*_136";
"*callarg(84)";
"*_137";
"*_138";
"*_139";
"*_140";
"*out_88";
"*_29";
"*out_91";
"*_31";
"*_33";
"*out_94";
"*_35";
"*_36";
"*_37";
"*_38";
"*_127";
"*_128";
"*callarg(101)";
"*_129";
"*_130";
"*_131";
"*_132";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"*in" -> "x1_50";
"Z" -> "Z_39";
"Z_74" -> "Z_39";
"x1_50" -> "x1_40";
"x2_52" -> "x1_40";
"x3_54" -> "x1_40";
"x4_55" -> "x1_40";
"x1_40" -> "x1_40";
"x1_40" -> "x1_40";
"x1_40" -> "x1_40";
"x1_40" -> "x1_40";
"x1_40" -> "x1_40";
"x1_40" -> "x1_40";
"x1_40" -> "x1_40";
"x1_40" -> "x1_40";
"_121" -> "x1_40";
"x1_40" -> "x1_40";
"_123" -> "x1_40";
"x1_40" -> "x1_40";
"_61" -> "x1_40";
"x1_40" -> "x1_40";
"_64" -> "x1_40";
"x1_40" -> "x1_40";
"_113" -> "x1_40";
"x1_40" -> "x1_40";
"_115" -> "x1_40";
"x1_40" -> "x1_40";
"x1_40" -> "x1_40";
"_105" -> "x1_40";
"x1_40" -> "x1_40";
"_107" -> "x1_40";
"x1_40" -> "x1_40";
"x1_40" -> "x1_40";
"x1_40" -> "x1_40";
"_67" -> "x1_40";
"x1_40" -> "x1_40";
"_99" -> "x1_40";
"x1_40" -> "x1_40";
"x1_40" -> "x1_40";
"r_44" -> "r_44";
"r_44" -> "r_44";
"Z_39" -> "Z.131_4";
"*Z.131_4" -> "_5";
"_5" -> "_6";
"x1_40" -> "_7";
"x1_40" -> "a_117";
"x1_40" -> "_119";
"_5" -> "_120";
"_119" -> "callarg(35)";
"_120" -> "callarg(35)";
"_5" -> "_123";
"_11" -> "_12";
"x1_40" -> "_13";
"x1_40" -> "a_109";
"x1_40" -> "_111";
"_11" -> "_112";
"_111" -> "callarg(50)";
"_112" -> "callarg(50)";
"_11" -> "_115";
"_15" -> "_16";
"x1_40" -> "_17";
"x1_40" -> "_103";
"_15" -> "_104";
"_103" -> "callarg(61)";
"_104" -> "callarg(61)";
"_15" -> "_107";
"_20" -> "_21";
"x1_40" -> "_22";
"x1_40" -> "_75";
"_20" -> "_71";
"_75" -> "callarg(73)";
"_71" -> "callarg(73)";
"_20" -> "_99";
"_24" -> "_25";
"x1_40" -> "_26";
"x1_40" -> "_135";
"_24" -> "_136";
"_135" -> "callarg(84)";
"_136" -> "callarg(84)";
"x1_40" -> "_138";
"_24" -> "_139";
"_137" -> "_140";
"_138" -> "_140";
"_139" -> "_140";
"x1_40" -> "_31";
"_29" -> "_31";
"x1_40" -> "_35";
"_33" -> "_35";
"_36" -> "_37";
"x1_40" -> "_38";
"x1_40" -> "_127";
"_36" -> "_128";
"_127" -> "callarg(101)";
"_128" -> "callarg(101)";
"x1_40" -> "_130";
"_36" -> "_131";
"_129" -> "_132";
"_130" -> "_132";
"_131" -> "_132";
"NONLOCAL" -> "*ESCAPED";
"_140" -> "*out";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"in" [label="\N\nx1_50 = *in\lx2_52 = *in + 16\lx3_54 = *in + 32\lx4_55 = *in + 48\lout_88 = in + 16\lout_91 = in + 32\lout_94 = in + 48\l*in = _140\l*in + 16 = _31\l*in + 32 = _35\l*in + 48 = _132\l"];
"x1_50" [label="\N\n_121 = x1_50 + UNKNOWN\l_113 = x1_50 + UNKNOWN\l_105 = x1_50 + UNKNOWN\l_67 = x1_50 + UNKNOWN\l"];
"x2_52";
"Z_39" [label="\N\nZ_74 = Z_39 + 96\l_5 = *Z_39\l_61 = *Z_39 + 16\l_64 = *Z_39 + 32\l_11 = *Z_39 + 48\l_15 = *Z_39 + 64\l_20 = *Z_39 + 80\l_24 = *Z_39 + 96\l_29 = *Z_39 + 112\l_33 = *Z_39 + 128\l_36 = *Z_39 + 144\l"];
"Z_74";
"_5";
"mul.part.0";
"_123";
"callarg(84)" [label="\N\n_137 = callarg(84) + UNKNOWN\l"];
"out_88";
"_29";
"out_91";
"_31";
"_33";
"out_94";
"_35";
"_36";
"callarg(101)" [label="\N\n_129 = callarg(101) + UNKNOWN\l"];
"_129";
"_131";
"_132";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "x2_52";
"STOREDANYTHING" -> "Z_74";
"STOREDANYTHING" -> "x1_50";
"STOREDANYTHING" -> "callarg(84)";
"STOREDANYTHING" -> "x1_50";
"STOREDANYTHING" -> "out_88";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "out_91";
"STOREDANYTHING" -> "_33";
"STOREDANYTHING" -> "out_94";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_129";
"in" -> "Z_39";
"x1_50" -> "callarg(84)";
"x1_50" -> "_31";
"x1_50" -> "_35";
"x1_50" -> "callarg(101)";
"x1_50" -> "_132";
"x2_52" -> "x1_50";
"Z_74" -> "Z_39";
"_5" -> "x1_50";
"_5" -> "_123";
"_123" -> "x1_50";
"_29" -> "_31";
"_33" -> "_35";
"_36" -> "callarg(101)";
"_36" -> "_131";
"_129" -> "_132";
"_131" -> "_132";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = x1_50\l"];
"STOREDANYTHING";
"INTEGER";
"in" [label="\N\nx1_50 = *in\lx2_52 = *in + 16\lSTOREDANYTHING = *in + 32\lSTOREDANYTHING = *in + 48\lout_88 = in + 16\lout_91 = in + 32\lout_94 = in + 48\l*in = x1_50\l*in + 16 = _31\l*in + 32 = _35\l*in + 48 = _132\l"];
"x1_50" [label="\N\nSTOREDANYTHING = x1_50 + UNKNOWN\lSTOREDANYTHING = x1_50 + UNKNOWN\lSTOREDANYTHING = x1_50 + UNKNOWN\lSTOREDANYTHING = x1_50 + UNKNOWN\l"];
"x2_52";
"Z_39" [label="\N\nZ_74 = Z_39 + 96\l_5 = *Z_39\lSTOREDANYTHING = *Z_39 + 16\lSTOREDANYTHING = *Z_39 + 32\lSTOREDANYTHING = *Z_39 + 48\lSTOREDANYTHING = *Z_39 + 64\lSTOREDANYTHING = *Z_39 + 80\lSTOREDANYTHING = *Z_39 + 96\l_29 = *Z_39 + 112\l_33 = *Z_39 + 128\l_36 = *Z_39 + 144\l"];
"Z_74";
"_5";
"mul.part.0";
"_123";
"callarg(84)" [label="\N\nSTOREDANYTHING = callarg(84) + UNKNOWN\l"];
"out_88";
"_29";
"out_91";
"_31";
"_33";
"out_94";
"_35";
"_36";
"callarg(101)" [label="\N\n_129 = callarg(101) + UNKNOWN\l"];
"_129";
"_131";
"_132";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "x2_52";
"STOREDANYTHING" -> "Z_74";
"STOREDANYTHING" -> "x1_50";
"STOREDANYTHING" -> "callarg(84)";
"STOREDANYTHING" -> "x1_50";
"STOREDANYTHING" -> "out_88";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "out_91";
"STOREDANYTHING" -> "_33";
"STOREDANYTHING" -> "out_94";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_129";
"in" -> "Z_39";
"x1_50" -> "ESCAPED";
"x1_50" -> "STOREDANYTHING";
"x1_50" -> "x2_52";
"x1_50" -> "_5";
"x1_50" -> "callarg(84)";
"x1_50" -> "_29";
"x1_50" -> "_31";
"x1_50" -> "_33";
"x1_50" -> "_35";
"x1_50" -> "_36";
"x1_50" -> "callarg(101)";
"x1_50" -> "_132";
"x2_52" -> "x1_50";
"Z_74" -> "Z_39";
"_5" -> "x1_50";
"_5" -> "_123";
"_123" -> "x1_50";
"_29" -> "_31";
"_31" -> "ESCAPED";
"_33" -> "_35";
"_35" -> "ESCAPED";
"_36" -> "callarg(101)";
"_36" -> "_131";
"_129" -> "_132";
"_131" -> "_132";
"_132" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as x1_50
STOREDANYTHING = { ESCAPED NONLOCAL }
INTEGER = { ANYTHING }
in = { NONLOCAL }
out = { NONLOCAL } same as in
Z = { NONLOCAL } same as in
x1_50 = { ESCAPED NONLOCAL }
x2_52 = { ESCAPED NONLOCAL }
x3_54 = { ESCAPED NONLOCAL } same as STOREDANYTHING
x4_55 = { ESCAPED NONLOCAL } same as STOREDANYTHING
Z_39 = { ESCAPED NONLOCAL }
Z_74 = { ESCAPED NONLOCAL }
x1_40 = { ESCAPED NONLOCAL } same as x1_50
x1_78 = { ESCAPED NONLOCAL } same as x1_50
x2_41 = { ESCAPED NONLOCAL } same as x1_50
x2_81 = { ESCAPED NONLOCAL } same as x1_50
x3_42 = { ESCAPED NONLOCAL } same as x1_50
t2_80 = { ESCAPED NONLOCAL } same as x1_50
x4_43 = { ESCAPED NONLOCAL } same as x1_50
x4_79 = { ESCAPED NONLOCAL } same as x1_50
r_44 = { NONLOCAL } same as in
r_83 = { NONLOCAL } same as in
Z.131_4 = { ESCAPED NONLOCAL } same as Z_39
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as _5
_7 = { ESCAPED NONLOCAL } same as x1_50
a_117 = { ESCAPED NONLOCAL } same as x1_50
_119 = { ESCAPED NONLOCAL } same as x1_50
_120 = { ESCAPED NONLOCAL } same as _5
mul.part.0 = { }
callarg(35) = { ESCAPED NONLOCAL } same as x1_50
_121 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_122 = { ESCAPED NONLOCAL } same as x1_50
_123 = { ESCAPED NONLOCAL }
_124 = { ESCAPED NONLOCAL } same as x1_50
_61 = { ESCAPED NONLOCAL } same as STOREDANYTHING
x2_62 = { ESCAPED NONLOCAL } same as x1_50
_64 = { ESCAPED NONLOCAL } same as STOREDANYTHING
x3_65 = { ESCAPED NONLOCAL } same as x1_50
_11 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_12 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_13 = { ESCAPED NONLOCAL } same as x1_50
a_109 = { ESCAPED NONLOCAL } same as x1_50
_111 = { ESCAPED NONLOCAL } same as x1_50
_112 = { ESCAPED NONLOCAL } same as STOREDANYTHING
callarg(50) = { ESCAPED NONLOCAL } same as x1_50
_113 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_114 = { ESCAPED NONLOCAL } same as x1_50
_115 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_116 = { ESCAPED NONLOCAL } same as x1_50
t2_69 = { ESCAPED NONLOCAL } same as x1_50
_15 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_16 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_17 = { ESCAPED NONLOCAL } same as x1_50
_103 = { ESCAPED NONLOCAL } same as x1_50
_104 = { ESCAPED NONLOCAL } same as STOREDANYTHING
callarg(61) = { ESCAPED NONLOCAL } same as x1_50
_105 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_106 = { ESCAPED NONLOCAL } same as x1_50
_107 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_108 = { ESCAPED NONLOCAL } same as x1_50
_18 = { ESCAPED NONLOCAL } same as x1_50
t1_73 = { ESCAPED NONLOCAL } same as x1_50
_20 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_21 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_22 = { ESCAPED NONLOCAL } same as x1_50
_75 = { ESCAPED NONLOCAL } same as x1_50
_71 = { ESCAPED NONLOCAL } same as STOREDANYTHING
callarg(73) = { ESCAPED NONLOCAL } same as x1_50
_67 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_58 = { ESCAPED NONLOCAL } same as x1_50
_99 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_100 = { ESCAPED NONLOCAL } same as x1_50
t2_77 = { ESCAPED NONLOCAL } same as x1_50
_24 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_25 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_26 = { ESCAPED NONLOCAL } same as x1_50
_135 = { ESCAPED NONLOCAL } same as x1_50
_136 = { ESCAPED NONLOCAL } same as STOREDANYTHING
callarg(84) = { ESCAPED NONLOCAL }
_137 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_138 = { ESCAPED NONLOCAL } same as x1_50
_139 = { ESCAPED NONLOCAL } same as STOREDANYTHING
_140 = { ESCAPED NONLOCAL } same as x1_50
out_88 = { ESCAPED NONLOCAL }
_29 = { ESCAPED NONLOCAL }
out_91 = { ESCAPED NONLOCAL }
_31 = { ESCAPED NONLOCAL }
_33 = { ESCAPED NONLOCAL }
out_94 = { ESCAPED NONLOCAL }
_35 = { ESCAPED NONLOCAL }
_36 = { ESCAPED NONLOCAL }
_37 = { ESCAPED NONLOCAL } same as _36
_38 = { ESCAPED NONLOCAL } same as x1_50
_127 = { ESCAPED NONLOCAL } same as x1_50
_128 = { ESCAPED NONLOCAL } same as _36
callarg(101) = { ESCAPED NONLOCAL }
_129 = { ESCAPED NONLOCAL }
_130 = { ESCAPED NONLOCAL } same as x1_50
_131 = { ESCAPED NONLOCAL }
_132 = { ESCAPED NONLOCAL }


Alias information for cipher_idea

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

Z.131_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
Z_39, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
in_47(D), points-to non-local, points-to NULL, points-to vars: { }
Z_56(D), points-to non-local, points-to NULL, points-to vars: { }
Z_74, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
out_87(D), points-to non-local, points-to NULL, points-to vars: { }
out_88, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
out_91, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
out_94, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

cipher_idea (u16 * in, u16 * out, u16 * Z)
{
  u16 D.6403;
  u16 a;
  u16 b;
  u16 D.6400;
  u16 a;
  u16 b;
  u16 D.6397;
  u16 a;
  u16 b;
  u16 D.6394;
  u16 a;
  u16 b;
  u16 D.6391;
  u16 a;
  u16 b;
  u16 D.6388;
  u16 a;
  u16 b;
  int r;
  register u16 t2;
  register u16 t1;
  register u16 x4;
  register u16 x3;
  register u16 x2;
  register u16 x1;
  u16 * Z.131_4;
  short unsigned int _5;
  int _6;
  int _7;
  short unsigned int _11;
  int _12;
  int _13;
  short unsigned int _15;
  int _16;
  int _17;
  short unsigned int _18;
  short unsigned int _20;
  int _21;
  int _22;
  short unsigned int _24;
  int _25;
  int _26;
  short unsigned int _29;
  short unsigned int _31;
  short unsigned int _33;
  short unsigned int _35;
  short unsigned int _36;
  int _37;
  int _38;
  short unsigned int _58;
  short unsigned int _61;
  short unsigned int _64;
  short unsigned int _67;
  int _71;
  int _75;
  short unsigned int _99;
  short unsigned int _100;
  int _103;
  int _104;
  short unsigned int _105;
  short unsigned int _106;
  short unsigned int _107;
  short unsigned int _108;
  int _111;
  int _112;
  short unsigned int _113;
  short unsigned int _114;
  short unsigned int _115;
  short unsigned int _116;
  int _119;
  int _120;
  short unsigned int _121;
  short unsigned int _122;
  short unsigned int _123;
  short unsigned int _124;
  int _127;
  int _128;
  short unsigned int _129;
  short unsigned int _130;
  short unsigned int _131;
  short unsigned int _132;
  int _135;
  int _136;
  short unsigned int _137;
  short unsigned int _138;
  short unsigned int _139;
  short unsigned int _140;

  <bb 2> [0.00%]:
  x1_50 = *in_47(D);
  x2_52 = MEM[(u16 *)in_47(D) + 2B];
  x3_54 = MEM[(u16 *)in_47(D) + 4B];
  x4_55 = MEM[(u16 *)in_47(D) + 6B];

  <bb 3> [100.00%]:
  # Z_39 = PHI <Z_56(D)(2), Z_74(23)>
  # x1_40 = PHI <x1_50(2), x1_78(23)>
  # x2_41 = PHI <x2_52(2), x2_81(23)>
  # x3_42 = PHI <x3_54(2), t2_80(23)>
  # x4_43 = PHI <x4_55(2), x4_79(23)>
  # r_44 = PHI <8(2), r_83(23)>
  Z.131_4 = Z_39;
  _5 = *Z.131_4;
  _6 = (int) _5;
  _7 = (int) x1_40;
  a_117 = x1_40;
  if (x1_40 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 4> [50.00%]:
  if (_5 != 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 5> [25.00%]:
  _119 = (int) x1_40;
  _120 = (int) _5;
  _121 = mul.part.0 (_119, _120);
  goto <bb 8>; [100.00%]

  <bb 6> [25.00%]:
  _122 = 1 - x1_40;
  goto <bb 8>; [100.00%]

  <bb 7> [50.00%]:
  _123 = 1 - _5;

  <bb 8> [100.00%]:
  # _124 = PHI <_121(5), _122(6), _123(7)>
  _61 = MEM[(u16 *)Z.131_4 + 2B];
  x2_62 = x2_41 + _61;
  _64 = MEM[(u16 *)Z.131_4 + 4B];
  x3_65 = x3_42 + _64;
  _11 = MEM[(u16 *)Z.131_4 + 6B];
  _12 = (int) _11;
  _13 = (int) x4_43;
  a_109 = x4_43;
  if (x4_43 != 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 9> [50.00%]:
  if (_11 != 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 10> [25.00%]:
  _111 = (int) x4_43;
  _112 = (int) _11;
  _113 = mul.part.0 (_111, _112);
  goto <bb 13>; [100.00%]

  <bb 11> [25.00%]:
  _114 = 1 - x4_43;
  goto <bb 13>; [100.00%]

  <bb 12> [50.00%]:
  _115 = 1 - _11;

  <bb 13> [100.00%]:
  # _116 = PHI <_113(10), _114(11), _115(12)>
  t2_69 = x3_65 ^ _124;
  _15 = MEM[(u16 *)Z.131_4 + 8B];
  _16 = (int) _15;
  _17 = (int) t2_69;
  if (x3_65 != _124)
    goto <bb 14>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 14> [50.00%]:
  if (_15 != 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 15> [25.00%]:
  _103 = (int) t2_69;
  _104 = (int) _15;
  _105 = mul.part.0 (_103, _104);
  goto <bb 18>; [100.00%]

  <bb 16> [25.00%]:
  _106 = 1 - t2_69;
  goto <bb 18>; [100.00%]

  <bb 17> [50.00%]:
  _107 = 1 - _15;

  <bb 18> [100.00%]:
  # _108 = PHI <_105(15), _106(16), _107(17)>
  _18 = x2_62 ^ _116;
  t1_73 = _18 + _108;
  Z_74 = &MEM[(void *)Z.131_4 + 12B];
  _20 = MEM[(u16 *)Z.131_4 + 10B];
  _21 = (int) _20;
  _22 = (int) t1_73;
  if (t1_73 != 0)
    goto <bb 19>; [50.00%]
  else
    goto <bb 22>; [50.00%]

  <bb 19> [50.00%]:
  if (_20 != 0)
    goto <bb 20>; [50.00%]
  else
    goto <bb 21>; [50.00%]

  <bb 20> [25.00%]:
  _75 = (int) t1_73;
  _71 = (int) _20;
  _67 = mul.part.0 (_75, _71);
  goto <bb 23>; [100.00%]

  <bb 21> [25.00%]:
  _58 = 1 - t1_73;
  goto <bb 23>; [100.00%]

  <bb 22> [50.00%]:
  _99 = 1 - _20;

  <bb 23> [100.00%]:
  # _100 = PHI <_67(20), _58(21), _99(22)>
  t2_77 = _100 + _108;
  x1_78 = _100 ^ _124;
  x4_79 = t2_77 ^ _116;
  t2_80 = x2_62 ^ t2_77;
  x2_81 = x3_65 ^ _100;
  r_83 = r_44 + -1;
  if (r_83 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 24> [100.00%]:
  _24 = MEM[(u16 *)Z.131_4 + 12B];
  _25 = (int) _24;
  _26 = (int) x1_78;
  if (_100 != _124)
    goto <bb 25>; [50.00%]
  else
    goto <bb 28>; [50.00%]

  <bb 25> [50.00%]:
  if (_24 != 0)
    goto <bb 26>; [50.00%]
  else
    goto <bb 27>; [50.00%]

  <bb 26> [25.00%]:
  _135 = (int) x1_78;
  _136 = (int) _24;
  _137 = mul.part.0 (_135, _136);
  goto <bb 29>; [100.00%]

  <bb 27> [25.00%]:
  _138 = 1 - x1_78;
  goto <bb 29>; [100.00%]

  <bb 28> [50.00%]:
  _139 = 1 - _24;

  <bb 29> [100.00%]:
  # _140 = PHI <_137(26), _138(27), _139(28)>
  out_88 = out_87(D) + 2;
  *out_87(D) = _140;
  _29 = MEM[(u16 *)Z.131_4 + 14B];
  out_91 = &MEM[(void *)out_87(D) + 4B];
  _31 = _29 + t2_80;
  MEM[(u16 *)out_87(D) + 2B] = _31;
  _33 = MEM[(u16 *)Z.131_4 + 16B];
  out_94 = &MEM[(void *)out_87(D) + 6B];
  _35 = _33 + x2_81;
  MEM[(u16 *)out_87(D) + 4B] = _35;
  _36 = MEM[(u16 *)Z.131_4 + 18B];
  _37 = (int) _36;
  _38 = (int) x4_79;
  if (t2_77 != _116)
    goto <bb 30>; [50.00%]
  else
    goto <bb 33>; [50.00%]

  <bb 30> [50.00%]:
  if (_36 != 0)
    goto <bb 31>; [50.00%]
  else
    goto <bb 32>; [50.00%]

  <bb 31> [25.00%]:
  _127 = (int) x4_79;
  _128 = (int) _36;
  _129 = mul.part.0 (_127, _128);
  goto <bb 34>; [100.00%]

  <bb 32> [25.00%]:
  _130 = 1 - x4_79;
  goto <bb 34>; [100.00%]

  <bb 33> [50.00%]:
  _131 = 1 - _36;

  <bb 34> [100.00%]:
  # _132 = PHI <_129(31), _130(32), _131(33)>
  MEM[(u16 *)out_87(D) + 6B] = _132;
  return;

}



;; Function SetCompBit (SetCompBit, funcdef_no=93, decl_uid=4675, cgraph_uid=93, symbol_order=118)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
comparray = &NONLOCAL
bitoffset = &NONLOCAL
bitchar = &NONLOCAL
byteoffset_25 = bitoffset
byteoffset_25 = &NONLOCAL
bitoffset.165_1 = bitoffset
bitnumb_26 = bitoffset.165_1 + UNKNOWN
_2 = byteoffset_25
_3 = comparray + UNKNOWN
_4 = *_3
_5 = _4
_6 = &NONLOCAL
_6 = bitnumb_26
_7 = _6
_8 = _5
_8 = _7
_9 = byteoffset_25
_10 = comparray + UNKNOWN
_11 = _8
*_10 = _11
_12 = byteoffset_25
_13 = comparray + UNKNOWN
_14 = *_13
_15 = _14
_16 = &NONLOCAL
_16 = bitnumb_26
_17 = _16
_18 = _17
_19 = _15
_19 = _18
_20 = byteoffset_25
_21 = comparray + UNKNOWN
_22 = _19
*_21 = _22

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"comparray"[label="comparray = { 5 }"];
"bitoffset"[label="bitoffset = { 5 }"];
"bitchar"[label="bitchar = { 5 }"];
"byteoffset_25"[label="byteoffset_25 = { 5 }"];
"bitoffset.165_1";
"bitnumb_26";
"_2";
"_3";
"_4";
"_5";
"_6"[label="_6 = { 5 }"];
"_7";
"_8";
"_9";
"_10";
"_11";
"_12";
"_13";
"_14";
"_15";
"_16"[label="_16 = { 5 }"];
"_17";
"_18";
"_19";
"_20";
"_21";
"_22";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*comparray";
"*bitoffset";
"*bitchar";
"*byteoffset_25";
"*bitoffset.165_1";
"*bitnumb_26";
"*_2";
"*_3";
"*_4";
"*_5";
"*_6";
"*_7";
"*_8";
"*_9";
"*_10";
"*_11";
"*_12";
"*_13";
"*_14";
"*_15";
"*_16";
"*_17";
"*_18";
"*_19";
"*_20";
"*_21";
"*_22";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"bitoffset" -> "byteoffset_25";
"bitoffset" -> "bitoffset.165_1";
"byteoffset_25" -> "_2";
"*_3" -> "_4";
"_4" -> "_5";
"bitnumb_26" -> "_6";
"_6" -> "_7";
"_5" -> "_8";
"_7" -> "_8";
"byteoffset_25" -> "_9";
"_8" -> "_11";
"byteoffset_25" -> "_12";
"*_13" -> "_14";
"_14" -> "_15";
"bitnumb_26" -> "_16";
"_16" -> "_17";
"_17" -> "_18";
"_15" -> "_19";
"_18" -> "_19";
"byteoffset_25" -> "_20";
"_19" -> "_22";
"NONLOCAL" -> "*ESCAPED";
"_11" -> "*_10";
"_22" -> "*_21";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"comparray" [label="\N\nbitnumb_26 = comparray + UNKNOWN\l_3 = comparray + UNKNOWN\l_10 = comparray + UNKNOWN\l_13 = comparray + UNKNOWN\l_21 = comparray + UNKNOWN\l"];
"bitnumb_26";
"_3" [label="\N\n_4 = *_3\l"];
"_4";
"_6";
"_8";
"_10" [label="\N\n*_10 = _8\l"];
"_13" [label="\N\n_14 = *_13\l"];
"_14";
"_19";
"_21" [label="\N\n*_21 = _19\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "bitnumb_26";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_10";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_21";
"bitnumb_26" -> "_6";
"_4" -> "_8";
"_6" -> "_8";
"_6" -> "_19";
"_14" -> "_19";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"comparray" [label="\N\nbitnumb_26 = comparray + UNKNOWN\l_3 = comparray + UNKNOWN\l_10 = comparray + UNKNOWN\l_13 = comparray + UNKNOWN\l_21 = comparray + UNKNOWN\l"];
"bitnumb_26";
"_3" [label="\N\n_4 = *_3\l"];
"_4";
"_6";
"_8";
"_10" [label="\N\n*_10 = _8\l"];
"_13" [label="\N\n_14 = *_13\l"];
"_14";
"_19";
"_21" [label="\N\n*_21 = _19\l"];

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "bitnumb_26";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_10";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_21";
"bitnumb_26" -> "_6";
"_4" -> "_8";
"_6" -> "_8";
"_6" -> "_19";
"_8" -> "ESCAPED";
"_14" -> "_19";
"_19" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
comparray = { NONLOCAL }
bitoffset = { NONLOCAL } same as comparray
bitchar = { NONLOCAL } same as comparray
byteoffset_25 = { NONLOCAL } same as comparray
bitoffset.165_1 = { NONLOCAL } same as comparray
bitnumb_26 = { NONLOCAL }
_2 = { NONLOCAL } same as comparray
_3 = { NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _4
_6 = { NONLOCAL }
_7 = { NONLOCAL } same as _6
_8 = { ESCAPED NONLOCAL }
_9 = { NONLOCAL } same as comparray
_10 = { NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as _8
_12 = { NONLOCAL } same as comparray
_13 = { NONLOCAL }
_14 = { ESCAPED NONLOCAL }
_15 = { ESCAPED NONLOCAL } same as _14
_16 = { NONLOCAL } same as _6
_17 = { NONLOCAL } same as _6
_18 = { NONLOCAL } same as _6
_19 = { ESCAPED NONLOCAL }
_20 = { NONLOCAL } same as comparray
_21 = { NONLOCAL }
_22 = { ESCAPED NONLOCAL } same as _19


Alias information for SetCompBit

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to NULL, points-to vars: { }
comparray_28(D), points-to non-local, points-to NULL, points-to vars: { }

SetCompBit (u8 * comparray, u32 bitoffset, char bitchar)
{
  int bitnumb;
  u32 byteoffset;
  int bitoffset.165_1;
  sizetype _2;
  u8 * _3;
  unsigned char _4;
  signed char _5;
  int _6;
  signed char _7;
  signed char _8;
  sizetype _9;
  u8 * _10;
  unsigned char _11;
  sizetype _12;
  u8 * _13;
  unsigned char _14;
  signed char _15;
  int _16;
  signed char _17;
  signed char _18;
  signed char _19;
  sizetype _20;
  u8 * _21;
  unsigned char _22;

  <bb 2> [0.00%]:
  byteoffset_25 = bitoffset_24(D) >> 3;
  bitoffset.165_1 = (int) bitoffset_24(D);
  bitnumb_26 = bitoffset.165_1 & 7;
  if (bitchar_27(D) == 49)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _2 = (sizetype) byteoffset_25;
  _3 = comparray_28(D) + _2;
  _4 = *_3;
  _5 = (signed char) _4;
  _6 = 1 << bitnumb_26;
  _7 = (signed char) _6;
  _8 = _5 | _7;
  _9 = (sizetype) byteoffset_25;
  _10 = comparray_28(D) + _9;
  _11 = (unsigned char) _8;
  *_10 = _11;
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _12 = (sizetype) byteoffset_25;
  _13 = comparray_28(D) + _12;
  _14 = *_13;
  _15 = (signed char) _14;
  _16 = 1 << bitnumb_26;
  _17 = (signed char) _16;
  _18 = ~_17;
  _19 = _15 & _18;
  _20 = (sizetype) byteoffset_25;
  _21 = comparray_28(D) + _20;
  _22 = (unsigned char) _19;
  *_21 = _22;

  <bb 5> [0.00%]:
  return;

}



;; Function GetCompBit (GetCompBit, funcdef_no=94, decl_uid=4678, cgraph_uid=94, symbol_order=119)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
comparray = &NONLOCAL
bitoffset = &NONLOCAL
byteoffset_8 = bitoffset
byteoffset_8 = &NONLOCAL
bitoffset.166_1 = bitoffset
bitnumb_9 = bitoffset.166_1 + UNKNOWN
_2 = &NONLOCAL
_2 = bitnumb_9
_3 = byteoffset_8
_4 = comparray + UNKNOWN
_5 = *_4
_6 = _5
_12 = _2
_12 = _6
ESCAPED = _12

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"comparray"[label="comparray = { 5 }"];
"bitoffset"[label="bitoffset = { 5 }"];
"byteoffset_8"[label="byteoffset_8 = { 5 }"];
"bitoffset.166_1";
"bitnumb_9";
"_2"[label="_2 = { 5 }"];
"_3";
"_4";
"_5";
"_6";
"_12";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*comparray";
"*bitoffset";
"*byteoffset_8";
"*bitoffset.166_1";
"*bitnumb_9";
"*_2";
"*_3";
"*_4";
"*_5";
"*_6";
"*_12";

  // Edges in the constraint graph:
"_12" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"bitoffset" -> "byteoffset_8";
"bitoffset" -> "bitoffset.166_1";
"bitnumb_9" -> "_2";
"byteoffset_8" -> "_3";
"*_4" -> "_5";
"_5" -> "_6";
"_2" -> "_12";
"_6" -> "_12";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"comparray" [label="\N\nbitnumb_9 = comparray + UNKNOWN\l_4 = comparray + UNKNOWN\l"];
"bitnumb_9";
"_2";
"_4" [label="\N\n_5 = *_4\l"];
"_5";
"_12";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "bitnumb_9";
"STOREDANYTHING" -> "_4";
"bitnumb_9" -> "_2";
"_2" -> "_12";
"_5" -> "_12";
"_12" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"comparray" [label="\N\nbitnumb_9 = comparray + UNKNOWN\l_4 = comparray + UNKNOWN\l"];
"bitnumb_9";
"_2";
"_4" [label="\N\n_5 = *_4\l"];
"_5";
"_12";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "bitnumb_9";
"STOREDANYTHING" -> "_4";
"bitnumb_9" -> "_2";
"_2" -> "_12";
"_5" -> "_12";
"_12" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
comparray = { NONLOCAL }
bitoffset = { NONLOCAL } same as comparray
byteoffset_8 = { NONLOCAL } same as comparray
bitoffset.166_1 = { NONLOCAL } same as comparray
bitnumb_9 = { NONLOCAL }
_2 = { NONLOCAL }
_3 = { NONLOCAL } same as comparray
_4 = { NONLOCAL }
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as _5
_12 = { ESCAPED NONLOCAL }


Alias information for GetCompBit

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_4, points-to non-local, points-to NULL, points-to vars: { }
comparray_10(D), points-to non-local, points-to NULL, points-to vars: { }

GetCompBit (u8 * comparray, u32 bitoffset)
{
  int bitnumb;
  u32 byteoffset;
  int bitoffset.166_1;
  int _2;
  sizetype _3;
  u8 * _4;
  unsigned char _5;
  int _6;
  int _12;

  <bb 2> [0.00%]:
  byteoffset_8 = bitoffset_7(D) >> 3;
  bitoffset.166_1 = (int) bitoffset_7(D);
  bitnumb_9 = bitoffset.166_1 & 7;
  _2 = 1 << bitnumb_9;
  _3 = (sizetype) byteoffset_8;
  _4 = comparray_10(D) + _3;
  _5 = *_4;
  _6 = (int) _5;
  _12 = _2 & _6;
  return _12;

}



;; Function do_out_error (do_out_error, funcdef_no=100, decl_uid=4712, cgraph_uid=100, symbol_order=125)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
patt = &NONLOCAL
out_pats = NONLOCAL
_1 = out_pats
out_out = NONLOCAL
_2 = out_out
_3 = _1
_3 = _2
out_error = NONLOCAL
out_error = _3
ESCAPED = _3
error_20 = out_error
sum_23 = sum_10
sum_23 = error_20
_4 = error_20
tot_error_24 = error_20
sum_21 = sum_10
sum_21 = error_20
tot_error_7 = tot_error_24
tot_error_7 = tot_error_8
tot_error_7 = error_20
tot_error_7 = tot_error_8
sum_9 = sum_23
sum_9 = sum_21
sum_9 = sum_21
sum_9 = sum_23
neurode_25 = neurode_6
neurode_25 = &NONLOCAL
neurode_6 = &NULL
neurode_6 = neurode_25
tot_error_8 = &NONLOCAL
tot_error_8 = tot_error_7
sum_10 = &NONLOCAL
sum_10 = sum_9
_5 = sum_10
_5 = &NONLOCAL
avg_out_error = NONLOCAL
avg_out_error = _5
ESCAPED = _5
tot_out_error = NONLOCAL
tot_out_error = tot_error_8
ESCAPED = tot_error_8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"patt"[label="patt = { 5 }"];
"_1";
"out_pats";
"_2";
"out_out";
"_3";
"out_error";
"error_20";
"sum_10"[label="sum_10 = { 5 }"];
"_4";
"tot_error_24";
"tot_error_8"[label="tot_error_8 = { 5 }"];
"neurode_25"[label="neurode_25 = { 1 5 }"];
"_5"[label="_5 = { 5 }"];
"avg_out_error";
"tot_out_error";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*patt";
"*_4";
"*neurode_25";
"*neurode_6";
"*avg_out_error";
"*tot_out_error";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_3" -> "ESCAPED";
"tot_error_8" -> "ESCAPED";
"_5" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"out_pats" -> "_1";
"NONLOCAL" -> "out_pats";
"out_out" -> "_2";
"NONLOCAL" -> "out_out";
"_1" -> "_3";
"_2" -> "_3";
"NONLOCAL" -> "out_error";
"_3" -> "out_error";
"out_error" -> "error_20";
"error_20" -> "sum_10";
"sum_10" -> "sum_10";
"sum_10" -> "sum_10";
"sum_10" -> "sum_10";
"sum_10" -> "sum_10";
"error_20" -> "_4";
"error_20" -> "tot_error_24";
"error_20" -> "tot_error_8";
"tot_error_24" -> "tot_error_8";
"tot_error_8" -> "tot_error_8";
"tot_error_8" -> "tot_error_8";
"neurode_25" -> "neurode_25";
"neurode_25" -> "neurode_25";
"sum_10" -> "_5";
"NONLOCAL" -> "avg_out_error";
"_5" -> "avg_out_error";
"NONLOCAL" -> "tot_out_error";
"tot_error_8" -> "tot_out_error";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"patt";
"out_pats";
"neurode_25";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"out_pats" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = out_pats\l"];
"STOREDANYTHING";
"INTEGER";
"patt";
"out_pats";
"neurode_25";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"out_pats" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as out_pats
STOREDANYTHING = { }
INTEGER = { ANYTHING }
patt = { NONLOCAL }
_1 = { ESCAPED NONLOCAL } same as out_pats
out_pats = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as out_pats
out_out = { ESCAPED NONLOCAL } same as out_pats
_3 = { ESCAPED NONLOCAL } same as out_pats
out_error = { ESCAPED NONLOCAL } same as out_pats
error_20 = { ESCAPED NONLOCAL } same as out_pats
sum_23 = { ESCAPED NONLOCAL } same as out_pats
sum_10 = { ESCAPED NONLOCAL } same as out_pats
_4 = { ESCAPED NONLOCAL } same as out_pats
tot_error_24 = { ESCAPED NONLOCAL } same as out_pats
sum_21 = { ESCAPED NONLOCAL } same as out_pats
tot_error_7 = { ESCAPED NONLOCAL } same as out_pats
tot_error_8 = { ESCAPED NONLOCAL } same as out_pats
sum_9 = { ESCAPED NONLOCAL } same as out_pats
neurode_25 = { NULL NONLOCAL }
neurode_6 = { NULL NONLOCAL } same as neurode_25
_5 = { ESCAPED NONLOCAL } same as out_pats
avg_out_error = { ESCAPED NONLOCAL } same as out_pats
tot_out_error = { ESCAPED NONLOCAL } same as out_pats


Alias information for do_out_error

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


do_out_error (int patt)
{
  double sum;
  double tot_error;
  double error;
  int neurode;
  double _1;
  double _2;
  double _3;
  double _4;
  double _5;

  <bb 2> [0.00%]:
  goto <bb 9>; [0.00%]

  <bb 3> [0.00%]:
  _1 = out_pats[patt_16(D)][neurode_6];
  _2 = out_out[neurode_6];
  _3 = _1 - _2;
  out_error[neurode_6] = _3;
  error_20 = out_error[neurode_6];
  if (error_20 < 0.0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  sum_23 = sum_10 - error_20;
  _4 = -error_20;
  if (_4 > tot_error_8)
    goto <bb 5>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 5> [0.00%]:
  tot_error_24 = -error_20;
  goto <bb 8>; [0.00%]

  <bb 6> [0.00%]:
  sum_21 = sum_10 + error_20;
  if (tot_error_8 < error_20)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:

  <bb 8> [0.00%]:
  # tot_error_7 = PHI <tot_error_24(5), tot_error_8(6), error_20(7), tot_error_8(4)>
  # sum_9 = PHI <sum_23(5), sum_21(6), sum_21(7), sum_23(4)>
  neurode_25 = neurode_6 + 1;

  <bb 9> [0.00%]:
  # neurode_6 = PHI <0(2), neurode_25(8)>
  # tot_error_8 = PHI <0.0(2), tot_error_7(8)>
  # sum_10 = PHI <0.0(2), sum_9(8)>
  if (neurode_6 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  _5 = sum_10 * 1.25e-1;
  avg_out_error[patt_16(D)] = _5;
  tot_out_error[patt_16(D)] = tot_error_8;
  return;

}



;; Function worst_pass_error (worst_pass_error, funcdef_no=101, decl_uid=4713, cgraph_uid=101, symbol_order=126)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
tot_out_error = NONLOCAL
_1 = tot_out_error
error_17 = tot_out_error
error_7 = error_8
error_7 = error_17
avg_out_error = NONLOCAL
_2 = avg_out_error
sum_18 = _2
sum_18 = sum_9
i_19 = i_10
i_19 = &NONLOCAL
error_8 = &NONLOCAL
error_8 = error_7
sum_9 = &NONLOCAL
sum_9 = sum_18
i_10 = &NULL
i_10 = i_19
numpats = NONLOCAL
numpats.193_3 = numpats
worst_error = NONLOCAL
worst_error = error_8
ESCAPED = error_8
numpats.194_4 = numpats
_5 = numpats.194_4
_6 = sum_9
_6 = _5
average_error = NONLOCAL
average_error = _6
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_1";
"tot_out_error";
"error_17";
"error_8"[label="error_8 = { 5 }"];
"_2";
"avg_out_error";
"sum_9"[label="sum_9 = { 5 }"];
"i_19"[label="i_19 = { 1 5 }"];
"numpats.193_3";
"numpats";
"worst_error";
"numpats.194_4";
"_5";
"_6";
"average_error";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*_1";
"*i_19";
"*i_10";
"*numpats.193_3";
"*worst_error";
"*average_error";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"error_8" -> "ESCAPED";
"_6" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"tot_out_error" -> "_1";
"NONLOCAL" -> "tot_out_error";
"tot_out_error" -> "error_17";
"error_17" -> "error_8";
"error_8" -> "error_8";
"error_8" -> "error_8";
"avg_out_error" -> "_2";
"NONLOCAL" -> "avg_out_error";
"_2" -> "sum_9";
"sum_9" -> "sum_9";
"sum_9" -> "sum_9";
"i_19" -> "i_19";
"i_19" -> "i_19";
"numpats" -> "numpats.193_3";
"NONLOCAL" -> "numpats";
"NONLOCAL" -> "worst_error";
"error_8" -> "worst_error";
"numpats" -> "numpats.194_4";
"numpats.194_4" -> "_5";
"sum_9" -> "_6";
"_5" -> "_6";
"NONLOCAL" -> "average_error";
"_6" -> "average_error";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"tot_out_error";
"i_19";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"tot_out_error" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = tot_out_error\l"];
"STOREDANYTHING";
"INTEGER";
"tot_out_error";
"i_19";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"tot_out_error" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as tot_out_error
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_1 = { ESCAPED NONLOCAL } same as tot_out_error
tot_out_error = { ESCAPED NONLOCAL }
error_17 = { ESCAPED NONLOCAL } same as tot_out_error
error_7 = { ESCAPED NONLOCAL } same as tot_out_error
error_8 = { ESCAPED NONLOCAL } same as tot_out_error
_2 = { ESCAPED NONLOCAL } same as tot_out_error
avg_out_error = { ESCAPED NONLOCAL } same as tot_out_error
sum_18 = { ESCAPED NONLOCAL } same as tot_out_error
sum_9 = { ESCAPED NONLOCAL } same as tot_out_error
i_19 = { NULL NONLOCAL }
i_10 = { NULL NONLOCAL } same as i_19
numpats.193_3 = { ESCAPED NONLOCAL } same as tot_out_error
numpats = { ESCAPED NONLOCAL } same as tot_out_error
worst_error = { ESCAPED NONLOCAL } same as tot_out_error
numpats.194_4 = { ESCAPED NONLOCAL } same as tot_out_error
_5 = { ESCAPED NONLOCAL } same as tot_out_error
_6 = { ESCAPED NONLOCAL } same as tot_out_error
average_error = { ESCAPED NONLOCAL } same as tot_out_error


Alias information for worst_pass_error

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


worst_pass_error ()
{
  int i;
  double sum;
  double error;
  double _1;
  double _2;
  int numpats.193_3;
  int numpats.194_4;
  double _5;
  double _6;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = tot_out_error[i_10];
  if (_1 > error_8)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  error_17 = tot_out_error[i_10];

  <bb 5> [0.00%]:
  # error_7 = PHI <error_8(3), error_17(4)>
  _2 = avg_out_error[i_10];
  sum_18 = _2 + sum_9;
  i_19 = i_10 + 1;

  <bb 6> [0.00%]:
  # error_8 = PHI <0.0(2), error_7(5)>
  # sum_9 = PHI <0.0(2), sum_18(5)>
  # i_10 = PHI <0(2), i_19(5)>
  numpats.193_3 = numpats;
  if (numpats.193_3 > i_10)
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  worst_error = error_8;
  numpats.194_4 = numpats;
  _5 = (double) numpats.194_4;
  _6 = sum_9 / _5;
  average_error = _6;
  return;

}



;; Function do_mid_error (do_mid_error, funcdef_no=102, decl_uid=4714, cgraph_uid=102, symbol_order=127)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
out_wts = NONLOCAL
_1 = out_wts
out_error = NONLOCAL
_2 = out_error
_3 = _1
_3 = _2
sum_19 = _3
sum_19 = sum_9
i_20 = i_11
i_20 = &NONLOCAL
sum_9 = &NONLOCAL
sum_9 = sum_19
i_11 = &NULL
i_11 = i_20
mid_out = NONLOCAL
_4 = mid_out
_5 = mid_out
_6 = &NONLOCAL
_6 = _5
_7 = _4
_7 = _6
_8 = _7
_8 = sum_9
mid_error = NONLOCAL
mid_error = _8
ESCAPED = _8
neurode_18 = neurode_10
neurode_18 = &NONLOCAL
neurode_10 = &NULL
neurode_10 = neurode_18

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_1";
"out_wts";
"_2";
"out_error";
"_3";
"sum_9"[label="sum_9 = { 5 }"];
"i_20"[label="i_20 = { 1 5 }"];
"_4";
"mid_out";
"_5";
"_6"[label="_6 = { 5 }"];
"_7";
"_8";
"mid_error";
"neurode_18"[label="neurode_18 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*i_20";
"*i_11";
"*mid_error";
"*neurode_18";
"*neurode_10";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_8" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"out_wts" -> "_1";
"NONLOCAL" -> "out_wts";
"out_error" -> "_2";
"NONLOCAL" -> "out_error";
"_1" -> "_3";
"_2" -> "_3";
"_3" -> "sum_9";
"sum_9" -> "sum_9";
"sum_9" -> "sum_9";
"i_20" -> "i_20";
"i_20" -> "i_20";
"mid_out" -> "_4";
"NONLOCAL" -> "mid_out";
"mid_out" -> "_5";
"_5" -> "_6";
"_4" -> "_7";
"_6" -> "_7";
"sum_9" -> "_8";
"_7" -> "_8";
"NONLOCAL" -> "mid_error";
"_8" -> "mid_error";
"neurode_18" -> "neurode_18";
"neurode_18" -> "neurode_18";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"out_wts";
"i_20";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"out_wts" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = out_wts\l"];
"STOREDANYTHING";
"INTEGER";
"out_wts";
"i_20";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"out_wts" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as out_wts
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_1 = { ESCAPED NONLOCAL } same as out_wts
out_wts = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as out_wts
out_error = { ESCAPED NONLOCAL } same as out_wts
_3 = { ESCAPED NONLOCAL } same as out_wts
sum_19 = { ESCAPED NONLOCAL } same as out_wts
sum_9 = { ESCAPED NONLOCAL } same as out_wts
i_20 = { NULL NONLOCAL }
i_11 = { NULL NONLOCAL } same as i_20
_4 = { ESCAPED NONLOCAL } same as out_wts
mid_out = { ESCAPED NONLOCAL } same as out_wts
_5 = { ESCAPED NONLOCAL } same as out_wts
_6 = { ESCAPED NONLOCAL } same as out_wts
_7 = { ESCAPED NONLOCAL } same as out_wts
_8 = { ESCAPED NONLOCAL } same as out_wts
mid_error = { ESCAPED NONLOCAL } same as out_wts
neurode_18 = { NULL NONLOCAL } same as i_20
neurode_10 = { NULL NONLOCAL } same as i_20


Alias information for do_mid_error

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


do_mid_error ()
{
  int i;
  int neurode;
  double sum;
  double _1;
  double _2;
  double _3;
  double _4;
  double _5;
  double _6;
  double _7;
  double _8;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = out_wts[i_11][neurode_10];
  _2 = out_error[i_11];
  _3 = _1 * _2;
  sum_19 = _3 + sum_9;
  i_20 = i_11 + 1;

  <bb 4> [0.00%]:
  # sum_9 = PHI <0.0(6), sum_19(3)>
  # i_11 = PHI <0(6), i_20(3)>
  if (i_11 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  _4 = mid_out[neurode_10];
  _5 = mid_out[neurode_10];
  _6 = 1.0e+0 - _5;
  _7 = _4 * _6;
  _8 = _7 * sum_9;
  mid_error[neurode_10] = _8;
  neurode_18 = neurode_10 + 1;

  <bb 6> [0.00%]:
  # neurode_10 = PHI <0(2), neurode_18(5)>
  if (neurode_10 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function adjust_out_wts (adjust_out_wts, funcdef_no=103, decl_uid=4715, cgraph_uid=103, symbol_order=128)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
out_error = NONLOCAL
_1 = out_error
_2 = _1
_2 = &NONLOCAL
mid_out = NONLOCAL
_3 = mid_out
delta_20 = _2
delta_20 = _3
out_wt_change = NONLOCAL
_4 = out_wt_change
_5 = _4
_5 = &NONLOCAL
delta_21 = _5
delta_21 = delta_20
out_wts = NONLOCAL
_6 = out_wts
_7 = _6
_7 = delta_21
out_wts = _7
ESCAPED = _7
out_wt_cum_change = NONLOCAL
_8 = out_wt_cum_change
_9 = _8
_9 = delta_21
out_wt_cum_change = _9
ESCAPED = _9
weight_24 = weight_10
weight_24 = &NONLOCAL
weight_10 = &NULL
weight_10 = weight_24
neurode_19 = neurode_11
neurode_19 = &NONLOCAL
neurode_11 = &NULL
neurode_11 = neurode_19

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_1";
"out_error";
"_2"[label="_2 = { 5 }"];
"_3";
"mid_out";
"delta_20";
"_4";
"out_wt_change";
"_5"[label="_5 = { 5 }"];
"delta_21";
"_7";
"_9";
"weight_24"[label="weight_24 = { 1 5 }"];
"neurode_19"[label="neurode_19 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*weight_24";
"*weight_10";
"*neurode_19";
"*neurode_11";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_7" -> "ESCAPED";
"_9" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"out_error" -> "_1";
"NONLOCAL" -> "out_error";
"_1" -> "_2";
"mid_out" -> "_3";
"NONLOCAL" -> "mid_out";
"_2" -> "delta_20";
"_3" -> "delta_20";
"out_wt_change" -> "_4";
"NONLOCAL" -> "out_wt_change";
"_4" -> "_5";
"delta_20" -> "delta_21";
"_5" -> "delta_21";
"NONLOCAL" -> "_7";
"delta_21" -> "_7";
"_7" -> "_7";
"_7" -> "_7";
"_7" -> "_7";
"NONLOCAL" -> "_9";
"delta_21" -> "_9";
"_9" -> "_9";
"_9" -> "_9";
"_9" -> "_9";
"weight_24" -> "weight_24";
"weight_24" -> "weight_24";
"neurode_19" -> "neurode_19";
"neurode_19" -> "neurode_19";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"out_error";
"weight_24";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"out_error" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = out_error\l"];
"STOREDANYTHING";
"INTEGER";
"out_error";
"weight_24";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"out_error" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as out_error
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_1 = { ESCAPED NONLOCAL } same as out_error
out_error = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as out_error
_3 = { ESCAPED NONLOCAL } same as out_error
mid_out = { ESCAPED NONLOCAL } same as out_error
delta_20 = { ESCAPED NONLOCAL } same as out_error
_4 = { ESCAPED NONLOCAL } same as out_error
out_wt_change = { ESCAPED NONLOCAL } same as out_error
_5 = { ESCAPED NONLOCAL } same as out_error
delta_21 = { ESCAPED NONLOCAL } same as out_error
_6 = { ESCAPED NONLOCAL } same as out_error
out_wts = { ESCAPED NONLOCAL } same as out_error
_7 = { ESCAPED NONLOCAL } same as out_error
_8 = { ESCAPED NONLOCAL } same as out_error
out_wt_cum_change = { ESCAPED NONLOCAL } same as out_error
_9 = { ESCAPED NONLOCAL } same as out_error
weight_24 = { NULL NONLOCAL }
weight_10 = { NULL NONLOCAL } same as weight_24
neurode_19 = { NULL NONLOCAL } same as weight_24
neurode_11 = { NULL NONLOCAL } same as weight_24


Alias information for adjust_out_wts

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


adjust_out_wts ()
{
  double alph;
  double delta;
  double learn;
  int neurode;
  int weight;
  double _1;
  double _2;
  double _3;
  double _4;
  double _5;
  double _6;
  double _7;
  double _8;
  double _9;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = out_error[neurode_11];
  _2 = _1 * 8.99999999999999966693309261245303787291049957275390625e-2;
  _3 = mid_out[weight_10];
  delta_20 = _2 * _3;
  _4 = out_wt_change[neurode_11][weight_10];
  _5 = _4 * 8.99999999999999966693309261245303787291049957275390625e-2;
  delta_21 = _5 + delta_20;
  _6 = out_wts[neurode_11][weight_10];
  _7 = _6 + delta_21;
  out_wts[neurode_11][weight_10] = _7;
  _8 = out_wt_cum_change[neurode_11][weight_10];
  _9 = _8 + delta_21;
  out_wt_cum_change[neurode_11][weight_10] = _9;
  weight_24 = weight_10 + 1;

  <bb 4> [0.00%]:
  # weight_10 = PHI <0(6), weight_24(3)>
  if (weight_10 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  neurode_19 = neurode_11 + 1;

  <bb 6> [0.00%]:
  # neurode_11 = PHI <0(2), neurode_19(5)>
  if (neurode_11 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function adjust_mid_wts (adjust_mid_wts, funcdef_no=104, decl_uid=4716, cgraph_uid=104, symbol_order=129)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
patt = &NONLOCAL
mid_error = NONLOCAL
_1 = mid_error
_2 = _1
_2 = &NONLOCAL
in_pats = NONLOCAL
_3 = in_pats
delta_21 = _2
delta_21 = _3
mid_wt_change = NONLOCAL
_4 = mid_wt_change
_5 = _4
_5 = &NONLOCAL
delta_22 = _5
delta_22 = delta_21
mid_wts = NONLOCAL
_6 = mid_wts
_7 = _6
_7 = delta_22
mid_wts = _7
ESCAPED = _7
mid_wt_cum_change = NONLOCAL
_8 = mid_wt_cum_change
_9 = _8
_9 = delta_22
mid_wt_cum_change = _9
ESCAPED = _9
weight_25 = weight_10
weight_25 = &NONLOCAL
weight_10 = &NULL
weight_10 = weight_25
neurode_19 = neurode_11
neurode_19 = &NONLOCAL
neurode_11 = &NULL
neurode_11 = neurode_19

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"patt"[label="patt = { 5 }"];
"_1";
"mid_error";
"_2"[label="_2 = { 5 }"];
"_3";
"in_pats";
"delta_21";
"_4";
"mid_wt_change";
"_5"[label="_5 = { 5 }"];
"delta_22";
"_7";
"_9";
"weight_25"[label="weight_25 = { 1 5 }"];
"neurode_19"[label="neurode_19 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*patt";
"*weight_25";
"*weight_10";
"*neurode_19";
"*neurode_11";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_7" -> "ESCAPED";
"_9" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"mid_error" -> "_1";
"NONLOCAL" -> "mid_error";
"_1" -> "_2";
"in_pats" -> "_3";
"NONLOCAL" -> "in_pats";
"_2" -> "delta_21";
"_3" -> "delta_21";
"mid_wt_change" -> "_4";
"NONLOCAL" -> "mid_wt_change";
"_4" -> "_5";
"delta_21" -> "delta_22";
"_5" -> "delta_22";
"NONLOCAL" -> "_7";
"delta_22" -> "_7";
"_7" -> "_7";
"_7" -> "_7";
"_7" -> "_7";
"NONLOCAL" -> "_9";
"delta_22" -> "_9";
"_9" -> "_9";
"_9" -> "_9";
"_9" -> "_9";
"weight_25" -> "weight_25";
"weight_25" -> "weight_25";
"neurode_19" -> "neurode_19";
"neurode_19" -> "neurode_19";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"patt";
"mid_error";
"weight_25";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"mid_error" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = mid_error\l"];
"STOREDANYTHING";
"INTEGER";
"patt";
"mid_error";
"weight_25";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"mid_error" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as mid_error
STOREDANYTHING = { }
INTEGER = { ANYTHING }
patt = { NONLOCAL }
_1 = { ESCAPED NONLOCAL } same as mid_error
mid_error = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as mid_error
_3 = { ESCAPED NONLOCAL } same as mid_error
in_pats = { ESCAPED NONLOCAL } same as mid_error
delta_21 = { ESCAPED NONLOCAL } same as mid_error
_4 = { ESCAPED NONLOCAL } same as mid_error
mid_wt_change = { ESCAPED NONLOCAL } same as mid_error
_5 = { ESCAPED NONLOCAL } same as mid_error
delta_22 = { ESCAPED NONLOCAL } same as mid_error
_6 = { ESCAPED NONLOCAL } same as mid_error
mid_wts = { ESCAPED NONLOCAL } same as mid_error
_7 = { ESCAPED NONLOCAL } same as mid_error
_8 = { ESCAPED NONLOCAL } same as mid_error
mid_wt_cum_change = { ESCAPED NONLOCAL } same as mid_error
_9 = { ESCAPED NONLOCAL } same as mid_error
weight_25 = { NULL NONLOCAL }
weight_10 = { NULL NONLOCAL } same as weight_25
neurode_19 = { NULL NONLOCAL } same as weight_25
neurode_11 = { NULL NONLOCAL } same as weight_25


Alias information for adjust_mid_wts

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


adjust_mid_wts (int patt)
{
  double delta;
  double alph;
  double learn;
  int neurode;
  int weight;
  double _1;
  double _2;
  double _3;
  double _4;
  double _5;
  double _6;
  double _7;
  double _8;
  double _9;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = mid_error[neurode_11];
  _2 = _1 * 8.99999999999999966693309261245303787291049957275390625e-2;
  _3 = in_pats[patt_20(D)][weight_10];
  delta_21 = _2 * _3;
  _4 = mid_wt_change[neurode_11][weight_10];
  _5 = _4 * 8.99999999999999966693309261245303787291049957275390625e-2;
  delta_22 = _5 + delta_21;
  _6 = mid_wts[neurode_11][weight_10];
  _7 = _6 + delta_22;
  mid_wts[neurode_11][weight_10] = _7;
  _8 = mid_wt_cum_change[neurode_11][weight_10];
  _9 = _8 + delta_22;
  mid_wt_cum_change[neurode_11][weight_10] = _9;
  weight_25 = weight_10 + 1;

  <bb 4> [0.00%]:
  # weight_10 = PHI <0(6), weight_25(3)>
  if (weight_10 <= 34)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  neurode_19 = neurode_11 + 1;

  <bb 6> [0.00%]:
  # neurode_11 = PHI <0(2), neurode_19(5)>
  if (neurode_11 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function do_back_pass (do_back_pass, funcdef_no=105, decl_uid=4718, cgraph_uid=105, symbol_order=130)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
patt = &NONLOCAL
ESCAPED = patt
out_wts = NONLOCAL
_9 = out_wts
out_error = NONLOCAL
_10 = out_error
_11 = _9
_11 = _10
sum_13 = _11
sum_13 = sum_12
i_14 = i_7
i_14 = &NONLOCAL
sum_12 = sum_13
sum_12 = &NONLOCAL
i_7 = i_14
i_7 = &NULL
mid_out = NONLOCAL
_15 = mid_out
_16 = &NONLOCAL
_16 = _15
_17 = _15
_17 = _16
_19 = sum_12
_19 = _17
mid_error = NONLOCAL
mid_error = _19
ESCAPED = _19
neurode_20 = neurode_8
neurode_20 = &NONLOCAL
neurode_8 = &NULL
neurode_8 = neurode_20
ESCAPED = patt

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"patt"[label="patt = { 5 }"];
"do_out_error";
"_9";
"out_wts";
"_10";
"out_error";
"_11";
"sum_12"[label="sum_12 = { 5 }"];
"i_14"[label="i_14 = { 1 5 }"];
"_15";
"mid_out";
"_16"[label="_16 = { 5 }"];
"_17";
"_19";
"mid_error";
"neurode_20"[label="neurode_20 = { 1 5 }"];
"adjust_out_wts";
"adjust_mid_wts";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*patt";
"*do_out_error";
"*i_14";
"*i_7";
"*mid_error";
"*neurode_20";
"*neurode_8";
"*adjust_out_wts";
"*adjust_mid_wts";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"patt" -> "ESCAPED";
"_19" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"out_wts" -> "_9";
"NONLOCAL" -> "out_wts";
"out_error" -> "_10";
"NONLOCAL" -> "out_error";
"_9" -> "_11";
"_10" -> "_11";
"_11" -> "sum_12";
"sum_12" -> "sum_12";
"sum_12" -> "sum_12";
"i_14" -> "i_14";
"i_14" -> "i_14";
"mid_out" -> "_15";
"NONLOCAL" -> "mid_out";
"_15" -> "_16";
"_15" -> "_17";
"_16" -> "_17";
"sum_12" -> "_19";
"_17" -> "_19";
"NONLOCAL" -> "mid_error";
"_19" -> "mid_error";
"neurode_20" -> "neurode_20";
"neurode_20" -> "neurode_20";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"patt";
"do_out_error";
"out_wts";
"i_14";
"adjust_out_wts";
"adjust_mid_wts";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"patt" -> "ESCAPED";
"out_wts" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = out_wts\l"];
"STOREDANYTHING";
"INTEGER";
"patt";
"do_out_error";
"out_wts";
"i_14";
"adjust_out_wts";
"adjust_mid_wts";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"patt" -> "ESCAPED";
"out_wts" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as out_wts
STOREDANYTHING = { }
INTEGER = { ANYTHING }
patt = { NONLOCAL }
do_out_error = { }
_9 = { ESCAPED NONLOCAL } same as out_wts
out_wts = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL } same as out_wts
out_error = { ESCAPED NONLOCAL } same as out_wts
_11 = { ESCAPED NONLOCAL } same as out_wts
sum_13 = { ESCAPED NONLOCAL } same as out_wts
sum_12 = { ESCAPED NONLOCAL } same as out_wts
i_14 = { NULL NONLOCAL }
i_7 = { NULL NONLOCAL } same as i_14
_15 = { ESCAPED NONLOCAL } same as out_wts
mid_out = { ESCAPED NONLOCAL } same as out_wts
_16 = { ESCAPED NONLOCAL } same as out_wts
_17 = { ESCAPED NONLOCAL } same as out_wts
_19 = { ESCAPED NONLOCAL } same as out_wts
mid_error = { ESCAPED NONLOCAL } same as out_wts
neurode_20 = { NULL NONLOCAL } same as i_14
neurode_8 = { NULL NONLOCAL } same as i_14
adjust_out_wts = { }
adjust_mid_wts = { }


Alias information for do_back_pass

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


do_back_pass (int patt)
{
  double sum;
  int neurode;
  int i;
  double _9;
  double _10;
  double _11;
  double _15;
  double _16;
  double _17;
  double _19;

  <bb 2> [1.39%]:
  do_out_error (patt_2(D));
  goto <bb 6>; [100.00%]

  <bb 3> [88.89%]:
  _9 = out_wts[i_7][neurode_8];
  _10 = out_error[i_7];
  _11 = _9 * _10;
  sum_13 = _11 + sum_12;
  i_14 = i_7 + 1;

  <bb 4> [100.00%]:
  # sum_12 = PHI <sum_13(3), 0.0(6)>
  # i_7 = PHI <i_14(3), 0(6)>
  if (i_7 <= 7)
    goto <bb 3>; [88.89%]
  else
    goto <bb 5>; [11.11%]

  <bb 5> [11.11%]:
  _15 = mid_out[neurode_8];
  _16 = 1.0e+0 - _15;
  _17 = _15 * _16;
  _19 = sum_12 * _17;
  mid_error[neurode_8] = _19;
  neurode_20 = neurode_8 + 1;

  <bb 6> [12.50%]:
  # neurode_8 = PHI <0(2), neurode_20(5)>
  if (neurode_8 <= 7)
    goto <bb 4>; [88.89%]
  else
    goto <bb 7>; [11.11%]

  <bb 7> [0.00%]:
  adjust_out_wts ();
  adjust_mid_wts (patt_2(D));
  return;

}



;; Function move_wt_changes (move_wt_changes, funcdef_no=106, decl_uid=4719, cgraph_uid=106, symbol_order=131)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
mid_wt_cum_change = NONLOCAL
_1 = mid_wt_cum_change
mid_wt_change = NONLOCAL
mid_wt_change = _1
ESCAPED = _1
mid_wt_cum_change = &NONLOCAL
ESCAPED = &NONLOCAL
j_23 = j_5
j_23 = &NONLOCAL
j_5 = &NULL
j_5 = j_23
i_20 = i_3
i_20 = &NONLOCAL
i_3 = &NULL
i_3 = i_20
out_wt_cum_change = NONLOCAL
_2 = out_wt_cum_change
out_wt_change = NONLOCAL
out_wt_change = _2
ESCAPED = _2
out_wt_cum_change = &NONLOCAL
ESCAPED = &NONLOCAL
j_18 = j_6
j_18 = &NONLOCAL
j_6 = &NULL
j_6 = j_18
i_15 = i_4
i_15 = &NONLOCAL
i_4 = &NULL
i_4 = i_15

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_1";
"mid_wt_cum_change"[label="mid_wt_cum_change = { 5 }"];
"mid_wt_change";
"j_23"[label="j_23 = { 1 5 }"];
"i_20"[label="i_20 = { 1 5 }"];
"_2";
"out_wt_cum_change"[label="out_wt_cum_change = { 5 }"];
"out_wt_change";
"j_18"[label="j_18 = { 1 5 }"];
"i_15"[label="i_15 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*mid_wt_change";
"*j_23";
"*j_5";
"*i_20";
"*i_3";
"*out_wt_change";
"*j_18";
"*j_6";
"*i_15";
"*i_4";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_1" -> "ESCAPED";
"_2" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"mid_wt_cum_change" -> "_1";
"NONLOCAL" -> "mid_wt_cum_change";
"NONLOCAL" -> "mid_wt_change";
"_1" -> "mid_wt_change";
"j_23" -> "j_23";
"j_23" -> "j_23";
"i_20" -> "i_20";
"i_20" -> "i_20";
"out_wt_cum_change" -> "_2";
"NONLOCAL" -> "out_wt_cum_change";
"NONLOCAL" -> "out_wt_change";
"_2" -> "out_wt_change";
"j_18" -> "j_18";
"j_18" -> "j_18";
"i_15" -> "i_15";
"i_15" -> "i_15";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"mid_wt_cum_change";
"j_23";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"mid_wt_cum_change" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = mid_wt_cum_change\l"];
"STOREDANYTHING";
"INTEGER";
"mid_wt_cum_change";
"j_23";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"mid_wt_cum_change" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as mid_wt_cum_change
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_1 = { ESCAPED NONLOCAL } same as mid_wt_cum_change
mid_wt_cum_change = { ESCAPED NONLOCAL }
mid_wt_change = { ESCAPED NONLOCAL } same as mid_wt_cum_change
j_23 = { NULL NONLOCAL }
j_5 = { NULL NONLOCAL } same as j_23
i_20 = { NULL NONLOCAL } same as j_23
i_3 = { NULL NONLOCAL } same as j_23
_2 = { ESCAPED NONLOCAL } same as mid_wt_cum_change
out_wt_cum_change = { ESCAPED NONLOCAL } same as mid_wt_cum_change
out_wt_change = { ESCAPED NONLOCAL } same as mid_wt_cum_change
j_18 = { NULL NONLOCAL } same as j_23
j_6 = { NULL NONLOCAL } same as j_23
i_15 = { NULL NONLOCAL } same as j_23
i_4 = { NULL NONLOCAL } same as j_23


Alias information for move_wt_changes

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


move_wt_changes ()
{
  int j;
  int i;
  double _1;
  double _2;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = mid_wt_cum_change[i_3][j_5];
  mid_wt_change[i_3][j_5] = _1;
  mid_wt_cum_change[i_3][j_5] = 0.0;
  j_23 = j_5 + 1;

  <bb 4> [0.00%]:
  # j_5 = PHI <0(6), j_23(3)>
  if (j_5 <= 34)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  i_20 = i_3 + 1;

  <bb 6> [0.00%]:
  # i_3 = PHI <0(2), i_20(5)>
  if (i_3 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 7> [0.00%]:
  _2 = out_wt_cum_change[i_4][j_6];
  out_wt_change[i_4][j_6] = _2;
  out_wt_cum_change[i_4][j_6] = 0.0;
  j_18 = j_6 + 1;

  <bb 8> [0.00%]:
  # j_6 = PHI <0(10), j_18(7)>
  if (j_6 <= 7)
    goto <bb 7>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  i_15 = i_4 + 1;

  <bb 10> [0.00%]:
  # i_4 = PHI <0(6), i_15(9)>
  if (i_4 <= 7)
    goto <bb 8>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  return;

}



;; Function check_out_error (check_out_error, funcdef_no=107, decl_uid=4720, cgraph_uid=107, symbol_order=132)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
tot_out_error = NONLOCAL
_21 = tot_out_error
error_33 = error_22
error_33 = _21
avg_out_error = NONLOCAL
_23 = avg_out_error
sum_25 = _23
sum_25 = sum_24
i_26 = i_20
i_26 = &NONLOCAL
error_22 = &NONLOCAL
error_22 = error_33
sum_24 = &NONLOCAL
sum_24 = sum_25
i_20 = &NULL
i_20 = i_26
numpats = NONLOCAL
numpats.193_27 = numpats
error_28 = error_22
sum_31 = sum_24
worst_error = NONLOCAL
worst_error = error_22
ESCAPED = error_22
_30 = numpats.193_27
_32 = sum_24
_32 = _30
average_error = NONLOCAL
average_error = _32
ESCAPED = _32
worst_error.191_1 = worst_error
result_4 = result_5
result_4 = &NULL
_2 = tot_out_error
error_8 = error_9
error_8 = &NONLOCAL
i_19 = i_7
i_19 = &NONLOCAL
result_5 = &NONLOCAL
result_5 = result_4
i_7 = &NULL
i_7 = i_19
error_9 = &NULL
error_9 = error_8
numpats.192_3 = numpats
result_6 = result_5
result_6 = &NONLOCAL
_16 = result_6
ESCAPED = result_6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_21";
"tot_out_error";
"error_22"[label="error_22 = { 5 }"];
"_23";
"avg_out_error";
"sum_24"[label="sum_24 = { 5 }"];
"i_26"[label="i_26 = { 1 5 }"];
"numpats.193_27";
"numpats";
"error_28";
"sum_31";
"worst_error";
"_30";
"_32";
"average_error";
"worst_error.191_1";
"result_5"[label="result_5 = { 1 5 }"];
"_2";
"error_8"[label="error_8 = { 1 5 }"];
"i_19"[label="i_19 = { 1 5 }"];
"numpats.192_3";
"result_6"[label="result_6 = { 5 }"];
"_16";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*i_26";
"*i_20";
"*error_28";
"*sum_31";
"*worst_error";
"*average_error";
"*worst_error.191_1";
"*result_5";
"*_2";
"*error_8";
"*error_9";
"*i_19";
"*i_7";
"*numpats.192_3";
"*result_6";
"*_16";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"error_22" -> "ESCAPED";
"_32" -> "ESCAPED";
"result_6" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"tot_out_error" -> "_21";
"NONLOCAL" -> "tot_out_error";
"_21" -> "error_22";
"error_22" -> "error_22";
"error_22" -> "error_22";
"avg_out_error" -> "_23";
"NONLOCAL" -> "avg_out_error";
"_23" -> "sum_24";
"sum_24" -> "sum_24";
"sum_24" -> "sum_24";
"i_26" -> "i_26";
"i_26" -> "i_26";
"numpats" -> "numpats.193_27";
"NONLOCAL" -> "numpats";
"error_22" -> "error_28";
"sum_24" -> "sum_31";
"NONLOCAL" -> "worst_error";
"error_22" -> "worst_error";
"numpats.193_27" -> "_30";
"sum_24" -> "_32";
"_30" -> "_32";
"NONLOCAL" -> "average_error";
"_32" -> "average_error";
"worst_error" -> "worst_error.191_1";
"result_5" -> "result_5";
"result_5" -> "result_5";
"tot_out_error" -> "_2";
"error_8" -> "error_8";
"error_8" -> "error_8";
"i_19" -> "i_19";
"i_19" -> "i_19";
"numpats" -> "numpats.192_3";
"result_5" -> "result_6";
"result_6" -> "_16";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"tot_out_error";
"i_26";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"tot_out_error" -> "ESCAPED";
"i_26" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = tot_out_error\l"];
"STOREDANYTHING";
"INTEGER";
"tot_out_error";
"i_26";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"tot_out_error" -> "ESCAPED";
"i_26" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as tot_out_error
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_21 = { ESCAPED NONLOCAL } same as tot_out_error
tot_out_error = { ESCAPED NONLOCAL }
error_33 = { ESCAPED NONLOCAL } same as tot_out_error
error_22 = { ESCAPED NONLOCAL } same as tot_out_error
_23 = { ESCAPED NONLOCAL } same as tot_out_error
avg_out_error = { ESCAPED NONLOCAL } same as tot_out_error
sum_25 = { ESCAPED NONLOCAL } same as tot_out_error
sum_24 = { ESCAPED NONLOCAL } same as tot_out_error
i_26 = { NULL NONLOCAL }
i_20 = { NULL NONLOCAL } same as i_26
numpats.193_27 = { ESCAPED NONLOCAL } same as tot_out_error
numpats = { ESCAPED NONLOCAL } same as tot_out_error
error_28 = { ESCAPED NONLOCAL } same as tot_out_error
sum_31 = { ESCAPED NONLOCAL } same as tot_out_error
worst_error = { ESCAPED NONLOCAL } same as tot_out_error
_30 = { ESCAPED NONLOCAL } same as tot_out_error
_32 = { ESCAPED NONLOCAL } same as tot_out_error
average_error = { ESCAPED NONLOCAL } same as tot_out_error
worst_error.191_1 = { ESCAPED NONLOCAL } same as tot_out_error
result_4 = { NULL NONLOCAL } same as i_26
result_5 = { NULL NONLOCAL } same as i_26
_2 = { ESCAPED NONLOCAL } same as tot_out_error
error_8 = { NULL NONLOCAL } same as i_26
error_9 = { NULL NONLOCAL } same as i_26
i_19 = { NULL NONLOCAL } same as i_26
i_7 = { NULL NONLOCAL } same as i_26
numpats.192_3 = { ESCAPED NONLOCAL } same as tot_out_error
result_6 = { NULL NONLOCAL } same as i_26
_16 = { NULL NONLOCAL } same as i_26


Alias information for check_out_error

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information


check_out_error ()
{
  double error;
  double sum;
  int i;
  int error;
  int i;
  int result;
  double worst_error.191_1;
  double _2;
  int numpats.192_3;
  int _16;
  double _21;
  double _23;
  int numpats.193_27;
  double _30;
  double _32;

  <bb 2> [15.00%]:
  goto <bb 6>; [100.00%]

  <bb 3> [85.00%]:
  _21 = tot_out_error[i_20];
  if (_21 > error_22)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 4> [42.50%]:

  <bb 5> [85.00%]:
  # error_33 = PHI <error_22(3), _21(4)>
  _23 = avg_out_error[i_20];
  sum_25 = _23 + sum_24;
  i_26 = i_20 + 1;

  <bb 6> [100.00%]:
  # error_22 = PHI <0.0(2), error_33(5)>
  # sum_24 = PHI <0.0(2), sum_25(5)>
  # i_20 = PHI <0(2), i_26(5)>
  numpats.193_27 = numpats;
  if (i_20 < numpats.193_27)
    goto <bb 3>; [85.00%]
  else
    goto <bb 7>; [15.00%]

  <bb 7> [15.00%]:
  # error_28 = PHI <error_22(6)>
  # sum_31 = PHI <sum_24(6)>
  worst_error = error_22;
  _30 = (double) numpats.193_27;
  _32 = sum_24 / _30;
  average_error = _32;
  goto <bb 13>; [0.00%]

  <bb 8> [0.00%]:
  worst_error.191_1 = worst_error;
  if (worst_error.191_1 >= 1.000000000000000055511151231257827021181583404541015625e-1)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:

  <bb 10> [0.00%]:
  # result_4 = PHI <result_5(8), 0(9)>
  _2 = tot_out_error[i_7];
  if (_2 >= 1.6e+1)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:

  <bb 12> [0.00%]:
  # error_8 = PHI <error_9(10), 1(11)>
  i_19 = i_7 + 1;

  <bb 13> [0.00%]:
  # result_5 = PHI <1(7), result_4(12)>
  # i_7 = PHI <0(7), i_19(12)>
  # error_9 = PHI <0(7), error_8(12)>
  numpats.192_3 = numpats;
  if (numpats.192_3 > i_7)
    goto <bb 8>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [0.00%]:
  if (error_9 == 1)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:

  <bb 16> [0.00%]:
  # result_6 = PHI <result_5(14), -1(15)>
  _16 = result_6;
  return result_6;

}



;; Function zero_changes (zero_changes, funcdef_no=108, decl_uid=4721, cgraph_uid=108, symbol_order=133)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
mid_wt_change = NONLOCAL
mid_wt_change = &NONLOCAL
ESCAPED = &NONLOCAL
mid_wt_cum_change = NONLOCAL
mid_wt_cum_change = &NONLOCAL
ESCAPED = &NONLOCAL
j_21 = j_3
j_21 = &NONLOCAL
j_3 = &NULL
j_3 = j_21
i_18 = i_1
i_18 = &NONLOCAL
i_1 = &NULL
i_1 = i_18
out_wt_change = NONLOCAL
out_wt_change = &NONLOCAL
ESCAPED = &NONLOCAL
out_wt_cum_change = NONLOCAL
out_wt_cum_change = &NONLOCAL
ESCAPED = &NONLOCAL
j_16 = j_4
j_16 = &NONLOCAL
j_4 = &NULL
j_4 = j_16
i_13 = i_2
i_13 = &NONLOCAL
i_2 = &NULL
i_2 = i_13

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"mid_wt_change"[label="mid_wt_change = { 5 }"];
"mid_wt_cum_change"[label="mid_wt_cum_change = { 5 }"];
"j_21"[label="j_21 = { 1 5 }"];
"i_18"[label="i_18 = { 1 5 }"];
"out_wt_change"[label="out_wt_change = { 5 }"];
"out_wt_cum_change"[label="out_wt_cum_change = { 5 }"];
"j_16"[label="j_16 = { 1 5 }"];
"i_13"[label="i_13 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*mid_wt_change";
"*mid_wt_cum_change";
"*j_21";
"*j_3";
"*i_18";
"*i_1";
"*out_wt_change";
"*out_wt_cum_change";
"*j_16";
"*j_4";
"*i_13";
"*i_2";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "mid_wt_change";
"NONLOCAL" -> "mid_wt_cum_change";
"j_21" -> "j_21";
"j_21" -> "j_21";
"i_18" -> "i_18";
"i_18" -> "i_18";
"NONLOCAL" -> "out_wt_change";
"NONLOCAL" -> "out_wt_cum_change";
"j_16" -> "j_16";
"j_16" -> "j_16";
"i_13" -> "i_13";
"i_13" -> "i_13";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"mid_wt_change";
"j_21";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = mid_wt_change\l"];
"STOREDANYTHING";
"INTEGER";
"mid_wt_change";
"j_21";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"mid_wt_change" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as mid_wt_change
STOREDANYTHING = { }
INTEGER = { ANYTHING }
mid_wt_change = { ESCAPED NONLOCAL }
mid_wt_cum_change = { ESCAPED NONLOCAL } same as mid_wt_change
j_21 = { NULL NONLOCAL }
j_3 = { NULL NONLOCAL } same as j_21
i_18 = { NULL NONLOCAL } same as j_21
i_1 = { NULL NONLOCAL } same as j_21
out_wt_change = { ESCAPED NONLOCAL } same as mid_wt_change
out_wt_cum_change = { ESCAPED NONLOCAL } same as mid_wt_change
j_16 = { NULL NONLOCAL } same as j_21
j_4 = { NULL NONLOCAL } same as j_21
i_13 = { NULL NONLOCAL } same as j_21
i_2 = { NULL NONLOCAL } same as j_21


Alias information for zero_changes

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


zero_changes ()
{
  int j;
  int i;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  mid_wt_change[i_1][j_3] = 0.0;
  mid_wt_cum_change[i_1][j_3] = 0.0;
  j_21 = j_3 + 1;

  <bb 4> [0.00%]:
  # j_3 = PHI <0(6), j_21(3)>
  if (j_3 <= 34)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  i_18 = i_1 + 1;

  <bb 6> [0.00%]:
  # i_1 = PHI <0(2), i_18(5)>
  if (i_1 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 7> [0.00%]:
  out_wt_change[i_2][j_4] = 0.0;
  out_wt_cum_change[i_2][j_4] = 0.0;
  j_16 = j_4 + 1;

  <bb 8> [0.00%]:
  # j_4 = PHI <0(10), j_16(7)>
  if (j_4 <= 7)
    goto <bb 7>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  i_13 = i_2 + 1;

  <bb 10> [0.00%]:
  # i_2 = PHI <0(6), i_13(9)>
  if (i_2 <= 7)
    goto <bb 8>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  return;

}



;; Function ludcmp (ludcmp, funcdef_no=115, decl_uid=4752, cgraph_uid=115, symbol_order=140)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
a = &NONLOCAL
n = &NONLOCAL
indx = &NONLOCAL
d = &NONLOCAL
derefaddrtmp(12) = &NONLOCAL
*d = derefaddrtmp(12)
_1 = i_114
_2 = _1
_2 = &NONLOCAL
_3 = a + UNKNOWN
_4 = *_3 + UNKNOWN
_5 = _4
_6 = i_114
_7 = _6
_7 = &NONLOCAL
_8 = a + UNKNOWN
_9 = *_8 + UNKNOWN
big_188 = _9
big_106 = big_107
big_106 = big_188
j_189 = j_118
j_189 = &NONLOCAL
big_107 = &NONLOCAL
big_107 = big_106
j_118 = &NULL
j_118 = j_189
LUtempvv = NONLOCAL
LUtempvv.215_10 = LUtempvv
_11 = i_114
_12 = _11
_12 = &NONLOCAL
_13 = LUtempvv.215_10 + UNKNOWN
_14 = &NONLOCAL
_14 = big_107
*_13 = _14
i_186 = i_114
i_186 = &NONLOCAL
i_114 = &NULL
i_114 = i_186
_15 = i_115
_16 = _15
_16 = &NONLOCAL
_17 = a + UNKNOWN
sum_149 = *_17 + UNKNOWN
_18 = i_115
_19 = _18
_19 = &NONLOCAL
_20 = a + UNKNOWN
_21 = *_20 + UNKNOWN
_22 = k_120
_23 = _22
_23 = &NONLOCAL
_24 = a + UNKNOWN
_25 = *_24 + UNKNOWN
_26 = _21
_26 = _25
sum_151 = sum_110
sum_151 = _26
k_152 = k_120
k_152 = &NONLOCAL
sum_110 = sum_149
sum_110 = sum_151
k_120 = &NULL
k_120 = k_152
sum_111 = sum_149
sum_111 = sum_110
_27 = i_115
_28 = _27
_28 = &NONLOCAL
_29 = a + UNKNOWN
*_29 + UNKNOWN = sum_111
i_154 = i_115
i_154 = &NONLOCAL
i_115 = &NULL
i_115 = i_154
i_156 = j_119
_30 = i_116
_31 = _30
_31 = &NONLOCAL
_32 = a + UNKNOWN
sum_174 = *_32 + UNKNOWN
_33 = i_116
_34 = _33
_34 = &NONLOCAL
_35 = a + UNKNOWN
_36 = *_35 + UNKNOWN
_37 = k_121
_38 = _37
_38 = &NONLOCAL
_39 = a + UNKNOWN
_40 = *_39 + UNKNOWN
_41 = _36
_41 = _40
sum_176 = sum_112
sum_176 = _41
k_177 = k_121
k_177 = &NONLOCAL
sum_112 = sum_174
sum_112 = sum_176
k_121 = &NULL
k_121 = k_177
sum_113 = sum_174
sum_113 = sum_112
_42 = i_116
_43 = _42
_43 = &NONLOCAL
_44 = a + UNKNOWN
*_44 + UNKNOWN = sum_113
LUtempvv.216_45 = LUtempvv
_46 = i_116
_47 = _46
_47 = &NONLOCAL
_48 = LUtempvv.216_45 + UNKNOWN
_49 = *_48
_50 = sum_113
dum_179 = _49
dum_179 = _50
imax_181 = i_116
big_108 = big_109
big_108 = dum_179
imax_123 = imax_124
imax_123 = i_116
i_182 = i_116
i_182 = &NONLOCAL
big_109 = &NONLOCAL
big_109 = big_108
i_116 = j_119
i_116 = i_182
imax_124 = imax_125
imax_124 = imax_123
_51 = imax_124
_52 = _51
_52 = &NONLOCAL
_53 = a + UNKNOWN
dum_162 = *_53 + UNKNOWN
_54 = j_119
_55 = _54
_55 = &NONLOCAL
_56 = a + UNKNOWN
_57 = imax_124
_58 = _57
_58 = &NONLOCAL
_59 = a + UNKNOWN
_60 = *_56 + UNKNOWN
*_59 + UNKNOWN = _60
_61 = j_119
_62 = _61
_62 = &NONLOCAL
_63 = a + UNKNOWN
*_63 + UNKNOWN = dum_162
k_165 = k_122
k_165 = &NONLOCAL
k_122 = &NULL
k_122 = k_165
_64 = *d
_65 = _64
*d = _65
LUtempvv.217_66 = LUtempvv
_67 = imax_124
_68 = _67
_68 = &NONLOCAL
_69 = LUtempvv.217_66 + UNKNOWN
dum_159 = *_69
LUtempvv.218_70 = LUtempvv
_71 = j_119
_72 = _71
_72 = &NONLOCAL
_73 = LUtempvv.218_70 + UNKNOWN
LUtempvv.219_74 = LUtempvv
_75 = imax_124
_76 = _75
_76 = &NONLOCAL
_77 = LUtempvv.219_74 + UNKNOWN
_78 = *_73
*_77 = _78
LUtempvv.220_79 = LUtempvv
_80 = j_119
_81 = _80
_81 = &NONLOCAL
_82 = LUtempvv.220_79 + UNKNOWN
*_82 = dum_159
_83 = j_119
_84 = _83
_84 = &NONLOCAL
_85 = indx + UNKNOWN
*_85 = imax_124
_86 = j_119
_87 = _86
_87 = &NONLOCAL
_88 = a + UNKNOWN
_89 = *_88 + UNKNOWN
_90 = j_119
_91 = _90
_91 = &NONLOCAL
_92 = a + UNKNOWN
derefaddrtmp(142) = &NONLOCAL
*_92 + UNKNOWN = derefaddrtmp(142)
_93 = n
_93 = &NONLOCAL
_94 = j_119
_95 = _94
_95 = &NONLOCAL
_96 = a + UNKNOWN
_97 = *_96 + UNKNOWN
dum_169 = &NONLOCAL
dum_169 = _97
i_170 = j_119
i_170 = &NONLOCAL
_98 = i_117
_99 = _98
_99 = &NONLOCAL
_100 = a + UNKNOWN
_101 = *_100 + UNKNOWN
_102 = i_117
_103 = _102
_103 = &NONLOCAL
_104 = a + UNKNOWN
_105 = _101
_105 = dum_169
*_104 + UNKNOWN = _105
i_172 = i_117
i_172 = &NONLOCAL
i_117 = i_170
i_117 = i_172
j_173 = j_119
j_173 = &NONLOCAL
j_119 = &NULL
j_119 = j_173
imax_125 = &NULL
imax_125 = imax_124
_126 = &NULL
_126 = &NONLOCAL
ESCAPED = _126

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"a"[label="a = { 5 }"];
"n"[label="n = { 5 }"];
"indx"[label="indx = { 5 }"];
"d"[label="d = { 5 }"];
"derefaddrtmp(12)"[label="derefaddrtmp(12) = { 5 }"];
"_1";
"i_114"[label="i_114 = { 1 5 }"];
"_2"[label="_2 = { 5 }"];
"_3";
"_4";
"_5";
"_6";
"_7"[label="_7 = { 5 }"];
"_8";
"_9";
"big_188";
"big_106"[label="big_106 = { 5 }"];
"j_189"[label="j_189 = { 1 5 }"];
"LUtempvv.215_10";
"LUtempvv";
"_11";
"_12"[label="_12 = { 5 }"];
"_13";
"_14"[label="_14 = { 5 }"];
"_15";
"i_115"[label="i_115 = { 1 5 }"];
"_16"[label="_16 = { 5 }"];
"_17";
"sum_149";
"_18";
"_19"[label="_19 = { 5 }"];
"_20";
"_21";
"_22";
"k_120"[label="k_120 = { 1 5 }"];
"_23"[label="_23 = { 5 }"];
"_24";
"_25";
"_26";
"sum_151";
"sum_111";
"_27";
"_28"[label="_28 = { 5 }"];
"_29";
"i_156";
"j_119"[label="j_119 = { 1 5 }"];
"_30";
"i_116"[label="i_116 = { 5 }"];
"_31"[label="_31 = { 5 }"];
"_32";
"sum_174";
"_33";
"_34"[label="_34 = { 5 }"];
"_35";
"_36";
"_37";
"k_121"[label="k_121 = { 1 5 }"];
"_38"[label="_38 = { 5 }"];
"_39";
"_40";
"_41";
"sum_176";
"sum_113";
"_42";
"_43"[label="_43 = { 5 }"];
"_44";
"LUtempvv.216_45";
"_46";
"_47"[label="_47 = { 5 }"];
"_48";
"_49";
"_50";
"dum_179";
"imax_181";
"big_108"[label="big_108 = { 5 }"];
"imax_123"[label="imax_123 = { 1 }"];
"_51";
"_52"[label="_52 = { 5 }"];
"_53";
"dum_162";
"_54";
"_55"[label="_55 = { 5 }"];
"_56";
"_57";
"_58"[label="_58 = { 5 }"];
"_59";
"_60";
"_61";
"_62"[label="_62 = { 5 }"];
"_63";
"k_165"[label="k_165 = { 1 5 }"];
"_64";
"LUtempvv.217_66";
"_67";
"_68"[label="_68 = { 5 }"];
"_69";
"dum_159";
"LUtempvv.218_70";
"_71";
"_72"[label="_72 = { 5 }"];
"_73";
"LUtempvv.219_74";
"_75";
"_76"[label="_76 = { 5 }"];
"_77";
"_78";
"LUtempvv.220_79";
"_80";
"_81"[label="_81 = { 5 }"];
"_82";
"_83";
"_84"[label="_84 = { 5 }"];
"_85";
"_86";
"_87"[label="_87 = { 5 }"];
"_88";
"_89";
"_90";
"_91"[label="_91 = { 5 }"];
"_92";
"derefaddrtmp(142)"[label="derefaddrtmp(142) = { 5 }"];
"_93"[label="_93 = { 5 }"];
"_94";
"_95"[label="_95 = { 5 }"];
"_96";
"_97";
"dum_169"[label="dum_169 = { 5 }"];
"i_170"[label="i_170 = { 5 }"];
"_98";
"i_117"[label="i_117 = { 5 }"];
"_99"[label="_99 = { 5 }"];
"_100";
"_101";
"_102";
"_103"[label="_103 = { 5 }"];
"_104";
"_105";
"_126"[label="_126 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*a";
"*n";
"*indx";
"*derefaddrtmp(12)";
"*_1";
"*i_114";
"*_2";
"*_3";
"*_4";
"*_5";
"*_6";
"*_7";
"*_8";
"*_9";
"*big_188";
"*big_106";
"*big_107";
"*j_189";
"*j_118";
"*LUtempvv.215_10";
"*LUtempvv";
"*_11";
"*_12";
"*_13";
"*_14";
"*i_186";
"*_15";
"*i_115";
"*_16";
"*_17";
"*sum_149";
"*_18";
"*_19";
"*_20";
"*_21";
"*_22";
"*k_120";
"*_23";
"*_24";
"*_25";
"*_26";
"*sum_151";
"*sum_110";
"*k_152";
"*sum_111";
"*_27";
"*_28";
"*_29";
"*i_154";
"*i_156";
"*j_119";
"*_30";
"*i_116";
"*_31";
"*_32";
"*sum_174";
"*_33";
"*_34";
"*_35";
"*_36";
"*_37";
"*k_121";
"*_38";
"*_39";
"*_40";
"*_41";
"*sum_176";
"*sum_112";
"*k_177";
"*sum_113";
"*_42";
"*_43";
"*_44";
"*LUtempvv.216_45";
"*_46";
"*_47";
"*_48";
"*_49";
"*_50";
"*dum_179";
"*imax_181";
"*big_108";
"*big_109";
"*imax_123";
"*imax_124";
"*i_182";
"*imax_125";
"*_51";
"*_52";
"*_53";
"*dum_162";
"*_54";
"*_55";
"*_56";
"*_57";
"*_58";
"*_59";
"*_60";
"*_61";
"*_62";
"*_63";
"*k_165";
"*k_122";
"*_64";
"*_65";
"*LUtempvv.217_66";
"*_67";
"*_68";
"*_69";
"*dum_159";
"*LUtempvv.218_70";
"*_71";
"*_72";
"*_73";
"*LUtempvv.219_74";
"*_75";
"*_76";
"*_77";
"*_78";
"*LUtempvv.220_79";
"*_80";
"*_81";
"*_82";
"*_83";
"*_84";
"*_85";
"*_86";
"*_87";
"*_88";
"*_89";
"*_90";
"*_91";
"*_92";
"*derefaddrtmp(142)";
"*_93";
"*_94";
"*_95";
"*_96";
"*_97";
"*dum_169";
"*i_170";
"*_98";
"*i_117";
"*_99";
"*_100";
"*_101";
"*_102";
"*_103";
"*_104";
"*_105";
"*i_172";
"*j_173";
"*_126";

  // Edges in the constraint graph:
"_126" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"i_114" -> "_1";
"i_114" -> "i_114";
"i_114" -> "i_114";
"_1" -> "_2";
"_4" -> "_5";
"i_114" -> "_6";
"_6" -> "_7";
"_9" -> "big_188";
"big_188" -> "big_106";
"big_106" -> "big_106";
"big_106" -> "big_106";
"j_189" -> "j_189";
"j_189" -> "j_189";
"LUtempvv" -> "LUtempvv.215_10";
"NONLOCAL" -> "LUtempvv";
"i_114" -> "_11";
"_11" -> "_12";
"big_106" -> "_14";
"i_115" -> "_15";
"i_115" -> "i_115";
"i_115" -> "i_115";
"_15" -> "_16";
"i_115" -> "_18";
"_18" -> "_19";
"k_120" -> "_22";
"k_120" -> "k_120";
"k_120" -> "k_120";
"_22" -> "_23";
"_21" -> "_26";
"_25" -> "_26";
"sum_149" -> "sum_151";
"_26" -> "sum_151";
"sum_151" -> "sum_151";
"sum_151" -> "sum_151";
"sum_149" -> "sum_111";
"sum_151" -> "sum_111";
"i_115" -> "_27";
"_27" -> "_28";
"j_119" -> "i_156";
"j_119" -> "j_119";
"j_119" -> "j_119";
"i_116" -> "_30";
"j_119" -> "i_116";
"i_116" -> "i_116";
"i_116" -> "i_116";
"_30" -> "_31";
"i_116" -> "_33";
"_33" -> "_34";
"k_121" -> "_37";
"k_121" -> "k_121";
"k_121" -> "k_121";
"_37" -> "_38";
"_36" -> "_41";
"_40" -> "_41";
"sum_174" -> "sum_176";
"_41" -> "sum_176";
"sum_176" -> "sum_176";
"sum_176" -> "sum_176";
"sum_174" -> "sum_113";
"sum_176" -> "sum_113";
"i_116" -> "_42";
"_42" -> "_43";
"LUtempvv" -> "LUtempvv.216_45";
"i_116" -> "_46";
"_46" -> "_47";
"*_48" -> "_49";
"sum_113" -> "_50";
"_49" -> "dum_179";
"_50" -> "dum_179";
"i_116" -> "imax_181";
"dum_179" -> "big_108";
"big_108" -> "big_108";
"big_108" -> "big_108";
"i_116" -> "imax_123";
"imax_123" -> "imax_123";
"imax_123" -> "imax_123";
"imax_123" -> "imax_123";
"imax_123" -> "_51";
"_51" -> "_52";
"j_119" -> "_54";
"_54" -> "_55";
"imax_123" -> "_57";
"_57" -> "_58";
"j_119" -> "_61";
"_61" -> "_62";
"k_165" -> "k_165";
"k_165" -> "k_165";
"derefaddrtmp(12)" -> "_64";
"_64" -> "_64";
"_64" -> "_64";
"_64" -> "_64";
"LUtempvv" -> "LUtempvv.217_66";
"imax_123" -> "_67";
"_67" -> "_68";
"*_69" -> "dum_159";
"LUtempvv" -> "LUtempvv.218_70";
"j_119" -> "_71";
"_71" -> "_72";
"LUtempvv" -> "LUtempvv.219_74";
"imax_123" -> "_75";
"_75" -> "_76";
"*_73" -> "_78";
"LUtempvv" -> "LUtempvv.220_79";
"j_119" -> "_80";
"_80" -> "_81";
"j_119" -> "_83";
"_83" -> "_84";
"j_119" -> "_86";
"_86" -> "_87";
"j_119" -> "_90";
"_90" -> "_91";
"n" -> "_93";
"j_119" -> "_94";
"_94" -> "_95";
"_97" -> "dum_169";
"j_119" -> "i_170";
"i_117" -> "_98";
"i_170" -> "i_117";
"i_117" -> "i_117";
"i_117" -> "i_117";
"_98" -> "_99";
"i_117" -> "_102";
"_102" -> "_103";
"dum_169" -> "_105";
"_101" -> "_105";
"NONLOCAL" -> "*ESCAPED";
"_14" -> "*_13";
"_78" -> "*_77";
"dum_159" -> "*_82";
"imax_123" -> "*_85";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"a" [label="\N\n_3 = a + UNKNOWN\l_8 = a + UNKNOWN\l_17 = a + UNKNOWN\l_20 = a + UNKNOWN\l_24 = a + UNKNOWN\l_29 = a + UNKNOWN\l_32 = a + UNKNOWN\l_35 = a + UNKNOWN\l_39 = a + UNKNOWN\l_44 = a + UNKNOWN\l_53 = a + UNKNOWN\l_56 = a + UNKNOWN\l_59 = a + UNKNOWN\l_63 = a + UNKNOWN\l_64 = *a\l_85 = a + UNKNOWN\l_88 = a + UNKNOWN\l_92 = a + UNKNOWN\l_96 = a + UNKNOWN\l_100 = a + UNKNOWN\l_104 = a + UNKNOWN\l*a = a\l*a = _64\l"];
"_1";
"_3" [label="\N\n_4 = *_3 + UNKNOWN\l"];
"_4";
"_8" [label="\N\n_9 = *_8 + UNKNOWN\l"];
"_9";
"big_106";
"LUtempvv" [label="\N\n_13 = LUtempvv + UNKNOWN\l_48 = LUtempvv + UNKNOWN\l_69 = LUtempvv + UNKNOWN\l_73 = LUtempvv + UNKNOWN\l_77 = LUtempvv + UNKNOWN\l_82 = LUtempvv + UNKNOWN\l"];
"_13" [label="\N\n*_13 = big_106\l"];
"_17" [label="\N\nsum_149 = *_17 + UNKNOWN\l"];
"sum_149";
"_20" [label="\N\n_21 = *_20 + UNKNOWN\l"];
"_21";
"_24" [label="\N\n_25 = *_24 + UNKNOWN\l"];
"_25";
"_26";
"sum_151";
"_29" [label="\N\n*_29 + UNKNOWN = sum_151\l"];
"_32" [label="\N\nsum_174 = *_32 + UNKNOWN\l"];
"sum_174";
"_35" [label="\N\n_36 = *_35 + UNKNOWN\l"];
"_36";
"_39" [label="\N\n_40 = *_39 + UNKNOWN\l"];
"_40";
"_41";
"sum_176";
"_44" [label="\N\n*_44 + UNKNOWN = sum_176\l"];
"_48" [label="\N\n_49 = *_48\l"];
"_49";
"dum_179";
"big_108";
"_53" [label="\N\ndum_162 = *_53 + UNKNOWN\l"];
"dum_162";
"_56" [label="\N\n_60 = *_56 + UNKNOWN\l"];
"_59" [label="\N\n*_59 + UNKNOWN = _60\l"];
"_60";
"_63" [label="\N\n*_63 + UNKNOWN = dum_162\l"];
"_64";
"_69" [label="\N\ndum_159 = *_69\l"];
"dum_159";
"_73" [label="\N\n_78 = *_73\l"];
"_77" [label="\N\n*_77 = _78\l"];
"_78";
"_82" [label="\N\n*_82 = dum_159\l"];
"_85" [label="\N\n*_85 = _1\l"];
"_88" [label="\N\n_89 = *_88 + UNKNOWN\l"];
"_89";
"_92" [label="\N\n*_92 + UNKNOWN = a\l"];
"_96" [label="\N\n_97 = *_96 + UNKNOWN\l"];
"_97";
"dum_169";
"_100" [label="\N\n_101 = *_100 + UNKNOWN\l"];
"_101";
"_104" [label="\N\n*_104 + UNKNOWN = _105\l"];
"_105";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "_8";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "sum_149";
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "_32";
"STOREDANYTHING" -> "sum_174";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_39";
"STOREDANYTHING" -> "_40";
"STOREDANYTHING" -> "_44";
"STOREDANYTHING" -> "_48";
"STOREDANYTHING" -> "_53";
"STOREDANYTHING" -> "dum_162";
"STOREDANYTHING" -> "_56";
"STOREDANYTHING" -> "_59";
"STOREDANYTHING" -> "_60";
"STOREDANYTHING" -> "_63";
"STOREDANYTHING" -> "_64";
"STOREDANYTHING" -> "_69";
"STOREDANYTHING" -> "_73";
"STOREDANYTHING" -> "_77";
"STOREDANYTHING" -> "_82";
"STOREDANYTHING" -> "_85";
"STOREDANYTHING" -> "_88";
"STOREDANYTHING" -> "_89";
"STOREDANYTHING" -> "_92";
"STOREDANYTHING" -> "_96";
"STOREDANYTHING" -> "_97";
"STOREDANYTHING" -> "_100";
"STOREDANYTHING" -> "_101";
"STOREDANYTHING" -> "_104";
"_1" -> "ESCAPED";
"_9" -> "big_106";
"sum_149" -> "sum_151";
"_21" -> "_26";
"_25" -> "_26";
"_26" -> "sum_151";
"sum_174" -> "sum_176";
"_36" -> "_41";
"_40" -> "_41";
"_41" -> "sum_176";
"sum_176" -> "dum_179";
"_49" -> "dum_179";
"dum_179" -> "big_108";
"_97" -> "dum_169";
"dum_169" -> "_105";
"_101" -> "_105";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = LUtempvv\l"];
"STOREDANYTHING";
"INTEGER";
"a" [label="\N\n_3 = a + UNKNOWN\l_8 = a + UNKNOWN\l_17 = a + UNKNOWN\l_20 = a + UNKNOWN\l_24 = a + UNKNOWN\l_29 = a + UNKNOWN\l_32 = a + UNKNOWN\l_35 = a + UNKNOWN\l_39 = a + UNKNOWN\l_44 = a + UNKNOWN\l_53 = a + UNKNOWN\l_56 = a + UNKNOWN\l_59 = a + UNKNOWN\l_63 = a + UNKNOWN\l_64 = *a\l_85 = a + UNKNOWN\l_88 = a + UNKNOWN\l_92 = a + UNKNOWN\l_96 = a + UNKNOWN\l_100 = a + UNKNOWN\l_104 = a + UNKNOWN\l*a = a\l*a = _64\l"];
"_1";
"_3" [label="\N\n_4 = *_3 + UNKNOWN\l"];
"_4";
"_8" [label="\N\n_9 = *_8 + UNKNOWN\l"];
"_9";
"big_106";
"LUtempvv" [label="\N\n_13 = LUtempvv + UNKNOWN\l_48 = LUtempvv + UNKNOWN\l_69 = LUtempvv + UNKNOWN\l_73 = LUtempvv + UNKNOWN\l_77 = LUtempvv + UNKNOWN\l_82 = LUtempvv + UNKNOWN\l"];
"_13" [label="\N\n*_13 = big_106\l"];
"_17" [label="\N\nsum_149 = *_17 + UNKNOWN\l"];
"sum_149";
"_20" [label="\N\n_21 = *_20 + UNKNOWN\l"];
"_21";
"_24" [label="\N\n_25 = *_24 + UNKNOWN\l"];
"_25";
"_26";
"sum_151";
"_29" [label="\N\n*_29 + UNKNOWN = sum_151\l"];
"_32" [label="\N\nsum_174 = *_32 + UNKNOWN\l"];
"sum_174";
"_35" [label="\N\n_36 = *_35 + UNKNOWN\l"];
"_36";
"_39" [label="\N\n_40 = *_39 + UNKNOWN\l"];
"_40";
"_41";
"sum_176";
"_44" [label="\N\n*_44 + UNKNOWN = sum_176\l"];
"_48" [label="\N\n_49 = *_48\l"];
"_49";
"dum_179";
"big_108";
"_53" [label="\N\ndum_162 = *_53 + UNKNOWN\l"];
"dum_162";
"_56" [label="\N\n_60 = *_56 + UNKNOWN\l"];
"_59" [label="\N\n*_59 + UNKNOWN = _60\l"];
"_60";
"_63" [label="\N\n*_63 + UNKNOWN = dum_162\l"];
"_64";
"_69" [label="\N\ndum_159 = *_69\l"];
"dum_159";
"_73" [label="\N\n_78 = *_73\l"];
"_77" [label="\N\n*_77 = _78\l"];
"_78";
"_82" [label="\N\n*_82 = dum_159\l"];
"_85" [label="\N\n*_85 = _1\l"];
"_88" [label="\N\n_89 = *_88 + UNKNOWN\l"];
"_89";
"_92" [label="\N\n*_92 + UNKNOWN = a\l"];
"_96" [label="\N\n_97 = *_96 + UNKNOWN\l"];
"_97";
"dum_169";
"_100" [label="\N\n_101 = *_100 + UNKNOWN\l"];
"_101";
"_104" [label="\N\n*_104 + UNKNOWN = _105\l"];
"_105";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "_8";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "sum_149";
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "_32";
"STOREDANYTHING" -> "sum_174";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_39";
"STOREDANYTHING" -> "_40";
"STOREDANYTHING" -> "_44";
"STOREDANYTHING" -> "_48";
"STOREDANYTHING" -> "_53";
"STOREDANYTHING" -> "dum_162";
"STOREDANYTHING" -> "_56";
"STOREDANYTHING" -> "_59";
"STOREDANYTHING" -> "_60";
"STOREDANYTHING" -> "_63";
"STOREDANYTHING" -> "_64";
"STOREDANYTHING" -> "_69";
"STOREDANYTHING" -> "_73";
"STOREDANYTHING" -> "_77";
"STOREDANYTHING" -> "_82";
"STOREDANYTHING" -> "_85";
"STOREDANYTHING" -> "_88";
"STOREDANYTHING" -> "_89";
"STOREDANYTHING" -> "_92";
"STOREDANYTHING" -> "_96";
"STOREDANYTHING" -> "_97";
"STOREDANYTHING" -> "_100";
"STOREDANYTHING" -> "_101";
"STOREDANYTHING" -> "_104";
"a" -> "ESCAPED";
"_1" -> "ESCAPED";
"_9" -> "big_106";
"big_106" -> "ESCAPED";
"LUtempvv" -> "ESCAPED";
"LUtempvv" -> "_4";
"LUtempvv" -> "_9";
"LUtempvv" -> "sum_149";
"LUtempvv" -> "_21";
"LUtempvv" -> "_25";
"LUtempvv" -> "sum_174";
"LUtempvv" -> "_36";
"LUtempvv" -> "_40";
"LUtempvv" -> "_49";
"LUtempvv" -> "dum_162";
"LUtempvv" -> "_60";
"LUtempvv" -> "_64";
"LUtempvv" -> "dum_159";
"LUtempvv" -> "_78";
"LUtempvv" -> "_89";
"LUtempvv" -> "_97";
"LUtempvv" -> "_101";
"sum_149" -> "sum_151";
"_21" -> "_26";
"_25" -> "_26";
"_26" -> "sum_151";
"sum_151" -> "ESCAPED";
"sum_174" -> "sum_176";
"_36" -> "_41";
"_40" -> "_41";
"_41" -> "sum_176";
"sum_176" -> "ESCAPED";
"sum_176" -> "dum_179";
"_49" -> "dum_179";
"dum_179" -> "big_108";
"dum_162" -> "ESCAPED";
"_60" -> "ESCAPED";
"_64" -> "ESCAPED";
"dum_159" -> "ESCAPED";
"_78" -> "ESCAPED";
"_97" -> "dum_169";
"dum_169" -> "_105";
"_101" -> "_105";
"_105" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as LUtempvv
STOREDANYTHING = { }
INTEGER = { ANYTHING }
a = { NONLOCAL }
n = { NONLOCAL } same as a
indx = { NONLOCAL } same as a
d = { NONLOCAL } same as a
derefaddrtmp(12) = { NONLOCAL } same as a
_1 = { NULL NONLOCAL }
i_114 = { NULL NONLOCAL } same as _1
_2 = { NULL NONLOCAL } same as _1
_3 = { NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _4
_6 = { NULL NONLOCAL } same as _1
_7 = { NULL NONLOCAL } same as _1
_8 = { NONLOCAL }
_9 = { ESCAPED NONLOCAL }
big_188 = { ESCAPED NONLOCAL } same as _9
big_106 = { ESCAPED NONLOCAL }
big_107 = { ESCAPED NONLOCAL } same as big_106
j_189 = { NULL NONLOCAL } same as _1
j_118 = { NULL NONLOCAL } same as _1
LUtempvv.215_10 = { ESCAPED NONLOCAL } same as LUtempvv
LUtempvv = { ESCAPED NONLOCAL }
_11 = { NULL NONLOCAL } same as _1
_12 = { NULL NONLOCAL } same as _1
_13 = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL } same as big_106
i_186 = { NULL NONLOCAL } same as _1
_15 = { NULL NONLOCAL } same as _1
i_115 = { NULL NONLOCAL } same as _1
_16 = { NULL NONLOCAL } same as _1
_17 = { NONLOCAL }
sum_149 = { ESCAPED NONLOCAL }
_18 = { NULL NONLOCAL } same as _1
_19 = { NULL NONLOCAL } same as _1
_20 = { NONLOCAL }
_21 = { ESCAPED NONLOCAL }
_22 = { NULL NONLOCAL } same as _1
k_120 = { NULL NONLOCAL } same as _1
_23 = { NULL NONLOCAL } same as _1
_24 = { NONLOCAL }
_25 = { ESCAPED NONLOCAL }
_26 = { ESCAPED NONLOCAL }
sum_151 = { ESCAPED NONLOCAL }
sum_110 = { ESCAPED NONLOCAL } same as sum_151
k_152 = { NULL NONLOCAL } same as _1
sum_111 = { ESCAPED NONLOCAL } same as sum_151
_27 = { NULL NONLOCAL } same as _1
_28 = { NULL NONLOCAL } same as _1
_29 = { NONLOCAL }
i_154 = { NULL NONLOCAL } same as _1
i_156 = { NULL NONLOCAL } same as _1
j_119 = { NULL NONLOCAL } same as _1
_30 = { NULL NONLOCAL } same as _1
i_116 = { NULL NONLOCAL } same as _1
_31 = { NULL NONLOCAL } same as _1
_32 = { NONLOCAL }
sum_174 = { ESCAPED NONLOCAL }
_33 = { NULL NONLOCAL } same as _1
_34 = { NULL NONLOCAL } same as _1
_35 = { NONLOCAL }
_36 = { ESCAPED NONLOCAL }
_37 = { NULL NONLOCAL } same as _1
k_121 = { NULL NONLOCAL } same as _1
_38 = { NULL NONLOCAL } same as _1
_39 = { NONLOCAL }
_40 = { ESCAPED NONLOCAL }
_41 = { ESCAPED NONLOCAL }
sum_176 = { ESCAPED NONLOCAL }
sum_112 = { ESCAPED NONLOCAL } same as sum_176
k_177 = { NULL NONLOCAL } same as _1
sum_113 = { ESCAPED NONLOCAL } same as sum_176
_42 = { NULL NONLOCAL } same as _1
_43 = { NULL NONLOCAL } same as _1
_44 = { NONLOCAL }
LUtempvv.216_45 = { ESCAPED NONLOCAL } same as LUtempvv
_46 = { NULL NONLOCAL } same as _1
_47 = { NULL NONLOCAL } same as _1
_48 = { ESCAPED NONLOCAL }
_49 = { ESCAPED NONLOCAL }
_50 = { ESCAPED NONLOCAL } same as sum_176
dum_179 = { ESCAPED NONLOCAL }
imax_181 = { NULL NONLOCAL } same as _1
big_108 = { ESCAPED NONLOCAL }
big_109 = { ESCAPED NONLOCAL } same as big_108
imax_123 = { NULL NONLOCAL } same as _1
imax_124 = { NULL NONLOCAL } same as _1
i_182 = { NULL NONLOCAL } same as _1
imax_125 = { NULL NONLOCAL } same as _1
_51 = { NULL NONLOCAL } same as _1
_52 = { NULL NONLOCAL } same as _1
_53 = { NONLOCAL }
dum_162 = { ESCAPED NONLOCAL }
_54 = { NULL NONLOCAL } same as _1
_55 = { NULL NONLOCAL } same as _1
_56 = { NONLOCAL }
_57 = { NULL NONLOCAL } same as _1
_58 = { NULL NONLOCAL } same as _1
_59 = { NONLOCAL }
_60 = { ESCAPED NONLOCAL }
_61 = { NULL NONLOCAL } same as _1
_62 = { NULL NONLOCAL } same as _1
_63 = { NONLOCAL }
k_165 = { NULL NONLOCAL } same as _1
k_122 = { NULL NONLOCAL } same as _1
_64 = { ESCAPED NONLOCAL }
_65 = { ESCAPED NONLOCAL } same as _64
LUtempvv.217_66 = { ESCAPED NONLOCAL } same as LUtempvv
_67 = { NULL NONLOCAL } same as _1
_68 = { NULL NONLOCAL } same as _1
_69 = { ESCAPED NONLOCAL }
dum_159 = { ESCAPED NONLOCAL }
LUtempvv.218_70 = { ESCAPED NONLOCAL } same as LUtempvv
_71 = { NULL NONLOCAL } same as _1
_72 = { NULL NONLOCAL } same as _1
_73 = { ESCAPED NONLOCAL }
LUtempvv.219_74 = { ESCAPED NONLOCAL } same as LUtempvv
_75 = { NULL NONLOCAL } same as _1
_76 = { NULL NONLOCAL } same as _1
_77 = { ESCAPED NONLOCAL }
_78 = { ESCAPED NONLOCAL }
LUtempvv.220_79 = { ESCAPED NONLOCAL } same as LUtempvv
_80 = { NULL NONLOCAL } same as _1
_81 = { NULL NONLOCAL } same as _1
_82 = { ESCAPED NONLOCAL }
_83 = { NULL NONLOCAL } same as _1
_84 = { NULL NONLOCAL } same as _1
_85 = { NONLOCAL }
_86 = { NULL NONLOCAL } same as _1
_87 = { NULL NONLOCAL } same as _1
_88 = { NONLOCAL }
_89 = { ESCAPED NONLOCAL }
_90 = { NULL NONLOCAL } same as _1
_91 = { NULL NONLOCAL } same as _1
_92 = { NONLOCAL }
derefaddrtmp(142) = { NONLOCAL } same as a
_93 = { NONLOCAL } same as a
_94 = { NULL NONLOCAL } same as _1
_95 = { NULL NONLOCAL } same as _1
_96 = { NONLOCAL }
_97 = { ESCAPED NONLOCAL }
dum_169 = { ESCAPED NONLOCAL }
i_170 = { NULL NONLOCAL } same as _1
_98 = { NULL NONLOCAL } same as _1
i_117 = { NULL NONLOCAL } same as _1
_99 = { NULL NONLOCAL } same as _1
_100 = { NONLOCAL }
_101 = { ESCAPED NONLOCAL }
_102 = { NULL NONLOCAL } same as _1
_103 = { NULL NONLOCAL } same as _1
_104 = { NONLOCAL }
_105 = { ESCAPED NONLOCAL }
i_172 = { NULL NONLOCAL } same as _1
j_173 = { NULL NONLOCAL } same as _1
_126 = { NULL NONLOCAL } same as _1


Alias information for ludcmp

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }
LUtempvv.215_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to NULL, points-to vars: { }
_29, points-to non-local, points-to NULL, points-to vars: { }
_32, points-to non-local, points-to NULL, points-to vars: { }
_35, points-to non-local, points-to NULL, points-to vars: { }
_39, points-to non-local, points-to NULL, points-to vars: { }
_44, points-to non-local, points-to NULL, points-to vars: { }
LUtempvv.216_45, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_48, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_53, points-to non-local, points-to NULL, points-to vars: { }
_56, points-to non-local, points-to NULL, points-to vars: { }
_59, points-to non-local, points-to NULL, points-to vars: { }
_63, points-to non-local, points-to NULL, points-to vars: { }
LUtempvv.217_66, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_69, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
LUtempvv.218_70, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_73, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
LUtempvv.219_74, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_77, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
LUtempvv.220_79, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_82, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_85, points-to non-local, points-to NULL, points-to vars: { }
_88, points-to non-local, points-to NULL, points-to vars: { }
_92, points-to non-local, points-to NULL, points-to vars: { }
_96, points-to non-local, points-to NULL, points-to vars: { }
_100, points-to non-local, points-to NULL, points-to vars: { }
_104, points-to non-local, points-to NULL, points-to vars: { }
d_141(D), points-to non-local, points-to NULL, points-to vars: { }
a_148(D), points-to non-local, points-to NULL, points-to vars: { }
indx_166(D), points-to non-local, points-to NULL, points-to vars: { }

ludcmp (double[101] * a, int n, int * indx, int * d)
{
  double tiny;
  int imax;
  int k;
  int j;
  int i;
  double dum;
  double sum;
  double big;
  long unsigned int _1;
  long unsigned int _2;
  double[101] * _3;
  double _4;
  double _5;
  long unsigned int _6;
  long unsigned int _7;
  double[101] * _8;
  double _9;
  fardouble * LUtempvv.215_10;
  long unsigned int _11;
  long unsigned int _12;
  fardouble * _13;
  double _14;
  long unsigned int _15;
  long unsigned int _16;
  double[101] * _17;
  long unsigned int _18;
  long unsigned int _19;
  double[101] * _20;
  double _21;
  long unsigned int _22;
  long unsigned int _23;
  double[101] * _24;
  double _25;
  double _26;
  long unsigned int _27;
  long unsigned int _28;
  double[101] * _29;
  long unsigned int _30;
  long unsigned int _31;
  double[101] * _32;
  long unsigned int _33;
  long unsigned int _34;
  double[101] * _35;
  double _36;
  long unsigned int _37;
  long unsigned int _38;
  double[101] * _39;
  double _40;
  double _41;
  long unsigned int _42;
  long unsigned int _43;
  double[101] * _44;
  fardouble * LUtempvv.216_45;
  long unsigned int _46;
  long unsigned int _47;
  fardouble * _48;
  double _49;
  double _50;
  long unsigned int _51;
  long unsigned int _52;
  double[101] * _53;
  long unsigned int _54;
  long unsigned int _55;
  double[101] * _56;
  long unsigned int _57;
  long unsigned int _58;
  double[101] * _59;
  double _60;
  long unsigned int _61;
  long unsigned int _62;
  double[101] * _63;
  int _64;
  int _65;
  fardouble * LUtempvv.217_66;
  long unsigned int _67;
  long unsigned int _68;
  fardouble * _69;
  fardouble * LUtempvv.218_70;
  long unsigned int _71;
  long unsigned int _72;
  fardouble * _73;
  fardouble * LUtempvv.219_74;
  long unsigned int _75;
  long unsigned int _76;
  fardouble * _77;
  double _78;
  fardouble * LUtempvv.220_79;
  long unsigned int _80;
  long unsigned int _81;
  fardouble * _82;
  long unsigned int _83;
  long unsigned int _84;
  int * _85;
  long unsigned int _86;
  long unsigned int _87;
  double[101] * _88;
  double _89;
  long unsigned int _90;
  long unsigned int _91;
  double[101] * _92;
  int _93;
  long unsigned int _94;
  long unsigned int _95;
  double[101] * _96;
  double _97;
  long unsigned int _98;
  long unsigned int _99;
  double[101] * _100;
  double _101;
  long unsigned int _102;
  long unsigned int _103;
  double[101] * _104;
  double _105;
  int _126;

  <bb 2> [0.00%]:
  *d_141(D) = 1;
  goto <bb 9>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_114;
  _2 = _1 * 808;
  _3 = a_148(D) + _2;
  _4 = *_3[j_118];
  _5 = ABS_EXPR <_4>;
  if (_5 > big_107)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _6 = (long unsigned int) i_114;
  _7 = _6 * 808;
  _8 = a_148(D) + _7;
  _9 = *_8[j_118];
  big_188 = ABS_EXPR <_9>;

  <bb 5> [0.00%]:
  # big_106 = PHI <big_107(3), big_188(4)>
  j_189 = j_118 + 1;

  <bb 6> [0.00%]:
  # big_107 = PHI <0.0(9), big_106(5)>
  # j_118 = PHI <0(9), j_189(5)>
  if (j_118 < n_144(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  if (big_107 == 0.0)
    goto <bb 36>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  LUtempvv.215_10 = LUtempvv;
  _11 = (long unsigned int) i_114;
  _12 = _11 * 8;
  _13 = LUtempvv.215_10 + _12;
  _14 = 1.0e+0 / big_107;
  *_13 = _14;
  i_186 = i_114 + 1;

  <bb 9> [0.00%]:
  # i_114 = PHI <0(2), i_186(8)>
  if (i_114 < n_144(D))
    goto <bb 6>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 10> [0.00%]:
  if (j_119 != 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 11> [0.00%]:
  _15 = (long unsigned int) i_115;
  _16 = _15 * 808;
  _17 = a_148(D) + _16;
  sum_149 = *_17[j_119];
  if (i_115 != 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 12> [0.00%]:
  _18 = (long unsigned int) i_115;
  _19 = _18 * 808;
  _20 = a_148(D) + _19;
  _21 = *_20[k_120];
  _22 = (long unsigned int) k_120;
  _23 = _22 * 808;
  _24 = a_148(D) + _23;
  _25 = *_24[j_119];
  _26 = _21 * _25;
  sum_151 = sum_110 - _26;
  k_152 = k_120 + 1;

  <bb 13> [0.00%]:
  # sum_110 = PHI <sum_149(11), sum_151(12)>
  # k_120 = PHI <0(11), k_152(12)>
  if (i_115 > k_120)
    goto <bb 12>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [0.00%]:
  # sum_111 = PHI <sum_149(11), sum_110(13)>
  _27 = (long unsigned int) i_115;
  _28 = _27 * 808;
  _29 = a_148(D) + _28;
  *_29[j_119] = sum_111;
  i_154 = i_115 + 1;

  <bb 15> [0.00%]:
  # i_115 = PHI <0(10), i_154(14)>
  if (i_115 < j_119)
    goto <bb 11>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 16> [0.00%]:
  i_156 = j_119;
  goto <bb 23>; [0.00%]

  <bb 17> [0.00%]:
  _30 = (long unsigned int) i_116;
  _31 = _30 * 808;
  _32 = a_148(D) + _31;
  sum_174 = *_32[j_119];
  if (j_119 != 0)
    goto <bb 19>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 18> [0.00%]:
  _33 = (long unsigned int) i_116;
  _34 = _33 * 808;
  _35 = a_148(D) + _34;
  _36 = *_35[k_121];
  _37 = (long unsigned int) k_121;
  _38 = _37 * 808;
  _39 = a_148(D) + _38;
  _40 = *_39[j_119];
  _41 = _36 * _40;
  sum_176 = sum_112 - _41;
  k_177 = k_121 + 1;

  <bb 19> [0.00%]:
  # sum_112 = PHI <sum_174(17), sum_176(18)>
  # k_121 = PHI <0(17), k_177(18)>
  if (j_119 > k_121)
    goto <bb 18>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  # sum_113 = PHI <sum_174(17), sum_112(19)>
  _42 = (long unsigned int) i_116;
  _43 = _42 * 808;
  _44 = a_148(D) + _43;
  *_44[j_119] = sum_113;
  LUtempvv.216_45 = LUtempvv;
  _46 = (long unsigned int) i_116;
  _47 = _46 * 8;
  _48 = LUtempvv.216_45 + _47;
  _49 = *_48;
  _50 = ABS_EXPR <sum_113>;
  dum_179 = _49 * _50;
  if (big_109 <= dum_179)
    goto <bb 21>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 21> [0.00%]:
  imax_181 = i_116;

  <bb 22> [0.00%]:
  # big_108 = PHI <big_109(20), dum_179(21)>
  # imax_123 = PHI <imax_124(20), i_116(21)>
  i_182 = i_116 + 1;

  <bb 23> [0.00%]:
  # big_109 = PHI <0.0(16), big_108(22)>
  # i_116 = PHI <j_119(16), i_182(22)>
  # imax_124 = PHI <imax_125(16), imax_123(22)>
  if (i_116 < n_144(D))
    goto <bb 17>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 24> [0.00%]:
  if (j_119 != imax_124)
    goto <bb 26>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 25> [0.00%]:
  _51 = (long unsigned int) imax_124;
  _52 = _51 * 808;
  _53 = a_148(D) + _52;
  dum_162 = *_53[k_122];
  _54 = (long unsigned int) j_119;
  _55 = _54 * 808;
  _56 = a_148(D) + _55;
  _57 = (long unsigned int) imax_124;
  _58 = _57 * 808;
  _59 = a_148(D) + _58;
  _60 = *_56[k_122];
  *_59[k_122] = _60;
  _61 = (long unsigned int) j_119;
  _62 = _61 * 808;
  _63 = a_148(D) + _62;
  *_63[k_122] = dum_162;
  k_165 = k_122 + 1;

  <bb 26> [0.00%]:
  # k_122 = PHI <0(24), k_165(25)>
  if (k_122 < n_144(D))
    goto <bb 25>; [0.00%]
  else
    goto <bb 27>; [0.00%]

  <bb 27> [0.00%]:
  _64 = *d_141(D);
  _65 = -_64;
  *d_141(D) = _65;
  LUtempvv.217_66 = LUtempvv;
  _67 = (long unsigned int) imax_124;
  _68 = _67 * 8;
  _69 = LUtempvv.217_66 + _68;
  dum_159 = *_69;
  LUtempvv.218_70 = LUtempvv;
  _71 = (long unsigned int) j_119;
  _72 = _71 * 8;
  _73 = LUtempvv.218_70 + _72;
  LUtempvv.219_74 = LUtempvv;
  _75 = (long unsigned int) imax_124;
  _76 = _75 * 8;
  _77 = LUtempvv.219_74 + _76;
  _78 = *_73;
  *_77 = _78;
  LUtempvv.220_79 = LUtempvv;
  _80 = (long unsigned int) j_119;
  _81 = _80 * 8;
  _82 = LUtempvv.220_79 + _81;
  *_82 = dum_159;

  <bb 28> [0.00%]:
  _83 = (long unsigned int) j_119;
  _84 = _83 * 4;
  _85 = indx_166(D) + _84;
  *_85 = imax_124;
  _86 = (long unsigned int) j_119;
  _87 = _86 * 808;
  _88 = a_148(D) + _87;
  _89 = *_88[j_119];
  if (_89 == 0.0)
    goto <bb 29>; [0.00%]
  else
    goto <bb 30>; [0.00%]

  <bb 29> [0.00%]:
  _90 = (long unsigned int) j_119;
  _91 = _90 * 808;
  _92 = a_148(D) + _91;
  *_92[j_119] = 9.99999999999999945153271454209571651729503702787392447108e-21;

  <bb 30> [0.00%]:
  _93 = n_144(D) + -1;
  if (_93 != j_119)
    goto <bb 31>; [0.00%]
  else
    goto <bb 34>; [0.00%]

  <bb 31> [0.00%]:
  _94 = (long unsigned int) j_119;
  _95 = _94 * 808;
  _96 = a_148(D) + _95;
  _97 = *_96[j_119];
  dum_169 = 1.0e+0 / _97;
  i_170 = j_119 + 1;
  goto <bb 33>; [0.00%]

  <bb 32> [0.00%]:
  _98 = (long unsigned int) i_117;
  _99 = _98 * 808;
  _100 = a_148(D) + _99;
  _101 = *_100[j_119];
  _102 = (long unsigned int) i_117;
  _103 = _102 * 808;
  _104 = a_148(D) + _103;
  _105 = _101 * dum_169;
  *_104[j_119] = _105;
  i_172 = i_117 + 1;

  <bb 33> [0.00%]:
  # i_117 = PHI <i_170(31), i_172(32)>
  if (i_117 < n_144(D))
    goto <bb 32>; [0.00%]
  else
    goto <bb 34>; [0.00%]

  <bb 34> [0.00%]:
  j_173 = j_119 + 1;

  <bb 35> [0.00%]:
  # j_119 = PHI <0(9), j_173(34)>
  # imax_125 = PHI <0(9), imax_124(34)>
  if (j_119 < n_144(D))
    goto <bb 10>; [0.00%]
  else
    goto <bb 36>; [0.00%]

  <bb 36> [0.00%]:
  # _126 = PHI <0(7), 1(35)>
  return _126;

}



;; Function lubksb (lubksb, funcdef_no=116, decl_uid=4757, cgraph_uid=116, symbol_order=141)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
a = &NONLOCAL
n = &NONLOCAL
indx = &NONLOCAL
b = &NONLOCAL
_1 = i_47
_2 = _1
_2 = &NONLOCAL
_3 = indx + UNKNOWN
ip_73 = *_3
_4 = ip_73
_5 = _4
_5 = &NONLOCAL
_6 = b + UNKNOWN
sum_74 = *_6
_7 = i_47
_8 = _7
_8 = &NONLOCAL
_9 = b + UNKNOWN
_10 = ip_73
_11 = _10
_11 = &NONLOCAL
_12 = b + UNKNOWN
_13 = *_9
*_12 = _13
_14 = i_47
_15 = _14
_15 = &NONLOCAL
_16 = a + UNKNOWN
_17 = *_16 + UNKNOWN
_18 = j_49
_19 = _18
_19 = &NONLOCAL
_20 = b + UNKNOWN
_21 = *_20
_22 = _17
_22 = _21
sum_78 = sum_53
sum_78 = _22
j_79 = j_49
j_79 = &NONLOCAL
j_49 = ii_52
j_49 = j_79
sum_53 = sum_74
sum_53 = sum_78
ii_76 = i_47
ii_51 = ii_52
ii_51 = ii_52
ii_51 = i_47
sum_54 = sum_53
sum_54 = sum_74
sum_54 = sum_74
_23 = i_47
_24 = _23
_24 = &NONLOCAL
_25 = b + UNKNOWN
*_25 = sum_54
i_81 = i_47
i_81 = &NONLOCAL
i_47 = &NULL
i_47 = i_81
ii_52 = &NONLOCAL
ii_52 = ii_51
i_63 = n
i_63 = &NONLOCAL
_26 = i_48
_27 = _26
_27 = &NONLOCAL
_28 = b + UNKNOWN
sum_65 = *_28
_29 = n
_29 = &NONLOCAL
j_66 = i_48
j_66 = &NONLOCAL
_30 = i_48
_31 = _30
_31 = &NONLOCAL
_32 = a + UNKNOWN
_33 = *_32 + UNKNOWN
_34 = j_50
_35 = _34
_35 = &NONLOCAL
_36 = b + UNKNOWN
_37 = *_36
_38 = _33
_38 = _37
sum_68 = sum_55
sum_68 = _38
j_69 = j_50
j_69 = &NONLOCAL
j_50 = j_66
j_50 = j_69
sum_55 = sum_65
sum_55 = sum_68
sum_56 = sum_65
sum_56 = sum_55
_39 = i_48
_40 = _39
_40 = &NONLOCAL
_41 = a + UNKNOWN
_42 = *_41 + UNKNOWN
_43 = i_48
_44 = _43
_44 = &NONLOCAL
_45 = b + UNKNOWN
_46 = sum_56
_46 = _42
*_45 = _46
i_71 = i_48
i_71 = &NONLOCAL
i_48 = i_63
i_48 = i_71

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"a"[label="a = { 5 }"];
"n"[label="n = { 5 }"];
"indx"[label="indx = { 5 }"];
"b"[label="b = { 5 }"];
"_1";
"i_47"[label="i_47 = { 1 5 }"];
"_2"[label="_2 = { 5 }"];
"_3";
"ip_73";
"_4";
"_5"[label="_5 = { 5 }"];
"_6";
"sum_74";
"_7";
"_8"[label="_8 = { 5 }"];
"_9";
"_10";
"_11"[label="_11 = { 5 }"];
"_12";
"_13";
"_14";
"_15"[label="_15 = { 5 }"];
"_16";
"_17";
"_18";
"j_49"[label="j_49 = { 5 }"];
"_19"[label="_19 = { 5 }"];
"_20";
"_21";
"_22";
"sum_78";
"ii_52"[label="ii_52 = { 5 }"];
"ii_76";
"sum_54";
"_23";
"_24"[label="_24 = { 5 }"];
"_25";
"i_63"[label="i_63 = { 5 }"];
"_26";
"i_48"[label="i_48 = { 5 }"];
"_27"[label="_27 = { 5 }"];
"_28";
"sum_65";
"_29"[label="_29 = { 5 }"];
"j_66"[label="j_66 = { 5 }"];
"_30";
"_31"[label="_31 = { 5 }"];
"_32";
"_33";
"_34";
"j_50"[label="j_50 = { 5 }"];
"_35"[label="_35 = { 5 }"];
"_36";
"_37";
"_38";
"sum_68";
"sum_56";
"_39";
"_40"[label="_40 = { 5 }"];
"_41";
"_42";
"_43";
"_44"[label="_44 = { 5 }"];
"_45";
"_46";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*a";
"*n";
"*indx";
"*b";
"*_1";
"*i_47";
"*_2";
"*_3";
"*ip_73";
"*_4";
"*_5";
"*_6";
"*sum_74";
"*_7";
"*_8";
"*_9";
"*_10";
"*_11";
"*_12";
"*_13";
"*_14";
"*_15";
"*_16";
"*_17";
"*_18";
"*j_49";
"*_19";
"*_20";
"*_21";
"*_22";
"*sum_78";
"*sum_53";
"*j_79";
"*ii_52";
"*ii_76";
"*ii_51";
"*sum_54";
"*_23";
"*_24";
"*_25";
"*i_81";
"*i_63";
"*_26";
"*i_48";
"*_27";
"*_28";
"*sum_65";
"*_29";
"*j_66";
"*_30";
"*_31";
"*_32";
"*_33";
"*_34";
"*j_50";
"*_35";
"*_36";
"*_37";
"*_38";
"*sum_68";
"*sum_55";
"*j_69";
"*sum_56";
"*_39";
"*_40";
"*_41";
"*_42";
"*_43";
"*_44";
"*_45";
"*_46";
"*i_71";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"i_47" -> "_1";
"i_47" -> "i_47";
"i_47" -> "i_47";
"_1" -> "_2";
"*_3" -> "ip_73";
"ip_73" -> "_4";
"_4" -> "_5";
"*_6" -> "sum_74";
"i_47" -> "_7";
"_7" -> "_8";
"ip_73" -> "_10";
"_10" -> "_11";
"*_9" -> "_13";
"i_47" -> "_14";
"_14" -> "_15";
"j_49" -> "_18";
"j_49" -> "j_49";
"j_49" -> "j_49";
"ii_52" -> "j_49";
"_18" -> "_19";
"*_20" -> "_21";
"_17" -> "_22";
"_21" -> "_22";
"sum_74" -> "sum_78";
"_22" -> "sum_78";
"sum_78" -> "sum_78";
"sum_78" -> "sum_78";
"i_47" -> "ii_52";
"ii_52" -> "ii_52";
"ii_52" -> "ii_52";
"i_47" -> "ii_76";
"sum_74" -> "sum_54";
"sum_78" -> "sum_54";
"i_47" -> "_23";
"_23" -> "_24";
"n" -> "i_63";
"i_48" -> "_26";
"i_63" -> "i_48";
"i_48" -> "i_48";
"i_48" -> "i_48";
"_26" -> "_27";
"*_28" -> "sum_65";
"n" -> "_29";
"i_48" -> "j_66";
"i_48" -> "_30";
"_30" -> "_31";
"j_50" -> "_34";
"j_66" -> "j_50";
"j_50" -> "j_50";
"j_50" -> "j_50";
"_34" -> "_35";
"*_36" -> "_37";
"_33" -> "_38";
"_37" -> "_38";
"sum_65" -> "sum_68";
"_38" -> "sum_68";
"sum_68" -> "sum_68";
"sum_68" -> "sum_68";
"sum_65" -> "sum_56";
"sum_68" -> "sum_56";
"i_48" -> "_39";
"_39" -> "_40";
"i_48" -> "_43";
"_43" -> "_44";
"sum_56" -> "_46";
"_42" -> "_46";
"NONLOCAL" -> "*ESCAPED";
"_13" -> "*_12";
"sum_54" -> "*_25";
"_46" -> "*_45";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"a" [label="\N\n_3 = a + UNKNOWN\l_6 = a + UNKNOWN\l_9 = a + UNKNOWN\l_12 = a + UNKNOWN\l_16 = a + UNKNOWN\l_20 = a + UNKNOWN\l_25 = a + UNKNOWN\l_28 = a + UNKNOWN\l_32 = a + UNKNOWN\l_36 = a + UNKNOWN\l_41 = a + UNKNOWN\l_45 = a + UNKNOWN\l"];
"_1";
"_3" [label="\N\nip_73 = *_3\l"];
"ip_73";
"_5";
"_6" [label="\N\nsum_74 = *_6\l"];
"sum_74";
"_9" [label="\N\n_13 = *_9\l"];
"_12" [label="\N\n*_12 = _13\l"];
"_13";
"_16" [label="\N\n_17 = *_16 + UNKNOWN\l"];
"_17";
"_20" [label="\N\n_21 = *_20\l"];
"_21";
"_22";
"sum_78";
"_25" [label="\N\n*_25 = sum_78\l"];
"_28" [label="\N\nsum_65 = *_28\l"];
"sum_65";
"_32" [label="\N\n_33 = *_32 + UNKNOWN\l"];
"_33";
"_36" [label="\N\n_37 = *_36\l"];
"_37";
"_38";
"sum_68";
"_41" [label="\N\n_42 = *_41 + UNKNOWN\l"];
"_42";
"_45" [label="\N\n*_45 = _46\l"];
"_46";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_6";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_12";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_28";
"STOREDANYTHING" -> "_32";
"STOREDANYTHING" -> "_33";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_41";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_45";
"ip_73" -> "_5";
"sum_74" -> "sum_78";
"_17" -> "_22";
"_21" -> "_22";
"_22" -> "sum_78";
"sum_65" -> "sum_68";
"_33" -> "_38";
"_37" -> "_38";
"_38" -> "sum_68";
"sum_68" -> "_46";
"_42" -> "_46";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"a" [label="\N\n_3 = a + UNKNOWN\l_6 = a + UNKNOWN\l_9 = a + UNKNOWN\l_12 = a + UNKNOWN\l_16 = a + UNKNOWN\l_20 = a + UNKNOWN\l_25 = a + UNKNOWN\l_28 = a + UNKNOWN\l_32 = a + UNKNOWN\l_36 = a + UNKNOWN\l_41 = a + UNKNOWN\l_45 = a + UNKNOWN\l"];
"_1";
"_3" [label="\N\nip_73 = *_3\l"];
"ip_73";
"_5";
"_6" [label="\N\nsum_74 = *_6\l"];
"sum_74";
"_9" [label="\N\n_13 = *_9\l"];
"_12" [label="\N\n*_12 = _13\l"];
"_13";
"_16" [label="\N\n_17 = *_16 + UNKNOWN\l"];
"_17";
"_20" [label="\N\n_21 = *_20\l"];
"_21";
"_22";
"sum_78";
"_25" [label="\N\n*_25 = sum_78\l"];
"_28" [label="\N\nsum_65 = *_28\l"];
"sum_65";
"_32" [label="\N\n_33 = *_32 + UNKNOWN\l"];
"_33";
"_36" [label="\N\n_37 = *_36\l"];
"_37";
"_38";
"sum_68";
"_41" [label="\N\n_42 = *_41 + UNKNOWN\l"];
"_42";
"_45" [label="\N\n*_45 = _46\l"];
"_46";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_6";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_12";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_28";
"STOREDANYTHING" -> "_32";
"STOREDANYTHING" -> "_33";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_41";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_45";
"ip_73" -> "_5";
"sum_74" -> "sum_78";
"_13" -> "ESCAPED";
"_17" -> "_22";
"_21" -> "_22";
"_22" -> "sum_78";
"sum_78" -> "ESCAPED";
"sum_65" -> "sum_68";
"_33" -> "_38";
"_37" -> "_38";
"_38" -> "sum_68";
"sum_68" -> "_46";
"_42" -> "_46";
"_46" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
a = { NONLOCAL }
n = { NONLOCAL } same as a
indx = { NONLOCAL } same as a
b = { NONLOCAL } same as a
_1 = { NULL NONLOCAL }
i_47 = { NULL NONLOCAL } same as _1
_2 = { NULL NONLOCAL } same as _1
_3 = { NONLOCAL }
ip_73 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as ip_73
_5 = { ESCAPED NONLOCAL }
_6 = { NONLOCAL }
sum_74 = { ESCAPED NONLOCAL }
_7 = { NULL NONLOCAL } same as _1
_8 = { NULL NONLOCAL } same as _1
_9 = { NONLOCAL }
_10 = { ESCAPED NONLOCAL } same as ip_73
_11 = { ESCAPED NONLOCAL } same as _5
_12 = { NONLOCAL }
_13 = { ESCAPED NONLOCAL }
_14 = { NULL NONLOCAL } same as _1
_15 = { NULL NONLOCAL } same as _1
_16 = { NONLOCAL }
_17 = { ESCAPED NONLOCAL }
_18 = { NULL NONLOCAL } same as _1
j_49 = { NULL NONLOCAL } same as _1
_19 = { NULL NONLOCAL } same as _1
_20 = { NONLOCAL }
_21 = { ESCAPED NONLOCAL }
_22 = { ESCAPED NONLOCAL }
sum_78 = { ESCAPED NONLOCAL }
sum_53 = { ESCAPED NONLOCAL } same as sum_78
j_79 = { NULL NONLOCAL } same as _1
ii_52 = { NULL NONLOCAL } same as _1
ii_76 = { NULL NONLOCAL } same as _1
ii_51 = { NULL NONLOCAL } same as _1
sum_54 = { ESCAPED NONLOCAL } same as sum_78
_23 = { NULL NONLOCAL } same as _1
_24 = { NULL NONLOCAL } same as _1
_25 = { NONLOCAL }
i_81 = { NULL NONLOCAL } same as _1
i_63 = { NONLOCAL } same as a
_26 = { NONLOCAL } same as a
i_48 = { NONLOCAL } same as a
_27 = { NONLOCAL } same as a
_28 = { NONLOCAL }
sum_65 = { ESCAPED NONLOCAL }
_29 = { NONLOCAL } same as a
j_66 = { NONLOCAL } same as a
_30 = { NONLOCAL } same as a
_31 = { NONLOCAL } same as a
_32 = { NONLOCAL }
_33 = { ESCAPED NONLOCAL }
_34 = { NONLOCAL } same as a
j_50 = { NONLOCAL } same as a
_35 = { NONLOCAL } same as a
_36 = { NONLOCAL }
_37 = { ESCAPED NONLOCAL }
_38 = { ESCAPED NONLOCAL }
sum_68 = { ESCAPED NONLOCAL }
sum_55 = { ESCAPED NONLOCAL } same as sum_68
j_69 = { NONLOCAL } same as a
sum_56 = { ESCAPED NONLOCAL } same as sum_68
_39 = { NONLOCAL } same as a
_40 = { NONLOCAL } same as a
_41 = { NONLOCAL }
_42 = { ESCAPED NONLOCAL }
_43 = { NONLOCAL } same as a
_44 = { NONLOCAL } same as a
_45 = { NONLOCAL }
_46 = { ESCAPED NONLOCAL }
i_71 = { NONLOCAL } same as a


Alias information for lubksb

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to NULL, points-to vars: { }
_28, points-to non-local, points-to NULL, points-to vars: { }
_32, points-to non-local, points-to NULL, points-to vars: { }
_36, points-to non-local, points-to NULL, points-to vars: { }
_41, points-to non-local, points-to NULL, points-to vars: { }
_45, points-to non-local, points-to NULL, points-to vars: { }
b_64(D), points-to non-local, points-to NULL, points-to vars: { }
a_67(D), points-to non-local, points-to NULL, points-to vars: { }
indx_72(D), points-to non-local, points-to NULL, points-to vars: { }

lubksb (double[101] * a, int n, int * indx, double * b)
{
  double sum;
  int ii;
  int ip;
  int j;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  long unsigned int _4;
  long unsigned int _5;
  double * _6;
  long unsigned int _7;
  long unsigned int _8;
  double * _9;
  long unsigned int _10;
  long unsigned int _11;
  double * _12;
  double _13;
  long unsigned int _14;
  long unsigned int _15;
  double[101] * _16;
  double _17;
  long unsigned int _18;
  long unsigned int _19;
  double * _20;
  double _21;
  double _22;
  long unsigned int _23;
  long unsigned int _24;
  double * _25;
  long unsigned int _26;
  long unsigned int _27;
  double * _28;
  int _29;
  long unsigned int _30;
  long unsigned int _31;
  double[101] * _32;
  double _33;
  long unsigned int _34;
  long unsigned int _35;
  double * _36;
  double _37;
  double _38;
  long unsigned int _39;
  long unsigned int _40;
  double[101] * _41;
  double _42;
  long unsigned int _43;
  long unsigned int _44;
  double * _45;
  double _46;

  <bb 2> [0.00%]:
  goto <bb 9>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_47;
  _2 = _1 * 4;
  _3 = indx_72(D) + _2;
  ip_73 = *_3;
  _4 = (long unsigned int) ip_73;
  _5 = _4 * 8;
  _6 = b_64(D) + _5;
  sum_74 = *_6;
  _7 = (long unsigned int) i_47;
  _8 = _7 * 8;
  _9 = b_64(D) + _8;
  _10 = (long unsigned int) ip_73;
  _11 = _10 * 8;
  _12 = b_64(D) + _11;
  _13 = *_9;
  *_12 = _13;
  if (ii_52 != -1)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  _14 = (long unsigned int) i_47;
  _15 = _14 * 808;
  _16 = a_67(D) + _15;
  _17 = *_16[j_49];
  _18 = (long unsigned int) j_49;
  _19 = _18 * 8;
  _20 = b_64(D) + _19;
  _21 = *_20;
  _22 = _17 * _21;
  sum_78 = sum_53 - _22;
  j_79 = j_49 + 1;

  <bb 5> [0.00%]:
  # j_49 = PHI <ii_52(3), j_79(4)>
  # sum_53 = PHI <sum_74(3), sum_78(4)>
  if (i_47 > j_49)
    goto <bb 4>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 6> [0.00%]:
  if (sum_74 != 0.0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  ii_76 = i_47;

  <bb 8> [0.00%]:
  # ii_51 = PHI <ii_52(5), ii_52(6), i_47(7)>
  # sum_54 = PHI <sum_53(5), sum_74(6), sum_74(7)>
  _23 = (long unsigned int) i_47;
  _24 = _23 * 8;
  _25 = b_64(D) + _24;
  *_25 = sum_54;
  i_81 = i_47 + 1;

  <bb 9> [0.00%]:
  # i_47 = PHI <0(2), i_81(8)>
  # ii_52 = PHI <-1(2), ii_51(8)>
  if (i_47 < n_62(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  i_63 = n_62(D) + -1;
  goto <bb 16>; [0.00%]

  <bb 11> [0.00%]:
  _26 = (long unsigned int) i_48;
  _27 = _26 * 8;
  _28 = b_64(D) + _27;
  sum_65 = *_28;
  _29 = n_62(D) + -1;
  if (_29 != i_48)
    goto <bb 12>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 12> [0.00%]:
  j_66 = i_48 + 1;
  goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  _30 = (long unsigned int) i_48;
  _31 = _30 * 808;
  _32 = a_67(D) + _31;
  _33 = *_32[j_50];
  _34 = (long unsigned int) j_50;
  _35 = _34 * 8;
  _36 = b_64(D) + _35;
  _37 = *_36;
  _38 = _33 * _37;
  sum_68 = sum_55 - _38;
  j_69 = j_50 + 1;

  <bb 14> [0.00%]:
  # j_50 = PHI <j_66(12), j_69(13)>
  # sum_55 = PHI <sum_65(12), sum_68(13)>
  if (j_50 < n_62(D))
    goto <bb 13>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 15> [0.00%]:
  # sum_56 = PHI <sum_65(11), sum_55(14)>
  _39 = (long unsigned int) i_48;
  _40 = _39 * 808;
  _41 = a_67(D) + _40;
  _42 = *_41[i_48];
  _43 = (long unsigned int) i_48;
  _44 = _43 * 8;
  _45 = b_64(D) + _44;
  _46 = sum_56 / _42;
  *_45 = _46;
  i_71 = i_48 + -1;

  <bb 16> [0.00%]:
  # i_48 = PHI <i_63(10), i_71(15)>
  if (i_48 >= 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 17> [0.00%]:
  return;

}



;; Function lusolve (lusolve, funcdef_no=117, decl_uid=4761, cgraph_uid=117, symbol_order=142)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
a = &NONLOCAL
n = &NONLOCAL
b = &NONLOCAL
ESCAPED = a
ESCAPED = n
ESCAPED = &indx
ESCAPED = &d
_1 = NONLOCAL
ESCAPED = a
ESCAPED = n
ESCAPED = &indx
ESCAPED = b
_2 = &NULL
_2 = &NONLOCAL
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 12 13 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"a"[label="a = { 5 }"];
"n"[label="n = { 5 }"];
"b"[label="b = { 5 }"];
"ludcmp";
"indx";
"d";
"_1";
"lubksb";
"_2"[label="_2 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*a";
"*n";
"*b";
"*ludcmp";
"*indx";
"*d";
"*_1";
"*lubksb";
"*_2";

  // Edges in the constraint graph:
"a" -> "ESCAPED";
"n" -> "ESCAPED";
"b" -> "ESCAPED";
"_2" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_1";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"a";
"ludcmp";
"indx";
"d";
"_1";
"lubksb";
"_2";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "indx";
"STOREDANYTHING" -> "d";
"a" -> "ESCAPED";
"_2" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _1\l"];
"STOREDANYTHING";
"INTEGER";
"a";
"ludcmp";
"indx";
"d";
"_1";
"lubksb";
"_2";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "indx";
"STOREDANYTHING" -> "d";
"a" -> "ESCAPED";
"indx" -> "ESCAPED";
"d" -> "ESCAPED";
"_1" -> "ESCAPED";
"_1" -> "indx";
"_1" -> "d";
"_2" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL indx d }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
a = { NONLOCAL }
n = { NONLOCAL } same as a
b = { NONLOCAL } same as a
ludcmp = { }
indx = { ESCAPED NONLOCAL }
d = { ESCAPED NONLOCAL }
_1 = { ESCAPED NONLOCAL }
lubksb = { }
_2 = { NULL NONLOCAL }


Alias information for lusolve

Aliased symbols

d, UID D.5808, int, is addressable
indx, UID D.5807, int[101], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.5807 D.5808 } (escaped)

Flow-insensitive points-to information

a_5(D), points-to non-local, points-to NULL, points-to vars: { }
b_8(D), points-to non-local, points-to NULL, points-to vars: { }

lusolve (double[101] * a, int n, double * b)
{
  int d;
  int indx[101];
  int _1;
  int _2;

  <bb 2> [0.00%]:
  _1 = ludcmp (a_5(D), n_6(D), &indx, &d);
  if (_1 == 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  lubksb (a_5(D), n_6(D), &indx, b_8(D));

  <bb 4> [0.00%]:
  # _2 = PHI <0(2), 1(3)>
  indx ={v} {CLOBBER};
  d ={v} {CLOBBER};
  return _2;

}



;; Function LUFreeMem (LUFreeMem, funcdef_no=112, decl_uid=4737, cgraph_uid=112, symbol_order=137)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
a = &NONLOCAL
b = &NONLOCAL
abase = &NONLOCAL
bbase = &NONLOCAL
ESCAPED = a
ESCAPED = &systemerror
ESCAPED = b
ESCAPED = &systemerror
LUtempvv = NONLOCAL
LUtempvv.221_1 = LUtempvv
ESCAPED = LUtempvv.221_1
ESCAPED = &systemerror
ESCAPED = abase
ESCAPED = &systemerror
ESCAPED = bbase
ESCAPED = &systemerror

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 13 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"a"[label="a = { 5 }"];
"b"[label="b = { 5 }"];
"abase"[label="abase = { 5 }"];
"bbase"[label="bbase = { 5 }"];
"FreeMemory";
"systemerror";
"LUtempvv.221_1";
"LUtempvv";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*a";
"*b";
"*abase";
"*bbase";
"*FreeMemory";
"*systemerror";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"a" -> "ESCAPED";
"b" -> "ESCAPED";
"abase" -> "ESCAPED";
"bbase" -> "ESCAPED";
"LUtempvv.221_1" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"LUtempvv" -> "LUtempvv.221_1";
"NONLOCAL" -> "LUtempvv";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"a";
"FreeMemory";
"systemerror";
"LUtempvv";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror";
"a" -> "ESCAPED";
"LUtempvv" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = LUtempvv\l"];
"STOREDANYTHING";
"INTEGER";
"a";
"FreeMemory";
"systemerror";
"LUtempvv";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror";
"a" -> "ESCAPED";
"systemerror" -> "ESCAPED";
"LUtempvv" -> "ESCAPED";
"LUtempvv" -> "systemerror";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL systemerror }
NONLOCAL = { ESCAPED NONLOCAL } same as LUtempvv
STOREDANYTHING = { }
INTEGER = { ANYTHING }
a = { NONLOCAL }
b = { NONLOCAL } same as a
abase = { NONLOCAL } same as a
bbase = { NONLOCAL } same as a
FreeMemory = { }
systemerror = { ESCAPED NONLOCAL }
LUtempvv.221_1 = { ESCAPED NONLOCAL } same as LUtempvv
LUtempvv = { ESCAPED NONLOCAL }


Alias information for LUFreeMem

Aliased symbols

systemerror, UID D.5690, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.5690 } (escaped)

Flow-insensitive points-to information

LUtempvv.221_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
a_5(D), points-to non-local, points-to NULL, points-to vars: { }
b_7(D), points-to non-local, points-to NULL, points-to vars: { }
abase_10(D), points-to non-local, points-to NULL, points-to vars: { }
bbase_12(D), points-to non-local, points-to NULL, points-to vars: { }

LUFreeMem (fardouble * a, fardouble * b, fardouble * abase, fardouble * bbase)
{
  int systemerror;
  fardouble * LUtempvv.221_1;

  <bb 2> [0.00%]:
  FreeMemory (a_5(D), &systemerror);
  FreeMemory (b_7(D), &systemerror);
  LUtempvv.221_1 = LUtempvv;
  FreeMemory (LUtempvv.221_1, &systemerror);
  if (abase_10(D) != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  FreeMemory (abase_10(D), &systemerror);

  <bb 4> [0.00%]:
  if (bbase_12(D) != 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  FreeMemory (bbase_12(D), &systemerror);

  <bb 6> [0.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoIDEAIteration (DoIDEAIteration, funcdef_no=83, decl_uid=4632, cgraph_uid=83, symbol_order=108)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
plain1 = &NONLOCAL
crypt1 = &NONLOCAL
plain2 = &NONLOCAL
arraysize = &NONLOCAL
nloops = &NONLOCAL
Z = &NONLOCAL
DK = &NONLOCAL
elapsed_13 = NONLOCAL
_1 = crypt1 + UNKNOWN
_2 = plain1 + UNKNOWN
ESCAPED = _2
ESCAPED = _1
ESCAPED = Z
j_30 = j_6
j_30 = &NONLOCAL
j_6 = &NULL
j_6 = j_30
_3 = plain2 + UNKNOWN
_4 = crypt1 + UNKNOWN
ESCAPED = _4
ESCAPED = _3
ESCAPED = DK
j_26 = j_7
j_26 = &NONLOCAL
j_7 = &NULL
j_7 = j_26
i_21 = i_5
i_21 = &NONLOCAL
i_5 = &NULL
i_5 = i_21
ESCAPED = elapsed_13
_17 = NONLOCAL
ESCAPED = _17

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"plain1"[label="plain1 = { 5 }"];
"crypt1"[label="crypt1 = { 5 }"];
"plain2"[label="plain2 = { 5 }"];
"arraysize"[label="arraysize = { 5 }"];
"nloops"[label="nloops = { 5 }"];
"Z"[label="Z = { 5 }"];
"DK"[label="DK = { 5 }"];
"StartStopwatch";
"elapsed_13";
"_1";
"_2";
"cipher_idea";
"j_30"[label="j_30 = { 1 5 }"];
"_3";
"_4";
"j_26"[label="j_26 = { 1 5 }"];
"i_21"[label="i_21 = { 1 5 }"];
"StopStopwatch";
"_17";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*plain1";
"*crypt1";
"*plain2";
"*arraysize";
"*nloops";
"*Z";
"*DK";
"*StartStopwatch";
"*_1";
"*_2";
"*cipher_idea";
"*j_30";
"*j_6";
"*_3";
"*_4";
"*j_26";
"*j_7";
"*i_21";
"*i_5";
"*StopStopwatch";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"Z" -> "ESCAPED";
"DK" -> "ESCAPED";
"elapsed_13" -> "ESCAPED";
"_1" -> "ESCAPED";
"_2" -> "ESCAPED";
"_3" -> "ESCAPED";
"_4" -> "ESCAPED";
"_17" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "elapsed_13";
"j_30" -> "j_30";
"j_30" -> "j_30";
"j_26" -> "j_26";
"j_26" -> "j_26";
"i_21" -> "i_21";
"i_21" -> "i_21";
"NONLOCAL" -> "_17";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"plain1" [label="\N\n_1 = plain1 + UNKNOWN\l_2 = plain1 + UNKNOWN\l_3 = plain1 + UNKNOWN\l_4 = plain1 + UNKNOWN\l"];
"StartStopwatch";
"elapsed_13";
"_1";
"_2";
"cipher_idea";
"j_30";
"_3";
"_4";
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_4";
"plain1" -> "ESCAPED";
"elapsed_13" -> "ESCAPED";
"_1" -> "ESCAPED";
"_2" -> "ESCAPED";
"_3" -> "ESCAPED";
"_4" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = elapsed_13\l"];
"STOREDANYTHING";
"INTEGER";
"plain1" [label="\N\n_1 = plain1 + UNKNOWN\l_2 = plain1 + UNKNOWN\l_3 = plain1 + UNKNOWN\l_4 = plain1 + UNKNOWN\l"];
"StartStopwatch";
"elapsed_13";
"_1";
"_2";
"cipher_idea";
"j_30";
"_3";
"_4";
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_4";
"plain1" -> "ESCAPED";
"elapsed_13" -> "ESCAPED";
"_1" -> "ESCAPED";
"_2" -> "ESCAPED";
"_3" -> "ESCAPED";
"_4" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as elapsed_13
STOREDANYTHING = { }
INTEGER = { ANYTHING }
plain1 = { NONLOCAL }
crypt1 = { NONLOCAL } same as plain1
plain2 = { NONLOCAL } same as plain1
arraysize = { NONLOCAL } same as plain1
nloops = { NONLOCAL } same as plain1
Z = { NONLOCAL } same as plain1
DK = { NONLOCAL } same as plain1
StartStopwatch = { }
elapsed_13 = { ESCAPED NONLOCAL }
_1 = { NONLOCAL }
_2 = { NONLOCAL }
cipher_idea = { }
j_30 = { NULL NONLOCAL }
j_6 = { NULL NONLOCAL } same as j_30
_3 = { NONLOCAL }
_4 = { NONLOCAL }
j_26 = { NULL NONLOCAL } same as j_30
j_7 = { NULL NONLOCAL } same as j_30
i_21 = { NULL NONLOCAL } same as j_30
i_5 = { NULL NONLOCAL } same as j_30
StopStopwatch = { }
_17 = { ESCAPED NONLOCAL } same as elapsed_13


Alias information for DoIDEAIteration

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }
plain2_22(D), points-to non-local, points-to NULL, points-to vars: { }
crypt1_23(D), points-to non-local, points-to NULL, points-to vars: { }
DK_24(D), points-to non-local, points-to NULL, points-to vars: { }
plain1_27(D), points-to non-local, points-to NULL, points-to vars: { }
Z_28(D), points-to non-local, points-to NULL, points-to vars: { }

DoIDEAIteration (faruchar * plain1, faruchar * crypt1, faruchar * plain2, long unsigned int arraysize, long unsigned int nloops, u16 * Z, u16 * DK)
{
  long unsigned int elapsed;
  register long unsigned int j;
  register long unsigned int i;
  faruchar * _1;
  faruchar * _2;
  faruchar * _3;
  faruchar * _4;
  long unsigned int _17;

  <bb 2> [0.00%]:
  elapsed_13 = StartStopwatch ();
  goto <bb 8>; [0.00%]

  <bb 3> [0.00%]:
  _1 = crypt1_23(D) + j_6;
  _2 = plain1_27(D) + j_6;
  cipher_idea (_2, _1, Z_28(D));
  j_30 = j_6 + 8;

  <bb 4> [0.00%]:
  # j_6 = PHI <0(8), j_30(3)>
  if (j_6 < arraysize_19(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _3 = plain2_22(D) + j_7;
  _4 = crypt1_23(D) + j_7;
  cipher_idea (_4, _3, DK_24(D));
  j_26 = j_7 + 8;

  <bb 6> [0.00%]:
  # j_7 = PHI <0(4), j_26(5)>
  if (j_7 < arraysize_19(D))
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  i_21 = i_5 + 1;

  <bb 8> [0.00%]:
  # i_5 = PHI <0(2), i_21(7)>
  if (i_5 < nloops_15(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  _17 = StopStopwatch (elapsed_13);
  return _17;

}



;; Function DoHuffIteration (DoHuffIteration, funcdef_no=92, decl_uid=4671, cgraph_uid=92, symbol_order=117)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
plaintext = &NONLOCAL
comparray = &NONLOCAL
decomparray = &NONLOCAL
arraysize = &NONLOCAL
nloops = &NONLOCAL
hufftree = &NONLOCAL
elapsed_182 = NONLOCAL
_1 = i_140
_2 = _1
_2 = &NONLOCAL
_3 = hufftree + UNKNOWN
derefaddrtmp(20) = &NONLOCAL
*_3 + 32 = derefaddrtmp(20)
_4 = i_140
_5 = _4
_5 = &NONLOCAL
_6 = hufftree + UNKNOWN
_7 = i_140
*_6 = _7
i_251 = i_140
i_251 = &NONLOCAL
i_140 = &NULL
i_140 = i_251
j.159_8 = j_148
_9 = plaintext + UNKNOWN
_10 = *_9
_11 = _10
_12 = _11
_12 = &NONLOCAL
_13 = hufftree + UNKNOWN
_14 = *_13 + 32
j.160_15 = j_148
_16 = plaintext + UNKNOWN
_17 = *_16
_18 = _17
_19 = _18
_19 = &NONLOCAL
_20 = hufftree + UNKNOWN
_21 = _14
_21 = &NONLOCAL
*_20 + 32 = _21
j_248 = j_148
j_248 = &NONLOCAL
j_148 = &NULL
j_148 = j_248
j.161_22 = j_148
_23 = i_141
_24 = _23
_24 = &NONLOCAL
_25 = hufftree + UNKNOWN
_26 = *_25 + 32
_27 = i_141
_28 = _27
_28 = &NONLOCAL
_29 = hufftree + UNKNOWN
_30 = *_29 + 32
_31 = arraysize
_32 = i_141
_33 = _32
_33 = &NONLOCAL
_34 = hufftree + UNKNOWN
_35 = _30
_35 = _31
*_34 + 32 = _35
i_246 = i_141
i_246 = &NONLOCAL
i_141 = &NULL
i_141 = i_246
_36 = hufftree + 40960
CALLUSED(60) = CALLUSED(60) + UNKNOWN
CALLUSED(60) = *CALLUSED(60) + UNKNOWN
CALLUSED(60) = _36
CALLUSED(60) = &NULL
_222 = CALLUSED(60)
_222 = NONLOCAL
derefaddrtmp(63) = &NULL
*_36 + UNKNOWN = derefaddrtmp(63)
_37 = i_142
_38 = _37
_38 = &NONLOCAL
_39 = hufftree + UNKNOWN
_40 = *_39 + 32
_41 = i_142
_42 = _41
_42 = &NONLOCAL
_43 = hufftree + UNKNOWN
derefaddrtmp(72) = &NONLOCAL
*_43 + 64 = derefaddrtmp(72)
_44 = i_142
_45 = _44
_45 = &NONLOCAL
_46 = hufftree + UNKNOWN
derefaddrtmp(76) = &NONLOCAL
*_46 + 128 = derefaddrtmp(76)
_47 = i_142
_48 = _47
_48 = &NONLOCAL
_49 = hufftree + UNKNOWN
_50 = *_46 + 128
*_49 + 96 = _50
_51 = i_142
_52 = _51
_52 = &NONLOCAL
_53 = hufftree + UNKNOWN
_54 = *_49 + 96
*_53 + 64 = _54
i_244 = i_142
i_244 = &NONLOCAL
i_142 = &NULL
i_142 = i_244
root_149 = &NONLOCAL
root_149 = root_202
_55 = i_143
_56 = _55
_56 = &NONLOCAL
_57 = hufftree + UNKNOWN
_58 = *_57 + 64
_59 = i_143
_60 = _59
_60 = &NONLOCAL
_61 = hufftree + UNKNOWN
_62 = *_61 + 32
_63 = i_143
_64 = _63
_64 = &NONLOCAL
_65 = hufftree + UNKNOWN
lowfreq1_237 = *_65 + 32
lowidx1_238 = i_143
lowfreq1_150 = lowfreq1_151
lowfreq1_150 = lowfreq1_151
lowfreq1_150 = lowfreq1_237
lowidx1_154 = lowidx1_155
lowidx1_154 = lowidx1_155
lowidx1_154 = i_143
i_239 = i_143
i_239 = &NONLOCAL
i_143 = &NULL
i_143 = i_239
lowfreq1_151 = &NONLOCAL
lowfreq1_151 = lowfreq1_150
lowidx1_155 = &NONLOCAL
lowidx1_155 = lowidx1_154
_66 = i_144
_67 = _66
_67 = &NONLOCAL
_68 = hufftree + UNKNOWN
_69 = *_68 + 64
_70 = i_144
_71 = _70
_71 = &NONLOCAL
_72 = hufftree + UNKNOWN
_73 = *_72 + 32
_74 = i_144
_75 = _74
_75 = &NONLOCAL
_76 = hufftree + UNKNOWN
lowfreq2_209 = *_76 + 32
lowidx2_210 = i_144
lowfreq2_152 = lowfreq2_153
lowfreq2_152 = lowfreq2_153
lowfreq2_152 = lowfreq2_153
lowfreq2_152 = lowfreq2_209
lowidx2_156 = lowidx2_157
lowidx2_156 = lowidx2_157
lowidx2_156 = lowidx2_157
lowidx2_156 = i_144
i_211 = i_144
i_211 = &NONLOCAL
i_144 = &NULL
i_144 = i_211
lowfreq2_153 = &NONLOCAL
lowfreq2_153 = lowfreq2_152
lowidx2_157 = &NONLOCAL
lowidx2_157 = lowidx2_156
root_202 = root_149
root_202 = &NONLOCAL
_77 = lowidx1_155
_78 = _77
_78 = &NONLOCAL
_79 = hufftree + UNKNOWN
*_79 + 64 = root_202
_80 = lowidx2_157
_81 = _80
_81 = &NONLOCAL
_82 = hufftree + UNKNOWN
*_82 + 64 = root_202
_83 = root_202
_84 = _83
_84 = &NONLOCAL
_85 = hufftree + UNKNOWN
_86 = lowfreq1_151
_86 = lowfreq2_153
*_85 + 32 = _86
_87 = root_202
_88 = _87
_88 = &NONLOCAL
_89 = hufftree + UNKNOWN
*_89 + 96 = lowidx1_155
_90 = root_202
_91 = _90
_91 = &NONLOCAL
_92 = hufftree + UNKNOWN
*_92 + 128 = lowidx2_157
_93 = root_202
_94 = _93
_94 = &NONLOCAL
_95 = hufftree + UNKNOWN
derefaddrtmp(145) = &NONLOCAL
*_95 + 64 = derefaddrtmp(145)
_96 = i_145
_97 = plaintext + UNKNOWN
_98 = *_97
c_227 = _98
_99 = c_165
_100 = _99
_100 = &NONLOCAL
_101 = hufftree + UNKNOWN
_102 = *_101 + 64
_103 = _102
_104 = _103
_104 = &NONLOCAL
_105 = hufftree + UNKNOWN
_106 = *_105 + 96
bitstring = &NONLOCAL
bitstring = &NONLOCAL
_107 = c_165
_108 = _107
_108 = &NONLOCAL
_109 = hufftree + UNKNOWN
c_235 = *_109 + 64
bitstringlen_236 = bitstringlen_163
bitstringlen_236 = &NONLOCAL
bitstringlen_163 = &NULL
bitstringlen_163 = bitstringlen_236
c_165 = c_227
c_165 = c_235
_110 = c_165
_111 = _110
_111 = &NONLOCAL
_112 = hufftree + UNKNOWN
_113 = *_112 + 64
_114 = bitstring
_115 = _114
_116 = bitoffset_158
byteoffset_253 = _116
byteoffset_253 = &NONLOCAL
bitoffset.165_254 = bitoffset_158
bitnumb_255 = bitoffset.165_254 + UNKNOWN
_256 = byteoffset_253
_257 = comparray + UNKNOWN
_258 = *_257
_259 = _258
_260 = &NONLOCAL
_260 = bitnumb_255
_261 = _260
_262 = _259
_262 = _261
_263 = _262
*_257 = _263
_264 = byteoffset_253
_265 = comparray + UNKNOWN
_266 = *_265
_267 = _266
_268 = &NONLOCAL
_268 = bitnumb_255
_269 = _268
_270 = _269
_271 = _267
_271 = _270
_272 = _271
*_265 = _272
bitoffset_232 = bitoffset_158
bitoffset_232 = &NONLOCAL
bitoffset_158 = bitoffset_159
bitoffset_158 = bitoffset_232
bitstringlen_164 = bitstringlen_163
bitstringlen_164 = bitstringlen_229
bitstringlen.162_117 = bitstringlen_164
bitstringlen_229 = bitstringlen_164
bitstringlen_229 = &NONLOCAL
i_230 = i_145
i_230 = &NONLOCAL
i_188 = &NULL
i_188 = &NULL
bitoffset_189 = &NULL
bitoffset_189 = &NULL
i_145 = i_188
i_145 = i_230
bitoffset_159 = bitoffset_189
bitoffset_159 = bitoffset_158
_118 = i_145
maxbitoffset_214 = bitoffset_159
bitoffset_160 = &NULL
bitoffset_160 = bitoffset_161
textoffset_162 = &NULL
textoffset_162 = textoffset_220
i_217 = root_149
_119 = bitoffset_161
byteoffset_273 = _119
byteoffset_273 = &NONLOCAL
bitoffset.166_274 = bitoffset_161
bitnumb_275 = bitoffset.166_274 + UNKNOWN
_276 = &NONLOCAL
_276 = bitnumb_275
_277 = byteoffset_273
_278 = comparray + UNKNOWN
_279 = *_278
_280 = _279
_281 = _276
_281 = _280
_284 = _281
_120 = _281
_121 = i_147
_122 = _121
_122 = &NONLOCAL
_123 = hufftree + UNKNOWN
i_224 = *_123 + 96
_124 = i_147
_125 = _124
_125 = &NONLOCAL
_126 = hufftree + UNKNOWN
i_223 = *_126 + 128
i_146 = i_224
i_146 = i_223
bitoffset_225 = bitoffset_161
bitoffset_225 = &NONLOCAL
i_147 = root_149
i_147 = i_146
bitoffset_161 = bitoffset_160
bitoffset_161 = bitoffset_225
_127 = i_147
_128 = _127
_128 = &NONLOCAL
_129 = hufftree + UNKNOWN
_130 = *_129 + 96
_131 = i_147
_132 = _131
_132 = &NONLOCAL
_133 = hufftree + UNKNOWN
_134 = *_133
textoffset.163_135 = textoffset_162
_136 = decomparray + UNKNOWN
_137 = _134
*_136 = _137
textoffset_220 = textoffset_162
textoffset_220 = &NONLOCAL
nloops_139 = nloops
nloops_139 = nloops_184
nloops.164_138 = nloops_139
nloops_184 = nloops_139
nloops_184 = &NONLOCAL
ESCAPED = elapsed_182
_186 = NONLOCAL
ESCAPED = _186

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"plaintext"[label="plaintext = { 5 }"];
"comparray"[label="comparray = { 5 }"];
"decomparray"[label="decomparray = { 5 }"];
"arraysize"[label="arraysize = { 5 }"];
"nloops"[label="nloops = { 5 }"];
"hufftree"[label="hufftree = { 5 }"];
"StartStopwatch";
"elapsed_182";
"_1";
"i_140"[label="i_140 = { 1 5 }"];
"_2"[label="_2 = { 5 }"];
"_3";
"derefaddrtmp(20)"[label="derefaddrtmp(20) = { 5 }"];
"_4";
"_5"[label="_5 = { 5 }"];
"_6";
"_7";
"j.159_8";
"j_148"[label="j_148 = { 1 5 }"];
"_9";
"_10";
"_11";
"_12"[label="_12 = { 5 }"];
"_13";
"_14";
"j.160_15";
"_16";
"_17";
"_18";
"_19"[label="_19 = { 5 }"];
"_20";
"_21"[label="_21 = { 5 }"];
"j.161_22";
"_23";
"i_141"[label="i_141 = { 1 5 }"];
"_24"[label="_24 = { 5 }"];
"_25";
"_26";
"_27";
"_28"[label="_28 = { 5 }"];
"_29";
"_30";
"_31";
"_32";
"_33"[label="_33 = { 5 }"];
"_34";
"_35";
"_36";
"__builtin_object_size";
"CALLUSED(60)"[label="CALLUSED(60) = { 1 }"];
"CALLCLOBBERED(61)";
"_222";
"derefaddrtmp(63)"[label="derefaddrtmp(63) = { 1 }"];
"_37";
"i_142"[label="i_142 = { 1 5 }"];
"_38"[label="_38 = { 5 }"];
"_39";
"_40";
"_41";
"_42"[label="_42 = { 5 }"];
"_43";
"derefaddrtmp(72)"[label="derefaddrtmp(72) = { 5 }"];
"_44";
"_45"[label="_45 = { 5 }"];
"_46";
"derefaddrtmp(76)"[label="derefaddrtmp(76) = { 5 }"];
"_47";
"_48"[label="_48 = { 5 }"];
"_49";
"_50";
"_51";
"_52"[label="_52 = { 5 }"];
"_53";
"_54";
"root_149"[label="root_149 = { 5 }"];
"_55";
"i_143"[label="i_143 = { 1 5 }"];
"_56"[label="_56 = { 5 }"];
"_57";
"_58";
"_59";
"_60"[label="_60 = { 5 }"];
"_61";
"_62";
"_63";
"_64"[label="_64 = { 5 }"];
"_65";
"lowfreq1_237";
"lowidx1_238";
"lowfreq1_150"[label="lowfreq1_150 = { 5 }"];
"lowidx1_154"[label="lowidx1_154 = { 5 }"];
"_66";
"i_144"[label="i_144 = { 1 5 }"];
"_67"[label="_67 = { 5 }"];
"_68";
"_69";
"_70";
"_71"[label="_71 = { 5 }"];
"_72";
"_73";
"_74";
"_75"[label="_75 = { 5 }"];
"_76";
"lowfreq2_209";
"lowidx2_210";
"lowfreq2_152"[label="lowfreq2_152 = { 5 }"];
"lowidx2_156"[label="lowidx2_156 = { 5 }"];
"_77";
"_78"[label="_78 = { 5 }"];
"_79";
"_80";
"_81"[label="_81 = { 5 }"];
"_82";
"_83";
"_84"[label="_84 = { 5 }"];
"_85";
"_86";
"_87";
"_88"[label="_88 = { 5 }"];
"_89";
"_90";
"_91"[label="_91 = { 5 }"];
"_92";
"_93";
"_94"[label="_94 = { 5 }"];
"_95";
"derefaddrtmp(145)"[label="derefaddrtmp(145) = { 5 }"];
"_96";
"i_145"[label="i_145 = { 5 }"];
"_97";
"_98";
"c_227";
"_99";
"c_165";
"_100"[label="_100 = { 5 }"];
"_101";
"_102";
"_103";
"_104"[label="_104 = { 5 }"];
"_105";
"_106";
"bitstring"[label="bitstring = { 5 }"];
"_107";
"_108"[label="_108 = { 5 }"];
"_109";
"c_235";
"bitstringlen_236"[label="bitstringlen_236 = { 1 5 }"];
"_110";
"_111"[label="_111 = { 5 }"];
"_112";
"_113";
"_114";
"_115";
"_116";
"bitoffset_158"[label="bitoffset_158 = { 5 }"];
"byteoffset_253"[label="byteoffset_253 = { 5 }"];
"bitoffset.165_254";
"bitnumb_255";
"_256";
"_257";
"_258";
"_260"[label="_260 = { 5 }"];
"_261";
"_264";
"_265";
"_266";
"_268"[label="_268 = { 5 }"];
"_269";
"_270";
"bitstringlen_164"[label="bitstringlen_164 = { 5 }"];
"bitstringlen.162_117";
"i_188"[label="i_188 = { 1 }"];
"bitoffset_189"[label="bitoffset_189 = { 1 }"];
"_118";
"maxbitoffset_214";
"bitoffset_160"[label="bitoffset_160 = { 1 5 }"];
"textoffset_162"[label="textoffset_162 = { 1 5 }"];
"i_217";
"_119";
"byteoffset_273"[label="byteoffset_273 = { 5 }"];
"bitoffset.166_274";
"bitnumb_275";
"_276"[label="_276 = { 5 }"];
"_277";
"_278";
"_279";
"_280";
"_281";
"_284";
"_120";
"_121";
"i_147";
"_122"[label="_122 = { 5 }"];
"_123";
"i_224";
"_124";
"_125"[label="_125 = { 5 }"];
"_126";
"i_223";
"i_146";
"_127";
"_128"[label="_128 = { 5 }"];
"_129";
"_130";
"_131";
"_132"[label="_132 = { 5 }"];
"_133";
"_134";
"textoffset.163_135";
"_136";
"_137";
"nloops_139"[label="nloops_139 = { 5 }"];
"nloops.164_138";
"StopStopwatch";
"_186";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*plaintext";
"*comparray";
"*decomparray";
"*arraysize";
"*nloops";
"*hufftree";
"*StartStopwatch";
"*_1";
"*i_140";
"*_2";
"*_3";
"*derefaddrtmp(20)";
"*_4";
"*_5";
"*_6";
"*_7";
"*i_251";
"*j.159_8";
"*j_148";
"*_9";
"*_10";
"*_11";
"*_12";
"*_13";
"*_14";
"*j.160_15";
"*_16";
"*_17";
"*_18";
"*_19";
"*_20";
"*_21";
"*j_248";
"*j.161_22";
"*_23";
"*i_141";
"*_24";
"*_25";
"*_26";
"*_27";
"*_28";
"*_29";
"*_30";
"*_31";
"*_32";
"*_33";
"*_34";
"*_35";
"*i_246";
"*_36";
"*__builtin_object_size";
"*CALLUSED(60)";
"*CALLCLOBBERED(61)";
"*_222";
"*derefaddrtmp(63)";
"*_37";
"*i_142";
"*_38";
"*_39";
"*_40";
"*_41";
"*_42";
"*_43";
"*derefaddrtmp(72)";
"*_44";
"*_45";
"*_46";
"*derefaddrtmp(76)";
"*_47";
"*_48";
"*_49";
"*_50";
"*_51";
"*_52";
"*_53";
"*_54";
"*i_244";
"*root_149";
"*root_202";
"*_55";
"*i_143";
"*_56";
"*_57";
"*_58";
"*_59";
"*_60";
"*_61";
"*_62";
"*_63";
"*_64";
"*_65";
"*lowfreq1_237";
"*lowidx1_238";
"*lowfreq1_150";
"*lowfreq1_151";
"*lowidx1_154";
"*lowidx1_155";
"*i_239";
"*_66";
"*i_144";
"*_67";
"*_68";
"*_69";
"*_70";
"*_71";
"*_72";
"*_73";
"*_74";
"*_75";
"*_76";
"*lowfreq2_209";
"*lowidx2_210";
"*lowfreq2_152";
"*lowfreq2_153";
"*lowidx2_156";
"*lowidx2_157";
"*i_211";
"*_77";
"*_78";
"*_79";
"*_80";
"*_81";
"*_82";
"*_83";
"*_84";
"*_85";
"*_86";
"*_87";
"*_88";
"*_89";
"*_90";
"*_91";
"*_92";
"*_93";
"*_94";
"*_95";
"*derefaddrtmp(145)";
"*_96";
"*i_145";
"*_97";
"*_98";
"*c_227";
"*_99";
"*c_165";
"*_100";
"*_101";
"*_102";
"*_103";
"*_104";
"*_105";
"*_106";
"*bitstring";
"*_107";
"*_108";
"*_109";
"*c_235";
"*bitstringlen_236";
"*bitstringlen_163";
"*_110";
"*_111";
"*_112";
"*_113";
"*_114";
"*_115";
"*_116";
"*bitoffset_158";
"*byteoffset_253";
"*bitoffset.165_254";
"*bitnumb_255";
"*_256";
"*_258";
"*_259";
"*_260";
"*_261";
"*_262";
"*_263";
"*_264";
"*_266";
"*_267";
"*_268";
"*_269";
"*_270";
"*_271";
"*_272";
"*bitoffset_232";
"*bitoffset_159";
"*bitstringlen_164";
"*bitstringlen_229";
"*bitstringlen.162_117";
"*i_230";
"*i_188";
"*bitoffset_189";
"*_118";
"*maxbitoffset_214";
"*bitoffset_160";
"*bitoffset_161";
"*textoffset_162";
"*textoffset_220";
"*i_217";
"*_119";
"*byteoffset_273";
"*bitoffset.166_274";
"*bitnumb_275";
"*_276";
"*_277";
"*_278";
"*_279";
"*_280";
"*_281";
"*_284";
"*_120";
"*_121";
"*i_147";
"*_122";
"*_123";
"*i_224";
"*_124";
"*_125";
"*_126";
"*i_223";
"*i_146";
"*bitoffset_225";
"*_127";
"*_128";
"*_129";
"*_130";
"*_131";
"*_132";
"*_133";
"*_134";
"*textoffset.163_135";
"*_136";
"*_137";
"*nloops_139";
"*nloops_184";
"*nloops.164_138";
"*StopStopwatch";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"elapsed_182" -> "ESCAPED";
"_186" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "elapsed_182";
"i_140" -> "_1";
"i_140" -> "i_140";
"i_140" -> "i_140";
"_1" -> "_2";
"i_140" -> "_4";
"_4" -> "_5";
"i_140" -> "_7";
"j_148" -> "j.159_8";
"j_148" -> "j_148";
"j_148" -> "j_148";
"*_9" -> "_10";
"_10" -> "_11";
"_11" -> "_12";
"j_148" -> "j.160_15";
"*_16" -> "_17";
"_17" -> "_18";
"_18" -> "_19";
"_14" -> "_21";
"j_148" -> "j.161_22";
"i_141" -> "_23";
"i_141" -> "i_141";
"i_141" -> "i_141";
"_23" -> "_24";
"i_141" -> "_27";
"_27" -> "_28";
"arraysize" -> "_31";
"i_141" -> "_32";
"_32" -> "_33";
"_30" -> "_35";
"_31" -> "_35";
"_36" -> "CALLUSED(60)";
"NONLOCAL" -> "_222";
"CALLUSED(60)" -> "_222";
"i_142" -> "_37";
"i_142" -> "i_142";
"i_142" -> "i_142";
"_37" -> "_38";
"i_142" -> "_41";
"_41" -> "_42";
"i_142" -> "_44";
"_44" -> "_45";
"i_142" -> "_47";
"_47" -> "_48";
"i_142" -> "_51";
"_51" -> "_52";
"root_149" -> "root_149";
"root_149" -> "root_149";
"i_143" -> "_55";
"i_143" -> "i_143";
"i_143" -> "i_143";
"_55" -> "_56";
"i_143" -> "_59";
"_59" -> "_60";
"i_143" -> "_63";
"_63" -> "_64";
"i_143" -> "lowidx1_238";
"lowfreq1_237" -> "lowfreq1_150";
"lowfreq1_150" -> "lowfreq1_150";
"lowfreq1_150" -> "lowfreq1_150";
"i_143" -> "lowidx1_154";
"lowidx1_154" -> "lowidx1_154";
"lowidx1_154" -> "lowidx1_154";
"i_144" -> "_66";
"i_144" -> "i_144";
"i_144" -> "i_144";
"_66" -> "_67";
"i_144" -> "_70";
"_70" -> "_71";
"i_144" -> "_74";
"_74" -> "_75";
"i_144" -> "lowidx2_210";
"lowfreq2_209" -> "lowfreq2_152";
"lowfreq2_152" -> "lowfreq2_152";
"lowfreq2_152" -> "lowfreq2_152";
"i_144" -> "lowidx2_156";
"lowidx2_156" -> "lowidx2_156";
"lowidx2_156" -> "lowidx2_156";
"lowidx1_154" -> "_77";
"_77" -> "_78";
"lowidx2_156" -> "_80";
"_80" -> "_81";
"root_149" -> "_83";
"_83" -> "_84";
"lowfreq1_150" -> "_86";
"lowfreq2_152" -> "_86";
"root_149" -> "_87";
"_87" -> "_88";
"root_149" -> "_90";
"_90" -> "_91";
"root_149" -> "_93";
"_93" -> "_94";
"i_145" -> "_96";
"i_145" -> "i_145";
"i_145" -> "i_145";
"i_188" -> "i_145";
"*_97" -> "_98";
"_98" -> "c_227";
"c_165" -> "_99";
"c_227" -> "c_165";
"c_235" -> "c_165";
"_99" -> "_100";
"_102" -> "_103";
"_103" -> "_104";
"c_165" -> "_107";
"_107" -> "_108";
"bitstringlen_236" -> "bitstringlen_236";
"bitstringlen_236" -> "bitstringlen_236";
"c_165" -> "_110";
"_110" -> "_111";
"bitstring" -> "_114";
"_114" -> "_115";
"bitoffset_158" -> "_116";
"bitoffset_158" -> "bitoffset_158";
"bitoffset_158" -> "bitoffset_158";
"bitoffset_158" -> "bitoffset_158";
"bitoffset_189" -> "bitoffset_158";
"_116" -> "byteoffset_253";
"bitoffset_158" -> "bitoffset.165_254";
"byteoffset_253" -> "_256";
"_258" -> "_258";
"_258" -> "_258";
"_261" -> "_258";
"_258" -> "_258";
"_258" -> "_258";
"_258" -> "_258";
"bitnumb_255" -> "_260";
"_260" -> "_261";
"byteoffset_253" -> "_264";
"_266" -> "_266";
"_266" -> "_266";
"_270" -> "_266";
"_266" -> "_266";
"_266" -> "_266";
"_266" -> "_266";
"bitnumb_255" -> "_268";
"_268" -> "_269";
"_269" -> "_270";
"bitstringlen_236" -> "bitstringlen_164";
"bitstringlen_164" -> "bitstringlen_164";
"bitstringlen_164" -> "bitstringlen_164";
"bitstringlen_164" -> "bitstringlen.162_117";
"i_145" -> "_118";
"bitoffset_158" -> "maxbitoffset_214";
"bitoffset_160" -> "bitoffset_160";
"bitoffset_160" -> "bitoffset_160";
"bitoffset_160" -> "bitoffset_160";
"textoffset_162" -> "textoffset_162";
"textoffset_162" -> "textoffset_162";
"root_149" -> "i_217";
"bitoffset_160" -> "_119";
"_119" -> "byteoffset_273";
"bitoffset_160" -> "bitoffset.166_274";
"bitnumb_275" -> "_276";
"byteoffset_273" -> "_277";
"*_278" -> "_279";
"_279" -> "_280";
"_276" -> "_281";
"_280" -> "_281";
"_281" -> "_284";
"_281" -> "_120";
"i_147" -> "_121";
"root_149" -> "i_147";
"i_146" -> "i_147";
"_121" -> "_122";
"i_147" -> "_124";
"_124" -> "_125";
"i_224" -> "i_146";
"i_223" -> "i_146";
"i_147" -> "_127";
"_127" -> "_128";
"i_147" -> "_131";
"_131" -> "_132";
"*_133" -> "_134";
"textoffset_162" -> "textoffset.163_135";
"_134" -> "_137";
"nloops" -> "nloops_139";
"nloops_139" -> "nloops_139";
"nloops_139" -> "nloops_139";
"nloops_139" -> "nloops.164_138";
"NONLOCAL" -> "_186";
"_7" -> "*_6";
"_137" -> "*_136";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"plaintext" [label="\N\n_3 = plaintext + UNKNOWN\l_6 = plaintext + UNKNOWN\l_9 = plaintext + UNKNOWN\l_13 = plaintext + UNKNOWN\l_16 = plaintext + UNKNOWN\l_20 = plaintext + UNKNOWN\l_25 = plaintext + UNKNOWN\l_29 = plaintext + UNKNOWN\l_34 = plaintext + UNKNOWN\l_36 = plaintext + 40960\l_39 = plaintext + UNKNOWN\l_43 = plaintext + UNKNOWN\l_46 = plaintext + UNKNOWN\l_49 = plaintext + UNKNOWN\l_53 = plaintext + UNKNOWN\l_57 = plaintext + UNKNOWN\l_61 = plaintext + UNKNOWN\l_65 = plaintext + UNKNOWN\l_68 = plaintext + UNKNOWN\l_72 = plaintext + UNKNOWN\l_76 = plaintext + UNKNOWN\l_79 = plaintext + UNKNOWN\l_82 = plaintext + UNKNOWN\l_85 = plaintext + UNKNOWN\l_89 = plaintext + UNKNOWN\l_92 = plaintext + UNKNOWN\l_95 = plaintext + UNKNOWN\l_97 = plaintext + UNKNOWN\l_101 = plaintext + UNKNOWN\l_105 = plaintext + UNKNOWN\l_109 = plaintext + UNKNOWN\l_112 = plaintext + UNKNOWN\l_257 = plaintext + UNKNOWN\l_265 = plaintext + UNKNOWN\l_278 = plaintext + UNKNOWN\l_123 = plaintext + UNKNOWN\l_126 = plaintext + UNKNOWN\l_129 = plaintext + UNKNOWN\l_133 = plaintext + UNKNOWN\l_136 = plaintext + UNKNOWN\l"];
"StartStopwatch";
"elapsed_182";
"_1" [label="\N\nbitnumb_255 = _1 + UNKNOWN\lbitnumb_275 = _1 + UNKNOWN\l"];
"_3" [label="\N\n*_3 + 32 = plaintext\l"];
"_6" [label="\N\n*_6 = _1\l"];
"_9" [label="\N\n_10 = *_9\l"];
"_10";
"_12";
"_13" [label="\N\n_14 = *_13 + 32\l"];
"_14";
"_16" [label="\N\n_17 = *_16\l"];
"_17";
"_19";
"_20" [label="\N\n*_20 + 32 = _21\l"];
"_21";
"_25" [label="\N\n_26 = *_25 + 32\l"];
"_26";
"_29" [label="\N\n_30 = *_29 + 32\l"];
"_30";
"_34" [label="\N\n*_34 + 32 = _35\l"];
"_35";
"_36" [label="\N\n*_36 + UNKNOWN = derefaddrtmp(63)\l"];
"__builtin_object_size";
"CALLUSED(60)" [label="\N\nCALLUSED(60) = CALLUSED(60) + UNKNOWN\lCALLUSED(60) = *CALLUSED(60) + UNKNOWN\l"];
"CALLCLOBBERED(61)";
"_222";
"derefaddrtmp(63)";
"_39" [label="\N\n_40 = *_39 + 32\l"];
"_40";
"_43" [label="\N\n*_43 + 64 = plaintext\l"];
"_46" [label="\N\n_50 = *_46 + 128\l*_46 + 128 = plaintext\l"];
"_49" [label="\N\n_54 = *_49 + 96\l*_49 + 96 = _50\l"];
"_50";
"_53" [label="\N\n*_53 + 64 = _54\l"];
"_54";
"_57" [label="\N\n_58 = *_57 + 64\l"];
"_58";
"_61" [label="\N\n_62 = *_61 + 32\l"];
"_62";
"_65" [label="\N\nlowfreq1_237 = *_65 + 32\l"];
"lowfreq1_237";
"lowfreq1_150";
"_68" [label="\N\n_69 = *_68 + 64\l"];
"_69";
"_72" [label="\N\n_73 = *_72 + 32\l"];
"_73";
"_76" [label="\N\nlowfreq2_209 = *_76 + 32\l"];
"lowfreq2_209";
"lowfreq2_152";
"_79" [label="\N\n*_79 + 64 = plaintext\l"];
"_82" [label="\N\n*_82 + 64 = plaintext\l"];
"_85" [label="\N\n*_85 + 32 = _86\l"];
"_86";
"_89" [label="\N\n*_89 + 96 = _1\l"];
"_92" [label="\N\n*_92 + 128 = _1\l"];
"_95" [label="\N\n*_95 + 64 = plaintext\l"];
"_97" [label="\N\n_98 = *_97\l"];
"_98";
"_99";
"_100";
"_101" [label="\N\n_102 = *_101 + 64\l"];
"_102";
"_104";
"_105" [label="\N\n_106 = *_105 + 96\l"];
"_106";
"_109" [label="\N\nc_235 = *_109 + 64\l"];
"c_235";
"_112" [label="\N\n_113 = *_112 + 64\l"];
"_113";
"bitnumb_255";
"_257" [label="\N\n_258 = *_257\l*_257 = _258\l"];
"_258";
"_260";
"_265" [label="\N\n_266 = *_265\l*_265 = _266\l"];
"_266";
"bitnumb_275";
"_276";
"_278" [label="\N\n_279 = *_278\l"];
"_279";
"_281";
"_121";
"_123" [label="\N\ni_224 = *_123 + 96\l"];
"i_224";
"_126" [label="\N\ni_223 = *_126 + 128\l"];
"i_223";
"i_146";
"_129" [label="\N\n_130 = *_129 + 96\l"];
"_130";
"_133" [label="\N\n_134 = *_133\l"];
"_134";
"_136" [label="\N\n*_136 = _134\l"];
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_6";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_26";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "_34";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "CALLUSED(60)";
"STOREDANYTHING" -> "_39";
"STOREDANYTHING" -> "_40";
"STOREDANYTHING" -> "_43";
"STOREDANYTHING" -> "_46";
"STOREDANYTHING" -> "_49";
"STOREDANYTHING" -> "_50";
"STOREDANYTHING" -> "_53";
"STOREDANYTHING" -> "_54";
"STOREDANYTHING" -> "_57";
"STOREDANYTHING" -> "_58";
"STOREDANYTHING" -> "_61";
"STOREDANYTHING" -> "_62";
"STOREDANYTHING" -> "_65";
"STOREDANYTHING" -> "lowfreq1_237";
"STOREDANYTHING" -> "_68";
"STOREDANYTHING" -> "_69";
"STOREDANYTHING" -> "_72";
"STOREDANYTHING" -> "_73";
"STOREDANYTHING" -> "_76";
"STOREDANYTHING" -> "lowfreq2_209";
"STOREDANYTHING" -> "_79";
"STOREDANYTHING" -> "_82";
"STOREDANYTHING" -> "_85";
"STOREDANYTHING" -> "_89";
"STOREDANYTHING" -> "_92";
"STOREDANYTHING" -> "_95";
"STOREDANYTHING" -> "_97";
"STOREDANYTHING" -> "_101";
"STOREDANYTHING" -> "_102";
"STOREDANYTHING" -> "_105";
"STOREDANYTHING" -> "_106";
"STOREDANYTHING" -> "_109";
"STOREDANYTHING" -> "c_235";
"STOREDANYTHING" -> "_112";
"STOREDANYTHING" -> "_113";
"STOREDANYTHING" -> "bitnumb_255";
"STOREDANYTHING" -> "_257";
"STOREDANYTHING" -> "_258";
"STOREDANYTHING" -> "_265";
"STOREDANYTHING" -> "_266";
"STOREDANYTHING" -> "bitnumb_275";
"STOREDANYTHING" -> "_278";
"STOREDANYTHING" -> "_123";
"STOREDANYTHING" -> "i_224";
"STOREDANYTHING" -> "_126";
"STOREDANYTHING" -> "i_223";
"STOREDANYTHING" -> "_129";
"STOREDANYTHING" -> "_130";
"STOREDANYTHING" -> "_133";
"STOREDANYTHING" -> "_136";
"plaintext" -> "_35";
"plaintext" -> "_121";
"elapsed_182" -> "ESCAPED";
"elapsed_182" -> "_222";
"_10" -> "_12";
"_14" -> "_21";
"_17" -> "_19";
"_30" -> "_35";
"_36" -> "CALLUSED(60)";
"CALLUSED(60)" -> "_222";
"derefaddrtmp(63)" -> "_1";
"lowfreq1_237" -> "lowfreq1_150";
"lowfreq1_150" -> "_86";
"lowfreq2_209" -> "lowfreq2_152";
"lowfreq2_152" -> "_86";
"_98" -> "_99";
"_99" -> "_100";
"_102" -> "_104";
"c_235" -> "_99";
"bitnumb_255" -> "_260";
"_260" -> "_258";
"_260" -> "_266";
"bitnumb_275" -> "_276";
"_276" -> "_281";
"_279" -> "_281";
"i_224" -> "i_146";
"i_223" -> "i_146";
"i_146" -> "_121";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = elapsed_182\l"];
"STOREDANYTHING";
"INTEGER";
"plaintext" [label="\N\n_3 = plaintext + UNKNOWN\l_6 = plaintext + UNKNOWN\l_9 = plaintext + UNKNOWN\l_13 = plaintext + UNKNOWN\l_16 = plaintext + UNKNOWN\l_20 = plaintext + UNKNOWN\l_25 = plaintext + UNKNOWN\l_29 = plaintext + UNKNOWN\l_34 = plaintext + UNKNOWN\l_36 = plaintext + 40960\l_39 = plaintext + UNKNOWN\l_43 = plaintext + UNKNOWN\l_46 = plaintext + UNKNOWN\l_49 = plaintext + UNKNOWN\l_53 = plaintext + UNKNOWN\l_57 = plaintext + UNKNOWN\l_61 = plaintext + UNKNOWN\l_65 = plaintext + UNKNOWN\l_68 = plaintext + UNKNOWN\l_72 = plaintext + UNKNOWN\l_76 = plaintext + UNKNOWN\l_79 = plaintext + UNKNOWN\l_82 = plaintext + UNKNOWN\l_85 = plaintext + UNKNOWN\l_89 = plaintext + UNKNOWN\l_92 = plaintext + UNKNOWN\l_95 = plaintext + UNKNOWN\l_97 = plaintext + UNKNOWN\l_101 = plaintext + UNKNOWN\l_105 = plaintext + UNKNOWN\l_109 = plaintext + UNKNOWN\l_112 = plaintext + UNKNOWN\l_257 = plaintext + UNKNOWN\l_265 = plaintext + UNKNOWN\l_278 = plaintext + UNKNOWN\l_123 = plaintext + UNKNOWN\l_126 = plaintext + UNKNOWN\l_129 = plaintext + UNKNOWN\l_133 = plaintext + UNKNOWN\l_136 = plaintext + UNKNOWN\l"];
"StartStopwatch";
"elapsed_182";
"_1" [label="\N\nbitnumb_255 = _1 + UNKNOWN\lbitnumb_275 = _1 + UNKNOWN\l"];
"_3" [label="\N\n*_3 + 32 = plaintext\l"];
"_6" [label="\N\n*_6 = _1\l"];
"_9" [label="\N\n_10 = *_9\l"];
"_10";
"_12";
"_13" [label="\N\n_14 = *_13 + 32\l"];
"_14";
"_16" [label="\N\n_17 = *_16\l"];
"_17";
"_19";
"_20" [label="\N\n*_20 + 32 = _21\l"];
"_21";
"_25" [label="\N\n_26 = *_25 + 32\l"];
"_26";
"_29" [label="\N\n_30 = *_29 + 32\l"];
"_30";
"_34" [label="\N\n*_34 + 32 = _35\l"];
"_35";
"_36" [label="\N\n*_36 + UNKNOWN = derefaddrtmp(63)\l"];
"__builtin_object_size";
"CALLUSED(60)" [label="\N\nCALLUSED(60) = CALLUSED(60) + UNKNOWN\lCALLUSED(60) = *CALLUSED(60) + UNKNOWN\l"];
"CALLCLOBBERED(61)";
"_222";
"derefaddrtmp(63)";
"_39" [label="\N\n_40 = *_39 + 32\l"];
"_40";
"_43" [label="\N\n*_43 + 64 = plaintext\l"];
"_46" [label="\N\n_50 = *_46 + 128\l*_46 + 128 = plaintext\l"];
"_49" [label="\N\n_54 = *_49 + 96\l*_49 + 96 = _50\l"];
"_50";
"_53" [label="\N\n*_53 + 64 = _54\l"];
"_54";
"_57" [label="\N\n_58 = *_57 + 64\l"];
"_58";
"_61" [label="\N\n_62 = *_61 + 32\l"];
"_62";
"_65" [label="\N\nlowfreq1_237 = *_65 + 32\l"];
"lowfreq1_237";
"lowfreq1_150";
"_68" [label="\N\n_69 = *_68 + 64\l"];
"_69";
"_72" [label="\N\n_73 = *_72 + 32\l"];
"_73";
"_76" [label="\N\nlowfreq2_209 = *_76 + 32\l"];
"lowfreq2_209";
"lowfreq2_152";
"_79" [label="\N\n*_79 + 64 = plaintext\l"];
"_82" [label="\N\n*_82 + 64 = plaintext\l"];
"_85" [label="\N\n*_85 + 32 = _86\l"];
"_86";
"_89" [label="\N\n*_89 + 96 = _1\l"];
"_92" [label="\N\n*_92 + 128 = _1\l"];
"_95" [label="\N\n*_95 + 64 = plaintext\l"];
"_97" [label="\N\n_98 = *_97\l"];
"_98";
"_99";
"_100";
"_101" [label="\N\n_102 = *_101 + 64\l"];
"_102";
"_104";
"_105" [label="\N\n_106 = *_105 + 96\l"];
"_106";
"_109" [label="\N\nc_235 = *_109 + 64\l"];
"c_235";
"_112" [label="\N\n_113 = *_112 + 64\l"];
"_113";
"bitnumb_255";
"_257" [label="\N\n_258 = *_257\l*_257 = _258\l"];
"_258";
"_260";
"_265" [label="\N\n_266 = *_265\l*_265 = _266\l"];
"_266";
"bitnumb_275";
"_276";
"_278" [label="\N\n_279 = *_278\l"];
"_279";
"_281";
"_121";
"_123" [label="\N\ni_224 = *_123 + 96\l"];
"i_224";
"_126" [label="\N\ni_223 = *_126 + 128\l"];
"i_223";
"i_146";
"_129" [label="\N\n_130 = *_129 + 96\l"];
"_130";
"_133" [label="\N\n_134 = *_133\l"];
"_134";
"_136" [label="\N\n*_136 = _134\l"];
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_6";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_26";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "_34";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "CALLUSED(60)";
"STOREDANYTHING" -> "_39";
"STOREDANYTHING" -> "_40";
"STOREDANYTHING" -> "_43";
"STOREDANYTHING" -> "_46";
"STOREDANYTHING" -> "_49";
"STOREDANYTHING" -> "_50";
"STOREDANYTHING" -> "_53";
"STOREDANYTHING" -> "_54";
"STOREDANYTHING" -> "_57";
"STOREDANYTHING" -> "_58";
"STOREDANYTHING" -> "_61";
"STOREDANYTHING" -> "_62";
"STOREDANYTHING" -> "_65";
"STOREDANYTHING" -> "lowfreq1_237";
"STOREDANYTHING" -> "_68";
"STOREDANYTHING" -> "_69";
"STOREDANYTHING" -> "_72";
"STOREDANYTHING" -> "_73";
"STOREDANYTHING" -> "_76";
"STOREDANYTHING" -> "lowfreq2_209";
"STOREDANYTHING" -> "_79";
"STOREDANYTHING" -> "_82";
"STOREDANYTHING" -> "_85";
"STOREDANYTHING" -> "_89";
"STOREDANYTHING" -> "_92";
"STOREDANYTHING" -> "_95";
"STOREDANYTHING" -> "_97";
"STOREDANYTHING" -> "_101";
"STOREDANYTHING" -> "_102";
"STOREDANYTHING" -> "_105";
"STOREDANYTHING" -> "_106";
"STOREDANYTHING" -> "_109";
"STOREDANYTHING" -> "c_235";
"STOREDANYTHING" -> "_112";
"STOREDANYTHING" -> "_113";
"STOREDANYTHING" -> "bitnumb_255";
"STOREDANYTHING" -> "_257";
"STOREDANYTHING" -> "_258";
"STOREDANYTHING" -> "_265";
"STOREDANYTHING" -> "_266";
"STOREDANYTHING" -> "bitnumb_275";
"STOREDANYTHING" -> "_278";
"STOREDANYTHING" -> "_123";
"STOREDANYTHING" -> "i_224";
"STOREDANYTHING" -> "_126";
"STOREDANYTHING" -> "i_223";
"STOREDANYTHING" -> "_129";
"STOREDANYTHING" -> "_130";
"STOREDANYTHING" -> "_133";
"STOREDANYTHING" -> "_136";
"plaintext" -> "ESCAPED";
"plaintext" -> "_35";
"plaintext" -> "_121";
"elapsed_182" -> "ESCAPED";
"elapsed_182" -> "_10";
"elapsed_182" -> "_14";
"elapsed_182" -> "_17";
"elapsed_182" -> "_26";
"elapsed_182" -> "_30";
"elapsed_182" -> "CALLUSED(60)";
"elapsed_182" -> "_222";
"elapsed_182" -> "_40";
"elapsed_182" -> "_50";
"elapsed_182" -> "_54";
"elapsed_182" -> "_58";
"elapsed_182" -> "_62";
"elapsed_182" -> "lowfreq1_237";
"elapsed_182" -> "_69";
"elapsed_182" -> "_73";
"elapsed_182" -> "lowfreq2_209";
"elapsed_182" -> "_98";
"elapsed_182" -> "_102";
"elapsed_182" -> "_106";
"elapsed_182" -> "c_235";
"elapsed_182" -> "_113";
"elapsed_182" -> "_258";
"elapsed_182" -> "_266";
"elapsed_182" -> "_279";
"elapsed_182" -> "i_224";
"elapsed_182" -> "i_223";
"elapsed_182" -> "_130";
"elapsed_182" -> "_134";
"_1" -> "ESCAPED";
"_10" -> "_12";
"_14" -> "_21";
"_17" -> "_19";
"_21" -> "ESCAPED";
"_30" -> "_35";
"_35" -> "ESCAPED";
"_36" -> "CALLUSED(60)";
"CALLUSED(60)" -> "_222";
"derefaddrtmp(63)" -> "ESCAPED";
"derefaddrtmp(63)" -> "_1";
"_50" -> "ESCAPED";
"_54" -> "ESCAPED";
"lowfreq1_237" -> "lowfreq1_150";
"lowfreq1_150" -> "_86";
"lowfreq2_209" -> "lowfreq2_152";
"lowfreq2_152" -> "_86";
"_86" -> "ESCAPED";
"_98" -> "_99";
"_99" -> "_100";
"_102" -> "_104";
"c_235" -> "_99";
"bitnumb_255" -> "_260";
"_258" -> "ESCAPED";
"_260" -> "_258";
"_260" -> "_266";
"_266" -> "ESCAPED";
"bitnumb_275" -> "_276";
"_276" -> "_281";
"_279" -> "_281";
"i_224" -> "i_146";
"i_223" -> "i_146";
"i_146" -> "_121";
"_134" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as elapsed_182
STOREDANYTHING = { }
INTEGER = { ANYTHING }
plaintext = { NONLOCAL }
comparray = { NONLOCAL } same as plaintext
decomparray = { NONLOCAL } same as plaintext
arraysize = { NONLOCAL } same as plaintext
nloops = { NONLOCAL } same as plaintext
hufftree = { NONLOCAL } same as plaintext
StartStopwatch = { }
elapsed_182 = { ESCAPED NONLOCAL }
_1 = { NULL NONLOCAL }
i_140 = { NULL NONLOCAL } same as _1
_2 = { NULL NONLOCAL } same as _1
_3 = { NONLOCAL }
derefaddrtmp(20) = { NONLOCAL } same as plaintext
_4 = { NULL NONLOCAL } same as _1
_5 = { NULL NONLOCAL } same as _1
_6 = { NONLOCAL }
_7 = { NULL NONLOCAL } same as _1
i_251 = { NULL NONLOCAL } same as _1
j.159_8 = { NULL NONLOCAL } same as _1
j_148 = { NULL NONLOCAL } same as _1
_9 = { NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as _10
_12 = { ESCAPED NONLOCAL }
_13 = { NONLOCAL }
_14 = { ESCAPED NONLOCAL }
j.160_15 = { NULL NONLOCAL } same as _1
_16 = { NONLOCAL }
_17 = { ESCAPED NONLOCAL }
_18 = { ESCAPED NONLOCAL } same as _17
_19 = { ESCAPED NONLOCAL }
_20 = { NONLOCAL }
_21 = { ESCAPED NONLOCAL }
j_248 = { NULL NONLOCAL } same as _1
j.161_22 = { NULL NONLOCAL } same as _1
_23 = { NULL NONLOCAL } same as _1
i_141 = { NULL NONLOCAL } same as _1
_24 = { NULL NONLOCAL } same as _1
_25 = { NONLOCAL }
_26 = { ESCAPED NONLOCAL }
_27 = { NULL NONLOCAL } same as _1
_28 = { NULL NONLOCAL } same as _1
_29 = { NONLOCAL }
_30 = { ESCAPED NONLOCAL }
_31 = { NONLOCAL } same as plaintext
_32 = { NULL NONLOCAL } same as _1
_33 = { NULL NONLOCAL } same as _1
_34 = { NONLOCAL }
_35 = { ESCAPED NONLOCAL }
i_246 = { NULL NONLOCAL } same as _1
_36 = { NONLOCAL }
__builtin_object_size = { }
CALLUSED(60) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(61) = { }
_222 = { NULL ESCAPED NONLOCAL }
derefaddrtmp(63) = { NULL }
_37 = { NULL NONLOCAL } same as _1
i_142 = { NULL NONLOCAL } same as _1
_38 = { NULL NONLOCAL } same as _1
_39 = { NONLOCAL }
_40 = { ESCAPED NONLOCAL }
_41 = { NULL NONLOCAL } same as _1
_42 = { NULL NONLOCAL } same as _1
_43 = { NONLOCAL }
derefaddrtmp(72) = { NONLOCAL } same as plaintext
_44 = { NULL NONLOCAL } same as _1
_45 = { NULL NONLOCAL } same as _1
_46 = { NONLOCAL }
derefaddrtmp(76) = { NONLOCAL } same as plaintext
_47 = { NULL NONLOCAL } same as _1
_48 = { NULL NONLOCAL } same as _1
_49 = { NONLOCAL }
_50 = { ESCAPED NONLOCAL }
_51 = { NULL NONLOCAL } same as _1
_52 = { NULL NONLOCAL } same as _1
_53 = { NONLOCAL }
_54 = { ESCAPED NONLOCAL }
i_244 = { NULL NONLOCAL } same as _1
root_149 = { NONLOCAL } same as plaintext
root_202 = { NONLOCAL } same as plaintext
_55 = { NULL NONLOCAL } same as _1
i_143 = { NULL NONLOCAL } same as _1
_56 = { NULL NONLOCAL } same as _1
_57 = { NONLOCAL }
_58 = { ESCAPED NONLOCAL }
_59 = { NULL NONLOCAL } same as _1
_60 = { NULL NONLOCAL } same as _1
_61 = { NONLOCAL }
_62 = { ESCAPED NONLOCAL }
_63 = { NULL NONLOCAL } same as _1
_64 = { NULL NONLOCAL } same as _1
_65 = { NONLOCAL }
lowfreq1_237 = { ESCAPED NONLOCAL }
lowidx1_238 = { NULL NONLOCAL } same as _1
lowfreq1_150 = { ESCAPED NONLOCAL }
lowfreq1_151 = { ESCAPED NONLOCAL } same as lowfreq1_150
lowidx1_154 = { NULL NONLOCAL } same as _1
lowidx1_155 = { NULL NONLOCAL } same as _1
i_239 = { NULL NONLOCAL } same as _1
_66 = { NULL NONLOCAL } same as _1
i_144 = { NULL NONLOCAL } same as _1
_67 = { NULL NONLOCAL } same as _1
_68 = { NONLOCAL }
_69 = { ESCAPED NONLOCAL }
_70 = { NULL NONLOCAL } same as _1
_71 = { NULL NONLOCAL } same as _1
_72 = { NONLOCAL }
_73 = { ESCAPED NONLOCAL }
_74 = { NULL NONLOCAL } same as _1
_75 = { NULL NONLOCAL } same as _1
_76 = { NONLOCAL }
lowfreq2_209 = { ESCAPED NONLOCAL }
lowidx2_210 = { NULL NONLOCAL } same as _1
lowfreq2_152 = { ESCAPED NONLOCAL }
lowfreq2_153 = { ESCAPED NONLOCAL } same as lowfreq2_152
lowidx2_156 = { NULL NONLOCAL } same as _1
lowidx2_157 = { NULL NONLOCAL } same as _1
i_211 = { NULL NONLOCAL } same as _1
_77 = { NULL NONLOCAL } same as _1
_78 = { NULL NONLOCAL } same as _1
_79 = { NONLOCAL }
_80 = { NULL NONLOCAL } same as _1
_81 = { NULL NONLOCAL } same as _1
_82 = { NONLOCAL }
_83 = { NONLOCAL } same as plaintext
_84 = { NONLOCAL } same as plaintext
_85 = { NONLOCAL }
_86 = { ESCAPED NONLOCAL }
_87 = { NONLOCAL } same as plaintext
_88 = { NONLOCAL } same as plaintext
_89 = { NONLOCAL }
_90 = { NONLOCAL } same as plaintext
_91 = { NONLOCAL } same as plaintext
_92 = { NONLOCAL }
_93 = { NONLOCAL } same as plaintext
_94 = { NONLOCAL } same as plaintext
_95 = { NONLOCAL }
derefaddrtmp(145) = { NONLOCAL } same as plaintext
_96 = { NULL NONLOCAL } same as _1
i_145 = { NULL NONLOCAL } same as _1
_97 = { NONLOCAL }
_98 = { ESCAPED NONLOCAL }
c_227 = { ESCAPED NONLOCAL } same as _98
_99 = { ESCAPED NONLOCAL }
c_165 = { ESCAPED NONLOCAL } same as _99
_100 = { ESCAPED NONLOCAL }
_101 = { NONLOCAL }
_102 = { ESCAPED NONLOCAL }
_103 = { ESCAPED NONLOCAL } same as _102
_104 = { ESCAPED NONLOCAL }
_105 = { NONLOCAL }
_106 = { ESCAPED NONLOCAL }
bitstring = { NONLOCAL } same as plaintext
_107 = { ESCAPED NONLOCAL } same as _99
_108 = { ESCAPED NONLOCAL } same as _100
_109 = { NONLOCAL }
c_235 = { ESCAPED NONLOCAL }
bitstringlen_236 = { NULL NONLOCAL } same as _1
bitstringlen_163 = { NULL NONLOCAL } same as _1
_110 = { ESCAPED NONLOCAL } same as _99
_111 = { ESCAPED NONLOCAL } same as _100
_112 = { NONLOCAL }
_113 = { ESCAPED NONLOCAL }
_114 = { NONLOCAL } same as plaintext
_115 = { NONLOCAL } same as plaintext
_116 = { NULL NONLOCAL } same as _1
bitoffset_158 = { NULL NONLOCAL } same as _1
byteoffset_253 = { NULL NONLOCAL } same as _1
bitoffset.165_254 = { NULL NONLOCAL } same as _1
bitnumb_255 = { NULL NONLOCAL }
_256 = { NULL NONLOCAL } same as _1
_257 = { NONLOCAL }
_258 = { NULL ESCAPED NONLOCAL }
_259 = { NULL ESCAPED NONLOCAL } same as _258
_260 = { NULL NONLOCAL }
_261 = { NULL NONLOCAL } same as _260
_262 = { NULL ESCAPED NONLOCAL } same as _258
_263 = { NULL ESCAPED NONLOCAL } same as _258
_264 = { NULL NONLOCAL } same as _1
_265 = { NONLOCAL }
_266 = { NULL ESCAPED NONLOCAL }
_267 = { NULL ESCAPED NONLOCAL } same as _266
_268 = { NULL NONLOCAL } same as _260
_269 = { NULL NONLOCAL } same as _260
_270 = { NULL NONLOCAL } same as _260
_271 = { NULL ESCAPED NONLOCAL } same as _266
_272 = { NULL ESCAPED NONLOCAL } same as _266
bitoffset_232 = { NULL NONLOCAL } same as _1
bitoffset_159 = { NULL NONLOCAL } same as _1
bitstringlen_164 = { NULL NONLOCAL } same as _1
bitstringlen_229 = { NULL NONLOCAL } same as _1
bitstringlen.162_117 = { NULL NONLOCAL } same as _1
i_230 = { NULL NONLOCAL } same as _1
i_188 = { NULL } same as derefaddrtmp(63)
bitoffset_189 = { NULL } same as derefaddrtmp(63)
_118 = { NULL NONLOCAL } same as _1
maxbitoffset_214 = { NULL NONLOCAL } same as _1
bitoffset_160 = { NULL NONLOCAL } same as _1
bitoffset_161 = { NULL NONLOCAL } same as _1
textoffset_162 = { NULL NONLOCAL } same as _1
textoffset_220 = { NULL NONLOCAL } same as _1
i_217 = { NONLOCAL } same as plaintext
_119 = { NULL NONLOCAL } same as _1
byteoffset_273 = { NULL NONLOCAL } same as _1
bitoffset.166_274 = { NULL NONLOCAL } same as _1
bitnumb_275 = { NULL NONLOCAL }
_276 = { NULL NONLOCAL }
_277 = { NULL NONLOCAL } same as _1
_278 = { NONLOCAL }
_279 = { ESCAPED NONLOCAL }
_280 = { ESCAPED NONLOCAL } same as _279
_281 = { NULL ESCAPED NONLOCAL }
_284 = { NULL ESCAPED NONLOCAL } same as _281
_120 = { NULL ESCAPED NONLOCAL } same as _281
_121 = { ESCAPED NONLOCAL }
i_147 = { ESCAPED NONLOCAL } same as _121
_122 = { ESCAPED NONLOCAL } same as _121
_123 = { NONLOCAL }
i_224 = { ESCAPED NONLOCAL }
_124 = { ESCAPED NONLOCAL } same as _121
_125 = { ESCAPED NONLOCAL } same as _121
_126 = { NONLOCAL }
i_223 = { ESCAPED NONLOCAL }
i_146 = { ESCAPED NONLOCAL }
bitoffset_225 = { NULL NONLOCAL } same as _1
_127 = { ESCAPED NONLOCAL } same as _121
_128 = { ESCAPED NONLOCAL } same as _121
_129 = { NONLOCAL }
_130 = { ESCAPED NONLOCAL }
_131 = { ESCAPED NONLOCAL } same as _121
_132 = { ESCAPED NONLOCAL } same as _121
_133 = { NONLOCAL }
_134 = { ESCAPED NONLOCAL }
textoffset.163_135 = { NULL NONLOCAL } same as _1
_136 = { NONLOCAL }
_137 = { ESCAPED NONLOCAL } same as _134
nloops_139 = { NONLOCAL } same as plaintext
nloops_184 = { NONLOCAL } same as plaintext
nloops.164_138 = { NONLOCAL } same as plaintext
StopStopwatch = { }
_186 = { ESCAPED NONLOCAL } same as elapsed_182


Alias information for DoHuffIteration

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to NULL, points-to vars: { }
_29, points-to non-local, points-to NULL, points-to vars: { }
_34, points-to non-local, points-to NULL, points-to vars: { }
_36, points-to non-local, points-to NULL, points-to vars: { }
_39, points-to non-local, points-to NULL, points-to vars: { }
_43, points-to non-local, points-to NULL, points-to vars: { }
_46, points-to non-local, points-to NULL, points-to vars: { }
_49, points-to non-local, points-to NULL, points-to vars: { }
_53, points-to non-local, points-to NULL, points-to vars: { }
_57, points-to non-local, points-to NULL, points-to vars: { }
_61, points-to non-local, points-to NULL, points-to vars: { }
_65, points-to non-local, points-to NULL, points-to vars: { }
_68, points-to non-local, points-to NULL, points-to vars: { }
_72, points-to non-local, points-to NULL, points-to vars: { }
_76, points-to non-local, points-to NULL, points-to vars: { }
_79, points-to non-local, points-to NULL, points-to vars: { }
_82, points-to non-local, points-to NULL, points-to vars: { }
_85, points-to non-local, points-to NULL, points-to vars: { }
_89, points-to non-local, points-to NULL, points-to vars: { }
_92, points-to non-local, points-to NULL, points-to vars: { }
_95, points-to non-local, points-to NULL, points-to vars: { }
_97, points-to non-local, points-to NULL, points-to vars: { }
_101, points-to non-local, points-to NULL, points-to vars: { }
_105, points-to non-local, points-to NULL, points-to vars: { }
_109, points-to non-local, points-to NULL, points-to vars: { }
_112, points-to non-local, points-to NULL, points-to vars: { }
_123, points-to non-local, points-to NULL, points-to vars: { }
_126, points-to non-local, points-to NULL, points-to vars: { }
_129, points-to non-local, points-to NULL, points-to vars: { }
_133, points-to non-local, points-to NULL, points-to vars: { }
_136, points-to non-local, points-to NULL, points-to vars: { }
hufftree_192(D), points-to non-local, points-to NULL, points-to vars: { }
decomparray_218(D), points-to non-local, points-to NULL, points-to vars: { }
comparray_221(D), points-to non-local, points-to NULL, points-to vars: { }
plaintext_226(D), points-to non-local, points-to NULL, points-to vars: { }
_257, points-to non-local, points-to NULL, points-to vars: { }
_265, points-to non-local, points-to NULL, points-to vars: { }
_278, points-to non-local, points-to NULL, points-to vars: { }

DoHuffIteration (farchar * plaintext, farchar * comparray, farchar * decomparray, long unsigned int arraysize, long unsigned int nloops, struct huff_node * hufftree)
{
  u32 byteoffset;
  int bitnumb;
  int D.6438;
  u32 byteoffset;
  int bitnumb;
  char bitchar;
  long unsigned int elapsed;
  char bitstring[30];
  int c;
  long int bitstringlen;
  long int maxbitoffset;
  long int textoffset;
  long int bitoffset;
  int lowidx2;
  int lowidx1;
  float lowfreq2;
  float lowfreq1;
  int root;
  long int j;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  struct huff_node * _3;
  long unsigned int _4;
  long unsigned int _5;
  struct huff_node * _6;
  unsigned char _7;
  sizetype j.159_8;
  farchar * _9;
  char _10;
  long unsigned int _11;
  long unsigned int _12;
  struct huff_node * _13;
  float _14;
  sizetype j.160_15;
  farchar * _16;
  char _17;
  long unsigned int _18;
  long unsigned int _19;
  struct huff_node * _20;
  float _21;
  long unsigned int j.161_22;
  long unsigned int _23;
  long unsigned int _24;
  struct huff_node * _25;
  float _26;
  long unsigned int _27;
  long unsigned int _28;
  struct huff_node * _29;
  float _30;
  float _31;
  long unsigned int _32;
  long unsigned int _33;
  struct huff_node * _34;
  float _35;
  struct huff_node * _36;
  long unsigned int _37;
  long unsigned int _38;
  struct huff_node * _39;
  float _40;
  long unsigned int _41;
  long unsigned int _42;
  struct huff_node * _43;
  long unsigned int _44;
  long unsigned int _45;
  struct huff_node * _46;
  long unsigned int _47;
  long unsigned int _48;
  struct huff_node * _49;
  int _50;
  long unsigned int _51;
  long unsigned int _52;
  struct huff_node * _53;
  int _54;
  long unsigned int _55;
  long unsigned int _56;
  struct huff_node * _57;
  int _58;
  long unsigned int _59;
  long unsigned int _60;
  struct huff_node * _61;
  float _62;
  long unsigned int _63;
  long unsigned int _64;
  struct huff_node * _65;
  long unsigned int _66;
  long unsigned int _67;
  struct huff_node * _68;
  int _69;
  long unsigned int _70;
  long unsigned int _71;
  struct huff_node * _72;
  float _73;
  long unsigned int _74;
  long unsigned int _75;
  struct huff_node * _76;
  long unsigned int _77;
  long unsigned int _78;
  struct huff_node * _79;
  long unsigned int _80;
  long unsigned int _81;
  struct huff_node * _82;
  long unsigned int _83;
  long unsigned int _84;
  struct huff_node * _85;
  float _86;
  long unsigned int _87;
  long unsigned int _88;
  struct huff_node * _89;
  long unsigned int _90;
  long unsigned int _91;
  struct huff_node * _92;
  long unsigned int _93;
  long unsigned int _94;
  struct huff_node * _95;
  sizetype _96;
  farchar * _97;
  char _98;
  long unsigned int _99;
  long unsigned int _100;
  struct huff_node * _101;
  int _102;
  long unsigned int _103;
  long unsigned int _104;
  struct huff_node * _105;
  int _106;
  long unsigned int _107;
  long unsigned int _108;
  struct huff_node * _109;
  long unsigned int _110;
  long unsigned int _111;
  struct huff_node * _112;
  int _113;
  char _114;
  int _115;
  unsigned int _116;
  long int bitstringlen.162_117;
  long unsigned int _118;
  unsigned int _119;
  int _120;
  long unsigned int _121;
  long unsigned int _122;
  struct huff_node * _123;
  long unsigned int _124;
  long unsigned int _125;
  struct huff_node * _126;
  long unsigned int _127;
  long unsigned int _128;
  struct huff_node * _129;
  int _130;
  long unsigned int _131;
  long unsigned int _132;
  struct huff_node * _133;
  unsigned char _134;
  sizetype textoffset.163_135;
  farchar * _136;
  char _137;
  long unsigned int nloops.164_138;
  long unsigned int _186;
  long unsigned int _222;
  int bitoffset.165_254;
  sizetype _256;
  u8 * _257;
  unsigned char _258;
  signed char _259;
  int _260;
  signed char _261;
  signed char _262;
  unsigned char _263;
  sizetype _264;
  u8 * _265;
  unsigned char _266;
  signed char _267;
  int _268;
  signed char _269;
  signed char _270;
  signed char _271;
  unsigned char _272;
  int bitoffset.166_274;
  int _276;
  sizetype _277;
  u8 * _278;
  unsigned char _279;
  int _280;
  int _281;

  <bb 2> [0.00%]:
  elapsed_182 = StartStopwatch ();
  goto <bb 54>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_140;
  _2 = _1 * 20;
  _3 = hufftree_192(D) + _2;
  _3->freq = 0.0;
  _4 = (long unsigned int) i_140;
  _5 = _4 * 20;
  _6 = hufftree_192(D) + _5;
  _7 = (unsigned char) i_140;
  _6->c = _7;
  i_251 = i_140 + 1;

  <bb 4> [0.00%]:
  # i_140 = PHI <0(54), i_251(3)>
  if (i_140 <= 255)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  j.159_8 = (sizetype) j_148;
  _9 = plaintext_226(D) + j.159_8;
  _10 = *_9;
  _11 = (long unsigned int) _10;
  _12 = _11 * 20;
  _13 = hufftree_192(D) + _12;
  _14 = _13->freq;
  j.160_15 = (sizetype) j_148;
  _16 = plaintext_226(D) + j.160_15;
  _17 = *_16;
  _18 = (long unsigned int) _17;
  _19 = _18 * 20;
  _20 = hufftree_192(D) + _19;
  _21 = _14 + 1.0e+0;
  _20->freq = _21;
  j_248 = j_148 + 1;

  <bb 6> [0.00%]:
  # j_148 = PHI <0(4), j_248(5)>
  j.161_22 = (long unsigned int) j_148;
  if (j.161_22 < arraysize_190(D))
    goto <bb 5>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 7> [0.00%]:
  _23 = (long unsigned int) i_141;
  _24 = _23 * 20;
  _25 = hufftree_192(D) + _24;
  _26 = _25->freq;
  if (_26 != 0.0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  _27 = (long unsigned int) i_141;
  _28 = _27 * 20;
  _29 = hufftree_192(D) + _28;
  _30 = _29->freq;
  _31 = (float) arraysize_190(D);
  _32 = (long unsigned int) i_141;
  _33 = _32 * 20;
  _34 = hufftree_192(D) + _33;
  _35 = _30 / _31;
  _34->freq = _35;

  <bb 9> [0.00%]:
  i_246 = i_141 + 1;

  <bb 10> [0.00%]:
  # i_141 = PHI <0(6), i_246(9)>
  if (i_141 <= 255)
    goto <bb 7>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [100.00%]:
  _36 = hufftree_192(D) + 5120;
  _222 = __builtin_object_size (_36, 0);
  __builtin___memset_chk (_36, 0, 5120, _222);
  goto <bb 16>; [0.00%]

  <bb 12> [0.00%]:
  _37 = (long unsigned int) i_142;
  _38 = _37 * 20;
  _39 = hufftree_192(D) + _38;
  _40 = _39->freq;
  if (_40 == 0.0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  _41 = (long unsigned int) i_142;
  _42 = _41 * 20;
  _43 = hufftree_192(D) + _42;
  _43->parent = 32000;
  goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  _44 = (long unsigned int) i_142;
  _45 = _44 * 20;
  _46 = hufftree_192(D) + _45;
  _46->right = -1;
  _47 = (long unsigned int) i_142;
  _48 = _47 * 20;
  _49 = hufftree_192(D) + _48;
  _50 = _46->right;
  _49->left = _50;
  _51 = (long unsigned int) i_142;
  _52 = _51 * 20;
  _53 = hufftree_192(D) + _52;
  _54 = _49->left;
  _53->parent = _54;

  <bb 15> [0.00%]:
  i_244 = i_142 + 1;

  <bb 16> [0.00%]:
  # i_142 = PHI <0(11), i_244(15)>
  if (i_142 <= 511)
    goto <bb 12>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 17> [0.00%]:
  # root_149 = PHI <255(16), root_202(31)>
  goto <bb 22>; [0.00%]

  <bb 18> [0.00%]:
  _55 = (long unsigned int) i_143;
  _56 = _55 * 20;
  _57 = hufftree_192(D) + _56;
  _58 = _57->parent;
  if (_58 < 0)
    goto <bb 19>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 19> [0.00%]:
  _59 = (long unsigned int) i_143;
  _60 = _59 * 20;
  _61 = hufftree_192(D) + _60;
  _62 = _61->freq;
  if (_62 < lowfreq1_151)
    goto <bb 20>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 20> [0.00%]:
  _63 = (long unsigned int) i_143;
  _64 = _63 * 20;
  _65 = hufftree_192(D) + _64;
  lowfreq1_237 = _65->freq;
  lowidx1_238 = i_143;

  <bb 21> [0.00%]:
  # lowfreq1_150 = PHI <lowfreq1_151(18), lowfreq1_151(19), lowfreq1_237(20)>
  # lowidx1_154 = PHI <lowidx1_155(18), lowidx1_155(19), i_143(20)>
  i_239 = i_143 + 1;

  <bb 22> [0.00%]:
  # i_143 = PHI <0(17), i_239(21)>
  # lowfreq1_151 = PHI <2.0e+0(17), lowfreq1_150(21)>
  # lowidx1_155 = PHI <-1(17), lowidx1_154(21)>
  if (i_143 <= root_149)
    goto <bb 18>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 23> [0.00%]:
  if (lowidx1_155 == -1)
    goto <bb 44>; [0.00%]
  else
    goto <bb 29>; [0.00%]

  <bb 24> [0.00%]:
  _66 = (long unsigned int) i_144;
  _67 = _66 * 20;
  _68 = hufftree_192(D) + _67;
  _69 = _68->parent;
  if (_69 < 0)
    goto <bb 25>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 25> [0.00%]:
  if (i_144 != lowidx1_155)
    goto <bb 26>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 26> [0.00%]:
  _70 = (long unsigned int) i_144;
  _71 = _70 * 20;
  _72 = hufftree_192(D) + _71;
  _73 = _72->freq;
  if (_73 < lowfreq2_153)
    goto <bb 27>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 27> [0.00%]:
  _74 = (long unsigned int) i_144;
  _75 = _74 * 20;
  _76 = hufftree_192(D) + _75;
  lowfreq2_209 = _76->freq;
  lowidx2_210 = i_144;

  <bb 28> [0.00%]:
  # lowfreq2_152 = PHI <lowfreq2_153(24), lowfreq2_153(25), lowfreq2_153(26), lowfreq2_209(27)>
  # lowidx2_156 = PHI <lowidx2_157(24), lowidx2_157(25), lowidx2_157(26), i_144(27)>
  i_211 = i_144 + 1;

  <bb 29> [0.00%]:
  # i_144 = PHI <0(23), i_211(28)>
  # lowfreq2_153 = PHI <2.0e+0(23), lowfreq2_152(28)>
  # lowidx2_157 = PHI <-1(23), lowidx2_156(28)>
  if (i_144 <= root_149)
    goto <bb 24>; [0.00%]
  else
    goto <bb 30>; [0.00%]

  <bb 30> [0.00%]:
  if (lowidx2_157 == -1)
    goto <bb 44>; [0.00%]
  else
    goto <bb 31>; [0.00%]

  <bb 31> [0.00%]:
  root_202 = root_149 + 1;
  _77 = (long unsigned int) lowidx1_155;
  _78 = _77 * 20;
  _79 = hufftree_192(D) + _78;
  _79->parent = root_202;
  _80 = (long unsigned int) lowidx2_157;
  _81 = _80 * 20;
  _82 = hufftree_192(D) + _81;
  _82->parent = root_202;
  _83 = (long unsigned int) root_202;
  _84 = _83 * 20;
  _85 = hufftree_192(D) + _84;
  _86 = lowfreq1_151 + lowfreq2_153;
  _85->freq = _86;
  _87 = (long unsigned int) root_202;
  _88 = _87 * 20;
  _89 = hufftree_192(D) + _88;
  _89->left = lowidx1_155;
  _90 = (long unsigned int) root_202;
  _91 = _90 * 20;
  _92 = hufftree_192(D) + _91;
  _92->right = lowidx2_157;
  _93 = (long unsigned int) root_202;
  _94 = _93 * 20;
  _95 = hufftree_192(D) + _94;
  _95->parent = -2;
  goto <bb 17>; [0.00%]

  <bb 32> [0.00%]:
  _96 = (sizetype) i_145;
  _97 = plaintext_226(D) + _96;
  _98 = *_97;
  c_227 = (int) _98;
  goto <bb 37>; [0.00%]

  <bb 33> [0.00%]:
  _99 = (long unsigned int) c_165;
  _100 = _99 * 20;
  _101 = hufftree_192(D) + _100;
  _102 = _101->parent;
  _103 = (long unsigned int) _102;
  _104 = _103 * 20;
  _105 = hufftree_192(D) + _104;
  _106 = _105->left;
  if (_106 == c_165)
    goto <bb 34>; [0.00%]
  else
    goto <bb 35>; [0.00%]

  <bb 34> [0.00%]:
  bitstring[bitstringlen_163] = 48;
  goto <bb 36>; [0.00%]

  <bb 35> [0.00%]:
  bitstring[bitstringlen_163] = 49;

  <bb 36> [0.00%]:
  _107 = (long unsigned int) c_165;
  _108 = _107 * 20;
  _109 = hufftree_192(D) + _108;
  c_235 = _109->parent;
  bitstringlen_236 = bitstringlen_163 + 1;

  <bb 37> [0.00%]:
  # bitstringlen_163 = PHI <0(32), bitstringlen_236(36)>
  # c_165 = PHI <c_227(32), c_235(36)>
  _110 = (long unsigned int) c_165;
  _111 = _110 * 20;
  _112 = hufftree_192(D) + _111;
  _113 = _112->parent;
  if (_113 != -2)
    goto <bb 33>; [0.00%]
  else
    goto <bb 42>; [0.00%]

  <bb 38> [100.00%]:
  _114 = bitstring[bitstringlen_229];
  _115 = (int) _114;
  _116 = (unsigned int) bitoffset_158;
  byteoffset_253 = _116 >> 3;
  bitoffset.165_254 = (int) bitoffset_158;
  bitnumb_255 = bitoffset.165_254 & 7;
  if (_114 == 49)
    goto <bb 39>; [30.50%]
  else
    goto <bb 40>; [69.50%]

  <bb 39> [30.50%]:
  _256 = (sizetype) byteoffset_253;
  _257 = comparray_221(D) + _256;
  _258 = *_257;
  _259 = (signed char) _258;
  _260 = 1 << bitnumb_255;
  _261 = (signed char) _260;
  _262 = _259 | _261;
  _263 = (unsigned char) _262;
  *_257 = _263;
  goto <bb 41>; [100.00%]

  <bb 40> [69.50%]:
  _264 = (sizetype) byteoffset_253;
  _265 = comparray_221(D) + _264;
  _266 = *_265;
  _267 = (signed char) _266;
  _268 = 1 << bitnumb_255;
  _269 = (signed char) _268;
  _270 = ~_269;
  _271 = _267 & _270;
  _272 = (unsigned char) _271;
  *_265 = _272;

  <bb 41> [0.00%]:
  bitoffset_232 = bitoffset_158 + 1;

  <bb 42> [0.00%]:
  # bitoffset_158 = PHI <bitoffset_159(37), bitoffset_232(41)>
  # bitstringlen_164 = PHI <bitstringlen_163(37), bitstringlen_229(41)>
  bitstringlen.162_117 = bitstringlen_164;
  bitstringlen_229 = bitstringlen_164 + -1;
  if (bitstringlen_164 != 0)
    goto <bb 38>; [0.00%]
  else
    goto <bb 43>; [0.00%]

  <bb 43> [0.00%]:
  i_230 = i_145 + 1;
  goto <bb 45>; [0.00%]

  <bb 44> [0.00%]:
  # i_188 = PHI <0(30), 0(23)>
  # bitoffset_189 = PHI <0(30), 0(23)>

  <bb 45> [0.00%]:
  # i_145 = PHI <i_188(44), i_230(43)>
  # bitoffset_159 = PHI <bitoffset_189(44), bitoffset_158(43)>
  _118 = (long unsigned int) i_145;
  if (_118 < arraysize_190(D))
    goto <bb 32>; [0.00%]
  else
    goto <bb 46>; [0.00%]

  <bb 46> [0.00%]:
  maxbitoffset_214 = bitoffset_159;

  <bb 47> [0.00%]:
  # bitoffset_160 = PHI <0(46), bitoffset_161(53)>
  # textoffset_162 = PHI <0(46), textoffset_220(53)>
  i_217 = root_149;
  goto <bb 52>; [0.00%]

  <bb 48> [100.00%]:
  _119 = (unsigned int) bitoffset_161;
  byteoffset_273 = _119 >> 3;
  bitoffset.166_274 = (int) bitoffset_161;
  bitnumb_275 = bitoffset.166_274 & 7;
  _276 = 1 << bitnumb_275;
  _277 = (sizetype) byteoffset_273;
  _278 = comparray_221(D) + _277;
  _279 = *_278;
  _280 = (int) _279;
  _281 = _276 & _280;
  _284 = _281;
  _120 = _281;
  if (_281 == 0)
    goto <bb 49>; [0.00%]
  else
    goto <bb 50>; [0.00%]

  <bb 49> [0.00%]:
  _121 = (long unsigned int) i_147;
  _122 = _121 * 20;
  _123 = hufftree_192(D) + _122;
  i_224 = _123->left;
  goto <bb 51>; [0.00%]

  <bb 50> [0.00%]:
  _124 = (long unsigned int) i_147;
  _125 = _124 * 20;
  _126 = hufftree_192(D) + _125;
  i_223 = _126->right;

  <bb 51> [0.00%]:
  # i_146 = PHI <i_224(49), i_223(50)>
  bitoffset_225 = bitoffset_161 + 1;

  <bb 52> [0.00%]:
  # i_147 = PHI <root_149(47), i_146(51)>
  # bitoffset_161 = PHI <bitoffset_160(47), bitoffset_225(51)>
  _127 = (long unsigned int) i_147;
  _128 = _127 * 20;
  _129 = hufftree_192(D) + _128;
  _130 = _129->left;
  if (_130 != -1)
    goto <bb 48>; [0.00%]
  else
    goto <bb 53>; [0.00%]

  <bb 53> [0.00%]:
  _131 = (long unsigned int) i_147;
  _132 = _131 * 20;
  _133 = hufftree_192(D) + _132;
  _134 = _133->c;
  textoffset.163_135 = (sizetype) textoffset_162;
  _136 = decomparray_218(D) + textoffset.163_135;
  _137 = (char) _134;
  *_136 = _137;
  textoffset_220 = textoffset_162 + 1;
  if (bitoffset_159 > bitoffset_161)
    goto <bb 47>; [0.00%]
  else
    goto <bb 54>; [0.00%]

  <bb 54> [0.00%]:
  # nloops_139 = PHI <nloops_183(D)(2), nloops_184(53)>
  nloops.164_138 = nloops_139;
  nloops_184 = nloops_139 + 18446744073709551615;
  if (nloops_139 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 55>; [0.00%]

  <bb 55> [0.00%]:
  _186 = StopStopwatch (elapsed_182);
  bitstring ={v} {CLOBBER};
  return _186;

}



;; Function DoLUIteration (DoLUIteration, funcdef_no=113, decl_uid=4743, cgraph_uid=113, symbol_order=138)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
a = &NONLOCAL
b = &NONLOCAL
abase = &NONLOCAL
bbase = &NONLOCAL
numarrays = &NONLOCAL
_1 = j_16
_1 = &NONLOCAL
locabase_40 = abase + UNKNOWN
_2 = j_16
_2 = &NONLOCAL
locbbase_41 = bbase + UNKNOWN
_3 = i_17
_3 = &NONLOCAL
_4 = a + UNKNOWN
_5 = i_17
_5 = &NONLOCAL
_29 = _1
_29 = _5
_6 = abase + UNKNOWN
_7 = *_4
*_6 = _7
i_50 = i_17
i_50 = &NONLOCAL
i_17 = &NULL
i_17 = i_50
_8 = i_18
_8 = &NONLOCAL
_9 = b + UNKNOWN
_10 = i_18
_10 = &NONLOCAL
_24 = _2
_24 = _10
_11 = bbase + UNKNOWN
_12 = *_9
*_11 = _12
i_47 = i_18
i_47 = &NONLOCAL
i_18 = &NULL
i_18 = i_47
j_44 = j_16
j_44 = &NONLOCAL
j_16 = &NULL
j_16 = j_44
elapsed_28 = NONLOCAL
_13 = i_19
_13 = &NONLOCAL
locabase_34 = abase + UNKNOWN
_14 = i_19
_14 = &NONLOCAL
locbbase_36 = bbase + UNKNOWN
ptra$ptrs$p_43 = locabase_34
_15 = ptra$ptrs$p_43
ESCAPED = _15
ESCAPED = &NONLOCAL
ESCAPED = locbbase_36
i_39 = i_19
i_39 = &NONLOCAL
i_19 = &NULL
i_19 = i_39
ESCAPED = elapsed_28
_31 = NONLOCAL
ESCAPED = _31

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"a"[label="a = { 5 }"];
"b"[label="b = { 5 }"];
"abase"[label="abase = { 5 }"];
"bbase"[label="bbase = { 5 }"];
"numarrays"[label="numarrays = { 5 }"];
"_1"[label="_1 = { 5 }"];
"j_16"[label="j_16 = { 1 5 }"];
"locabase_40";
"_2"[label="_2 = { 5 }"];
"locbbase_41";
"_3"[label="_3 = { 5 }"];
"i_17"[label="i_17 = { 1 5 }"];
"_4";
"_5"[label="_5 = { 5 }"];
"_29";
"_6";
"_7";
"_8"[label="_8 = { 5 }"];
"i_18"[label="i_18 = { 1 5 }"];
"_9";
"_10"[label="_10 = { 5 }"];
"_24";
"_11";
"_12";
"StartStopwatch";
"elapsed_28";
"_13"[label="_13 = { 5 }"];
"i_19"[label="i_19 = { 1 5 }"];
"locabase_34";
"_14"[label="_14 = { 5 }"];
"locbbase_36";
"ptra$ptrs$p_43";
"_15";
"lusolve";
"StopStopwatch";
"_31";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*a";
"*b";
"*abase";
"*bbase";
"*numarrays";
"*_1";
"*j_16";
"*locabase_40";
"*_2";
"*locbbase_41";
"*_3";
"*i_17";
"*_4";
"*_5";
"*_29";
"*_6";
"*_7";
"*i_50";
"*_8";
"*i_18";
"*_9";
"*_10";
"*_24";
"*_11";
"*_12";
"*i_47";
"*j_44";
"*StartStopwatch";
"*_13";
"*i_19";
"*locabase_34";
"*_14";
"*locbbase_36";
"*ptra$ptrs$p_43";
"*_15";
"*lusolve";
"*i_39";
"*StopStopwatch";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"elapsed_28" -> "ESCAPED";
"locbbase_36" -> "ESCAPED";
"_15" -> "ESCAPED";
"_31" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"j_16" -> "_1";
"j_16" -> "j_16";
"j_16" -> "j_16";
"j_16" -> "_2";
"i_17" -> "_3";
"i_17" -> "i_17";
"i_17" -> "i_17";
"i_17" -> "_5";
"_1" -> "_29";
"_5" -> "_29";
"*_4" -> "_7";
"i_18" -> "_8";
"i_18" -> "i_18";
"i_18" -> "i_18";
"i_18" -> "_10";
"_2" -> "_24";
"_10" -> "_24";
"*_9" -> "_12";
"NONLOCAL" -> "elapsed_28";
"i_19" -> "_13";
"i_19" -> "i_19";
"i_19" -> "i_19";
"i_19" -> "_14";
"locabase_34" -> "ptra$ptrs$p_43";
"ptra$ptrs$p_43" -> "_15";
"NONLOCAL" -> "_31";
"_7" -> "*_6";
"_12" -> "*_11";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"a" [label="\N\nlocabase_40 = a + UNKNOWN\llocbbase_41 = a + UNKNOWN\l_4 = a + UNKNOWN\l_6 = a + UNKNOWN\l_9 = a + UNKNOWN\l_11 = a + UNKNOWN\llocabase_34 = a + UNKNOWN\llocbbase_36 = a + UNKNOWN\l"];
"_1";
"locabase_40";
"locbbase_41";
"_4" [label="\N\n_7 = *_4\l"];
"_6" [label="\N\n*_6 = _7\l"];
"_7";
"_9" [label="\N\n_12 = *_9\l"];
"_11" [label="\N\n*_11 = _12\l"];
"_12";
"StartStopwatch";
"elapsed_28";
"locabase_34";
"locbbase_36";
"lusolve";
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "locabase_40";
"STOREDANYTHING" -> "locbbase_41";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "_6";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "locabase_34";
"STOREDANYTHING" -> "locbbase_36";
"elapsed_28" -> "ESCAPED";
"locabase_34" -> "ESCAPED";
"locbbase_36" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = elapsed_28\l"];
"STOREDANYTHING";
"INTEGER";
"a" [label="\N\nlocabase_40 = a + UNKNOWN\llocbbase_41 = a + UNKNOWN\l_4 = a + UNKNOWN\l_6 = a + UNKNOWN\l_9 = a + UNKNOWN\l_11 = a + UNKNOWN\llocabase_34 = a + UNKNOWN\llocbbase_36 = a + UNKNOWN\l"];
"_1";
"locabase_40";
"locbbase_41";
"_4" [label="\N\n_7 = *_4\l"];
"_6" [label="\N\n*_6 = _7\l"];
"_7";
"_9" [label="\N\n_12 = *_9\l"];
"_11" [label="\N\n*_11 = _12\l"];
"_12";
"StartStopwatch";
"elapsed_28";
"locabase_34";
"locbbase_36";
"lusolve";
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "locabase_40";
"STOREDANYTHING" -> "locbbase_41";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "_6";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "locabase_34";
"STOREDANYTHING" -> "locbbase_36";
"_7" -> "ESCAPED";
"_12" -> "ESCAPED";
"elapsed_28" -> "ESCAPED";
"elapsed_28" -> "_7";
"elapsed_28" -> "_12";
"locabase_34" -> "ESCAPED";
"locbbase_36" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as elapsed_28
STOREDANYTHING = { }
INTEGER = { ANYTHING }
a = { NONLOCAL }
b = { NONLOCAL } same as a
abase = { NONLOCAL } same as a
bbase = { NONLOCAL } same as a
numarrays = { NONLOCAL } same as a
_1 = { NULL NONLOCAL }
j_16 = { NULL NONLOCAL } same as _1
locabase_40 = { NONLOCAL }
_2 = { NULL NONLOCAL } same as _1
locbbase_41 = { NONLOCAL }
_3 = { NULL NONLOCAL } same as _1
i_17 = { NULL NONLOCAL } same as _1
_4 = { NONLOCAL }
_5 = { NULL NONLOCAL } same as _1
_29 = { NULL NONLOCAL } same as _1
_6 = { NONLOCAL }
_7 = { ESCAPED NONLOCAL }
i_50 = { NULL NONLOCAL } same as _1
_8 = { NULL NONLOCAL } same as _1
i_18 = { NULL NONLOCAL } same as _1
_9 = { NONLOCAL }
_10 = { NULL NONLOCAL } same as _1
_24 = { NULL NONLOCAL } same as _1
_11 = { NONLOCAL }
_12 = { ESCAPED NONLOCAL }
i_47 = { NULL NONLOCAL } same as _1
j_44 = { NULL NONLOCAL } same as _1
StartStopwatch = { }
elapsed_28 = { ESCAPED NONLOCAL }
_13 = { NULL NONLOCAL } same as _1
i_19 = { NULL NONLOCAL } same as _1
locabase_34 = { NONLOCAL }
_14 = { NULL NONLOCAL } same as _1
locbbase_36 = { NONLOCAL }
ptra$ptrs$p_43 = { NONLOCAL } same as locabase_34
_15 = { NONLOCAL } same as locabase_34
lusolve = { }
i_39 = { NULL NONLOCAL } same as _1
StopStopwatch = { }
_31 = { ESCAPED NONLOCAL } same as elapsed_28


Alias information for DoLUIteration

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_4, points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to NULL, points-to vars: { }
abase_33(D), points-to non-local, points-to NULL, points-to vars: { }
locabase_34, points-to non-local, points-to NULL, points-to vars: { }
bbase_35(D), points-to non-local, points-to NULL, points-to vars: { }
locbbase_36, points-to non-local, points-to NULL, points-to vars: { }
locabase_40, points-to non-local, points-to NULL, points-to vars: { }
locbbase_41, points-to non-local, points-to NULL, points-to vars: { }
ptra$ptrs$p_43, points-to non-local, points-to NULL, points-to vars: { }
b_45(D), points-to non-local, points-to NULL, points-to vars: { }
a_48(D), points-to non-local, points-to NULL, points-to vars: { }

DoLUIteration (fardouble * a, fardouble * b, fardouble * abase, fardouble * bbase, long unsigned int numarrays)
{
  fardouble * ptra$ptrs$p;
  long unsigned int i;
  long unsigned int j;
  long unsigned int elapsed;
  struct LUdblptr ptra;
  fardouble * locbbase;
  fardouble * locabase;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  fardouble * _4;
  long unsigned int _5;
  fardouble * _6;
  double _7;
  long unsigned int _8;
  fardouble * _9;
  long unsigned int _10;
  fardouble * _11;
  double _12;
  long unsigned int _13;
  long unsigned int _14;
  fardouble[<unknown>][101] * _15;
  long unsigned int _24;
  long unsigned int _29;
  long unsigned int _31;

  <bb 2> [0.00%]:
  goto <bb 9>; [0.00%]

  <bb 3> [0.00%]:
  _1 = j_16 * 81608;
  locabase_40 = abase_33(D) + _1;
  _2 = j_16 * 808;
  locbbase_41 = bbase_35(D) + _2;
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _3 = i_17 * 8;
  _4 = a_48(D) + _3;
  _5 = i_17 * 8;
  _29 = _1 + _5;
  _6 = abase_33(D) + _29;
  _7 = *_4;
  *_6 = _7;
  i_50 = i_17 + 1;

  <bb 5> [0.00%]:
  # i_17 = PHI <0(3), i_50(4)>
  if (i_17 <= 10200)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _8 = i_18 * 8;
  _9 = b_45(D) + _8;
  _10 = i_18 * 8;
  _24 = _2 + _10;
  _11 = bbase_35(D) + _24;
  _12 = *_9;
  *_11 = _12;
  i_47 = i_18 + 1;

  <bb 7> [0.00%]:
  # i_18 = PHI <0(5), i_47(6)>
  if (i_18 <= 100)
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  j_44 = j_16 + 1;

  <bb 9> [0.00%]:
  # j_16 = PHI <0(2), j_44(8)>
  if (j_16 < numarrays_26(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  elapsed_28 = StartStopwatch ();
  goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  _13 = i_19 * 81608;
  locabase_34 = abase_33(D) + _13;
  _14 = i_19 * 808;
  locbbase_36 = bbase_35(D) + _14;
  ptra$ptrs$p_43 = locabase_34;
  _15 = ptra$ptrs$p_43;
  lusolve (_15, 101, locbbase_36);
  i_39 = i_19 + 1;

  <bb 12> [0.00%]:
  # i_19 = PHI <0(10), i_39(11)>
  if (i_19 < numarrays_26(D))
    goto <bb 11>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:
  _31 = StopStopwatch (elapsed_28);
  return _31;

}



;; Function LoadNumArrayWithRand (LoadNumArrayWithRand, funcdef_no=54, decl_uid=4498, cgraph_uid=54, symbol_order=79)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
array = &NONLOCAL
arraysize = &NONLOCAL
numarrays = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NULL
_1 = NONLOCAL
i.8_2 = i_17
_3 = i.8_2
_3 = &NONLOCAL
_4 = array + UNKNOWN
_5 = _1
*_4 = _5
i_37 = i_17
i_37 = &NONLOCAL
i_17 = &NULL
i_17 = i_37
i.9_6 = i_17
_7 = arraysize
_7 = &NONLOCAL
darray_31 = darray_19 + UNKNOWN
i.10_8 = i_18
_9 = i.10_8
_9 = &NONLOCAL
_10 = array + UNKNOWN
i.11_11 = i_18
_12 = i.11_11
_12 = &NONLOCAL
_13 = darray_31 + UNKNOWN
_14 = *_10
*_13 = _14
i_34 = i_18
i_34 = &NONLOCAL
i_18 = &NULL
i_18 = i_34
i.12_15 = i_18
numarrays_16 = numarrays
numarrays_16 = numarrays_30
darray_19 = array
darray_19 = darray_31
numarrays_30 = numarrays_16
numarrays_30 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"array"[label="array = { 5 }"];
"arraysize"[label="arraysize = { 5 }"];
"numarrays"[label="numarrays = { 5 }"];
"randnum";
"_1";
"i.8_2";
"i_17"[label="i_17 = { 1 5 }"];
"_3"[label="_3 = { 5 }"];
"_4";
"_5";
"i.9_6";
"_7"[label="_7 = { 5 }"];
"darray_31";
"darray_19";
"i.10_8";
"i_18"[label="i_18 = { 1 5 }"];
"_9"[label="_9 = { 5 }"];
"_10";
"i.11_11";
"_12"[label="_12 = { 5 }"];
"_13";
"_14";
"i.12_15";
"numarrays_16"[label="numarrays_16 = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*array";
"*arraysize";
"*numarrays";
"*randnum";
"*_1";
"*i.8_2";
"*i_17";
"*_3";
"*_4";
"*_5";
"*i_37";
"*i.9_6";
"*_7";
"*darray_31";
"*darray_19";
"*i.10_8";
"*i_18";
"*_9";
"*_10";
"*i.11_11";
"*_12";
"*_13";
"*_14";
"*i_34";
"*i.12_15";
"*numarrays_16";
"*numarrays_30";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_1";
"i_17" -> "i.8_2";
"i_17" -> "i_17";
"i_17" -> "i_17";
"i.8_2" -> "_3";
"_1" -> "_5";
"i_17" -> "i.9_6";
"arraysize" -> "_7";
"array" -> "darray_19";
"darray_31" -> "darray_19";
"i_18" -> "i.10_8";
"i_18" -> "i_18";
"i_18" -> "i_18";
"i.10_8" -> "_9";
"i_18" -> "i.11_11";
"i.11_11" -> "_12";
"*_10" -> "_14";
"i_18" -> "i.12_15";
"numarrays" -> "numarrays_16";
"numarrays_16" -> "numarrays_16";
"numarrays_16" -> "numarrays_16";
"NONLOCAL" -> "*ESCAPED";
"_5" -> "*_4";
"_14" -> "*_13";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"array" [label="\N\n_4 = array + UNKNOWN\l_10 = array + UNKNOWN\l"];
"randnum";
"_1";
"i.8_2";
"_4" [label="\N\n*_4 = _1\l"];
"darray_31" [label="\N\n_13 = darray_31 + UNKNOWN\l"];
"darray_19" [label="\N\ndarray_31 = darray_19 + UNKNOWN\l"];
"_10" [label="\N\n_14 = *_10\l"];
"_13" [label="\N\n*_13 = _14\l"];
"_14";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "darray_31";
"STOREDANYTHING" -> "_10";
"STOREDANYTHING" -> "_13";
"array" -> "darray_19";
"darray_31" -> "darray_19";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _1\l"];
"STOREDANYTHING";
"INTEGER";
"array" [label="\N\n_4 = array + UNKNOWN\l_10 = array + UNKNOWN\l"];
"randnum";
"_1";
"i.8_2";
"_4" [label="\N\n*_4 = _1\l"];
"darray_31" [label="\N\n_13 = darray_31 + UNKNOWN\l"];
"darray_19" [label="\N\ndarray_31 = darray_19 + UNKNOWN\l"];
"_10" [label="\N\n_14 = *_10\l"];
"_13" [label="\N\n*_13 = _14\l"];
"_14";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "darray_31";
"STOREDANYTHING" -> "_10";
"STOREDANYTHING" -> "_13";
"array" -> "darray_19";
"_1" -> "ESCAPED";
"_1" -> "_14";
"darray_31" -> "darray_19";
"_14" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
array = { NONLOCAL }
arraysize = { NONLOCAL } same as array
numarrays = { NONLOCAL } same as array
randnum = { }
_1 = { ESCAPED NONLOCAL }
i.8_2 = { NULL NONLOCAL }
i_17 = { NULL NONLOCAL } same as i.8_2
_3 = { NULL NONLOCAL } same as i.8_2
_4 = { NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _1
i_37 = { NULL NONLOCAL } same as i.8_2
i.9_6 = { NULL NONLOCAL } same as i.8_2
_7 = { NONLOCAL } same as array
darray_31 = { NONLOCAL }
darray_19 = { NONLOCAL }
i.10_8 = { NULL NONLOCAL } same as i.8_2
i_18 = { NULL NONLOCAL } same as i.8_2
_9 = { NULL NONLOCAL } same as i.8_2
_10 = { NONLOCAL }
i.11_11 = { NULL NONLOCAL } same as i.8_2
_12 = { NULL NONLOCAL } same as i.8_2
_13 = { NONLOCAL }
_14 = { ESCAPED NONLOCAL }
i_34 = { NULL NONLOCAL } same as i.8_2
i.12_15 = { NULL NONLOCAL } same as i.8_2
numarrays_16 = { NONLOCAL } same as array
numarrays_30 = { NONLOCAL } same as array


Alias information for LoadNumArrayWithRand

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_4, points-to non-local, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to NULL, points-to vars: { }
darray_19, points-to non-local, points-to NULL, points-to vars: { }
array_27(D), points-to non-local, points-to NULL, points-to vars: { }
darray_31, points-to non-local, points-to NULL, points-to vars: { }

LoadNumArrayWithRand (farlong * array, long unsigned int arraysize, unsigned int numarrays)
{
  farlong * darray;
  long int i;
  int _1;
  long unsigned int i.8_2;
  long unsigned int _3;
  farlong * _4;
  long int _5;
  long unsigned int i.9_6;
  long unsigned int _7;
  long unsigned int i.10_8;
  long unsigned int _9;
  farlong * _10;
  long unsigned int i.11_11;
  long unsigned int _12;
  farlong * _13;
  long int _14;
  long unsigned int i.12_15;

  <bb 2> [0.00%]:
  randnum (13);
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = randnum (0);
  i.8_2 = (long unsigned int) i_17;
  _3 = i.8_2 * 8;
  _4 = array_27(D) + _3;
  _5 = (long int) _1;
  *_4 = _5;
  i_37 = i_17 + 1;

  <bb 4> [0.00%]:
  # i_17 = PHI <0(2), i_37(3)>
  i.9_6 = (long unsigned int) i_17;
  if (i.9_6 < arraysize_26(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 5> [0.00%]:
  _7 = arraysize_26(D) * 8;
  darray_31 = darray_19 + _7;
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  i.10_8 = (long unsigned int) i_18;
  _9 = i.10_8 * 8;
  _10 = array_27(D) + _9;
  i.11_11 = (long unsigned int) i_18;
  _12 = i.11_11 * 8;
  _13 = darray_31 + _12;
  _14 = *_10;
  *_13 = _14;
  i_34 = i_18 + 1;

  <bb 7> [0.00%]:
  # i_18 = PHI <0(5), i_34(6)>
  i.12_15 = (long unsigned int) i_18;
  if (i.12_15 < arraysize_26(D))
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  # numarrays_16 = PHI <numarrays_29(D)(4), numarrays_30(7)>
  # darray_19 = PHI <array_27(D)(4), darray_31(7)>
  numarrays_30 = numarrays_16 + 4294967295;
  if (numarrays_30 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  return;

}



;; Function DoNumSortIteration (DoNumSortIteration, funcdef_no=53, decl_uid=4494, cgraph_uid=53, symbol_order=78)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
arraybase = &NONLOCAL
arraysize = &NONLOCAL
numarrays = &NONLOCAL
ESCAPED = arraybase
ESCAPED = arraysize
ESCAPED = numarrays
elapsed_14 = NONLOCAL
_1 = arraysize
_1 = &NONLOCAL
_2 = i_6
_2 = arraysize
_3 = _2
_3 = &NONLOCAL
_4 = arraybase + UNKNOWN
ESCAPED = _4
ESCAPED = &NULL
ESCAPED = _1
i_20 = i_6
i_20 = &NONLOCAL
i_6 = &NULL
i_6 = i_20
_5 = numarrays
ESCAPED = elapsed_14
elapsed_17 = NONLOCAL
ESCAPED = elapsed_17

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"arraybase"[label="arraybase = { 5 }"];
"arraysize"[label="arraysize = { 5 }"];
"numarrays"[label="numarrays = { 5 }"];
"LoadNumArrayWithRand";
"StartStopwatch";
"elapsed_14";
"_1"[label="_1 = { 5 }"];
"_2";
"i_6"[label="i_6 = { 1 5 }"];
"_3"[label="_3 = { 5 }"];
"_4";
"NumHeapSort";
"_5";
"StopStopwatch";
"elapsed_17";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*arraybase";
"*arraysize";
"*numarrays";
"*LoadNumArrayWithRand";
"*StartStopwatch";
"*_1";
"*_2";
"*i_6";
"*_3";
"*_4";
"*NumHeapSort";
"*i_20";
"*_5";
"*StopStopwatch";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"arraybase" -> "ESCAPED";
"arraysize" -> "ESCAPED";
"numarrays" -> "ESCAPED";
"elapsed_14" -> "ESCAPED";
"_1" -> "ESCAPED";
"_4" -> "ESCAPED";
"elapsed_17" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "elapsed_14";
"arraysize" -> "_1";
"arraysize" -> "_2";
"i_6" -> "_2";
"i_6" -> "i_6";
"i_6" -> "i_6";
"_2" -> "_3";
"numarrays" -> "_5";
"NONLOCAL" -> "elapsed_17";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"arraybase" [label="\N\n_4 = arraybase + UNKNOWN\l"];
"LoadNumArrayWithRand";
"StartStopwatch";
"elapsed_14";
"_2";
"_4";
"NumHeapSort";
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_4";
"arraybase" -> "ESCAPED";
"arraybase" -> "_2";
"elapsed_14" -> "ESCAPED";
"_4" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = elapsed_14\l"];
"STOREDANYTHING";
"INTEGER";
"arraybase" [label="\N\n_4 = arraybase + UNKNOWN\l"];
"LoadNumArrayWithRand";
"StartStopwatch";
"elapsed_14";
"_2";
"_4";
"NumHeapSort";
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_4";
"arraybase" -> "ESCAPED";
"arraybase" -> "_2";
"elapsed_14" -> "ESCAPED";
"_4" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as elapsed_14
STOREDANYTHING = { }
INTEGER = { ANYTHING }
arraybase = { NONLOCAL }
arraysize = { NONLOCAL } same as arraybase
numarrays = { NONLOCAL } same as arraybase
LoadNumArrayWithRand = { }
StartStopwatch = { }
elapsed_14 = { ESCAPED NONLOCAL }
_1 = { NONLOCAL } same as arraybase
_2 = { NULL NONLOCAL }
i_6 = { NULL NONLOCAL } same as _2
_3 = { NULL NONLOCAL } same as _2
_4 = { NONLOCAL }
NumHeapSort = { }
i_20 = { NULL NONLOCAL } same as _2
_5 = { NONLOCAL } same as arraybase
StopStopwatch = { }
elapsed_17 = { ESCAPED NONLOCAL } same as elapsed_14


Alias information for DoNumSortIteration

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_4, points-to non-local, points-to NULL, points-to vars: { }
arraybase_9(D), points-to non-local, points-to NULL, points-to vars: { }

DoNumSortIteration (farlong * arraybase, long unsigned int arraysize, unsigned int numarrays)
{
  long unsigned int i;
  long unsigned int elapsed;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  farlong * _4;
  long unsigned int _5;

  <bb 2> [0.00%]:
  LoadNumArrayWithRand (arraybase_9(D), arraysize_10(D), numarrays_11(D));
  elapsed_14 = StartStopwatch ();
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = arraysize_10(D) + 18446744073709551615;
  _2 = i_6 * arraysize_10(D);
  _3 = _2 * 8;
  _4 = arraybase_9(D) + _3;
  NumHeapSort (_4, 0, _1);
  i_20 = i_6 + 1;

  <bb 4> [0.00%]:
  # i_6 = PHI <0(2), i_20(3)>
  _5 = (long unsigned int) numarrays_11(D);
  if (_5 > i_6)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  elapsed_17 = StopStopwatch (elapsed_14);
  return elapsed_17;

}



;; Function LoadStringArray (LoadStringArray, funcdef_no=59, decl_uid=4517, cgraph_uid=59, symbol_order=84)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
strarray = &NONLOCAL
numarrays = &NONLOCAL
nstrings = &NONLOCAL
arraysize = &NONLOCAL
ESCAPED = &NONLOCAL
derefaddrtmp(13) = &NULL
*nstrings = derefaddrtmp(13)
curroffset_49 = &NULL
curroffset_49 = curroffset_50
fullflag_52 = &NULL
fullflag_52 = fullflag_53
ESCAPED = &NONLOCAL
_1 = NONLOCAL
_2 = _1
stringlength_76 = _2
stringlength_76 = &NONLOCAL
_3 = stringlength_76
_4 = _3
_4 = curroffset_49
_5 = _4
_5 = &NONLOCAL
_6 = arraysize
_7 = curroffset_49
_8 = _6
_8 = _7
stringlength_78 = _8
stringlength_78 = &NONLOCAL
fullflag_53 = fullflag_52
fullflag_53 = &NONLOCAL
stringlength_54 = stringlength_76
stringlength_54 = stringlength_78
_9 = strarray + UNKNOWN
*_9 = stringlength_54
curroffset_82 = curroffset_49
curroffset_82 = &NONLOCAL
ESCAPED = &NONLOCAL
_10 = NONLOCAL
_11 = strarray + UNKNOWN
_12 = _10
*_11 = _12
curroffset_114 = curroffset_50
curroffset_114 = &NONLOCAL
i.25_13 = i_55
i_115 = i_55
i_115 = &NONLOCAL
curroffset_50 = curroffset_82
curroffset_50 = curroffset_114
i_55 = &NULL
i_55 = i_115
_14 = *nstrings
_15 = _14
_15 = &NONLOCAL
*nstrings = _15
_16 = arraysize
_16 = &NONLOCAL
tempsbase_107 = tempsbase_47 + UNKNOWN
_17 = l_59
_18 = strarray + UNKNOWN
_19 = l_59
_20 = tempsbase_107 + UNKNOWN
_21 = *_18
*_20 = _21
l_111 = l_59
l_111 = &NONLOCAL
l_59 = &NULL
l_59 = l_111
_22 = l_59
k_109 = k_57
k_109 = &NONLOCAL
tempsbase_47 = strarray
tempsbase_47 = tempsbase_107
k_57 = &NONLOCAL
k_57 = k_109
_23 = *nstrings
_24 = numarrays
_25 = _23
_25 = _24
_26 = _25
_26 = &NONLOCAL
ESCAPED = _26
ESCAPED = &systemerror
optrarray_89 = NONLOCAL
systemerror.26_27 = systemerror
systemerror.27_28 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.27_28
ESCAPED = strarray
ESCAPED = &systemerror
_29 = j_56
_29 = &NONLOCAL
_30 = optrarray_89 + UNKNOWN
*_30 = curroffset_51
_31 = strarray + UNKNOWN
_32 = *_31
_33 = _32
_34 = _33
_34 = curroffset_51
curroffset_105 = _34
curroffset_105 = &NONLOCAL
j_106 = j_56
j_106 = &NONLOCAL
curroffset_51 = &NULL
curroffset_51 = curroffset_105
j_56 = &NULL
j_56 = j_106
_35 = *nstrings
_36 = *nstrings
_37 = _36
_37 = &NONLOCAL
tempobase_99 = tempobase_48 + UNKNOWN
_38 = l_60
_39 = _38
_39 = &NONLOCAL
_40 = optrarray_89 + UNKNOWN
_41 = l_60
_42 = _41
_42 = &NONLOCAL
_43 = tempobase_99 + UNKNOWN
_44 = *_40
*_43 = _44
l_103 = l_60
l_103 = &NONLOCAL
l_60 = &NULL
l_60 = l_103
_45 = l_60
_46 = *nstrings
k_101 = k_58
k_101 = &NONLOCAL
tempobase_48 = optrarray_89
tempobase_48 = tempobase_99
k_58 = &NONLOCAL
k_58 = k_101
ESCAPED = optrarray_89

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 59 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"strarray"[label="strarray = { 5 }"];
"numarrays"[label="numarrays = { 5 }"];
"nstrings"[label="nstrings = { 5 }"];
"arraysize"[label="arraysize = { 5 }"];
"randnum";
"derefaddrtmp(13)"[label="derefaddrtmp(13) = { 1 }"];
"curroffset_49"[label="curroffset_49 = { 1 5 }"];
"fullflag_52"[label="fullflag_52 = { 1 5 }"];
"abs_randwc";
"_1";
"_2";
"stringlength_76"[label="stringlength_76 = { 5 }"];
"_3";
"_4";
"_5"[label="_5 = { 5 }"];
"_6";
"_7";
"_8";
"stringlength_78"[label="stringlength_78 = { 5 }"];
"stringlength_54";
"_9";
"_10";
"_11";
"_12";
"i.25_13";
"i_55"[label="i_55 = { 1 5 }"];
"_16"[label="_16 = { 5 }"];
"tempsbase_107";
"tempsbase_47";
"_17";
"l_59"[label="l_59 = { 1 5 }"];
"_18";
"_19";
"_20";
"_21";
"_22";
"k_109"[label="k_109 = { 5 }"];
"_23";
"_24";
"_25";
"_26"[label="_26 = { 5 }"];
"AllocateMemory";
"systemerror";
"optrarray_89";
"systemerror.26_27";
"systemerror.27_28";
"ReportError";
"FreeMemory";
"ErrorExit";
"_29"[label="_29 = { 5 }"];
"j_56"[label="j_56 = { 1 5 }"];
"_30";
"curroffset_51"[label="curroffset_51 = { 1 5 }"];
"_31";
"_32";
"_33";
"_35";
"_36";
"_37"[label="_37 = { 5 }"];
"tempobase_99";
"tempobase_48";
"_38";
"l_60"[label="l_60 = { 1 5 }"];
"_39"[label="_39 = { 5 }"];
"_40";
"_41";
"_42"[label="_42 = { 5 }"];
"_43";
"_44";
"_45";
"_46";
"k_101"[label="k_101 = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*strarray";
"*numarrays";
"*nstrings"[label="*nstrings = { 5 }"];
"*arraysize";
"*randnum";
"*derefaddrtmp(13)";
"*curroffset_49";
"*curroffset_50";
"*fullflag_52";
"*fullflag_53";
"*abs_randwc";
"*_1";
"*_2";
"*stringlength_76";
"*_3";
"*_4";
"*_5";
"*_6";
"*_7";
"*_8";
"*stringlength_78";
"*stringlength_54";
"*_9";
"*curroffset_82";
"*_10";
"*_11";
"*_12";
"*curroffset_114";
"*i.25_13";
"*i_55";
"*i_115";
"*_14";
"*_15";
"*_16";
"*tempsbase_107";
"*tempsbase_47";
"*_17";
"*l_59";
"*_18";
"*_19";
"*_20";
"*_21";
"*l_111";
"*_22";
"*k_109";
"*k_57";
"*_23";
"*_24";
"*_25";
"*_26";
"*AllocateMemory";
"*systemerror";
"*systemerror.26_27";
"*systemerror.27_28";
"*ReportError";
"*FreeMemory";
"*ErrorExit";
"*_29";
"*j_56";
"*_30";
"*curroffset_51";
"*_31";
"*_32";
"*_33";
"*_34";
"*curroffset_105";
"*j_106";
"*_35";
"*_36";
"*_37";
"*tempobase_99";
"*tempobase_48";
"*_38";
"*l_60";
"*_39";
"*_40";
"*_41";
"*_42";
"*_43";
"*_44";
"*l_103";
"*_45";
"*_46";
"*k_101";
"*k_58";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"strarray" -> "ESCAPED";
"_26" -> "ESCAPED";
"optrarray_89" -> "ESCAPED";
"systemerror.27_28" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"curroffset_49" -> "curroffset_49";
"curroffset_49" -> "curroffset_49";
"curroffset_49" -> "curroffset_49";
"curroffset_49" -> "curroffset_49";
"fullflag_52" -> "fullflag_52";
"fullflag_52" -> "fullflag_52";
"NONLOCAL" -> "_1";
"_1" -> "_2";
"_2" -> "stringlength_76";
"stringlength_76" -> "_3";
"curroffset_49" -> "_4";
"_3" -> "_4";
"_4" -> "_5";
"arraysize" -> "_6";
"curroffset_49" -> "_7";
"_6" -> "_8";
"_7" -> "_8";
"_8" -> "stringlength_78";
"stringlength_76" -> "stringlength_54";
"stringlength_78" -> "stringlength_54";
"NONLOCAL" -> "_10";
"_10" -> "_12";
"i_55" -> "i.25_13";
"i_55" -> "i_55";
"i_55" -> "i_55";
"arraysize" -> "_16";
"strarray" -> "tempsbase_47";
"tempsbase_107" -> "tempsbase_47";
"l_59" -> "_17";
"l_59" -> "l_59";
"l_59" -> "l_59";
"l_59" -> "_19";
"*_18" -> "_21";
"l_59" -> "_22";
"k_109" -> "k_109";
"k_109" -> "k_109";
"*nstrings" -> "_23";
"numarrays" -> "_24";
"_23" -> "_25";
"_24" -> "_25";
"_25" -> "_26";
"NONLOCAL" -> "optrarray_89";
"systemerror" -> "systemerror.26_27";
"systemerror" -> "systemerror.27_28";
"j_56" -> "_29";
"j_56" -> "j_56";
"j_56" -> "j_56";
"curroffset_51" -> "curroffset_51";
"_33" -> "curroffset_51";
"curroffset_51" -> "curroffset_51";
"curroffset_51" -> "curroffset_51";
"*_31" -> "_32";
"_32" -> "_33";
"*nstrings" -> "_35";
"*nstrings" -> "_36";
"_36" -> "_37";
"optrarray_89" -> "tempobase_48";
"tempobase_99" -> "tempobase_48";
"l_60" -> "_38";
"l_60" -> "l_60";
"l_60" -> "l_60";
"_38" -> "_39";
"l_60" -> "_41";
"_41" -> "_42";
"*_40" -> "_44";
"l_60" -> "_45";
"*nstrings" -> "_46";
"k_101" -> "k_101";
"k_101" -> "k_101";
"derefaddrtmp(13)" -> "*nstrings";
"*nstrings" -> "*nstrings";
"*nstrings" -> "*nstrings";
"*nstrings" -> "*nstrings";
"stringlength_54" -> "*_9";
"_12" -> "*_11";
"_21" -> "*_20";
"curroffset_51" -> "*_30";
"_44" -> "*_43";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"strarray" [label="\N\n_9 = strarray + UNKNOWN\l_11 = strarray + UNKNOWN\l_14 = *strarray\l_18 = strarray + UNKNOWN\l_31 = strarray + UNKNOWN\l*strarray = derefaddrtmp(13)\l*strarray = _14\l"];
"randnum";
"derefaddrtmp(13)";
"curroffset_49";
"abs_randwc";
"_1" [label="\N\n_30 = _1 + UNKNOWN\l_40 = _1 + UNKNOWN\l"];
"_4";
"_9" [label="\N\n*_9 = _4\l"];
"_11" [label="\N\n*_11 = _1\l"];
"_14";
"tempsbase_107" [label="\N\n_20 = tempsbase_107 + UNKNOWN\l"];
"tempsbase_47" [label="\N\ntempsbase_107 = tempsbase_47 + UNKNOWN\l"];
"_18" [label="\N\n_21 = *_18\l"];
"_20" [label="\N\n*_20 = _21\l"];
"_21";
"AllocateMemory";
"systemerror.26_27";
"ReportError";
"FreeMemory";
"ErrorExit";
"_30" [label="\N\n*_30 = curroffset_51\l"];
"curroffset_51";
"_31" [label="\N\n_32 = *_31\l"];
"_32";
"tempobase_99" [label="\N\n_43 = tempobase_99 + UNKNOWN\l"];
"tempobase_48" [label="\N\ntempobase_99 = tempobase_48 + UNKNOWN\l"];
"_40" [label="\N\n_44 = *_40\l"];
"_43" [label="\N\n*_43 = _44\l"];
"_44";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "tempsbase_107";
"STOREDANYTHING" -> "_18";
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "systemerror.26_27";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "_31";
"STOREDANYTHING" -> "tempobase_99";
"STOREDANYTHING" -> "_40";
"STOREDANYTHING" -> "_43";
"strarray" -> "ESCAPED";
"strarray" -> "curroffset_49";
"strarray" -> "_14";
"strarray" -> "tempsbase_47";
"curroffset_49" -> "_4";
"_1" -> "ESCAPED";
"_1" -> "_4";
"_1" -> "tempobase_48";
"_14" -> "ESCAPED";
"tempsbase_107" -> "tempsbase_47";
"systemerror.26_27" -> "ESCAPED";
"_32" -> "curroffset_51";
"tempobase_99" -> "tempobase_48";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _1\l"];
"STOREDANYTHING";
"INTEGER";
"strarray" [label="\N\n_9 = strarray + UNKNOWN\l_11 = strarray + UNKNOWN\l_14 = *strarray\l_18 = strarray + UNKNOWN\l_31 = strarray + UNKNOWN\l*strarray = derefaddrtmp(13)\l*strarray = _14\l"];
"randnum";
"derefaddrtmp(13)";
"curroffset_49";
"abs_randwc";
"_1" [label="\N\n_30 = _1 + UNKNOWN\l_40 = _1 + UNKNOWN\l"];
"_4";
"_9" [label="\N\n*_9 = _4\l"];
"_11" [label="\N\n*_11 = _1\l"];
"_14";
"tempsbase_107" [label="\N\n_20 = tempsbase_107 + UNKNOWN\l"];
"tempsbase_47" [label="\N\ntempsbase_107 = tempsbase_47 + UNKNOWN\l"];
"_18" [label="\N\n_21 = *_18\l"];
"_20" [label="\N\n*_20 = _21\l"];
"_21";
"AllocateMemory";
"systemerror.26_27";
"ReportError";
"FreeMemory";
"ErrorExit";
"_30" [label="\N\n*_30 = curroffset_51\l"];
"curroffset_51";
"_31" [label="\N\n_32 = *_31\l"];
"_32";
"tempobase_99" [label="\N\n_43 = tempobase_99 + UNKNOWN\l"];
"tempobase_48" [label="\N\ntempobase_99 = tempobase_48 + UNKNOWN\l"];
"_40" [label="\N\n_44 = *_40\l"];
"_43" [label="\N\n*_43 = _44\l"];
"_44";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "tempsbase_107";
"STOREDANYTHING" -> "_18";
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "systemerror.26_27";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "_31";
"STOREDANYTHING" -> "tempobase_99";
"STOREDANYTHING" -> "_40";
"STOREDANYTHING" -> "_43";
"strarray" -> "ESCAPED";
"strarray" -> "curroffset_49";
"strarray" -> "_14";
"strarray" -> "tempsbase_47";
"derefaddrtmp(13)" -> "ESCAPED";
"curroffset_49" -> "_4";
"_1" -> "ESCAPED";
"_1" -> "_4";
"_1" -> "_14";
"_1" -> "_21";
"_1" -> "systemerror.26_27";
"_1" -> "_32";
"_1" -> "tempobase_48";
"_1" -> "_44";
"_4" -> "ESCAPED";
"_14" -> "ESCAPED";
"tempsbase_107" -> "tempsbase_47";
"_21" -> "ESCAPED";
"systemerror.26_27" -> "ESCAPED";
"curroffset_51" -> "ESCAPED";
"_32" -> "curroffset_51";
"tempobase_99" -> "tempobase_48";
"_44" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL systemerror }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
strarray = { NONLOCAL }
numarrays = { NONLOCAL } same as strarray
nstrings = { NONLOCAL } same as strarray
arraysize = { NONLOCAL } same as strarray
randnum = { }
derefaddrtmp(13) = { NULL }
curroffset_49 = { NULL NONLOCAL }
curroffset_50 = { NULL NONLOCAL } same as curroffset_49
fullflag_52 = { NULL NONLOCAL } same as curroffset_49
fullflag_53 = { NULL NONLOCAL } same as curroffset_49
abs_randwc = { }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
stringlength_76 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL } same as _1
_4 = { NULL ESCAPED NONLOCAL }
_5 = { NULL ESCAPED NONLOCAL } same as _4
_6 = { NONLOCAL } same as strarray
_7 = { NULL NONLOCAL } same as curroffset_49
_8 = { NULL NONLOCAL } same as curroffset_49
stringlength_78 = { NULL NONLOCAL } same as curroffset_49
stringlength_54 = { NULL ESCAPED NONLOCAL } same as _4
_9 = { NONLOCAL }
curroffset_82 = { NULL NONLOCAL } same as curroffset_49
_10 = { ESCAPED NONLOCAL } same as _1
_11 = { NONLOCAL }
_12 = { ESCAPED NONLOCAL } same as _1
curroffset_114 = { NULL NONLOCAL } same as curroffset_49
i.25_13 = { NULL NONLOCAL } same as curroffset_49
i_55 = { NULL NONLOCAL } same as curroffset_49
i_115 = { NULL NONLOCAL } same as curroffset_49
_14 = { ESCAPED NONLOCAL }
_15 = { ESCAPED NONLOCAL } same as _14
_16 = { NONLOCAL } same as strarray
tempsbase_107 = { NONLOCAL }
tempsbase_47 = { NONLOCAL }
_17 = { NULL NONLOCAL } same as curroffset_49
l_59 = { NULL NONLOCAL } same as curroffset_49
_18 = { NONLOCAL }
_19 = { NULL NONLOCAL } same as curroffset_49
_20 = { NONLOCAL }
_21 = { ESCAPED NONLOCAL }
l_111 = { NULL NONLOCAL } same as curroffset_49
_22 = { NULL NONLOCAL } same as curroffset_49
k_109 = { NONLOCAL } same as strarray
k_57 = { NONLOCAL } same as strarray
_23 = { ESCAPED NONLOCAL } same as _14
_24 = { NONLOCAL } same as strarray
_25 = { ESCAPED NONLOCAL } same as _14
_26 = { ESCAPED NONLOCAL } same as _14
AllocateMemory = { }
systemerror = { ESCAPED NONLOCAL } same as systemerror.26_27
optrarray_89 = { ESCAPED NONLOCAL } same as _1
systemerror.26_27 = { ESCAPED NONLOCAL }
systemerror.27_28 = { ESCAPED NONLOCAL } same as systemerror.26_27
ReportError = { }
FreeMemory = { }
ErrorExit = { }
_29 = { NULL NONLOCAL } same as curroffset_49
j_56 = { NULL NONLOCAL } same as curroffset_49
_30 = { ESCAPED NONLOCAL }
curroffset_51 = { NULL ESCAPED NONLOCAL }
_31 = { NONLOCAL }
_32 = { ESCAPED NONLOCAL }
_33 = { ESCAPED NONLOCAL } same as _32
_34 = { NULL ESCAPED NONLOCAL } same as curroffset_51
curroffset_105 = { NULL ESCAPED NONLOCAL } same as curroffset_51
j_106 = { NULL NONLOCAL } same as curroffset_49
_35 = { ESCAPED NONLOCAL } same as _14
_36 = { ESCAPED NONLOCAL } same as _14
_37 = { ESCAPED NONLOCAL } same as _14
tempobase_99 = { ESCAPED NONLOCAL }
tempobase_48 = { ESCAPED NONLOCAL }
_38 = { NULL NONLOCAL } same as curroffset_49
l_60 = { NULL NONLOCAL } same as curroffset_49
_39 = { NULL NONLOCAL } same as curroffset_49
_40 = { ESCAPED NONLOCAL }
_41 = { NULL NONLOCAL } same as curroffset_49
_42 = { NULL NONLOCAL } same as curroffset_49
_43 = { ESCAPED NONLOCAL }
_44 = { ESCAPED NONLOCAL }
l_103 = { NULL NONLOCAL } same as curroffset_49
_45 = { NULL NONLOCAL } same as curroffset_49
_46 = { ESCAPED NONLOCAL } same as _14
k_101 = { NONLOCAL } same as strarray
k_58 = { NONLOCAL } same as strarray


Alias information for LoadStringArray

Aliased symbols

systemerror, UID D.4869, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.4869 } (escaped)

Flow-insensitive points-to information

_9, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to NULL, points-to vars: { }
_18, points-to non-local, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to NULL, points-to vars: { }
_30, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_31, points-to non-local, points-to NULL, points-to vars: { }
_40, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_43, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
tempsbase_47, points-to non-local, points-to NULL, points-to vars: { }
tempobase_48, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
nstrings_71(D), points-to non-local, points-to NULL, points-to vars: { }
strarray_80(D), points-to non-local, points-to NULL, points-to vars: { }
optrarray_89, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
tempobase_99, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
tempsbase_107, points-to non-local, points-to NULL, points-to vars: { }

LoadStringArray (faruchar * strarray, unsigned int numarrays, long unsigned int * nstrings, long unsigned int arraysize)
{
  int systemerror;
  unsigned int l;
  unsigned int k;
  long unsigned int j;
  unsigned char i;
  unsigned char stringlength;
  int fullflag;
  long unsigned int curroffset;
  farulong * tempobase;
  farulong * optrarray;
  faruchar * tempsbase;
  unsigned int _1;
  unsigned char _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  unsigned char _6;
  unsigned char _7;
  unsigned char _8;
  faruchar * _9;
  unsigned int _10;
  faruchar * _11;
  unsigned char _12;
  unsigned char i.25_13;
  long unsigned int _14;
  long unsigned int _15;
  sizetype _16;
  sizetype _17;
  faruchar * _18;
  sizetype _19;
  faruchar * _20;
  unsigned char _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  int systemerror.26_27;
  int systemerror.27_28;
  long unsigned int _29;
  farulong * _30;
  faruchar * _31;
  unsigned char _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  farulong * _40;
  long unsigned int _41;
  long unsigned int _42;
  farulong * _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;

  <bb 2> [0.00%]:
  randnum (13);
  *nstrings_71(D) = 0;

  <bb 3> [0.00%]:
  # curroffset_49 = PHI <0(2), curroffset_50(8)>
  # fullflag_52 = PHI <0(2), fullflag_53(8)>
  _1 = abs_randwc (76);
  _2 = (unsigned char) _1;
  stringlength_76 = _2 + 1;
  _3 = (long unsigned int) stringlength_76;
  _4 = _3 + curroffset_49;
  _5 = _4 + 1;
  if (_5 >= arraysize_77(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _6 = (unsigned char) arraysize_77(D);
  _7 = (unsigned char) curroffset_49;
  _8 = _6 - _7;
  stringlength_78 = _8 + 255;

  <bb 5> [0.00%]:
  # fullflag_53 = PHI <fullflag_52(3), 1(4)>
  # stringlength_54 = PHI <stringlength_76(3), stringlength_78(4)>
  _9 = strarray_80(D) + curroffset_49;
  *_9 = stringlength_54;
  curroffset_82 = curroffset_49 + 1;
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _10 = abs_randwc (254);
  _11 = strarray_80(D) + curroffset_50;
  _12 = (unsigned char) _10;
  *_11 = _12;
  curroffset_114 = curroffset_50 + 1;
  i.25_13 = i_55;
  i_115 = i_55 + 1;

  <bb 7> [0.00%]:
  # curroffset_50 = PHI <curroffset_82(5), curroffset_114(6)>
  # i_55 = PHI <0(5), i_115(6)>
  if (stringlength_54 > i_55)
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  _14 = *nstrings_71(D);
  _15 = _14 + 1;
  *nstrings_71(D) = _15;
  if (fullflag_53 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 9> [0.00%]:
  _16 = arraysize_77(D) + 100;
  tempsbase_107 = tempsbase_47 + _16;
  goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  _17 = (sizetype) l_59;
  _18 = strarray_80(D) + _17;
  _19 = (sizetype) l_59;
  _20 = tempsbase_107 + _19;
  _21 = *_18;
  *_20 = _21;
  l_111 = l_59 + 1;

  <bb 11> [0.00%]:
  # l_59 = PHI <0(9), l_111(10)>
  _22 = (long unsigned int) l_59;
  if (_22 < arraysize_77(D))
    goto <bb 10>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [0.00%]:
  k_109 = k_57 + 1;

  <bb 13> [0.00%]:
  # tempsbase_47 = PHI <strarray_80(D)(8), tempsbase_107(12)>
  # k_57 = PHI <1(8), k_109(12)>
  if (k_57 < numarrays_87(D))
    goto <bb 9>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [0.00%]:
  _23 = *nstrings_71(D);
  _24 = (long unsigned int) numarrays_87(D);
  _25 = _23 * _24;
  _26 = _25 * 8;
  optrarray_89 = AllocateMemory (_26, &systemerror);
  systemerror.26_27 = systemerror;
  if (systemerror.26_27 != 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:
  systemerror.27_28 = systemerror;
  ReportError ("CPU:Stringsort", systemerror.27_28);
  FreeMemory (strarray_80(D), &systemerror);
  ErrorExit ();

  <bb 16> [0.00%]:
  goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  _29 = j_56 * 8;
  _30 = optrarray_89 + _29;
  *_30 = curroffset_51;
  _31 = strarray_80(D) + curroffset_51;
  _32 = *_31;
  _33 = (long unsigned int) _32;
  _34 = _33 + curroffset_51;
  curroffset_105 = _34 + 1;
  j_106 = j_56 + 1;

  <bb 18> [0.00%]:
  # curroffset_51 = PHI <0(16), curroffset_105(17)>
  # j_56 = PHI <0(16), j_106(17)>
  _35 = *nstrings_71(D);
  if (_35 > j_56)
    goto <bb 17>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 19> [0.00%]:
  _36 = *nstrings_71(D);
  _37 = _36 * 8;
  tempobase_99 = tempobase_48 + _37;
  goto <bb 21>; [0.00%]

  <bb 20> [0.00%]:
  _38 = (long unsigned int) l_60;
  _39 = _38 * 8;
  _40 = optrarray_89 + _39;
  _41 = (long unsigned int) l_60;
  _42 = _41 * 8;
  _43 = tempobase_99 + _42;
  _44 = *_40;
  *_43 = _44;
  l_103 = l_60 + 1;

  <bb 21> [0.00%]:
  # l_60 = PHI <0(19), l_103(20)>
  _45 = (long unsigned int) l_60;
  _46 = *nstrings_71(D);
  if (_45 < _46)
    goto <bb 20>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 22> [0.00%]:
  k_101 = k_58 + 1;

  <bb 23> [0.00%]:
  # tempobase_48 = PHI <optrarray_89(18), tempobase_99(22)>
  # k_58 = PHI <1(18), k_101(22)>
  if (k_58 < numarrays_87(D))
    goto <bb 19>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 24> [0.00%]:
  systemerror ={v} {CLOBBER};
  return optrarray_89;

}



;; Function DoBitfieldIteration (DoBitfieldIteration, funcdef_no=65, decl_uid=4548, cgraph_uid=65, symbol_order=90)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
bitarraybase = &NONLOCAL
bitoparraybase = &NONLOCAL
bitoparraysize = &NONLOCAL
nbitops = &NONLOCAL
derefaddrtmp(12) = &NULL
*nbitops = derefaddrtmp(12)
ESCAPED = &NONLOCAL
i.38_1 = i_48
_2 = i.38_1
_2 = &NONLOCAL
_3 = bitarraybase + UNKNOWN
derefaddrtmp(18) = &NONLOCAL
*_3 = derefaddrtmp(18)
i_83 = i_48
i_83 = &NONLOCAL
i_48 = &NULL
i_48 = i_83
global_bitopstruct.0+32 = NONLOCAL
global_bitopstruct.64+256 = NONLOCAL
_4 = global_bitopstruct.64+256
i.39_5 = i_48
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_6 = NONLOCAL
bitoffset_75 = _6
i.40_7 = i_49
_8 = i.40_7
_8 = &NONLOCAL
_9 = bitoparraybase + UNKNOWN
*_9 = bitoffset_75
_11 = &NONLOCAL
_11 = _6
ESCAPED = _11
_12 = NONLOCAL
i.41_13 = i_49
_14 = i.41_13
_14 = &NONLOCAL
_15 = _14
_15 = &NONLOCAL
_16 = bitoparraybase + UNKNOWN
_17 = _12
*_16 = _17
_79 = *_16
_18 = *nbitops
_19 = _18
_19 = _79
*nbitops = _19
i_81 = i_49
i_81 = &NONLOCAL
i_49 = &NULL
i_49 = i_81
elapsed_64 = NONLOCAL
_20 = i_50
_20 = &NONLOCAL
i.42_21 = i_50
_22 = i.42_21
_22 = &NONLOCAL
_23 = _22
_23 = &NONLOCAL
_24 = bitoparraybase + UNKNOWN
_25 = *_24
i.43_26 = i_50
_27 = i.43_26
_27 = &NONLOCAL
_28 = bitoparraybase + UNKNOWN
_29 = *_28
bindex_85 = bit_addr_84
bindex_85 = &NONLOCAL
bitnumb_86 = bit_addr_84 + UNKNOWN
_87 = bindex_85
_87 = &NONLOCAL
_88 = bitarraybase + UNKNOWN
_89 = *_88
_90 = bitnumb_86
_91 = &NONLOCAL
_91 = _90
_92 = _91
_93 = _89
_93 = _92
*_88 = _93
bit_addr_102 = bit_addr_84
bit_addr_102 = &NONLOCAL
bit_addr_84 = _29
bit_addr_84 = bit_addr_102
nbits_103 = _25
nbits_103 = nbits_104
nbits_104 = nbits_103
nbits_104 = &NONLOCAL
i.44_30 = i_50
_31 = i.44_30
_31 = &NONLOCAL
_32 = _31
_32 = &NONLOCAL
_33 = bitoparraybase + UNKNOWN
_34 = *_33
i.45_35 = i_50
_36 = i.45_35
_36 = &NONLOCAL
_37 = bitoparraybase + UNKNOWN
_38 = *_37
bindex_106 = bit_addr_105
bindex_106 = &NONLOCAL
bitnumb_107 = bit_addr_105 + UNKNOWN
_115 = bindex_106
_115 = &NONLOCAL
_116 = bitarraybase + UNKNOWN
_117 = *_116
_118 = bitnumb_107
_119 = &NONLOCAL
_119 = _118
_120 = _119
_121 = _120
_122 = _117
_122 = _121
*_116 = _122
bit_addr_123 = bit_addr_105
bit_addr_123 = &NONLOCAL
bit_addr_105 = _38
bit_addr_105 = bit_addr_123
nbits_124 = _34
nbits_124 = nbits_125
nbits_125 = nbits_124
nbits_125 = &NONLOCAL
i.46_39 = i_50
_40 = i.46_39
_40 = &NONLOCAL
_41 = _40
_41 = &NONLOCAL
_42 = bitoparraybase + UNKNOWN
_43 = *_42
i.47_44 = i_50
_45 = i.47_44
_45 = &NONLOCAL
_46 = bitoparraybase + UNKNOWN
_47 = *_46
bindex_127 = bit_addr_126
bindex_127 = &NONLOCAL
bitnumb_128 = bit_addr_126 + UNKNOWN
_129 = bindex_127
_129 = &NONLOCAL
_130 = bitarraybase + UNKNOWN
_131 = *_130
_132 = bitnumb_128
_133 = &NONLOCAL
_133 = _132
_134 = _133
_135 = _131
_135 = _134
*_130 = _135
bit_addr_136 = bit_addr_126
bit_addr_136 = &NONLOCAL
bit_addr_126 = _47
bit_addr_126 = bit_addr_136
nbits_137 = _43
nbits_137 = nbits_138
nbits_138 = nbits_137
nbits_138 = &NONLOCAL
i_73 = i_50
i_73 = &NONLOCAL
i_50 = &NULL
i_50 = i_73
ESCAPED = elapsed_64
_67 = NONLOCAL
ESCAPED = _67

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"bitarraybase"[label="bitarraybase = { 5 }"];
"bitoparraybase"[label="bitoparraybase = { 5 }"];
"bitoparraysize"[label="bitoparraysize = { 5 }"];
"nbitops"[label="nbitops = { 5 }"];
"derefaddrtmp(12)"[label="derefaddrtmp(12) = { 1 }"];
"randnum";
"i.38_1";
"i_48"[label="i_48 = { 1 5 }"];
"_2"[label="_2 = { 5 }"];
"_3";
"derefaddrtmp(18)"[label="derefaddrtmp(18) = { 5 }"];
"_4";
"global_bitopstruct.0+32";
"global_bitopstruct.64+256";
"i.39_5";
"abs_randwc";
"_6";
"bitoffset_75";
"i.40_7";
"i_49"[label="i_49 = { 1 5 }"];
"_8"[label="_8 = { 5 }"];
"_9";
"_11"[label="_11 = { 5 }"];
"_12";
"i.41_13";
"_14"[label="_14 = { 5 }"];
"_15"[label="_15 = { 5 }"];
"_16";
"_17";
"_79";
"_18";
"StartStopwatch";
"elapsed_64";
"_20"[label="_20 = { 5 }"];
"i_50"[label="i_50 = { 1 5 }"];
"i.42_21";
"_22"[label="_22 = { 5 }"];
"_23"[label="_23 = { 5 }"];
"_24";
"_25";
"i.43_26";
"_27"[label="_27 = { 5 }"];
"_28";
"_29";
"bindex_85"[label="bindex_85 = { 5 }"];
"bit_addr_84"[label="bit_addr_84 = { 5 }"];
"bitnumb_86";
"_87"[label="_87 = { 5 }"];
"_88";
"_89";
"_90";
"_91"[label="_91 = { 5 }"];
"_92";
"nbits_103"[label="nbits_103 = { 5 }"];
"i.44_30";
"_31"[label="_31 = { 5 }"];
"_32"[label="_32 = { 5 }"];
"_33";
"_34";
"i.45_35";
"_36"[label="_36 = { 5 }"];
"_37";
"_38";
"bindex_106"[label="bindex_106 = { 5 }"];
"bit_addr_105"[label="bit_addr_105 = { 5 }"];
"bitnumb_107";
"_115"[label="_115 = { 5 }"];
"_116";
"_117";
"_118";
"_119"[label="_119 = { 5 }"];
"_120";
"_121";
"nbits_124"[label="nbits_124 = { 5 }"];
"i.46_39";
"_40"[label="_40 = { 5 }"];
"_41"[label="_41 = { 5 }"];
"_42";
"_43";
"i.47_44";
"_45"[label="_45 = { 5 }"];
"_46";
"_47";
"bindex_127"[label="bindex_127 = { 5 }"];
"bit_addr_126"[label="bit_addr_126 = { 5 }"];
"bitnumb_128";
"_129"[label="_129 = { 5 }"];
"_130";
"_131";
"_132";
"_133"[label="_133 = { 5 }"];
"_134";
"nbits_137"[label="nbits_137 = { 5 }"];
"StopStopwatch";
"_67";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*bitarraybase";
"*bitoparraybase";
"*bitoparraysize";
"*derefaddrtmp(12)";
"*randnum";
"*i.38_1";
"*i_48";
"*_2";
"*_3";
"*derefaddrtmp(18)";
"*i_83";
"*_4";
"*global_bitopstruct.0+32";
"*global_bitopstruct.64+256";
"*i.39_5";
"*abs_randwc";
"*bitoffset_75";
"*i.40_7";
"*i_49";
"*_8";
"*_9";
"*_12";
"*i.41_13";
"*_14";
"*_15";
"*_16";
"*_17";
"*_79";
"*_18";
"*_19";
"*i_81";
"*StartStopwatch";
"*_20";
"*i_50";
"*i.42_21";
"*_22";
"*_23";
"*_24";
"*_25";
"*i.43_26";
"*_27";
"*_28";
"*_29";
"*bindex_85";
"*bit_addr_84";
"*bitnumb_86";
"*_87";
"*_89";
"*_90";
"*_91";
"*_92";
"*_93";
"*bit_addr_102";
"*nbits_103";
"*nbits_104";
"*i.44_30";
"*_31";
"*_32";
"*_33";
"*_34";
"*i.45_35";
"*_36";
"*_37";
"*_38";
"*bindex_106";
"*bit_addr_105";
"*bitnumb_107";
"*_115";
"*_117";
"*_118";
"*_119";
"*_120";
"*_121";
"*_122";
"*bit_addr_123";
"*nbits_124";
"*nbits_125";
"*i.46_39";
"*_40";
"*_41";
"*_42";
"*_43";
"*i.47_44";
"*_45";
"*_46";
"*_47";
"*bindex_127";
"*bit_addr_126";
"*bitnumb_128";
"*_129";
"*_131";
"*_132";
"*_133";
"*_134";
"*_135";
"*bit_addr_136";
"*nbits_137";
"*nbits_138";
"*i_73";
"*StopStopwatch";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_11" -> "ESCAPED";
"elapsed_64" -> "ESCAPED";
"_67" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"i_48" -> "i.38_1";
"i_48" -> "i_48";
"i_48" -> "i_48";
"i.38_1" -> "_2";
"global_bitopstruct.64+256" -> "_4";
"NONLOCAL" -> "global_bitopstruct.0+32";
"NONLOCAL" -> "global_bitopstruct.64+256";
"i_48" -> "i.39_5";
"NONLOCAL" -> "_6";
"_6" -> "bitoffset_75";
"i_49" -> "i.40_7";
"i_49" -> "i_49";
"i_49" -> "i_49";
"i.40_7" -> "_8";
"_6" -> "_11";
"NONLOCAL" -> "_12";
"i_49" -> "i.41_13";
"i.41_13" -> "_14";
"_14" -> "_15";
"_12" -> "_17";
"*_16" -> "_79";
"derefaddrtmp(12)" -> "_18";
"_79" -> "_18";
"_18" -> "_18";
"_18" -> "_18";
"_18" -> "_18";
"NONLOCAL" -> "elapsed_64";
"i_50" -> "_20";
"i_50" -> "i_50";
"i_50" -> "i_50";
"i_50" -> "i.42_21";
"i.42_21" -> "_22";
"_22" -> "_23";
"*_24" -> "_25";
"i_50" -> "i.43_26";
"i.43_26" -> "_27";
"*_28" -> "_29";
"bit_addr_84" -> "bindex_85";
"_29" -> "bit_addr_84";
"bit_addr_84" -> "bit_addr_84";
"bit_addr_84" -> "bit_addr_84";
"bindex_85" -> "_87";
"_89" -> "_89";
"_92" -> "_89";
"_89" -> "_89";
"_89" -> "_89";
"bitnumb_86" -> "_90";
"_90" -> "_91";
"_91" -> "_92";
"_25" -> "nbits_103";
"nbits_103" -> "nbits_103";
"nbits_103" -> "nbits_103";
"i_50" -> "i.44_30";
"i.44_30" -> "_31";
"_31" -> "_32";
"*_33" -> "_34";
"i_50" -> "i.45_35";
"i.45_35" -> "_36";
"*_37" -> "_38";
"bit_addr_105" -> "bindex_106";
"_38" -> "bit_addr_105";
"bit_addr_105" -> "bit_addr_105";
"bit_addr_105" -> "bit_addr_105";
"bindex_106" -> "_115";
"_117" -> "_117";
"_121" -> "_117";
"_117" -> "_117";
"_117" -> "_117";
"bitnumb_107" -> "_118";
"_118" -> "_119";
"_119" -> "_120";
"_120" -> "_121";
"_34" -> "nbits_124";
"nbits_124" -> "nbits_124";
"nbits_124" -> "nbits_124";
"i_50" -> "i.46_39";
"i.46_39" -> "_40";
"_40" -> "_41";
"*_42" -> "_43";
"i_50" -> "i.47_44";
"i.47_44" -> "_45";
"*_46" -> "_47";
"bit_addr_126" -> "bindex_127";
"_47" -> "bit_addr_126";
"bit_addr_126" -> "bit_addr_126";
"bit_addr_126" -> "bit_addr_126";
"bindex_127" -> "_129";
"_131" -> "_131";
"_134" -> "_131";
"_131" -> "_131";
"_131" -> "_131";
"bitnumb_128" -> "_132";
"_132" -> "_133";
"_133" -> "_134";
"_43" -> "nbits_137";
"nbits_137" -> "nbits_137";
"nbits_137" -> "nbits_137";
"NONLOCAL" -> "_67";
"derefaddrtmp(18)" -> "*_3";
"bitoffset_75" -> "*_9";
"_17" -> "*_16";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"bitarraybase" [label="\N\n_3 = bitarraybase + UNKNOWN\l_9 = bitarraybase + UNKNOWN\l_16 = bitarraybase + UNKNOWN\l_18 = *bitarraybase\l_24 = bitarraybase + UNKNOWN\l_28 = bitarraybase + UNKNOWN\l_88 = bitarraybase + UNKNOWN\l_33 = bitarraybase + UNKNOWN\l_37 = bitarraybase + UNKNOWN\l_116 = bitarraybase + UNKNOWN\l_42 = bitarraybase + UNKNOWN\l_46 = bitarraybase + UNKNOWN\l_130 = bitarraybase + UNKNOWN\l*bitarraybase = derefaddrtmp(12)\l*bitarraybase = _18\l"];
"derefaddrtmp(12)";
"randnum";
"i.38_1";
"_3" [label="\N\n*_3 = bitarraybase\l"];
"global_bitopstruct.0+32";
"abs_randwc";
"_9" [label="\N\n*_9 = global_bitopstruct.0+32\l"];
"_16" [label="\N\n_79 = *_16\l*_16 = global_bitopstruct.0+32\l"];
"_79";
"_18";
"StartStopwatch";
"_24" [label="\N\n_25 = *_24\l"];
"_25";
"_28" [label="\N\n_29 = *_28\l"];
"_29";
"bindex_85" [label="\N\nbitnumb_86 = bindex_85 + UNKNOWN\l"];
"bitnumb_86";
"_88" [label="\N\n_89 = *_88\l*_88 = _89\l"];
"_89";
"_91";
"nbits_103";
"_33" [label="\N\n_34 = *_33\l"];
"_34";
"_37" [label="\N\n_38 = *_37\l"];
"_38";
"bindex_106" [label="\N\nbitnumb_107 = bindex_106 + UNKNOWN\l"];
"bitnumb_107";
"_116" [label="\N\n_117 = *_116\l*_116 = _117\l"];
"_117";
"_119";
"nbits_124";
"_42" [label="\N\n_43 = *_42\l"];
"_43";
"_46" [label="\N\n_47 = *_46\l"];
"_47";
"bindex_127" [label="\N\nbitnumb_128 = bindex_127 + UNKNOWN\l"];
"bitnumb_128";
"_130" [label="\N\n_131 = *_130\l*_130 = _131\l"];
"_131";
"_133";
"nbits_137";
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_18";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "_28";
"STOREDANYTHING" -> "bitnumb_86";
"STOREDANYTHING" -> "_88";
"STOREDANYTHING" -> "_89";
"STOREDANYTHING" -> "_33";
"STOREDANYTHING" -> "_37";
"STOREDANYTHING" -> "bitnumb_107";
"STOREDANYTHING" -> "_116";
"STOREDANYTHING" -> "_117";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_46";
"STOREDANYTHING" -> "bitnumb_128";
"STOREDANYTHING" -> "_130";
"STOREDANYTHING" -> "_131";
"global_bitopstruct.0+32" -> "ESCAPED";
"_79" -> "_18";
"_25" -> "nbits_103";
"_29" -> "bindex_85";
"bitnumb_86" -> "_91";
"_91" -> "_89";
"_34" -> "nbits_124";
"_38" -> "bindex_106";
"bitnumb_107" -> "_119";
"_119" -> "_117";
"_43" -> "nbits_137";
"_47" -> "bindex_127";
"bitnumb_128" -> "_133";
"_133" -> "_131";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = global_bitopstruct.0+32\l"];
"STOREDANYTHING";
"INTEGER";
"bitarraybase" [label="\N\n_3 = bitarraybase + UNKNOWN\l_9 = bitarraybase + UNKNOWN\l_16 = bitarraybase + UNKNOWN\l_18 = *bitarraybase\l_24 = bitarraybase + UNKNOWN\l_28 = bitarraybase + UNKNOWN\l_88 = bitarraybase + UNKNOWN\l_33 = bitarraybase + UNKNOWN\l_37 = bitarraybase + UNKNOWN\l_116 = bitarraybase + UNKNOWN\l_42 = bitarraybase + UNKNOWN\l_46 = bitarraybase + UNKNOWN\l_130 = bitarraybase + UNKNOWN\l*bitarraybase = derefaddrtmp(12)\l*bitarraybase = _18\l"];
"derefaddrtmp(12)";
"randnum";
"i.38_1";
"_3" [label="\N\n*_3 = bitarraybase\l"];
"global_bitopstruct.0+32";
"abs_randwc";
"_9" [label="\N\n*_9 = global_bitopstruct.0+32\l"];
"_16" [label="\N\n_79 = *_16\l*_16 = global_bitopstruct.0+32\l"];
"_79";
"_18";
"StartStopwatch";
"_24" [label="\N\n_25 = *_24\l"];
"_25";
"_28" [label="\N\n_29 = *_28\l"];
"_29";
"bindex_85" [label="\N\nbitnumb_86 = bindex_85 + UNKNOWN\l"];
"bitnumb_86";
"_88" [label="\N\n_89 = *_88\l*_88 = _89\l"];
"_89";
"_91";
"nbits_103";
"_33" [label="\N\n_34 = *_33\l"];
"_34";
"_37" [label="\N\n_38 = *_37\l"];
"_38";
"bindex_106" [label="\N\nbitnumb_107 = bindex_106 + UNKNOWN\l"];
"bitnumb_107";
"_116" [label="\N\n_117 = *_116\l*_116 = _117\l"];
"_117";
"_119";
"nbits_124";
"_42" [label="\N\n_43 = *_42\l"];
"_43";
"_46" [label="\N\n_47 = *_46\l"];
"_47";
"bindex_127" [label="\N\nbitnumb_128 = bindex_127 + UNKNOWN\l"];
"bitnumb_128";
"_130" [label="\N\n_131 = *_130\l*_130 = _131\l"];
"_131";
"_133";
"nbits_137";
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_18";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "_28";
"STOREDANYTHING" -> "bitnumb_86";
"STOREDANYTHING" -> "_88";
"STOREDANYTHING" -> "_89";
"STOREDANYTHING" -> "_33";
"STOREDANYTHING" -> "_37";
"STOREDANYTHING" -> "bitnumb_107";
"STOREDANYTHING" -> "_116";
"STOREDANYTHING" -> "_117";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_46";
"STOREDANYTHING" -> "bitnumb_128";
"STOREDANYTHING" -> "_130";
"STOREDANYTHING" -> "_131";
"bitarraybase" -> "ESCAPED";
"derefaddrtmp(12)" -> "ESCAPED";
"global_bitopstruct.0+32" -> "ESCAPED";
"global_bitopstruct.0+32" -> "_79";
"global_bitopstruct.0+32" -> "_18";
"global_bitopstruct.0+32" -> "_25";
"global_bitopstruct.0+32" -> "_29";
"global_bitopstruct.0+32" -> "_89";
"global_bitopstruct.0+32" -> "_34";
"global_bitopstruct.0+32" -> "_38";
"global_bitopstruct.0+32" -> "_117";
"global_bitopstruct.0+32" -> "_43";
"global_bitopstruct.0+32" -> "_47";
"global_bitopstruct.0+32" -> "_131";
"_79" -> "_18";
"_18" -> "ESCAPED";
"_25" -> "nbits_103";
"_29" -> "bindex_85";
"bitnumb_86" -> "_91";
"_89" -> "ESCAPED";
"_91" -> "_89";
"_34" -> "nbits_124";
"_38" -> "bindex_106";
"bitnumb_107" -> "_119";
"_117" -> "ESCAPED";
"_119" -> "_117";
"_43" -> "nbits_137";
"_47" -> "bindex_127";
"bitnumb_128" -> "_133";
"_131" -> "ESCAPED";
"_133" -> "_131";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
STOREDANYTHING = { }
INTEGER = { ANYTHING }
bitarraybase = { NONLOCAL }
bitoparraybase = { NONLOCAL } same as bitarraybase
bitoparraysize = { NONLOCAL } same as bitarraybase
nbitops = { NONLOCAL } same as bitarraybase
derefaddrtmp(12) = { NULL }
randnum = { }
i.38_1 = { NULL NONLOCAL }
i_48 = { NULL NONLOCAL } same as i.38_1
_2 = { NULL NONLOCAL } same as i.38_1
_3 = { NONLOCAL }
derefaddrtmp(18) = { NONLOCAL } same as bitarraybase
i_83 = { NULL NONLOCAL } same as i.38_1
_4 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
global_bitopstruct.0+32 = { ESCAPED NONLOCAL }
global_bitopstruct.64+256 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
i.39_5 = { NULL NONLOCAL } same as i.38_1
abs_randwc = { }
_6 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
bitoffset_75 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
i.40_7 = { NULL NONLOCAL } same as i.38_1
i_49 = { NULL NONLOCAL } same as i.38_1
_8 = { NULL NONLOCAL } same as i.38_1
_9 = { NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
_12 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
i.41_13 = { NULL NONLOCAL } same as i.38_1
_14 = { NULL NONLOCAL } same as i.38_1
_15 = { NULL NONLOCAL } same as i.38_1
_16 = { NONLOCAL }
_17 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
_79 = { ESCAPED NONLOCAL }
_18 = { ESCAPED NONLOCAL }
_19 = { ESCAPED NONLOCAL } same as _18
i_81 = { NULL NONLOCAL } same as i.38_1
StartStopwatch = { }
elapsed_64 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
_20 = { NULL NONLOCAL } same as i.38_1
i_50 = { NULL NONLOCAL } same as i.38_1
i.42_21 = { NULL NONLOCAL } same as i.38_1
_22 = { NULL NONLOCAL } same as i.38_1
_23 = { NULL NONLOCAL } same as i.38_1
_24 = { NONLOCAL }
_25 = { ESCAPED NONLOCAL }
i.43_26 = { NULL NONLOCAL } same as i.38_1
_27 = { NULL NONLOCAL } same as i.38_1
_28 = { NONLOCAL }
_29 = { ESCAPED NONLOCAL }
bindex_85 = { ESCAPED NONLOCAL }
bit_addr_84 = { ESCAPED NONLOCAL } same as bindex_85
bitnumb_86 = { ESCAPED NONLOCAL }
_87 = { ESCAPED NONLOCAL } same as bindex_85
_88 = { NONLOCAL }
_89 = { ESCAPED NONLOCAL }
_90 = { ESCAPED NONLOCAL } same as bitnumb_86
_91 = { ESCAPED NONLOCAL }
_92 = { ESCAPED NONLOCAL } same as _91
_93 = { ESCAPED NONLOCAL } same as _89
bit_addr_102 = { ESCAPED NONLOCAL } same as bindex_85
nbits_103 = { ESCAPED NONLOCAL }
nbits_104 = { ESCAPED NONLOCAL } same as nbits_103
i.44_30 = { NULL NONLOCAL } same as i.38_1
_31 = { NULL NONLOCAL } same as i.38_1
_32 = { NULL NONLOCAL } same as i.38_1
_33 = { NONLOCAL }
_34 = { ESCAPED NONLOCAL }
i.45_35 = { NULL NONLOCAL } same as i.38_1
_36 = { NULL NONLOCAL } same as i.38_1
_37 = { NONLOCAL }
_38 = { ESCAPED NONLOCAL }
bindex_106 = { ESCAPED NONLOCAL }
bit_addr_105 = { ESCAPED NONLOCAL } same as bindex_106
bitnumb_107 = { ESCAPED NONLOCAL }
_115 = { ESCAPED NONLOCAL } same as bindex_106
_116 = { NONLOCAL }
_117 = { ESCAPED NONLOCAL }
_118 = { ESCAPED NONLOCAL } same as bitnumb_107
_119 = { ESCAPED NONLOCAL }
_120 = { ESCAPED NONLOCAL } same as _119
_121 = { ESCAPED NONLOCAL } same as _119
_122 = { ESCAPED NONLOCAL } same as _117
bit_addr_123 = { ESCAPED NONLOCAL } same as bindex_106
nbits_124 = { ESCAPED NONLOCAL }
nbits_125 = { ESCAPED NONLOCAL } same as nbits_124
i.46_39 = { NULL NONLOCAL } same as i.38_1
_40 = { NULL NONLOCAL } same as i.38_1
_41 = { NULL NONLOCAL } same as i.38_1
_42 = { NONLOCAL }
_43 = { ESCAPED NONLOCAL }
i.47_44 = { NULL NONLOCAL } same as i.38_1
_45 = { NULL NONLOCAL } same as i.38_1
_46 = { NONLOCAL }
_47 = { ESCAPED NONLOCAL }
bindex_127 = { ESCAPED NONLOCAL }
bit_addr_126 = { ESCAPED NONLOCAL } same as bindex_127
bitnumb_128 = { ESCAPED NONLOCAL }
_129 = { ESCAPED NONLOCAL } same as bindex_127
_130 = { NONLOCAL }
_131 = { ESCAPED NONLOCAL }
_132 = { ESCAPED NONLOCAL } same as bitnumb_128
_133 = { ESCAPED NONLOCAL }
_134 = { ESCAPED NONLOCAL } same as _133
_135 = { ESCAPED NONLOCAL } same as _131
bit_addr_136 = { ESCAPED NONLOCAL } same as bindex_127
nbits_137 = { ESCAPED NONLOCAL }
nbits_138 = { ESCAPED NONLOCAL } same as nbits_137
i_73 = { NULL NONLOCAL } same as i.38_1
StopStopwatch = { }
_67 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32


Alias information for DoBitfieldIteration

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to NULL, points-to vars: { }
_28, points-to non-local, points-to NULL, points-to vars: { }
_33, points-to non-local, points-to NULL, points-to vars: { }
_37, points-to non-local, points-to NULL, points-to vars: { }
_42, points-to non-local, points-to NULL, points-to vars: { }
_46, points-to non-local, points-to NULL, points-to vars: { }
nbitops_56(D), points-to non-local, points-to NULL, points-to vars: { }
bitoparraybase_68(D), points-to non-local, points-to NULL, points-to vars: { }
bitarraybase_69(D), points-to non-local, points-to NULL, points-to vars: { }
_88, points-to non-local, points-to NULL, points-to vars: { }
_116, points-to non-local, points-to NULL, points-to vars: { }
_130, points-to non-local, points-to NULL, points-to vars: { }

DoBitfieldIteration (farulong * bitarraybase, farulong * bitoparraybase, long int bitoparraysize, long unsigned int * nbitops)
{
  long unsigned int bindex;
  long unsigned int bitnumb;
  long unsigned int bit_addr;
  long unsigned int nbits;
  long unsigned int bindex;
  long unsigned int bitnumb;
  long unsigned int bit_addr;
  long unsigned int nbits;
  long unsigned int bindex;
  long unsigned int bitnumb;
  long unsigned int bit_addr;
  long unsigned int nbits;
  long unsigned int elapsed;
  long unsigned int bitoffset;
  long int i;
  long unsigned int i.38_1;
  long unsigned int _2;
  farulong * _3;
  long unsigned int _4;
  long unsigned int i.39_5;
  unsigned int _6;
  long unsigned int i.40_7;
  long unsigned int _8;
  farulong * _9;
  unsigned int _11;
  unsigned int _12;
  long unsigned int i.41_13;
  long unsigned int _14;
  sizetype _15;
  farulong * _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long int _20;
  long unsigned int i.42_21;
  long unsigned int _22;
  sizetype _23;
  farulong * _24;
  long unsigned int _25;
  long unsigned int i.43_26;
  long unsigned int _27;
  farulong * _28;
  long unsigned int _29;
  long unsigned int i.44_30;
  long unsigned int _31;
  sizetype _32;
  farulong * _33;
  long unsigned int _34;
  long unsigned int i.45_35;
  long unsigned int _36;
  farulong * _37;
  long unsigned int _38;
  long unsigned int i.46_39;
  long unsigned int _40;
  sizetype _41;
  farulong * _42;
  long unsigned int _43;
  long unsigned int i.47_44;
  long unsigned int _45;
  farulong * _46;
  long unsigned int _47;
  long unsigned int _67;
  long unsigned int _79;
  long unsigned int _87;
  farulong * _88;
  long unsigned int _89;
  unsigned int _90;
  long int _91;
  long unsigned int _92;
  long unsigned int _93;
  long unsigned int _115;
  farulong * _116;
  long unsigned int _117;
  unsigned int _118;
  long int _119;
  long int _120;
  long unsigned int _121;
  long unsigned int _122;
  long unsigned int _129;
  farulong * _130;
  long unsigned int _131;
  unsigned int _132;
  long int _133;
  long unsigned int _134;
  long unsigned int _135;

  <bb 2> [0.00%]:
  *nbitops_56(D) = 0;
  randnum (13);
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  i.38_1 = (long unsigned int) i_48;
  _2 = i.38_1 * 8;
  _3 = bitarraybase_69(D) + _2;
  *_3 = 6148914691236517205;
  i_83 = i_48 + 1;

  <bb 4> [0.00%]:
  # i_48 = PHI <0(2), i_83(3)>
  _4 = global_bitopstruct.bitfieldarraysize;
  i.39_5 = (long unsigned int) i_48;
  if (_4 > i.39_5)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  randnum (13);
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _6 = abs_randwc (262140);
  bitoffset_75 = (long unsigned int) _6;
  i.40_7 = (long unsigned int) i_49;
  _8 = i.40_7 * 16;
  _9 = bitoparraybase_68(D) + _8;
  *_9 = bitoffset_75;
  _11 = 262140 - _6;
  _12 = abs_randwc (_11);
  i.41_13 = (long unsigned int) i_49;
  _14 = i.41_13 * 16;
  _15 = _14 + 8;
  _16 = bitoparraybase_68(D) + _15;
  _17 = (long unsigned int) _12;
  *_16 = _17;
  _79 = *_16;
  _18 = *nbitops_56(D);
  _19 = _18 + _79;
  *nbitops_56(D) = _19;
  i_81 = i_49 + 1;

  <bb 7> [0.00%]:
  # i_49 = PHI <0(5), i_81(6)>
  if (i_49 < bitoparraysize_62(D))
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  elapsed_64 = StartStopwatch ();
  goto <bb 20>; [0.00%]

  <bb 9> [0.00%]:
  _20 = i_50 % 3;
  switch (_20) <default: <L10> [0.00%], case 0: <L7> [0.00%], case 1: <L8> [0.00%], case 2: <L9> [0.00%]>

<L7> [15.00%]:
  i.42_21 = (long unsigned int) i_50;
  _22 = i.42_21 * 16;
  _23 = _22 + 8;
  _24 = bitoparraybase_68(D) + _23;
  _25 = *_24;
  i.43_26 = (long unsigned int) i_50;
  _27 = i.43_26 * 16;
  _28 = bitoparraybase_68(D) + _27;
  _29 = *_28;
  goto <bb 12>; [100.00%]

  <bb 11> [85.00%]:
  bindex_85 = bit_addr_84 >> 6;
  bitnumb_86 = bit_addr_84 & 63;
  _87 = bindex_85 * 8;
  _88 = bitarraybase_69(D) + _87;
  _89 = *_88;
  _90 = (unsigned int) bitnumb_86;
  _91 = 1 << _90;
  _92 = (long unsigned int) _91;
  _93 = _89 | _92;
  *_88 = _93;
  bit_addr_102 = bit_addr_84 + 1;

  <bb 12> [100.00%]:
  # bit_addr_84 = PHI <_29(10), bit_addr_102(11)>
  # nbits_103 = PHI <_25(10), nbits_104(11)>
  nbits_104 = nbits_103 + 18446744073709551615;
  if (nbits_103 != 0)
    goto <bb 11>; [85.00%]
  else
    goto <bb 19> (<L10>); [15.00%]

<L8> [15.00%]:
  i.44_30 = (long unsigned int) i_50;
  _31 = i.44_30 * 16;
  _32 = _31 + 8;
  _33 = bitoparraybase_68(D) + _32;
  _34 = *_33;
  i.45_35 = (long unsigned int) i_50;
  _36 = i.45_35 * 16;
  _37 = bitoparraybase_68(D) + _36;
  _38 = *_37;
  goto <bb 15>; [100.00%]

  <bb 14> [85.00%]:
  bindex_106 = bit_addr_105 >> 6;
  bitnumb_107 = bit_addr_105 & 63;
  _115 = bindex_106 * 8;
  _116 = bitarraybase_69(D) + _115;
  _117 = *_116;
  _118 = (unsigned int) bitnumb_107;
  _119 = 1 << _118;
  _120 = ~_119;
  _121 = (long unsigned int) _120;
  _122 = _117 & _121;
  *_116 = _122;
  bit_addr_123 = bit_addr_105 + 1;

  <bb 15> [100.00%]:
  # bit_addr_105 = PHI <_38(13), bit_addr_123(14)>
  # nbits_124 = PHI <_34(13), nbits_125(14)>
  nbits_125 = nbits_124 + 18446744073709551615;
  if (nbits_124 != 0)
    goto <bb 14>; [85.00%]
  else
    goto <bb 19> (<L10>); [15.00%]

<L9> [15.00%]:
  i.46_39 = (long unsigned int) i_50;
  _40 = i.46_39 * 16;
  _41 = _40 + 8;
  _42 = bitoparraybase_68(D) + _41;
  _43 = *_42;
  i.47_44 = (long unsigned int) i_50;
  _45 = i.47_44 * 16;
  _46 = bitoparraybase_68(D) + _45;
  _47 = *_46;
  goto <bb 18>; [100.00%]

  <bb 17> [85.00%]:
  bindex_127 = bit_addr_126 >> 6;
  bitnumb_128 = bit_addr_126 & 63;
  _129 = bindex_127 * 8;
  _130 = bitarraybase_69(D) + _129;
  _131 = *_130;
  _132 = (unsigned int) bitnumb_128;
  _133 = 1 << _132;
  _134 = (long unsigned int) _133;
  _135 = _131 ^ _134;
  *_130 = _135;
  bit_addr_136 = bit_addr_126 + 1;

  <bb 18> [100.00%]:
  # bit_addr_126 = PHI <_47(16), bit_addr_136(17)>
  # nbits_137 = PHI <_43(16), nbits_138(17)>
  nbits_138 = nbits_137 + 18446744073709551615;
  if (nbits_137 != 0)
    goto <bb 17>; [85.00%]
  else
    goto <bb 19> (<L10>); [15.00%]

<L10> [0.00%]:
  i_73 = i_50 + 1;

  <bb 20> [0.00%]:
  # i_50 = PHI <0(8), i_73(19)>
  if (i_50 < bitoparraysize_62(D))
    goto <bb 9>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 21> [0.00%]:
  _67 = StopStopwatch (elapsed_64);
  return _67;

}



;; Function LoadAssign (LoadAssign, funcdef_no=76, decl_uid=4608, cgraph_uid=76, symbol_order=101)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
arraybase = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_1 = NONLOCAL
_2 = i_9
_3 = _2
_3 = &NONLOCAL
_4 = arraybase + UNKNOWN
_5 = j_10
_6 = _1
*_4 + UNKNOWN = _6
j.71_7 = j_10
j_21 = j_10
j_21 = &NONLOCAL
j_10 = &NULL
j_10 = j_21
i.72_8 = i_9
i_17 = i_9
i_17 = &NONLOCAL
i_9 = &NULL
i_9 = i_17

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"arraybase"[label="arraybase = { 5 }"];
"randnum";
"abs_randwc";
"_1";
"_2";
"i_9"[label="i_9 = { 1 5 }"];
"_3"[label="_3 = { 5 }"];
"_4";
"_5";
"j_10"[label="j_10 = { 1 5 }"];
"_6";
"j.71_7";
"i.72_8";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*arraybase";
"*randnum";
"*abs_randwc";
"*_1";
"*_2";
"*i_9";
"*_3";
"*_4";
"*_5";
"*j_10";
"*_6";
"*j.71_7";
"*j_21";
"*i.72_8";
"*i_17";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_1";
"i_9" -> "_2";
"i_9" -> "i_9";
"i_9" -> "i_9";
"_2" -> "_3";
"j_10" -> "_5";
"j_10" -> "j_10";
"j_10" -> "j_10";
"_1" -> "_6";
"j_10" -> "j.71_7";
"i_9" -> "i.72_8";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"arraybase" [label="\N\n_4 = arraybase + UNKNOWN\l"];
"randnum";
"abs_randwc";
"_1";
"_2";
"_4" [label="\N\n*_4 + UNKNOWN = _1\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_4";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _1\l"];
"STOREDANYTHING";
"INTEGER";
"arraybase" [label="\N\n_4 = arraybase + UNKNOWN\l"];
"randnum";
"abs_randwc";
"_1";
"_2";
"_4" [label="\N\n*_4 + UNKNOWN = _1\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_4";
"_1" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
arraybase = { NONLOCAL }
randnum = { }
abs_randwc = { }
_1 = { ESCAPED NONLOCAL }
_2 = { NULL NONLOCAL }
i_9 = { NULL NONLOCAL } same as _2
_3 = { NULL NONLOCAL } same as _2
_4 = { NONLOCAL }
_5 = { NULL NONLOCAL } same as _2
j_10 = { NULL NONLOCAL } same as _2
_6 = { ESCAPED NONLOCAL } same as _1
j.71_7 = { NULL NONLOCAL } same as _2
j_21 = { NULL NONLOCAL } same as _2
i.72_8 = { NULL NONLOCAL } same as _2
i_17 = { NULL NONLOCAL } same as _2


Alias information for LoadAssign

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_4, points-to non-local, points-to NULL, points-to vars: { }
arraybase_19(D), points-to non-local, points-to NULL, points-to vars: { }

LoadAssign (farlong[101] * arraybase)
{
  short unsigned int j;
  short unsigned int i;
  unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  farlong[101] * _4;
  int _5;
  long int _6;
  short unsigned int j.71_7;
  short unsigned int i.72_8;

  <bb 2> [0.00%]:
  randnum (13);
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = abs_randwc (5000000);
  _2 = (long unsigned int) i_9;
  _3 = _2 * 808;
  _4 = arraybase_19(D) + _3;
  _5 = (int) j_10;
  _6 = (long int) _1;
  *_4[_5] = _6;
  j.71_7 = j_10;
  j_21 = j_10 + 1;

  <bb 4> [0.00%]:
  # j_10 = PHI <0(6), j_21(3)>
  if (j_10 <= 100)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  i.72_8 = i_9;
  i_17 = i_9 + 1;

  <bb 6> [0.00%]:
  # i_9 = PHI <0(2), i_17(5)>
  if (i_9 <= 100)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function LoadAssignArrayWithRand (LoadAssignArrayWithRand, funcdef_no=75, decl_uid=4606, cgraph_uid=75, symbol_order=100)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
arraybase = &NONLOCAL
numarrays = &NONLOCAL
abase$ptrs$p_17 = arraybase
abase1$ptrs$p_34 = arraybase
_1 = abase$ptrs$p_17
ESCAPED = _1
_2 = abase1$ptrs$p_15
_3 = _2 + 652864
abase1$ptrs$p_35 = _3
_4 = abase1$ptrs$p_35
_5 = abase$ptrs$p_17
_22 = i_21
_23 = _22
_23 = &NONLOCAL
_24 = _5 + UNKNOWN
_26 = j_25
_27 = _4 + UNKNOWN
_28 = *_24 + UNKNOWN
*_27 + UNKNOWN = _28
j_29 = j_25
j_29 = &NONLOCAL
j_25 = j_29
j_25 = &NULL
i_30 = i_21
i_30 = &NONLOCAL
i_21 = &NULL
i_21 = i_30
i_18 = i_6
i_18 = &NONLOCAL
i_6 = &NONLOCAL
i_6 = i_18
abase1$ptrs$p_15 = abase1$ptrs$p_34
abase1$ptrs$p_15 = abase1$ptrs$p_35

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"arraybase"[label="arraybase = { 5 }"];
"numarrays"[label="numarrays = { 5 }"];
"abase$ptrs$p_17";
"abase1$ptrs$p_34";
"_1";
"LoadAssign";
"_2";
"abase1$ptrs$p_15";
"_3";
"abase1$ptrs$p_35";
"_4";
"_5";
"_22";
"i_21"[label="i_21 = { 1 5 }"];
"_23"[label="_23 = { 5 }"];
"_24";
"_26";
"j_25"[label="j_25 = { 1 5 }"];
"_27";
"_28";
"i_18"[label="i_18 = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*arraybase";
"*numarrays";
"*abase$ptrs$p_17";
"*abase1$ptrs$p_34";
"*_1";
"*LoadAssign";
"*_2";
"*abase1$ptrs$p_15";
"*_3";
"*abase1$ptrs$p_35";
"*_4";
"*_5";
"*_22";
"*i_21";
"*_23";
"*_24";
"*_26";
"*j_25";
"*_27";
"*_28";
"*j_29";
"*i_30";
"*i_18";
"*i_6";

  // Edges in the constraint graph:
"_1" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"arraybase" -> "abase$ptrs$p_17";
"arraybase" -> "abase1$ptrs$p_34";
"abase$ptrs$p_17" -> "_1";
"abase1$ptrs$p_15" -> "_2";
"abase1$ptrs$p_34" -> "abase1$ptrs$p_15";
"abase1$ptrs$p_35" -> "abase1$ptrs$p_15";
"_3" -> "abase1$ptrs$p_35";
"abase1$ptrs$p_35" -> "_4";
"abase$ptrs$p_17" -> "_5";
"i_21" -> "_22";
"i_21" -> "i_21";
"i_21" -> "i_21";
"_22" -> "_23";
"j_25" -> "_26";
"j_25" -> "j_25";
"j_25" -> "j_25";
"i_18" -> "i_18";
"i_18" -> "i_18";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"arraybase" [label="\N\n_24 = arraybase + UNKNOWN\l"];
"LoadAssign";
"_2" [label="\N\n_3 = _2 + 652864\l"];
"_3" [label="\N\n_27 = _3 + UNKNOWN\l"];
"_22";
"_24" [label="\N\n_28 = *_24 + UNKNOWN\l"];
"_27" [label="\N\n*_27 + UNKNOWN = _28\l"];
"_28";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "_27";
"STOREDANYTHING" -> "_28";
"arraybase" -> "ESCAPED";
"arraybase" -> "_2";
"_3" -> "_2";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"arraybase" [label="\N\n_24 = arraybase + UNKNOWN\l"];
"LoadAssign";
"_2" [label="\N\n_3 = _2 + 652864\l"];
"_3" [label="\N\n_27 = _3 + UNKNOWN\l"];
"_22";
"_24" [label="\N\n_28 = *_24 + UNKNOWN\l"];
"_27" [label="\N\n*_27 + UNKNOWN = _28\l"];
"_28";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "_27";
"STOREDANYTHING" -> "_28";
"arraybase" -> "ESCAPED";
"arraybase" -> "_2";
"_3" -> "_2";
"_28" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
arraybase = { NONLOCAL }
numarrays = { NONLOCAL } same as arraybase
abase$ptrs$p_17 = { NONLOCAL } same as arraybase
abase1$ptrs$p_34 = { NONLOCAL } same as arraybase
_1 = { NONLOCAL } same as arraybase
LoadAssign = { }
_2 = { NONLOCAL }
abase1$ptrs$p_15 = { NONLOCAL } same as _2
_3 = { NONLOCAL }
abase1$ptrs$p_35 = { NONLOCAL } same as _3
_4 = { NONLOCAL } same as _3
_5 = { NONLOCAL } same as arraybase
_22 = { NULL NONLOCAL }
i_21 = { NULL NONLOCAL } same as _22
_23 = { NULL NONLOCAL } same as _22
_24 = { NONLOCAL }
_26 = { NULL NONLOCAL } same as _22
j_25 = { NULL NONLOCAL } same as _22
_27 = { NONLOCAL }
_28 = { ESCAPED NONLOCAL }
j_29 = { NULL NONLOCAL } same as _22
i_30 = { NULL NONLOCAL } same as _22
i_18 = { NONLOCAL } same as arraybase
i_6 = { NONLOCAL } same as arraybase


Alias information for LoadAssignArrayWithRand

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
arraybase_10(D), points-to non-local, points-to NULL, points-to vars: { }
abase1$ptrs$p_15, points-to non-local, points-to NULL, points-to vars: { }
abase$ptrs$p_17, points-to non-local, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to NULL, points-to vars: { }
_27, points-to non-local, points-to NULL, points-to vars: { }
abase1$ptrs$p_34, points-to non-local, points-to NULL, points-to vars: { }
abase1$ptrs$p_35, points-to non-local, points-to NULL, points-to vars: { }

LoadAssignArrayWithRand (farlong * arraybase, long unsigned int numarrays)
{
  long int * abase1$ptrs$p;
  long int * abase$ptrs$p;
  short unsigned int i;
  short unsigned int j;
  long unsigned int i;
  struct longptr abase1;
  struct longptr abase;
  long int[101][101] * _1;
  long int * _2;
  long int * _3;
  long int[101][101] * _4;
  long int[101][101] * _5;
  long unsigned int _22;
  long unsigned int _23;
  farlong[101] * _24;
  int _26;
  farlong[101] * _27;
  long int _28;

  <bb 2> [0.00%]:
  abase$ptrs$p_17 = arraybase_10(D);
  abase1$ptrs$p_34 = arraybase_10(D);
  _1 = abase$ptrs$p_17;
  LoadAssign (_1);
  if (numarrays_14(D) > 1)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 3> [0.01%]:
  _2 = abase1$ptrs$p_15;
  _3 = _2 + 81608;
  abase1$ptrs$p_35 = _3;
  _4 = abase1$ptrs$p_35;
  _5 = abase$ptrs$p_17;
  goto <bb 7>; [100.00%]

  <bb 4> [99.00%]:
  _22 = (long unsigned int) i_21;
  _23 = _22 * 808;
  _24 = _5 + _23;
  _26 = (int) j_25;
  _27 = _4 + _23;
  _28 = *_24[_26];
  *_27[_26] = _28;
  j_29 = j_25 + 1;

  <bb 5> [100.00%]:
  # j_25 = PHI <j_29(4), 0(7)>
  if (j_25 <= 100)
    goto <bb 4>; [99.00%]
  else
    goto <bb 6>; [1.00%]

  <bb 6> [1.00%]:
  i_30 = i_21 + 1;

  <bb 7> [1.01%]:
  # i_21 = PHI <0(3), i_30(6)>
  if (i_21 <= 100)
    goto <bb 5>; [99.00%]
  else
    goto <bb 8>; [1.00%]

  <bb 8> [0.00%]:
  i_18 = i_6 + 1;

  <bb 9> [0.00%]:
  # i_6 = PHI <1(2), i_18(8)>
  # abase1$ptrs$p_15 = PHI <abase1$ptrs$p_34(2), abase1$ptrs$p_35(8)>
  if (i_6 < numarrays_14(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  return;

}



;; Function DoAssignIteration (DoAssignIteration, funcdef_no=74, decl_uid=4603, cgraph_uid=74, symbol_order=99)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
arraybase = &NONLOCAL
numarrays = &NONLOCAL
abase$ptrs$p_20 = arraybase
ESCAPED = arraybase
ESCAPED = numarrays
elapsed_12 = NONLOCAL
_1 = abase$ptrs$p_13
ESCAPED = _1
_2 = abase$ptrs$p_13
_3 = _2 + 652864
abase$ptrs$p_22 = _3
i_19 = i_4
i_19 = &NONLOCAL
i_4 = &NULL
i_4 = i_19
abase$ptrs$p_13 = abase$ptrs$p_20
abase$ptrs$p_13 = abase$ptrs$p_22
ESCAPED = elapsed_12
_15 = NONLOCAL
ESCAPED = _15

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"arraybase"[label="arraybase = { 5 }"];
"numarrays"[label="numarrays = { 5 }"];
"abase$ptrs$p_20";
"LoadAssignArrayWithRand";
"StartStopwatch";
"elapsed_12";
"_1";
"abase$ptrs$p_13";
"Assignment";
"_2";
"_3";
"abase$ptrs$p_22";
"i_19"[label="i_19 = { 1 5 }"];
"StopStopwatch";
"_15";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*arraybase";
"*numarrays";
"*abase$ptrs$p_20";
"*LoadAssignArrayWithRand";
"*StartStopwatch";
"*_1";
"*abase$ptrs$p_13";
"*Assignment";
"*_2";
"*_3";
"*abase$ptrs$p_22";
"*i_19";
"*i_4";
"*StopStopwatch";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"arraybase" -> "ESCAPED";
"numarrays" -> "ESCAPED";
"elapsed_12" -> "ESCAPED";
"_1" -> "ESCAPED";
"_15" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"arraybase" -> "abase$ptrs$p_20";
"NONLOCAL" -> "elapsed_12";
"abase$ptrs$p_13" -> "_1";
"abase$ptrs$p_20" -> "abase$ptrs$p_13";
"abase$ptrs$p_22" -> "abase$ptrs$p_13";
"abase$ptrs$p_13" -> "_2";
"_3" -> "abase$ptrs$p_22";
"i_19" -> "i_19";
"i_19" -> "i_19";
"NONLOCAL" -> "_15";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"arraybase";
"LoadAssignArrayWithRand";
"StartStopwatch";
"elapsed_12";
"_1" [label="\N\n_3 = _1 + 652864\l"];
"Assignment";
"_3";
"i_19";
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"arraybase" -> "ESCAPED";
"arraybase" -> "_1";
"elapsed_12" -> "ESCAPED";
"_1" -> "ESCAPED";
"_3" -> "_1";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = elapsed_12\l"];
"STOREDANYTHING";
"INTEGER";
"arraybase";
"LoadAssignArrayWithRand";
"StartStopwatch";
"elapsed_12";
"_1" [label="\N\n_3 = _1 + 652864\l"];
"Assignment";
"_3";
"i_19";
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"arraybase" -> "ESCAPED";
"arraybase" -> "_1";
"elapsed_12" -> "ESCAPED";
"_1" -> "ESCAPED";
"_3" -> "_1";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as elapsed_12
STOREDANYTHING = { }
INTEGER = { ANYTHING }
arraybase = { NONLOCAL }
numarrays = { NONLOCAL } same as arraybase
abase$ptrs$p_20 = { NONLOCAL } same as arraybase
LoadAssignArrayWithRand = { }
StartStopwatch = { }
elapsed_12 = { ESCAPED NONLOCAL }
_1 = { NONLOCAL }
abase$ptrs$p_13 = { NONLOCAL } same as _1
Assignment = { }
_2 = { NONLOCAL } same as _1
_3 = { NONLOCAL }
abase$ptrs$p_22 = { NONLOCAL } same as _3
i_19 = { NULL NONLOCAL }
i_4 = { NULL NONLOCAL } same as i_19
StopStopwatch = { }
_15 = { ESCAPED NONLOCAL } same as elapsed_12


Alias information for DoAssignIteration

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to NULL, points-to vars: { }
arraybase_7(D), points-to non-local, points-to NULL, points-to vars: { }
abase$ptrs$p_13, points-to non-local, points-to NULL, points-to vars: { }
abase$ptrs$p_20, points-to non-local, points-to NULL, points-to vars: { }
abase$ptrs$p_22, points-to non-local, points-to NULL, points-to vars: { }

DoAssignIteration (farlong * arraybase, long unsigned int numarrays)
{
  long int * abase$ptrs$p;
  long unsigned int i;
  long unsigned int elapsed;
  struct longptr abase;
  long int[101][101] * _1;
  long int * _2;
  long int * _3;
  long unsigned int _15;

  <bb 2> [0.00%]:
  abase$ptrs$p_20 = arraybase_7(D);
  LoadAssignArrayWithRand (arraybase_7(D), numarrays_9(D));
  elapsed_12 = StartStopwatch ();
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = abase$ptrs$p_13;
  Assignment (_1);
  _2 = abase$ptrs$p_13;
  _3 = _2 + 81608;
  abase$ptrs$p_22 = _3;
  i_19 = i_4 + 1;

  <bb 4> [0.00%]:
  # i_4 = PHI <0(2), i_19(3)>
  # abase$ptrs$p_13 = PHI <abase$ptrs$p_20(2), abase$ptrs$p_22(3)>
  if (i_4 < numarrays_9(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  _15 = StopStopwatch (elapsed_12);
  return _15;

}



;; Function randomize_wts (randomize_wts, funcdef_no=109, decl_uid=4722, cgraph_uid=109, symbol_order=134)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
_1 = NONLOCAL
value_28 = _1
_2 = value_28
_2 = &NONLOCAL
value_29 = _2
value_29 = &NONLOCAL
_3 = value_29
_3 = &NONLOCAL
mid_wts = NONLOCAL
mid_wts = _3
ESCAPED = _3
i_31 = i_9
i_31 = &NONLOCAL
i_9 = &NULL
i_9 = i_31
neurode_26 = neurode_7
neurode_26 = &NONLOCAL
neurode_7 = &NULL
neurode_7 = neurode_26
ESCAPED = &NONLOCAL
_4 = NONLOCAL
value_21 = _4
_5 = value_21
_5 = &NONLOCAL
value_22 = _5
value_22 = &NONLOCAL
_6 = value_22
_6 = &NONLOCAL
out_wts = NONLOCAL
out_wts = _6
ESCAPED = _6
i_24 = i_10
i_24 = &NONLOCAL
i_10 = &NULL
i_10 = i_24
neurode_19 = neurode_8
neurode_19 = &NONLOCAL
neurode_8 = &NULL
neurode_8 = neurode_19

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"abs_randwc";
"_1";
"value_28";
"_2"[label="_2 = { 5 }"];
"value_29"[label="value_29 = { 5 }"];
"_3"[label="_3 = { 5 }"];
"mid_wts";
"i_31"[label="i_31 = { 1 5 }"];
"neurode_26"[label="neurode_26 = { 1 5 }"];
"_4";
"value_21";
"_5"[label="_5 = { 5 }"];
"value_22"[label="value_22 = { 5 }"];
"_6"[label="_6 = { 5 }"];
"out_wts";
"i_24"[label="i_24 = { 1 5 }"];
"neurode_19"[label="neurode_19 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*abs_randwc";
"*mid_wts";
"*i_31";
"*i_9";
"*neurode_26";
"*neurode_7";
"*out_wts";
"*i_24";
"*i_10";
"*neurode_19";
"*neurode_8";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_3" -> "ESCAPED";
"_6" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_1";
"_1" -> "value_28";
"value_28" -> "_2";
"_2" -> "value_29";
"value_29" -> "_3";
"NONLOCAL" -> "mid_wts";
"_3" -> "mid_wts";
"i_31" -> "i_31";
"i_31" -> "i_31";
"neurode_26" -> "neurode_26";
"neurode_26" -> "neurode_26";
"NONLOCAL" -> "_4";
"_4" -> "value_21";
"value_21" -> "_5";
"_5" -> "value_22";
"value_22" -> "_6";
"NONLOCAL" -> "out_wts";
"_6" -> "out_wts";
"i_24" -> "i_24";
"i_24" -> "i_24";
"neurode_19" -> "neurode_19";
"neurode_19" -> "neurode_19";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"abs_randwc";
"_1";
"i_31";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"_1" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _1\l"];
"STOREDANYTHING";
"INTEGER";
"abs_randwc";
"_1";
"i_31";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"_1" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
abs_randwc = { }
_1 = { ESCAPED NONLOCAL }
value_28 = { ESCAPED NONLOCAL } same as _1
_2 = { ESCAPED NONLOCAL } same as _1
value_29 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL } same as _1
mid_wts = { ESCAPED NONLOCAL } same as _1
i_31 = { NULL NONLOCAL }
i_9 = { NULL NONLOCAL } same as i_31
neurode_26 = { NULL NONLOCAL } same as i_31
neurode_7 = { NULL NONLOCAL } same as i_31
_4 = { ESCAPED NONLOCAL } same as _1
value_21 = { ESCAPED NONLOCAL } same as _1
_5 = { ESCAPED NONLOCAL } same as _1
value_22 = { ESCAPED NONLOCAL } same as _1
_6 = { ESCAPED NONLOCAL } same as _1
out_wts = { ESCAPED NONLOCAL } same as _1
i_24 = { NULL NONLOCAL } same as i_31
i_10 = { NULL NONLOCAL } same as i_31
neurode_19 = { NULL NONLOCAL } same as i_31
neurode_8 = { NULL NONLOCAL } same as i_31


Alias information for randomize_wts

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


randomize_wts ()
{
  double value;
  int i;
  int neurode;
  unsigned int _1;
  double _2;
  double _3;
  unsigned int _4;
  double _5;
  double _6;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = abs_randwc (100000);
  value_28 = (double) _1;
  _2 = value_28 / 1.0e+5;
  value_29 = _2 - 5.0e-1;
  _3 = value_29 * 5.0e-1;
  mid_wts[neurode_7][i_9] = _3;
  i_31 = i_9 + 1;

  <bb 4> [0.00%]:
  # i_9 = PHI <0(6), i_31(3)>
  if (i_9 <= 34)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  neurode_26 = neurode_7 + 1;

  <bb 6> [0.00%]:
  # neurode_7 = PHI <0(2), neurode_26(5)>
  if (neurode_7 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 7> [0.00%]:
  _4 = abs_randwc (100000);
  value_21 = (double) _4;
  _5 = value_21 / 1.0e+4;
  value_22 = _5 - 5.0e-1;
  _6 = value_22 * 5.0e-1;
  out_wts[neurode_8][i_10] = _6;
  i_24 = i_10 + 1;

  <bb 8> [0.00%]:
  # i_10 = PHI <0(10), i_24(7)>
  if (i_10 <= 7)
    goto <bb 7>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  neurode_19 = neurode_8 + 1;

  <bb 10> [0.00%]:
  # neurode_8 = PHI <0(6), neurode_19(9)>
  if (neurode_8 <= 7)
    goto <bb 8>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  return;

}



;; Function build_problem (build_problem, funcdef_no=114, decl_uid=4747, cgraph_uid=114, symbol_order=139)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
a = &NONLOCAL
n = &NONLOCAL
b = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_1 = NONLOCAL
_2 = _1
_2 = &NONLOCAL
i.204_3 = i_51
_4 = i.204_3
_4 = &NONLOCAL
_5 = b + UNKNOWN
_6 = _2
*_5 = _6
ESCAPED = &NONLOCAL
_7 = NONLOCAL
_8 = _7
_8 = &NONLOCAL
i.205_9 = i_51
_10 = i.205_9
_10 = &NONLOCAL
_11 = a + UNKNOWN
_12 = _8
*_11 + UNKNOWN = _12
i.206_13 = i_51
_14 = i.206_13
_14 = &NONLOCAL
_15 = a + UNKNOWN
derefaddrtmp(29) = &NONLOCAL
*_15 + UNKNOWN = derefaddrtmp(29)
j_87 = j_53
j_87 = &NONLOCAL
j_53 = &NULL
j_53 = j_87
_16 = n
i_83 = i_51
i_83 = &NONLOCAL
i_51 = &NULL
i_51 = i_83
_17 = n
n.207_18 = n
ESCAPED = n.207_18
_19 = NONLOCAL
k_68 = _19
n.208_20 = n
ESCAPED = n.208_20
_21 = NONLOCAL
k1_70 = _21
rcon_55 = &NONLOCAL
rcon_55 = &NONLOCAL
k.209_22 = _19
_23 = k.209_22
_23 = &NONLOCAL
_24 = a + UNKNOWN
_25 = *_24 + UNKNOWN
k1.210_26 = _21
_27 = k1.210_26
_27 = &NONLOCAL
_28 = a + UNKNOWN
_29 = *_28 + UNKNOWN
_30 = _29
_30 = rcon_55
k.211_31 = _19
_32 = k.211_31
_32 = &NONLOCAL
_33 = a + UNKNOWN
_34 = _25
_34 = _30
*_33 + UNKNOWN = _34
j_78 = j_54
j_78 = &NONLOCAL
j_54 = &NULL
j_54 = j_78
_35 = n
k.212_36 = _19
_37 = k.212_36
_37 = &NONLOCAL
_38 = b + UNKNOWN
_39 = *_38
k1.213_40 = _21
_41 = k1.213_40
_41 = &NONLOCAL
_42 = b + UNKNOWN
_43 = *_42
_44 = _43
_44 = rcon_55
k.214_45 = _19
_46 = k.214_45
_46 = &NONLOCAL
_47 = b + UNKNOWN
_48 = _39
_48 = _44
*_47 = _48
i_79 = i_52
i_79 = &NONLOCAL
i_52 = &NULL
i_52 = i_79
_49 = n
_49 = &NONLOCAL
_50 = _49

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"a"[label="a = { 5 }"];
"n"[label="n = { 5 }"];
"b"[label="b = { 5 }"];
"randnum";
"abs_randwc";
"_1";
"_2"[label="_2 = { 5 }"];
"i.204_3";
"i_51"[label="i_51 = { 1 5 }"];
"_4"[label="_4 = { 5 }"];
"_5";
"_6";
"_7";
"_8"[label="_8 = { 5 }"];
"i.205_9";
"_10"[label="_10 = { 5 }"];
"_11";
"_12";
"i.206_13";
"_14"[label="_14 = { 5 }"];
"_15";
"derefaddrtmp(29)"[label="derefaddrtmp(29) = { 5 }"];
"j_87"[label="j_87 = { 1 5 }"];
"_16";
"_17";
"n.207_18";
"_19";
"k_68";
"n.208_20";
"_21";
"k1_70";
"rcon_55"[label="rcon_55 = { 5 }"];
"k.209_22";
"_23"[label="_23 = { 5 }"];
"_24";
"_25";
"k1.210_26";
"_27"[label="_27 = { 5 }"];
"_28";
"_29";
"_30";
"k.211_31";
"_32"[label="_32 = { 5 }"];
"_33";
"_34";
"j_78"[label="j_78 = { 1 5 }"];
"_35";
"k.212_36";
"_37"[label="_37 = { 5 }"];
"_38";
"_39";
"k1.213_40";
"_41"[label="_41 = { 5 }"];
"_42";
"_43";
"_44";
"k.214_45";
"_46"[label="_46 = { 5 }"];
"_47";
"_48";
"i_79"[label="i_79 = { 1 5 }"];
"_49"[label="_49 = { 5 }"];
"_50";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*a";
"*n";
"*b";
"*randnum";
"*abs_randwc";
"*_1";
"*_2";
"*i.204_3";
"*i_51";
"*_4";
"*_5";
"*_6";
"*_7";
"*_8";
"*i.205_9";
"*_10";
"*_11";
"*_12";
"*i.206_13";
"*_14";
"*_15";
"*derefaddrtmp(29)";
"*j_87";
"*j_53";
"*_16";
"*i_83";
"*_17";
"*n.207_18";
"*_19";
"*k_68";
"*n.208_20";
"*_21";
"*k1_70";
"*rcon_55";
"*k.209_22";
"*_23";
"*_24";
"*_25";
"*k1.210_26";
"*_27";
"*_28";
"*_29";
"*_30";
"*k.211_31";
"*_32";
"*_33";
"*_34";
"*j_78";
"*j_54";
"*_35";
"*k.212_36";
"*_37";
"*_38";
"*_39";
"*k1.213_40";
"*_41";
"*_42";
"*_43";
"*_44";
"*k.214_45";
"*_46";
"*_47";
"*_48";
"*i_79";
"*i_52";
"*_49";
"*_50";

  // Edges in the constraint graph:
"n.207_18" -> "ESCAPED";
"n.208_20" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_1";
"_1" -> "_2";
"i_51" -> "i.204_3";
"i_51" -> "i_51";
"i_51" -> "i_51";
"i.204_3" -> "_4";
"_2" -> "_6";
"NONLOCAL" -> "_7";
"_7" -> "_8";
"i_51" -> "i.205_9";
"i.205_9" -> "_10";
"_8" -> "_12";
"i_51" -> "i.206_13";
"i.206_13" -> "_14";
"j_87" -> "j_87";
"j_87" -> "j_87";
"n" -> "_16";
"n" -> "_17";
"n" -> "n.207_18";
"NONLOCAL" -> "_19";
"_19" -> "k_68";
"n" -> "n.208_20";
"NONLOCAL" -> "_21";
"_21" -> "k1_70";
"_19" -> "k.209_22";
"k.209_22" -> "_23";
"_21" -> "k1.210_26";
"k1.210_26" -> "_27";
"rcon_55" -> "_30";
"_29" -> "_30";
"_19" -> "k.211_31";
"k.211_31" -> "_32";
"_25" -> "_34";
"_30" -> "_34";
"j_78" -> "j_78";
"j_78" -> "j_78";
"n" -> "_35";
"_19" -> "k.212_36";
"k.212_36" -> "_37";
"*_38" -> "_39";
"_21" -> "k1.213_40";
"k1.213_40" -> "_41";
"*_42" -> "_43";
"rcon_55" -> "_44";
"_43" -> "_44";
"_19" -> "k.214_45";
"k.214_45" -> "_46";
"_39" -> "_48";
"_44" -> "_48";
"i_79" -> "i_79";
"i_79" -> "i_79";
"n" -> "_49";
"_49" -> "_50";
"NONLOCAL" -> "*ESCAPED";
"_6" -> "*_5";
"_48" -> "*_47";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"a" [label="\N\n_5 = a + UNKNOWN\l_11 = a + UNKNOWN\l_15 = a + UNKNOWN\l_24 = a + UNKNOWN\l_28 = a + UNKNOWN\l_33 = a + UNKNOWN\l_38 = a + UNKNOWN\l_42 = a + UNKNOWN\l_47 = a + UNKNOWN\l"];
"randnum";
"abs_randwc";
"_1";
"i.204_3";
"_5" [label="\N\n*_5 = _1\l"];
"_11" [label="\N\n*_11 + UNKNOWN = _1\l"];
"_15" [label="\N\n*_15 + UNKNOWN = a\l"];
"_24" [label="\N\n_25 = *_24 + UNKNOWN\l"];
"_25";
"_28" [label="\N\n_29 = *_28 + UNKNOWN\l"];
"_29";
"_30";
"_33" [label="\N\n*_33 + UNKNOWN = _34\l"];
"_34";
"_38" [label="\N\n_39 = *_38\l"];
"_39";
"_42" [label="\N\n_43 = *_42\l"];
"_43";
"_44";
"_47" [label="\N\n*_47 = _48\l"];
"_48";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_28";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "_33";
"STOREDANYTHING" -> "_38";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_47";
"a" -> "ESCAPED";
"a" -> "_30";
"a" -> "_44";
"_25" -> "_34";
"_29" -> "_30";
"_30" -> "_34";
"_39" -> "_48";
"_43" -> "_44";
"_44" -> "_48";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _1\l"];
"STOREDANYTHING";
"INTEGER";
"a" [label="\N\n_5 = a + UNKNOWN\l_11 = a + UNKNOWN\l_15 = a + UNKNOWN\l_24 = a + UNKNOWN\l_28 = a + UNKNOWN\l_33 = a + UNKNOWN\l_38 = a + UNKNOWN\l_42 = a + UNKNOWN\l_47 = a + UNKNOWN\l"];
"randnum";
"abs_randwc";
"_1";
"i.204_3";
"_5" [label="\N\n*_5 = _1\l"];
"_11" [label="\N\n*_11 + UNKNOWN = _1\l"];
"_15" [label="\N\n*_15 + UNKNOWN = a\l"];
"_24" [label="\N\n_25 = *_24 + UNKNOWN\l"];
"_25";
"_28" [label="\N\n_29 = *_28 + UNKNOWN\l"];
"_29";
"_30";
"_33" [label="\N\n*_33 + UNKNOWN = _34\l"];
"_34";
"_38" [label="\N\n_39 = *_38\l"];
"_39";
"_42" [label="\N\n_43 = *_42\l"];
"_43";
"_44";
"_47" [label="\N\n*_47 = _48\l"];
"_48";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_28";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "_33";
"STOREDANYTHING" -> "_38";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_47";
"a" -> "ESCAPED";
"a" -> "_30";
"a" -> "_44";
"_1" -> "ESCAPED";
"_1" -> "_25";
"_1" -> "_29";
"_1" -> "_39";
"_1" -> "_43";
"_25" -> "_34";
"_29" -> "_30";
"_30" -> "_34";
"_34" -> "ESCAPED";
"_39" -> "_48";
"_43" -> "_44";
"_44" -> "_48";
"_48" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
a = { NONLOCAL }
n = { NONLOCAL } same as a
b = { NONLOCAL } same as a
randnum = { }
abs_randwc = { }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
i.204_3 = { NULL NONLOCAL }
i_51 = { NULL NONLOCAL } same as i.204_3
_4 = { NULL NONLOCAL } same as i.204_3
_5 = { NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as _1
_7 = { ESCAPED NONLOCAL } same as _1
_8 = { ESCAPED NONLOCAL } same as _1
i.205_9 = { NULL NONLOCAL } same as i.204_3
_10 = { NULL NONLOCAL } same as i.204_3
_11 = { NONLOCAL }
_12 = { ESCAPED NONLOCAL } same as _1
i.206_13 = { NULL NONLOCAL } same as i.204_3
_14 = { NULL NONLOCAL } same as i.204_3
_15 = { NONLOCAL }
derefaddrtmp(29) = { NONLOCAL } same as a
j_87 = { NULL NONLOCAL } same as i.204_3
j_53 = { NULL NONLOCAL } same as i.204_3
_16 = { NONLOCAL } same as a
i_83 = { NULL NONLOCAL } same as i.204_3
_17 = { NONLOCAL } same as a
n.207_18 = { NONLOCAL } same as a
_19 = { ESCAPED NONLOCAL } same as _1
k_68 = { ESCAPED NONLOCAL } same as _1
n.208_20 = { NONLOCAL } same as a
_21 = { ESCAPED NONLOCAL } same as _1
k1_70 = { ESCAPED NONLOCAL } same as _1
rcon_55 = { NONLOCAL } same as a
k.209_22 = { ESCAPED NONLOCAL } same as _1
_23 = { ESCAPED NONLOCAL } same as _1
_24 = { NONLOCAL }
_25 = { ESCAPED NONLOCAL }
k1.210_26 = { ESCAPED NONLOCAL } same as _1
_27 = { ESCAPED NONLOCAL } same as _1
_28 = { NONLOCAL }
_29 = { ESCAPED NONLOCAL }
_30 = { ESCAPED NONLOCAL }
k.211_31 = { ESCAPED NONLOCAL } same as _1
_32 = { ESCAPED NONLOCAL } same as _1
_33 = { NONLOCAL }
_34 = { ESCAPED NONLOCAL }
j_78 = { NULL NONLOCAL } same as i.204_3
j_54 = { NULL NONLOCAL } same as i.204_3
_35 = { NONLOCAL } same as a
k.212_36 = { ESCAPED NONLOCAL } same as _1
_37 = { ESCAPED NONLOCAL } same as _1
_38 = { NONLOCAL }
_39 = { ESCAPED NONLOCAL }
k1.213_40 = { ESCAPED NONLOCAL } same as _1
_41 = { ESCAPED NONLOCAL } same as _1
_42 = { NONLOCAL }
_43 = { ESCAPED NONLOCAL }
_44 = { ESCAPED NONLOCAL }
k.214_45 = { ESCAPED NONLOCAL } same as _1
_46 = { ESCAPED NONLOCAL } same as _1
_47 = { NONLOCAL }
_48 = { ESCAPED NONLOCAL }
i_79 = { NULL NONLOCAL } same as i.204_3
i_52 = { NULL NONLOCAL } same as i.204_3
_49 = { NONLOCAL } same as a
_50 = { NONLOCAL } same as a


Alias information for build_problem

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_5, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to NULL, points-to vars: { }
_28, points-to non-local, points-to NULL, points-to vars: { }
_33, points-to non-local, points-to NULL, points-to vars: { }
_38, points-to non-local, points-to NULL, points-to vars: { }
_42, points-to non-local, points-to NULL, points-to vars: { }
_47, points-to non-local, points-to NULL, points-to vars: { }
b_74(D), points-to non-local, points-to NULL, points-to vars: { }
a_76(D), points-to non-local, points-to NULL, points-to vars: { }

build_problem (double[101] * a, int n, double * b)
{
  double rcon;
  long int k1;
  long int k;
  long int j;
  long int i;
  unsigned int _1;
  unsigned int _2;
  long unsigned int i.204_3;
  long unsigned int _4;
  double * _5;
  double _6;
  unsigned int _7;
  unsigned int _8;
  long unsigned int i.205_9;
  long unsigned int _10;
  double[101] * _11;
  double _12;
  long unsigned int i.206_13;
  long unsigned int _14;
  double[101] * _15;
  long int _16;
  long int _17;
  unsigned int n.207_18;
  unsigned int _19;
  unsigned int n.208_20;
  unsigned int _21;
  long unsigned int k.209_22;
  long unsigned int _23;
  double[101] * _24;
  double _25;
  long unsigned int k1.210_26;
  long unsigned int _27;
  double[101] * _28;
  double _29;
  double _30;
  long unsigned int k.211_31;
  long unsigned int _32;
  double[101] * _33;
  double _34;
  long int _35;
  long unsigned int k.212_36;
  long unsigned int _37;
  double * _38;
  double _39;
  long unsigned int k1.213_40;
  long unsigned int _41;
  double * _42;
  double _43;
  double _44;
  long unsigned int k.214_45;
  long unsigned int _46;
  double * _47;
  double _48;
  int _49;
  long int _50;

  <bb 2> [0.00%]:
  randnum (13);
  goto <bb 10>; [0.00%]

  <bb 3> [0.00%]:
  _1 = abs_randwc (100);
  _2 = _1 + 1;
  i.204_3 = (long unsigned int) i_51;
  _4 = i.204_3 * 8;
  _5 = b_74(D) + _4;
  _6 = (double) _2;
  *_5 = _6;
  goto <bb 8>; [0.00%]

  <bb 4> [0.00%]:
  if (i_51 == j_53)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _7 = abs_randwc (1000);
  _8 = _7 + 1;
  i.205_9 = (long unsigned int) i_51;
  _10 = i.205_9 * 808;
  _11 = a_76(D) + _10;
  _12 = (double) _8;
  *_11[j_53] = _12;
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  i.206_13 = (long unsigned int) i_51;
  _14 = i.206_13 * 808;
  _15 = a_76(D) + _14;
  *_15[j_53] = 0.0;

  <bb 7> [0.00%]:
  j_87 = j_53 + 1;

  <bb 8> [0.00%]:
  # j_53 = PHI <0(3), j_87(7)>
  _16 = (long int) n_65(D);
  if (_16 > j_53)
    goto <bb 4>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  i_83 = i_51 + 1;

  <bb 10> [0.00%]:
  # i_51 = PHI <0(2), i_83(9)>
  _17 = (long int) n_65(D);
  if (_17 > i_51)
    goto <bb 3>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 11> [0.00%]:
  n.207_18 = (unsigned int) n_65(D);
  _19 = abs_randwc (n.207_18);
  k_68 = (long int) _19;
  n.208_20 = (unsigned int) n_65(D);
  _21 = abs_randwc (n.208_20);
  k1_70 = (long int) _21;
  if (k_68 != k1_70)
    goto <bb 12>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 12> [0.00%]:
  if (k_68 < k1_70)
    goto <bb 14>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:

  <bb 14> [0.00%]:
  # rcon_55 = PHI <1.0e+0(12), -1.0e+0(13)>
  goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:
  k.209_22 = (long unsigned int) _19;
  _23 = k.209_22 * 808;
  _24 = a_76(D) + _23;
  _25 = *_24[j_54];
  k1.210_26 = (long unsigned int) _21;
  _27 = k1.210_26 * 808;
  _28 = a_76(D) + _27;
  _29 = *_28[j_54];
  _30 = _29 * rcon_55;
  k.211_31 = (long unsigned int) _19;
  _32 = k.211_31 * 808;
  _33 = a_76(D) + _32;
  _34 = _25 + _30;
  *_33[j_54] = _34;
  j_78 = j_54 + 1;

  <bb 16> [0.00%]:
  # j_54 = PHI <0(14), j_78(15)>
  _35 = (long int) n_65(D);
  if (_35 > j_54)
    goto <bb 15>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 17> [0.00%]:
  k.212_36 = (long unsigned int) _19;
  _37 = k.212_36 * 8;
  _38 = b_74(D) + _37;
  _39 = *_38;
  k1.213_40 = (long unsigned int) _21;
  _41 = k1.213_40 * 8;
  _42 = b_74(D) + _41;
  _43 = *_42;
  _44 = _43 * rcon_55;
  k.214_45 = (long unsigned int) _19;
  _46 = k.214_45 * 8;
  _47 = b_74(D) + _46;
  _48 = _39 + _44;
  *_47 = _48;

  <bb 18> [0.00%]:
  i_79 = i_52 + 1;

  <bb 19> [0.00%]:
  # i_52 = PHI <0(10), i_79(18)>
  _49 = n_65(D) * 8;
  _50 = (long int) _49;
  if (_50 > i_52)
    goto <bb 11>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  return;

}



;; Function stradjust (stradjust, funcdef_no=60, decl_uid=4523, cgraph_uid=60, symbol_order=85)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
optrarray = &NONLOCAL
strarray = &NONLOCAL
nstrings = &NONLOCAL
i = &NONLOCAL
l = &NONLOCAL
_1 = l
_2 = i
_2 = &NONLOCAL
_3 = optrarray + UNKNOWN
_4 = *_3
_5 = strarray + UNKNOWN
_6 = *_5
_7 = _6
direction_71 = _1
direction_71 = _7
_8 = direction_71
adjamount_72 = _8
_9 = nstrings
_9 = &NONLOCAL
_10 = i
_10 = &NONLOCAL
_11 = optrarray + UNKNOWN
_12 = *_11
_13 = strarray + UNKNOWN
*_13 = l
_14 = nstrings
_14 = &NONLOCAL
_15 = _14
_15 = &NONLOCAL
_16 = optrarray + UNKNOWN
_17 = *_16
_18 = nstrings
_18 = &NONLOCAL
_19 = _18
_19 = &NONLOCAL
_20 = optrarray + UNKNOWN
_21 = *_20
_22 = strarray + UNKNOWN
_23 = *_22
_24 = _23
_25 = _17
_25 = _24
_26 = i
_26 = &NONLOCAL
_27 = _26
_27 = &NONLOCAL
_28 = optrarray + UNKNOWN
_29 = *_28
_30 = _29
_82 = _25
_82 = _29
_31 = _82
nbytes_74 = _82
nbytes_74 = &NONLOCAL
_32 = i
_32 = &NONLOCAL
_33 = _32
_33 = &NONLOCAL
_34 = optrarray + UNKNOWN
_35 = *_34
_36 = strarray + UNKNOWN
_37 = i
_37 = &NONLOCAL
_38 = optrarray + UNKNOWN
_39 = *_38
_40 = l
_41 = _39
_41 = _40
_42 = _41
_42 = &NONLOCAL
_43 = strarray + UNKNOWN
ESCAPED = _43
ESCAPED = _36
ESCAPED = nbytes_74
j_76 = i
j_76 = &NONLOCAL
_44 = j_62
_44 = &NONLOCAL
_45 = optrarray + UNKNOWN
_46 = *_45
_47 = adjamount_72
_48 = j_62
_48 = &NONLOCAL
_49 = optrarray + UNKNOWN
_50 = _46
_50 = _47
*_49 = _50
_51 = j_62
_51 = &NONLOCAL
_52 = optrarray + UNKNOWN
_53 = *_52
_54 = adjamount_72
_55 = j_62
_55 = &NONLOCAL
_56 = optrarray + UNKNOWN
_57 = _53
_57 = _54
*_56 = _57
j_80 = j_62
j_80 = &NONLOCAL
j_62 = j_76
j_62 = j_80
_58 = i
_58 = &NONLOCAL
_59 = optrarray + UNKNOWN
_60 = *_59
_61 = strarray + UNKNOWN
*_61 = l

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"optrarray"[label="optrarray = { 5 }"];
"strarray"[label="strarray = { 5 }"];
"nstrings"[label="nstrings = { 5 }"];
"i"[label="i = { 5 }"];
"l"[label="l = { 5 }"];
"_1";
"_2"[label="_2 = { 5 }"];
"_3";
"_4";
"_5";
"_6";
"_7";
"direction_71";
"_8";
"adjamount_72";
"_9"[label="_9 = { 5 }"];
"_10"[label="_10 = { 5 }"];
"_11";
"_12";
"_13";
"_14"[label="_14 = { 5 }"];
"_15"[label="_15 = { 5 }"];
"_16";
"_17";
"_18"[label="_18 = { 5 }"];
"_19"[label="_19 = { 5 }"];
"_20";
"_21";
"_22";
"_23";
"_24";
"_25";
"_26"[label="_26 = { 5 }"];
"_27"[label="_27 = { 5 }"];
"_28";
"_29";
"_30";
"_82";
"_31";
"nbytes_74"[label="nbytes_74 = { 5 }"];
"_32"[label="_32 = { 5 }"];
"_33"[label="_33 = { 5 }"];
"_34";
"_35";
"_36";
"_37"[label="_37 = { 5 }"];
"_38";
"_39";
"_40";
"_41";
"_42"[label="_42 = { 5 }"];
"_43";
"MoveMemory";
"j_76"[label="j_76 = { 5 }"];
"_44"[label="_44 = { 5 }"];
"j_62"[label="j_62 = { 5 }"];
"_45";
"_46";
"_47";
"_48"[label="_48 = { 5 }"];
"_49";
"_50";
"_51"[label="_51 = { 5 }"];
"_52";
"_53";
"_54";
"_55"[label="_55 = { 5 }"];
"_56";
"_57";
"_58"[label="_58 = { 5 }"];
"_59";
"_60";
"_61";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*optrarray";
"*strarray";
"*nstrings";
"*i";
"*l";
"*_1";
"*_2";
"*_3";
"*_4";
"*_5";
"*_6";
"*_7";
"*direction_71";
"*_8";
"*adjamount_72";
"*_9";
"*_10";
"*_11";
"*_12";
"*_13";
"*_14";
"*_15";
"*_16";
"*_17";
"*_18";
"*_19";
"*_20";
"*_21";
"*_22";
"*_23";
"*_24";
"*_25";
"*_26";
"*_27";
"*_28";
"*_29";
"*_30";
"*_82";
"*_31";
"*nbytes_74";
"*_32";
"*_33";
"*_34";
"*_35";
"*_36";
"*_37";
"*_38";
"*_39";
"*_40";
"*_41";
"*_42";
"*_43";
"*MoveMemory";
"*j_76";
"*_44";
"*j_62";
"*_45";
"*_46";
"*_47";
"*_48";
"*_49";
"*_50";
"*_51";
"*_52";
"*_53";
"*_54";
"*_55";
"*_56";
"*_57";
"*j_80";
"*_58";
"*_59";
"*_60";
"*_61";

  // Edges in the constraint graph:
"nbytes_74" -> "ESCAPED";
"_36" -> "ESCAPED";
"_43" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"l" -> "_1";
"i" -> "_2";
"*_3" -> "_4";
"*_5" -> "_6";
"_6" -> "_7";
"_1" -> "direction_71";
"_7" -> "direction_71";
"direction_71" -> "_8";
"_8" -> "adjamount_72";
"nstrings" -> "_9";
"i" -> "_10";
"*_11" -> "_12";
"nstrings" -> "_14";
"_14" -> "_15";
"*_16" -> "_17";
"nstrings" -> "_18";
"_18" -> "_19";
"*_20" -> "_21";
"*_22" -> "_23";
"_23" -> "_24";
"_17" -> "_25";
"_24" -> "_25";
"i" -> "_26";
"_26" -> "_27";
"*_28" -> "_29";
"_29" -> "_30";
"_25" -> "_82";
"_29" -> "_82";
"_82" -> "_31";
"_82" -> "nbytes_74";
"i" -> "_32";
"_32" -> "_33";
"*_34" -> "_35";
"i" -> "_37";
"*_38" -> "_39";
"l" -> "_40";
"_39" -> "_41";
"_40" -> "_41";
"_41" -> "_42";
"i" -> "j_76";
"j_62" -> "_44";
"j_76" -> "j_62";
"j_62" -> "j_62";
"j_62" -> "j_62";
"*_45" -> "_46";
"adjamount_72" -> "_47";
"j_62" -> "_48";
"_46" -> "_50";
"_47" -> "_50";
"j_62" -> "_51";
"*_52" -> "_53";
"adjamount_72" -> "_54";
"j_62" -> "_55";
"_53" -> "_57";
"_54" -> "_57";
"i" -> "_58";
"*_59" -> "_60";
"NONLOCAL" -> "*ESCAPED";
"l" -> "*_13";
"_50" -> "*_49";
"_57" -> "*_56";
"l" -> "*_61";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"optrarray" [label="\N\n_3 = optrarray + UNKNOWN\l_5 = optrarray + UNKNOWN\l_11 = optrarray + UNKNOWN\l_13 = optrarray + UNKNOWN\l_16 = optrarray + UNKNOWN\l_20 = optrarray + UNKNOWN\l_22 = optrarray + UNKNOWN\l_28 = optrarray + UNKNOWN\l_34 = optrarray + UNKNOWN\l_36 = optrarray + UNKNOWN\l_38 = optrarray + UNKNOWN\l_43 = optrarray + UNKNOWN\l_45 = optrarray + UNKNOWN\l_49 = optrarray + UNKNOWN\l_52 = optrarray + UNKNOWN\l_56 = optrarray + UNKNOWN\l_59 = optrarray + UNKNOWN\l_61 = optrarray + UNKNOWN\l"];
"_3" [label="\N\n_4 = *_3\l"];
"_4";
"_5" [label="\N\n_6 = *_5\l"];
"_6";
"direction_71";
"_11" [label="\N\n_12 = *_11\l"];
"_12";
"_13" [label="\N\n*_13 = optrarray\l"];
"_16" [label="\N\n_17 = *_16\l"];
"_17";
"_20" [label="\N\n_21 = *_20\l"];
"_21";
"_22" [label="\N\n_23 = *_22\l"];
"_23";
"_25";
"_28" [label="\N\n_29 = *_28\l"];
"_29";
"_82";
"nbytes_74";
"_34" [label="\N\n_35 = *_34\l"];
"_35";
"_36";
"_38" [label="\N\n_39 = *_38\l"];
"_39";
"_41";
"_43";
"MoveMemory";
"_45" [label="\N\n_46 = *_45\l"];
"_46";
"_49" [label="\N\n*_49 = _50\l"];
"_50";
"_52" [label="\N\n_53 = *_52\l"];
"_53";
"_56" [label="\N\n*_56 = _57\l"];
"_57";
"_59" [label="\N\n_60 = *_59\l"];
"_60";
"_61" [label="\N\n*_61 = optrarray\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "_22";
"STOREDANYTHING" -> "_28";
"STOREDANYTHING" -> "_34";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_38";
"STOREDANYTHING" -> "_43";
"STOREDANYTHING" -> "_45";
"STOREDANYTHING" -> "_49";
"STOREDANYTHING" -> "_52";
"STOREDANYTHING" -> "_56";
"STOREDANYTHING" -> "_59";
"STOREDANYTHING" -> "_61";
"optrarray" -> "direction_71";
"optrarray" -> "_41";
"_6" -> "direction_71";
"direction_71" -> "_50";
"direction_71" -> "_57";
"_17" -> "_25";
"_23" -> "_25";
"_25" -> "_82";
"_29" -> "_82";
"_82" -> "nbytes_74";
"nbytes_74" -> "ESCAPED";
"_36" -> "ESCAPED";
"_39" -> "_41";
"_43" -> "ESCAPED";
"_46" -> "_50";
"_53" -> "_57";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"optrarray" [label="\N\n_3 = optrarray + UNKNOWN\l_5 = optrarray + UNKNOWN\l_11 = optrarray + UNKNOWN\l_13 = optrarray + UNKNOWN\l_16 = optrarray + UNKNOWN\l_20 = optrarray + UNKNOWN\l_22 = optrarray + UNKNOWN\l_28 = optrarray + UNKNOWN\l_34 = optrarray + UNKNOWN\l_36 = optrarray + UNKNOWN\l_38 = optrarray + UNKNOWN\l_43 = optrarray + UNKNOWN\l_45 = optrarray + UNKNOWN\l_49 = optrarray + UNKNOWN\l_52 = optrarray + UNKNOWN\l_56 = optrarray + UNKNOWN\l_59 = optrarray + UNKNOWN\l_61 = optrarray + UNKNOWN\l"];
"_3" [label="\N\n_4 = *_3\l"];
"_4";
"_5" [label="\N\n_6 = *_5\l"];
"_6";
"direction_71";
"_11" [label="\N\n_12 = *_11\l"];
"_12";
"_13" [label="\N\n*_13 = optrarray\l"];
"_16" [label="\N\n_17 = *_16\l"];
"_17";
"_20" [label="\N\n_21 = *_20\l"];
"_21";
"_22" [label="\N\n_23 = *_22\l"];
"_23";
"_25";
"_28" [label="\N\n_29 = *_28\l"];
"_29";
"_82";
"nbytes_74";
"_34" [label="\N\n_35 = *_34\l"];
"_35";
"_36";
"_38" [label="\N\n_39 = *_38\l"];
"_39";
"_41";
"_43";
"MoveMemory";
"_45" [label="\N\n_46 = *_45\l"];
"_46";
"_49" [label="\N\n*_49 = _50\l"];
"_50";
"_52" [label="\N\n_53 = *_52\l"];
"_53";
"_56" [label="\N\n*_56 = _57\l"];
"_57";
"_59" [label="\N\n_60 = *_59\l"];
"_60";
"_61" [label="\N\n*_61 = optrarray\l"];

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_11";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "_22";
"STOREDANYTHING" -> "_28";
"STOREDANYTHING" -> "_34";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_38";
"STOREDANYTHING" -> "_43";
"STOREDANYTHING" -> "_45";
"STOREDANYTHING" -> "_49";
"STOREDANYTHING" -> "_52";
"STOREDANYTHING" -> "_56";
"STOREDANYTHING" -> "_59";
"STOREDANYTHING" -> "_61";
"optrarray" -> "ESCAPED";
"optrarray" -> "direction_71";
"optrarray" -> "_41";
"_6" -> "direction_71";
"direction_71" -> "_50";
"direction_71" -> "_57";
"_17" -> "_25";
"_23" -> "_25";
"_25" -> "_82";
"_29" -> "_82";
"_82" -> "nbytes_74";
"nbytes_74" -> "ESCAPED";
"_36" -> "ESCAPED";
"_39" -> "_41";
"_43" -> "ESCAPED";
"_46" -> "_50";
"_50" -> "ESCAPED";
"_53" -> "_57";
"_57" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
optrarray = { NONLOCAL }
strarray = { NONLOCAL } same as optrarray
nstrings = { NONLOCAL } same as optrarray
i = { NONLOCAL } same as optrarray
l = { NONLOCAL } same as optrarray
_1 = { NONLOCAL } same as optrarray
_2 = { NONLOCAL } same as optrarray
_3 = { NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as _6
direction_71 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL } same as direction_71
adjamount_72 = { ESCAPED NONLOCAL } same as direction_71
_9 = { NONLOCAL } same as optrarray
_10 = { NONLOCAL } same as optrarray
_11 = { NONLOCAL }
_12 = { ESCAPED NONLOCAL }
_13 = { NONLOCAL }
_14 = { NONLOCAL } same as optrarray
_15 = { NONLOCAL } same as optrarray
_16 = { NONLOCAL }
_17 = { ESCAPED NONLOCAL }
_18 = { NONLOCAL } same as optrarray
_19 = { NONLOCAL } same as optrarray
_20 = { NONLOCAL }
_21 = { ESCAPED NONLOCAL }
_22 = { NONLOCAL }
_23 = { ESCAPED NONLOCAL }
_24 = { ESCAPED NONLOCAL } same as _23
_25 = { ESCAPED NONLOCAL }
_26 = { NONLOCAL } same as optrarray
_27 = { NONLOCAL } same as optrarray
_28 = { NONLOCAL }
_29 = { ESCAPED NONLOCAL }
_30 = { ESCAPED NONLOCAL } same as _29
_82 = { ESCAPED NONLOCAL }
_31 = { ESCAPED NONLOCAL } same as _82
nbytes_74 = { ESCAPED NONLOCAL }
_32 = { NONLOCAL } same as optrarray
_33 = { NONLOCAL } same as optrarray
_34 = { NONLOCAL }
_35 = { ESCAPED NONLOCAL }
_36 = { NONLOCAL }
_37 = { NONLOCAL } same as optrarray
_38 = { NONLOCAL }
_39 = { ESCAPED NONLOCAL }
_40 = { NONLOCAL } same as optrarray
_41 = { ESCAPED NONLOCAL }
_42 = { ESCAPED NONLOCAL } same as _41
_43 = { NONLOCAL }
MoveMemory = { }
j_76 = { NONLOCAL } same as optrarray
_44 = { NONLOCAL } same as optrarray
j_62 = { NONLOCAL } same as optrarray
_45 = { NONLOCAL }
_46 = { ESCAPED NONLOCAL }
_47 = { ESCAPED NONLOCAL } same as direction_71
_48 = { NONLOCAL } same as optrarray
_49 = { NONLOCAL }
_50 = { ESCAPED NONLOCAL }
_51 = { NONLOCAL } same as optrarray
_52 = { NONLOCAL }
_53 = { ESCAPED NONLOCAL }
_54 = { ESCAPED NONLOCAL } same as direction_71
_55 = { NONLOCAL } same as optrarray
_56 = { NONLOCAL }
_57 = { ESCAPED NONLOCAL }
j_80 = { NONLOCAL } same as optrarray
_58 = { NONLOCAL } same as optrarray
_59 = { NONLOCAL }
_60 = { ESCAPED NONLOCAL }
_61 = { NONLOCAL }


Alias information for stradjust

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to NULL, points-to vars: { }
_22, points-to non-local, points-to NULL, points-to vars: { }
_28, points-to non-local, points-to NULL, points-to vars: { }
_34, points-to non-local, points-to NULL, points-to vars: { }
_36, points-to non-local, points-to NULL, points-to vars: { }
_38, points-to non-local, points-to NULL, points-to vars: { }
_43, points-to non-local, points-to NULL, points-to vars: { }
_45, points-to non-local, points-to NULL, points-to vars: { }
_49, points-to non-local, points-to NULL, points-to vars: { }
_52, points-to non-local, points-to NULL, points-to vars: { }
_56, points-to non-local, points-to NULL, points-to vars: { }
_59, points-to non-local, points-to NULL, points-to vars: { }
_61, points-to non-local, points-to NULL, points-to vars: { }
optrarray_68(D), points-to non-local, points-to NULL, points-to vars: { }
strarray_70(D), points-to non-local, points-to NULL, points-to vars: { }

stradjust (farulong * optrarray, faruchar * strarray, long unsigned int nstrings, long unsigned int i, unsigned char l)
{
  unsigned char adjamount;
  int direction;
  long unsigned int j;
  long unsigned int nbytes;
  int _1;
  long unsigned int _2;
  farulong * _3;
  long unsigned int _4;
  faruchar * _5;
  unsigned char _6;
  int _7;
  int _8;
  long unsigned int _9;
  long unsigned int _10;
  farulong * _11;
  long unsigned int _12;
  faruchar * _13;
  long unsigned int _14;
  sizetype _15;
  farulong * _16;
  long unsigned int _17;
  long unsigned int _18;
  sizetype _19;
  farulong * _20;
  long unsigned int _21;
  faruchar * _22;
  unsigned char _23;
  long unsigned int _24;
  long unsigned int _25;
  sizetype _26;
  sizetype _27;
  farulong * _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  sizetype _32;
  sizetype _33;
  farulong * _34;
  long unsigned int _35;
  faruchar * _36;
  long unsigned int _37;
  farulong * _38;
  long unsigned int _39;
  sizetype _40;
  sizetype _41;
  sizetype _42;
  faruchar * _43;
  long unsigned int _44;
  farulong * _45;
  long unsigned int _46;
  long unsigned int _47;
  long unsigned int _48;
  farulong * _49;
  long unsigned int _50;
  long unsigned int _51;
  farulong * _52;
  long unsigned int _53;
  long unsigned int _54;
  long unsigned int _55;
  farulong * _56;
  long unsigned int _57;
  long unsigned int _58;
  farulong * _59;
  long unsigned int _60;
  faruchar * _61;
  long unsigned int _82;

  <bb 2> [0.00%]:
  _1 = (int) l_66(D);
  _2 = i_67(D) * 8;
  _3 = optrarray_68(D) + _2;
  _4 = *_3;
  _5 = strarray_70(D) + _4;
  _6 = *_5;
  _7 = (int) _6;
  direction_71 = _1 - _7;
  _8 = ABS_EXPR <direction_71>;
  adjamount_72 = (unsigned char) _8;
  _9 = nstrings_73(D) + 18446744073709551615;
  if (_9 == i_67(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _10 = i_67(D) * 8;
  _11 = optrarray_68(D) + _10;
  _12 = *_11;
  _13 = strarray_70(D) + _12;
  *_13 = l_66(D);
  goto <bb 11>; [0.00%]

  <bb 4> [0.00%]:
  _14 = nstrings_73(D) * 8;
  _15 = _14 + 18446744073709551608;
  _16 = optrarray_68(D) + _15;
  _17 = *_16;
  _18 = nstrings_73(D) * 8;
  _19 = _18 + 18446744073709551608;
  _20 = optrarray_68(D) + _19;
  _21 = *_20;
  _22 = strarray_70(D) + _21;
  _23 = *_22;
  _24 = (long unsigned int) _23;
  _25 = _17 + _24;
  _26 = i_67(D) + 1;
  _27 = _26 * 8;
  _28 = optrarray_68(D) + _27;
  _29 = *_28;
  _30 = -_29;
  _82 = _25 - _29;
  _31 = _82;
  nbytes_74 = _82 + 1;
  _32 = i_67(D) + 1;
  _33 = _32 * 8;
  _34 = optrarray_68(D) + _33;
  _35 = *_34;
  _36 = strarray_70(D) + _35;
  _37 = i_67(D) * 8;
  _38 = optrarray_68(D) + _37;
  _39 = *_38;
  _40 = (sizetype) l_66(D);
  _41 = _39 + _40;
  _42 = _41 + 1;
  _43 = strarray_70(D) + _42;
  MoveMemory (_43, _36, nbytes_74);
  j_76 = i_67(D) + 1;
  goto <bb 9>; [0.00%]

  <bb 5> [0.00%]:
  if (direction_71 < 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _44 = j_62 * 8;
  _45 = optrarray_68(D) + _44;
  _46 = *_45;
  _47 = (long unsigned int) adjamount_72;
  _48 = j_62 * 8;
  _49 = optrarray_68(D) + _48;
  _50 = _46 - _47;
  *_49 = _50;
  goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  _51 = j_62 * 8;
  _52 = optrarray_68(D) + _51;
  _53 = *_52;
  _54 = (long unsigned int) adjamount_72;
  _55 = j_62 * 8;
  _56 = optrarray_68(D) + _55;
  _57 = _53 + _54;
  *_56 = _57;

  <bb 8> [0.00%]:
  j_80 = j_62 + 1;

  <bb 9> [0.00%]:
  # j_62 = PHI <j_76(4), j_80(8)>
  if (j_62 < nstrings_73(D))
    goto <bb 5>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  _58 = i_67(D) * 8;
  _59 = optrarray_68(D) + _58;
  _60 = *_59;
  _61 = strarray_70(D) + _60;
  *_61 = l_66(D);

  <bb 11> [0.00%]:
  return;

}



;; Function str_is_less (str_is_less, funcdef_no=62, decl_uid=4535, cgraph_uid=62, symbol_order=87)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
optrarray = &NONLOCAL
strarray = &NONLOCAL
numstrings = &NONLOCAL
a = &NONLOCAL
b = &NONLOCAL
_1 = a
_1 = &NONLOCAL
_2 = optrarray + UNKNOWN
_3 = *_2
_4 = strarray + UNKNOWN
_5 = *_4
slen_42 = _5
_6 = b
_6 = &NONLOCAL
_7 = optrarray + UNKNOWN
_8 = *_7
_9 = strarray + UNKNOWN
_10 = *_9
_11 = _10
_12 = b
_12 = &NONLOCAL
_13 = optrarray + UNKNOWN
_14 = *_13
_15 = strarray + UNKNOWN
_16 = *_15
slen_44 = _16
slen_36 = slen_42
slen_36 = slen_44
_17 = slen_36
_18 = b
_18 = &NONLOCAL
_19 = optrarray + UNKNOWN
_20 = *_19
_21 = strarray + UNKNOWN
_22 = a
_22 = &NONLOCAL
_23 = optrarray + UNKNOWN
_24 = *_23
_25 = strarray + UNKNOWN
CALLUSED(42) = CALLUSED(42) + UNKNOWN
CALLUSED(42) = *CALLUSED(42) + UNKNOWN
CALLUSED(42) = _25
CALLUSED(42) = _21
CALLUSED(42) = _17
slen_45 = CALLUSED(42)
slen_45 = NONLOCAL
_26 = a
_26 = &NONLOCAL
_27 = optrarray + UNKNOWN
_28 = *_27
_29 = strarray + UNKNOWN
_30 = *_29
_31 = b
_31 = &NONLOCAL
_32 = optrarray + UNKNOWN
_33 = *_32
_34 = strarray + UNKNOWN
_35 = *_34
_37 = &NONLOCAL
_37 = &NULL
_37 = &NONLOCAL
_37 = &NULL
ESCAPED = _37

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"optrarray"[label="optrarray = { 5 }"];
"strarray"[label="strarray = { 5 }"];
"numstrings"[label="numstrings = { 5 }"];
"a"[label="a = { 5 }"];
"b"[label="b = { 5 }"];
"_1"[label="_1 = { 5 }"];
"_2";
"_3";
"_4";
"_5";
"slen_42";
"_6"[label="_6 = { 5 }"];
"_7";
"_8";
"_9";
"_10";
"_11";
"_12"[label="_12 = { 5 }"];
"_13";
"_14";
"_15";
"_16";
"slen_44";
"slen_36";
"_17";
"_18"[label="_18 = { 5 }"];
"_19";
"_20";
"_21";
"_22"[label="_22 = { 5 }"];
"_23";
"_24";
"_25";
"strncmp";
"CALLUSED(42)";
"CALLCLOBBERED(43)";
"slen_45";
"_26"[label="_26 = { 5 }"];
"_27";
"_28";
"_29";
"_30";
"_31"[label="_31 = { 5 }"];
"_32";
"_33";
"_34";
"_35";
"_37"[label="_37 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*optrarray";
"*strarray";
"*numstrings";
"*a";
"*b";
"*_1";
"*_2";
"*_3";
"*_4";
"*_5";
"*slen_42";
"*_6";
"*_7";
"*_8";
"*_9";
"*_10";
"*_11";
"*_12";
"*_13";
"*_14";
"*_15";
"*_16";
"*slen_44";
"*slen_36";
"*_17";
"*_18";
"*_19";
"*_20";
"*_21";
"*_22";
"*_23";
"*_24";
"*_25";
"*strncmp";
"*CALLUSED(42)";
"*CALLCLOBBERED(43)";
"*slen_45";
"*_26";
"*_27";
"*_28";
"*_29";
"*_30";
"*_31";
"*_32";
"*_33";
"*_34";
"*_35";
"*_37";

  // Edges in the constraint graph:
"_37" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"a" -> "_1";
"*_2" -> "_3";
"*_4" -> "_5";
"_5" -> "slen_42";
"b" -> "_6";
"*_7" -> "_8";
"*_9" -> "_10";
"_10" -> "_11";
"b" -> "_12";
"*_13" -> "_14";
"*_15" -> "_16";
"_16" -> "slen_44";
"slen_42" -> "slen_36";
"slen_44" -> "slen_36";
"slen_36" -> "_17";
"b" -> "_18";
"*_19" -> "_20";
"a" -> "_22";
"*_23" -> "_24";
"_17" -> "CALLUSED(42)";
"_21" -> "CALLUSED(42)";
"_25" -> "CALLUSED(42)";
"NONLOCAL" -> "slen_45";
"CALLUSED(42)" -> "slen_45";
"a" -> "_26";
"*_27" -> "_28";
"*_29" -> "_30";
"b" -> "_31";
"*_32" -> "_33";
"*_34" -> "_35";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"optrarray" [label="\N\n_2 = optrarray + UNKNOWN\l_4 = optrarray + UNKNOWN\l_7 = optrarray + UNKNOWN\l_9 = optrarray + UNKNOWN\l_13 = optrarray + UNKNOWN\l_15 = optrarray + UNKNOWN\l_19 = optrarray + UNKNOWN\l_21 = optrarray + UNKNOWN\l_23 = optrarray + UNKNOWN\l_25 = optrarray + UNKNOWN\l_27 = optrarray + UNKNOWN\l_29 = optrarray + UNKNOWN\l_32 = optrarray + UNKNOWN\l_34 = optrarray + UNKNOWN\l"];
"_2" [label="\N\n_3 = *_2\l"];
"_3";
"_4" [label="\N\n_5 = *_4\l"];
"_5";
"_7" [label="\N\n_8 = *_7\l"];
"_8";
"_9" [label="\N\n_10 = *_9\l"];
"_10";
"_13" [label="\N\n_14 = *_13\l"];
"_14";
"_15" [label="\N\n_16 = *_15\l"];
"_16";
"slen_36";
"_19" [label="\N\n_20 = *_19\l"];
"_20";
"_21";
"_23" [label="\N\n_24 = *_23\l"];
"_24";
"_25";
"strncmp";
"CALLUSED(42)" [label="\N\nCALLUSED(42) = CALLUSED(42) + UNKNOWN\lCALLUSED(42) = *CALLUSED(42) + UNKNOWN\l"];
"CALLCLOBBERED(43)";
"slen_45";
"_27" [label="\N\n_28 = *_27\l"];
"_28";
"_29" [label="\N\n_30 = *_29\l"];
"_30";
"_32" [label="\N\n_33 = *_32\l"];
"_33";
"_34" [label="\N\n_35 = *_34\l"];
"_35";
"_37";

  // Edges in the constraint graph:
"NONLOCAL" -> "slen_45";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "_23";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "CALLUSED(42)";
"STOREDANYTHING" -> "_27";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "_32";
"STOREDANYTHING" -> "_34";
"_5" -> "slen_36";
"_16" -> "slen_36";
"slen_36" -> "CALLUSED(42)";
"_21" -> "CALLUSED(42)";
"_25" -> "CALLUSED(42)";
"CALLUSED(42)" -> "slen_45";
"_37" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"optrarray" [label="\N\n_2 = optrarray + UNKNOWN\l_4 = optrarray + UNKNOWN\l_7 = optrarray + UNKNOWN\l_9 = optrarray + UNKNOWN\l_13 = optrarray + UNKNOWN\l_15 = optrarray + UNKNOWN\l_19 = optrarray + UNKNOWN\l_21 = optrarray + UNKNOWN\l_23 = optrarray + UNKNOWN\l_25 = optrarray + UNKNOWN\l_27 = optrarray + UNKNOWN\l_29 = optrarray + UNKNOWN\l_32 = optrarray + UNKNOWN\l_34 = optrarray + UNKNOWN\l"];
"_2" [label="\N\n_3 = *_2\l"];
"_3";
"_4" [label="\N\n_5 = *_4\l"];
"_5";
"_7" [label="\N\n_8 = *_7\l"];
"_8";
"_9" [label="\N\n_10 = *_9\l"];
"_10";
"_13" [label="\N\n_14 = *_13\l"];
"_14";
"_15" [label="\N\n_16 = *_15\l"];
"_16";
"slen_36";
"_19" [label="\N\n_20 = *_19\l"];
"_20";
"_21";
"_23" [label="\N\n_24 = *_23\l"];
"_24";
"_25";
"strncmp";
"CALLUSED(42)" [label="\N\nCALLUSED(42) = CALLUSED(42) + UNKNOWN\lCALLUSED(42) = *CALLUSED(42) + UNKNOWN\l"];
"CALLCLOBBERED(43)";
"slen_45";
"_27" [label="\N\n_28 = *_27\l"];
"_28";
"_29" [label="\N\n_30 = *_29\l"];
"_30";
"_32" [label="\N\n_33 = *_32\l"];
"_33";
"_34" [label="\N\n_35 = *_34\l"];
"_35";
"_37";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "slen_45";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "_4";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_9";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "_23";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "CALLUSED(42)";
"STOREDANYTHING" -> "_27";
"STOREDANYTHING" -> "_29";
"STOREDANYTHING" -> "_32";
"STOREDANYTHING" -> "_34";
"_5" -> "slen_36";
"_16" -> "slen_36";
"slen_36" -> "CALLUSED(42)";
"_21" -> "CALLUSED(42)";
"_25" -> "CALLUSED(42)";
"CALLUSED(42)" -> "slen_45";
"_37" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
optrarray = { NONLOCAL }
strarray = { NONLOCAL } same as optrarray
numstrings = { NONLOCAL } same as optrarray
a = { NONLOCAL } same as optrarray
b = { NONLOCAL } same as optrarray
_1 = { NONLOCAL } same as optrarray
_2 = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { NONLOCAL }
_5 = { ESCAPED NONLOCAL }
slen_42 = { ESCAPED NONLOCAL } same as _5
_6 = { NONLOCAL } same as optrarray
_7 = { NONLOCAL }
_8 = { ESCAPED NONLOCAL }
_9 = { NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as _10
_12 = { NONLOCAL } same as optrarray
_13 = { NONLOCAL }
_14 = { ESCAPED NONLOCAL }
_15 = { NONLOCAL }
_16 = { ESCAPED NONLOCAL }
slen_44 = { ESCAPED NONLOCAL } same as _16
slen_36 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL } same as slen_36
_18 = { NONLOCAL } same as optrarray
_19 = { NONLOCAL }
_20 = { ESCAPED NONLOCAL }
_21 = { NONLOCAL }
_22 = { NONLOCAL } same as optrarray
_23 = { NONLOCAL }
_24 = { ESCAPED NONLOCAL }
_25 = { NONLOCAL }
strncmp = { }
CALLUSED(42) = { ESCAPED NONLOCAL }
CALLCLOBBERED(43) = { }
slen_45 = { ESCAPED NONLOCAL }
_26 = { NONLOCAL } same as optrarray
_27 = { NONLOCAL }
_28 = { ESCAPED NONLOCAL }
_29 = { NONLOCAL }
_30 = { ESCAPED NONLOCAL }
_31 = { NONLOCAL } same as optrarray
_32 = { NONLOCAL }
_33 = { ESCAPED NONLOCAL }
_34 = { NONLOCAL }
_35 = { ESCAPED NONLOCAL }
_37 = { NULL NONLOCAL }


Alias information for str_is_less

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to NULL, points-to vars: { }
_19, points-to non-local, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to NULL, points-to vars: { }
_23, points-to non-local, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to NULL, points-to vars: { }
_27, points-to non-local, points-to NULL, points-to vars: { }
_29, points-to non-local, points-to NULL, points-to vars: { }
_32, points-to non-local, points-to NULL, points-to vars: { }
_34, points-to non-local, points-to NULL, points-to vars: { }
optrarray_39(D), points-to non-local, points-to NULL, points-to vars: { }
strarray_41(D), points-to non-local, points-to NULL, points-to vars: { }

str_is_less (farulong * optrarray, faruchar * strarray, long unsigned int numstrings, long unsigned int a, long unsigned int b)
{
  int slen;
  long unsigned int _1;
  farulong * _2;
  long unsigned int _3;
  faruchar * _4;
  unsigned char _5;
  long unsigned int _6;
  farulong * _7;
  long unsigned int _8;
  faruchar * _9;
  unsigned char _10;
  int _11;
  long unsigned int _12;
  farulong * _13;
  long unsigned int _14;
  faruchar * _15;
  unsigned char _16;
  long unsigned int _17;
  long unsigned int _18;
  farulong * _19;
  long unsigned int _20;
  faruchar * _21;
  long unsigned int _22;
  farulong * _23;
  long unsigned int _24;
  faruchar * _25;
  long unsigned int _26;
  farulong * _27;
  long unsigned int _28;
  faruchar * _29;
  unsigned char _30;
  long unsigned int _31;
  farulong * _32;
  long unsigned int _33;
  faruchar * _34;
  unsigned char _35;
  int _37;

  <bb 2> [0.00%]:
  _1 = a_38(D) * 8;
  _2 = optrarray_39(D) + _1;
  _3 = *_2;
  _4 = strarray_41(D) + _3;
  _5 = *_4;
  slen_42 = (int) _5;
  _6 = b_43(D) * 8;
  _7 = optrarray_39(D) + _6;
  _8 = *_7;
  _9 = strarray_41(D) + _8;
  _10 = *_9;
  _11 = (int) _10;
  if (_5 > _10)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _12 = b_43(D) * 8;
  _13 = optrarray_39(D) + _12;
  _14 = *_13;
  _15 = strarray_41(D) + _14;
  _16 = *_15;
  slen_44 = (int) _16;

  <bb 4> [0.00%]:
  # slen_36 = PHI <slen_42(2), slen_44(3)>
  _17 = (long unsigned int) slen_36;
  _18 = b_43(D) * 8;
  _19 = optrarray_39(D) + _18;
  _20 = *_19;
  _21 = strarray_41(D) + _20;
  _22 = a_38(D) * 8;
  _23 = optrarray_39(D) + _22;
  _24 = *_23;
  _25 = strarray_41(D) + _24;
  slen_45 = strncmp (_25, _21, _17);
  if (slen_45 == 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 5> [0.00%]:
  _26 = a_38(D) * 8;
  _27 = optrarray_39(D) + _26;
  _28 = *_27;
  _29 = strarray_41(D) + _28;
  _30 = *_29;
  _31 = b_43(D) * 8;
  _32 = optrarray_39(D) + _31;
  _33 = *_32;
  _34 = strarray_41(D) + _33;
  _35 = *_34;
  if (_30 > _35)
    goto <bb 9>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  goto <bb 9>; [0.00%]

  <bb 7> [0.00%]:
  if (slen_45 < 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:

  <bb 9> [0.00%]:
  # _37 = PHI <1(5), 0(6), 1(7), 0(8)>
  return _37;

}



;; Function strsift (strsift, funcdef_no=63, decl_uid=4541, cgraph_uid=63, symbol_order=88)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
optrarray = &NONLOCAL
strarray = &NONLOCAL
numstrings = &NONLOCAL
i = &NONLOCAL
j = &NONLOCAL
k_48 = i_40
k_48 = &NONLOCAL
_1 = k_48
_1 = &NONLOCAL
CALLUSED(17) = CALLUSED(17) + UNKNOWN
CALLUSED(17) = *CALLUSED(17) + UNKNOWN
CALLUSED(17) = optrarray
CALLUSED(17) = strarray
CALLUSED(17) = k_48
CALLUSED(17) = _1
_2 = CALLUSED(17)
_2 = NONLOCAL
k_53 = k_48
k_53 = &NONLOCAL
k_41 = k_48
k_41 = k_48
k_41 = k_53
CALLUSED(22) = CALLUSED(22) + UNKNOWN
CALLUSED(22) = *CALLUSED(22) + UNKNOWN
CALLUSED(22) = optrarray
CALLUSED(22) = strarray
CALLUSED(22) = i_40
CALLUSED(22) = k_41
_3 = CALLUSED(22)
_3 = NONLOCAL
_4 = k_41
_4 = &NONLOCAL
_5 = optrarray + UNKNOWN
_6 = *_5
_7 = strarray + UNKNOWN
tlen_56 = *_7
_8 = tlen_56
_9 = _8
_9 = &NONLOCAL
_10 = _9
_11 = k_41
_11 = &NONLOCAL
_12 = optrarray + UNKNOWN
_13 = *_12
_14 = strarray + UNKNOWN
ESCAPED = &temp
ESCAPED = _14
ESCAPED = _10
_15 = i_40
_15 = &NONLOCAL
_16 = optrarray + UNKNOWN
_17 = *_16
_18 = strarray + UNKNOWN
tlen_58 = *_18
_19 = tlen_58
ESCAPED = optrarray
ESCAPED = strarray
ESCAPED = numstrings
ESCAPED = k_41
ESCAPED = _19
_20 = tlen_58
_21 = _20
_21 = &NONLOCAL
_22 = _21
_23 = i_40
_23 = &NONLOCAL
_24 = optrarray + UNKNOWN
_25 = *_24
_26 = strarray + UNKNOWN
_27 = k_41
_27 = &NONLOCAL
_28 = optrarray + UNKNOWN
_29 = *_28
_30 = strarray + UNKNOWN
ESCAPED = _30
ESCAPED = _26
ESCAPED = _22
tlen_61 = temp
_31 = tlen_61
ESCAPED = optrarray
ESCAPED = strarray
ESCAPED = numstrings
ESCAPED = i_40
ESCAPED = _31
_32 = tlen_61
_33 = _32
_33 = &NONLOCAL
_34 = _33
_35 = i_40
_35 = &NONLOCAL
_36 = optrarray + UNKNOWN
_37 = *_36
_38 = strarray + UNKNOWN
ESCAPED = _38
ESCAPED = &temp
ESCAPED = _34
i_55 = j
i_55 = &NONLOCAL
i_40 = i
i_40 = k_41
i_40 = i_55
_39 = i_40
_39 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 38 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"optrarray"[label="optrarray = { 5 }"];
"strarray"[label="strarray = { 5 }"];
"numstrings"[label="numstrings = { 5 }"];
"i"[label="i = { 5 }"];
"j"[label="j = { 5 }"];
"i_40"[label="i_40 = { 5 }"];
"_1"[label="_1 = { 5 }"];
"str_is_less.isra.2";
"CALLUSED(17)";
"CALLCLOBBERED(18)";
"_2";
"CALLUSED(22)";
"CALLCLOBBERED(23)";
"_3";
"_4"[label="_4 = { 5 }"];
"_5";
"_6";
"_7";
"tlen_56";
"_8";
"_9"[label="_9 = { 5 }"];
"_10";
"_11"[label="_11 = { 5 }"];
"_12";
"_13";
"_14";
"MoveMemory";
"temp";
"_15"[label="_15 = { 5 }"];
"_16";
"_17";
"_18";
"tlen_58";
"_19";
"stradjust";
"_20";
"_21"[label="_21 = { 5 }"];
"_22";
"_23"[label="_23 = { 5 }"];
"_24";
"_25";
"_26";
"_27"[label="_27 = { 5 }"];
"_28";
"_29";
"_30";
"tlen_61";
"_31";
"_32";
"_33"[label="_33 = { 5 }"];
"_34";
"_35"[label="_35 = { 5 }"];
"_36";
"_37";
"_38";
"i_55"[label="i_55 = { 5 }"];
"_39"[label="_39 = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*optrarray";
"*strarray";
"*numstrings";
"*i";
"*j";
"*i_40";
"*_1";
"*str_is_less.isra.2";
"*CALLUSED(17)";
"*CALLCLOBBERED(18)";
"*_2";
"*CALLUSED(22)";
"*CALLCLOBBERED(23)";
"*_3";
"*_4";
"*_5";
"*_6";
"*_7";
"*tlen_56";
"*_8";
"*_9";
"*_10";
"*_11";
"*_12";
"*_13";
"*_14";
"*MoveMemory";
"*temp";
"*_15";
"*_16";
"*_17";
"*_18";
"*tlen_58";
"*_19";
"*stradjust";
"*_20";
"*_21";
"*_22";
"*_23";
"*_24";
"*_25";
"*_26";
"*_27";
"*_28";
"*_29";
"*_30";
"*tlen_61";
"*_31";
"*_32";
"*_33";
"*_34";
"*_35";
"*_36";
"*_37";
"*_38";
"*i_55";
"*_39";

  // Edges in the constraint graph:
"optrarray" -> "ESCAPED";
"strarray" -> "ESCAPED";
"numstrings" -> "ESCAPED";
"i_40" -> "ESCAPED";
"i_40" -> "ESCAPED";
"_10" -> "ESCAPED";
"_14" -> "ESCAPED";
"_19" -> "ESCAPED";
"_22" -> "ESCAPED";
"_26" -> "ESCAPED";
"_30" -> "ESCAPED";
"_31" -> "ESCAPED";
"_34" -> "ESCAPED";
"_38" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"i" -> "i_40";
"i_40" -> "i_40";
"i_40" -> "i_40";
"i_40" -> "i_40";
"i_40" -> "i_40";
"i_55" -> "i_40";
"i_40" -> "_1";
"optrarray" -> "CALLUSED(17)";
"strarray" -> "CALLUSED(17)";
"i_40" -> "CALLUSED(17)";
"_1" -> "CALLUSED(17)";
"NONLOCAL" -> "_2";
"CALLUSED(17)" -> "_2";
"optrarray" -> "CALLUSED(22)";
"strarray" -> "CALLUSED(22)";
"i_40" -> "CALLUSED(22)";
"i_40" -> "CALLUSED(22)";
"NONLOCAL" -> "_3";
"CALLUSED(22)" -> "_3";
"i_40" -> "_4";
"*_5" -> "_6";
"*_7" -> "tlen_56";
"tlen_56" -> "_8";
"_8" -> "_9";
"_9" -> "_10";
"i_40" -> "_11";
"*_12" -> "_13";
"i_40" -> "_15";
"*_16" -> "_17";
"*_18" -> "tlen_58";
"tlen_58" -> "_19";
"tlen_58" -> "_20";
"_20" -> "_21";
"_21" -> "_22";
"i_40" -> "_23";
"*_24" -> "_25";
"i_40" -> "_27";
"*_28" -> "_29";
"temp" -> "tlen_61";
"tlen_61" -> "_31";
"tlen_61" -> "_32";
"_32" -> "_33";
"_33" -> "_34";
"i_40" -> "_35";
"*_36" -> "_37";
"j" -> "i_55";
"i_40" -> "_39";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"optrarray" [label="\N\n_5 = optrarray + UNKNOWN\l_7 = optrarray + UNKNOWN\l_12 = optrarray + UNKNOWN\l_14 = optrarray + UNKNOWN\l_16 = optrarray + UNKNOWN\l_18 = optrarray + UNKNOWN\l_24 = optrarray + UNKNOWN\l_26 = optrarray + UNKNOWN\l_28 = optrarray + UNKNOWN\l_30 = optrarray + UNKNOWN\l_36 = optrarray + UNKNOWN\l_38 = optrarray + UNKNOWN\l"];
"str_is_less.isra.2";
"CALLUSED(17)" [label="\N\nCALLUSED(17) = CALLUSED(17) + UNKNOWN\lCALLUSED(17) = *CALLUSED(17) + UNKNOWN\l"];
"CALLCLOBBERED(18)";
"_2";
"CALLUSED(22)" [label="\N\nCALLUSED(22) = CALLUSED(22) + UNKNOWN\lCALLUSED(22) = *CALLUSED(22) + UNKNOWN\l"];
"CALLCLOBBERED(23)";
"_3";
"_5" [label="\N\n_6 = *_5\l"];
"_6";
"_7" [label="\N\ntlen_56 = *_7\l"];
"tlen_56";
"_9";
"_12" [label="\N\n_13 = *_12\l"];
"_13";
"_14";
"MoveMemory";
"_16" [label="\N\n_17 = *_16\l"];
"_17";
"_18" [label="\N\ntlen_58 = *_18\l"];
"tlen_58";
"stradjust";
"_21";
"_24" [label="\N\n_25 = *_24\l"];
"_25";
"_26";
"_28" [label="\N\n_29 = *_28\l"];
"_29";
"_30";
"tlen_61";
"_33";
"_36" [label="\N\n_37 = *_36\l"];
"_37";
"_38";

  // Edges in the constraint graph:
"NONLOCAL" -> "_2";
"NONLOCAL" -> "_3";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(17)";
"STOREDANYTHING" -> "CALLUSED(22)";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_12";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "tlen_61";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_18";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "_26";
"STOREDANYTHING" -> "_28";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_38";
"optrarray" -> "ESCAPED";
"optrarray" -> "CALLUSED(17)";
"optrarray" -> "CALLUSED(22)";
"CALLUSED(17)" -> "_2";
"CALLUSED(22)" -> "_3";
"tlen_56" -> "_9";
"_9" -> "ESCAPED";
"_14" -> "ESCAPED";
"tlen_58" -> "ESCAPED";
"tlen_58" -> "_21";
"_21" -> "ESCAPED";
"_26" -> "ESCAPED";
"_30" -> "ESCAPED";
"tlen_61" -> "ESCAPED";
"tlen_61" -> "_33";
"_33" -> "ESCAPED";
"_38" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"optrarray" [label="\N\n_5 = optrarray + UNKNOWN\l_7 = optrarray + UNKNOWN\l_12 = optrarray + UNKNOWN\l_14 = optrarray + UNKNOWN\l_16 = optrarray + UNKNOWN\l_18 = optrarray + UNKNOWN\l_24 = optrarray + UNKNOWN\l_26 = optrarray + UNKNOWN\l_28 = optrarray + UNKNOWN\l_30 = optrarray + UNKNOWN\l_36 = optrarray + UNKNOWN\l_38 = optrarray + UNKNOWN\l"];
"str_is_less.isra.2";
"CALLUSED(17)" [label="\N\nCALLUSED(17) = CALLUSED(17) + UNKNOWN\lCALLUSED(17) = *CALLUSED(17) + UNKNOWN\l"];
"CALLCLOBBERED(18)";
"_2";
"CALLUSED(22)" [label="\N\nCALLUSED(22) = CALLUSED(22) + UNKNOWN\lCALLUSED(22) = *CALLUSED(22) + UNKNOWN\l"];
"CALLCLOBBERED(23)";
"_3";
"_5" [label="\N\n_6 = *_5\l"];
"_6";
"_7" [label="\N\ntlen_56 = *_7\l"];
"tlen_56";
"_9";
"_12" [label="\N\n_13 = *_12\l"];
"_13";
"_14";
"MoveMemory";
"_16" [label="\N\n_17 = *_16\l"];
"_17";
"_18" [label="\N\ntlen_58 = *_18\l"];
"tlen_58";
"stradjust";
"_21";
"_24" [label="\N\n_25 = *_24\l"];
"_25";
"_26";
"_28" [label="\N\n_29 = *_28\l"];
"_29";
"_30";
"tlen_61";
"_33";
"_36" [label="\N\n_37 = *_36\l"];
"_37";
"_38";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "_2";
"NONLOCAL" -> "_3";
"NONLOCAL" -> "tlen_61";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "CALLUSED(17)";
"STOREDANYTHING" -> "CALLUSED(22)";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_12";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "tlen_61";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_18";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "_26";
"STOREDANYTHING" -> "_28";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_38";
"optrarray" -> "ESCAPED";
"optrarray" -> "CALLUSED(17)";
"optrarray" -> "CALLUSED(22)";
"CALLUSED(17)" -> "_2";
"CALLUSED(22)" -> "_3";
"tlen_56" -> "_9";
"_9" -> "ESCAPED";
"_14" -> "ESCAPED";
"tlen_58" -> "ESCAPED";
"tlen_58" -> "_21";
"_21" -> "ESCAPED";
"_26" -> "ESCAPED";
"_30" -> "ESCAPED";
"tlen_61" -> "ESCAPED";
"tlen_61" -> "_33";
"_33" -> "ESCAPED";
"_38" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL temp }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
optrarray = { NONLOCAL }
strarray = { NONLOCAL } same as optrarray
numstrings = { NONLOCAL } same as optrarray
i = { NONLOCAL } same as optrarray
j = { NONLOCAL } same as optrarray
k_48 = { NONLOCAL } same as optrarray
i_40 = { NONLOCAL } same as optrarray
_1 = { NONLOCAL } same as optrarray
str_is_less.isra.2 = { }
CALLUSED(17) = { ESCAPED NONLOCAL }
CALLCLOBBERED(18) = { }
_2 = { ESCAPED NONLOCAL }
k_53 = { NONLOCAL } same as optrarray
k_41 = { NONLOCAL } same as optrarray
CALLUSED(22) = { ESCAPED NONLOCAL }
CALLCLOBBERED(23) = { }
_3 = { ESCAPED NONLOCAL }
_4 = { NONLOCAL } same as optrarray
_5 = { NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_7 = { NONLOCAL }
tlen_56 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL } same as tlen_56
_9 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL } same as _9
_11 = { NONLOCAL } same as optrarray
_12 = { NONLOCAL }
_13 = { ESCAPED NONLOCAL }
_14 = { NONLOCAL }
MoveMemory = { }
temp = { ESCAPED NONLOCAL } same as tlen_61
_15 = { NONLOCAL } same as optrarray
_16 = { NONLOCAL }
_17 = { ESCAPED NONLOCAL }
_18 = { NONLOCAL }
tlen_58 = { ESCAPED NONLOCAL }
_19 = { ESCAPED NONLOCAL } same as tlen_58
stradjust = { }
_20 = { ESCAPED NONLOCAL } same as tlen_58
_21 = { ESCAPED NONLOCAL }
_22 = { ESCAPED NONLOCAL } same as _21
_23 = { NONLOCAL } same as optrarray
_24 = { NONLOCAL }
_25 = { ESCAPED NONLOCAL }
_26 = { NONLOCAL }
_27 = { NONLOCAL } same as optrarray
_28 = { NONLOCAL }
_29 = { ESCAPED NONLOCAL }
_30 = { NONLOCAL }
tlen_61 = { ESCAPED NONLOCAL }
_31 = { ESCAPED NONLOCAL } same as tlen_61
_32 = { ESCAPED NONLOCAL } same as tlen_61
_33 = { ESCAPED NONLOCAL }
_34 = { ESCAPED NONLOCAL } same as _33
_35 = { NONLOCAL } same as optrarray
_36 = { NONLOCAL }
_37 = { ESCAPED NONLOCAL }
_38 = { NONLOCAL }
i_55 = { NONLOCAL } same as optrarray
_39 = { NONLOCAL } same as optrarray


Alias information for strsift

Aliased symbols

temp, UID D.4936, unsigned char[80], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4936 } (escaped)

Flow-insensitive points-to information

_5, points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to NULL, points-to vars: { }
_14, points-to non-local, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to NULL, points-to vars: { }
_18, points-to non-local, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to NULL, points-to vars: { }
_26, points-to non-local, points-to NULL, points-to vars: { }
_28, points-to non-local, points-to NULL, points-to vars: { }
_30, points-to non-local, points-to NULL, points-to vars: { }
_36, points-to non-local, points-to NULL, points-to vars: { }
_38, points-to non-local, points-to NULL, points-to vars: { }
optrarray_49(D), points-to non-local, points-to NULL, points-to vars: { }
strarray_50(D), points-to non-local, points-to NULL, points-to vars: { }

strsift (farulong * optrarray, faruchar * strarray, long unsigned int numstrings, long unsigned int i, long unsigned int j)
{
  unsigned char tlen;
  unsigned char temp[80];
  long unsigned int k;
  long unsigned int _1;
  int _2;
  int _3;
  long unsigned int _4;
  farulong * _5;
  long unsigned int _6;
  faruchar * _7;
  int _8;
  int _9;
  long unsigned int _10;
  long unsigned int _11;
  farulong * _12;
  long unsigned int _13;
  faruchar * _14;
  long unsigned int _15;
  farulong * _16;
  long unsigned int _17;
  faruchar * _18;
  int _19;
  int _20;
  int _21;
  long unsigned int _22;
  long unsigned int _23;
  farulong * _24;
  long unsigned int _25;
  faruchar * _26;
  long unsigned int _27;
  farulong * _28;
  long unsigned int _29;
  faruchar * _30;
  int _31;
  int _32;
  int _33;
  long unsigned int _34;
  long unsigned int _35;
  farulong * _36;
  long unsigned int _37;
  faruchar * _38;
  long unsigned int _39;

  <bb 2> [0.00%]:
  goto <bb 9>; [0.00%]

  <bb 3> [0.00%]:
  k_48 = i_40 * 2;
  if (j_46(D) > k_48)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  _1 = k_48 + 1;
  _2 = str_is_less.isra.2 (optrarray_49(D), strarray_50(D), k_48, _1);
  if (_2 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  k_53 = k_48 + 1;

  <bb 6> [0.00%]:
  # k_41 = PHI <k_48(3), k_48(4), k_53(5)>
  _3 = str_is_less.isra.2 (optrarray_49(D), strarray_50(D), i_40, k_41);
  if (_3 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  _4 = k_41 * 8;
  _5 = optrarray_49(D) + _4;
  _6 = *_5;
  _7 = strarray_50(D) + _6;
  tlen_56 = *_7;
  _8 = (int) tlen_56;
  _9 = _8 + 1;
  _10 = (long unsigned int) _9;
  _11 = k_41 * 8;
  _12 = optrarray_49(D) + _11;
  _13 = *_12;
  _14 = strarray_50(D) + _13;
  MoveMemory (&temp[0], _14, _10);
  _15 = i_40 * 8;
  _16 = optrarray_49(D) + _15;
  _17 = *_16;
  _18 = strarray_50(D) + _17;
  tlen_58 = *_18;
  _19 = (int) tlen_58;
  stradjust (optrarray_49(D), strarray_50(D), numstrings_51(D), k_41, _19);
  _20 = (int) tlen_58;
  _21 = _20 + 1;
  _22 = (long unsigned int) _21;
  _23 = i_40 * 8;
  _24 = optrarray_49(D) + _23;
  _25 = *_24;
  _26 = strarray_50(D) + _25;
  _27 = k_41 * 8;
  _28 = optrarray_49(D) + _27;
  _29 = *_28;
  _30 = strarray_50(D) + _29;
  MoveMemory (_30, _26, _22);
  tlen_61 = temp[0];
  _31 = (int) tlen_61;
  stradjust (optrarray_49(D), strarray_50(D), numstrings_51(D), i_40, _31);
  _32 = (int) tlen_61;
  _33 = _32 + 1;
  _34 = (long unsigned int) _33;
  _35 = i_40 * 8;
  _36 = optrarray_49(D) + _35;
  _37 = *_36;
  _38 = strarray_50(D) + _37;
  MoveMemory (_38, &temp[0], _34);
  goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  i_55 = j_46(D) + 1;

  <bb 9> [0.00%]:
  # i_40 = PHI <i_44(D)(2), k_41(7), i_55(8)>
  _39 = i_40 * 2;
  if (_39 <= j_46(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  temp ={v} {CLOBBER};
  return;

}



;; Function StrHeapSort (StrHeapSort, funcdef_no=61, decl_uid=4529, cgraph_uid=61, symbol_order=86)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
optrarray = &NONLOCAL
strarray = &NONLOCAL
numstrings = &NONLOCAL
bottom = &NONLOCAL
top = &NONLOCAL
i_29 = top
i_29 = &NONLOCAL
ESCAPED = optrarray
ESCAPED = strarray
ESCAPED = numstrings
ESCAPED = i_24
ESCAPED = top
i_47 = i_24
i_47 = &NONLOCAL
i_24 = i_29
i_24 = i_47
ESCAPED = optrarray
ESCAPED = strarray
ESCAPED = numstrings
ESCAPED = &NULL
ESCAPED = i_25
tlen_37 = *strarray
_1 = tlen_37
_2 = _1
_2 = &NONLOCAL
_3 = _2
ESCAPED = &temp
ESCAPED = strarray
ESCAPED = _3
_4 = i_25
_4 = &NONLOCAL
_5 = optrarray + UNKNOWN
_6 = *_5
_7 = strarray + UNKNOWN
tlen_39 = *_7
_8 = tlen_39
ESCAPED = optrarray
ESCAPED = strarray
ESCAPED = numstrings
ESCAPED = &NULL
ESCAPED = _8
_9 = tlen_39
_10 = _9
_10 = &NONLOCAL
_11 = _10
_12 = i_25
_12 = &NONLOCAL
_13 = optrarray + UNKNOWN
_14 = *_13
_15 = strarray + UNKNOWN
ESCAPED = strarray
ESCAPED = _15
ESCAPED = _11
tlen_42 = temp
_16 = tlen_42
ESCAPED = optrarray
ESCAPED = strarray
ESCAPED = numstrings
ESCAPED = i_25
ESCAPED = _16
_17 = tlen_42
_18 = _17
_18 = &NONLOCAL
_19 = _18
_20 = i_25
_20 = &NONLOCAL
_21 = optrarray + UNKNOWN
_22 = *_21
_23 = strarray + UNKNOWN
ESCAPED = _23
ESCAPED = &temp
ESCAPED = _19
i_45 = i_25
i_45 = &NONLOCAL
i_25 = top
i_25 = i_45

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 23 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"optrarray"[label="optrarray = { 5 }"];
"strarray"[label="strarray = { 5 }"];
"numstrings"[label="numstrings = { 5 }"];
"bottom"[label="bottom = { 5 }"];
"top"[label="top = { 5 }"];
"i_29"[label="i_29 = { 5 }"];
"strsift";
"i_24"[label="i_24 = { 5 }"];
"i_25"[label="i_25 = { 5 }"];
"tlen_37";
"_1";
"_2"[label="_2 = { 5 }"];
"_3";
"MoveMemory";
"temp";
"_4"[label="_4 = { 5 }"];
"_5";
"_6";
"_7";
"tlen_39";
"_8";
"stradjust";
"_9";
"_10"[label="_10 = { 5 }"];
"_11";
"_12"[label="_12 = { 5 }"];
"_13";
"_14";
"_15";
"tlen_42";
"_16";
"_17";
"_18"[label="_18 = { 5 }"];
"_19";
"_20"[label="_20 = { 5 }"];
"_21";
"_22";
"_23";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*optrarray";
"*strarray";
"*numstrings";
"*bottom";
"*top";
"*i_29";
"*strsift";
"*i_24";
"*i_25";
"*tlen_37";
"*_1";
"*_2";
"*_3";
"*MoveMemory";
"*temp";
"*_4";
"*_5";
"*_6";
"*_7";
"*tlen_39";
"*_8";
"*stradjust";
"*_9";
"*_10";
"*_11";
"*_12";
"*_13";
"*_14";
"*_15";
"*tlen_42";
"*_16";
"*_17";
"*_18";
"*_19";
"*_20";
"*_21";
"*_22";
"*_23";

  // Edges in the constraint graph:
"optrarray" -> "ESCAPED";
"strarray" -> "ESCAPED";
"numstrings" -> "ESCAPED";
"top" -> "ESCAPED";
"i_24" -> "ESCAPED";
"i_25" -> "ESCAPED";
"_3" -> "ESCAPED";
"_8" -> "ESCAPED";
"_11" -> "ESCAPED";
"_15" -> "ESCAPED";
"_16" -> "ESCAPED";
"_19" -> "ESCAPED";
"_23" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"top" -> "i_29";
"i_29" -> "i_24";
"i_24" -> "i_24";
"i_24" -> "i_24";
"top" -> "i_25";
"i_25" -> "i_25";
"i_25" -> "i_25";
"*strarray" -> "tlen_37";
"tlen_37" -> "_1";
"_1" -> "_2";
"_2" -> "_3";
"i_25" -> "_4";
"*_5" -> "_6";
"*_7" -> "tlen_39";
"tlen_39" -> "_8";
"tlen_39" -> "_9";
"_9" -> "_10";
"_10" -> "_11";
"i_25" -> "_12";
"*_13" -> "_14";
"temp" -> "tlen_42";
"tlen_42" -> "_16";
"tlen_42" -> "_17";
"_17" -> "_18";
"_18" -> "_19";
"i_25" -> "_20";
"*_21" -> "_22";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"optrarray" [label="\N\ntlen_37 = *optrarray\l_5 = optrarray + UNKNOWN\l_7 = optrarray + UNKNOWN\l_13 = optrarray + UNKNOWN\l_15 = optrarray + UNKNOWN\l_21 = optrarray + UNKNOWN\l_23 = optrarray + UNKNOWN\l"];
"strsift";
"tlen_37";
"_2";
"MoveMemory";
"_5" [label="\N\n_6 = *_5\l"];
"_6";
"_7" [label="\N\ntlen_39 = *_7\l"];
"tlen_39";
"stradjust";
"_10";
"_13" [label="\N\n_14 = *_13\l"];
"_14";
"_15";
"tlen_42";
"_18";
"_21" [label="\N\n_22 = *_21\l"];
"_22";
"_23";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "tlen_42";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "_23";
"optrarray" -> "ESCAPED";
"tlen_37" -> "_2";
"_2" -> "ESCAPED";
"tlen_39" -> "ESCAPED";
"tlen_39" -> "_10";
"_10" -> "ESCAPED";
"_15" -> "ESCAPED";
"tlen_42" -> "ESCAPED";
"tlen_42" -> "_18";
"_18" -> "ESCAPED";
"_23" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"optrarray" [label="\N\ntlen_37 = *optrarray\l_5 = optrarray + UNKNOWN\l_7 = optrarray + UNKNOWN\l_13 = optrarray + UNKNOWN\l_15 = optrarray + UNKNOWN\l_21 = optrarray + UNKNOWN\l_23 = optrarray + UNKNOWN\l"];
"strsift";
"tlen_37";
"_2";
"MoveMemory";
"_5" [label="\N\n_6 = *_5\l"];
"_6";
"_7" [label="\N\ntlen_39 = *_7\l"];
"tlen_39";
"stradjust";
"_10";
"_13" [label="\N\n_14 = *_13\l"];
"_14";
"_15";
"tlen_42";
"_18";
"_21" [label="\N\n_22 = *_21\l"];
"_22";
"_23";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "tlen_42";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "tlen_42";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_15";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "_23";
"optrarray" -> "ESCAPED";
"tlen_37" -> "_2";
"_2" -> "ESCAPED";
"tlen_39" -> "ESCAPED";
"tlen_39" -> "_10";
"_10" -> "ESCAPED";
"_15" -> "ESCAPED";
"tlen_42" -> "ESCAPED";
"tlen_42" -> "_18";
"_18" -> "ESCAPED";
"_23" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL temp }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
optrarray = { NONLOCAL }
strarray = { NONLOCAL } same as optrarray
numstrings = { NONLOCAL } same as optrarray
bottom = { NONLOCAL } same as optrarray
top = { NONLOCAL } same as optrarray
i_29 = { NONLOCAL } same as optrarray
strsift = { }
i_24 = { NONLOCAL } same as optrarray
i_47 = { NONLOCAL } same as optrarray
i_25 = { NONLOCAL } same as optrarray
tlen_37 = { ESCAPED NONLOCAL }
_1 = { ESCAPED NONLOCAL } same as tlen_37
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _2
MoveMemory = { }
temp = { ESCAPED NONLOCAL } same as tlen_42
_4 = { NONLOCAL } same as optrarray
_5 = { NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_7 = { NONLOCAL }
tlen_39 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL } same as tlen_39
stradjust = { }
_9 = { ESCAPED NONLOCAL } same as tlen_39
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as _10
_12 = { NONLOCAL } same as optrarray
_13 = { NONLOCAL }
_14 = { ESCAPED NONLOCAL }
_15 = { NONLOCAL }
tlen_42 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL } same as tlen_42
_17 = { ESCAPED NONLOCAL } same as tlen_42
_18 = { ESCAPED NONLOCAL }
_19 = { ESCAPED NONLOCAL } same as _18
_20 = { NONLOCAL } same as optrarray
_21 = { NONLOCAL }
_22 = { ESCAPED NONLOCAL }
_23 = { NONLOCAL }
i_45 = { NONLOCAL } same as optrarray


Alias information for StrHeapSort

Aliased symbols

temp, UID D.4911, unsigned char[80], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.4911 } (escaped)

Flow-insensitive points-to information

_5, points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to NULL, points-to vars: { }
_23, points-to non-local, points-to NULL, points-to vars: { }
optrarray_33(D), points-to non-local, points-to NULL, points-to vars: { }
strarray_34(D), points-to non-local, points-to NULL, points-to vars: { }

StrHeapSort (farulong * optrarray, faruchar * strarray, long unsigned int numstrings, long unsigned int bottom, long unsigned int top)
{
  long unsigned int i;
  unsigned char tlen;
  unsigned char temp[80];
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  farulong * _5;
  long unsigned int _6;
  faruchar * _7;
  int _8;
  int _9;
  int _10;
  long unsigned int _11;
  long unsigned int _12;
  farulong * _13;
  long unsigned int _14;
  faruchar * _15;
  int _16;
  int _17;
  int _18;
  long unsigned int _19;
  long unsigned int _20;
  farulong * _21;
  long unsigned int _22;
  faruchar * _23;

  <bb 2> [0.00%]:
  i_29 = top_28(D) / 2;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  strsift (optrarray_33(D), strarray_34(D), numstrings_35(D), i_24, top_28(D));
  i_47 = i_24 + 18446744073709551615;

  <bb 4> [0.00%]:
  # i_24 = PHI <i_29(2), i_47(3)>
  if (i_24 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  strsift (optrarray_33(D), strarray_34(D), numstrings_35(D), 0, i_25);
  tlen_37 = *strarray_34(D);
  _1 = (int) tlen_37;
  _2 = _1 + 1;
  _3 = (long unsigned int) _2;
  MoveMemory (&temp[0], strarray_34(D), _3);
  _4 = i_25 * 8;
  _5 = optrarray_33(D) + _4;
  _6 = *_5;
  _7 = strarray_34(D) + _6;
  tlen_39 = *_7;
  _8 = (int) tlen_39;
  stradjust (optrarray_33(D), strarray_34(D), numstrings_35(D), 0, _8);
  _9 = (int) tlen_39;
  _10 = _9 + 1;
  _11 = (long unsigned int) _10;
  _12 = i_25 * 8;
  _13 = optrarray_33(D) + _12;
  _14 = *_13;
  _15 = strarray_34(D) + _14;
  MoveMemory (strarray_34(D), _15, _11);
  tlen_42 = temp[0];
  _16 = (int) tlen_42;
  stradjust (optrarray_33(D), strarray_34(D), numstrings_35(D), i_25, _16);
  _17 = (int) tlen_42;
  _18 = _17 + 1;
  _19 = (long unsigned int) _18;
  _20 = i_25 * 8;
  _21 = optrarray_33(D) + _20;
  _22 = *_21;
  _23 = strarray_34(D) + _22;
  MoveMemory (_23, &temp[0], _19);
  i_45 = i_25 + 18446744073709551615;

  <bb 6> [0.00%]:
  # i_25 = PHI <top_28(D)(4), i_45(5)>
  if (i_25 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  temp ={v} {CLOBBER};
  return;

}



;; Function DoStringSortIteration (DoStringSortIteration, funcdef_no=58, decl_uid=4512, cgraph_uid=58, symbol_order=83)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
arraybase = &NONLOCAL
numarrays = &NONLOCAL
arraysize = &NONLOCAL
ESCAPED = arraybase
ESCAPED = numarrays
ESCAPED = &nstrings
ESCAPED = arraysize
optrarray_16 = NONLOCAL
elapsed_20 = NONLOCAL
nstrings.22_1 = nstrings
_2 = nstrings.22_1
_2 = &NONLOCAL
nstrings.23_3 = nstrings
ESCAPED = tempobase_8
ESCAPED = tempsbase_9
ESCAPED = nstrings.23_3
ESCAPED = _2
nstrings.24_4 = nstrings
_5 = nstrings.24_4
_5 = &NONLOCAL
tempobase_29 = tempobase_8 + UNKNOWN
_6 = arraysize
_6 = &NONLOCAL
tempsbase_30 = tempsbase_9 + UNKNOWN
i_31 = i_7
i_31 = &NONLOCAL
i_7 = &NULL
i_7 = i_31
tempobase_8 = optrarray_16
tempobase_8 = tempobase_29
tempsbase_9 = arraybase
tempsbase_9 = tempsbase_30
ESCAPED = elapsed_20
elapsed_23 = NONLOCAL
ESCAPED = optrarray_16
ESCAPED = &syserror
ESCAPED = elapsed_23

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 12 32 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"arraybase"[label="arraybase = { 5 }"];
"numarrays"[label="numarrays = { 5 }"];
"arraysize"[label="arraysize = { 5 }"];
"LoadStringArray";
"nstrings";
"optrarray_16";
"StartStopwatch";
"elapsed_20";
"nstrings.22_1";
"_2"[label="_2 = { 5 }"];
"nstrings.23_3";
"StrHeapSort.isra.3";
"tempobase_8";
"tempsbase_9";
"nstrings.24_4";
"_5"[label="_5 = { 5 }"];
"tempobase_29";
"_6"[label="_6 = { 5 }"];
"tempsbase_30";
"i_31"[label="i_31 = { 1 5 }"];
"StopStopwatch";
"elapsed_23";
"FreeMemory";
"syserror";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*arraybase";
"*numarrays";
"*arraysize";
"*LoadStringArray";
"*nstrings";
"*StartStopwatch";
"*nstrings.22_1";
"*_2";
"*nstrings.23_3";
"*StrHeapSort.isra.3";
"*tempsbase_9";
"*nstrings.24_4";
"*_5";
"*tempobase_29";
"*_6";
"*tempsbase_30";
"*i_31";
"*i_7";
"*StopStopwatch";
"*FreeMemory";
"*syserror";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"arraybase" -> "ESCAPED";
"numarrays" -> "ESCAPED";
"arraysize" -> "ESCAPED";
"optrarray_16" -> "ESCAPED";
"elapsed_20" -> "ESCAPED";
"_2" -> "ESCAPED";
"nstrings.23_3" -> "ESCAPED";
"tempobase_8" -> "ESCAPED";
"tempsbase_9" -> "ESCAPED";
"elapsed_23" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "optrarray_16";
"NONLOCAL" -> "elapsed_20";
"nstrings" -> "nstrings.22_1";
"nstrings.22_1" -> "_2";
"nstrings" -> "nstrings.23_3";
"optrarray_16" -> "tempobase_8";
"tempobase_29" -> "tempobase_8";
"arraybase" -> "tempsbase_9";
"tempsbase_30" -> "tempsbase_9";
"nstrings" -> "nstrings.24_4";
"nstrings.24_4" -> "_5";
"arraysize" -> "_6";
"i_31" -> "i_31";
"i_31" -> "i_31";
"NONLOCAL" -> "elapsed_23";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"arraybase";
"LoadStringArray";
"optrarray_16";
"StartStopwatch";
"nstrings.22_1";
"_2";
"StrHeapSort.isra.3";
"tempobase_8" [label="\N\ntempobase_29 = tempobase_8 + UNKNOWN\l"];
"tempsbase_9" [label="\N\ntempsbase_30 = tempsbase_9 + UNKNOWN\l"];
"tempobase_29";
"tempsbase_30";
"i_31";
"StopStopwatch";
"FreeMemory";
"syserror";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "nstrings.22_1";
"STOREDANYTHING" -> "tempobase_29";
"STOREDANYTHING" -> "tempsbase_30";
"STOREDANYTHING" -> "syserror";
"arraybase" -> "ESCAPED";
"arraybase" -> "tempsbase_9";
"optrarray_16" -> "ESCAPED";
"optrarray_16" -> "tempobase_8";
"nstrings.22_1" -> "ESCAPED";
"nstrings.22_1" -> "_2";
"_2" -> "ESCAPED";
"tempobase_8" -> "ESCAPED";
"tempsbase_9" -> "ESCAPED";
"tempobase_29" -> "tempobase_8";
"tempsbase_30" -> "tempsbase_9";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = optrarray_16\l"];
"STOREDANYTHING";
"INTEGER";
"arraybase";
"LoadStringArray";
"optrarray_16";
"StartStopwatch";
"nstrings.22_1";
"_2";
"StrHeapSort.isra.3";
"tempobase_8" [label="\N\ntempobase_29 = tempobase_8 + UNKNOWN\l"];
"tempsbase_9" [label="\N\ntempsbase_30 = tempsbase_9 + UNKNOWN\l"];
"tempobase_29";
"tempsbase_30";
"i_31";
"StopStopwatch";
"FreeMemory";
"syserror";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "nstrings.22_1";
"STOREDANYTHING" -> "tempobase_29";
"STOREDANYTHING" -> "tempsbase_30";
"STOREDANYTHING" -> "syserror";
"arraybase" -> "ESCAPED";
"arraybase" -> "tempsbase_9";
"optrarray_16" -> "ESCAPED";
"optrarray_16" -> "nstrings.22_1";
"optrarray_16" -> "tempobase_8";
"optrarray_16" -> "syserror";
"nstrings.22_1" -> "ESCAPED";
"nstrings.22_1" -> "_2";
"_2" -> "ESCAPED";
"tempobase_8" -> "ESCAPED";
"tempsbase_9" -> "ESCAPED";
"tempobase_29" -> "tempobase_8";
"tempsbase_30" -> "tempsbase_9";
"syserror" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL nstrings syserror }
NONLOCAL = { ESCAPED NONLOCAL } same as optrarray_16
STOREDANYTHING = { }
INTEGER = { ANYTHING }
arraybase = { NONLOCAL }
numarrays = { NONLOCAL } same as arraybase
arraysize = { NONLOCAL } same as arraybase
LoadStringArray = { }
nstrings = { ESCAPED NONLOCAL } same as nstrings.22_1
optrarray_16 = { ESCAPED NONLOCAL }
StartStopwatch = { }
elapsed_20 = { ESCAPED NONLOCAL } same as optrarray_16
nstrings.22_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
nstrings.23_3 = { ESCAPED NONLOCAL } same as nstrings.22_1
StrHeapSort.isra.3 = { }
tempobase_8 = { ESCAPED NONLOCAL }
tempsbase_9 = { NONLOCAL }
nstrings.24_4 = { ESCAPED NONLOCAL } same as nstrings.22_1
_5 = { ESCAPED NONLOCAL } same as _2
tempobase_29 = { ESCAPED NONLOCAL }
_6 = { NONLOCAL } same as arraybase
tempsbase_30 = { NONLOCAL }
i_31 = { NULL NONLOCAL }
i_7 = { NULL NONLOCAL } same as i_31
StopStopwatch = { }
elapsed_23 = { ESCAPED NONLOCAL } same as optrarray_16
FreeMemory = { }
syserror = { ESCAPED NONLOCAL }


Alias information for DoStringSortIteration

Aliased symbols

syserror, UID D.4846, int, is addressable
nstrings, UID D.4845, long unsigned int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4845 D.4846 } (escaped)

Flow-insensitive points-to information

tempobase_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
tempsbase_9, points-to non-local, points-to NULL, points-to vars: { }
arraybase_12(D), points-to non-local, points-to NULL, points-to vars: { }
optrarray_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
tempobase_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
tempsbase_30, points-to non-local, points-to NULL, points-to vars: { }

DoStringSortIteration (faruchar * arraybase, unsigned int numarrays, long unsigned int arraysize)
{
  faruchar * tempsbase;
  farulong * tempobase;
  unsigned int i;
  int syserror;
  long unsigned int nstrings;
  long unsigned int elapsed;
  farulong * optrarray;
  long unsigned int nstrings.22_1;
  long unsigned int _2;
  long unsigned int nstrings.23_3;
  long unsigned int nstrings.24_4;
  long unsigned int _5;
  sizetype _6;

  <bb 2> [0.00%]:
  optrarray_16 = LoadStringArray (arraybase_12(D), numarrays_13(D), &nstrings, arraysize_14(D));
  elapsed_20 = StartStopwatch ();
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  nstrings.22_1 = nstrings;
  _2 = nstrings.22_1 + 18446744073709551615;
  nstrings.23_3 = nstrings;
  StrHeapSort.isra.3 (tempobase_8, tempsbase_9, nstrings.23_3, _2);
  nstrings.24_4 = nstrings;
  _5 = nstrings.24_4 * 8;
  tempobase_29 = tempobase_8 + _5;
  _6 = arraysize_14(D) + 100;
  tempsbase_30 = tempsbase_9 + _6;
  i_31 = i_7 + 1;

  <bb 4> [0.00%]:
  # i_7 = PHI <0(2), i_31(3)>
  # tempobase_8 = PHI <optrarray_16(2), tempobase_29(3)>
  # tempsbase_9 = PHI <arraybase_12(D)(2), tempsbase_30(3)>
  if (i_7 < numarrays_13(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  elapsed_23 = StopStopwatch (elapsed_20);
  FreeMemory (optrarray_16, &syserror);
  nstrings ={v} {CLOBBER};
  syserror ={v} {CLOBBER};
  return elapsed_23;

}



;; Function thefunction (thefunction, funcdef_no=72, decl_uid=4592, cgraph_uid=72, symbol_order=97)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
x = &NONLOCAL
omegan = &NONLOCAL
select = &NONLOCAL
_1 = x
_1 = &NONLOCAL
ESCAPED = _1
ESCAPED = x
_21 = NONLOCAL
_2 = x
_2 = &NONLOCAL
ESCAPED = _2
ESCAPED = x
_3 = NONLOCAL
_4 = x
_4 = omegan
callarg(18) = _4
_5 = callarg(18) + UNKNOWN
_5 = &NONLOCAL
_19 = _3
_19 = _5
_6 = x
_6 = &NONLOCAL
ESCAPED = _6
ESCAPED = x
_7 = NONLOCAL
_8 = x
_8 = omegan
callarg(25) = _8
_9 = callarg(25) + UNKNOWN
_9 = &NONLOCAL
_17 = _7
_17 = _9
_10 = _21
_10 = _19
_10 = _17
_10 = &NONLOCAL
ESCAPED = _10

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"x"[label="x = { 5 }"];
"omegan"[label="omegan = { 5 }"];
"select"[label="select = { 5 }"];
"_1"[label="_1 = { 5 }"];
"pow";
"_21";
"_2"[label="_2 = { 5 }"];
"_3";
"_4";
"cos";
"callarg(18)";
"_5"[label="_5 = { 5 }"];
"_19";
"_6"[label="_6 = { 5 }"];
"_7";
"_8";
"sin";
"callarg(25)";
"_9"[label="_9 = { 5 }"];
"_17";
"_10"[label="_10 = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*x";
"*omegan";
"*select";
"*_1";
"*pow";
"*_2";
"*_4";
"*cos";
"*callarg(18)";
"*_5";
"*_6";
"*_8";
"*sin";
"*callarg(25)";
"*_9";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"x" -> "ESCAPED";
"_1" -> "ESCAPED";
"_2" -> "ESCAPED";
"_6" -> "ESCAPED";
"_10" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"x" -> "_1";
"NONLOCAL" -> "_21";
"x" -> "_2";
"NONLOCAL" -> "_3";
"x" -> "_4";
"omegan" -> "_4";
"_4" -> "callarg(18)";
"_3" -> "_19";
"_5" -> "_19";
"x" -> "_6";
"NONLOCAL" -> "_7";
"x" -> "_8";
"omegan" -> "_8";
"_8" -> "callarg(25)";
"_7" -> "_17";
"_9" -> "_17";
"_21" -> "_10";
"_19" -> "_10";
"_17" -> "_10";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"x" [label="\N\n_5 = x + UNKNOWN\l_9 = x + UNKNOWN\l"];
"pow";
"_21";
"cos";
"_5";
"_19";
"sin";
"_9";
"_17";
"_10";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_9";
"x" -> "ESCAPED";
"_21" -> "_19";
"_21" -> "_17";
"_21" -> "_10";
"_5" -> "_19";
"_19" -> "_10";
"_9" -> "_17";
"_17" -> "_10";
"_10" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _21\l"];
"STOREDANYTHING";
"INTEGER";
"x" [label="\N\n_5 = x + UNKNOWN\l_9 = x + UNKNOWN\l"];
"pow";
"_21";
"cos";
"_5";
"_19";
"sin";
"_9";
"_17";
"_10";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_9";
"x" -> "ESCAPED";
"_21" -> "ESCAPED";
"_21" -> "_19";
"_21" -> "_17";
"_21" -> "_10";
"_5" -> "_19";
"_19" -> "_10";
"_9" -> "_17";
"_17" -> "_10";
"_10" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _21
STOREDANYTHING = { }
INTEGER = { ANYTHING }
x = { NONLOCAL }
omegan = { NONLOCAL } same as x
select = { NONLOCAL } same as x
_1 = { NONLOCAL } same as x
pow = { }
_21 = { ESCAPED NONLOCAL }
_2 = { NONLOCAL } same as x
_3 = { ESCAPED NONLOCAL } same as _21
_4 = { NONLOCAL } same as x
cos = { }
callarg(18) = { NONLOCAL } same as x
_5 = { NONLOCAL }
_19 = { ESCAPED NONLOCAL }
_6 = { NONLOCAL } same as x
_7 = { ESCAPED NONLOCAL } same as _21
_8 = { NONLOCAL } same as x
sin = { }
callarg(25) = { NONLOCAL } same as x
_9 = { NONLOCAL }
_17 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL }


Alias information for thefunction

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


thefunction (double x, double omegan, int select)
{
  double _1;
  double _2;
  double _3;
  double _4;
  double _5;
  double _6;
  double _7;
  double _8;
  double _9;
  double _10;
  double _17;
  double _19;
  double _21;

  <bb 2> [0.00%]:
  switch (select_12(D)) <default: <L5> [0.00%], case 0: <L0> [0.00%], case 1: <L1> [0.00%], case 2: <L2> [0.00%]>

<L0> [0.00%]:
  _1 = x_13(D) + 1.0e+0;
  _21 = pow (_1, x_13(D));
  goto <bb 6> (<L5>); [0.00%]

<L1> [0.00%]:
  _2 = x_13(D) + 1.0e+0;
  _3 = pow (_2, x_13(D));
  _4 = x_13(D) * omegan_16(D);
  _5 = cos (_4);
  _19 = _3 * _5;
  goto <bb 6> (<L5>); [0.00%]

<L2> [0.00%]:
  _6 = x_13(D) + 1.0e+0;
  _7 = pow (_6, x_13(D));
  _8 = x_13(D) * omegan_16(D);
  _9 = sin (_8);
  _17 = _7 * _9;

  # _10 = PHI <_21(3), _19(4), _17(5), 0.0(2)>
<L5> [0.00%]:
  return _10;

}



;; Function TrapezoidIntegrate (TrapezoidIntegrate, funcdef_no=71, decl_uid=4588, cgraph_uid=71, symbol_order=96)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
x0 = &NONLOCAL
x1 = &NONLOCAL
nsteps = &NONLOCAL
omegan = &NONLOCAL
select = &NONLOCAL
_1 = x1
_1 = x0
_2 = nsteps
dx_17 = _1
dx_17 = _2
ESCAPED = x0
ESCAPED = omegan
ESCAPED = select
_3 = NONLOCAL
rvalue_22 = _3
rvalue_22 = &NONLOCAL
nsteps_23 = nsteps
nsteps_23 = &NONLOCAL
x_25 = x_8
x_25 = dx_17
ESCAPED = x_25
ESCAPED = omegan
ESCAPED = select
_27 = NONLOCAL
rvalue_28 = rvalue_9
rvalue_28 = _27
nsteps_7 = nsteps_23
nsteps_7 = nsteps_24
x_8 = x0
x_8 = x_25
rvalue_9 = rvalue_22
rvalue_9 = rvalue_28
nsteps_24 = nsteps_7
nsteps_24 = &NONLOCAL
rvalue_10 = rvalue_22
rvalue_10 = rvalue_9
ESCAPED = x1
ESCAPED = omegan
ESCAPED = select
_4 = NONLOCAL
_5 = _4
_5 = &NONLOCAL
_6 = _5
_6 = rvalue_10
rvalue_30 = _6
rvalue_30 = dx_17
ESCAPED = rvalue_30

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"x0"[label="x0 = { 5 }"];
"x1"[label="x1 = { 5 }"];
"nsteps"[label="nsteps = { 5 }"];
"omegan"[label="omegan = { 5 }"];
"select"[label="select = { 5 }"];
"_1";
"_2";
"dx_17";
"thefunction";
"_3";
"rvalue_22"[label="rvalue_22 = { 5 }"];
"nsteps_23"[label="nsteps_23 = { 5 }"];
"x_25";
"_27";
"rvalue_9";
"nsteps_7"[label="nsteps_7 = { 5 }"];
"rvalue_10";
"_4";
"_5"[label="_5 = { 5 }"];
"_6";
"rvalue_30";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*x0";
"*x1";
"*nsteps";
"*omegan";
"*select";
"*_1";
"*_2";
"*dx_17";
"*thefunction";
"*nsteps_23";
"*x_25";
"*nsteps_7";
"*nsteps_24";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"x0" -> "ESCAPED";
"x1" -> "ESCAPED";
"omegan" -> "ESCAPED";
"select" -> "ESCAPED";
"x_25" -> "ESCAPED";
"rvalue_30" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"x0" -> "_1";
"x1" -> "_1";
"nsteps" -> "_2";
"_1" -> "dx_17";
"_2" -> "dx_17";
"NONLOCAL" -> "_3";
"_3" -> "rvalue_22";
"nsteps" -> "nsteps_23";
"x0" -> "x_25";
"dx_17" -> "x_25";
"x_25" -> "x_25";
"x_25" -> "x_25";
"NONLOCAL" -> "_27";
"rvalue_22" -> "rvalue_9";
"_27" -> "rvalue_9";
"rvalue_9" -> "rvalue_9";
"rvalue_9" -> "rvalue_9";
"nsteps_23" -> "nsteps_7";
"nsteps_7" -> "nsteps_7";
"nsteps_7" -> "nsteps_7";
"rvalue_22" -> "rvalue_10";
"rvalue_9" -> "rvalue_10";
"NONLOCAL" -> "_4";
"_4" -> "_5";
"rvalue_10" -> "_6";
"_5" -> "_6";
"dx_17" -> "rvalue_30";
"_6" -> "rvalue_30";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"x0";
"thefunction";
"_3";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"x0" -> "ESCAPED";
"x0" -> "_3";
"_3" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _3\l"];
"STOREDANYTHING";
"INTEGER";
"x0";
"thefunction";
"_3";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"x0" -> "ESCAPED";
"x0" -> "_3";
"_3" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _3
STOREDANYTHING = { }
INTEGER = { ANYTHING }
x0 = { NONLOCAL }
x1 = { NONLOCAL } same as x0
nsteps = { NONLOCAL } same as x0
omegan = { NONLOCAL } same as x0
select = { NONLOCAL } same as x0
_1 = { NONLOCAL } same as x0
_2 = { NONLOCAL } same as x0
dx_17 = { NONLOCAL } same as x0
thefunction = { }
_3 = { ESCAPED NONLOCAL }
rvalue_22 = { ESCAPED NONLOCAL } same as _3
nsteps_23 = { NONLOCAL } same as x0
x_25 = { NONLOCAL } same as x0
x_8 = { NONLOCAL } same as x0
_27 = { ESCAPED NONLOCAL } same as _3
rvalue_28 = { ESCAPED NONLOCAL } same as _3
rvalue_9 = { ESCAPED NONLOCAL } same as _3
nsteps_7 = { NONLOCAL } same as x0
nsteps_24 = { NONLOCAL } same as x0
rvalue_10 = { ESCAPED NONLOCAL } same as _3
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { ESCAPED NONLOCAL } same as _3
_6 = { ESCAPED NONLOCAL } same as _3
rvalue_30 = { ESCAPED NONLOCAL } same as _3


Alias information for TrapezoidIntegrate

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


TrapezoidIntegrate (double x0, double x1, int nsteps, double omegan, int select)
{
  double rvalue;
  double dx;
  double x;
  double _1;
  double _2;
  double _3;
  double _4;
  double _5;
  double _6;
  double _27;

  <bb 2> [0.00%]:
  _1 = x1_15(D) - x0_13(D);
  _2 = (double) nsteps_16(D);
  dx_17 = _1 / _2;
  _3 = thefunction (x0_13(D), omegan_19(D), select_20(D));
  rvalue_22 = _3 * 5.0e-1;
  if (nsteps_16(D) != 1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  nsteps_23 = nsteps_16(D) + -1;
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  x_25 = x_8 + dx_17;
  _27 = thefunction (x_25, omegan_19(D), select_20(D));
  rvalue_28 = rvalue_9 + _27;

  <bb 5> [0.00%]:
  # nsteps_7 = PHI <nsteps_23(3), nsteps_24(4)>
  # x_8 = PHI <x0_13(D)(3), x_25(4)>
  # rvalue_9 = PHI <rvalue_22(3), rvalue_28(4)>
  nsteps_24 = nsteps_7 + -1;
  if (nsteps_24 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  # rvalue_10 = PHI <rvalue_22(2), rvalue_9(5)>
  _4 = thefunction (x1_15(D), omegan_19(D), select_20(D));
  _5 = _4 * 5.0e-1;
  _6 = _5 + rvalue_10;
  rvalue_30 = _6 * dx_17;
  return rvalue_30;

}



;; Function DoFPUTransIteration (DoFPUTransIteration, funcdef_no=70, decl_uid=4582, cgraph_uid=70, symbol_order=95)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
abase = &NONLOCAL
bbase = &NONLOCAL
arraysize = &NONLOCAL
elapsed_17 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NULL
_1 = NONLOCAL
_2 = _1
_2 = &NONLOCAL
*abase = _2
_3 = i_13
_4 = _3
_4 = &NONLOCAL
_5 = i_13
_5 = &NONLOCAL
_6 = abase + UNKNOWN
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = _4
ESCAPED = &NONLOCAL
_7 = NONLOCAL
*_6 = _7
_8 = i_13
_9 = _8
_9 = &NONLOCAL
_10 = i_13
_10 = &NONLOCAL
_11 = bbase + UNKNOWN
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = _9
ESCAPED = &NONLOCAL
_12 = NONLOCAL
*_11 = _12
i_31 = i_13
i_31 = &NONLOCAL
i_13 = &NONLOCAL
i_13 = i_31
ESCAPED = elapsed_17
_25 = NONLOCAL
ESCAPED = _25

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"abase"[label="abase = { 5 }"];
"bbase"[label="bbase = { 5 }"];
"arraysize"[label="arraysize = { 5 }"];
"StartStopwatch";
"elapsed_17";
"TrapezoidIntegrate";
"_1";
"_2"[label="_2 = { 5 }"];
"_3";
"i_13"[label="i_13 = { 5 }"];
"_4"[label="_4 = { 5 }"];
"_5"[label="_5 = { 5 }"];
"_6";
"_7";
"_8";
"_9"[label="_9 = { 5 }"];
"_10"[label="_10 = { 5 }"];
"_11";
"_12";
"StopStopwatch";
"_25";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*abase";
"*bbase";
"*arraysize";
"*StartStopwatch";
"*TrapezoidIntegrate";
"*_1";
"*_2";
"*_3";
"*i_13";
"*_4";
"*_5";
"*_6";
"*_7";
"*_8";
"*_9";
"*_10";
"*_11";
"*_12";
"*StopStopwatch";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"elapsed_17" -> "ESCAPED";
"_4" -> "ESCAPED";
"_9" -> "ESCAPED";
"_25" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "elapsed_17";
"NONLOCAL" -> "_1";
"_1" -> "_2";
"i_13" -> "_3";
"i_13" -> "i_13";
"i_13" -> "i_13";
"_3" -> "_4";
"i_13" -> "_5";
"NONLOCAL" -> "_7";
"i_13" -> "_8";
"_8" -> "_9";
"i_13" -> "_10";
"NONLOCAL" -> "_12";
"NONLOCAL" -> "_25";
"_2" -> "*abase";
"_7" -> "*_6";
"_12" -> "*_11";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"abase" [label="\N\n_6 = abase + UNKNOWN\l_11 = abase + UNKNOWN\l*abase = elapsed_17\l"];
"StartStopwatch";
"elapsed_17";
"TrapezoidIntegrate";
"_6" [label="\N\n*_6 = elapsed_17\l"];
"_11" [label="\N\n*_11 = elapsed_17\l"];
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_6";
"STOREDANYTHING" -> "_11";
"abase" -> "ESCAPED";
"elapsed_17" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = elapsed_17\l"];
"STOREDANYTHING";
"INTEGER";
"abase" [label="\N\n_6 = abase + UNKNOWN\l_11 = abase + UNKNOWN\l*abase = elapsed_17\l"];
"StartStopwatch";
"elapsed_17";
"TrapezoidIntegrate";
"_6" [label="\N\n*_6 = elapsed_17\l"];
"_11" [label="\N\n*_11 = elapsed_17\l"];
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_6";
"STOREDANYTHING" -> "_11";
"abase" -> "ESCAPED";
"elapsed_17" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as elapsed_17
STOREDANYTHING = { }
INTEGER = { ANYTHING }
abase = { NONLOCAL }
bbase = { NONLOCAL } same as abase
arraysize = { NONLOCAL } same as abase
StartStopwatch = { }
elapsed_17 = { ESCAPED NONLOCAL }
TrapezoidIntegrate = { }
_1 = { ESCAPED NONLOCAL } same as elapsed_17
_2 = { ESCAPED NONLOCAL } same as elapsed_17
_3 = { NONLOCAL } same as abase
i_13 = { NONLOCAL } same as abase
_4 = { NONLOCAL } same as abase
_5 = { NONLOCAL } same as abase
_6 = { NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as elapsed_17
_8 = { NONLOCAL } same as abase
_9 = { NONLOCAL } same as abase
_10 = { NONLOCAL } same as abase
_11 = { NONLOCAL }
_12 = { ESCAPED NONLOCAL } same as elapsed_17
i_31 = { NONLOCAL } same as abase
StopStopwatch = { }
_25 = { ESCAPED NONLOCAL } same as elapsed_17


Alias information for DoFPUTransIteration

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_6, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to NULL, points-to vars: { }
abase_19(D), points-to non-local, points-to NULL, points-to vars: { }
bbase_28(D), points-to non-local, points-to NULL, points-to vars: { }

DoFPUTransIteration (fardouble * abase, fardouble * bbase, long unsigned int arraysize)
{
  long unsigned int elapsed;
  long unsigned int i;
  double omega;
  double _1;
  double _2;
  double _3;
  double _4;
  long unsigned int _5;
  fardouble * _6;
  double _7;
  double _8;
  double _9;
  long unsigned int _10;
  fardouble * _11;
  double _12;
  long unsigned int _25;

  <bb 2> [0.00%]:
  elapsed_17 = StartStopwatch ();
  _1 = TrapezoidIntegrate (0.0, 2.0e+0, 200, 0.0, 0);
  _2 = _1 * 5.0e-1;
  *abase_19(D) = _2;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _3 = (double) i_13;
  _4 = _3 * 3.141592653589793115997963468544185161590576171875e+0;
  _5 = i_13 * 8;
  _6 = abase_19(D) + _5;
  _7 = TrapezoidIntegrate (0.0, 2.0e+0, 200, _4, 1);
  *_6 = _7;
  _8 = (double) i_13;
  _9 = _8 * 3.141592653589793115997963468544185161590576171875e+0;
  _10 = i_13 * 8;
  _11 = bbase_28(D) + _10;
  _12 = TrapezoidIntegrate (0.0, 2.0e+0, 200, _9, 2);
  *_11 = _12;
  i_31 = i_13 + 1;

  <bb 4> [0.00%]:
  # i_13 = PHI <1(2), i_31(3)>
  if (i_13 < arraysize_23(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  _25 = StopStopwatch (elapsed_17);
  return _25;

}



;; Function create_text_line (create_text_line, funcdef_no=90, decl_uid=4660, cgraph_uid=90, symbol_order=115)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
dt = &NONLOCAL
nchars = &NONLOCAL
dt_10 = dt
dt_10 = dt_26
charssofar_11 = &NULL
charssofar_11 = charssofar_25
ESCAPED = &NONLOCAL
_1 = NONLOCAL
wordcatarray = NONLOCAL
wordptr_18 = wordcatarray
CALLUSED(19) = CALLUSED(19) + UNKNOWN
CALLUSED(19) = *CALLUSED(19) + UNKNOWN
CALLUSED(19) = wordptr_18
_2 = CALLUSED(19)
_2 = NONLOCAL
_3 = _2
_3 = &NONLOCAL
ESCAPED = &myword
ESCAPED = wordptr_18
ESCAPED = _3
CALLUSED(25) = CALLUSED(25) + UNKNOWN
CALLUSED(25) = *CALLUSED(25) + UNKNOWN
CALLUSED(25) = &myword
_4 = CALLUSED(25)
_4 = NONLOCAL
_5 = _4
_5 = &NONLOCAL
tomove_20 = _5
_6 = tomove_20
_6 = &NONLOCAL
myword = &NONLOCAL
_7 = charssofar_11
_7 = tomove_20
tomove_23 = nchars
tomove_23 = charssofar_11
tomove_12 = tomove_20
tomove_12 = tomove_23
tomove.157_8 = tomove_12
ESCAPED = dt_10
ESCAPED = &myword
ESCAPED = tomove.157_8
charssofar_25 = charssofar_11
charssofar_25 = tomove_12
tomove.158_9 = tomove_12
dt_26 = dt_10 + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 24 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"dt"[label="dt = { 5 }"];
"nchars"[label="nchars = { 5 }"];
"dt_10";
"dt_26";
"abs_randwc";
"_1";
"wordptr_18";
"wordcatarray";
"strlen";
"CALLUSED(19)";
"CALLCLOBBERED(20)";
"_2";
"_3"[label="_3 = { 5 }"];
"MoveMemory";
"myword"[label="myword = { 5 }"];
"CALLUSED(25)"[label="CALLUSED(25) = { 24 }"];
"CALLCLOBBERED(26)";
"_4";
"_5"[label="_5 = { 5 }"];
"tomove_20";
"_6"[label="_6 = { 5 }"];
"_7";
"tomove_12"[label="tomove_12 = { 1 }"];
"tomove.157_8";
"tomove.158_9";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*dt";
"*nchars";
"*dt_10";
"*dt_26";
"*abs_randwc";
"*_1";
"*strlen";
"*CALLCLOBBERED(20)";
"*MoveMemory";
"*myword";
"*CALLUSED(25)";
"*CALLCLOBBERED(26)";
"*_6";
"*_7";
"*tomove.158_9";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"dt_10" -> "ESCAPED";
"wordptr_18" -> "ESCAPED";
"_3" -> "ESCAPED";
"tomove.157_8" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"dt" -> "dt_10";
"dt_26" -> "dt_10";
"NONLOCAL" -> "_1";
"wordcatarray" -> "wordptr_18";
"NONLOCAL" -> "wordcatarray";
"wordptr_18" -> "CALLUSED(19)";
"NONLOCAL" -> "_2";
"CALLUSED(19)" -> "_2";
"_2" -> "_3";
"NONLOCAL" -> "_4";
"CALLUSED(25)" -> "_4";
"_4" -> "_5";
"_5" -> "tomove_20";
"tomove_20" -> "_6";
"tomove_12" -> "_7";
"tomove_20" -> "_7";
"nchars" -> "tomove_12";
"tomove_12" -> "tomove_12";
"tomove_12" -> "tomove_12";
"tomove_20" -> "tomove_12";
"tomove_12" -> "tomove_12";
"tomove_12" -> "tomove_12";
"tomove_12" -> "tomove.157_8";
"tomove_12" -> "tomove.158_9";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"dt";
"dt_10" [label="\N\ndt_26 = dt_10 + UNKNOWN\l"];
"dt_26";
"charssofar_11";
"abs_randwc";
"_1";
"strlen";
"CALLUSED(19)" [label="\N\nCALLUSED(19) = CALLUSED(19) + UNKNOWN\lCALLUSED(19) = *CALLUSED(19) + UNKNOWN\l"];
"CALLCLOBBERED(20)";
"MoveMemory";
"myword";
"CALLUSED(25)" [label="\N\nCALLUSED(25) = CALLUSED(25) + UNKNOWN\lCALLUSED(25) = *CALLUSED(25) + UNKNOWN\l"];
"CALLCLOBBERED(26)";
"_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "dt_26";
"STOREDANYTHING" -> "CALLUSED(19)";
"STOREDANYTHING" -> "myword";
"STOREDANYTHING" -> "CALLUSED(25)";
"dt" -> "dt_10";
"dt" -> "charssofar_11";
"dt_10" -> "ESCAPED";
"dt_26" -> "dt_10";
"charssofar_11" -> "ESCAPED";
"_1" -> "ESCAPED";
"_1" -> "CALLUSED(19)";
"_1" -> "_4";
"CALLUSED(19)" -> "ESCAPED";
"CALLUSED(25)" -> "_4";
"_4" -> "charssofar_11";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _1\l"];
"STOREDANYTHING";
"INTEGER";
"dt";
"dt_10" [label="\N\ndt_26 = dt_10 + UNKNOWN\l"];
"dt_26";
"charssofar_11";
"abs_randwc";
"_1";
"strlen";
"CALLUSED(19)" [label="\N\nCALLUSED(19) = CALLUSED(19) + UNKNOWN\lCALLUSED(19) = *CALLUSED(19) + UNKNOWN\l"];
"CALLCLOBBERED(20)";
"MoveMemory";
"myword";
"CALLUSED(25)" [label="\N\nCALLUSED(25) = CALLUSED(25) + UNKNOWN\lCALLUSED(25) = *CALLUSED(25) + UNKNOWN\l"];
"CALLCLOBBERED(26)";
"_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "dt_26";
"STOREDANYTHING" -> "CALLUSED(19)";
"STOREDANYTHING" -> "myword";
"STOREDANYTHING" -> "CALLUSED(25)";
"dt" -> "dt_10";
"dt" -> "charssofar_11";
"dt_10" -> "ESCAPED";
"dt_26" -> "dt_10";
"charssofar_11" -> "ESCAPED";
"_1" -> "ESCAPED";
"_1" -> "CALLUSED(19)";
"_1" -> "myword";
"_1" -> "CALLUSED(25)";
"_1" -> "_4";
"CALLUSED(19)" -> "ESCAPED";
"myword" -> "ESCAPED";
"myword" -> "CALLUSED(25)";
"CALLUSED(25)" -> "_4";
"_4" -> "charssofar_11";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL myword }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
dt = { NONLOCAL }
nchars = { NONLOCAL } same as dt
dt_10 = { NONLOCAL }
dt_26 = { NONLOCAL }
charssofar_11 = { NULL ESCAPED NONLOCAL myword }
charssofar_25 = { NULL ESCAPED NONLOCAL myword } same as charssofar_11
abs_randwc = { }
_1 = { ESCAPED NONLOCAL }
wordptr_18 = { ESCAPED NONLOCAL } same as _1
wordcatarray = { ESCAPED NONLOCAL } same as _1
strlen = { }
CALLUSED(19) = { ESCAPED NONLOCAL }
CALLCLOBBERED(20) = { }
_2 = { ESCAPED NONLOCAL } same as CALLUSED(19)
_3 = { ESCAPED NONLOCAL } same as CALLUSED(19)
MoveMemory = { }
myword = { ESCAPED NONLOCAL }
CALLUSED(25) = { ESCAPED NONLOCAL myword }
CALLCLOBBERED(26) = { }
_4 = { ESCAPED NONLOCAL myword }
_5 = { ESCAPED NONLOCAL myword } same as _4
tomove_20 = { ESCAPED NONLOCAL myword } same as _4
_6 = { ESCAPED NONLOCAL myword } same as _4
_7 = { NULL ESCAPED NONLOCAL myword } same as charssofar_11
tomove_23 = { NULL ESCAPED NONLOCAL myword } same as charssofar_11
tomove_12 = { NULL ESCAPED NONLOCAL myword } same as charssofar_11
tomove.157_8 = { NULL ESCAPED NONLOCAL myword } same as charssofar_11
tomove.158_9 = { NULL ESCAPED NONLOCAL myword } same as charssofar_11


Alias information for create_text_line

Aliased symbols

myword, UID D.5383, char[40], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.5383 } (escaped)

Flow-insensitive points-to information

dt_10, points-to non-local, points-to NULL, points-to vars: { }
dt_15(D), points-to non-local, points-to NULL, points-to vars: { }
wordptr_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
dt_26, points-to non-local, points-to NULL, points-to vars: { }

create_text_line (farchar * dt, long int nchars)
{
  farchar * wordptr;
  char myword[40];
  long int tomove;
  long int charssofar;
  unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long int _6;
  long int _7;
  long unsigned int tomove.157_8;
  sizetype tomove.158_9;

  <bb 2> [0.00%]:

  <bb 3> [0.00%]:
  # dt_10 = PHI <dt_15(D)(2), dt_26(5)>
  # charssofar_11 = PHI <0(2), charssofar_25(5)>
  _1 = abs_randwc (50);
  wordptr_18 = wordcatarray[_1];
  _2 = strlen (wordptr_18);
  _3 = _2 + 1;
  MoveMemory (&myword, wordptr_18, _3);
  _4 = strlen (&myword);
  _5 = _4 + 1;
  tomove_20 = (long int) _5;
  _6 = tomove_20 + -1;
  myword[_6] = 32;
  _7 = charssofar_11 + tomove_20;
  if (_7 > nchars_22(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  tomove_23 = nchars_22(D) - charssofar_11;

  <bb 5> [0.00%]:
  # tomove_12 = PHI <tomove_20(3), tomove_23(4)>
  tomove.157_8 = (long unsigned int) tomove_12;
  MoveMemory (dt_10, &myword, tomove.157_8);
  charssofar_25 = charssofar_11 + tomove_12;
  tomove.158_9 = (sizetype) tomove_12;
  dt_26 = dt_10 + tomove.158_9;
  if (nchars_22(D) > charssofar_25)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  myword ={v} {CLOBBER};
  return;

}



;; Function create_text_block (create_text_block, funcdef_no=91, decl_uid=4664, cgraph_uid=91, symbol_order=116)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
tb = &NONLOCAL
tblen = &NONLOCAL
maxlinlen = &NONLOCAL
tb_10 = tb
tb_10 = tb_25
bytessofar_11 = &NULL
bytessofar_11 = bytessofar_27
_1 = maxlinlen
_2 = _1
_2 = &NONLOCAL
_3 = _2
ESCAPED = _3
_4 = NONLOCAL
_5 = _4
_5 = &NONLOCAL
linelen_20 = _5
_6 = bytessofar_11
_6 = linelen_20
linelen_22 = tblen
linelen_22 = bytessofar_11
linelen_12 = linelen_20
linelen_12 = linelen_22
linelen.155_7 = linelen_12
ESCAPED = tb_10
ESCAPED = linelen.155_7
_8 = linelen_12
_8 = &NONLOCAL
tb_24 = tb_10 + UNKNOWN
tb_25 = tb_10 + UNKNOWN
derefaddrtmp(29) = &NONLOCAL
*tb_24 = derefaddrtmp(29)
bytessofar_27 = bytessofar_11
bytessofar_27 = linelen_12

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"tb"[label="tb = { 5 }"];
"tblen"[label="tblen = { 5 }"];
"maxlinlen"[label="maxlinlen = { 5 }"];
"tb_10";
"tb_25";
"_1";
"_2"[label="_2 = { 5 }"];
"_3";
"abs_randwc";
"_4";
"_5"[label="_5 = { 5 }"];
"linelen_20";
"_6";
"linelen_12"[label="linelen_12 = { 1 }"];
"linelen.155_7";
"create_text_line";
"_8"[label="_8 = { 5 }"];
"tb_24";
"derefaddrtmp(29)"[label="derefaddrtmp(29) = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*tb";
"*tblen";
"*maxlinlen";
"*tb_10";
"*tb_25";
"*_1";
"*_2";
"*_3";
"*abs_randwc";
"*_6";
"*create_text_line";
"*_8";
"*tb_24";
"*derefaddrtmp(29)";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"tb_10" -> "ESCAPED";
"_3" -> "ESCAPED";
"linelen.155_7" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"tb" -> "tb_10";
"tb_25" -> "tb_10";
"maxlinlen" -> "_1";
"_1" -> "_2";
"_2" -> "_3";
"NONLOCAL" -> "_4";
"_4" -> "_5";
"_5" -> "linelen_20";
"linelen_12" -> "_6";
"linelen_20" -> "_6";
"tblen" -> "linelen_12";
"linelen_12" -> "linelen_12";
"linelen_12" -> "linelen_12";
"linelen_20" -> "linelen_12";
"linelen_12" -> "linelen_12";
"linelen_12" -> "linelen_12";
"linelen_12" -> "linelen.155_7";
"linelen_12" -> "_8";
"derefaddrtmp(29)" -> "*tb_24";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"tb";
"tb_10" [label="\N\ntb_25 = tb_10 + UNKNOWN\ltb_24 = tb_10 + UNKNOWN\l"];
"tb_25";
"bytessofar_11";
"abs_randwc";
"_4";
"create_text_line";
"tb_24" [label="\N\n*tb_24 = tb\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "tb_25";
"STOREDANYTHING" -> "tb_24";
"tb" -> "ESCAPED";
"tb" -> "tb_10";
"tb" -> "bytessofar_11";
"tb_10" -> "ESCAPED";
"tb_25" -> "tb_10";
"bytessofar_11" -> "ESCAPED";
"_4" -> "bytessofar_11";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _4\l"];
"STOREDANYTHING";
"INTEGER";
"tb";
"tb_10" [label="\N\ntb_25 = tb_10 + UNKNOWN\ltb_24 = tb_10 + UNKNOWN\l"];
"tb_25";
"bytessofar_11";
"abs_randwc";
"_4";
"create_text_line";
"tb_24" [label="\N\n*tb_24 = tb\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "tb_25";
"STOREDANYTHING" -> "tb_24";
"tb" -> "ESCAPED";
"tb" -> "tb_10";
"tb" -> "bytessofar_11";
"tb_10" -> "ESCAPED";
"tb_25" -> "tb_10";
"bytessofar_11" -> "ESCAPED";
"_4" -> "ESCAPED";
"_4" -> "bytessofar_11";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
tb = { NONLOCAL }
tblen = { NONLOCAL } same as tb
maxlinlen = { NONLOCAL } same as tb
tb_10 = { NONLOCAL }
tb_25 = { NONLOCAL }
bytessofar_11 = { NULL ESCAPED NONLOCAL }
bytessofar_27 = { NULL ESCAPED NONLOCAL } same as bytessofar_11
_1 = { NONLOCAL } same as tb
_2 = { NONLOCAL } same as tb
_3 = { NONLOCAL } same as tb
abs_randwc = { }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _4
linelen_20 = { ESCAPED NONLOCAL } same as _4
_6 = { NULL ESCAPED NONLOCAL } same as bytessofar_11
linelen_22 = { NULL ESCAPED NONLOCAL } same as bytessofar_11
linelen_12 = { NULL ESCAPED NONLOCAL } same as bytessofar_11
linelen.155_7 = { NULL ESCAPED NONLOCAL } same as bytessofar_11
create_text_line = { }
_8 = { NULL ESCAPED NONLOCAL } same as bytessofar_11
tb_24 = { NONLOCAL }
derefaddrtmp(29) = { NONLOCAL } same as tb


Alias information for create_text_block

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

tb_10, points-to non-local, points-to NULL, points-to vars: { }
tb_16(D), points-to non-local, points-to NULL, points-to vars: { }
tb_24, points-to non-local, points-to NULL, points-to vars: { }
tb_25, points-to non-local, points-to NULL, points-to vars: { }

create_text_block (farchar * tb, long unsigned int tblen, short unsigned int maxlinlen)
{
  long unsigned int linelen;
  long unsigned int bytessofar;
  int _1;
  int _2;
  unsigned int _3;
  unsigned int _4;
  unsigned int _5;
  long unsigned int _6;
  long int linelen.155_7;
  sizetype _8;

  <bb 2> [0.00%]:

  <bb 3> [0.00%]:
  # tb_10 = PHI <tb_16(D)(2), tb_25(7)>
  # bytessofar_11 = PHI <0(2), bytessofar_27(7)>
  _1 = (int) maxlinlen_18(D);
  _2 = _1 + -6;
  _3 = (unsigned int) _2;
  _4 = abs_randwc (_3);
  _5 = _4 + 6;
  linelen_20 = (long unsigned int) _5;
  _6 = bytessofar_11 + linelen_20;
  if (_6 > tblen_21(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  linelen_22 = tblen_21(D) - bytessofar_11;

  <bb 5> [0.00%]:
  # linelen_12 = PHI <linelen_20(3), linelen_22(4)>
  if (linelen_12 > 1)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  linelen.155_7 = (long int) linelen_12;
  create_text_line (tb_10, linelen.155_7);

  <bb 7> [0.00%]:
  _8 = linelen_12 + 18446744073709551615;
  tb_24 = tb_10 + _8;
  tb_25 = tb_10 + linelen_12;
  *tb_24 = 10;
  bytessofar_27 = bytessofar_11 + linelen_12;
  if (tblen_21(D) > bytessofar_27)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  return;

}



;; Function read_data_file (read_data_file, funcdef_no=110, decl_uid=4723, cgraph_uid=110, symbol_order=135)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
inpath = NONLOCAL
inpath.168_1 = inpath
ESCAPED = inpath.168_1
ESCAPED = &STRING
infile_47 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_115 = NONLOCAL
ESCAPED = infile_47
ESCAPED = &STRING
ESCAPED = &xinsize
ESCAPED = &yinsize
ESCAPED = &youtsize
vals_read_49 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = vals_read_49
_116 = NONLOCAL
ESCAPED = infile_47
ESCAPED = &STRING
numpats = NONLOCAL
ESCAPED = &numpats
vals_read_51 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = vals_read_51
_117 = NONLOCAL
numpats.169_2 = numpats
numpats = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = infile_47
ESCAPED = &STRING
ESCAPED = &val1
ESCAPED = &val2
ESCAPED = &val3
ESCAPED = &val4
ESCAPED = &val5
vals_read_83 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_118 = NONLOCAL
xinsize.170_3 = xinsize
element_84 = xinsize.170_3
element_84 = row_36
val1.171_4 = val1
_5 = val1.171_4
in_pats = NONLOCAL
in_pats = _5
ESCAPED = _5
element_86 = element_84
element_86 = &NONLOCAL
val2.172_6 = val2
_7 = val2.172_6
in_pats = _7
ESCAPED = _7
element_88 = element_84
element_88 = &NONLOCAL
val3.173_8 = val3
_9 = val3.173_8
in_pats = _9
ESCAPED = _9
element_90 = element_84
element_90 = &NONLOCAL
val4.174_10 = val4
_11 = val4.174_10
in_pats = _11
ESCAPED = _11
element_92 = element_84
element_92 = &NONLOCAL
val5.175_12 = val5
_13 = val5.175_12
in_pats = _13
ESCAPED = _13
element_94 = element_84
element_94 = &NONLOCAL
row_95 = row_36
row_95 = &NONLOCAL
row_36 = &NULL
row_36 = row_95
yinsize.176_14 = yinsize
_15 = in_pats
in_pats = &NONLOCAL
ESCAPED = &NONLOCAL
_16 = in_pats
in_pats = &NONLOCAL
ESCAPED = &NONLOCAL
i_81 = i_35
i_81 = &NONLOCAL
i_35 = &NULL
i_35 = i_81
ESCAPED = infile_47
ESCAPED = &STRING
ESCAPED = &val1
ESCAPED = &val2
ESCAPED = &val3
ESCAPED = &val4
ESCAPED = &val5
ESCAPED = &val6
ESCAPED = &val7
ESCAPED = &val8
vals_read_61 = NONLOCAL
val1.177_17 = val1
_18 = val1.177_17
out_pats = NONLOCAL
out_pats = _18
ESCAPED = _18
val2.178_19 = val2
_20 = val2.178_19
out_pats = _20
ESCAPED = _20
val3.179_21 = val3
_22 = val3.179_21
out_pats = _22
ESCAPED = _22
val4.180_23 = val4
_24 = val4.180_23
out_pats = _24
ESCAPED = _24
val5.181_25 = val5
_26 = val5.181_25
out_pats = _26
ESCAPED = _26
val6.182_27 = val6
_28 = val6.182_27
out_pats = _28
ESCAPED = _28
val7.183_29 = val7
_30 = val7.183_29
out_pats = _30
ESCAPED = _30
val8.184_31 = val8
_32 = val8.184_31
out_pats = _32
ESCAPED = _32
patt_78 = patt_34
patt_78 = &NONLOCAL
patt_34 = &NULL
patt_34 = patt_78
numpats.185_33 = numpats
ESCAPED = infile_47
_37 = &NONLOCAL
_37 = &NONLOCAL
_37 = &NONLOCAL
_37 = &NONLOCAL
_37 = &NULL
ESCAPED = _37

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 15 16 17 20 24 25 26 27 28 56 57 58 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"inpath.168_1";
"inpath";
"fopen";
"infile_47";
"__printf_chk";
"_115";
"*__isoc99_fscanf";
"xinsize";
"yinsize";
"youtsize";
"vals_read_49";
"_116";
"numpats"[label="numpats = { 5 }"];
"vals_read_51";
"_117";
"numpats.169_2";
"val1";
"val2";
"val3";
"val4";
"val5";
"vals_read_83";
"_118";
"xinsize.170_3";
"element_84";
"row_36"[label="row_36 = { 1 5 }"];
"val1.171_4";
"_5";
"in_pats"[label="in_pats = { 5 }"];
"element_86"[label="element_86 = { 5 }"];
"val2.172_6";
"_7";
"element_88"[label="element_88 = { 5 }"];
"val3.173_8";
"_9";
"element_90"[label="element_90 = { 5 }"];
"val4.174_10";
"_11";
"element_92"[label="element_92 = { 5 }"];
"val5.175_12";
"_13";
"element_94"[label="element_94 = { 5 }"];
"yinsize.176_14";
"_15";
"_16";
"i_81"[label="i_81 = { 1 5 }"];
"val6";
"val7";
"val8";
"vals_read_61";
"val1.177_17";
"_18";
"out_pats";
"val2.178_19";
"_20";
"val3.179_21";
"_22";
"val4.180_23";
"_24";
"val5.181_25";
"_26";
"val6.182_27";
"_28";
"val7.183_29";
"_30";
"val8.184_31";
"_32";
"patt_78"[label="patt_78 = { 1 5 }"];
"numpats.185_33";
"fclose";
"_37"[label="_37 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*fopen";
"*__printf_chk";
"*_115";
"**__isoc99_fscanf";
"*xinsize";
"*yinsize";
"*youtsize";
"*_116";
"*numpats";
"*_117";
"*numpats.169_2";
"*val1";
"*val2";
"*val3";
"*val4";
"*val5";
"*vals_read_83";
"*_118";
"*xinsize.170_3";
"*element_84";
"*row_36";
"*val1.171_4";
"*_5";
"*in_pats";
"*element_86";
"*val2.172_6";
"*_7";
"*element_88";
"*val3.173_8";
"*_9";
"*element_90";
"*val4.174_10";
"*_11";
"*element_92";
"*val5.175_12";
"*_13";
"*element_94";
"*row_95";
"*yinsize.176_14";
"*_15";
"*_16";
"*i_81";
"*i_35";
"*val6";
"*val7";
"*val8";
"*vals_read_61";
"*val1.177_17";
"*_18";
"*out_pats";
"*val2.178_19";
"*_20";
"*val3.179_21";
"*_22";
"*val4.180_23";
"*_24";
"*val5.181_25";
"*_26";
"*val6.182_27";
"*_28";
"*val7.183_29";
"*_30";
"*val8.184_31";
"*_32";
"*patt_78";
"*patt_34";
"*numpats.185_33";
"*fclose";
"*_37";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"inpath.168_1" -> "ESCAPED";
"infile_47" -> "ESCAPED";
"vals_read_49" -> "ESCAPED";
"vals_read_51" -> "ESCAPED";
"_5" -> "ESCAPED";
"_7" -> "ESCAPED";
"_9" -> "ESCAPED";
"_11" -> "ESCAPED";
"_13" -> "ESCAPED";
"_18" -> "ESCAPED";
"_20" -> "ESCAPED";
"_22" -> "ESCAPED";
"_24" -> "ESCAPED";
"_26" -> "ESCAPED";
"_28" -> "ESCAPED";
"_30" -> "ESCAPED";
"_32" -> "ESCAPED";
"_37" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"inpath" -> "inpath.168_1";
"NONLOCAL" -> "inpath";
"NONLOCAL" -> "infile_47";
"NONLOCAL" -> "_115";
"NONLOCAL" -> "vals_read_49";
"NONLOCAL" -> "_116";
"NONLOCAL" -> "numpats";
"NONLOCAL" -> "vals_read_51";
"NONLOCAL" -> "_117";
"numpats" -> "numpats.169_2";
"NONLOCAL" -> "vals_read_83";
"NONLOCAL" -> "_118";
"xinsize" -> "xinsize.170_3";
"xinsize.170_3" -> "element_84";
"row_36" -> "element_84";
"row_36" -> "row_36";
"row_36" -> "row_36";
"val1" -> "val1.171_4";
"val1.171_4" -> "_5";
"NONLOCAL" -> "in_pats";
"_5" -> "in_pats";
"_7" -> "in_pats";
"_9" -> "in_pats";
"_11" -> "in_pats";
"_13" -> "in_pats";
"element_84" -> "element_86";
"val2" -> "val2.172_6";
"val2.172_6" -> "_7";
"element_84" -> "element_88";
"val3" -> "val3.173_8";
"val3.173_8" -> "_9";
"element_84" -> "element_90";
"val4" -> "val4.174_10";
"val4.174_10" -> "_11";
"element_84" -> "element_92";
"val5" -> "val5.175_12";
"val5.175_12" -> "_13";
"element_84" -> "element_94";
"yinsize" -> "yinsize.176_14";
"in_pats" -> "_15";
"in_pats" -> "_16";
"i_81" -> "i_81";
"i_81" -> "i_81";
"NONLOCAL" -> "vals_read_61";
"val1" -> "val1.177_17";
"val1.177_17" -> "_18";
"NONLOCAL" -> "out_pats";
"_18" -> "out_pats";
"_20" -> "out_pats";
"_22" -> "out_pats";
"_24" -> "out_pats";
"_26" -> "out_pats";
"_28" -> "out_pats";
"_30" -> "out_pats";
"_32" -> "out_pats";
"val2" -> "val2.178_19";
"val2.178_19" -> "_20";
"val3" -> "val3.179_21";
"val3.179_21" -> "_22";
"val4" -> "val4.180_23";
"val4.180_23" -> "_24";
"val5" -> "val5.181_25";
"val5.181_25" -> "_26";
"val6" -> "val6.182_27";
"val6.182_27" -> "_28";
"val7" -> "val7.183_29";
"val7.183_29" -> "_30";
"val8" -> "val8.184_31";
"val8.184_31" -> "_32";
"patt_78" -> "patt_78";
"patt_78" -> "patt_78";
"numpats" -> "numpats.185_33";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"inpath";
"fopen";
"__printf_chk";
"*__isoc99_fscanf";
"youtsize";
"numpats.169_2";
"xinsize.170_3";
"element_84";
"row_36";
"val1.171_4";
"in_pats";
"val2.172_6";
"val3.173_8";
"val4.174_10";
"val5.175_12";
"yinsize.176_14";
"out_pats";
"val6.182_27";
"val7.183_29";
"val8.184_31";
"fclose";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "xinsize.170_3";
"STOREDANYTHING" -> "yinsize.176_14";
"STOREDANYTHING" -> "youtsize";
"STOREDANYTHING" -> "numpats.169_2";
"STOREDANYTHING" -> "val1.171_4";
"STOREDANYTHING" -> "val2.172_6";
"STOREDANYTHING" -> "val3.173_8";
"STOREDANYTHING" -> "val4.174_10";
"STOREDANYTHING" -> "val5.175_12";
"STOREDANYTHING" -> "val6.182_27";
"STOREDANYTHING" -> "val7.183_29";
"STOREDANYTHING" -> "val8.184_31";
"inpath" -> "ESCAPED";
"inpath" -> "numpats.169_2";
"inpath" -> "in_pats";
"inpath" -> "out_pats";
"xinsize.170_3" -> "element_84";
"row_36" -> "ESCAPED";
"row_36" -> "element_84";
"val1.171_4" -> "ESCAPED";
"val1.171_4" -> "in_pats";
"val1.171_4" -> "out_pats";
"val2.172_6" -> "ESCAPED";
"val2.172_6" -> "in_pats";
"val2.172_6" -> "out_pats";
"val3.173_8" -> "ESCAPED";
"val3.173_8" -> "in_pats";
"val3.173_8" -> "out_pats";
"val4.174_10" -> "ESCAPED";
"val4.174_10" -> "in_pats";
"val4.174_10" -> "out_pats";
"val5.175_12" -> "ESCAPED";
"val5.175_12" -> "in_pats";
"val5.175_12" -> "out_pats";
"val6.182_27" -> "ESCAPED";
"val6.182_27" -> "out_pats";
"val7.183_29" -> "ESCAPED";
"val7.183_29" -> "out_pats";
"val8.184_31" -> "ESCAPED";
"val8.184_31" -> "out_pats";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = inpath\l"];
"STOREDANYTHING";
"INTEGER";
"inpath";
"fopen";
"__printf_chk";
"*__isoc99_fscanf";
"youtsize";
"numpats.169_2";
"xinsize.170_3";
"element_84";
"row_36";
"val1.171_4";
"in_pats";
"val2.172_6";
"val3.173_8";
"val4.174_10";
"val5.175_12";
"yinsize.176_14";
"out_pats";
"val6.182_27";
"val7.183_29";
"val8.184_31";
"fclose";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "xinsize.170_3";
"STOREDANYTHING" -> "yinsize.176_14";
"STOREDANYTHING" -> "youtsize";
"STOREDANYTHING" -> "numpats.169_2";
"STOREDANYTHING" -> "val1.171_4";
"STOREDANYTHING" -> "val2.172_6";
"STOREDANYTHING" -> "val3.173_8";
"STOREDANYTHING" -> "val4.174_10";
"STOREDANYTHING" -> "val5.175_12";
"STOREDANYTHING" -> "val6.182_27";
"STOREDANYTHING" -> "val7.183_29";
"STOREDANYTHING" -> "val8.184_31";
"inpath" -> "ESCAPED";
"inpath" -> "youtsize";
"inpath" -> "numpats.169_2";
"inpath" -> "numpats.169_2";
"inpath" -> "xinsize.170_3";
"inpath" -> "val1.171_4";
"inpath" -> "in_pats";
"inpath" -> "val2.172_6";
"inpath" -> "val3.173_8";
"inpath" -> "val4.174_10";
"inpath" -> "val5.175_12";
"inpath" -> "yinsize.176_14";
"inpath" -> "out_pats";
"inpath" -> "val6.182_27";
"inpath" -> "val7.183_29";
"inpath" -> "val8.184_31";
"youtsize" -> "ESCAPED";
"numpats.169_2" -> "ESCAPED";
"xinsize.170_3" -> "ESCAPED";
"xinsize.170_3" -> "element_84";
"row_36" -> "ESCAPED";
"row_36" -> "element_84";
"val1.171_4" -> "ESCAPED";
"val1.171_4" -> "in_pats";
"val1.171_4" -> "out_pats";
"val2.172_6" -> "ESCAPED";
"val2.172_6" -> "in_pats";
"val2.172_6" -> "out_pats";
"val3.173_8" -> "ESCAPED";
"val3.173_8" -> "in_pats";
"val3.173_8" -> "out_pats";
"val4.174_10" -> "ESCAPED";
"val4.174_10" -> "in_pats";
"val4.174_10" -> "out_pats";
"val5.175_12" -> "ESCAPED";
"val5.175_12" -> "in_pats";
"val5.175_12" -> "out_pats";
"yinsize.176_14" -> "ESCAPED";
"val6.182_27" -> "ESCAPED";
"val6.182_27" -> "out_pats";
"val7.183_29" -> "ESCAPED";
"val7.183_29" -> "out_pats";
"val8.184_31" -> "ESCAPED";
"val8.184_31" -> "out_pats";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL xinsize yinsize youtsize numpats val1 val2 val3 val4 val5 val6 val7 val8 }
NONLOCAL = { ESCAPED NONLOCAL } same as inpath
STOREDANYTHING = { }
INTEGER = { ANYTHING }
inpath.168_1 = { ESCAPED NONLOCAL } same as inpath
inpath = { ESCAPED NONLOCAL }
fopen = { }
infile_47 = { ESCAPED NONLOCAL } same as inpath
__printf_chk = { }
_115 = { ESCAPED NONLOCAL } same as inpath
*__isoc99_fscanf = { }
xinsize = { ESCAPED NONLOCAL } same as xinsize.170_3
yinsize = { ESCAPED NONLOCAL } same as yinsize.176_14
youtsize = { ESCAPED NONLOCAL }
vals_read_49 = { ESCAPED NONLOCAL } same as inpath
_116 = { ESCAPED NONLOCAL } same as inpath
numpats = { ESCAPED NONLOCAL } same as numpats.169_2
vals_read_51 = { ESCAPED NONLOCAL } same as inpath
_117 = { ESCAPED NONLOCAL } same as inpath
numpats.169_2 = { ESCAPED NONLOCAL }
val1 = { ESCAPED NONLOCAL } same as val1.171_4
val2 = { ESCAPED NONLOCAL } same as val2.172_6
val3 = { ESCAPED NONLOCAL } same as val3.173_8
val4 = { ESCAPED NONLOCAL } same as val4.174_10
val5 = { ESCAPED NONLOCAL } same as val5.175_12
vals_read_83 = { ESCAPED NONLOCAL } same as inpath
_118 = { ESCAPED NONLOCAL } same as inpath
xinsize.170_3 = { ESCAPED NONLOCAL }
element_84 = { NULL ESCAPED NONLOCAL }
row_36 = { NULL NONLOCAL }
val1.171_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as val1.171_4
in_pats = { ESCAPED NONLOCAL }
element_86 = { NULL ESCAPED NONLOCAL } same as element_84
val2.172_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as val2.172_6
element_88 = { NULL ESCAPED NONLOCAL } same as element_84
val3.173_8 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL } same as val3.173_8
element_90 = { NULL ESCAPED NONLOCAL } same as element_84
val4.174_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as val4.174_10
element_92 = { NULL ESCAPED NONLOCAL } same as element_84
val5.175_12 = { ESCAPED NONLOCAL }
_13 = { ESCAPED NONLOCAL } same as val5.175_12
element_94 = { NULL ESCAPED NONLOCAL } same as element_84
row_95 = { NULL NONLOCAL } same as row_36
yinsize.176_14 = { ESCAPED NONLOCAL }
_15 = { ESCAPED NONLOCAL } same as in_pats
_16 = { ESCAPED NONLOCAL } same as in_pats
i_81 = { NULL NONLOCAL } same as row_36
i_35 = { NULL NONLOCAL } same as row_36
val6 = { ESCAPED NONLOCAL } same as val6.182_27
val7 = { ESCAPED NONLOCAL } same as val7.183_29
val8 = { ESCAPED NONLOCAL } same as val8.184_31
vals_read_61 = { ESCAPED NONLOCAL } same as inpath
val1.177_17 = { ESCAPED NONLOCAL } same as val1.171_4
_18 = { ESCAPED NONLOCAL } same as val1.171_4
out_pats = { ESCAPED NONLOCAL }
val2.178_19 = { ESCAPED NONLOCAL } same as val2.172_6
_20 = { ESCAPED NONLOCAL } same as val2.172_6
val3.179_21 = { ESCAPED NONLOCAL } same as val3.173_8
_22 = { ESCAPED NONLOCAL } same as val3.173_8
val4.180_23 = { ESCAPED NONLOCAL } same as val4.174_10
_24 = { ESCAPED NONLOCAL } same as val4.174_10
val5.181_25 = { ESCAPED NONLOCAL } same as val5.175_12
_26 = { ESCAPED NONLOCAL } same as val5.175_12
val6.182_27 = { ESCAPED NONLOCAL }
_28 = { ESCAPED NONLOCAL } same as val6.182_27
val7.183_29 = { ESCAPED NONLOCAL }
_30 = { ESCAPED NONLOCAL } same as val7.183_29
val8.184_31 = { ESCAPED NONLOCAL }
_32 = { ESCAPED NONLOCAL } same as val8.184_31
patt_78 = { NULL NONLOCAL } same as row_36
patt_34 = { NULL NONLOCAL } same as row_36
numpats.185_33 = { ESCAPED NONLOCAL } same as numpats.169_2
fclose = { }
_37 = { NULL NONLOCAL } same as row_36


Alias information for read_data_file

Aliased symbols

val8, UID D.5654, int, is addressable
val7, UID D.5653, int, is addressable
val6, UID D.5652, int, is addressable
val5, UID D.5651, int, is addressable
val4, UID D.5650, int, is addressable
val3, UID D.5649, int, is addressable
val2, UID D.5648, int, is addressable
val1, UID D.5647, int, is addressable
youtsize, UID D.5641, int, is addressable
yinsize, UID D.5640, int, is addressable
xinsize, UID D.5639, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.4696 D.5639 D.5640 D.5641 D.5647 D.5648 D.5649 D.5650 D.5651 D.5652 D.5653 D.5654 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

inpath.168_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
infile_47, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

read_data_file ()
{
  int D.6523;
  int D.6521;
  int D.6519;
  int D.6517;
  int val8;
  int val7;
  int val6;
  int val5;
  int val4;
  int val3;
  int val2;
  int val1;
  int vals_read;
  int row;
  int i;
  int element;
  int patt;
  int youtsize;
  int yinsize;
  int xinsize;
  struct FILE * infile;
  char * inpath.168_1;
  int numpats.169_2;
  int xinsize.170_3;
  int val1.171_4;
  double _5;
  int val2.172_6;
  double _7;
  int val3.173_8;
  double _9;
  int val4.174_10;
  double _11;
  int val5.175_12;
  double _13;
  int yinsize.176_14;
  double _15;
  double _16;
  int val1.177_17;
  double _18;
  int val2.178_19;
  double _20;
  int val3.179_21;
  double _22;
  int val4.180_23;
  double _24;
  int val5.181_25;
  double _26;
  int val6.182_27;
  double _28;
  int val7.183_29;
  double _30;
  int val8.184_31;
  double _32;
  int numpats.185_33;
  int _37;
  int _115;
  int _116;
  int _117;
  int _118;

  <bb 2> [0.00%]:
  inpath.168_1 = inpath;
  infile_47 = fopen (inpath.168_1, "r");
  if (infile_47 == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  _115 = __printf_chk (1, "\n CPU:NNET--error in opening file!");
  goto <bb 24>; [0.00%]

  <bb 4> [0.00%]:
  vals_read_49 = fscanf (infile_47, "%d  %d  %d", &xinsize, &yinsize, &youtsize);
  if (vals_read_49 != 3)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [100.00%]:
  _116 = __printf_chk (1, "\n CPU:NNET -- Should read 3 items in line one; did read %d", vals_read_49);
  goto <bb 24>; [0.00%]

  <bb 6> [0.00%]:
  vals_read_51 = fscanf (infile_47, "%d", &numpats);
  if (vals_read_51 != 1)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [100.00%]:
  _117 = __printf_chk (1, "\n CPU:NNET -- Should read 1 item in line 2; did read %d", vals_read_51);
  goto <bb 24>; [0.00%]

  <bb 8> [0.00%]:
  numpats.169_2 = numpats;
  if (numpats.169_2 > 10)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  numpats = 10;

  <bb 10> [0.00%]:
  goto <bb 22>; [0.00%]

  <bb 11> [0.00%]:
  vals_read_83 = fscanf (infile_47, "%d  %d  %d  %d  %d", &val1, &val2, &val3, &val4, &val5);
  if (vals_read_83 != 5)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [100.00%]:
  _118 = __printf_chk (1, "\n CPU:NNET -- failure in reading input!");
  goto <bb 24>; [0.00%]

  <bb 13> [0.00%]:
  xinsize.170_3 = xinsize;
  element_84 = xinsize.170_3 * row_36;
  val1.171_4 = val1;
  _5 = (double) val1.171_4;
  in_pats[patt_34][element_84] = _5;
  element_86 = element_84 + 1;
  val2.172_6 = val2;
  _7 = (double) val2.172_6;
  in_pats[patt_34][element_86] = _7;
  element_88 = element_84 + 2;
  val3.173_8 = val3;
  _9 = (double) val3.173_8;
  in_pats[patt_34][element_88] = _9;
  element_90 = element_84 + 3;
  val4.174_10 = val4;
  _11 = (double) val4.174_10;
  in_pats[patt_34][element_90] = _11;
  element_92 = element_84 + 4;
  val5.175_12 = val5;
  _13 = (double) val5.175_12;
  in_pats[patt_34][element_92] = _13;
  element_94 = element_84 + 5;
  row_95 = row_36 + 1;

  <bb 14> [0.00%]:
  # row_36 = PHI <0(22), row_95(13)>
  yinsize.176_14 = yinsize;
  if (yinsize.176_14 > row_36)
    goto <bb 11>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 15> [0.00%]:
  _15 = in_pats[patt_34][i_35];
  if (_15 >= 9.0000000000000002220446049250313080847263336181640625e-1)
    goto <bb 16>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 16> [0.00%]:
  in_pats[patt_34][i_35] = 9.0000000000000002220446049250313080847263336181640625e-1;

  <bb 17> [0.00%]:
  _16 = in_pats[patt_34][i_35];
  if (_16 <= 1.000000000000000055511151231257827021181583404541015625e-1)
    goto <bb 18>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 18> [0.00%]:
  in_pats[patt_34][i_35] = 1.000000000000000055511151231257827021181583404541015625e-1;

  <bb 19> [0.00%]:
  i_81 = i_35 + 1;

  <bb 20> [0.00%]:
  # i_35 = PHI <0(14), i_81(19)>
  if (i_35 <= 34)
    goto <bb 15>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 21> [0.00%]:
  vals_read_61 = fscanf (infile_47, "%d  %d  %d  %d  %d  %d  %d  %d", &val1, &val2, &val3, &val4, &val5, &val6, &val7, &val8);
  val1.177_17 = val1;
  _18 = (double) val1.177_17;
  out_pats[patt_34][0] = _18;
  val2.178_19 = val2;
  _20 = (double) val2.178_19;
  out_pats[patt_34][1] = _20;
  val3.179_21 = val3;
  _22 = (double) val3.179_21;
  out_pats[patt_34][2] = _22;
  val4.180_23 = val4;
  _24 = (double) val4.180_23;
  out_pats[patt_34][3] = _24;
  val5.181_25 = val5;
  _26 = (double) val5.181_25;
  out_pats[patt_34][4] = _26;
  val6.182_27 = val6;
  _28 = (double) val6.182_27;
  out_pats[patt_34][5] = _28;
  val7.183_29 = val7;
  _30 = (double) val7.183_29;
  out_pats[patt_34][6] = _30;
  val8.184_31 = val8;
  _32 = (double) val8.184_31;
  out_pats[patt_34][7] = _32;
  patt_78 = patt_34 + 1;

  <bb 22> [0.00%]:
  # patt_34 = PHI <0(10), patt_78(21)>
  numpats.185_33 = numpats;
  if (numpats.185_33 > patt_34)
    goto <bb 14>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 23> [0.00%]:
  fclose (infile_47);

  <bb 24> [0.00%]:
  # _37 = PHI <-1(3), -1(5), -1(7), -1(12), 0(23)>
  xinsize ={v} {CLOBBER};
  yinsize ={v} {CLOBBER};
  youtsize ={v} {CLOBBER};
  val1 ={v} {CLOBBER};
  val2 ={v} {CLOBBER};
  val3 ={v} {CLOBBER};
  val4 ={v} {CLOBBER};
  val5 ={v} {CLOBBER};
  val6 ={v} {CLOBBER};
  val7 ={v} {CLOBBER};
  val8 ={v} {CLOBBER};
  return _37;

}



;; Function do_mid_forward (do_mid_forward, funcdef_no=97, decl_uid=4705, cgraph_uid=97, symbol_order=122)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
patt = &NONLOCAL
mid_wts = NONLOCAL
_1 = mid_wts
in_pats = NONLOCAL
_2 = in_pats
_3 = _1
_3 = _2
sum_20 = _3
sum_20 = sum_7
i_21 = i_9
i_21 = &NONLOCAL
sum_7 = &NONLOCAL
sum_7 = sum_20
i_9 = &NULL
i_9 = i_21
_4 = sum_7
ESCAPED = _4
_5 = NONLOCAL
_6 = _5
_6 = &NONLOCAL
sum_16 = &NONLOCAL
sum_16 = _6
mid_out = NONLOCAL
mid_out = sum_16
ESCAPED = sum_16
neurode_18 = neurode_8
neurode_18 = &NONLOCAL
neurode_8 = &NULL
neurode_8 = neurode_18

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"patt"[label="patt = { 5 }"];
"_1";
"mid_wts";
"_2";
"in_pats";
"_3";
"sum_7"[label="sum_7 = { 5 }"];
"i_21"[label="i_21 = { 1 5 }"];
"_4";
"exp";
"_5";
"_6"[label="_6 = { 5 }"];
"sum_16"[label="sum_16 = { 5 }"];
"mid_out";
"neurode_18"[label="neurode_18 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*patt";
"*i_21";
"*i_9";
"*exp";
"*mid_out";
"*neurode_18";
"*neurode_8";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_4" -> "ESCAPED";
"sum_16" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"mid_wts" -> "_1";
"NONLOCAL" -> "mid_wts";
"in_pats" -> "_2";
"NONLOCAL" -> "in_pats";
"_1" -> "_3";
"_2" -> "_3";
"_3" -> "sum_7";
"sum_7" -> "sum_7";
"sum_7" -> "sum_7";
"i_21" -> "i_21";
"i_21" -> "i_21";
"sum_7" -> "_4";
"NONLOCAL" -> "_5";
"_5" -> "_6";
"_6" -> "sum_16";
"NONLOCAL" -> "mid_out";
"sum_16" -> "mid_out";
"neurode_18" -> "neurode_18";
"neurode_18" -> "neurode_18";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"patt";
"mid_wts";
"i_21";
"exp";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"mid_wts" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = mid_wts\l"];
"STOREDANYTHING";
"INTEGER";
"patt";
"mid_wts";
"i_21";
"exp";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"mid_wts" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as mid_wts
STOREDANYTHING = { }
INTEGER = { ANYTHING }
patt = { NONLOCAL }
_1 = { ESCAPED NONLOCAL } same as mid_wts
mid_wts = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as mid_wts
in_pats = { ESCAPED NONLOCAL } same as mid_wts
_3 = { ESCAPED NONLOCAL } same as mid_wts
sum_20 = { ESCAPED NONLOCAL } same as mid_wts
sum_7 = { ESCAPED NONLOCAL } same as mid_wts
i_21 = { NULL NONLOCAL }
i_9 = { NULL NONLOCAL } same as i_21
_4 = { ESCAPED NONLOCAL } same as mid_wts
exp = { }
_5 = { ESCAPED NONLOCAL } same as mid_wts
_6 = { ESCAPED NONLOCAL } same as mid_wts
sum_16 = { ESCAPED NONLOCAL } same as mid_wts
mid_out = { ESCAPED NONLOCAL } same as mid_wts
neurode_18 = { NULL NONLOCAL } same as i_21
neurode_8 = { NULL NONLOCAL } same as i_21


Alias information for do_mid_forward

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


do_mid_forward (int patt)
{
  int i;
  int neurode;
  double sum;
  double _1;
  double _2;
  double _3;
  double _4;
  double _5;
  double _6;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = mid_wts[neurode_8][i_9];
  _2 = in_pats[patt_19(D)][i_9];
  _3 = _1 * _2;
  sum_20 = _3 + sum_7;
  i_21 = i_9 + 1;

  <bb 4> [0.00%]:
  # sum_7 = PHI <0.0(6), sum_20(3)>
  # i_9 = PHI <0(6), i_21(3)>
  if (i_9 <= 34)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  _4 = -sum_7;
  _5 = exp (_4);
  _6 = _5 + 1.0e+0;
  sum_16 = 1.0e+0 / _6;
  mid_out[neurode_8] = sum_16;
  neurode_18 = neurode_8 + 1;

  <bb 6> [0.00%]:
  # neurode_8 = PHI <0(2), neurode_18(5)>
  if (neurode_8 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function do_out_forward (do_out_forward, funcdef_no=98, decl_uid=4706, cgraph_uid=98, symbol_order=123)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
out_wts = NONLOCAL
_1 = out_wts
mid_out = NONLOCAL
_2 = mid_out
_3 = _1
_3 = _2
sum_19 = _3
sum_19 = sum_7
i_20 = i_9
i_20 = &NONLOCAL
sum_7 = &NONLOCAL
sum_7 = sum_19
i_9 = &NULL
i_9 = i_20
_4 = sum_7
ESCAPED = _4
_5 = NONLOCAL
_6 = _5
_6 = &NONLOCAL
sum_16 = &NONLOCAL
sum_16 = _6
out_out = NONLOCAL
out_out = sum_16
ESCAPED = sum_16
neurode_18 = neurode_8
neurode_18 = &NONLOCAL
neurode_8 = &NULL
neurode_8 = neurode_18

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_1";
"out_wts";
"_2";
"mid_out";
"_3";
"sum_7"[label="sum_7 = { 5 }"];
"i_20"[label="i_20 = { 1 5 }"];
"_4";
"exp";
"_5";
"_6"[label="_6 = { 5 }"];
"sum_16"[label="sum_16 = { 5 }"];
"out_out";
"neurode_18"[label="neurode_18 = { 1 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*i_20";
"*i_9";
"*exp";
"*out_out";
"*neurode_18";
"*neurode_8";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_4" -> "ESCAPED";
"sum_16" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"out_wts" -> "_1";
"NONLOCAL" -> "out_wts";
"mid_out" -> "_2";
"NONLOCAL" -> "mid_out";
"_1" -> "_3";
"_2" -> "_3";
"_3" -> "sum_7";
"sum_7" -> "sum_7";
"sum_7" -> "sum_7";
"i_20" -> "i_20";
"i_20" -> "i_20";
"sum_7" -> "_4";
"NONLOCAL" -> "_5";
"_5" -> "_6";
"_6" -> "sum_16";
"NONLOCAL" -> "out_out";
"sum_16" -> "out_out";
"neurode_18" -> "neurode_18";
"neurode_18" -> "neurode_18";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"out_wts";
"i_20";
"exp";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"out_wts" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = out_wts\l"];
"STOREDANYTHING";
"INTEGER";
"out_wts";
"i_20";
"exp";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"out_wts" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as out_wts
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_1 = { ESCAPED NONLOCAL } same as out_wts
out_wts = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as out_wts
mid_out = { ESCAPED NONLOCAL } same as out_wts
_3 = { ESCAPED NONLOCAL } same as out_wts
sum_19 = { ESCAPED NONLOCAL } same as out_wts
sum_7 = { ESCAPED NONLOCAL } same as out_wts
i_20 = { NULL NONLOCAL }
i_9 = { NULL NONLOCAL } same as i_20
_4 = { ESCAPED NONLOCAL } same as out_wts
exp = { }
_5 = { ESCAPED NONLOCAL } same as out_wts
_6 = { ESCAPED NONLOCAL } same as out_wts
sum_16 = { ESCAPED NONLOCAL } same as out_wts
out_out = { ESCAPED NONLOCAL } same as out_wts
neurode_18 = { NULL NONLOCAL } same as i_20
neurode_8 = { NULL NONLOCAL } same as i_20


Alias information for do_out_forward

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


do_out_forward ()
{
  int i;
  int neurode;
  double sum;
  double _1;
  double _2;
  double _3;
  double _4;
  double _5;
  double _6;

  <bb 2> [0.00%]:
  goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _1 = out_wts[neurode_8][i_9];
  _2 = mid_out[i_9];
  _3 = _1 * _2;
  sum_19 = _3 + sum_7;
  i_20 = i_9 + 1;

  <bb 4> [0.00%]:
  # sum_7 = PHI <0.0(6), sum_19(3)>
  # i_9 = PHI <0(6), i_20(3)>
  if (i_9 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  _4 = -sum_7;
  _5 = exp (_4);
  _6 = _5 + 1.0e+0;
  sum_16 = 1.0e+0 / _6;
  out_out[neurode_8] = sum_16;
  neurode_18 = neurode_8 + 1;

  <bb 6> [0.00%]:
  # neurode_8 = PHI <0(2), neurode_18(5)>
  if (neurode_8 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return;

}



;; Function do_forward_pass (do_forward_pass, funcdef_no=99, decl_uid=4710, cgraph_uid=99, symbol_order=124)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
patt = &NONLOCAL
ESCAPED = patt

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"patt"[label="patt = { 5 }"];
"do_mid_forward";
"do_out_forward";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*patt";
"*do_mid_forward";
"*do_out_forward";

  // Edges in the constraint graph:
"patt" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"patt";
"do_mid_forward";
"do_out_forward";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"patt" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"patt";
"do_mid_forward";
"do_out_forward";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"patt" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
patt = { NONLOCAL }
do_mid_forward = { }
do_out_forward = { }


Alias information for do_forward_pass

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


do_forward_pass (int patt)
{
  <bb 2> [0.00%]:
  do_mid_forward (patt_2(D));
  do_out_forward ();
  return;

}



;; Function DoNNetIteration (DoNNetIteration, funcdef_no=96, decl_uid=4703, cgraph_uid=96, symbol_order=121)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
nloops = &NONLOCAL
elapsed_16 = NONLOCAL
iteration_count = NONLOCAL
iteration_count = &NONLOCAL
ESCAPED = &NONLOCAL
learned = NONLOCAL
learned = &NULL
ESCAPED = &NULL
numpasses = NONLOCAL
numpasses = &NULL
ESCAPED = &NULL
worst_error = NONLOCAL
worst_error = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = patt_10
ESCAPED = patt_10
iteration_count.186_1 = iteration_count
_2 = iteration_count.186_1
_2 = &NONLOCAL
iteration_count = _2
ESCAPED = _2
patt_35 = patt_10
patt_35 = &NONLOCAL
patt_10 = &NULL
patt_10 = patt_35
numpats = NONLOCAL
numpats.187_3 = numpats
numpasses.188_4 = numpasses
_5 = numpasses.188_4
_5 = &NONLOCAL
numpasses = _5
ESCAPED = _5
_6 = NONLOCAL
learned = _6
ESCAPED = _6
learned.189_7 = learned
nloops_9 = nloops
nloops_9 = nloops_18
nloops.190_8 = nloops_9
nloops_18 = nloops_9
nloops_18 = &NONLOCAL
ESCAPED = elapsed_16
_20 = NONLOCAL
ESCAPED = _20

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"nloops"[label="nloops = { 5 }"];
"StartStopwatch";
"elapsed_16";
"randomize_wts";
"zero_changes";
"learned"[label="learned = { 1 }"];
"worst_error"[label="worst_error = { 5 }"];
"move_wt_changes";
"do_mid_forward";
"patt_10"[label="patt_10 = { 1 5 }"];
"do_out_forward";
"do_back_pass";
"_2"[label="_2 = { 5 }"];
"numpats.187_3";
"numpats";
"_5"[label="_5 = { 1 5 }"];
"check_out_error";
"_6";
"learned.189_7";
"nloops_9"[label="nloops_9 = { 5 }"];
"nloops.190_8";
"StopStopwatch";
"_20";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*nloops";
"*StartStopwatch";
"*randomize_wts";
"*zero_changes";
"*learned";
"*worst_error";
"*move_wt_changes";
"*do_mid_forward";
"*patt_10";
"*do_out_forward";
"*do_back_pass";
"*numpats.187_3";
"*numpats";
"*check_out_error";
"*learned.189_7";
"*nloops_9";
"*nloops_18";
"*nloops.190_8";
"*StopStopwatch";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"elapsed_16" -> "ESCAPED";
"patt_10" -> "ESCAPED";
"_2" -> "ESCAPED";
"_5" -> "ESCAPED";
"_6" -> "ESCAPED";
"_20" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "elapsed_16";
"NONLOCAL" -> "learned";
"_6" -> "learned";
"NONLOCAL" -> "worst_error";
"patt_10" -> "patt_10";
"patt_10" -> "patt_10";
"NONLOCAL" -> "_2";
"_2" -> "_2";
"_2" -> "_2";
"_2" -> "_2";
"numpats" -> "numpats.187_3";
"NONLOCAL" -> "numpats";
"NONLOCAL" -> "_5";
"_5" -> "_5";
"_5" -> "_5";
"_5" -> "_5";
"NONLOCAL" -> "_6";
"learned" -> "learned.189_7";
"nloops" -> "nloops_9";
"nloops_9" -> "nloops_9";
"nloops_9" -> "nloops_9";
"nloops_9" -> "nloops.190_8";
"NONLOCAL" -> "_20";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"nloops";
"StartStopwatch";
"elapsed_16";
"randomize_wts";
"zero_changes";
"learned";
"move_wt_changes";
"do_mid_forward";
"patt_10";
"do_out_forward";
"do_back_pass";
"check_out_error";
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"elapsed_16" -> "ESCAPED";
"elapsed_16" -> "learned";
"learned" -> "ESCAPED";
"patt_10" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = elapsed_16\l"];
"STOREDANYTHING";
"INTEGER";
"nloops";
"StartStopwatch";
"elapsed_16";
"randomize_wts";
"zero_changes";
"learned";
"move_wt_changes";
"do_mid_forward";
"patt_10";
"do_out_forward";
"do_back_pass";
"check_out_error";
"StopStopwatch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"elapsed_16" -> "ESCAPED";
"elapsed_16" -> "learned";
"learned" -> "ESCAPED";
"patt_10" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as elapsed_16
STOREDANYTHING = { }
INTEGER = { ANYTHING }
nloops = { NONLOCAL }
StartStopwatch = { }
elapsed_16 = { ESCAPED NONLOCAL }
randomize_wts = { }
zero_changes = { }
iteration_count = { ESCAPED NONLOCAL } same as elapsed_16
learned = { NULL ESCAPED NONLOCAL }
numpasses = { NULL ESCAPED NONLOCAL } same as learned
worst_error = { ESCAPED NONLOCAL } same as elapsed_16
move_wt_changes = { }
do_mid_forward = { }
patt_10 = { NULL NONLOCAL }
do_out_forward = { }
do_back_pass = { }
iteration_count.186_1 = { ESCAPED NONLOCAL } same as elapsed_16
_2 = { ESCAPED NONLOCAL } same as elapsed_16
patt_35 = { NULL NONLOCAL } same as patt_10
numpats.187_3 = { ESCAPED NONLOCAL } same as elapsed_16
numpats = { ESCAPED NONLOCAL } same as elapsed_16
numpasses.188_4 = { NULL ESCAPED NONLOCAL } same as learned
_5 = { NULL ESCAPED NONLOCAL } same as learned
check_out_error = { }
_6 = { ESCAPED NONLOCAL } same as elapsed_16
learned.189_7 = { NULL ESCAPED NONLOCAL } same as learned
nloops_9 = { NONLOCAL } same as nloops
nloops_18 = { NONLOCAL } same as nloops
nloops.190_8 = { NONLOCAL } same as nloops
StopStopwatch = { }
_20 = { ESCAPED NONLOCAL } same as elapsed_16


Alias information for DoNNetIteration

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information


DoNNetIteration (long unsigned int nloops)
{
  int patt;
  long unsigned int elapsed;
  int iteration_count.186_1;
  int _2;
  int numpats.187_3;
  int numpasses.188_4;
  int _5;
  int _6;
  int learned.189_7;
  long unsigned int nloops.190_8;
  long unsigned int _20;

  <bb 2> [0.00%]:
  elapsed_16 = StartStopwatch ();
  goto <bb 8>; [0.00%]

  <bb 3> [0.00%]:
  randomize_wts ();
  zero_changes ();
  iteration_count = 1;
  learned = 0;
  numpasses = 0;
  goto <bb 7>; [0.00%]

  <bb 4> [100.00%]:
  worst_error = 0.0;
  move_wt_changes ();
  do_mid_forward (patt_10);
  do_out_forward ();
  do_back_pass (patt_10);
  iteration_count.186_1 = iteration_count;
  _2 = iteration_count.186_1 + 1;
  iteration_count = _2;
  patt_35 = patt_10 + 1;

  <bb 5> [0.00%]:
  # patt_10 = PHI <0(7), patt_35(4)>
  numpats.187_3 = numpats;
  if (numpats.187_3 > patt_10)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  numpasses.188_4 = numpasses;
  _5 = numpasses.188_4 + 1;
  numpasses = _5;
  _6 = check_out_error ();
  learned = _6;

  <bb 7> [0.00%]:
  learned.189_7 = learned;
  if (learned.189_7 == 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  # nloops_9 = PHI <nloops_17(D)(2), nloops_18(7)>
  nloops.190_8 = nloops_9;
  nloops_18 = nloops_9 + 18446744073709551615;
  if (nloops_9 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  _20 = StopStopwatch (elapsed_16);
  return _20;

}



;; Function DoNumSort (DoNumSort, funcdef_no=52, decl_uid=4490, cgraph_uid=52, symbol_order=77)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
global_numsortstruct.0+32 = NONLOCAL
global_numsortstruct.64+144 = NONLOCAL
global_numsortstruct.256+64 = NONLOCAL
_1 = global_numsortstruct.0+32
global_numsortstruct.64+144 = &NONLOCAL
ESCAPED = &NONLOCAL
_2 = global_numsortstruct.64+144
_3 = _2
_4 = global_numsortstruct.256+64
_5 = _3
_5 = _4
_6 = _5
_6 = &NONLOCAL
ESCAPED = _6
ESCAPED = &systemerror
arraybase_57 = NONLOCAL
systemerror.0_7 = systemerror
systemerror.1_8 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.1_8
ESCAPED = arraybase_57
ESCAPED = &systemerror
_9 = global_numsortstruct.64+144
_10 = _9
_11 = global_numsortstruct.256+64
ESCAPED = arraybase_57
ESCAPED = _11
ESCAPED = _10
_12 = NONLOCAL
global_min_ticks = NONLOCAL
global_min_ticks.2_13 = global_min_ticks
ESCAPED = arraybase_57
ESCAPED = &systemerror
_14 = global_numsortstruct.64+144
_16 = _14
_16 = &NONLOCAL
global_numsortstruct.64+144 = _16
ESCAPED = _16
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_78 = NONLOCAL
_17 = global_numsortstruct.64+144
_18 = _17
_19 = global_numsortstruct.256+64
_20 = _18
_20 = _19
_21 = _20
_21 = &NONLOCAL
ESCAPED = _21
ESCAPED = &systemerror
arraybase_51 = NONLOCAL
systemerror.3_22 = systemerror
systemerror.4_23 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.4_23
ESCAPED = arraybase_51
ESCAPED = &systemerror
arraybase_39 = arraybase_57
arraybase_39 = arraybase_51
arraybase_39 = arraybase_51
accumtime_40 = &NULL
accumtime_40 = accumtime_70
iterations_41 = &NONLOCAL
iterations_41 = iterations_71
_24 = global_numsortstruct.64+144
_25 = _24
_26 = global_numsortstruct.256+64
ESCAPED = arraybase_39
ESCAPED = _26
ESCAPED = _25
_69 = NONLOCAL
accumtime.5_27 = accumtime_40
_28 = accumtime.5_27
_28 = _69
accumtime_70 = _28
iterations_71 = iterations_41
iterations_71 = &NONLOCAL
accumtime.6_29 = _28
ESCAPED = accumtime.6_29
_30 = NONLOCAL
_31 = global_numsortstruct.64+144
ESCAPED = arraybase_39
ESCAPED = &systemerror
_32 = global_numsortstruct.64+144
_33 = _32
_34 = _33
_34 = iterations_71
accumtime.7_35 = _28
ESCAPED = accumtime.7_35
_36 = NONLOCAL
_37 = _34
_37 = _36
global_numsortstruct.64+144 = _37
ESCAPED = _37
_38 = global_numsortstruct.0+32
global_numsortstruct.0+32 = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 18 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_1";
"global_numsortstruct.0+32"[label="global_numsortstruct.0+32 = { 5 }"];
"global_numsortstruct.64+144"[label="global_numsortstruct.64+144 = { 5 }"];
"global_numsortstruct.256+64";
"_2";
"_3";
"_4";
"_5";
"_6"[label="_6 = { 5 }"];
"AllocateMemory";
"systemerror";
"arraybase_57";
"systemerror.0_7";
"systemerror.1_8";
"ReportError";
"FreeMemory";
"ErrorExit";
"_9";
"_10";
"_11";
"DoNumSortIteration";
"_12";
"global_min_ticks.2_13";
"global_min_ticks";
"__printf_chk";
"_78";
"_17";
"_18";
"_19";
"_20";
"_21"[label="_21 = { 5 }"];
"arraybase_51";
"systemerror.3_22";
"systemerror.4_23";
"arraybase_39";
"iterations_71"[label="iterations_71 = { 5 }"];
"_24";
"_25";
"_26";
"_69";
"_28"[label="_28 = { 1 }"];
"accumtime.6_29";
"TicksToSecs";
"_30";
"_31";
"accumtime.7_35";
"TicksToFracSecs";
"_36";
"_38";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*_1";
"*global_numsortstruct.0+32";
"*AllocateMemory";
"*systemerror";
"*systemerror.0_7";
"*systemerror.1_8";
"*ReportError";
"*FreeMemory";
"*ErrorExit";
"*DoNumSortIteration";
"*_12";
"*global_min_ticks.2_13";
"*global_min_ticks";
"*__printf_chk";
"*_78";
"*systemerror.3_22";
"*systemerror.4_23";
"*iterations_71";
"*TicksToSecs";
"*_30";
"*_31";
"*TicksToFracSecs";
"*_38";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_6" -> "ESCAPED";
"arraybase_57" -> "ESCAPED";
"systemerror.1_8" -> "ESCAPED";
"_10" -> "ESCAPED";
"_11" -> "ESCAPED";
"global_numsortstruct.64+144" -> "ESCAPED";
"_21" -> "ESCAPED";
"arraybase_51" -> "ESCAPED";
"systemerror.4_23" -> "ESCAPED";
"arraybase_39" -> "ESCAPED";
"_25" -> "ESCAPED";
"_26" -> "ESCAPED";
"accumtime.6_29" -> "ESCAPED";
"accumtime.7_35" -> "ESCAPED";
"global_numsortstruct.64+144" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"global_numsortstruct.0+32" -> "_1";
"NONLOCAL" -> "global_numsortstruct.0+32";
"NONLOCAL" -> "global_numsortstruct.64+144";
"global_numsortstruct.64+144" -> "global_numsortstruct.64+144";
"global_numsortstruct.64+144" -> "global_numsortstruct.64+144";
"global_numsortstruct.64+144" -> "global_numsortstruct.64+144";
"iterations_71" -> "global_numsortstruct.64+144";
"global_numsortstruct.64+144" -> "global_numsortstruct.64+144";
"global_numsortstruct.64+144" -> "global_numsortstruct.64+144";
"global_numsortstruct.64+144" -> "global_numsortstruct.64+144";
"_36" -> "global_numsortstruct.64+144";
"global_numsortstruct.64+144" -> "global_numsortstruct.64+144";
"NONLOCAL" -> "global_numsortstruct.256+64";
"global_numsortstruct.64+144" -> "_2";
"_2" -> "_3";
"global_numsortstruct.256+64" -> "_4";
"_3" -> "_5";
"_4" -> "_5";
"_5" -> "_6";
"NONLOCAL" -> "arraybase_57";
"systemerror" -> "systemerror.0_7";
"systemerror" -> "systemerror.1_8";
"global_numsortstruct.64+144" -> "_9";
"_9" -> "_10";
"global_numsortstruct.256+64" -> "_11";
"NONLOCAL" -> "_12";
"global_min_ticks" -> "global_min_ticks.2_13";
"NONLOCAL" -> "global_min_ticks";
"NONLOCAL" -> "_78";
"global_numsortstruct.64+144" -> "_17";
"_17" -> "_18";
"global_numsortstruct.256+64" -> "_19";
"_18" -> "_20";
"_19" -> "_20";
"_20" -> "_21";
"NONLOCAL" -> "arraybase_51";
"systemerror" -> "systemerror.3_22";
"systemerror" -> "systemerror.4_23";
"arraybase_57" -> "arraybase_39";
"arraybase_51" -> "arraybase_39";
"iterations_71" -> "iterations_71";
"iterations_71" -> "iterations_71";
"global_numsortstruct.64+144" -> "_24";
"_24" -> "_25";
"global_numsortstruct.256+64" -> "_26";
"NONLOCAL" -> "_69";
"_28" -> "_28";
"_28" -> "_28";
"_69" -> "_28";
"_28" -> "_28";
"_28" -> "_28";
"_28" -> "accumtime.6_29";
"NONLOCAL" -> "_30";
"global_numsortstruct.64+144" -> "_31";
"_28" -> "accumtime.7_35";
"NONLOCAL" -> "_36";
"global_numsortstruct.0+32" -> "_38";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"global_numsortstruct.0+32";
"AllocateMemory";
"systemerror.0_7";
"ReportError";
"FreeMemory";
"ErrorExit";
"DoNumSortIteration";
"__printf_chk";
"accumtime_40";
"iterations_41";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.0_7";
"global_numsortstruct.0+32" -> "ESCAPED";
"global_numsortstruct.0+32" -> "accumtime_40";
"systemerror.0_7" -> "ESCAPED";
"accumtime_40" -> "ESCAPED";
"iterations_41" -> "global_numsortstruct.0+32";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = global_numsortstruct.0+32\l"];
"STOREDANYTHING";
"INTEGER";
"global_numsortstruct.0+32";
"AllocateMemory";
"systemerror.0_7";
"ReportError";
"FreeMemory";
"ErrorExit";
"DoNumSortIteration";
"__printf_chk";
"accumtime_40";
"iterations_41";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.0_7";
"global_numsortstruct.0+32" -> "ESCAPED";
"global_numsortstruct.0+32" -> "systemerror.0_7";
"global_numsortstruct.0+32" -> "accumtime_40";
"systemerror.0_7" -> "ESCAPED";
"accumtime_40" -> "ESCAPED";
"iterations_41" -> "global_numsortstruct.0+32";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL systemerror }
NONLOCAL = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_1 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_numsortstruct.0+32 = { ESCAPED NONLOCAL }
global_numsortstruct.64+144 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_numsortstruct.256+64 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_2 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_3 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_4 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_5 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_6 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
AllocateMemory = { }
systemerror = { ESCAPED NONLOCAL } same as systemerror.0_7
arraybase_57 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
systemerror.0_7 = { ESCAPED NONLOCAL }
systemerror.1_8 = { ESCAPED NONLOCAL } same as systemerror.0_7
ReportError = { }
FreeMemory = { }
ErrorExit = { }
_9 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_10 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_11 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
DoNumSortIteration = { }
_12 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_min_ticks.2_13 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
global_min_ticks = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_14 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_16 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
__printf_chk = { }
_78 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_17 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_18 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_19 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_20 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_21 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
arraybase_51 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
systemerror.3_22 = { ESCAPED NONLOCAL } same as systemerror.0_7
systemerror.4_23 = { ESCAPED NONLOCAL } same as systemerror.0_7
arraybase_39 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
accumtime_40 = { NULL ESCAPED NONLOCAL }
accumtime_70 = { NULL ESCAPED NONLOCAL } same as accumtime_40
iterations_41 = { NONLOCAL }
iterations_71 = { NONLOCAL } same as iterations_41
_24 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_25 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_26 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_69 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
accumtime.5_27 = { NULL ESCAPED NONLOCAL } same as accumtime_40
_28 = { NULL ESCAPED NONLOCAL } same as accumtime_40
accumtime.6_29 = { NULL ESCAPED NONLOCAL } same as accumtime_40
TicksToSecs = { }
_30 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_31 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_32 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_33 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_34 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
accumtime.7_35 = { NULL ESCAPED NONLOCAL } same as accumtime_40
TicksToFracSecs = { }
_36 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_37 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32
_38 = { ESCAPED NONLOCAL } same as global_numsortstruct.0+32


Alias information for DoNumSort

Aliased symbols

systemerror, UID D.4771, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.4771 } (escaped)

Flow-insensitive points-to information

arraybase_39, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
arraybase_51, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
arraybase_57, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

DoNumSort ()
{
  int D.6531;
  int systemerror;
  char * errorcontext;
  double iterations;
  long int accumtime;
  farlong * arraybase;
  struct SortStruct * numsortstruct;
  int _1;
  short unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  int systemerror.0_7;
  int systemerror.1_8;
  short unsigned int _9;
  unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int global_min_ticks.2_13;
  short unsigned int _14;
  short unsigned int _16;
  short unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  int systemerror.3_22;
  int systemerror.4_23;
  short unsigned int _24;
  unsigned int _25;
  long unsigned int _26;
  long unsigned int accumtime.5_27;
  long unsigned int _28;
  long unsigned int accumtime.6_29;
  long unsigned int _30;
  long unsigned int _31;
  short unsigned int _32;
  double _33;
  double _34;
  long unsigned int accumtime.7_35;
  double _36;
  double _37;
  int _38;
  long unsigned int _69;
  int _78;

  <bb 2> [0.00%]:
  _1 = global_numsortstruct.adjust;
  if (_1 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 3> [0.00%]:
  global_numsortstruct.numarrays = 1;

  <bb 4> [0.00%]:
  _2 = global_numsortstruct.numarrays;
  _3 = (long unsigned int) _2;
  _4 = global_numsortstruct.arraysize;
  _5 = _3 * _4;
  _6 = _5 * 8;
  arraybase_57 = AllocateMemory (_6, &systemerror);
  systemerror.0_7 = systemerror;
  if (systemerror.0_7 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  systemerror.1_8 = systemerror;
  ReportError ("CPU:Numeric Sort", systemerror.1_8);
  FreeMemory (arraybase_57, &systemerror);
  ErrorExit ();

  <bb 6> [0.00%]:
  _9 = global_numsortstruct.numarrays;
  _10 = (unsigned int) _9;
  _11 = global_numsortstruct.arraysize;
  _12 = DoNumSortIteration (arraybase_57, _11, _10);
  global_min_ticks.2_13 = global_min_ticks;
  if (_12 > global_min_ticks.2_13)
    goto <bb 11>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  FreeMemory (arraybase_57, &systemerror);
  _14 = global_numsortstruct.numarrays;
  _16 = _14 + 1;
  global_numsortstruct.numarrays = _16;
  if (_14 > 10000)
    goto <bb 8>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 8> [100.00%]:
  _78 = __printf_chk (1, "CPU:NSORT -- NUMNUMARRAYS hit.\n");
  ErrorExit ();
  goto <bb 4>; [0.00%]

  <bb 9> [0.00%]:
  _17 = global_numsortstruct.numarrays;
  _18 = (long unsigned int) _17;
  _19 = global_numsortstruct.arraysize;
  _20 = _18 * _19;
  _21 = _20 * 8;
  arraybase_51 = AllocateMemory (_21, &systemerror);
  systemerror.3_22 = systemerror;
  if (systemerror.3_22 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  systemerror.4_23 = systemerror;
  ReportError ("CPU:Numeric Sort", systemerror.4_23);
  FreeMemory (arraybase_51, &systemerror);
  ErrorExit ();

  <bb 11> [0.00%]:
  # arraybase_39 = PHI <arraybase_57(6), arraybase_51(9), arraybase_51(10)>

  <bb 12> [0.00%]:
  # accumtime_40 = PHI <0(11), accumtime_70(12)>
  # iterations_41 = PHI <0.0(11), iterations_71(12)>
  _24 = global_numsortstruct.numarrays;
  _25 = (unsigned int) _24;
  _26 = global_numsortstruct.arraysize;
  _69 = DoNumSortIteration (arraybase_39, _26, _25);
  accumtime.5_27 = (long unsigned int) accumtime_40;
  _28 = accumtime.5_27 + _69;
  accumtime_70 = (long int) _28;
  iterations_71 = iterations_41 + 1.0e+0;
  accumtime.6_29 = _28;
  _30 = TicksToSecs (accumtime.6_29);
  _31 = global_numsortstruct.request_secs;
  if (_30 < _31)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:
  FreeMemory (arraybase_39, &systemerror);
  _32 = global_numsortstruct.numarrays;
  _33 = (double) _32;
  _34 = _33 * iterations_71;
  accumtime.7_35 = _28;
  _36 = TicksToFracSecs (accumtime.7_35);
  _37 = _34 / _36;
  global_numsortstruct.sortspersec = _37;
  _38 = global_numsortstruct.adjust;
  if (_38 == 0)
    goto <bb 14>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  global_numsortstruct.adjust = 1;

  <bb 15> [0.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoStringSort (DoStringSort, funcdef_no=57, decl_uid=4508, cgraph_uid=57, symbol_order=82)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
global_strsortstruct.0+32 = NONLOCAL
global_strsortstruct.64+144 = NONLOCAL
global_strsortstruct.256+64 = NONLOCAL
_1 = global_strsortstruct.0+32
global_strsortstruct.64+144 = &NONLOCAL
ESCAPED = &NONLOCAL
_2 = global_strsortstruct.256+64
_3 = _2
_3 = &NONLOCAL
_4 = global_strsortstruct.64+144
_5 = _4
_6 = _3
_6 = _5
ESCAPED = _6
ESCAPED = &systemerror
arraybase_54 = NONLOCAL
systemerror.14_7 = systemerror
systemerror.15_8 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.15_8
_9 = global_strsortstruct.256+64
_10 = global_strsortstruct.64+144
_11 = _10
ESCAPED = arraybase_54
ESCAPED = _11
ESCAPED = _9
_12 = NONLOCAL
global_min_ticks = NONLOCAL
global_min_ticks.16_13 = global_min_ticks
ESCAPED = arraybase_54
ESCAPED = &systemerror
_14 = global_strsortstruct.64+144
_15 = _14
_15 = &NONLOCAL
global_strsortstruct.64+144 = _15
ESCAPED = _15
_16 = global_strsortstruct.256+64
_17 = _16
_17 = &NONLOCAL
_18 = global_strsortstruct.64+144
_19 = _18
_20 = _17
_20 = _19
ESCAPED = _20
ESCAPED = &systemerror
arraybase_49 = NONLOCAL
systemerror.17_21 = systemerror
systemerror.18_22 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.18_22
arraybase_37 = arraybase_54
arraybase_37 = arraybase_49
arraybase_37 = arraybase_49
accumtime_38 = &NULL
accumtime_38 = accumtime_64
iterations_39 = &NONLOCAL
iterations_39 = iterations_65
_23 = global_strsortstruct.256+64
_24 = global_strsortstruct.64+144
_25 = _24
ESCAPED = arraybase_37
ESCAPED = _25
ESCAPED = _23
_63 = NONLOCAL
accumtime.19_26 = accumtime_38
_27 = accumtime.19_26
_27 = _63
accumtime_64 = _27
_28 = global_strsortstruct.64+144
_29 = _28
iterations_65 = _29
iterations_65 = iterations_39
accumtime.20_30 = _27
ESCAPED = accumtime.20_30
_31 = NONLOCAL
_32 = global_strsortstruct.64+144
ESCAPED = arraybase_37
ESCAPED = &systemerror
accumtime.21_33 = _27
ESCAPED = accumtime.21_33
_34 = NONLOCAL
_35 = iterations_65
_35 = _34
global_strsortstruct.64+144 = _35
ESCAPED = _35
_36 = global_strsortstruct.0+32
global_strsortstruct.0+32 = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 18 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_1";
"global_strsortstruct.0+32"[label="global_strsortstruct.0+32 = { 5 }"];
"global_strsortstruct.64+144"[label="global_strsortstruct.64+144 = { 5 }"];
"global_strsortstruct.256+64";
"_2";
"_3"[label="_3 = { 5 }"];
"_4";
"_5";
"_6";
"AllocateMemory";
"systemerror";
"arraybase_54";
"systemerror.14_7";
"systemerror.15_8";
"ReportError";
"ErrorExit";
"_9";
"_10";
"_11";
"DoStringSortIteration";
"_12";
"global_min_ticks.16_13";
"global_min_ticks";
"FreeMemory";
"_16";
"_17"[label="_17 = { 5 }"];
"_18";
"_19";
"_20";
"arraybase_49";
"systemerror.17_21";
"systemerror.18_22";
"arraybase_37";
"_23";
"_24";
"_25";
"_63";
"_27"[label="_27 = { 1 }"];
"accumtime.20_30";
"TicksToSecs";
"_31";
"_32";
"accumtime.21_33";
"TicksToFracSecs";
"_34";
"_36";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*_1";
"*global_strsortstruct.0+32";
"*AllocateMemory";
"*systemerror";
"*systemerror.14_7";
"*systemerror.15_8";
"*ReportError";
"*ErrorExit";
"*DoStringSortIteration";
"*_12";
"*global_min_ticks.16_13";
"*global_min_ticks";
"*FreeMemory";
"*systemerror.17_21";
"*systemerror.18_22";
"*TicksToSecs";
"*_31";
"*_32";
"*TicksToFracSecs";
"*_36";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_6" -> "ESCAPED";
"arraybase_54" -> "ESCAPED";
"systemerror.15_8" -> "ESCAPED";
"_9" -> "ESCAPED";
"_11" -> "ESCAPED";
"global_strsortstruct.64+144" -> "ESCAPED";
"_20" -> "ESCAPED";
"systemerror.18_22" -> "ESCAPED";
"arraybase_37" -> "ESCAPED";
"_23" -> "ESCAPED";
"_25" -> "ESCAPED";
"accumtime.20_30" -> "ESCAPED";
"accumtime.21_33" -> "ESCAPED";
"global_strsortstruct.64+144" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"global_strsortstruct.0+32" -> "_1";
"NONLOCAL" -> "global_strsortstruct.0+32";
"NONLOCAL" -> "global_strsortstruct.64+144";
"global_strsortstruct.64+144" -> "global_strsortstruct.64+144";
"global_strsortstruct.64+144" -> "global_strsortstruct.64+144";
"global_strsortstruct.64+144" -> "global_strsortstruct.64+144";
"global_strsortstruct.64+144" -> "global_strsortstruct.64+144";
"global_strsortstruct.64+144" -> "global_strsortstruct.64+144";
"global_strsortstruct.64+144" -> "global_strsortstruct.64+144";
"global_strsortstruct.64+144" -> "global_strsortstruct.64+144";
"_34" -> "global_strsortstruct.64+144";
"global_strsortstruct.64+144" -> "global_strsortstruct.64+144";
"NONLOCAL" -> "global_strsortstruct.256+64";
"global_strsortstruct.256+64" -> "_2";
"_2" -> "_3";
"global_strsortstruct.64+144" -> "_4";
"_4" -> "_5";
"_3" -> "_6";
"_5" -> "_6";
"NONLOCAL" -> "arraybase_54";
"systemerror" -> "systemerror.14_7";
"systemerror" -> "systemerror.15_8";
"global_strsortstruct.256+64" -> "_9";
"global_strsortstruct.64+144" -> "_10";
"_10" -> "_11";
"NONLOCAL" -> "_12";
"global_min_ticks" -> "global_min_ticks.16_13";
"NONLOCAL" -> "global_min_ticks";
"global_strsortstruct.256+64" -> "_16";
"_16" -> "_17";
"global_strsortstruct.64+144" -> "_18";
"_18" -> "_19";
"_17" -> "_20";
"_19" -> "_20";
"NONLOCAL" -> "arraybase_49";
"systemerror" -> "systemerror.17_21";
"systemerror" -> "systemerror.18_22";
"arraybase_54" -> "arraybase_37";
"arraybase_49" -> "arraybase_37";
"global_strsortstruct.256+64" -> "_23";
"global_strsortstruct.64+144" -> "_24";
"_24" -> "_25";
"NONLOCAL" -> "_63";
"_27" -> "_27";
"_27" -> "_27";
"_63" -> "_27";
"_27" -> "_27";
"_27" -> "_27";
"_27" -> "accumtime.20_30";
"NONLOCAL" -> "_31";
"global_strsortstruct.64+144" -> "_32";
"_27" -> "accumtime.21_33";
"NONLOCAL" -> "_34";
"global_strsortstruct.0+32" -> "_36";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"global_strsortstruct.0+32";
"AllocateMemory";
"systemerror.14_7";
"ReportError";
"ErrorExit";
"DoStringSortIteration";
"FreeMemory";
"accumtime_38";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.14_7";
"global_strsortstruct.0+32" -> "ESCAPED";
"global_strsortstruct.0+32" -> "accumtime_38";
"systemerror.14_7" -> "ESCAPED";
"accumtime_38" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = global_strsortstruct.0+32\l"];
"STOREDANYTHING";
"INTEGER";
"global_strsortstruct.0+32";
"AllocateMemory";
"systemerror.14_7";
"ReportError";
"ErrorExit";
"DoStringSortIteration";
"FreeMemory";
"accumtime_38";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.14_7";
"global_strsortstruct.0+32" -> "ESCAPED";
"global_strsortstruct.0+32" -> "systemerror.14_7";
"global_strsortstruct.0+32" -> "accumtime_38";
"systemerror.14_7" -> "ESCAPED";
"accumtime_38" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL systemerror }
NONLOCAL = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_1 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
global_strsortstruct.0+32 = { ESCAPED NONLOCAL }
global_strsortstruct.64+144 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
global_strsortstruct.256+64 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_2 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_3 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_4 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_5 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_6 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
AllocateMemory = { }
systemerror = { ESCAPED NONLOCAL } same as systemerror.14_7
arraybase_54 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
systemerror.14_7 = { ESCAPED NONLOCAL }
systemerror.15_8 = { ESCAPED NONLOCAL } same as systemerror.14_7
ReportError = { }
ErrorExit = { }
_9 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_10 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_11 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
DoStringSortIteration = { }
_12 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
global_min_ticks.16_13 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
global_min_ticks = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
FreeMemory = { }
_14 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_15 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_16 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_17 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_18 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_19 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_20 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
arraybase_49 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
systemerror.17_21 = { ESCAPED NONLOCAL } same as systemerror.14_7
systemerror.18_22 = { ESCAPED NONLOCAL } same as systemerror.14_7
arraybase_37 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
accumtime_38 = { NULL ESCAPED NONLOCAL }
accumtime_64 = { NULL ESCAPED NONLOCAL } same as accumtime_38
iterations_39 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
iterations_65 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_23 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_24 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_25 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_63 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
accumtime.19_26 = { NULL ESCAPED NONLOCAL } same as accumtime_38
_27 = { NULL ESCAPED NONLOCAL } same as accumtime_38
_28 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_29 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
accumtime.20_30 = { NULL ESCAPED NONLOCAL } same as accumtime_38
TicksToSecs = { }
_31 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_32 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
accumtime.21_33 = { NULL ESCAPED NONLOCAL } same as accumtime_38
TicksToFracSecs = { }
_34 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_35 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32
_36 = { ESCAPED NONLOCAL } same as global_strsortstruct.0+32


Alias information for DoStringSort

Aliased symbols

systemerror, UID D.4833, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.4833 } (escaped)

Flow-insensitive points-to information

arraybase_37, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
arraybase_49, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
arraybase_54, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

DoStringSort ()
{
  int systemerror;
  char * errorcontext;
  double iterations;
  long int accumtime;
  faruchar * arraybase;
  struct SortStruct * strsortstruct;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  short unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  int systemerror.14_7;
  int systemerror.15_8;
  long unsigned int _9;
  short unsigned int _10;
  unsigned int _11;
  long unsigned int _12;
  long unsigned int global_min_ticks.16_13;
  short unsigned int _14;
  short unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  short unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  int systemerror.17_21;
  int systemerror.18_22;
  long unsigned int _23;
  short unsigned int _24;
  unsigned int _25;
  long unsigned int accumtime.19_26;
  long unsigned int _27;
  short unsigned int _28;
  double _29;
  long unsigned int accumtime.20_30;
  long unsigned int _31;
  long unsigned int _32;
  long unsigned int accumtime.21_33;
  double _34;
  double _35;
  int _36;
  long unsigned int _63;

  <bb 2> [0.00%]:
  _1 = global_strsortstruct.adjust;
  if (_1 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 3> [0.00%]:
  global_strsortstruct.numarrays = 1;

  <bb 4> [0.00%]:
  _2 = global_strsortstruct.arraysize;
  _3 = _2 + 100;
  _4 = global_strsortstruct.numarrays;
  _5 = (long unsigned int) _4;
  _6 = _3 * _5;
  arraybase_54 = AllocateMemory (_6, &systemerror);
  systemerror.14_7 = systemerror;
  if (systemerror.14_7 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  systemerror.15_8 = systemerror;
  ReportError ("CPU:String Sort", systemerror.15_8);
  ErrorExit ();

  <bb 6> [0.00%]:
  _9 = global_strsortstruct.arraysize;
  _10 = global_strsortstruct.numarrays;
  _11 = (unsigned int) _10;
  _12 = DoStringSortIteration (arraybase_54, _11, _9);
  global_min_ticks.16_13 = global_min_ticks;
  if (_12 > global_min_ticks.16_13)
    goto <bb 10>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  FreeMemory (arraybase_54, &systemerror);
  _14 = global_strsortstruct.numarrays;
  _15 = _14 + 1;
  global_strsortstruct.numarrays = _15;
  goto <bb 4>; [0.00%]

  <bb 8> [0.00%]:
  _16 = global_strsortstruct.arraysize;
  _17 = _16 + 100;
  _18 = global_strsortstruct.numarrays;
  _19 = (long unsigned int) _18;
  _20 = _17 * _19;
  arraybase_49 = AllocateMemory (_20, &systemerror);
  systemerror.17_21 = systemerror;
  if (systemerror.17_21 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  systemerror.18_22 = systemerror;
  ReportError ("CPU:String Sort", systemerror.18_22);
  ErrorExit ();

  <bb 10> [0.00%]:
  # arraybase_37 = PHI <arraybase_54(6), arraybase_49(8), arraybase_49(9)>

  <bb 11> [0.00%]:
  # accumtime_38 = PHI <0(10), accumtime_64(11)>
  # iterations_39 = PHI <0.0(10), iterations_65(11)>
  _23 = global_strsortstruct.arraysize;
  _24 = global_strsortstruct.numarrays;
  _25 = (unsigned int) _24;
  _63 = DoStringSortIteration (arraybase_37, _25, _23);
  accumtime.19_26 = (long unsigned int) accumtime_38;
  _27 = accumtime.19_26 + _63;
  accumtime_64 = (long int) _27;
  _28 = global_strsortstruct.numarrays;
  _29 = (double) _28;
  iterations_65 = _29 + iterations_39;
  accumtime.20_30 = _27;
  _31 = TicksToSecs (accumtime.20_30);
  _32 = global_strsortstruct.request_secs;
  if (_31 < _32)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [0.00%]:
  FreeMemory (arraybase_37, &systemerror);
  accumtime.21_33 = _27;
  _34 = TicksToFracSecs (accumtime.21_33);
  _35 = iterations_65 / _34;
  global_strsortstruct.sortspersec = _35;
  _36 = global_strsortstruct.adjust;
  if (_36 == 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  global_strsortstruct.adjust = 1;

  <bb 14> [0.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoBitops (DoBitops, funcdef_no=64, decl_uid=4543, cgraph_uid=64, symbol_order=89)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
global_bitopstruct.0+32 = NONLOCAL
global_bitopstruct.64+256 = NONLOCAL
_1 = global_bitopstruct.0+32
_2 = global_bitopstruct.64+256
_3 = _2
_3 = &NONLOCAL
ESCAPED = _3
ESCAPED = &systemerror
bitarraybase_58 = NONLOCAL
systemerror.28_4 = systemerror
systemerror.29_5 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.29_5
global_bitopstruct.64+256 = &NONLOCAL
ESCAPED = &NONLOCAL
_6 = global_bitopstruct.64+256
_7 = _6
_7 = &NONLOCAL
ESCAPED = _7
ESCAPED = &systemerror
bitoparraybase_63 = NONLOCAL
systemerror.30_8 = systemerror
systemerror.31_9 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.31_9
ESCAPED = bitarraybase_58
ESCAPED = &systemerror
_10 = global_bitopstruct.64+256
_11 = _10
ESCAPED = bitarraybase_58
ESCAPED = bitoparraybase_63
ESCAPED = _11
ESCAPED = &nbitops
_12 = NONLOCAL
ticks_68 = _12
_13 = ticks_68
global_min_ticks = NONLOCAL
global_min_ticks.32_14 = global_min_ticks
ESCAPED = bitoparraybase_63
ESCAPED = &systemerror
_15 = global_bitopstruct.64+256
_16 = _15
_16 = &NONLOCAL
global_bitopstruct.64+256 = _16
ESCAPED = _16
_17 = global_bitopstruct.64+256
_18 = _17
_18 = &NONLOCAL
ESCAPED = _18
ESCAPED = &systemerror
bitarraybase_49 = NONLOCAL
systemerror.33_19 = systemerror
systemerror.34_20 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.34_20
_21 = global_bitopstruct.64+256
_22 = _21
_22 = &NONLOCAL
ESCAPED = _22
ESCAPED = &systemerror
bitoparraybase_53 = NONLOCAL
systemerror.35_23 = systemerror
systemerror.36_24 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.36_24
ESCAPED = bitarraybase_49
ESCAPED = &systemerror
bitarraybase_34 = bitarraybase_58
bitarraybase_34 = bitarraybase_49
bitarraybase_34 = bitarraybase_49
bitoparraybase_35 = bitoparraybase_63
bitoparraybase_35 = bitoparraybase_53
bitoparraybase_35 = bitoparraybase_53
accumtime_36 = &NULL
accumtime_36 = accumtime_75
iterations_37 = &NONLOCAL
iterations_37 = iterations_76
_25 = global_bitopstruct.64+256
_26 = _25
ESCAPED = bitarraybase_34
ESCAPED = bitoparraybase_35
ESCAPED = _26
ESCAPED = &nbitops
_74 = NONLOCAL
accumtime_75 = accumtime_36
accumtime_75 = _74
nbitops.37_27 = nbitops
_28 = nbitops.37_27
iterations_76 = _28
iterations_76 = iterations_37
ESCAPED = accumtime_75
_29 = NONLOCAL
_30 = global_bitopstruct.64+256
ESCAPED = bitarraybase_34
ESCAPED = &systemerror
ESCAPED = bitoparraybase_35
ESCAPED = &systemerror
ESCAPED = accumtime_75
_31 = NONLOCAL
_32 = iterations_76
_32 = _31
global_bitopstruct.64+256 = _32
ESCAPED = _32
_33 = global_bitopstruct.0+32
global_bitopstruct.0+32 = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 14 29 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_1";
"global_bitopstruct.0+32"[label="global_bitopstruct.0+32 = { 5 }"];
"global_bitopstruct.64+256"[label="global_bitopstruct.64+256 = { 5 }"];
"_2";
"_3"[label="_3 = { 5 }"];
"AllocateMemory";
"systemerror";
"bitarraybase_58";
"systemerror.28_4";
"systemerror.29_5";
"ReportError";
"ErrorExit";
"_6";
"_7"[label="_7 = { 5 }"];
"bitoparraybase_63";
"systemerror.30_8";
"systemerror.31_9";
"FreeMemory";
"_10";
"_11";
"DoBitfieldIteration";
"nbitops";
"_12";
"ticks_68";
"_13";
"global_min_ticks.32_14";
"global_min_ticks";
"_17";
"_18"[label="_18 = { 5 }"];
"bitarraybase_49";
"systemerror.33_19";
"systemerror.34_20";
"_21";
"_22"[label="_22 = { 5 }"];
"bitoparraybase_53";
"systemerror.35_23";
"systemerror.36_24";
"bitarraybase_34";
"bitoparraybase_35";
"accumtime_75"[label="accumtime_75 = { 1 }"];
"iterations_76"[label="iterations_76 = { 5 }"];
"_25";
"_26";
"_74";
"nbitops.37_27";
"_28";
"TicksToSecs";
"_29";
"_30";
"TicksToFracSecs";
"_31";
"_32";
"_33";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*_1";
"*global_bitopstruct.0+32";
"*AllocateMemory";
"*systemerror";
"*systemerror.28_4";
"*systemerror.29_5";
"*ReportError";
"*ErrorExit";
"*systemerror.30_8";
"*systemerror.31_9";
"*FreeMemory";
"*DoBitfieldIteration";
"*nbitops";
"*_12";
"*ticks_68";
"*_13";
"*global_min_ticks.32_14";
"*global_min_ticks";
"*systemerror.33_19";
"*systemerror.34_20";
"*systemerror.35_23";
"*systemerror.36_24";
"*iterations_76";
"*nbitops.37_27";
"*_28";
"*TicksToSecs";
"*_29";
"*_30";
"*TicksToFracSecs";
"*_33";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_3" -> "ESCAPED";
"bitarraybase_58" -> "ESCAPED";
"systemerror.29_5" -> "ESCAPED";
"_7" -> "ESCAPED";
"bitoparraybase_63" -> "ESCAPED";
"systemerror.31_9" -> "ESCAPED";
"_11" -> "ESCAPED";
"global_bitopstruct.64+256" -> "ESCAPED";
"_18" -> "ESCAPED";
"bitarraybase_49" -> "ESCAPED";
"systemerror.34_20" -> "ESCAPED";
"_22" -> "ESCAPED";
"systemerror.36_24" -> "ESCAPED";
"bitarraybase_34" -> "ESCAPED";
"bitoparraybase_35" -> "ESCAPED";
"accumtime_75" -> "ESCAPED";
"_26" -> "ESCAPED";
"_32" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"global_bitopstruct.0+32" -> "_1";
"NONLOCAL" -> "global_bitopstruct.0+32";
"NONLOCAL" -> "global_bitopstruct.64+256";
"global_bitopstruct.64+256" -> "global_bitopstruct.64+256";
"global_bitopstruct.64+256" -> "global_bitopstruct.64+256";
"global_bitopstruct.64+256" -> "global_bitopstruct.64+256";
"_32" -> "global_bitopstruct.64+256";
"global_bitopstruct.64+256" -> "_2";
"_2" -> "_3";
"NONLOCAL" -> "bitarraybase_58";
"systemerror" -> "systemerror.28_4";
"systemerror" -> "systemerror.29_5";
"global_bitopstruct.64+256" -> "_6";
"_6" -> "_7";
"NONLOCAL" -> "bitoparraybase_63";
"systemerror" -> "systemerror.30_8";
"systemerror" -> "systemerror.31_9";
"global_bitopstruct.64+256" -> "_10";
"_10" -> "_11";
"NONLOCAL" -> "_12";
"_12" -> "ticks_68";
"ticks_68" -> "_13";
"global_min_ticks" -> "global_min_ticks.32_14";
"NONLOCAL" -> "global_min_ticks";
"global_bitopstruct.64+256" -> "_17";
"_17" -> "_18";
"NONLOCAL" -> "bitarraybase_49";
"systemerror" -> "systemerror.33_19";
"systemerror" -> "systemerror.34_20";
"global_bitopstruct.64+256" -> "_21";
"_21" -> "_22";
"NONLOCAL" -> "bitoparraybase_53";
"systemerror" -> "systemerror.35_23";
"systemerror" -> "systemerror.36_24";
"bitarraybase_58" -> "bitarraybase_34";
"bitarraybase_49" -> "bitarraybase_34";
"bitoparraybase_63" -> "bitoparraybase_35";
"bitoparraybase_53" -> "bitoparraybase_35";
"accumtime_75" -> "accumtime_75";
"accumtime_75" -> "accumtime_75";
"_74" -> "accumtime_75";
"iterations_76" -> "iterations_76";
"iterations_76" -> "iterations_76";
"_28" -> "iterations_76";
"global_bitopstruct.64+256" -> "_25";
"_25" -> "_26";
"NONLOCAL" -> "_74";
"nbitops" -> "nbitops.37_27";
"nbitops.37_27" -> "_28";
"NONLOCAL" -> "_29";
"global_bitopstruct.64+256" -> "_30";
"NONLOCAL" -> "_31";
"iterations_76" -> "_32";
"_31" -> "_32";
"global_bitopstruct.0+32" -> "_33";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"global_bitopstruct.0+32";
"global_bitopstruct.64+256";
"AllocateMemory";
"systemerror.28_4";
"ReportError";
"ErrorExit";
"FreeMemory";
"DoBitfieldIteration";
"accumtime_36";
"iterations_37";
"nbitops.37_27";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.28_4";
"STOREDANYTHING" -> "nbitops.37_27";
"global_bitopstruct.0+32" -> "ESCAPED";
"global_bitopstruct.0+32" -> "global_bitopstruct.64+256";
"global_bitopstruct.0+32" -> "accumtime_36";
"global_bitopstruct.64+256" -> "ESCAPED";
"systemerror.28_4" -> "ESCAPED";
"accumtime_36" -> "ESCAPED";
"iterations_37" -> "global_bitopstruct.64+256";
"nbitops.37_27" -> "iterations_37";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = global_bitopstruct.0+32\l"];
"STOREDANYTHING";
"INTEGER";
"global_bitopstruct.0+32";
"global_bitopstruct.64+256";
"AllocateMemory";
"systemerror.28_4";
"ReportError";
"ErrorExit";
"FreeMemory";
"DoBitfieldIteration";
"accumtime_36";
"iterations_37";
"nbitops.37_27";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.28_4";
"STOREDANYTHING" -> "nbitops.37_27";
"global_bitopstruct.0+32" -> "ESCAPED";
"global_bitopstruct.0+32" -> "global_bitopstruct.64+256";
"global_bitopstruct.0+32" -> "systemerror.28_4";
"global_bitopstruct.0+32" -> "accumtime_36";
"global_bitopstruct.0+32" -> "nbitops.37_27";
"global_bitopstruct.64+256" -> "ESCAPED";
"systemerror.28_4" -> "ESCAPED";
"accumtime_36" -> "ESCAPED";
"iterations_37" -> "global_bitopstruct.64+256";
"nbitops.37_27" -> "ESCAPED";
"nbitops.37_27" -> "iterations_37";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL systemerror nbitops }
NONLOCAL = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_1 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
global_bitopstruct.0+32 = { ESCAPED NONLOCAL }
global_bitopstruct.64+256 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
_3 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
AllocateMemory = { }
systemerror = { ESCAPED NONLOCAL } same as systemerror.28_4
bitarraybase_58 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
systemerror.28_4 = { ESCAPED NONLOCAL }
systemerror.29_5 = { ESCAPED NONLOCAL } same as systemerror.28_4
ReportError = { }
ErrorExit = { }
_6 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
_7 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
bitoparraybase_63 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
systemerror.30_8 = { ESCAPED NONLOCAL } same as systemerror.28_4
systemerror.31_9 = { ESCAPED NONLOCAL } same as systemerror.28_4
FreeMemory = { }
_10 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
_11 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
DoBitfieldIteration = { }
nbitops = { ESCAPED NONLOCAL } same as nbitops.37_27
_12 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
ticks_68 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
_13 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
global_min_ticks.32_14 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
global_min_ticks = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
_15 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
_16 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
_17 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
_18 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
bitarraybase_49 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
systemerror.33_19 = { ESCAPED NONLOCAL } same as systemerror.28_4
systemerror.34_20 = { ESCAPED NONLOCAL } same as systemerror.28_4
_21 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
_22 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
bitoparraybase_53 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
systemerror.35_23 = { ESCAPED NONLOCAL } same as systemerror.28_4
systemerror.36_24 = { ESCAPED NONLOCAL } same as systemerror.28_4
bitarraybase_34 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
bitoparraybase_35 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
accumtime_36 = { NULL ESCAPED NONLOCAL }
accumtime_75 = { NULL ESCAPED NONLOCAL } same as accumtime_36
iterations_37 = { ESCAPED NONLOCAL }
iterations_76 = { ESCAPED NONLOCAL } same as iterations_37
_25 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
_26 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
_74 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
nbitops.37_27 = { ESCAPED NONLOCAL }
_28 = { ESCAPED NONLOCAL } same as nbitops.37_27
TicksToSecs = { }
_29 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
_30 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
TicksToFracSecs = { }
_31 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32
_32 = { ESCAPED NONLOCAL } same as global_bitopstruct.64+256
_33 = { ESCAPED NONLOCAL } same as global_bitopstruct.0+32


Alias information for DoBitops

Aliased symbols

systemerror, UID D.4951, int, is addressable
nbitops, UID D.4947, long unsigned int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.4947 D.4951 } (escaped)

Flow-insensitive points-to information

bitarraybase_34, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
bitoparraybase_35, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
bitarraybase_49, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
bitoparraybase_53, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
bitarraybase_58, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
bitoparraybase_63, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

DoBitops ()
{
  int ticks;
  int systemerror;
  char * errorcontext;
  double iterations;
  long unsigned int accumtime;
  long unsigned int nbitops;
  farulong * bitoparraybase;
  farulong * bitarraybase;
  struct BitOpStruct * locbitopstruct;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  int systemerror.28_4;
  int systemerror.29_5;
  long unsigned int _6;
  long unsigned int _7;
  int systemerror.30_8;
  int systemerror.31_9;
  long unsigned int _10;
  long int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int global_min_ticks.32_14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  int systemerror.33_19;
  int systemerror.34_20;
  long unsigned int _21;
  long unsigned int _22;
  int systemerror.35_23;
  int systemerror.36_24;
  long unsigned int _25;
  long int _26;
  long unsigned int nbitops.37_27;
  double _28;
  long unsigned int _29;
  long unsigned int _30;
  double _31;
  double _32;
  int _33;
  long unsigned int _74;

  <bb 2> [0.00%]:
  _1 = global_bitopstruct.adjust;
  if (_1 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 3> [0.00%]:
  _2 = global_bitopstruct.bitfieldarraysize;
  _3 = _2 * 8;
  bitarraybase_58 = AllocateMemory (_3, &systemerror);
  systemerror.28_4 = systemerror;
  if (systemerror.28_4 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  systemerror.29_5 = systemerror;
  ReportError ("CPU:Bitfields", systemerror.29_5);
  ErrorExit ();

  <bb 5> [0.00%]:
  global_bitopstruct.bitoparraysize = 30;

  <bb 6> [0.00%]:
  _6 = global_bitopstruct.bitoparraysize;
  _7 = _6 * 16;
  bitoparraybase_63 = AllocateMemory (_7, &systemerror);
  systemerror.30_8 = systemerror;
  if (systemerror.30_8 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  systemerror.31_9 = systemerror;
  ReportError ("CPU:Bitfields", systemerror.31_9);
  FreeMemory (bitarraybase_58, &systemerror);
  ErrorExit ();

  <bb 8> [0.00%]:
  _10 = global_bitopstruct.bitoparraysize;
  _11 = (long int) _10;
  _12 = DoBitfieldIteration (bitarraybase_58, bitoparraybase_63, _11, &nbitops);
  ticks_68 = (int) _12;
  _13 = (long unsigned int) ticks_68;
  global_min_ticks.32_14 = global_min_ticks;
  if (_13 > global_min_ticks.32_14)
    goto <bb 14>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  FreeMemory (bitoparraybase_63, &systemerror);
  _15 = global_bitopstruct.bitoparraysize;
  _16 = _15 + 100;
  global_bitopstruct.bitoparraysize = _16;
  goto <bb 6>; [0.00%]

  <bb 10> [0.00%]:
  _17 = global_bitopstruct.bitfieldarraysize;
  _18 = _17 * 8;
  bitarraybase_49 = AllocateMemory (_18, &systemerror);
  systemerror.33_19 = systemerror;
  if (systemerror.33_19 != 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  systemerror.34_20 = systemerror;
  ReportError ("CPU:Bitfields", systemerror.34_20);
  ErrorExit ();

  <bb 12> [0.00%]:
  _21 = global_bitopstruct.bitoparraysize;
  _22 = _21 * 16;
  bitoparraybase_53 = AllocateMemory (_22, &systemerror);
  systemerror.35_23 = systemerror;
  if (systemerror.35_23 != 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  systemerror.36_24 = systemerror;
  ReportError ("CPU:Bitfields", systemerror.36_24);
  FreeMemory (bitarraybase_49, &systemerror);
  ErrorExit ();

  <bb 14> [0.00%]:
  # bitarraybase_34 = PHI <bitarraybase_58(8), bitarraybase_49(12), bitarraybase_49(13)>
  # bitoparraybase_35 = PHI <bitoparraybase_63(8), bitoparraybase_53(12), bitoparraybase_53(13)>

  <bb 15> [0.00%]:
  # accumtime_36 = PHI <0(14), accumtime_75(15)>
  # iterations_37 = PHI <0.0(14), iterations_76(15)>
  _25 = global_bitopstruct.bitoparraysize;
  _26 = (long int) _25;
  _74 = DoBitfieldIteration (bitarraybase_34, bitoparraybase_35, _26, &nbitops);
  accumtime_75 = accumtime_36 + _74;
  nbitops.37_27 = nbitops;
  _28 = (double) nbitops.37_27;
  iterations_76 = _28 + iterations_37;
  _29 = TicksToSecs (accumtime_75);
  _30 = global_bitopstruct.request_secs;
  if (_29 < _30)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 16> [0.00%]:
  FreeMemory (bitarraybase_34, &systemerror);
  FreeMemory (bitoparraybase_35, &systemerror);
  _31 = TicksToFracSecs (accumtime_75);
  _32 = iterations_76 / _31;
  global_bitopstruct.bitopspersec = _32;
  _33 = global_bitopstruct.adjust;
  if (_33 == 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  global_bitopstruct.adjust = 1;

  <bb 18> [0.00%]:
  nbitops ={v} {CLOBBER};
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoEmFloat (DoEmFloat, funcdef_no=68, decl_uid=4565, cgraph_uid=68, symbol_order=93)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
global_emfloatstruct.0+32 = NONLOCAL
global_emfloatstruct.64+256 = NONLOCAL
_1 = global_emfloatstruct.64+256
_2 = _1
_2 = &NONLOCAL
ESCAPED = _2
ESCAPED = &systemerror
abase_43 = NONLOCAL
systemerror.50_3 = systemerror
systemerror.51_4 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.51_4
_5 = global_emfloatstruct.64+256
_6 = _5
_6 = &NONLOCAL
ESCAPED = _6
ESCAPED = &systemerror
bbase_47 = NONLOCAL
systemerror.52_7 = systemerror
systemerror.53_8 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.53_8
ESCAPED = abase_43
ESCAPED = &systemerror
_9 = global_emfloatstruct.64+256
_10 = _9
_10 = &NONLOCAL
ESCAPED = _10
ESCAPED = &systemerror
cbase_52 = NONLOCAL
systemerror.54_11 = systemerror
systemerror.55_12 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.55_12
ESCAPED = abase_43
ESCAPED = &systemerror
ESCAPED = bbase_47
ESCAPED = &systemerror
_13 = global_emfloatstruct.64+256
ESCAPED = abase_43
ESCAPED = bbase_47
ESCAPED = cbase_52
ESCAPED = _13
_14 = global_emfloatstruct.0+32
global_emfloatstruct.64+256 = &NULL
ESCAPED = &NULL
_15 = global_emfloatstruct.64+256
ESCAPED = abase_43
ESCAPED = bbase_47
ESCAPED = cbase_52
ESCAPED = _15
ESCAPED = loops_30
tickcount_61 = NONLOCAL
global_min_ticks = NONLOCAL
global_min_ticks.56_16 = global_min_ticks
global_emfloatstruct.64+256 = loops_30
ESCAPED = loops_30
loops_62 = loops_30
loops_62 = &NONLOCAL
loops_30 = &NONLOCAL
loops_30 = loops_62
_17 = global_emfloatstruct.64+256
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_83 = NONLOCAL
ESCAPED = abase_43
ESCAPED = &systemerror
ESCAPED = bbase_47
ESCAPED = &systemerror
ESCAPED = cbase_52
ESCAPED = &systemerror
accumtime_28 = &NULL
accumtime_28 = accumtime_73
iterations_29 = &NONLOCAL
iterations_29 = iterations_74
_18 = global_emfloatstruct.64+256
_19 = global_emfloatstruct.64+256
ESCAPED = abase_43
ESCAPED = bbase_47
ESCAPED = cbase_52
ESCAPED = _19
ESCAPED = _18
_72 = NONLOCAL
accumtime_73 = accumtime_28
accumtime_73 = _72
iterations_74 = iterations_29
iterations_74 = &NONLOCAL
ESCAPED = accumtime_73
_20 = NONLOCAL
_21 = global_emfloatstruct.64+256
ESCAPED = abase_43
ESCAPED = &systemerror
ESCAPED = bbase_47
ESCAPED = &systemerror
ESCAPED = cbase_52
ESCAPED = &systemerror
_22 = global_emfloatstruct.64+256
_23 = _22
_24 = _23
_24 = iterations_74
ESCAPED = accumtime_73
_25 = NONLOCAL
_26 = _24
_26 = _25
global_emfloatstruct.64+256 = _26
ESCAPED = _26
_27 = global_emfloatstruct.0+32
global_emfloatstruct.0+32 = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 3 5 13 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_1";
"global_emfloatstruct.0+32"[label="global_emfloatstruct.0+32 = { 5 }"];
"global_emfloatstruct.64+256"[label="global_emfloatstruct.64+256 = { 1 }"];
"_2"[label="_2 = { 5 }"];
"AllocateMemory";
"systemerror";
"abase_43";
"systemerror.50_3";
"systemerror.51_4";
"ReportError";
"ErrorExit";
"_5";
"_6"[label="_6 = { 5 }"];
"bbase_47";
"systemerror.52_7";
"systemerror.53_8";
"FreeMemory";
"_9";
"_10"[label="_10 = { 5 }"];
"cbase_52";
"systemerror.54_11";
"systemerror.55_12";
"_13";
"SetupCPUEmFloatArrays";
"_14";
"_15";
"DoEmFloatIteration";
"loops_30"[label="loops_30 = { 5 }"];
"tickcount_61";
"global_min_ticks.56_16";
"global_min_ticks";
"_17";
"__printf_chk";
"_83";
"accumtime_73"[label="accumtime_73 = { 1 }"];
"iterations_74"[label="iterations_74 = { 5 }"];
"_18";
"_19";
"_72";
"TicksToSecs";
"_20";
"_21";
"TicksToFracSecs";
"_25";
"_27";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*global_emfloatstruct.0+32";
"*AllocateMemory";
"*systemerror";
"*systemerror.50_3";
"*systemerror.51_4";
"*ReportError";
"*ErrorExit";
"*systemerror.52_7";
"*systemerror.53_8";
"*FreeMemory";
"*systemerror.54_11";
"*systemerror.55_12";
"*SetupCPUEmFloatArrays";
"*_14";
"*DoEmFloatIteration";
"*loops_30";
"*tickcount_61";
"*global_min_ticks.56_16";
"*global_min_ticks";
"*_17";
"*__printf_chk";
"*_83";
"*iterations_74";
"*TicksToSecs";
"*_20";
"*_21";
"*TicksToFracSecs";
"*_27";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_2" -> "ESCAPED";
"abase_43" -> "ESCAPED";
"systemerror.51_4" -> "ESCAPED";
"_6" -> "ESCAPED";
"bbase_47" -> "ESCAPED";
"systemerror.53_8" -> "ESCAPED";
"_10" -> "ESCAPED";
"cbase_52" -> "ESCAPED";
"systemerror.55_12" -> "ESCAPED";
"_13" -> "ESCAPED";
"_15" -> "ESCAPED";
"loops_30" -> "ESCAPED";
"accumtime_73" -> "ESCAPED";
"_18" -> "ESCAPED";
"_19" -> "ESCAPED";
"global_emfloatstruct.64+256" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"global_emfloatstruct.64+256" -> "_1";
"NONLOCAL" -> "global_emfloatstruct.0+32";
"NONLOCAL" -> "global_emfloatstruct.64+256";
"global_emfloatstruct.64+256" -> "global_emfloatstruct.64+256";
"loops_30" -> "global_emfloatstruct.64+256";
"iterations_74" -> "global_emfloatstruct.64+256";
"global_emfloatstruct.64+256" -> "global_emfloatstruct.64+256";
"global_emfloatstruct.64+256" -> "global_emfloatstruct.64+256";
"global_emfloatstruct.64+256" -> "global_emfloatstruct.64+256";
"_25" -> "global_emfloatstruct.64+256";
"global_emfloatstruct.64+256" -> "global_emfloatstruct.64+256";
"_1" -> "_2";
"NONLOCAL" -> "abase_43";
"systemerror" -> "systemerror.50_3";
"systemerror" -> "systemerror.51_4";
"global_emfloatstruct.64+256" -> "_5";
"_5" -> "_6";
"NONLOCAL" -> "bbase_47";
"systemerror" -> "systemerror.52_7";
"systemerror" -> "systemerror.53_8";
"global_emfloatstruct.64+256" -> "_9";
"_9" -> "_10";
"NONLOCAL" -> "cbase_52";
"systemerror" -> "systemerror.54_11";
"systemerror" -> "systemerror.55_12";
"global_emfloatstruct.64+256" -> "_13";
"global_emfloatstruct.0+32" -> "_14";
"global_emfloatstruct.64+256" -> "_15";
"loops_30" -> "loops_30";
"loops_30" -> "loops_30";
"NONLOCAL" -> "tickcount_61";
"global_min_ticks" -> "global_min_ticks.56_16";
"NONLOCAL" -> "global_min_ticks";
"global_emfloatstruct.64+256" -> "_17";
"NONLOCAL" -> "_83";
"accumtime_73" -> "accumtime_73";
"accumtime_73" -> "accumtime_73";
"_72" -> "accumtime_73";
"iterations_74" -> "iterations_74";
"iterations_74" -> "iterations_74";
"global_emfloatstruct.64+256" -> "_18";
"global_emfloatstruct.64+256" -> "_19";
"NONLOCAL" -> "_72";
"NONLOCAL" -> "_20";
"global_emfloatstruct.64+256" -> "_21";
"NONLOCAL" -> "_25";
"global_emfloatstruct.0+32" -> "_27";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"global_emfloatstruct.0+32";
"global_emfloatstruct.64+256";
"AllocateMemory";
"systemerror.50_3";
"ReportError";
"ErrorExit";
"FreeMemory";
"SetupCPUEmFloatArrays";
"DoEmFloatIteration";
"loops_30";
"__printf_chk";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.50_3";
"global_emfloatstruct.0+32" -> "ESCAPED";
"global_emfloatstruct.0+32" -> "global_emfloatstruct.64+256";
"global_emfloatstruct.64+256" -> "ESCAPED";
"systemerror.50_3" -> "ESCAPED";
"loops_30" -> "ESCAPED";
"loops_30" -> "global_emfloatstruct.64+256";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = global_emfloatstruct.0+32\l"];
"STOREDANYTHING";
"INTEGER";
"global_emfloatstruct.0+32";
"global_emfloatstruct.64+256";
"AllocateMemory";
"systemerror.50_3";
"ReportError";
"ErrorExit";
"FreeMemory";
"SetupCPUEmFloatArrays";
"DoEmFloatIteration";
"loops_30";
"__printf_chk";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.50_3";
"global_emfloatstruct.0+32" -> "ESCAPED";
"global_emfloatstruct.0+32" -> "global_emfloatstruct.64+256";
"global_emfloatstruct.0+32" -> "systemerror.50_3";
"global_emfloatstruct.64+256" -> "ESCAPED";
"systemerror.50_3" -> "ESCAPED";
"loops_30" -> "ESCAPED";
"loops_30" -> "global_emfloatstruct.64+256";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL systemerror }
NONLOCAL = { ESCAPED NONLOCAL } same as global_emfloatstruct.0+32
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_1 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
global_emfloatstruct.0+32 = { ESCAPED NONLOCAL }
global_emfloatstruct.64+256 = { NULL ESCAPED NONLOCAL }
_2 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
AllocateMemory = { }
systemerror = { ESCAPED NONLOCAL } same as systemerror.50_3
abase_43 = { ESCAPED NONLOCAL } same as global_emfloatstruct.0+32
systemerror.50_3 = { ESCAPED NONLOCAL }
systemerror.51_4 = { ESCAPED NONLOCAL } same as systemerror.50_3
ReportError = { }
ErrorExit = { }
_5 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
_6 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
bbase_47 = { ESCAPED NONLOCAL } same as global_emfloatstruct.0+32
systemerror.52_7 = { ESCAPED NONLOCAL } same as systemerror.50_3
systemerror.53_8 = { ESCAPED NONLOCAL } same as systemerror.50_3
FreeMemory = { }
_9 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
_10 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
cbase_52 = { ESCAPED NONLOCAL } same as global_emfloatstruct.0+32
systemerror.54_11 = { ESCAPED NONLOCAL } same as systemerror.50_3
systemerror.55_12 = { ESCAPED NONLOCAL } same as systemerror.50_3
_13 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
SetupCPUEmFloatArrays = { }
_14 = { ESCAPED NONLOCAL } same as global_emfloatstruct.0+32
_15 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
DoEmFloatIteration = { }
loops_30 = { NONLOCAL }
tickcount_61 = { ESCAPED NONLOCAL } same as global_emfloatstruct.0+32
global_min_ticks.56_16 = { ESCAPED NONLOCAL } same as global_emfloatstruct.0+32
global_min_ticks = { ESCAPED NONLOCAL } same as global_emfloatstruct.0+32
loops_62 = { NONLOCAL } same as loops_30
_17 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
__printf_chk = { }
_83 = { ESCAPED NONLOCAL } same as global_emfloatstruct.0+32
accumtime_28 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
accumtime_73 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
iterations_29 = { NONLOCAL } same as loops_30
iterations_74 = { NONLOCAL } same as loops_30
_18 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
_19 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
_72 = { ESCAPED NONLOCAL } same as global_emfloatstruct.0+32
TicksToSecs = { }
_20 = { ESCAPED NONLOCAL } same as global_emfloatstruct.0+32
_21 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
_22 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
_23 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
_24 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
TicksToFracSecs = { }
_25 = { ESCAPED NONLOCAL } same as global_emfloatstruct.0+32
_26 = { NULL ESCAPED NONLOCAL } same as global_emfloatstruct.64+256
_27 = { ESCAPED NONLOCAL } same as global_emfloatstruct.0+32


Alias information for DoEmFloat

Aliased symbols

systemerror, UID D.5011, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.5011 } (escaped)

Flow-insensitive points-to information

abase_43, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
bbase_47, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
cbase_52, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

DoEmFloat ()
{
  int D.6536;
  long unsigned int loops;
  int systemerror;
  char * errorcontext;
  long unsigned int tickcount;
  double iterations;
  long unsigned int accumtime;
  struct InternalFPF * cbase;
  struct InternalFPF * bbase;
  struct InternalFPF * abase;
  struct EmFloatStruct * locemfloatstruct;
  long unsigned int _1;
  long unsigned int _2;
  int systemerror.50_3;
  int systemerror.51_4;
  long unsigned int _5;
  long unsigned int _6;
  int systemerror.52_7;
  int systemerror.53_8;
  long unsigned int _9;
  long unsigned int _10;
  int systemerror.54_11;
  int systemerror.55_12;
  long unsigned int _13;
  int _14;
  long unsigned int _15;
  long unsigned int global_min_ticks.56_16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  double _23;
  double _24;
  double _25;
  double _26;
  int _27;
  long unsigned int _72;
  int _83;

  <bb 2> [0.00%]:
  _1 = global_emfloatstruct.arraysize;
  _2 = _1 * 12;
  abase_43 = AllocateMemory (_2, &systemerror);
  systemerror.50_3 = systemerror;
  if (systemerror.50_3 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  systemerror.51_4 = systemerror;
  ReportError ("CPU:Floating Emulation", systemerror.51_4);
  ErrorExit ();

  <bb 4> [0.00%]:
  _5 = global_emfloatstruct.arraysize;
  _6 = _5 * 12;
  bbase_47 = AllocateMemory (_6, &systemerror);
  systemerror.52_7 = systemerror;
  if (systemerror.52_7 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  systemerror.53_8 = systemerror;
  ReportError ("CPU:Floating Emulation", systemerror.53_8);
  FreeMemory (abase_43, &systemerror);
  ErrorExit ();

  <bb 6> [0.00%]:
  _9 = global_emfloatstruct.arraysize;
  _10 = _9 * 12;
  cbase_52 = AllocateMemory (_10, &systemerror);
  systemerror.54_11 = systemerror;
  if (systemerror.54_11 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  systemerror.55_12 = systemerror;
  ReportError ("CPU:Floating Emulation", systemerror.55_12);
  FreeMemory (abase_43, &systemerror);
  FreeMemory (bbase_47, &systemerror);
  ErrorExit ();

  <bb 8> [0.00%]:
  _13 = global_emfloatstruct.arraysize;
  SetupCPUEmFloatArrays (abase_43, bbase_47, cbase_52, _13);
  _14 = global_emfloatstruct.adjust;
  if (_14 == 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 9> [0.00%]:
  global_emfloatstruct.loops = 0;
  goto <bb 13>; [0.00%]

  <bb 10> [0.00%]:
  _15 = global_emfloatstruct.arraysize;
  tickcount_61 = DoEmFloatIteration (abase_43, bbase_47, cbase_52, _15, loops_30);
  global_min_ticks.56_16 = global_min_ticks;
  if (global_min_ticks.56_16 < tickcount_61)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  global_emfloatstruct.loops = loops_30;
  goto <bb 14>; [0.00%]

  <bb 12> [0.00%]:
  loops_62 = loops_30 * 2;

  <bb 13> [0.00%]:
  # loops_30 = PHI <1(9), loops_62(12)>
  if (loops_30 <= 499999)
    goto <bb 10>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [0.00%]:
  _17 = global_emfloatstruct.loops;
  if (_17 == 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [100.00%]:
  _83 = __printf_chk (1, "CPU:EMFPU -- CMPUEMFLOATLOOPMAX limit hit\n");
  FreeMemory (abase_43, &systemerror);
  FreeMemory (bbase_47, &systemerror);
  FreeMemory (cbase_52, &systemerror);
  ErrorExit ();

  <bb 16> [0.00%]:

  <bb 17> [0.00%]:
  # accumtime_28 = PHI <0(16), accumtime_73(17)>
  # iterations_29 = PHI <0.0(16), iterations_74(17)>
  _18 = global_emfloatstruct.loops;
  _19 = global_emfloatstruct.arraysize;
  _72 = DoEmFloatIteration (abase_43, bbase_47, cbase_52, _19, _18);
  accumtime_73 = accumtime_28 + _72;
  iterations_74 = iterations_29 + 1.0e+0;
  _20 = TicksToSecs (accumtime_73);
  _21 = global_emfloatstruct.request_secs;
  if (_20 < _21)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 18> [0.00%]:
  FreeMemory (abase_43, &systemerror);
  FreeMemory (bbase_47, &systemerror);
  FreeMemory (cbase_52, &systemerror);
  _22 = global_emfloatstruct.loops;
  _23 = (double) _22;
  _24 = _23 * iterations_74;
  _25 = TicksToFracSecs (accumtime_73);
  _26 = _24 / _25;
  global_emfloatstruct.emflops = _26;
  _27 = global_emfloatstruct.adjust;
  if (_27 == 0)
    goto <bb 19>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 19> [0.00%]:
  global_emfloatstruct.adjust = 1;

  <bb 20> [0.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoFourier (DoFourier, funcdef_no=69, decl_uid=4578, cgraph_uid=69, symbol_order=94)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
global_fourierstruct.0+32 = NONLOCAL
global_fourierstruct.64+192 = NONLOCAL
_1 = global_fourierstruct.0+32
global_fourierstruct.64+192 = &NONLOCAL
ESCAPED = &NONLOCAL
_2 = global_fourierstruct.64+192
_3 = _2
_3 = &NONLOCAL
ESCAPED = _3
ESCAPED = &systemerror
abase_58 = NONLOCAL
systemerror.57_4 = systemerror
systemerror.58_5 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.58_5
_6 = global_fourierstruct.64+192
_7 = _6
_7 = &NONLOCAL
ESCAPED = _7
ESCAPED = &systemerror
bbase_62 = NONLOCAL
systemerror.59_8 = systemerror
systemerror.60_9 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.60_9
ESCAPED = abase_58
ESCAPED = &systemerror
_10 = global_fourierstruct.64+192
ESCAPED = abase_58
ESCAPED = bbase_62
ESCAPED = _10
_11 = NONLOCAL
global_min_ticks = NONLOCAL
global_min_ticks.61_12 = global_min_ticks
ESCAPED = abase_58
ESCAPED = &systemerror
ESCAPED = bbase_62
ESCAPED = &systemerror
_13 = global_fourierstruct.64+192
_14 = _13
_14 = &NONLOCAL
global_fourierstruct.64+192 = _14
ESCAPED = _14
_15 = global_fourierstruct.64+192
_16 = _15
_16 = &NONLOCAL
ESCAPED = _16
ESCAPED = &systemerror
abase_48 = NONLOCAL
systemerror.62_17 = systemerror
systemerror.63_18 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.63_18
_19 = global_fourierstruct.64+192
_20 = _19
_20 = &NONLOCAL
ESCAPED = _20
ESCAPED = &systemerror
bbase_52 = NONLOCAL
systemerror.64_21 = systemerror
systemerror.65_22 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.65_22
ESCAPED = abase_48
ESCAPED = &systemerror
abase_33 = abase_58
abase_33 = abase_48
abase_33 = abase_48
bbase_34 = bbase_62
bbase_34 = bbase_52
bbase_34 = bbase_52
accumtime_35 = &NULL
accumtime_35 = accumtime_74
iterations_36 = &NONLOCAL
iterations_36 = iterations_75
_23 = global_fourierstruct.64+192
ESCAPED = abase_33
ESCAPED = bbase_34
ESCAPED = _23
_73 = NONLOCAL
accumtime_74 = accumtime_35
accumtime_74 = _73
_24 = global_fourierstruct.64+192
_25 = _24
_26 = _25
_26 = &NONLOCAL
_27 = _26
_27 = &NONLOCAL
iterations_75 = _27
iterations_75 = iterations_36
ESCAPED = accumtime_74
_28 = NONLOCAL
_29 = global_fourierstruct.64+192
ESCAPED = abase_33
ESCAPED = &systemerror
ESCAPED = bbase_34
ESCAPED = &systemerror
ESCAPED = accumtime_74
_30 = NONLOCAL
_31 = iterations_75
_31 = _30
global_fourierstruct.64+192 = _31
ESCAPED = _31
_32 = global_fourierstruct.0+32
global_fourierstruct.0+32 = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 14 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_1";
"global_fourierstruct.0+32"[label="global_fourierstruct.0+32 = { 5 }"];
"global_fourierstruct.64+192"[label="global_fourierstruct.64+192 = { 5 }"];
"_2";
"_3"[label="_3 = { 5 }"];
"AllocateMemory";
"systemerror";
"abase_58";
"systemerror.57_4";
"systemerror.58_5";
"ReportError";
"ErrorExit";
"_6";
"_7"[label="_7 = { 5 }"];
"bbase_62";
"systemerror.59_8";
"systemerror.60_9";
"FreeMemory";
"_10";
"DoFPUTransIteration";
"_11";
"global_min_ticks.61_12";
"global_min_ticks";
"_15";
"_16"[label="_16 = { 5 }"];
"abase_48";
"systemerror.62_17";
"systemerror.63_18";
"_19";
"_20"[label="_20 = { 5 }"];
"bbase_52";
"systemerror.64_21";
"systemerror.65_22";
"abase_33";
"bbase_34";
"accumtime_74"[label="accumtime_74 = { 1 }"];
"_23";
"_73";
"TicksToSecs";
"_28";
"_29";
"TicksToFracSecs";
"_30";
"_32";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*_1";
"*global_fourierstruct.0+32";
"*AllocateMemory";
"*systemerror";
"*systemerror.57_4";
"*systemerror.58_5";
"*ReportError";
"*ErrorExit";
"*systemerror.59_8";
"*systemerror.60_9";
"*FreeMemory";
"*DoFPUTransIteration";
"*_11";
"*global_min_ticks.61_12";
"*global_min_ticks";
"*systemerror.62_17";
"*systemerror.63_18";
"*systemerror.64_21";
"*systemerror.65_22";
"*TicksToSecs";
"*_28";
"*_29";
"*TicksToFracSecs";
"*_32";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_3" -> "ESCAPED";
"abase_58" -> "ESCAPED";
"systemerror.58_5" -> "ESCAPED";
"_7" -> "ESCAPED";
"bbase_62" -> "ESCAPED";
"systemerror.60_9" -> "ESCAPED";
"_10" -> "ESCAPED";
"global_fourierstruct.64+192" -> "ESCAPED";
"_16" -> "ESCAPED";
"abase_48" -> "ESCAPED";
"systemerror.63_18" -> "ESCAPED";
"_20" -> "ESCAPED";
"systemerror.65_22" -> "ESCAPED";
"abase_33" -> "ESCAPED";
"bbase_34" -> "ESCAPED";
"accumtime_74" -> "ESCAPED";
"_23" -> "ESCAPED";
"global_fourierstruct.64+192" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"global_fourierstruct.0+32" -> "_1";
"NONLOCAL" -> "global_fourierstruct.0+32";
"NONLOCAL" -> "global_fourierstruct.64+192";
"global_fourierstruct.64+192" -> "global_fourierstruct.64+192";
"global_fourierstruct.64+192" -> "global_fourierstruct.64+192";
"global_fourierstruct.64+192" -> "global_fourierstruct.64+192";
"global_fourierstruct.64+192" -> "global_fourierstruct.64+192";
"global_fourierstruct.64+192" -> "global_fourierstruct.64+192";
"global_fourierstruct.64+192" -> "global_fourierstruct.64+192";
"global_fourierstruct.64+192" -> "global_fourierstruct.64+192";
"global_fourierstruct.64+192" -> "global_fourierstruct.64+192";
"global_fourierstruct.64+192" -> "global_fourierstruct.64+192";
"_30" -> "global_fourierstruct.64+192";
"global_fourierstruct.64+192" -> "global_fourierstruct.64+192";
"global_fourierstruct.64+192" -> "_2";
"_2" -> "_3";
"NONLOCAL" -> "abase_58";
"systemerror" -> "systemerror.57_4";
"systemerror" -> "systemerror.58_5";
"global_fourierstruct.64+192" -> "_6";
"_6" -> "_7";
"NONLOCAL" -> "bbase_62";
"systemerror" -> "systemerror.59_8";
"systemerror" -> "systemerror.60_9";
"global_fourierstruct.64+192" -> "_10";
"NONLOCAL" -> "_11";
"global_min_ticks" -> "global_min_ticks.61_12";
"NONLOCAL" -> "global_min_ticks";
"global_fourierstruct.64+192" -> "_15";
"_15" -> "_16";
"NONLOCAL" -> "abase_48";
"systemerror" -> "systemerror.62_17";
"systemerror" -> "systemerror.63_18";
"global_fourierstruct.64+192" -> "_19";
"_19" -> "_20";
"NONLOCAL" -> "bbase_52";
"systemerror" -> "systemerror.64_21";
"systemerror" -> "systemerror.65_22";
"abase_58" -> "abase_33";
"abase_48" -> "abase_33";
"bbase_62" -> "bbase_34";
"bbase_52" -> "bbase_34";
"accumtime_74" -> "accumtime_74";
"accumtime_74" -> "accumtime_74";
"_73" -> "accumtime_74";
"global_fourierstruct.64+192" -> "_23";
"NONLOCAL" -> "_73";
"NONLOCAL" -> "_28";
"global_fourierstruct.64+192" -> "_29";
"NONLOCAL" -> "_30";
"global_fourierstruct.0+32" -> "_32";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"global_fourierstruct.0+32";
"AllocateMemory";
"systemerror.57_4";
"ReportError";
"ErrorExit";
"FreeMemory";
"DoFPUTransIteration";
"accumtime_35";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.57_4";
"global_fourierstruct.0+32" -> "ESCAPED";
"global_fourierstruct.0+32" -> "accumtime_35";
"systemerror.57_4" -> "ESCAPED";
"accumtime_35" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = global_fourierstruct.0+32\l"];
"STOREDANYTHING";
"INTEGER";
"global_fourierstruct.0+32";
"AllocateMemory";
"systemerror.57_4";
"ReportError";
"ErrorExit";
"FreeMemory";
"DoFPUTransIteration";
"accumtime_35";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.57_4";
"global_fourierstruct.0+32" -> "ESCAPED";
"global_fourierstruct.0+32" -> "systemerror.57_4";
"global_fourierstruct.0+32" -> "accumtime_35";
"systemerror.57_4" -> "ESCAPED";
"accumtime_35" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL systemerror }
NONLOCAL = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_1 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
global_fourierstruct.0+32 = { ESCAPED NONLOCAL }
global_fourierstruct.64+192 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_2 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_3 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
AllocateMemory = { }
systemerror = { ESCAPED NONLOCAL } same as systemerror.57_4
abase_58 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
systemerror.57_4 = { ESCAPED NONLOCAL }
systemerror.58_5 = { ESCAPED NONLOCAL } same as systemerror.57_4
ReportError = { }
ErrorExit = { }
_6 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_7 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
bbase_62 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
systemerror.59_8 = { ESCAPED NONLOCAL } same as systemerror.57_4
systemerror.60_9 = { ESCAPED NONLOCAL } same as systemerror.57_4
FreeMemory = { }
_10 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
DoFPUTransIteration = { }
_11 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
global_min_ticks.61_12 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
global_min_ticks = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_13 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_14 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_15 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_16 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
abase_48 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
systemerror.62_17 = { ESCAPED NONLOCAL } same as systemerror.57_4
systemerror.63_18 = { ESCAPED NONLOCAL } same as systemerror.57_4
_19 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_20 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
bbase_52 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
systemerror.64_21 = { ESCAPED NONLOCAL } same as systemerror.57_4
systemerror.65_22 = { ESCAPED NONLOCAL } same as systemerror.57_4
abase_33 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
bbase_34 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
accumtime_35 = { NULL ESCAPED NONLOCAL }
accumtime_74 = { NULL ESCAPED NONLOCAL } same as accumtime_35
iterations_36 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
iterations_75 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_23 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_73 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_24 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_25 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_26 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_27 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
TicksToSecs = { }
_28 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_29 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
TicksToFracSecs = { }
_30 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_31 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32
_32 = { ESCAPED NONLOCAL } same as global_fourierstruct.0+32


Alias information for DoFourier

Aliased symbols

systemerror, UID D.5027, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.5027 } (escaped)

Flow-insensitive points-to information

abase_33, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
bbase_34, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
abase_48, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
bbase_52, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
abase_58, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
bbase_62, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

DoFourier ()
{
  int systemerror;
  char * errorcontext;
  double iterations;
  long unsigned int accumtime;
  fardouble * bbase;
  fardouble * abase;
  struct FourierStruct * locfourierstruct;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  int systemerror.57_4;
  int systemerror.58_5;
  long unsigned int _6;
  long unsigned int _7;
  int systemerror.59_8;
  int systemerror.60_9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int global_min_ticks.61_12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  int systemerror.62_17;
  int systemerror.63_18;
  long unsigned int _19;
  long unsigned int _20;
  int systemerror.64_21;
  int systemerror.65_22;
  long unsigned int _23;
  long unsigned int _24;
  double _25;
  double _26;
  double _27;
  long unsigned int _28;
  long unsigned int _29;
  double _30;
  double _31;
  int _32;
  long unsigned int _73;

  <bb 2> [0.00%]:
  _1 = global_fourierstruct.adjust;
  if (_1 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 3> [0.00%]:
  global_fourierstruct.arraysize = 100;

  <bb 4> [0.00%]:
  _2 = global_fourierstruct.arraysize;
  _3 = _2 * 8;
  abase_58 = AllocateMemory (_3, &systemerror);
  systemerror.57_4 = systemerror;
  if (systemerror.57_4 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  systemerror.58_5 = systemerror;
  ReportError ("FPU:Transcendental", systemerror.58_5);
  ErrorExit ();

  <bb 6> [0.00%]:
  _6 = global_fourierstruct.arraysize;
  _7 = _6 * 8;
  bbase_62 = AllocateMemory (_7, &systemerror);
  systemerror.59_8 = systemerror;
  if (systemerror.59_8 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  systemerror.60_9 = systemerror;
  ReportError ("FPU:Transcendental", systemerror.60_9);
  FreeMemory (abase_58, &systemerror);
  ErrorExit ();

  <bb 8> [0.00%]:
  _10 = global_fourierstruct.arraysize;
  _11 = DoFPUTransIteration (abase_58, bbase_62, _10);
  global_min_ticks.61_12 = global_min_ticks;
  if (_11 > global_min_ticks.61_12)
    goto <bb 14>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  FreeMemory (abase_58, &systemerror);
  FreeMemory (bbase_62, &systemerror);
  _13 = global_fourierstruct.arraysize;
  _14 = _13 + 50;
  global_fourierstruct.arraysize = _14;
  goto <bb 4>; [0.00%]

  <bb 10> [0.00%]:
  _15 = global_fourierstruct.arraysize;
  _16 = _15 * 8;
  abase_48 = AllocateMemory (_16, &systemerror);
  systemerror.62_17 = systemerror;
  if (systemerror.62_17 != 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  systemerror.63_18 = systemerror;
  ReportError ("FPU:Transcendental", systemerror.63_18);
  ErrorExit ();

  <bb 12> [0.00%]:
  _19 = global_fourierstruct.arraysize;
  _20 = _19 * 8;
  bbase_52 = AllocateMemory (_20, &systemerror);
  systemerror.64_21 = systemerror;
  if (systemerror.64_21 != 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  systemerror.65_22 = systemerror;
  ReportError ("FPU:Transcendental", systemerror.65_22);
  FreeMemory (abase_48, &systemerror);
  ErrorExit ();

  <bb 14> [0.00%]:
  # abase_33 = PHI <abase_58(8), abase_48(12), abase_48(13)>
  # bbase_34 = PHI <bbase_62(8), bbase_52(12), bbase_52(13)>

  <bb 15> [0.00%]:
  # accumtime_35 = PHI <0(14), accumtime_74(15)>
  # iterations_36 = PHI <0.0(14), iterations_75(15)>
  _23 = global_fourierstruct.arraysize;
  _73 = DoFPUTransIteration (abase_33, bbase_34, _23);
  accumtime_74 = accumtime_35 + _73;
  _24 = global_fourierstruct.arraysize;
  _25 = (double) _24;
  _26 = _25 * 2.0e+0;
  _27 = _26 - 1.0e+0;
  iterations_75 = _27 + iterations_36;
  _28 = TicksToSecs (accumtime_74);
  _29 = global_fourierstruct.request_secs;
  if (_28 < _29)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 16> [0.00%]:
  FreeMemory (abase_33, &systemerror);
  FreeMemory (bbase_34, &systemerror);
  _30 = TicksToFracSecs (accumtime_74);
  _31 = iterations_75 / _30;
  global_fourierstruct.fflops = _31;
  _32 = global_fourierstruct.adjust;
  if (_32 == 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  global_fourierstruct.adjust = 1;

  <bb 18> [0.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoAssign (DoAssign, funcdef_no=73, decl_uid=4600, cgraph_uid=73, symbol_order=98)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
global_assignstruct.0+32 = NONLOCAL
global_assignstruct.64+192 = NONLOCAL
_1 = global_assignstruct.0+32
global_assignstruct.64+192 = &NONLOCAL
ESCAPED = &NONLOCAL
_2 = global_assignstruct.64+192
_3 = _2
_3 = &NONLOCAL
ESCAPED = _3
ESCAPED = &systemerror
arraybase_42 = NONLOCAL
systemerror.66_4 = systemerror
systemerror.67_5 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.67_5
ESCAPED = arraybase_42
ESCAPED = &systemerror
_6 = global_assignstruct.64+192
ESCAPED = arraybase_42
ESCAPED = _6
_7 = NONLOCAL
global_min_ticks = NONLOCAL
global_min_ticks.68_8 = global_min_ticks
ESCAPED = arraybase_42
ESCAPED = &systemerror
_9 = global_assignstruct.64+192
_10 = _9
_10 = &NONLOCAL
global_assignstruct.64+192 = _10
ESCAPED = _10
_11 = global_assignstruct.64+192
_12 = _11
_12 = &NONLOCAL
ESCAPED = _12
ESCAPED = &systemerror
arraybase_36 = NONLOCAL
systemerror.69_13 = systemerror
systemerror.70_14 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.70_14
ESCAPED = arraybase_36
ESCAPED = &systemerror
arraybase_24 = arraybase_42
arraybase_24 = arraybase_36
arraybase_24 = arraybase_36
accumtime_25 = &NULL
accumtime_25 = accumtime_53
iterations_26 = &NONLOCAL
iterations_26 = iterations_54
_15 = global_assignstruct.64+192
ESCAPED = arraybase_24
ESCAPED = _15
_52 = NONLOCAL
accumtime_53 = accumtime_25
accumtime_53 = _52
iterations_54 = iterations_26
iterations_54 = &NONLOCAL
ESCAPED = accumtime_53
_16 = NONLOCAL
_17 = global_assignstruct.64+192
ESCAPED = arraybase_24
ESCAPED = &systemerror
_18 = global_assignstruct.64+192
_19 = _18
_20 = _19
_20 = iterations_54
ESCAPED = accumtime_53
_21 = NONLOCAL
_22 = _20
_22 = _21
global_assignstruct.64+192 = _22
ESCAPED = _22
_23 = global_assignstruct.0+32
global_assignstruct.0+32 = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 14 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_1";
"global_assignstruct.0+32"[label="global_assignstruct.0+32 = { 5 }"];
"global_assignstruct.64+192"[label="global_assignstruct.64+192 = { 5 }"];
"_2";
"_3"[label="_3 = { 5 }"];
"AllocateMemory";
"systemerror";
"arraybase_42";
"systemerror.66_4";
"systemerror.67_5";
"ReportError";
"FreeMemory";
"ErrorExit";
"_6";
"DoAssignIteration";
"_7";
"global_min_ticks.68_8";
"global_min_ticks";
"_11";
"_12"[label="_12 = { 5 }"];
"arraybase_36";
"systemerror.69_13";
"systemerror.70_14";
"arraybase_24";
"accumtime_53"[label="accumtime_53 = { 1 }"];
"iterations_54"[label="iterations_54 = { 5 }"];
"_15";
"_52";
"TicksToSecs";
"_16";
"_17";
"TicksToFracSecs";
"_21";
"_23";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*_1";
"*global_assignstruct.0+32";
"*AllocateMemory";
"*systemerror";
"*systemerror.66_4";
"*systemerror.67_5";
"*ReportError";
"*FreeMemory";
"*ErrorExit";
"*DoAssignIteration";
"*_7";
"*global_min_ticks.68_8";
"*global_min_ticks";
"*systemerror.69_13";
"*systemerror.70_14";
"*iterations_54";
"*TicksToSecs";
"*_16";
"*_17";
"*TicksToFracSecs";
"*_23";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_3" -> "ESCAPED";
"arraybase_42" -> "ESCAPED";
"systemerror.67_5" -> "ESCAPED";
"_6" -> "ESCAPED";
"global_assignstruct.64+192" -> "ESCAPED";
"_12" -> "ESCAPED";
"arraybase_36" -> "ESCAPED";
"systemerror.70_14" -> "ESCAPED";
"arraybase_24" -> "ESCAPED";
"accumtime_53" -> "ESCAPED";
"_15" -> "ESCAPED";
"global_assignstruct.64+192" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"global_assignstruct.0+32" -> "_1";
"NONLOCAL" -> "global_assignstruct.0+32";
"NONLOCAL" -> "global_assignstruct.64+192";
"global_assignstruct.64+192" -> "global_assignstruct.64+192";
"global_assignstruct.64+192" -> "global_assignstruct.64+192";
"global_assignstruct.64+192" -> "global_assignstruct.64+192";
"iterations_54" -> "global_assignstruct.64+192";
"global_assignstruct.64+192" -> "global_assignstruct.64+192";
"global_assignstruct.64+192" -> "global_assignstruct.64+192";
"global_assignstruct.64+192" -> "global_assignstruct.64+192";
"_21" -> "global_assignstruct.64+192";
"global_assignstruct.64+192" -> "global_assignstruct.64+192";
"global_assignstruct.64+192" -> "_2";
"_2" -> "_3";
"NONLOCAL" -> "arraybase_42";
"systemerror" -> "systemerror.66_4";
"systemerror" -> "systemerror.67_5";
"global_assignstruct.64+192" -> "_6";
"NONLOCAL" -> "_7";
"global_min_ticks" -> "global_min_ticks.68_8";
"NONLOCAL" -> "global_min_ticks";
"global_assignstruct.64+192" -> "_11";
"_11" -> "_12";
"NONLOCAL" -> "arraybase_36";
"systemerror" -> "systemerror.69_13";
"systemerror" -> "systemerror.70_14";
"arraybase_42" -> "arraybase_24";
"arraybase_36" -> "arraybase_24";
"accumtime_53" -> "accumtime_53";
"accumtime_53" -> "accumtime_53";
"_52" -> "accumtime_53";
"iterations_54" -> "iterations_54";
"iterations_54" -> "iterations_54";
"global_assignstruct.64+192" -> "_15";
"NONLOCAL" -> "_52";
"NONLOCAL" -> "_16";
"global_assignstruct.64+192" -> "_17";
"NONLOCAL" -> "_21";
"global_assignstruct.0+32" -> "_23";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"global_assignstruct.0+32";
"AllocateMemory";
"systemerror.66_4";
"ReportError";
"FreeMemory";
"ErrorExit";
"DoAssignIteration";
"accumtime_25";
"iterations_26";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.66_4";
"global_assignstruct.0+32" -> "ESCAPED";
"global_assignstruct.0+32" -> "accumtime_25";
"systemerror.66_4" -> "ESCAPED";
"accumtime_25" -> "ESCAPED";
"iterations_26" -> "global_assignstruct.0+32";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = global_assignstruct.0+32\l"];
"STOREDANYTHING";
"INTEGER";
"global_assignstruct.0+32";
"AllocateMemory";
"systemerror.66_4";
"ReportError";
"FreeMemory";
"ErrorExit";
"DoAssignIteration";
"accumtime_25";
"iterations_26";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.66_4";
"global_assignstruct.0+32" -> "ESCAPED";
"global_assignstruct.0+32" -> "systemerror.66_4";
"global_assignstruct.0+32" -> "accumtime_25";
"systemerror.66_4" -> "ESCAPED";
"accumtime_25" -> "ESCAPED";
"iterations_26" -> "global_assignstruct.0+32";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL systemerror }
NONLOCAL = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_1 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
global_assignstruct.0+32 = { ESCAPED NONLOCAL }
global_assignstruct.64+192 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
_2 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
_3 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
AllocateMemory = { }
systemerror = { ESCAPED NONLOCAL } same as systemerror.66_4
arraybase_42 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
systemerror.66_4 = { ESCAPED NONLOCAL }
systemerror.67_5 = { ESCAPED NONLOCAL } same as systemerror.66_4
ReportError = { }
FreeMemory = { }
ErrorExit = { }
_6 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
DoAssignIteration = { }
_7 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
global_min_ticks.68_8 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
global_min_ticks = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
_9 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
_10 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
_11 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
_12 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
arraybase_36 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
systemerror.69_13 = { ESCAPED NONLOCAL } same as systemerror.66_4
systemerror.70_14 = { ESCAPED NONLOCAL } same as systemerror.66_4
arraybase_24 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
accumtime_25 = { NULL ESCAPED NONLOCAL }
accumtime_53 = { NULL ESCAPED NONLOCAL } same as accumtime_25
iterations_26 = { NONLOCAL }
iterations_54 = { NONLOCAL } same as iterations_26
_15 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
_52 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
TicksToSecs = { }
_16 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
_17 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
_18 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
_19 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
_20 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
TicksToFracSecs = { }
_21 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
_22 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32
_23 = { ESCAPED NONLOCAL } same as global_assignstruct.0+32


Alias information for DoAssign

Aliased symbols

systemerror, UID D.5070, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.5070 } (escaped)

Flow-insensitive points-to information

arraybase_24, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
arraybase_36, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
arraybase_42, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

DoAssign ()
{
  double iterations;
  long unsigned int accumtime;
  int systemerror;
  char * errorcontext;
  farlong * arraybase;
  struct AssignStruct * locassignstruct;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  int systemerror.66_4;
  int systemerror.67_5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int global_min_ticks.68_8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  int systemerror.69_13;
  int systemerror.70_14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  double _19;
  double _20;
  double _21;
  double _22;
  int _23;
  long unsigned int _52;

  <bb 2> [0.00%]:
  _1 = global_assignstruct.adjust;
  if (_1 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 3> [0.00%]:
  global_assignstruct.numarrays = 1;

  <bb 4> [0.00%]:
  _2 = global_assignstruct.numarrays;
  _3 = _2 * 81608;
  arraybase_42 = AllocateMemory (_3, &systemerror);
  systemerror.66_4 = systemerror;
  if (systemerror.66_4 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  systemerror.67_5 = systemerror;
  ReportError ("CPU:Assignment", systemerror.67_5);
  FreeMemory (arraybase_42, &systemerror);
  ErrorExit ();

  <bb 6> [0.00%]:
  _6 = global_assignstruct.numarrays;
  _7 = DoAssignIteration (arraybase_42, _6);
  global_min_ticks.68_8 = global_min_ticks;
  if (_7 > global_min_ticks.68_8)
    goto <bb 10>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  FreeMemory (arraybase_42, &systemerror);
  _9 = global_assignstruct.numarrays;
  _10 = _9 + 1;
  global_assignstruct.numarrays = _10;
  goto <bb 4>; [0.00%]

  <bb 8> [0.00%]:
  _11 = global_assignstruct.numarrays;
  _12 = _11 * 81608;
  arraybase_36 = AllocateMemory (_12, &systemerror);
  systemerror.69_13 = systemerror;
  if (systemerror.69_13 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  systemerror.70_14 = systemerror;
  ReportError ("CPU:Assignment", systemerror.70_14);
  FreeMemory (arraybase_36, &systemerror);
  ErrorExit ();

  <bb 10> [0.00%]:
  # arraybase_24 = PHI <arraybase_42(6), arraybase_36(8), arraybase_36(9)>

  <bb 11> [0.00%]:
  # accumtime_25 = PHI <0(10), accumtime_53(11)>
  # iterations_26 = PHI <0.0(10), iterations_54(11)>
  _15 = global_assignstruct.numarrays;
  _52 = DoAssignIteration (arraybase_24, _15);
  accumtime_53 = accumtime_25 + _52;
  iterations_54 = iterations_26 + 1.0e+0;
  _16 = TicksToSecs (accumtime_53);
  _17 = global_assignstruct.request_secs;
  if (_16 < _17)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [0.00%]:
  FreeMemory (arraybase_24, &systemerror);
  _18 = global_assignstruct.numarrays;
  _19 = (double) _18;
  _20 = _19 * iterations_54;
  _21 = TicksToFracSecs (accumtime_53);
  _22 = _20 / _21;
  global_assignstruct.iterspersec = _22;
  _23 = global_assignstruct.adjust;
  if (_23 == 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  global_assignstruct.adjust = 1;

  <bb 14> [0.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoIDEA (DoIDEA, funcdef_no=82, decl_uid=4624, cgraph_uid=82, symbol_order=107)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_1 = NONLOCAL
_2 = _1
userkey = _2
i_101 = i_35
i_101 = &NONLOCAL
i_35 = &NULL
i_35 = i_101
Z = &NULL
i_98 = i_36
i_98 = &NONLOCAL
i_36 = &NULL
i_36 = i_98
ESCAPED = &userkey
ESCAPED = &Z
ESCAPED = &Z
ESCAPED = &DK
global_ideastruct.0+32 = NONLOCAL
global_ideastruct.64+256 = NONLOCAL
_3 = global_ideastruct.64+256
ESCAPED = _3
ESCAPED = &systemerror
plain1_59 = NONLOCAL
systemerror.102_4 = systemerror
systemerror.103_5 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.103_5
_6 = global_ideastruct.64+256
ESCAPED = _6
ESCAPED = &systemerror
crypt1_63 = NONLOCAL
systemerror.104_7 = systemerror
systemerror.105_8 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.105_8
ESCAPED = plain1_59
ESCAPED = &systemerror
_9 = global_ideastruct.64+256
ESCAPED = _9
ESCAPED = &systemerror
plain2_68 = NONLOCAL
systemerror.106_10 = systemerror
systemerror.107_11 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.107_11
ESCAPED = plain1_59
ESCAPED = &systemerror
ESCAPED = crypt1_63
ESCAPED = &systemerror
ESCAPED = &NONLOCAL
_12 = NONLOCAL
_13 = i_37
_14 = plain1_59 + UNKNOWN
_15 = _12
*_14 = _15
i_96 = i_37
i_96 = &NONLOCAL
i_37 = &NULL
i_37 = i_96
_16 = i_37
_17 = global_ideastruct.64+256
_18 = global_ideastruct.0+32
global_ideastruct.64+256 = &NONLOCAL
ESCAPED = &NONLOCAL
_19 = global_ideastruct.64+256
_20 = global_ideastruct.64+256
ESCAPED = plain1_59
ESCAPED = crypt1_63
ESCAPED = plain2_68
ESCAPED = _20
ESCAPED = _19
ESCAPED = &Z
ESCAPED = &DK
_21 = NONLOCAL
global_min_ticks = NONLOCAL
global_min_ticks.108_22 = global_min_ticks
_23 = global_ideastruct.64+256
_24 = _23
_24 = &NONLOCAL
global_ideastruct.64+256 = _24
ESCAPED = _24
_25 = global_ideastruct.64+256
accumtime_38 = &NULL
accumtime_38 = accumtime_81
iterations_39 = &NONLOCAL
iterations_39 = iterations_82
_26 = global_ideastruct.64+256
_27 = global_ideastruct.64+256
ESCAPED = plain1_59
ESCAPED = crypt1_63
ESCAPED = plain2_68
ESCAPED = _27
ESCAPED = _26
ESCAPED = &Z
ESCAPED = &DK
_80 = NONLOCAL
accumtime_81 = accumtime_38
accumtime_81 = _80
_28 = global_ideastruct.64+256
_29 = _28
iterations_82 = _29
iterations_82 = iterations_39
ESCAPED = accumtime_81
_30 = NONLOCAL
_31 = global_ideastruct.64+256
ESCAPED = plain1_59
ESCAPED = &systemerror
ESCAPED = crypt1_63
ESCAPED = &systemerror
ESCAPED = plain2_68
ESCAPED = &systemerror
ESCAPED = accumtime_81
_32 = NONLOCAL
_33 = iterations_82
_33 = _32
global_ideastruct.64+256 = _33
ESCAPED = _33
_34 = global_ideastruct.0+32
global_ideastruct.0+32 = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 12 15 20 25 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"randnum";
"abs_randwc";
"_1";
"_2";
"userkey";
"i_101"[label="i_101 = { 1 5 }"];
"Z"[label="Z = { 1 }"];
"i_98"[label="i_98 = { 1 5 }"];
"en_key_idea";
"de_key_idea";
"DK";
"_3";
"global_ideastruct.0+32"[label="global_ideastruct.0+32 = { 5 }"];
"global_ideastruct.64+256"[label="global_ideastruct.64+256 = { 5 }"];
"AllocateMemory";
"systemerror";
"plain1_59";
"systemerror.102_4";
"systemerror.103_5";
"ReportError";
"ErrorExit";
"_6";
"crypt1_63";
"systemerror.104_7";
"systemerror.105_8";
"FreeMemory";
"_9";
"plain2_68";
"systemerror.106_10";
"systemerror.107_11";
"_12";
"_13";
"i_37"[label="i_37 = { 1 5 }"];
"_14";
"_15";
"_16";
"_17";
"_18";
"_19";
"_20";
"DoIDEAIteration";
"_21";
"global_min_ticks.108_22";
"global_min_ticks";
"_25";
"accumtime_81"[label="accumtime_81 = { 1 }"];
"_26";
"_27";
"_80";
"TicksToSecs";
"_30";
"_31";
"TicksToFracSecs";
"_32";
"_34";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*randnum";
"*abs_randwc";
"*_1";
"*_2";
"*userkey";
"*i_101";
"*i_35";
"*Z";
"*i_98";
"*i_36";
"*en_key_idea";
"*de_key_idea";
"*DK";
"*global_ideastruct.0+32";
"*AllocateMemory";
"*systemerror";
"*systemerror.102_4";
"*systemerror.103_5";
"*ReportError";
"*ErrorExit";
"*systemerror.104_7";
"*systemerror.105_8";
"*FreeMemory";
"*systemerror.106_10";
"*systemerror.107_11";
"*_12";
"*_13";
"*i_37";
"*_14";
"*_15";
"*i_96";
"*_16";
"*_17";
"*_18";
"*DoIDEAIteration";
"*_21";
"*global_min_ticks.108_22";
"*global_min_ticks";
"*_25";
"*TicksToSecs";
"*_30";
"*_31";
"*TicksToFracSecs";
"*_34";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_3" -> "ESCAPED";
"plain1_59" -> "ESCAPED";
"systemerror.103_5" -> "ESCAPED";
"_6" -> "ESCAPED";
"crypt1_63" -> "ESCAPED";
"systemerror.105_8" -> "ESCAPED";
"_9" -> "ESCAPED";
"plain2_68" -> "ESCAPED";
"systemerror.107_11" -> "ESCAPED";
"_19" -> "ESCAPED";
"_20" -> "ESCAPED";
"global_ideastruct.64+256" -> "ESCAPED";
"accumtime_81" -> "ESCAPED";
"_26" -> "ESCAPED";
"_27" -> "ESCAPED";
"global_ideastruct.64+256" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_1";
"_1" -> "_2";
"_2" -> "userkey";
"i_101" -> "i_101";
"i_101" -> "i_101";
"i_98" -> "i_98";
"i_98" -> "i_98";
"global_ideastruct.64+256" -> "_3";
"NONLOCAL" -> "global_ideastruct.0+32";
"NONLOCAL" -> "global_ideastruct.64+256";
"global_ideastruct.64+256" -> "global_ideastruct.64+256";
"global_ideastruct.64+256" -> "global_ideastruct.64+256";
"global_ideastruct.64+256" -> "global_ideastruct.64+256";
"global_ideastruct.64+256" -> "global_ideastruct.64+256";
"global_ideastruct.64+256" -> "global_ideastruct.64+256";
"global_ideastruct.64+256" -> "global_ideastruct.64+256";
"global_ideastruct.64+256" -> "global_ideastruct.64+256";
"_32" -> "global_ideastruct.64+256";
"global_ideastruct.64+256" -> "global_ideastruct.64+256";
"NONLOCAL" -> "plain1_59";
"systemerror" -> "systemerror.102_4";
"systemerror" -> "systemerror.103_5";
"global_ideastruct.64+256" -> "_6";
"NONLOCAL" -> "crypt1_63";
"systemerror" -> "systemerror.104_7";
"systemerror" -> "systemerror.105_8";
"global_ideastruct.64+256" -> "_9";
"NONLOCAL" -> "plain2_68";
"systemerror" -> "systemerror.106_10";
"systemerror" -> "systemerror.107_11";
"NONLOCAL" -> "_12";
"i_37" -> "_13";
"i_37" -> "i_37";
"i_37" -> "i_37";
"_12" -> "_15";
"i_37" -> "_16";
"global_ideastruct.64+256" -> "_17";
"global_ideastruct.0+32" -> "_18";
"global_ideastruct.64+256" -> "_19";
"global_ideastruct.64+256" -> "_20";
"NONLOCAL" -> "_21";
"global_min_ticks" -> "global_min_ticks.108_22";
"NONLOCAL" -> "global_min_ticks";
"global_ideastruct.64+256" -> "_25";
"accumtime_81" -> "accumtime_81";
"accumtime_81" -> "accumtime_81";
"_80" -> "accumtime_81";
"global_ideastruct.64+256" -> "_26";
"global_ideastruct.64+256" -> "_27";
"NONLOCAL" -> "_80";
"NONLOCAL" -> "_30";
"global_ideastruct.64+256" -> "_31";
"NONLOCAL" -> "_32";
"global_ideastruct.0+32" -> "_34";
"_15" -> "*_14";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"randnum";
"abs_randwc";
"_1" [label="\N\n_14 = _1 + UNKNOWN\l"];
"userkey";
"i_101";
"Z";
"en_key_idea";
"de_key_idea";
"DK";
"AllocateMemory";
"systemerror.102_4";
"ReportError";
"ErrorExit";
"FreeMemory";
"_14" [label="\N\n*_14 = _1\l"];
"DoIDEAIteration";
"accumtime_38";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "userkey";
"STOREDANYTHING" -> "Z";
"STOREDANYTHING" -> "DK";
"STOREDANYTHING" -> "systemerror.102_4";
"STOREDANYTHING" -> "_14";
"_1" -> "ESCAPED";
"_1" -> "userkey";
"_1" -> "accumtime_38";
"systemerror.102_4" -> "ESCAPED";
"accumtime_38" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _1\l"];
"STOREDANYTHING";
"INTEGER";
"randnum";
"abs_randwc";
"_1" [label="\N\n_14 = _1 + UNKNOWN\l"];
"userkey";
"i_101";
"Z";
"en_key_idea";
"de_key_idea";
"DK";
"AllocateMemory";
"systemerror.102_4";
"ReportError";
"ErrorExit";
"FreeMemory";
"_14" [label="\N\n*_14 = _1\l"];
"DoIDEAIteration";
"accumtime_38";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "userkey";
"STOREDANYTHING" -> "Z";
"STOREDANYTHING" -> "DK";
"STOREDANYTHING" -> "systemerror.102_4";
"STOREDANYTHING" -> "_14";
"_1" -> "ESCAPED";
"_1" -> "userkey";
"_1" -> "Z";
"_1" -> "DK";
"_1" -> "systemerror.102_4";
"_1" -> "accumtime_38";
"userkey" -> "ESCAPED";
"Z" -> "ESCAPED";
"DK" -> "ESCAPED";
"systemerror.102_4" -> "ESCAPED";
"accumtime_38" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL userkey Z DK systemerror }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
randnum = { }
abs_randwc = { }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
userkey = { ESCAPED NONLOCAL }
i_101 = { NULL NONLOCAL }
i_35 = { NULL NONLOCAL } same as i_101
Z = { NULL ESCAPED NONLOCAL }
i_98 = { NULL NONLOCAL } same as i_101
i_36 = { NULL NONLOCAL } same as i_101
en_key_idea = { }
de_key_idea = { }
DK = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _1
global_ideastruct.0+32 = { ESCAPED NONLOCAL } same as _1
global_ideastruct.64+256 = { ESCAPED NONLOCAL } same as _1
AllocateMemory = { }
systemerror = { ESCAPED NONLOCAL } same as systemerror.102_4
plain1_59 = { ESCAPED NONLOCAL } same as _1
systemerror.102_4 = { ESCAPED NONLOCAL }
systemerror.103_5 = { ESCAPED NONLOCAL } same as systemerror.102_4
ReportError = { }
ErrorExit = { }
_6 = { ESCAPED NONLOCAL } same as _1
crypt1_63 = { ESCAPED NONLOCAL } same as _1
systemerror.104_7 = { ESCAPED NONLOCAL } same as systemerror.102_4
systemerror.105_8 = { ESCAPED NONLOCAL } same as systemerror.102_4
FreeMemory = { }
_9 = { ESCAPED NONLOCAL } same as _1
plain2_68 = { ESCAPED NONLOCAL } same as _1
systemerror.106_10 = { ESCAPED NONLOCAL } same as systemerror.102_4
systemerror.107_11 = { ESCAPED NONLOCAL } same as systemerror.102_4
_12 = { ESCAPED NONLOCAL } same as _1
_13 = { NULL NONLOCAL } same as i_101
i_37 = { NULL NONLOCAL } same as i_101
_14 = { ESCAPED NONLOCAL }
_15 = { ESCAPED NONLOCAL } same as _1
i_96 = { NULL NONLOCAL } same as i_101
_16 = { NULL NONLOCAL } same as i_101
_17 = { ESCAPED NONLOCAL } same as _1
_18 = { ESCAPED NONLOCAL } same as _1
_19 = { ESCAPED NONLOCAL } same as _1
_20 = { ESCAPED NONLOCAL } same as _1
DoIDEAIteration = { }
_21 = { ESCAPED NONLOCAL } same as _1
global_min_ticks.108_22 = { ESCAPED NONLOCAL } same as _1
global_min_ticks = { ESCAPED NONLOCAL } same as _1
_23 = { ESCAPED NONLOCAL } same as _1
_24 = { ESCAPED NONLOCAL } same as _1
_25 = { ESCAPED NONLOCAL } same as _1
accumtime_38 = { NULL ESCAPED NONLOCAL }
accumtime_81 = { NULL ESCAPED NONLOCAL } same as accumtime_38
iterations_39 = { ESCAPED NONLOCAL } same as _1
iterations_82 = { ESCAPED NONLOCAL } same as _1
_26 = { ESCAPED NONLOCAL } same as _1
_27 = { ESCAPED NONLOCAL } same as _1
_80 = { ESCAPED NONLOCAL } same as _1
_28 = { ESCAPED NONLOCAL } same as _1
_29 = { ESCAPED NONLOCAL } same as _1
TicksToSecs = { }
_30 = { ESCAPED NONLOCAL } same as _1
_31 = { ESCAPED NONLOCAL } same as _1
TicksToFracSecs = { }
_32 = { ESCAPED NONLOCAL } same as _1
_33 = { ESCAPED NONLOCAL } same as _1
_34 = { ESCAPED NONLOCAL } same as _1


Alias information for DoIDEA

Aliased symbols

systemerror, UID D.5266, int, is addressable
userkey, UID D.5262, u16[8], is addressable
DK, UID D.5261, u16[52], is addressable
Z, UID D.5260, u16[52], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.5260 D.5261 D.5262 D.5266 } (escaped)

Flow-insensitive points-to information

_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
plain1_59, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
crypt1_63, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
plain2_68, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

DoIDEA ()
{
  faruchar * plain2;
  faruchar * crypt1;
  faruchar * plain1;
  int systemerror;
  char * errorcontext;
  double iterations;
  long unsigned int accumtime;
  u16 userkey[8];
  u16 DK[52];
  u16 Z[52];
  int i;
  struct IDEAStruct * locideastruct;
  unsigned int _1;
  short unsigned int _2;
  long unsigned int _3;
  int systemerror.102_4;
  int systemerror.103_5;
  long unsigned int _6;
  int systemerror.104_7;
  int systemerror.105_8;
  long unsigned int _9;
  int systemerror.106_10;
  int systemerror.107_11;
  unsigned int _12;
  sizetype _13;
  faruchar * _14;
  unsigned char _15;
  long unsigned int _16;
  long unsigned int _17;
  int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int global_min_ticks.108_22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  double _29;
  long unsigned int _30;
  long unsigned int _31;
  double _32;
  double _33;
  int _34;
  long unsigned int _80;

  <bb 2> [0.00%]:
  randnum (3);
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = abs_randwc (60000);
  _2 = (short unsigned int) _1;
  userkey[i_35] = _2;
  i_101 = i_35 + 1;

  <bb 4> [0.00%]:
  # i_35 = PHI <0(2), i_101(3)>
  if (i_35 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  Z[i_36] = 0;
  i_98 = i_36 + 1;

  <bb 6> [0.00%]:
  # i_36 = PHI <0(4), i_98(5)>
  if (i_36 <= 51)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  en_key_idea (&userkey, &Z);
  de_key_idea (&Z, &DK);
  _3 = global_ideastruct.arraysize;
  plain1_59 = AllocateMemory (_3, &systemerror);
  systemerror.102_4 = systemerror;
  if (systemerror.102_4 != 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  systemerror.103_5 = systemerror;
  ReportError ("CPU:IDEA", systemerror.103_5);
  ErrorExit ();

  <bb 9> [0.00%]:
  _6 = global_ideastruct.arraysize;
  crypt1_63 = AllocateMemory (_6, &systemerror);
  systemerror.104_7 = systemerror;
  if (systemerror.104_7 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  systemerror.105_8 = systemerror;
  ReportError ("CPU:IDEA", systemerror.105_8);
  FreeMemory (plain1_59, &systemerror);
  ErrorExit ();

  <bb 11> [0.00%]:
  _9 = global_ideastruct.arraysize;
  plain2_68 = AllocateMemory (_9, &systemerror);
  systemerror.106_10 = systemerror;
  if (systemerror.106_10 != 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  systemerror.107_11 = systemerror;
  ReportError ("CPU:IDEA", systemerror.107_11);
  FreeMemory (plain1_59, &systemerror);
  FreeMemory (crypt1_63, &systemerror);
  ErrorExit ();

  <bb 13> [0.00%]:
  goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  _12 = abs_randwc (255);
  _13 = (sizetype) i_37;
  _14 = plain1_59 + _13;
  _15 = (unsigned char) _12;
  *_14 = _15;
  i_96 = i_37 + 1;

  <bb 15> [0.00%]:
  # i_37 = PHI <0(13), i_96(14)>
  _16 = (long unsigned int) i_37;
  _17 = global_ideastruct.arraysize;
  if (_16 < _17)
    goto <bb 14>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 16> [0.00%]:
  _18 = global_ideastruct.adjust;
  if (_18 == 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 17> [0.00%]:
  global_ideastruct.loops = 100;
  goto <bb 20>; [0.00%]

  <bb 18> [0.00%]:
  _19 = global_ideastruct.loops;
  _20 = global_ideastruct.arraysize;
  _21 = DoIDEAIteration (plain1_59, crypt1_63, plain2_68, _20, _19, &Z, &DK);
  global_min_ticks.108_22 = global_min_ticks;
  if (_21 > global_min_ticks.108_22)
    goto <bb 21>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 19> [0.00%]:
  _23 = global_ideastruct.loops;
  _24 = _23 + 10;
  global_ideastruct.loops = _24;

  <bb 20> [0.00%]:
  _25 = global_ideastruct.loops;
  if (_25 <= 499999)
    goto <bb 18>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 21> [0.00%]:

  <bb 22> [0.00%]:
  # accumtime_38 = PHI <0(21), accumtime_81(22)>
  # iterations_39 = PHI <0.0(21), iterations_82(22)>
  _26 = global_ideastruct.loops;
  _27 = global_ideastruct.arraysize;
  _80 = DoIDEAIteration (plain1_59, crypt1_63, plain2_68, _27, _26, &Z, &DK);
  accumtime_81 = accumtime_38 + _80;
  _28 = global_ideastruct.loops;
  _29 = (double) _28;
  iterations_82 = _29 + iterations_39;
  _30 = TicksToSecs (accumtime_81);
  _31 = global_ideastruct.request_secs;
  if (_30 < _31)
    goto <bb 22>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 23> [0.00%]:
  FreeMemory (plain1_59, &systemerror);
  FreeMemory (crypt1_63, &systemerror);
  FreeMemory (plain2_68, &systemerror);
  _32 = TicksToFracSecs (accumtime_81);
  _33 = iterations_82 / _32;
  global_ideastruct.iterspersec = _33;
  _34 = global_ideastruct.adjust;
  if (_34 == 0)
    goto <bb 24>; [0.00%]
  else
    goto <bb 25>; [0.00%]

  <bb 24> [0.00%]:
  global_ideastruct.adjust = 1;

  <bb 25> [0.00%]:
  Z ={v} {CLOBBER};
  DK ={v} {CLOBBER};
  userkey ={v} {CLOBBER};
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoHuffman (DoHuffman, funcdef_no=89, decl_uid=4657, cgraph_uid=89, symbol_order=114)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
global_huffstruct.0+32 = NONLOCAL
global_huffstruct.64+256 = NONLOCAL
_1 = global_huffstruct.64+256
ESCAPED = _1
ESCAPED = &systemerror
plaintext_54 = NONLOCAL
systemerror.143_2 = systemerror
systemerror.144_3 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.144_3
_4 = global_huffstruct.64+256
ESCAPED = _4
ESCAPED = &systemerror
comparray_58 = NONLOCAL
systemerror.145_5 = systemerror
systemerror.146_6 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.146_6
ESCAPED = plaintext_54
ESCAPED = &systemerror
_7 = global_huffstruct.64+256
ESCAPED = _7
ESCAPED = &systemerror
decomparray_63 = NONLOCAL
systemerror.147_8 = systemerror
systemerror.148_9 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.148_9
ESCAPED = plaintext_54
ESCAPED = &systemerror
ESCAPED = comparray_58
ESCAPED = &systemerror
ESCAPED = &NONLOCAL
ESCAPED = &systemerror
_10 = NONLOCAL
hufftree = NONLOCAL
hufftree = _10
ESCAPED = _10
systemerror.149_11 = systemerror
systemerror.150_12 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.150_12
ESCAPED = plaintext_54
ESCAPED = &systemerror
ESCAPED = comparray_58
ESCAPED = &systemerror
ESCAPED = decomparray_63
ESCAPED = &systemerror
ESCAPED = &NONLOCAL
_13 = global_huffstruct.64+256
_14 = _13
_14 = &NONLOCAL
ESCAPED = plaintext_54
ESCAPED = _14
ESCAPED = &NONLOCAL
_15 = global_huffstruct.64+256
_16 = _15
_16 = &NONLOCAL
_17 = plaintext_54 + UNKNOWN
derefaddrtmp(38) = &NULL
*_17 = derefaddrtmp(38)
_18 = global_huffstruct.64+256
_19 = _18
plaintextlen = NONLOCAL
plaintextlen = _19
ESCAPED = _19
_20 = global_huffstruct.0+32
global_huffstruct.64+256 = &NONLOCAL
ESCAPED = &NONLOCAL
hufftree.151_21 = hufftree
_22 = global_huffstruct.64+256
_23 = global_huffstruct.64+256
ESCAPED = plaintext_54
ESCAPED = comparray_58
ESCAPED = decomparray_63
ESCAPED = _23
ESCAPED = _22
ESCAPED = hufftree.151_21
_24 = NONLOCAL
global_min_ticks = NONLOCAL
global_min_ticks.152_25 = global_min_ticks
_26 = global_huffstruct.64+256
_27 = _26
_27 = &NONLOCAL
global_huffstruct.64+256 = _27
ESCAPED = _27
_28 = global_huffstruct.64+256
accumtime_40 = &NULL
accumtime_40 = accumtime_86
iterations_41 = &NONLOCAL
iterations_41 = iterations_87
hufftree.153_29 = hufftree
_30 = global_huffstruct.64+256
_31 = global_huffstruct.64+256
ESCAPED = plaintext_54
ESCAPED = comparray_58
ESCAPED = decomparray_63
ESCAPED = _31
ESCAPED = _30
ESCAPED = hufftree.153_29
_85 = NONLOCAL
accumtime_86 = accumtime_40
accumtime_86 = _85
_32 = global_huffstruct.64+256
_33 = _32
iterations_87 = _33
iterations_87 = iterations_41
ESCAPED = accumtime_86
_34 = NONLOCAL
_35 = global_huffstruct.64+256
ESCAPED = plaintext_54
ESCAPED = &systemerror
ESCAPED = comparray_58
ESCAPED = &systemerror
ESCAPED = decomparray_63
ESCAPED = &systemerror
hufftree.154_36 = hufftree
ESCAPED = hufftree.154_36
ESCAPED = &systemerror
ESCAPED = accumtime_86
_37 = NONLOCAL
_38 = iterations_87
_38 = _37
global_huffstruct.64+256 = _38
ESCAPED = _38
_39 = global_huffstruct.0+32
global_huffstruct.0+32 = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 12 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_1";
"global_huffstruct.0+32"[label="global_huffstruct.0+32 = { 5 }"];
"global_huffstruct.64+256"[label="global_huffstruct.64+256 = { 5 }"];
"AllocateMemory";
"systemerror";
"plaintext_54";
"systemerror.143_2";
"systemerror.144_3";
"ReportError";
"ErrorExit";
"_4";
"comparray_58";
"systemerror.145_5";
"systemerror.146_6";
"FreeMemory";
"_7";
"decomparray_63";
"systemerror.147_8";
"systemerror.148_9";
"_10";
"hufftree";
"systemerror.149_11";
"systemerror.150_12";
"randnum";
"_13";
"_14"[label="_14 = { 5 }"];
"create_text_block";
"_15";
"_16"[label="_16 = { 5 }"];
"_17";
"derefaddrtmp(38)"[label="derefaddrtmp(38) = { 1 }"];
"_18";
"_19";
"plaintextlen";
"_20";
"hufftree.151_21";
"_22";
"_23";
"DoHuffIteration";
"_24";
"global_min_ticks.152_25";
"global_min_ticks";
"_28";
"accumtime_86"[label="accumtime_86 = { 1 }"];
"hufftree.153_29";
"_30";
"_31";
"_85";
"TicksToSecs";
"_34";
"_35";
"hufftree.154_36";
"TicksToFracSecs";
"_37";
"_39";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*global_huffstruct.0+32";
"*AllocateMemory";
"*systemerror";
"*systemerror.143_2";
"*systemerror.144_3";
"*ReportError";
"*ErrorExit";
"*systemerror.145_5";
"*systemerror.146_6";
"*FreeMemory";
"*systemerror.147_8";
"*systemerror.148_9";
"*systemerror.149_11";
"*systemerror.150_12";
"*randnum";
"*create_text_block";
"*_15";
"*_16";
"*_17";
"*derefaddrtmp(38)";
"*plaintextlen";
"*_20";
"*DoHuffIteration";
"*_24";
"*global_min_ticks.152_25";
"*global_min_ticks";
"*_28";
"*TicksToSecs";
"*_34";
"*_35";
"*TicksToFracSecs";
"*_39";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_1" -> "ESCAPED";
"plaintext_54" -> "ESCAPED";
"systemerror.144_3" -> "ESCAPED";
"_4" -> "ESCAPED";
"comparray_58" -> "ESCAPED";
"systemerror.146_6" -> "ESCAPED";
"_7" -> "ESCAPED";
"decomparray_63" -> "ESCAPED";
"systemerror.148_9" -> "ESCAPED";
"_10" -> "ESCAPED";
"systemerror.150_12" -> "ESCAPED";
"_14" -> "ESCAPED";
"_19" -> "ESCAPED";
"hufftree.151_21" -> "ESCAPED";
"_22" -> "ESCAPED";
"_23" -> "ESCAPED";
"global_huffstruct.64+256" -> "ESCAPED";
"accumtime_86" -> "ESCAPED";
"hufftree.153_29" -> "ESCAPED";
"_30" -> "ESCAPED";
"_31" -> "ESCAPED";
"hufftree.154_36" -> "ESCAPED";
"global_huffstruct.64+256" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"global_huffstruct.64+256" -> "_1";
"NONLOCAL" -> "global_huffstruct.0+32";
"NONLOCAL" -> "global_huffstruct.64+256";
"global_huffstruct.64+256" -> "global_huffstruct.64+256";
"global_huffstruct.64+256" -> "global_huffstruct.64+256";
"global_huffstruct.64+256" -> "global_huffstruct.64+256";
"global_huffstruct.64+256" -> "global_huffstruct.64+256";
"global_huffstruct.64+256" -> "global_huffstruct.64+256";
"global_huffstruct.64+256" -> "global_huffstruct.64+256";
"global_huffstruct.64+256" -> "global_huffstruct.64+256";
"_37" -> "global_huffstruct.64+256";
"global_huffstruct.64+256" -> "global_huffstruct.64+256";
"NONLOCAL" -> "plaintext_54";
"systemerror" -> "systemerror.143_2";
"systemerror" -> "systemerror.144_3";
"global_huffstruct.64+256" -> "_4";
"NONLOCAL" -> "comparray_58";
"systemerror" -> "systemerror.145_5";
"systemerror" -> "systemerror.146_6";
"global_huffstruct.64+256" -> "_7";
"NONLOCAL" -> "decomparray_63";
"systemerror" -> "systemerror.147_8";
"systemerror" -> "systemerror.148_9";
"NONLOCAL" -> "_10";
"NONLOCAL" -> "hufftree";
"_10" -> "hufftree";
"systemerror" -> "systemerror.149_11";
"systemerror" -> "systemerror.150_12";
"global_huffstruct.64+256" -> "_13";
"_13" -> "_14";
"global_huffstruct.64+256" -> "_15";
"_15" -> "_16";
"global_huffstruct.64+256" -> "_18";
"_18" -> "_19";
"NONLOCAL" -> "plaintextlen";
"_19" -> "plaintextlen";
"global_huffstruct.0+32" -> "_20";
"hufftree" -> "hufftree.151_21";
"global_huffstruct.64+256" -> "_22";
"global_huffstruct.64+256" -> "_23";
"NONLOCAL" -> "_24";
"global_min_ticks" -> "global_min_ticks.152_25";
"NONLOCAL" -> "global_min_ticks";
"global_huffstruct.64+256" -> "_28";
"accumtime_86" -> "accumtime_86";
"accumtime_86" -> "accumtime_86";
"_85" -> "accumtime_86";
"hufftree" -> "hufftree.153_29";
"global_huffstruct.64+256" -> "_30";
"global_huffstruct.64+256" -> "_31";
"NONLOCAL" -> "_85";
"NONLOCAL" -> "_34";
"global_huffstruct.64+256" -> "_35";
"hufftree" -> "hufftree.154_36";
"NONLOCAL" -> "_37";
"global_huffstruct.0+32" -> "_39";
"derefaddrtmp(38)" -> "*_17";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"global_huffstruct.0+32" [label="\N\n_17 = global_huffstruct.0+32 + UNKNOWN\l"];
"AllocateMemory";
"systemerror.143_2";
"ReportError";
"ErrorExit";
"FreeMemory";
"randnum";
"create_text_block";
"_17" [label="\N\n*_17 = derefaddrtmp(38)\l"];
"derefaddrtmp(38)";
"DoHuffIteration";
"accumtime_40";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.143_2";
"STOREDANYTHING" -> "_17";
"global_huffstruct.0+32" -> "ESCAPED";
"global_huffstruct.0+32" -> "accumtime_40";
"systemerror.143_2" -> "ESCAPED";
"accumtime_40" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = global_huffstruct.0+32\l"];
"STOREDANYTHING";
"INTEGER";
"global_huffstruct.0+32" [label="\N\n_17 = global_huffstruct.0+32 + UNKNOWN\l"];
"AllocateMemory";
"systemerror.143_2";
"ReportError";
"ErrorExit";
"FreeMemory";
"randnum";
"create_text_block";
"_17" [label="\N\n*_17 = derefaddrtmp(38)\l"];
"derefaddrtmp(38)";
"DoHuffIteration";
"accumtime_40";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.143_2";
"STOREDANYTHING" -> "_17";
"global_huffstruct.0+32" -> "ESCAPED";
"global_huffstruct.0+32" -> "systemerror.143_2";
"global_huffstruct.0+32" -> "accumtime_40";
"systemerror.143_2" -> "ESCAPED";
"derefaddrtmp(38)" -> "ESCAPED";
"accumtime_40" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL systemerror }
NONLOCAL = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_1 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
global_huffstruct.0+32 = { ESCAPED NONLOCAL }
global_huffstruct.64+256 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
AllocateMemory = { }
systemerror = { ESCAPED NONLOCAL } same as systemerror.143_2
plaintext_54 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
systemerror.143_2 = { ESCAPED NONLOCAL }
systemerror.144_3 = { ESCAPED NONLOCAL } same as systemerror.143_2
ReportError = { }
ErrorExit = { }
_4 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
comparray_58 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
systemerror.145_5 = { ESCAPED NONLOCAL } same as systemerror.143_2
systemerror.146_6 = { ESCAPED NONLOCAL } same as systemerror.143_2
FreeMemory = { }
_7 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
decomparray_63 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
systemerror.147_8 = { ESCAPED NONLOCAL } same as systemerror.143_2
systemerror.148_9 = { ESCAPED NONLOCAL } same as systemerror.143_2
_10 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
hufftree = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
systemerror.149_11 = { ESCAPED NONLOCAL } same as systemerror.143_2
systemerror.150_12 = { ESCAPED NONLOCAL } same as systemerror.143_2
randnum = { }
_13 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_14 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
create_text_block = { }
_15 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_16 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_17 = { ESCAPED NONLOCAL }
derefaddrtmp(38) = { NULL }
_18 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_19 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
plaintextlen = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_20 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
hufftree.151_21 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_22 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_23 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
DoHuffIteration = { }
_24 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
global_min_ticks.152_25 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
global_min_ticks = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_26 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_27 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_28 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
accumtime_40 = { NULL ESCAPED NONLOCAL }
accumtime_86 = { NULL ESCAPED NONLOCAL } same as accumtime_40
iterations_41 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
iterations_87 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
hufftree.153_29 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_30 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_31 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_85 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_32 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_33 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
TicksToSecs = { }
_34 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_35 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
hufftree.154_36 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
TicksToFracSecs = { }
_37 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_38 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32
_39 = { ESCAPED NONLOCAL } same as global_huffstruct.0+32


Alias information for DoHuffman

Aliased symbols

systemerror, UID D.5366, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.5366 } (escaped)

Flow-insensitive points-to information

_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
hufftree.151_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
hufftree.153_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
hufftree.154_36, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
plaintext_54, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
comparray_58, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
decomparray_63, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

DoHuffman ()
{
  farchar * plaintext;
  farchar * decomparray;
  farchar * comparray;
  double iterations;
  long unsigned int accumtime;
  int systemerror;
  char * errorcontext;
  struct HuffStruct * lochuffstruct;
  long unsigned int _1;
  int systemerror.143_2;
  int systemerror.144_3;
  long unsigned int _4;
  int systemerror.145_5;
  int systemerror.146_6;
  long unsigned int _7;
  int systemerror.147_8;
  int systemerror.148_9;
  farvoid * _10;
  int systemerror.149_11;
  int systemerror.150_12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  sizetype _16;
  farchar * _17;
  long unsigned int _18;
  long int _19;
  int _20;
  struct huff_node * hufftree.151_21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int global_min_ticks.152_25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  struct huff_node * hufftree.153_29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  double _33;
  long unsigned int _34;
  long unsigned int _35;
  struct huff_node * hufftree.154_36;
  double _37;
  double _38;
  int _39;
  long unsigned int _85;

  <bb 2> [0.00%]:
  _1 = global_huffstruct.arraysize;
  plaintext_54 = AllocateMemory (_1, &systemerror);
  systemerror.143_2 = systemerror;
  if (systemerror.143_2 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  systemerror.144_3 = systemerror;
  ReportError ("CPU:Huffman", systemerror.144_3);
  ErrorExit ();

  <bb 4> [0.00%]:
  _4 = global_huffstruct.arraysize;
  comparray_58 = AllocateMemory (_4, &systemerror);
  systemerror.145_5 = systemerror;
  if (systemerror.145_5 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  systemerror.146_6 = systemerror;
  ReportError ("CPU:Huffman", systemerror.146_6);
  FreeMemory (plaintext_54, &systemerror);
  ErrorExit ();

  <bb 6> [0.00%]:
  _7 = global_huffstruct.arraysize;
  decomparray_63 = AllocateMemory (_7, &systemerror);
  systemerror.147_8 = systemerror;
  if (systemerror.147_8 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  systemerror.148_9 = systemerror;
  ReportError ("CPU:Huffman", systemerror.148_9);
  FreeMemory (plaintext_54, &systemerror);
  FreeMemory (comparray_58, &systemerror);
  ErrorExit ();

  <bb 8> [0.00%]:
  _10 = AllocateMemory (10240, &systemerror);
  hufftree = _10;
  systemerror.149_11 = systemerror;
  if (systemerror.149_11 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  systemerror.150_12 = systemerror;
  ReportError ("CPU:Huffman", systemerror.150_12);
  FreeMemory (plaintext_54, &systemerror);
  FreeMemory (comparray_58, &systemerror);
  FreeMemory (decomparray_63, &systemerror);
  ErrorExit ();

  <bb 10> [0.00%]:
  randnum (13);
  _13 = global_huffstruct.arraysize;
  _14 = _13 + 18446744073709551615;
  create_text_block (plaintext_54, _14, 500);
  _15 = global_huffstruct.arraysize;
  _16 = _15 + 18446744073709551615;
  _17 = plaintext_54 + _16;
  *_17 = 0;
  _18 = global_huffstruct.arraysize;
  _19 = (long int) _18;
  plaintextlen = _19;
  _20 = global_huffstruct.adjust;
  if (_20 == 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 11> [0.00%]:
  global_huffstruct.loops = 100;
  goto <bb 14>; [0.00%]

  <bb 12> [0.00%]:
  hufftree.151_21 = hufftree;
  _22 = global_huffstruct.loops;
  _23 = global_huffstruct.arraysize;
  _24 = DoHuffIteration (plaintext_54, comparray_58, decomparray_63, _23, _22, hufftree.151_21);
  global_min_ticks.152_25 = global_min_ticks;
  if (_24 > global_min_ticks.152_25)
    goto <bb 15>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:
  _26 = global_huffstruct.loops;
  _27 = _26 + 10;
  global_huffstruct.loops = _27;

  <bb 14> [0.00%]:
  _28 = global_huffstruct.loops;
  if (_28 <= 499999)
    goto <bb 12>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 15> [0.00%]:

  <bb 16> [0.00%]:
  # accumtime_40 = PHI <0(15), accumtime_86(16)>
  # iterations_41 = PHI <0.0(15), iterations_87(16)>
  hufftree.153_29 = hufftree;
  _30 = global_huffstruct.loops;
  _31 = global_huffstruct.arraysize;
  _85 = DoHuffIteration (plaintext_54, comparray_58, decomparray_63, _31, _30, hufftree.153_29);
  accumtime_86 = accumtime_40 + _85;
  _32 = global_huffstruct.loops;
  _33 = (double) _32;
  iterations_87 = _33 + iterations_41;
  _34 = TicksToSecs (accumtime_86);
  _35 = global_huffstruct.request_secs;
  if (_34 < _35)
    goto <bb 16>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 17> [0.00%]:
  FreeMemory (plaintext_54, &systemerror);
  FreeMemory (comparray_58, &systemerror);
  FreeMemory (decomparray_63, &systemerror);
  hufftree.154_36 = hufftree;
  FreeMemory (hufftree.154_36, &systemerror);
  _37 = TicksToFracSecs (accumtime_86);
  _38 = iterations_87 / _37;
  global_huffstruct.iterspersec = _38;
  _39 = global_huffstruct.adjust;
  if (_39 == 0)
    goto <bb 18>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 18> [0.00%]:
  global_huffstruct.adjust = 1;

  <bb 19> [0.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoNNET (DoNNET, funcdef_no=95, decl_uid=4701, cgraph_uid=95, symbol_order=120)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
_1 = NONLOCAL
global_nnetstruct.0+32 = NONLOCAL
global_nnetstruct.64+192 = NONLOCAL
_2 = global_nnetstruct.0+32
global_nnetstruct.64+192 = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_3 = global_nnetstruct.64+192
ESCAPED = _3
_4 = NONLOCAL
global_min_ticks = NONLOCAL
global_min_ticks.167_5 = global_min_ticks
_6 = global_nnetstruct.64+192
_7 = _6
_7 = &NONLOCAL
global_nnetstruct.64+192 = _7
ESCAPED = _7
_8 = global_nnetstruct.64+192
accumtime_17 = &NULL
accumtime_17 = accumtime_39
iterations_18 = &NONLOCAL
iterations_18 = iterations_40
ESCAPED = &NONLOCAL
_9 = global_nnetstruct.64+192
ESCAPED = _9
_38 = NONLOCAL
accumtime_39 = accumtime_17
accumtime_39 = _38
_10 = global_nnetstruct.64+192
_11 = _10
iterations_40 = _11
iterations_40 = iterations_18
ESCAPED = accumtime_39
_12 = NONLOCAL
_13 = global_nnetstruct.64+192
ESCAPED = accumtime_39
_14 = NONLOCAL
_15 = iterations_40
_15 = _14
global_nnetstruct.64+192 = _15
ESCAPED = _15
_16 = global_nnetstruct.0+32
global_nnetstruct.0+32 = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"randnum";
"read_data_file";
"_1";
"ErrorExit";
"_2";
"global_nnetstruct.0+32"[label="global_nnetstruct.0+32 = { 5 }"];
"global_nnetstruct.64+192"[label="global_nnetstruct.64+192 = { 5 }"];
"_3";
"DoNNetIteration";
"_4";
"global_min_ticks.167_5";
"global_min_ticks";
"_8";
"accumtime_39"[label="accumtime_39 = { 1 }"];
"_9";
"_38";
"TicksToSecs";
"_12";
"_13";
"TicksToFracSecs";
"_14";
"_16";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*randnum";
"*read_data_file";
"*_1";
"*ErrorExit";
"*_2";
"*global_nnetstruct.0+32";
"*DoNNetIteration";
"*_4";
"*global_min_ticks.167_5";
"*global_min_ticks";
"*_8";
"*TicksToSecs";
"*_12";
"*_13";
"*TicksToFracSecs";
"*_16";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_3" -> "ESCAPED";
"global_nnetstruct.64+192" -> "ESCAPED";
"accumtime_39" -> "ESCAPED";
"_9" -> "ESCAPED";
"global_nnetstruct.64+192" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_1";
"global_nnetstruct.0+32" -> "_2";
"NONLOCAL" -> "global_nnetstruct.0+32";
"NONLOCAL" -> "global_nnetstruct.64+192";
"global_nnetstruct.64+192" -> "global_nnetstruct.64+192";
"global_nnetstruct.64+192" -> "global_nnetstruct.64+192";
"global_nnetstruct.64+192" -> "global_nnetstruct.64+192";
"global_nnetstruct.64+192" -> "global_nnetstruct.64+192";
"global_nnetstruct.64+192" -> "global_nnetstruct.64+192";
"global_nnetstruct.64+192" -> "global_nnetstruct.64+192";
"global_nnetstruct.64+192" -> "global_nnetstruct.64+192";
"_14" -> "global_nnetstruct.64+192";
"global_nnetstruct.64+192" -> "global_nnetstruct.64+192";
"global_nnetstruct.64+192" -> "_3";
"NONLOCAL" -> "_4";
"global_min_ticks" -> "global_min_ticks.167_5";
"NONLOCAL" -> "global_min_ticks";
"global_nnetstruct.64+192" -> "_8";
"accumtime_39" -> "accumtime_39";
"accumtime_39" -> "accumtime_39";
"_38" -> "accumtime_39";
"global_nnetstruct.64+192" -> "_9";
"NONLOCAL" -> "_38";
"NONLOCAL" -> "_12";
"global_nnetstruct.64+192" -> "_13";
"NONLOCAL" -> "_14";
"global_nnetstruct.0+32" -> "_16";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"randnum";
"read_data_file";
"_1";
"ErrorExit";
"DoNNetIteration";
"accumtime_17";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"_1" -> "ESCAPED";
"_1" -> "accumtime_17";
"accumtime_17" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _1\l"];
"STOREDANYTHING";
"INTEGER";
"randnum";
"read_data_file";
"_1";
"ErrorExit";
"DoNNetIteration";
"accumtime_17";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"_1" -> "ESCAPED";
"_1" -> "accumtime_17";
"accumtime_17" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
randnum = { }
read_data_file = { }
_1 = { ESCAPED NONLOCAL }
ErrorExit = { }
_2 = { ESCAPED NONLOCAL } same as _1
global_nnetstruct.0+32 = { ESCAPED NONLOCAL } same as _1
global_nnetstruct.64+192 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL } same as _1
DoNNetIteration = { }
_4 = { ESCAPED NONLOCAL } same as _1
global_min_ticks.167_5 = { ESCAPED NONLOCAL } same as _1
global_min_ticks = { ESCAPED NONLOCAL } same as _1
_6 = { ESCAPED NONLOCAL } same as _1
_7 = { ESCAPED NONLOCAL } same as _1
_8 = { ESCAPED NONLOCAL } same as _1
accumtime_17 = { NULL ESCAPED NONLOCAL }
accumtime_39 = { NULL ESCAPED NONLOCAL } same as accumtime_17
iterations_18 = { ESCAPED NONLOCAL } same as _1
iterations_40 = { ESCAPED NONLOCAL } same as _1
_9 = { ESCAPED NONLOCAL } same as _1
_38 = { ESCAPED NONLOCAL } same as _1
_10 = { ESCAPED NONLOCAL } same as _1
_11 = { ESCAPED NONLOCAL } same as _1
TicksToSecs = { }
_12 = { ESCAPED NONLOCAL } same as _1
_13 = { ESCAPED NONLOCAL } same as _1
TicksToFracSecs = { }
_14 = { ESCAPED NONLOCAL } same as _1
_15 = { ESCAPED NONLOCAL } same as _1
_16 = { ESCAPED NONLOCAL } same as _1


Alias information for DoNNET

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information


DoNNET ()
{
  double iterations;
  long unsigned int accumtime;
  char * errorcontext;
  struct NNetStruct * locnnetstruct;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int global_min_ticks.167_5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  double _11;
  long unsigned int _12;
  long unsigned int _13;
  double _14;
  double _15;
  int _16;
  long unsigned int _38;

  <bb 2> [0.00%]:
  randnum (3);
  _1 = read_data_file ();
  if (_1 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  ErrorExit ();

  <bb 4> [0.00%]:
  _2 = global_nnetstruct.adjust;
  if (_2 == 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 5> [0.00%]:
  global_nnetstruct.loops = 1;
  goto <bb 8>; [0.00%]

  <bb 6> [0.00%]:
  randnum (3);
  _3 = global_nnetstruct.loops;
  _4 = DoNNetIteration (_3);
  global_min_ticks.167_5 = global_min_ticks;
  if (_4 > global_min_ticks.167_5)
    goto <bb 9>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  _6 = global_nnetstruct.loops;
  _7 = _6 + 1;
  global_nnetstruct.loops = _7;

  <bb 8> [0.00%]:
  _8 = global_nnetstruct.loops;
  if (_8 <= 499999)
    goto <bb 6>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:

  <bb 10> [0.00%]:
  # accumtime_17 = PHI <0(9), accumtime_39(10)>
  # iterations_18 = PHI <0.0(9), iterations_40(10)>
  randnum (3);
  _9 = global_nnetstruct.loops;
  _38 = DoNNetIteration (_9);
  accumtime_39 = accumtime_17 + _38;
  _10 = global_nnetstruct.loops;
  _11 = (double) _10;
  iterations_40 = _11 + iterations_18;
  _12 = TicksToSecs (accumtime_39);
  _13 = global_nnetstruct.request_secs;
  if (_12 < _13)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  _14 = TicksToFracSecs (accumtime_39);
  _15 = iterations_40 / _14;
  global_nnetstruct.iterspersec = _15;
  _16 = global_nnetstruct.adjust;
  if (_16 == 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  global_nnetstruct.adjust = 1;

  <bb 13> [0.00%]:
  return;

}



;; Function DoLU (DoLU, funcdef_no=111, decl_uid=4732, cgraph_uid=111, symbol_order=136)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
ESCAPED = &systemerror
a_56 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &systemerror
b_58 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &systemerror
_1 = NONLOCAL
LUtempvv = NONLOCAL
LUtempvv = _1
ESCAPED = _1
ptra$ptrs$p_52 = a_56
_2 = ptra$ptrs$p_52
ESCAPED = _2
ESCAPED = &NONLOCAL
ESCAPED = b_58
global_lustruct.0+32 = NONLOCAL
global_lustruct.64+192 = NONLOCAL
_3 = global_lustruct.0+32
global_lustruct.64+192 = &NULL
ESCAPED = &NULL
_4 = i_41
_4 = &NONLOCAL
_5 = _4
_6 = _5
_6 = &NONLOCAL
ESCAPED = _6
ESCAPED = &systemerror
abase_79 = NONLOCAL
systemerror.195_7 = systemerror
systemerror.196_8 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.196_8
ESCAPED = a_56
ESCAPED = b_58
ESCAPED = &NULL
ESCAPED = &NULL
_9 = i_41
_9 = &NONLOCAL
_10 = _9
_11 = _10
_11 = &NONLOCAL
ESCAPED = _11
ESCAPED = &systemerror
bbase_84 = NONLOCAL
systemerror.197_12 = systemerror
systemerror.198_13 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.198_13
ESCAPED = a_56
ESCAPED = b_58
ESCAPED = abase_79
ESCAPED = &NULL
_14 = i_41
ESCAPED = a_56
ESCAPED = b_58
ESCAPED = abase_79
ESCAPED = bbase_84
ESCAPED = _14
_15 = NONLOCAL
global_min_ticks = NONLOCAL
global_min_ticks.199_16 = global_min_ticks
_17 = i_41
global_lustruct.64+192 = _17
ESCAPED = _17
ESCAPED = abase_79
ESCAPED = &systemerror
ESCAPED = bbase_84
ESCAPED = &systemerror
i_91 = i_41
i_91 = &NONLOCAL
abase_35 = abase_76
abase_35 = abase_79
bbase_38 = bbase_77
bbase_38 = bbase_84
i_41 = &NONLOCAL
i_41 = i_91
abase_36 = abase_79
abase_36 = abase_35
bbase_39 = bbase_84
bbase_39 = bbase_38
_18 = global_lustruct.64+192
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_109 = NONLOCAL
ESCAPED = a_56
ESCAPED = b_58
ESCAPED = abase_36
ESCAPED = bbase_39
_19 = global_lustruct.64+192
_20 = _19
_20 = &NONLOCAL
ESCAPED = _20
ESCAPED = &systemerror
abase_65 = NONLOCAL
systemerror.200_21 = systemerror
systemerror.201_22 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.201_22
ESCAPED = a_56
ESCAPED = b_58
ESCAPED = &NULL
ESCAPED = &NULL
_23 = global_lustruct.64+192
_24 = _23
_24 = &NONLOCAL
ESCAPED = _24
ESCAPED = &systemerror
bbase_70 = NONLOCAL
systemerror.202_25 = systemerror
systemerror.203_26 = systemerror
ESCAPED = &STRING
ESCAPED = systemerror.203_26
ESCAPED = a_56
ESCAPED = b_58
ESCAPED = abase_65
ESCAPED = &NULL
abase_37 = abase_36
abase_37 = abase_65
abase_37 = abase_65
abase_37 = abase_36
bbase_40 = bbase_39
bbase_40 = bbase_70
bbase_40 = bbase_70
bbase_40 = bbase_39
accumtime_42 = &NULL
accumtime_42 = accumtime_100
iterations_43 = &NONLOCAL
iterations_43 = iterations_101
_27 = global_lustruct.64+192
ESCAPED = a_56
ESCAPED = b_58
ESCAPED = abase_37
ESCAPED = bbase_40
ESCAPED = _27
_99 = NONLOCAL
accumtime_100 = accumtime_42
accumtime_100 = _99
_28 = global_lustruct.64+192
_29 = _28
iterations_101 = _29
iterations_101 = iterations_43
ESCAPED = accumtime_100
_30 = NONLOCAL
_31 = global_lustruct.64+192
ESCAPED = accumtime_100
_32 = NONLOCAL
_33 = iterations_101
_33 = _32
global_lustruct.64+192 = _33
ESCAPED = _33
_34 = global_lustruct.0+32
global_lustruct.0+32 = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = a_56
ESCAPED = b_58
ESCAPED = abase_37
ESCAPED = bbase_40

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 3 5 9 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"AllocateMemory";
"systemerror";
"a_56";
"b_58";
"_1";
"LUtempvv";
"ptra$ptrs$p_52";
"_2";
"build_problem";
"_3";
"global_lustruct.0+32"[label="global_lustruct.0+32 = { 5 }"];
"global_lustruct.64+192"[label="global_lustruct.64+192 = { 1 5 }"];
"_4"[label="_4 = { 5 }"];
"i_41"[label="i_41 = { 5 }"];
"_5";
"_6"[label="_6 = { 5 }"];
"abase_79";
"systemerror.195_7";
"systemerror.196_8";
"ReportError";
"LUFreeMem";
"ErrorExit";
"_9"[label="_9 = { 5 }"];
"_10";
"_11"[label="_11 = { 5 }"];
"bbase_84";
"systemerror.197_12";
"systemerror.198_13";
"_14";
"DoLUIteration";
"_15";
"global_min_ticks.199_16";
"global_min_ticks";
"_17";
"FreeMemory";
"abase_35";
"abase_76";
"bbase_38";
"bbase_77";
"abase_36";
"bbase_39";
"_18";
"__printf_chk";
"_109";
"_19";
"_20"[label="_20 = { 5 }"];
"abase_65";
"systemerror.200_21";
"systemerror.201_22";
"_23";
"_24"[label="_24 = { 5 }"];
"bbase_70";
"systemerror.202_25";
"systemerror.203_26";
"abase_37";
"bbase_40";
"accumtime_100"[label="accumtime_100 = { 1 }"];
"_27";
"_99";
"TicksToSecs";
"_30";
"_31";
"TicksToFracSecs";
"_32";
"_34";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*AllocateMemory";
"*systemerror";
"*LUtempvv";
"*build_problem";
"*_3";
"*global_lustruct.0+32";
"*_4";
"*i_41";
"*_5";
"*_6";
"*systemerror.195_7";
"*systemerror.196_8";
"*ReportError";
"*LUFreeMem";
"*ErrorExit";
"*_9";
"*_10";
"*_11";
"*systemerror.197_12";
"*systemerror.198_13";
"*_14";
"*DoLUIteration";
"*_15";
"*global_min_ticks.199_16";
"*global_min_ticks";
"*_17";
"*FreeMemory";
"*abase_76";
"*bbase_77";
"*_18";
"*__printf_chk";
"*_109";
"*systemerror.200_21";
"*systemerror.201_22";
"*systemerror.202_25";
"*systemerror.203_26";
"*TicksToSecs";
"*_30";
"*_31";
"*TicksToFracSecs";
"*_34";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"a_56" -> "ESCAPED";
"b_58" -> "ESCAPED";
"_1" -> "ESCAPED";
"_2" -> "ESCAPED";
"_6" -> "ESCAPED";
"abase_79" -> "ESCAPED";
"systemerror.196_8" -> "ESCAPED";
"_11" -> "ESCAPED";
"bbase_84" -> "ESCAPED";
"systemerror.198_13" -> "ESCAPED";
"_14" -> "ESCAPED";
"_17" -> "ESCAPED";
"abase_36" -> "ESCAPED";
"bbase_39" -> "ESCAPED";
"_20" -> "ESCAPED";
"abase_65" -> "ESCAPED";
"systemerror.201_22" -> "ESCAPED";
"_24" -> "ESCAPED";
"systemerror.203_26" -> "ESCAPED";
"abase_37" -> "ESCAPED";
"bbase_40" -> "ESCAPED";
"accumtime_100" -> "ESCAPED";
"_27" -> "ESCAPED";
"global_lustruct.64+192" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "a_56";
"NONLOCAL" -> "b_58";
"NONLOCAL" -> "_1";
"NONLOCAL" -> "LUtempvv";
"_1" -> "LUtempvv";
"a_56" -> "ptra$ptrs$p_52";
"ptra$ptrs$p_52" -> "_2";
"global_lustruct.0+32" -> "_3";
"NONLOCAL" -> "global_lustruct.0+32";
"NONLOCAL" -> "global_lustruct.64+192";
"global_lustruct.64+192" -> "global_lustruct.64+192";
"_17" -> "global_lustruct.64+192";
"global_lustruct.64+192" -> "global_lustruct.64+192";
"global_lustruct.64+192" -> "global_lustruct.64+192";
"global_lustruct.64+192" -> "global_lustruct.64+192";
"global_lustruct.64+192" -> "global_lustruct.64+192";
"_32" -> "global_lustruct.64+192";
"global_lustruct.64+192" -> "global_lustruct.64+192";
"i_41" -> "_4";
"i_41" -> "i_41";
"i_41" -> "i_41";
"_4" -> "_5";
"_5" -> "_6";
"NONLOCAL" -> "abase_79";
"systemerror" -> "systemerror.195_7";
"systemerror" -> "systemerror.196_8";
"i_41" -> "_9";
"_9" -> "_10";
"_10" -> "_11";
"NONLOCAL" -> "bbase_84";
"systemerror" -> "systemerror.197_12";
"systemerror" -> "systemerror.198_13";
"i_41" -> "_14";
"NONLOCAL" -> "_15";
"global_min_ticks" -> "global_min_ticks.199_16";
"NONLOCAL" -> "global_min_ticks";
"i_41" -> "_17";
"abase_79" -> "abase_35";
"abase_76" -> "abase_35";
"bbase_84" -> "bbase_38";
"bbase_77" -> "bbase_38";
"abase_79" -> "abase_36";
"abase_35" -> "abase_36";
"bbase_84" -> "bbase_39";
"bbase_38" -> "bbase_39";
"global_lustruct.64+192" -> "_18";
"NONLOCAL" -> "_109";
"global_lustruct.64+192" -> "_19";
"_19" -> "_20";
"NONLOCAL" -> "abase_65";
"systemerror" -> "systemerror.200_21";
"systemerror" -> "systemerror.201_22";
"global_lustruct.64+192" -> "_23";
"_23" -> "_24";
"NONLOCAL" -> "bbase_70";
"systemerror" -> "systemerror.202_25";
"systemerror" -> "systemerror.203_26";
"abase_36" -> "abase_37";
"abase_65" -> "abase_37";
"bbase_39" -> "bbase_40";
"bbase_70" -> "bbase_40";
"accumtime_100" -> "accumtime_100";
"accumtime_100" -> "accumtime_100";
"_99" -> "accumtime_100";
"global_lustruct.64+192" -> "_27";
"NONLOCAL" -> "_99";
"NONLOCAL" -> "_30";
"global_lustruct.64+192" -> "_31";
"NONLOCAL" -> "_32";
"global_lustruct.0+32" -> "_34";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"AllocateMemory";
"a_56";
"build_problem";
"global_lustruct.64+192";
"_4";
"systemerror.195_7";
"ReportError";
"LUFreeMem";
"ErrorExit";
"DoLUIteration";
"FreeMemory";
"abase_76";
"bbase_77";
"__printf_chk";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.195_7";
"a_56" -> "ESCAPED";
"a_56" -> "global_lustruct.64+192";
"global_lustruct.64+192" -> "ESCAPED";
"_4" -> "ESCAPED";
"_4" -> "global_lustruct.64+192";
"systemerror.195_7" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = a_56\l"];
"STOREDANYTHING";
"INTEGER";
"AllocateMemory";
"a_56";
"build_problem";
"global_lustruct.64+192";
"_4";
"systemerror.195_7";
"ReportError";
"LUFreeMem";
"ErrorExit";
"DoLUIteration";
"FreeMemory";
"abase_76";
"bbase_77";
"__printf_chk";
"TicksToSecs";
"TicksToFracSecs";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "systemerror.195_7";
"a_56" -> "ESCAPED";
"a_56" -> "global_lustruct.64+192";
"a_56" -> "systemerror.195_7";
"global_lustruct.64+192" -> "ESCAPED";
"_4" -> "ESCAPED";
"_4" -> "global_lustruct.64+192";
"systemerror.195_7" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL systemerror }
NONLOCAL = { ESCAPED NONLOCAL } same as a_56
STOREDANYTHING = { }
INTEGER = { ANYTHING }
AllocateMemory = { }
systemerror = { ESCAPED NONLOCAL } same as systemerror.195_7
a_56 = { ESCAPED NONLOCAL }
b_58 = { ESCAPED NONLOCAL } same as a_56
_1 = { ESCAPED NONLOCAL } same as a_56
LUtempvv = { ESCAPED NONLOCAL } same as a_56
ptra$ptrs$p_52 = { ESCAPED NONLOCAL } same as a_56
_2 = { ESCAPED NONLOCAL } same as a_56
build_problem = { }
_3 = { ESCAPED NONLOCAL } same as a_56
global_lustruct.0+32 = { ESCAPED NONLOCAL } same as a_56
global_lustruct.64+192 = { NULL ESCAPED NONLOCAL }
_4 = { NONLOCAL }
i_41 = { NONLOCAL } same as _4
_5 = { NONLOCAL } same as _4
_6 = { NONLOCAL } same as _4
abase_79 = { ESCAPED NONLOCAL } same as a_56
systemerror.195_7 = { ESCAPED NONLOCAL }
systemerror.196_8 = { ESCAPED NONLOCAL } same as systemerror.195_7
ReportError = { }
LUFreeMem = { }
ErrorExit = { }
_9 = { NONLOCAL } same as _4
_10 = { NONLOCAL } same as _4
_11 = { NONLOCAL } same as _4
bbase_84 = { ESCAPED NONLOCAL } same as a_56
systemerror.197_12 = { ESCAPED NONLOCAL } same as systemerror.195_7
systemerror.198_13 = { ESCAPED NONLOCAL } same as systemerror.195_7
_14 = { NONLOCAL } same as _4
DoLUIteration = { }
_15 = { ESCAPED NONLOCAL } same as a_56
global_min_ticks.199_16 = { ESCAPED NONLOCAL } same as a_56
global_min_ticks = { ESCAPED NONLOCAL } same as a_56
_17 = { NONLOCAL } same as _4
FreeMemory = { }
i_91 = { NONLOCAL } same as _4
abase_35 = { ESCAPED NONLOCAL } same as a_56
abase_76 = { }
bbase_38 = { ESCAPED NONLOCAL } same as a_56
bbase_77 = { }
abase_36 = { ESCAPED NONLOCAL } same as a_56
bbase_39 = { ESCAPED NONLOCAL } same as a_56
_18 = { NULL ESCAPED NONLOCAL } same as global_lustruct.64+192
__printf_chk = { }
_109 = { ESCAPED NONLOCAL } same as a_56
_19 = { NULL ESCAPED NONLOCAL } same as global_lustruct.64+192
_20 = { NULL ESCAPED NONLOCAL } same as global_lustruct.64+192
abase_65 = { ESCAPED NONLOCAL } same as a_56
systemerror.200_21 = { ESCAPED NONLOCAL } same as systemerror.195_7
systemerror.201_22 = { ESCAPED NONLOCAL } same as systemerror.195_7
_23 = { NULL ESCAPED NONLOCAL } same as global_lustruct.64+192
_24 = { NULL ESCAPED NONLOCAL } same as global_lustruct.64+192
bbase_70 = { ESCAPED NONLOCAL } same as a_56
systemerror.202_25 = { ESCAPED NONLOCAL } same as systemerror.195_7
systemerror.203_26 = { ESCAPED NONLOCAL } same as systemerror.195_7
abase_37 = { ESCAPED NONLOCAL } same as a_56
bbase_40 = { ESCAPED NONLOCAL } same as a_56
accumtime_42 = { NULL ESCAPED NONLOCAL } same as global_lustruct.64+192
accumtime_100 = { NULL ESCAPED NONLOCAL } same as global_lustruct.64+192
iterations_43 = { NULL ESCAPED NONLOCAL } same as global_lustruct.64+192
iterations_101 = { NULL ESCAPED NONLOCAL } same as global_lustruct.64+192
_27 = { NULL ESCAPED NONLOCAL } same as global_lustruct.64+192
_99 = { ESCAPED NONLOCAL } same as a_56
_28 = { NULL ESCAPED NONLOCAL } same as global_lustruct.64+192
_29 = { NULL ESCAPED NONLOCAL } same as global_lustruct.64+192
TicksToSecs = { }
_30 = { ESCAPED NONLOCAL } same as a_56
_31 = { NULL ESCAPED NONLOCAL } same as global_lustruct.64+192
TicksToFracSecs = { }
_32 = { ESCAPED NONLOCAL } same as a_56
_33 = { NULL ESCAPED NONLOCAL } same as global_lustruct.64+192
_34 = { ESCAPED NONLOCAL } same as a_56


Alias information for DoLU

Aliased symbols

systemerror, UID D.5669, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.5669 } (escaped)

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
abase_35, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
abase_36, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
abase_37, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
bbase_38, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
bbase_39, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
bbase_40, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
ptra$ptrs$p_52, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
a_56, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
b_58, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
abase_65, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
bbase_70, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
abase_76(D), points-to NULL, points-to vars: { }
bbase_77(D), points-to NULL, points-to vars: { }
abase_79, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
bbase_84, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

DoLU ()
{
  fardouble * ptra$ptrs$p;
  int D.6544;
  double iterations;
  long unsigned int accumtime;
  int i;
  int n;
  struct LUdblptr ptra;
  fardouble * bbase;
  fardouble * abase;
  fardouble * b;
  fardouble * a;
  int systemerror;
  char * errorcontext;
  struct LUStruct * loclustruct;
  farvoid * _1;
  fardouble[<unknown>][101] * _2;
  int _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;
  int systemerror.195_7;
  int systemerror.196_8;
  int _9;
  long unsigned int _10;
  long unsigned int _11;
  int systemerror.197_12;
  int systemerror.198_13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int global_min_ticks.199_16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  int systemerror.200_21;
  int systemerror.201_22;
  long unsigned int _23;
  long unsigned int _24;
  int systemerror.202_25;
  int systemerror.203_26;
  long unsigned int _27;
  long unsigned int _28;
  double _29;
  long unsigned int _30;
  long unsigned int _31;
  double _32;
  double _33;
  int _34;
  long unsigned int _99;
  int _109;

  <bb 2> [0.00%]:
  a_56 = AllocateMemory (81608, &systemerror);
  b_58 = AllocateMemory (808, &systemerror);
  _1 = AllocateMemory (808, &systemerror);
  LUtempvv = _1;
  ptra$ptrs$p_52 = a_56;
  _2 = ptra$ptrs$p_52;
  build_problem (_2, 101, b_58);
  _3 = global_lustruct.adjust;
  if (_3 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 3> [0.00%]:
  global_lustruct.numarrays = 0;
  goto <bb 11>; [0.00%]

  <bb 4> [0.00%]:
  _4 = i_41 + 1;
  _5 = (long unsigned int) _4;
  _6 = _5 * 81608;
  abase_79 = AllocateMemory (_6, &systemerror);
  systemerror.195_7 = systemerror;
  if (systemerror.195_7 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  systemerror.196_8 = systemerror;
  ReportError ("FPU:LU", systemerror.196_8);
  LUFreeMem (a_56, b_58, 0B, 0B);
  ErrorExit ();

  <bb 6> [0.00%]:
  _9 = i_41 + 1;
  _10 = (long unsigned int) _9;
  _11 = _10 * 808;
  bbase_84 = AllocateMemory (_11, &systemerror);
  systemerror.197_12 = systemerror;
  if (systemerror.197_12 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  systemerror.198_13 = systemerror;
  ReportError ("FPU:LU", systemerror.198_13);
  LUFreeMem (a_56, b_58, abase_79, 0B);
  ErrorExit ();

  <bb 8> [0.00%]:
  _14 = (long unsigned int) i_41;
  _15 = DoLUIteration (a_56, b_58, abase_79, bbase_84, _14);
  global_min_ticks.199_16 = global_min_ticks;
  if (_15 > global_min_ticks.199_16)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  _17 = (long unsigned int) i_41;
  global_lustruct.numarrays = _17;
  goto <bb 12>; [0.00%]

  <bb 10> [0.00%]:
  FreeMemory (abase_79, &systemerror);
  FreeMemory (bbase_84, &systemerror);
  i_91 = i_41 + 1;

  <bb 11> [0.00%]:
  # abase_35 = PHI <abase_76(D)(3), abase_79(10)>
  # bbase_38 = PHI <bbase_77(D)(3), bbase_84(10)>
  # i_41 = PHI <1(3), i_91(10)>
  if (i_41 <= 10000)
    goto <bb 4>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [0.00%]:
  # abase_36 = PHI <abase_79(9), abase_35(11)>
  # bbase_39 = PHI <bbase_84(9), bbase_38(11)>
  _18 = global_lustruct.numarrays;
  if (_18 == 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 13> [100.00%]:
  _109 = __printf_chk (1, "FPU:LU -- Array limit reached\n");
  LUFreeMem (a_56, b_58, abase_36, bbase_39);
  ErrorExit ();
  goto <bb 18>; [0.00%]

  <bb 14> [0.00%]:
  _19 = global_lustruct.numarrays;
  _20 = _19 * 81608;
  abase_65 = AllocateMemory (_20, &systemerror);
  systemerror.200_21 = systemerror;
  if (systemerror.200_21 != 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:
  systemerror.201_22 = systemerror;
  ReportError ("FPU:LU", systemerror.201_22);
  LUFreeMem (a_56, b_58, 0B, 0B);
  ErrorExit ();

  <bb 16> [0.00%]:
  _23 = global_lustruct.numarrays;
  _24 = _23 * 808;
  bbase_70 = AllocateMemory (_24, &systemerror);
  systemerror.202_25 = systemerror;
  if (systemerror.202_25 != 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  systemerror.203_26 = systemerror;
  ReportError ("FPU:LU", systemerror.203_26);
  LUFreeMem (a_56, b_58, abase_65, 0B);
  ErrorExit ();

  <bb 18> [0.00%]:
  # abase_37 = PHI <abase_36(13), abase_65(16), abase_65(17), abase_36(12)>
  # bbase_40 = PHI <bbase_39(13), bbase_70(16), bbase_70(17), bbase_39(12)>

  <bb 19> [0.00%]:
  # accumtime_42 = PHI <0(18), accumtime_100(19)>
  # iterations_43 = PHI <0.0(18), iterations_101(19)>
  _27 = global_lustruct.numarrays;
  _99 = DoLUIteration (a_56, b_58, abase_37, bbase_40, _27);
  accumtime_100 = accumtime_42 + _99;
  _28 = global_lustruct.numarrays;
  _29 = (double) _28;
  iterations_101 = _29 + iterations_43;
  _30 = TicksToSecs (accumtime_100);
  _31 = global_lustruct.request_secs;
  if (_30 < _31)
    goto <bb 19>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  _32 = TicksToFracSecs (accumtime_100);
  _33 = iterations_101 / _32;
  global_lustruct.iterspersec = _33;
  _34 = global_lustruct.adjust;
  if (_34 == 0)
    goto <bb 21>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 21> [0.00%]:
  global_lustruct.adjust = 1;

  <bb 22> [0.00%]:
  LUFreeMem (a_56, b_58, abase_37, bbase_40);
  systemerror ={v} {CLOBBER};
  return;

}


