
;; Function Assignment (Assignment, funcdef_no=78, decl_uid=4613, cgraph_uid=78, symbol_order=103)

Created preheader block for loop 1
Created preheader block for loop 8
Created preheader block for loop 9
Created preheader block for loop 10
Created preheader block for loop 11
Created preheader block for loop 12
Created preheader block for loop 13
Created preheader block for loop 14
Created preheader block for loop 15
Created preheader block for loop 16
Created preheader block for loop 18
Created preheader block for loop 19
Created preheader block for loop 20
Created preheader block for loop 21
Created preheader block for loop 22
Created preheader block for loop 23
Created preheader block for loop 24
Created preheader block for loop 26
Created preheader block for loop 27
Created preheader block for loop 28
Created preheader block for loop 30
Created preheader block for loop 33
Created preheader block for loop 35
Created preheader block for loop 2
Created preheader block for loop 3
Created preheader block for loop 4
Created preheader block for loop 6
Created preheader block for loop 7
;; 36 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 155 7 8 9 10 156 152 11 12 13 14 15 153 16 17 18 19 154 129 20 21 142 22 23 140 24 25 26 27 28 29 30 141 136 31 32 139 33 34 35 36 37 38 137 39 138 40 41 42 43 44 45 46 47 157 134 48 135 49 50 51 52 53 54 55 132 56 133 57 58 59 60 61 62 130 63 131 64 65 66 67 68 69 70 71 72 73 74 75 151 147 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 150 148 91 92 93 94 95 96 97 98 99 100 101 102 103 104 149 105 158 106 144 107 108 109 110 111 112 113 114 115 116 117 118 145 119 120 121 122 123 124 125 146 126 127 143 128
;;
;; Loop 1
;;  header 71, latch 70
;;  depth 1, outer 0
;;  nodes: 71 70 69 130 68 63 67 131 66 64 65 62 132 61 56 60 133 59 57 58 55 134 54 48 53 135 52 49 50 51 47 46 137 45 39 44 138 43 40 41 42 38 31 37 32 36 139 35 33 34 136 157 30 140 29 27 28 24 26 25 141 23 142 22 21 143 20 127 126 125 144 124 112 123 145 122 119 120 121 118 113 117 114 115 116 109 111 110 146 108 106 105 104 148 103 96 102 97 101 98 99 100 95 94 149 91 92 93 90 76 89 82 88 83 87 84 85 86 81 80 150 77 78 79 147 158 75 74 73 72 151
;;
;; Loop 8
;;  header 69, latch 68
;;  depth 2, outer 1
;;  nodes: 69 68 63 67 131 66 64 65
;;
;; Loop 9
;;  header 67, latch 66
;;  depth 3, outer 8
;;  nodes: 67 66 64 65
;;
;; Loop 10
;;  header 62, latch 61
;;  depth 2, outer 1
;;  nodes: 62 61 56 60 133 59 57 58
;;
;; Loop 11
;;  header 60, latch 59
;;  depth 3, outer 10
;;  nodes: 60 59 57 58
;;
;; Loop 12
;;  header 55, latch 54
;;  depth 2, outer 1
;;  nodes: 55 54 48 53 135 52 49 50 51
;;
;; Loop 13
;;  header 53, latch 52
;;  depth 3, outer 12
;;  nodes: 53 52 49 50 51
;;
;; Loop 14
;;  header 31, latch 157
;;  depth 2, outer 1
;;  nodes: 31 157 47 46 137 45 39 44 138 43 40 41 42 38 37 32 36 139 35 33 34
;;
;; Loop 15
;;  header 46, latch 45
;;  depth 3, outer 14
;;  nodes: 46 45 39 44 138 43 40 41 42
;;
;; Loop 16
;;  header 44, latch 43
;;  depth 4, outer 15
;;  nodes: 44 43 40 41 42
;;
;; Loop 17
;;  header 38, latch 37
;;  depth 3, outer 14
;;  nodes: 38 37 32 36 139 35 33 34
;;
;; Loop 18
;;  header 36, latch 35
;;  depth 4, outer 17
;;  nodes: 36 35 33 34
;;
;; Loop 19
;;  header 30, latch 29
;;  depth 2, outer 1
;;  nodes: 30 29 27 28 24 26 25 141
;;
;; Loop 20
;;  header 26, latch 25
;;  depth 3, outer 19
;;  nodes: 26 25 24
;;
;; Loop 21
;;  header 23, latch 22
;;  depth 2, outer 1
;;  nodes: 23 22
;;
;; Loop 22
;;  header 21, latch 20
;;  depth 2, outer 1
;;  nodes: 21 20
;;
;; Loop 23
;;  header 125, latch 124
;;  depth 2, outer 1
;;  nodes: 125 124 112 123 145 122 119 120 121 118 113 117 114 115 116 109 111 110 146 108
;;
;; Loop 24
;;  header 123, latch 122
;;  depth 3, outer 23
;;  nodes: 123 122 119 120 121
;;
;; Loop 25
;;  header 118, latch 117
;;  depth 3, outer 23
;;  nodes: 118 117 114 115 116
;;
;; Loop 26
;;  header 111, latch 110
;;  depth 3, outer 23
;;  nodes: 111 110 108 109
;;
;; Loop 27
;;  header 76, latch 158
;;  depth 2, outer 1
;;  nodes: 76 158 105 104 148 103 96 102 97 101 98 99 100 95 94 149 91 92 93 90 89 82 88 83 87 84 85 86 81 80 150 77 78 79
;;
;; Loop 28
;;  header 104, latch 103
;;  depth 3, outer 27
;;  nodes: 104 103 96 102 97 101 98 99 100 95 94 149 91 92 93
;;
;; Loop 29
;;  header 102, latch 101
;;  depth 4, outer 28
;;  nodes: 102 101 98 99 100
;;
;; Loop 30
;;  header 95, latch 94
;;  depth 4, outer 28
;;  nodes: 95 94 91 92 93
;;
;; Loop 31
;;  header 90, latch 89
;;  depth 3, outer 27
;;  nodes: 90 89 82 88 83 87 84 85 86 81 80 150 77 78 79
;;
;; Loop 32
;;  header 88, latch 87
;;  depth 4, outer 31
;;  nodes: 88 87 84 85 86
;;
;; Loop 33
;;  header 81, latch 80
;;  depth 4, outer 31
;;  nodes: 81 80 77 78 79
;;
;; Loop 34
;;  header 75, latch 74
;;  depth 2, outer 1
;;  nodes: 75 74 73 72 151
;;
;; Loop 35
;;  header 73, latch 72
;;  depth 3, outer 34
;;  nodes: 73 72
;;
;; Loop 2
;;  header 19, latch 18
;;  depth 1, outer 0
;;  nodes: 19 18 15 17 153 16 14 13 154 11 12
;;
;; Loop 3
;;  header 17, latch 16
;;  depth 2, outer 2
;;  nodes: 17 16
;;
;; Loop 4
;;  header 14, latch 13
;;  depth 2, outer 2
;;  nodes: 14 13 11 12
;;
;; Loop 5
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9 8 155 7 6 5 156 3 4
;;
;; Loop 6
;;  header 8, latch 7
;;  depth 2, outer 5
;;  nodes: 8 7
;;
;; Loop 7
;;  header 6, latch 5
;;  depth 2, outer 5
;;  nodes: 6 5 3 4
;; 2 succs { 10 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 155 }
;; 155 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 10 }
;; 10 succs { 156 152 }
;; 156 succs { 6 }
;; 152 succs { 19 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 14 }
;; 14 succs { 11 15 }
;; 15 succs { 153 18 }
;; 153 succs { 17 }
;; 16 succs { 17 }
;; 17 succs { 16 18 }
;; 18 succs { 19 }
;; 19 succs { 154 129 }
;; 154 succs { 14 }
;; 129 succs { 71 }
;; 20 succs { 21 }
;; 21 succs { 20 142 }
;; 142 succs { 23 }
;; 22 succs { 23 }
;; 23 succs { 22 140 }
;; 140 succs { 30 }
;; 24 succs { 27 25 }
;; 25 succs { 26 }
;; 26 succs { 24 27 }
;; 27 succs { 28 29 }
;; 28 succs { 29 }
;; 29 succs { 30 }
;; 30 succs { 141 136 }
;; 141 succs { 26 }
;; 136 succs { 31 }
;; 31 succs { 38 }
;; 32 succs { 139 37 }
;; 139 succs { 36 }
;; 33 succs { 34 35 }
;; 34 succs { 35 }
;; 35 succs { 36 }
;; 36 succs { 33 37 }
;; 37 succs { 38 }
;; 38 succs { 32 137 }
;; 137 succs { 46 }
;; 39 succs { 138 45 }
;; 138 succs { 44 }
;; 40 succs { 41 43 }
;; 41 succs { 42 43 }
;; 42 succs { 43 }
;; 43 succs { 44 }
;; 44 succs { 40 45 }
;; 45 succs { 46 }
;; 46 succs { 39 47 }
;; 47 succs { 157 134 }
;; 157 succs { 31 }
;; 134 succs { 55 }
;; 48 succs { 135 54 }
;; 135 succs { 53 }
;; 49 succs { 50 52 }
;; 50 succs { 51 52 }
;; 51 succs { 52 }
;; 52 succs { 53 }
;; 53 succs { 49 54 }
;; 54 succs { 55 }
;; 55 succs { 48 132 }
;; 132 succs { 62 }
;; 56 succs { 133 61 }
;; 133 succs { 60 }
;; 57 succs { 58 59 }
;; 58 succs { 59 }
;; 59 succs { 60 }
;; 60 succs { 57 61 }
;; 61 succs { 62 }
;; 62 succs { 56 130 }
;; 130 succs { 69 }
;; 63 succs { 131 68 }
;; 131 succs { 67 }
;; 64 succs { 65 66 }
;; 65 succs { 66 }
;; 66 succs { 67 }
;; 67 succs { 64 68 }
;; 68 succs { 69 }
;; 69 succs { 63 70 }
;; 70 succs { 71 }
;; 71 succs { 75 }
;; 72 succs { 73 }
;; 73 succs { 72 74 }
;; 74 succs { 75 }
;; 75 succs { 151 147 }
;; 151 succs { 73 }
;; 147 succs { 76 }
;; 76 succs { 90 }
;; 77 succs { 78 80 }
;; 78 succs { 79 80 }
;; 79 succs { 80 }
;; 80 succs { 81 }
;; 81 succs { 77 82 }
;; 82 succs { 83 89 }
;; 83 succs { 88 }
;; 84 succs { 85 87 }
;; 85 succs { 86 87 }
;; 86 succs { 87 }
;; 87 succs { 88 }
;; 88 succs { 84 89 }
;; 89 succs { 90 }
;; 90 succs { 150 148 }
;; 150 succs { 81 }
;; 148 succs { 104 }
;; 91 succs { 92 94 }
;; 92 succs { 93 94 }
;; 93 succs { 94 }
;; 94 succs { 95 }
;; 95 succs { 91 96 }
;; 96 succs { 97 103 }
;; 97 succs { 102 }
;; 98 succs { 99 101 }
;; 99 succs { 100 101 }
;; 100 succs { 101 }
;; 101 succs { 102 }
;; 102 succs { 98 103 }
;; 103 succs { 104 }
;; 104 succs { 149 105 }
;; 149 succs { 95 }
;; 105 succs { 158 106 }
;; 158 succs { 76 }
;; 106 succs { 107 144 }
;; 144 succs { 125 }
;; 107 succs { 128 }
;; 108 succs { 109 110 }
;; 109 succs { 112 110 }
;; 110 succs { 111 }
;; 111 succs { 108 112 }
;; 112 succs { 113 124 }
;; 113 succs { 118 }
;; 114 succs { 115 117 }
;; 115 succs { 116 117 }
;; 116 succs { 117 }
;; 117 succs { 118 }
;; 118 succs { 114 145 }
;; 145 succs { 123 }
;; 119 succs { 120 122 }
;; 120 succs { 121 122 }
;; 121 succs { 122 }
;; 122 succs { 123 }
;; 123 succs { 119 124 }
;; 124 succs { 125 }
;; 125 succs { 146 126 }
;; 146 succs { 111 }
;; 126 succs { 127 }
;; 127 succs { 143 128 }
;; 143 succs { 21 }
;; 128 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

smallest_1 -> { smallest_122 }
selected_5 -> { selected_243 }
selected_6 -> { selected_237 }
selected_8 -> { selected_238 }
totnumassigns_24 -> { totnumassigns_211 }
totnumassigns_37 -> { totnumassigns_180 }
numzeros_83 -> { numzeros_142 }
numassigns_103 -> { numassigns_146 }
totnumassigns_145 -> { totnumassigns_180 }
numzeros_153 -> { numzeros_173 }
numassigns_177 -> { numassigns_178 }
totnumassigns_182 -> { totnumassigns_148 }
currentmin_195 -> { currentmin_16 }
currentmin_228 -> { currentmin_35 }
newrows_295 -> { newrows_119 }
selected_312 -> { selected_244 }
Incremental SSA update started at block: 10
Number of blocks in CFG: 159
Number of blocks to update: 57 ( 36%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

i_313 -> { i_9 }
j_314 -> { j_13 }
_315 -> { _15 }
_316 -> { _15 }
currentmin_317 -> { currentmin_16 }
currentmin_318 -> { currentmin_16 }
_319 -> { _20 }
j_320 -> { j_21 }
i_321 -> { i_28 }
j_322 -> { j_32 }
_323 -> { _34 }
_324 -> { _34 }
currentmin_325 -> { currentmin_35 }
currentmin_326 -> { currentmin_35 }
totnumassigns_327 -> { totnumassigns_37 }
i_328 -> { i_38 }
_329 -> { _41 }
i_330 -> { i_49 }
i_331 -> { i_51 }
i_332 -> { i_53 }
j_333 -> { j_57 }
i_334 -> { i_62 }
j_335 -> { j_67 }
j_336 -> { j_71 }
i_337 -> { i_73 }
i_338 -> { i_84 }
j_339 -> { j_86 }
_340 -> { _91 }
_341 -> { _91 }
smallest_342 -> { smallest_92 }
smallest_343 -> { smallest_92 }
i_344 -> { i_95 }
j_345 -> { j_97 }
_346 -> { _101 }
i_347 -> { i_107 }
j_348 -> { j_109 }
_349 -> { _113 }
i_350 -> { i_124 }
j_351 -> { j_128 }
i_352 -> { i_132 }
j_353 -> { j_136 }
k_354 -> { k_154 }
k_355 -> { k_154 }
k_356 -> { k_154 }
i_357 -> { i_163 }
j_358 -> { j_167 }
_359 -> { _185 }
k_360 -> { k_187 }
k_361 -> { k_187 }
k_362 -> { k_187 }
i_363 -> { i_196 }
j_364 -> { j_200 }
selected_365 -> { selected_207 }
_366 -> { _210 }
k_367 -> { k_213 }
_368 -> { _214 }
k_369 -> { k_219 }
k_370 -> { k_219 }
k_371 -> { k_219 }
currentmin_372 -> { currentmin_228 }
Incremental SSA update started at block: 10
Number of blocks in CFG: 165
Number of blocks to update: 124 ( 75%)



Value ranges after VRP:

smallest_1: [smallest_122, smallest_122]
.MEM_2: VARYING
arraybase_4(D): VARYING
selected_5: [0, 2147483646]
selected_6: [0, 2147483646]
selected_8: [0, 2147483646]
i_9: [0, 101]
_10: [0, 100]
_11: [0, 80800]
_12: VARYING
j_13: [0, 101]
_14: [0, 100]
_15: VARYING
currentmin_16: [-INF, +INF]
j_17: [1, 101]
_18: [0, 100]
_19: [0, 80800]
_20: VARYING
j_21: [0, 101]
_22: [0, 100]
_23: VARYING
totnumassigns_24: [totnumassigns_211, totnumassigns_211]  EQUIVALENCES: { } (0 elements)
_25: VARYING
j_26: [1, 101]
i_27: [1, 101]
i_28: [0, 101]
_29: [0, 100]
_30: [0, 80800]
_31: VARYING
j_32: [0, 101]
_33: [0, 100]
_34: VARYING
currentmin_35: [-INF, +INF]
i_36: [1, 101]
totnumassigns_37: [totnumassigns_180, totnumassigns_180]
i_38: [0, 101]
_39: [0, 100]
_40: [0, 80800]
_41: VARYING
_42: [0, 100]
_43: VARYING
_44: VARYING
i_45: [1, 101]
j_46: [1, 101]
currentmin_47: [-INF, +INF]  EQUIVALENCES: { } (0 elements)
currentmin_48: [-INF, +INF]  EQUIVALENCES: { } (0 elements)
i_49: [0, 101]
i_50: [1, 101]
i_51: [0, 101]
i_52: [1, 101]
i_53: [0, 101]
_54: [0, 100]
_55: [0, 20200]
_56: VARYING
j_57: [0, 101]
_58: VARYING
j_59: [1, 101]
numassigns_60: [0, 1]
i_61: [1, 101]
i_62: [0, 101]
_63: VARYING
_64: [0, 100]
_65: [0, 80800]
_66: VARYING
j_67: [0, 101]
_68: VARYING
j_69: [1, 101]
i_70: [1, 101]
j_71: [0, 101]
_72: VARYING
i_73: [0, 101]
_74: [0, 100]
_75: [0, 20200]
_76: VARYING
_77: VARYING
_78: VARYING
newrows_79: VARYING
newrows_80: [0, +INF]
i_81: [1, 101]
j_82: [1, 101]
numzeros_83: [numzeros_142, numzeros_142]
i_84: [0, 101]
_85: VARYING
j_86: [0, 101]
_87: VARYING
_88: [0, 100]
_89: [0, 80800]
_90: VARYING
_91: VARYING
smallest_92: VARYING
j_93: [1, 101]
i_94: [1, 101]
i_95: [0, 101]
_96: VARYING
j_97: [0, 101]
_98: VARYING
_99: [0, 100]
_100: [0, 80800]
_101: VARYING
_102: VARYING
numassigns_103: [numassigns_146, numassigns_146]
_104: VARYING
j_105: [1, 101]
i_106: [1, 101]
i_107: [0, 101]
_108: VARYING
j_109: [0, 101]
_110: VARYING
_111: [0, 100]
_112: [0, 80800]
_113: VARYING
_114: VARYING
_115: VARYING
j_116: [1, 101]
i_117: [1, 101]
newrows_118: VARYING
newrows_119: VARYING
newrows_120: VARYING
smallest_121: VARYING
smallest_122: VARYING
smallest_123: VARYING
i_124: [0, 101]
_125: [0, 100]
_126: [0, 20200]
_127: VARYING
j_128: [0, 101]
_129: [0, 100]
j_130: [1, 101]
i_131: [1, 101]
i_132: [0, 101]
_133: [0, 100]
_134: [0, 80800]
_135: VARYING
j_136: [0, 101]
_137: [0, 100]
_138: VARYING
_139: [0, 20200]
_140: VARYING
_141: VARYING
numzeros_142: VARYING
numzeros_143: [0, +INF]
j_144: [1, 101]
totnumassigns_145: [totnumassigns_180, totnumassigns_180]
numassigns_146: VARYING
numassigns_147: [0, +INF]
totnumassigns_148: VARYING
totnumassigns_149: [0, +INF]
_150: [0, 100]
_151: [0, 20200]
_152: VARYING
numzeros_153: [numzeros_173, numzeros_173]
k_154: [0, 101]
_155: [0, +INF]
_156: [0, +INF]
_157: VARYING
_158: VARYING
_159: [0, +INF]
_160: VARYING
k_161: [1, 101]
i_162: [1, 101]
i_163: [0, 101]
_164: [0, 100]
_165: [0, 80800]
_166: VARYING
j_167: [0, 101]
_168: [0, 100]
_169: VARYING
_170: [0, 20200]
_171: VARYING
_172: VARYING
numzeros_173: VARYING
numzeros_174: [0, +INF]
selected_175: [0, 100]
i_176: [1, 101]
numassigns_177: [numassigns_178, numassigns_178]
numassigns_178: VARYING
numassigns_179: [0, +INF]
totnumassigns_180: VARYING
totnumassigns_181: [0, +INF]
totnumassigns_182: [totnumassigns_148, totnumassigns_148]
_183: [0, 2147483646]
_184: [0, 433791696492]
_185: VARYING
_186: [0, 100]
k_187: [0, 101]
_188: [0, 1735166785968]
_189: VARYING
_190: [0, +INF]
_191: VARYING
k_192: [1, 101]
j_193: [1, 101]
_194: [101, 101]
currentmin_195: [-INF, +INF]
i_196: [0, 101]
_197: [0, 100]
_198: [0, 80800]
_199: VARYING
j_200: [0, 101]
_201: [0, 100]
_202: VARYING
_203: [0, 20200]
_204: VARYING
_205: VARYING
j_206: [1, 101]
selected_207: [-1, 100]
_208: [0, 100]
_209: [0, 20200]
_210: VARYING
totnumassigns_211: VARYING
totnumassigns_212: [0, +INF]
k_213: [0, 101]
_214: [0, 100]
_215: [0, 80800]
_216: VARYING
_217: VARYING
k_218: [1, 101]
k_219: [0, 101]
_220: [0, +INF]
_221: [0, +INF]
_222: VARYING
_223: VARYING
_224: [0, +INF]
_225: VARYING
k_226: [1, 101]
i_227: [1, 101]
currentmin_228: [-INF, +INF]
_229: [0, +INF]
_230: [0, +INF]
totnumassigns_231: VARYING
.MEM_232: VARYING
selected_233: [0, 2147483646]
.MEM_234: VARYING
numzeros_235: VARYING
selected_236: [0, 2147483646]
selected_237: [0, 2147483646]
selected_238: [0, 2147483646]
numassigns_239: VARYING
totnumassigns_240: VARYING
numzeros_241: VARYING
selected_242: [0, 2147483646]
selected_243: [0, 2147483646]
selected_244: [0, 2147483646]
numassigns_245: VARYING
totnumassigns_246: VARYING
totnumassigns_247: VARYING
.MEM_248: VARYING
.MEM_249: VARYING
.MEM_250: VARYING
.MEM_251: VARYING
.MEM_252: VARYING
.MEM_253: VARYING
.MEM_254: VARYING
.MEM_255: VARYING
.MEM_256: VARYING
.MEM_257: VARYING
.MEM_258: VARYING
.MEM_259: VARYING
.MEM_260: VARYING
.MEM_261: VARYING
.MEM_262: VARYING
.MEM_263: VARYING
.MEM_264: VARYING
.MEM_265: VARYING
.MEM_266: VARYING
.MEM_267: VARYING
.MEM_268: VARYING
.MEM_269: VARYING
.MEM_270: VARYING
.MEM_271: VARYING
.MEM_272: VARYING
.MEM_273: VARYING
.MEM_274: VARYING
.MEM_275: VARYING
.MEM_276: VARYING
.MEM_277: VARYING
.MEM_278: VARYING
.MEM_279: VARYING
.MEM_280: VARYING
.MEM_281: VARYING
.MEM_282: VARYING
.MEM_283: VARYING
.MEM_284: VARYING
.MEM_285: VARYING
.MEM_286: VARYING
.MEM_287: VARYING
.MEM_288: VARYING
.MEM_289: VARYING
.MEM_290: VARYING
.MEM_291: VARYING
newrows_295: [newrows_119, newrows_119]
selected_312: [0, 2147483646]
i_313: [0, 100]  EQUIVALENCES: { i_9 } (1 elements)
j_314: [0, 100]  EQUIVALENCES: { j_13 } (1 elements)
_315: [-INF, 9223372036854775806]  EQUIVALENCES: { _15 } (1 elements)
_316: [-INF, +INF]  EQUIVALENCES: { _15 } (1 elements)
currentmin_317: [-9223372036854775807, +INF]  EQUIVALENCES: { currentmin_16 } (1 elements)
currentmin_318: [-INF, +INF]  EQUIVALENCES: { currentmin_16 } (1 elements)
_319: ~[0B, 0B]  EQUIVALENCES: { _20 } (1 elements)
j_320: [0, 100]  EQUIVALENCES: { j_21 } (1 elements)
i_321: [0, 100]  EQUIVALENCES: { i_28 } (1 elements)
j_322: [0, 100]  EQUIVALENCES: { j_32 } (1 elements)
_323: [-INF, 9223372036854775806]  EQUIVALENCES: { _34 } (1 elements)
_324: [-INF, +INF]  EQUIVALENCES: { _34 } (1 elements)
currentmin_325: [-9223372036854775807, +INF]  EQUIVALENCES: { currentmin_35 } (1 elements)
currentmin_326: [-INF, +INF]  EQUIVALENCES: { currentmin_35 } (1 elements)
totnumassigns_327: ~[101, 101]  EQUIVALENCES: { totnumassigns_37 } (1 elements)
i_328: [0, 100]  EQUIVALENCES: { i_38 } (1 elements)
_329: ~[0B, 0B]  EQUIVALENCES: { _41 } (1 elements)
i_330: [0, 100]  EQUIVALENCES: { i_49 } (1 elements)
i_331: [0, 100]  EQUIVALENCES: { i_51 } (1 elements)
i_332: [0, 100]  EQUIVALENCES: { i_53 } (1 elements)
j_333: [0, 100]  EQUIVALENCES: { j_57 } (1 elements)
i_334: [0, 100]  EQUIVALENCES: { i_62 } (1 elements)
j_335: [0, 100]  EQUIVALENCES: { j_67 } (1 elements)
j_336: [0, 100]  EQUIVALENCES: { j_71 } (1 elements)
i_337: [0, 100]  EQUIVALENCES: { i_73 } (1 elements)
i_338: [0, 100]  EQUIVALENCES: { i_84 } (1 elements)
j_339: [0, 100]  EQUIVALENCES: { j_86 } (1 elements)
_340: [-INF, smallest_92 + -1]  EQUIVALENCES: { _91 } (1 elements)
_341: [smallest_92, +INF]  EQUIVALENCES: { _91 } (1 elements)
smallest_342: [_340 + 1, +INF]  EQUIVALENCES: { smallest_92 } (1 elements)
smallest_343: [-INF, _341]  EQUIVALENCES: { smallest_92 } (1 elements)
i_344: [0, 100]  EQUIVALENCES: { i_95 } (1 elements)
j_345: [0, 100]  EQUIVALENCES: { j_97 } (1 elements)
_346: ~[0B, 0B]  EQUIVALENCES: { _101 } (1 elements)
i_347: [0, 100]  EQUIVALENCES: { i_107 } (1 elements)
j_348: [0, 100]  EQUIVALENCES: { j_109 } (1 elements)
_349: ~[0B, 0B]  EQUIVALENCES: { _113 } (1 elements)
i_350: [0, 100]  EQUIVALENCES: { i_124 } (1 elements)
j_351: [0, 100]  EQUIVALENCES: { j_128 } (1 elements)
i_352: [0, 100]  EQUIVALENCES: { i_132 } (1 elements)
j_353: [0, 100]  EQUIVALENCES: { j_136 } (1 elements)
k_354: [0, 100]  EQUIVALENCES: { k_154 } (1 elements)
k_355: ~[i_352, i_352]  EQUIVALENCES: { k_154 k_354 } (2 elements)
k_356: [0, 100]  EQUIVALENCES: { i_132 k_154 i_352 k_354 } (4 elements)
i_357: [0, 100]  EQUIVALENCES: { i_163 } (1 elements)
j_358: [0, 100]  EQUIVALENCES: { j_167 } (1 elements)
_359: ~[0B, 0B]  EQUIVALENCES: { _185 } (1 elements)
k_360: [0, 100]  EQUIVALENCES: { k_187 } (1 elements)
k_361: ~[j_358, j_358]  EQUIVALENCES: { k_187 k_360 } (2 elements)
k_362: [0, 100]  EQUIVALENCES: { j_167 k_187 j_358 k_360 } (4 elements)
i_363: [0, 100]  EQUIVALENCES: { i_196 } (1 elements)
j_364: [0, 100]  EQUIVALENCES: { j_200 } (1 elements)
selected_365: [0, 100]  EQUIVALENCES: { selected_207 } (1 elements)
_366: ~[0B, 0B]  EQUIVALENCES: { _210 } (1 elements)
k_367: [0, 100]  EQUIVALENCES: { k_213 } (1 elements)
_368: ~[selected_365, selected_365]  EQUIVALENCES: { _214 } (1 elements)
k_369: [0, 100]  EQUIVALENCES: { k_219 } (1 elements)
k_370: ~[i_363, i_363]  EQUIVALENCES: { k_219 k_369 } (2 elements)
k_371: [0, 100]  EQUIVALENCES: { i_196 k_219 i_363 k_369 } (4 elements)
currentmin_372: ~[0, 0]  EQUIVALENCES: { currentmin_228 } (1 elements)


Simplified relational if (i_9 <= 100)
 into if (i_9 != 101)

Simplified relational if (j_32 <= 100)
 into if (j_32 != 101)

Simplified relational if (i_124 <= 100)
 into if (i_124 != 101)

Simplified relational if (i_132 <= 100)
 into if (i_132 != 101)

Simplified relational if (j_167 <= 100)
 into if (j_167 != 101)

Simplified relational if (i_196 <= 100)
 into if (i_196 != 101)

Simplified relational if (i_49 <= 100)
 into if (i_49 != 101)

Simplified relational if (i_51 <= 100)
 into if (i_51 != 101)

Simplified relational if (i_53 <= 100)
 into if (i_53 != 101)

Simplified relational if (i_62 <= 100)
 into if (i_62 != 101)

Simplified relational if (j_71 <= 100)
 into if (j_71 != 101)

Simplified relational if (i_84 <= 100)
 into if (i_84 != 101)

Simplified relational if (i_95 <= 100)
 into if (i_95 != 101)

Simplified relational if (i_107 <= 100)
 into if (i_107 != 101)

Simplified relational if (j_109 <= 100)
 into if (j_109 != 101)

Simplified relational if (j_97 <= 100)
 into if (j_97 != 101)

Simplified relational if (j_86 <= 100)
 into if (j_86 != 101)

Simplified relational if (i_73 <= 100)
 into if (i_73 != 101)

Simplified relational if (j_67 <= 100)
 into if (j_67 != 101)

Simplified relational if (j_57 <= 100)
 into if (j_57 != 101)

Simplified relational if (j_200 <= 100)
 into if (j_200 != 101)

Simplified relational if (k_213 <= 100)
 into if (k_213 != 101)

Simplified relational if (k_219 <= 100)
 into if (k_219 != 101)

Simplified relational if (i_163 <= 100)
 into if (i_163 != 101)

Simplified relational if (k_187 <= 100)
 into if (k_187 != 101)

Simplified relational if (j_136 <= 100)
 into if (j_136 != 101)

Simplified relational if (k_154 <= 100)
 into if (k_154 != 101)

Simplified relational if (j_128 <= 100)
 into if (j_128 != 101)

Simplified relational if (i_28 <= 100)
 into if (i_28 != 101)

Simplified relational if (i_38 <= 100)
 into if (i_38 != 101)

Simplified relational if (j_13 <= 100)
 into if (j_13 != 101)

Simplified relational if (j_21 <= 100)
 into if (j_21 != 101)

Removing basic block 112
Removing basic block 27
Removing basic block 3
Removing basic block 4
Removing basic block 7
Removing basic block 11
Removing basic block 12
Removing basic block 16
Removing basic block 20
Removing basic block 22
Removing basic block 24
Removing basic block 32
Removing basic block 33
Removing basic block 39
Removing basic block 40
Removing basic block 48
Removing basic block 49
Removing basic block 51
Removing basic block 56
Removing basic block 57
Removing basic block 63
Removing basic block 64
Removing basic block 72
Removing basic block 77
Removing basic block 84
Removing basic block 91
Removing basic block 98
Removing basic block 108
Removing basic block 114
Removing basic block 119
Merging blocks 126 and 127
Removing basic block 129
Removing basic block 130
Removing basic block 131
Removing basic block 133
Removing basic block 134
Removing basic block 135
Removing basic block 136
Removing basic block 137
Removing basic block 138
Removing basic block 139
Removing basic block 140
Removing basic block 141
Removing basic block 142
Removing basic block 143
Removing basic block 144
Removing basic block 145
Removing basic block 146
Removing basic block 147
Removing basic block 149
Removing basic block 150
Removing basic block 151
Removing basic block 152
Removing basic block 153
Removing basic block 154
Removing basic block 156
Removing basic block 157
Removing basic block 158
Removing basic block 162
Removing basic block 163
Removing basic block 164
Merging blocks 165 and 28
Merging blocks 167 and 113

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

numassigns_373 -> { numassigns_60 }
numassigns_374 -> { numassigns_60 numassigns_373 }
selected_375 -> { selected_207 }
selected_376 -> { selected_207 selected_375 }
j_377 -> { j_109 }
.MEM_378 -> { .MEM_271 }
i_379 -> { i_107 }
.MEM_380 -> { .MEM_273 }
j_381 -> { j_97 }
.MEM_382 -> { .MEM_267 }
i_383 -> { i_95 }
.MEM_384 -> { .MEM_269 }
j_385 -> { j_86 }
smallest_386 -> { smallest_92 }
i_387 -> { i_84 }
smallest_388 -> { smallest_122 }
i_389 -> { i_73 }
newrows_390 -> { newrows_79 }
.MEM_391 -> { .MEM_263 }
j_392 -> { j_71 }
newrows_393 -> { newrows_119 }
.MEM_394 -> { .MEM_265 }
j_395 -> { j_67 }
.MEM_396 -> { .MEM_259 }
i_397 -> { i_62 }
.MEM_398 -> { .MEM_261 }
j_399 -> { j_57 }
i_400 -> { i_53 }
.MEM_401 -> { .MEM_256 }
i_402 -> { i_51 }
.MEM_403 -> { .MEM_254 }
i_404 -> { i_49 }
.MEM_405 -> { .MEM_253 }
k_406 -> { k_219 }
.MEM_407 -> { .MEM_288 }
k_408 -> { k_213 }
.MEM_409 -> { .MEM_286 }
j_410 -> { j_200 }
i_411 -> { i_196 }
totnumassigns_412 -> { totnumassigns_211 }
.MEM_413 -> { .MEM_290 }
k_414 -> { k_187 }
.MEM_415 -> { .MEM_282 }
i_416 -> { i_163 }
numzeros_417 -> { numzeros_173 }
selected_418 -> { selected_243 }
j_419 -> { j_167 }
numassigns_420 -> { numassigns_178 }
totnumassigns_421 -> { totnumassigns_180 }
selected_422 -> { selected_244 }
.MEM_423 -> { .MEM_284 }
k_424 -> { k_154 }
.MEM_425 -> { .MEM_278 }
j_426 -> { j_136 }
numzeros_427 -> { numzeros_142 }
selected_428 -> { selected_237 }
i_429 -> { i_132 }
numassigns_430 -> { numassigns_146 }
totnumassigns_431 -> { totnumassigns_148 }
selected_432 -> { selected_238 }
.MEM_433 -> { .MEM_280 }
j_434 -> { j_128 }
.MEM_435 -> { .MEM_274 }
i_436 -> { i_124 }
.MEM_437 -> { .MEM_275 }
i_438 -> { i_38 }
.MEM_439 -> { .MEM_250 }
i_440 -> { i_28 }
currentmin_441 -> { currentmin_35 }
j_442 -> { j_32 }
.MEM_443 -> { .MEM_252 }
j_444 -> { j_21 }
.MEM_445 -> { .MEM_248 }
j_446 -> { j_13 }
currentmin_447 -> { currentmin_16 }
i_448 -> { i_9 }
.MEM_449 -> { .MEM_249 }
i_450 -> { i_9 }
j_451 -> { j_13 }
currentmin_452 -> { currentmin_16 }
j_453 -> { j_21 }
i_454 -> { i_28 }
j_455 -> { j_32 }
currentmin_456 -> { currentmin_35 }
i_457 -> { i_38 }
i_458 -> { i_49 }
i_459 -> { i_51 }
i_460 -> { i_53 }
j_461 -> { j_57 }
i_462 -> { i_62 }
j_463 -> { j_67 }
j_464 -> { j_71 }
i_465 -> { i_73 }
newrows_466 -> { newrows_79 }
i_467 -> { i_84 }
j_468 -> { j_86 }
smallest_469 -> { smallest_92 }
i_470 -> { i_95 }
j_471 -> { j_97 }
i_472 -> { i_107 }
j_473 -> { j_109 }
newrows_474 -> { newrows_119 }
smallest_475 -> { smallest_122 }
i_476 -> { i_124 }
j_477 -> { j_128 }
i_478 -> { i_132 }
j_479 -> { j_136 }
numzeros_480 -> { numzeros_142 }
numassigns_481 -> { numassigns_146 }
totnumassigns_482 -> { totnumassigns_148 }
k_483 -> { k_154 }
i_484 -> { i_163 }
j_485 -> { j_167 }
numzeros_486 -> { numzeros_173 }
numassigns_487 -> { numassigns_178 }
totnumassigns_488 -> { totnumassigns_180 }
k_489 -> { k_187 }
i_490 -> { i_196 }
j_491 -> { j_200 }
totnumassigns_492 -> { totnumassigns_211 }
k_493 -> { k_213 }
k_494 -> { k_219 }
selected_495 -> { selected_237 }
selected_496 -> { selected_238 }
selected_497 -> { selected_243 }
selected_498 -> { selected_244 }
.MEM_499 -> { .MEM_248 }
.MEM_500 -> { .MEM_249 }
.MEM_501 -> { .MEM_250 }
.MEM_502 -> { .MEM_252 }
.MEM_503 -> { .MEM_253 }
.MEM_504 -> { .MEM_254 }
.MEM_505 -> { .MEM_256 }
.MEM_506 -> { .MEM_259 }
.MEM_507 -> { .MEM_261 }
.MEM_508 -> { .MEM_263 }
.MEM_509 -> { .MEM_265 }
.MEM_510 -> { .MEM_267 }
.MEM_511 -> { .MEM_269 }
.MEM_512 -> { .MEM_271 }
.MEM_513 -> { .MEM_273 }
.MEM_514 -> { .MEM_274 }
.MEM_515 -> { .MEM_275 }
.MEM_516 -> { .MEM_278 }
.MEM_517 -> { .MEM_280 }
.MEM_518 -> { .MEM_282 }
.MEM_519 -> { .MEM_284 }
.MEM_520 -> { .MEM_286 }
.MEM_521 -> { .MEM_288 }
.MEM_522 -> { .MEM_290 }

SSA names to release after updating the SSA web

numassigns_60 selected_207 
Incremental SSA update started at block: 169
Number of blocks in CFG: 170
Number of blocks to update: 167 ( 98%)


Assignment (farlong[101] * arraybase)
{
  short unsigned int i;
  short unsigned int j;
  short unsigned int k;
  short unsigned int numassigns;
  short unsigned int totnumassigns;
  short unsigned int numzeros;
  int selected;
  int D.6709;
  int i;
  int j;
  short int linesrow[101];
  short int linescol[101];
  long int smallest;
  short unsigned int numassigns;
  short unsigned int newrows;
  short unsigned int i;
  short unsigned int j;
  long int currentmin;
  short int assignedtableau[101][101];
  long unsigned int _10;
  long unsigned int _11;
  long int[101] * _12;
  int _14;
  long int _15;
  long unsigned int _18;
  long unsigned int _19;
  long int[101] * _20;
  int _22;
  long int _23;
  long int _25;
  long unsigned int _29;
  long unsigned int _30;
  long int[101] * _31;
  int _33;
  long int _34;
  long unsigned int _39;
  long unsigned int _40;
  long int[101] * _41;
  int _42;
  long int _43;
  long int _44;
  long unsigned int _54;
  long unsigned int _55;
  short int[101] * _56;
  short int _58;
  short int _63;
  long unsigned int _64;
  long unsigned int _65;
  long int[101] * _66;
  long int _68;
  short int _72;
  long unsigned int _74;
  long unsigned int _75;
  short int[101] * _76;
  short int _77;
  short int _78;
  short int _85;
  short int _87;
  long unsigned int _88;
  long unsigned int _89;
  long int[101] * _90;
  long int _91;
  short int _96;
  short int _98;
  long unsigned int _99;
  long unsigned int _100;
  long int[101] * _101;
  long int _102;
  long int _104;
  short int _108;
  short int _110;
  long unsigned int _111;
  long unsigned int _112;
  long int[101] * _113;
  long int _114;
  long int _115;
  long unsigned int _125;
  long unsigned int _126;
  short int[101] * _127;
  int _129;
  long unsigned int _133;
  long unsigned int _134;
  long int[101] * _135;
  int _137;
  long int _138;
  long unsigned int _139;
  short int[101] * _140;
  short int _141;
  long unsigned int _150;
  long unsigned int _151;
  short int[101] * _152;
  long unsigned int _155;
  long unsigned int _156;
  long int[101] * _157;
  long int _158;
  long unsigned int _159;
  short int[101] * _160;
  long unsigned int _164;
  long unsigned int _165;
  long int[101] * _166;
  int _168;
  long int _169;
  long unsigned int _170;
  short int[101] * _171;
  short int _172;
  long unsigned int _183;
  long unsigned int _184;
  short int[101] * _185;
  int _186;
  long unsigned int _188;
  long int[101] * _189;
  int _190;
  long int _191;
  long unsigned int _197;
  long unsigned int _198;
  long int[101] * _199;
  int _201;
  long int _202;
  long unsigned int _203;
  short int[101] * _204;
  short int _205;
  long unsigned int _208;
  long unsigned int _209;
  short int[101] * _210;
  int _214;
  long unsigned int _215;
  long int[101] * _216;
  long int _217;
  long unsigned int _220;
  long unsigned int _221;
  long int[101] * _222;
  long int _223;
  long unsigned int _224;
  short int[101] * _225;
  int _229;

  <bb 2> [0.00%]:
  goto <bb 169>; [100.00%]

  <bb 3> [2.23%]:
  # j_451 = PHI <j_13(6), j_446(168)>
  # currentmin_452 = PHI <currentmin_16(6), currentmin_447(168)>
  _10 = (long unsigned int) i_450;
  _11 = _10 * 808;
  _12 = arraybase_4(D) + _11;
  _14 = (int) j_451;
  _15 = *_12[_14];
  if (_15 < currentmin_452)
    goto <bb 5>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 4> [1.12%]:

  <bb 5> [2.23%]:
  # currentmin_47 = PHI <currentmin_452(4), _15(3)>
  j_17 = j_451 + 1;

  <bb 6> [2.23%]:
  # j_13 = PHI <j_17(5)>
  # currentmin_16 = PHI <currentmin_47(5)>
  if (j_13 != 101)
    goto <bb 3>; [98.99%]
  else
    goto <bb 7>; [1.01%]

  <bb 7> [0.02%]:
  # currentmin_195 = PHI <currentmin_16(6)>
  goto <bb 167>; [100.00%]

  <bb 8> [2.23%]:
  # j_453 = PHI <j_21(9), j_444(167)>
  _18 = (long unsigned int) i_450;
  _19 = _18 * 808;
  _20 = arraybase_4(D) + _19;
  _22 = (int) j_453;
  _23 = *_20[_22];
  _25 = _23 - currentmin_195;
  *_20[_22] = _25;
  j_26 = j_453 + 1;

  <bb 9> [2.23%]:
  # j_21 = PHI <j_26(8)>
  if (j_21 != 101)
    goto <bb 8>; [98.99%]
  else
    goto <bb 10>; [1.01%]

  <bb 10> [0.02%]:
  i_27 = i_450 + 1;

  <bb 11> [0.02%]:
  # i_9 = PHI <i_27(10)>
  if (i_9 != 101)
    goto <bb 12>; [99.00%]
  else
    goto <bb 166>; [1.00%]

  <bb 12> [0.02%]:
  # i_450 = PHI <i_9(11), i_448(169)>
  goto <bb 168>; [100.00%]

  <bb 13> [2.23%]:
  # i_454 = PHI <i_28(16), i_440(165)>
  # currentmin_456 = PHI <currentmin_35(16), currentmin_441(165)>
  _29 = (long unsigned int) i_454;
  _30 = _29 * 808;
  _31 = arraybase_4(D) + _30;
  _33 = (int) j_455;
  _34 = *_31[_33];
  if (_34 < currentmin_456)
    goto <bb 15>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 14> [1.12%]:

  <bb 15> [2.23%]:
  # currentmin_48 = PHI <currentmin_456(14), _34(13)>
  i_36 = i_454 + 1;

  <bb 16> [2.23%]:
  # i_28 = PHI <i_36(15)>
  # currentmin_35 = PHI <currentmin_48(15)>
  if (i_28 != 101)
    goto <bb 13>; [98.99%]
  else
    goto <bb 17>; [1.01%]

  <bb 17> [0.02%]:
  # currentmin_228 = PHI <currentmin_35(16)>
  if (currentmin_228 != 0)
    goto <bb 164>; [34.00%]
  else
    goto <bb 20>; [66.00%]

  <bb 18> [0.76%]:
  # i_457 = PHI <i_38(19), i_438(164)>
  _39 = (long unsigned int) i_457;
  _40 = _39 * 808;
  _41 = arraybase_4(D) + _40;
  _42 = (int) j_455;
  _43 = *_41[_42];
  _44 = _43 - currentmin_228;
  *_41[_42] = _44;
  i_45 = i_457 + 1;

  <bb 19> [0.75%]:
  # i_38 = PHI <i_45(18)>
  if (i_38 != 101)
    goto <bb 18>; [98.99%]
  else
    goto <bb 20>; [1.01%]

  <bb 20> [0.02%]:
  j_46 = j_455 + 1;

  <bb 21> [0.02%]:
  # j_32 = PHI <j_46(20)>
  if (j_32 != 101)
    goto <bb 22>; [99.00%]
  else
    goto <bb 74>; [1.00%]

  <bb 22> [0.02%]:
  # j_455 = PHI <j_32(21), j_442(166)>
  goto <bb 165>; [100.00%]

  <bb 23> [0.13%]:
  # i_458 = PHI <i_49(24), i_404(151)>
  linesrow[i_458] = 0;
  i_50 = i_458 + 1;

  <bb 24> [0.13%]:
  # i_49 = PHI <i_50(23)>
  if (i_49 != 101)
    goto <bb 23>; [99.00%]
  else
    goto <bb 150>; [1.00%]

  <bb 25> [0.13%]:
  # i_459 = PHI <i_51(26), i_402(150)>
  linescol[i_459] = 0;
  i_52 = i_459 + 1;

  <bb 26> [0.13%]:
  # i_51 = PHI <i_52(25)>
  if (i_51 != 101)
    goto <bb 25>; [99.00%]
  else
    goto <bb 149>; [1.00%]

  <bb 27> [1.50%]:
  # j_461 = PHI <j_57(29), j_399(148)>
  _54 = (long unsigned int) i_460;
  _55 = _54 * 202;
  _56 = &assignedtableau + _55;
  _58 = *_56[j_461];
  if (_58 == 1)
    goto <bb 135>; [7.50%]
  else
    goto <bb 28>; [92.50%]

  <bb 28> [1.39%]:
  j_59 = j_461 + 1;

  <bb 29> [1.38%]:
  # j_57 = PHI <j_59(28)>
  if (j_57 != 101)
    goto <bb 27>; [98.91%]
  else
    goto <bb 134>; [1.09%]

  <bb 30> [0.13%]:
  i_61 = i_460 + 1;

  <bb 31> [0.13%]:
  # i_53 = PHI <i_61(30)>
  if (i_53 != 101)
    goto <bb 32>; [99.00%]
  else
    goto <bb 33>; [1.00%]

  <bb 32> [0.13%]:
  # i_460 = PHI <i_53(31), i_400(149)>
  goto <bb 148>; [100.00%]

  <bb 33> [0.01%]:
  goto <bb 147>; [100.00%]

  <bb 34> [0.85%]:
  # i_462 = PHI <i_62(40), i_397(147)>
  _63 = linesrow[i_462];
  if (_63 == 1)
    goto <bb 146>; [20.97%]
  else
    goto <bb 39>; [79.03%]

  <bb 35> [17.65%]:
  # j_463 = PHI <j_67(38), j_395(146)>
  _64 = (long unsigned int) i_462;
  _65 = _64 * 808;
  _66 = arraybase_4(D) + _65;
  _68 = *_66[j_463];
  if (_68 == 0)
    goto <bb 36>; [50.00%]
  else
    goto <bb 37>; [50.00%]

  <bb 36> [8.82%]:
  linescol[j_463] = 1;

  <bb 37> [17.65%]:
  j_69 = j_463 + 1;

  <bb 38> [17.64%]:
  # j_67 = PHI <j_69(37)>
  if (j_67 != 101)
    goto <bb 35>; [98.99%]
  else
    goto <bb 39>; [1.01%]

  <bb 39> [0.85%]:
  i_70 = i_462 + 1;

  <bb 40> [0.85%]:
  # i_62 = PHI <i_70(39)>
  if (i_62 != 101)
    goto <bb 34>; [98.99%]
  else
    goto <bb 145>; [1.01%]

  <bb 41> [0.85%]:
  # j_464 = PHI <j_71(48), j_392(145)>
  # newrows_474 = PHI <newrows_119(48), newrows_393(145)>
  _72 = linescol[j_464];
  if (_72 == 1)
    goto <bb 144>; [20.97%]
  else
    goto <bb 47>; [79.03%]

  <bb 42> [17.65%]:
  # i_465 = PHI <i_73(46), i_389(144)>
  # newrows_466 = PHI <newrows_79(46), newrows_390(144)>
  _74 = (long unsigned int) i_465;
  _75 = _74 * 202;
  _76 = &assignedtableau + _75;
  _77 = *_76[j_464];
  if (_77 == 1)
    goto <bb 43>; [34.00%]
  else
    goto <bb 45>; [66.00%]

  <bb 43> [6.00%]:
  _78 = linesrow[i_465];
  if (_78 != 1)
    goto <bb 44>; [66.00%]
  else
    goto <bb 45>; [34.00%]

  <bb 44> [3.96%]:
  linesrow[i_465] = 1;
  newrows_80 = newrows_466 + 1;

  <bb 45> [17.65%]:
  # newrows_118 = PHI <newrows_466(42), newrows_466(43), newrows_80(44)>
  i_81 = i_465 + 1;

  <bb 46> [17.64%]:
  # i_73 = PHI <i_81(45)>
  # newrows_79 = PHI <newrows_118(45)>
  if (i_73 != 101)
    goto <bb 42>; [98.99%]
  else
    goto <bb 47>; [1.01%]

  <bb 47> [0.85%]:
  # newrows_120 = PHI <newrows_474(41), newrows_79(46)>
  j_82 = j_464 + 1;

  <bb 48> [0.85%]:
  # j_71 = PHI <j_82(47)>
  # newrows_119 = PHI <newrows_120(47)>
  if (j_71 != 101)
    goto <bb 41>; [98.99%]
  else
    goto <bb 49>; [1.01%]

  <bb 49> [0.01%]:
  # newrows_295 = PHI <newrows_119(48)>
  if (newrows_295 != 0)
    goto <bb 33>; [85.00%]
  else
    goto <bb 143>; [15.00%]

  <bb 50> [0.13%]:
  # i_467 = PHI <i_84(57), i_387(143)>
  # smallest_475 = PHI <smallest_122(57), smallest_388(143)>
  _85 = linesrow[i_467];
  if (_85 != 0)
    goto <bb 142>; [34.00%]
  else
    goto <bb 56>; [66.00%]

  <bb 51> [4.29%]:
  # j_468 = PHI <j_86(55), j_385(142)>
  # smallest_469 = PHI <smallest_92(55), smallest_386(142)>
  _87 = linescol[j_468];
  if (_87 != 1)
    goto <bb 52>; [66.00%]
  else
    goto <bb 54>; [34.00%]

  <bb 52> [2.83%]:
  _88 = (long unsigned int) i_467;
  _89 = _88 * 808;
  _90 = arraybase_4(D) + _89;
  _91 = *_90[j_468];
  if (_91 < smallest_469)
    goto <bb 54>; [50.00%]
  else
    goto <bb 53>; [50.00%]

  <bb 53> [1.42%]:

  <bb 54> [4.29%]:
  # smallest_121 = PHI <smallest_469(51), smallest_469(53), _91(52)>
  j_93 = j_468 + 1;

  <bb 55> [4.30%]:
  # j_86 = PHI <j_93(54)>
  # smallest_92 = PHI <smallest_121(54)>
  if (j_86 != 101)
    goto <bb 51>; [98.99%]
  else
    goto <bb 56>; [1.01%]

  <bb 56> [0.13%]:
  # smallest_123 = PHI <smallest_475(50), smallest_92(55)>
  i_94 = i_467 + 1;

  <bb 57> [0.13%]:
  # i_84 = PHI <i_94(56)>
  # smallest_122 = PHI <smallest_123(56)>
  if (i_84 != 101)
    goto <bb 50>; [99.00%]
  else
    goto <bb 58>; [1.00%]

  <bb 58> [0.00%]:
  # smallest_1 = PHI <smallest_122(57)>
  goto <bb 141>; [100.00%]

  <bb 59> [0.13%]:
  # i_470 = PHI <i_95(65), i_383(141)>
  _96 = linesrow[i_470];
  if (_96 != 0)
    goto <bb 140>; [34.00%]
  else
    goto <bb 64>; [66.00%]

  <bb 60> [4.29%]:
  # j_471 = PHI <j_97(63), j_381(140)>
  _98 = linescol[j_471];
  if (_98 != 1)
    goto <bb 61>; [66.00%]
  else
    goto <bb 62>; [34.00%]

  <bb 61> [2.83%]:
  _99 = (long unsigned int) i_470;
  _100 = _99 * 808;
  _101 = arraybase_4(D) + _100;
  _102 = *_101[j_471];
  _104 = _102 - smallest_1;
  *_101[j_471] = _104;

  <bb 62> [4.29%]:
  j_105 = j_471 + 1;

  <bb 63> [4.30%]:
  # j_97 = PHI <j_105(62)>
  if (j_97 != 101)
    goto <bb 60>; [98.99%]
  else
    goto <bb 64>; [1.01%]

  <bb 64> [0.13%]:
  i_106 = i_470 + 1;

  <bb 65> [0.13%]:
  # i_95 = PHI <i_106(64)>
  if (i_95 != 101)
    goto <bb 59>; [99.00%]
  else
    goto <bb 139>; [1.00%]

  <bb 66> [0.13%]:
  # i_472 = PHI <i_107(72), i_379(139)>
  _108 = linesrow[i_472];
  if (_108 == 0)
    goto <bb 138>; [34.00%]
  else
    goto <bb 71>; [66.00%]

  <bb 67> [4.29%]:
  # j_473 = PHI <j_109(70), j_377(138)>
  _110 = linescol[j_473];
  if (_110 == 1)
    goto <bb 68>; [34.00%]
  else
    goto <bb 69>; [66.00%]

  <bb 68> [1.46%]:
  _111 = (long unsigned int) i_472;
  _112 = _111 * 808;
  _113 = arraybase_4(D) + _112;
  _114 = *_113[j_473];
  _115 = _114 + smallest_1;
  *_113[j_473] = _115;

  <bb 69> [4.29%]:
  j_116 = j_473 + 1;

  <bb 70> [4.30%]:
  # j_109 = PHI <j_116(69)>
  if (j_109 != 101)
    goto <bb 67>; [98.99%]
  else
    goto <bb 71>; [1.01%]

  <bb 71> [0.13%]:
  i_117 = i_472 + 1;

  <bb 72> [0.13%]:
  # i_107 = PHI <i_117(71)>
  if (i_107 != 101)
    goto <bb 66>; [99.00%]
  else
    goto <bb 73>; [1.00%]

  <bb 73> [0.00%]:
  linesrow ={v} {CLOBBER};
  linescol ={v} {CLOBBER};

  <bb 74> [0.00%]:
  goto <bb 163>; [100.00%]

  <bb 75> [14.85%]:
  # j_477 = PHI <j_128(76), j_434(162)>
  _125 = (long unsigned int) i_476;
  _126 = _125 * 202;
  _127 = &assignedtableau + _126;
  _129 = (int) j_477;
  *_127[_129] = 0;
  j_130 = j_477 + 1;

  <bb 76> [14.85%]:
  # j_128 = PHI <j_130(75)>
  if (j_128 != 101)
    goto <bb 75>; [98.99%]
  else
    goto <bb 77>; [1.01%]

  <bb 77> [0.15%]:
  i_131 = i_476 + 1;

  <bb 78> [0.15%]:
  # i_124 = PHI <i_131(77)>
  if (i_124 != 101)
    goto <bb 79>; [99.00%]
  else
    goto <bb 80>; [1.00%]

  <bb 79> [0.15%]:
  # i_476 = PHI <i_124(78), i_436(163)>
  goto <bb 162>; [100.00%]

  <bb 80> [0.01%]:
  # totnumassigns_231 = PHI <0(78), totnumassigns_145(112)>
  # selected_233 = PHI <0(78), selected_312(112)>
  goto <bb 161>; [100.00%]

  <bb 81> [99.00%]:
  # j_479 = PHI <j_136(85), j_426(160)>
  # numzeros_480 = PHI <numzeros_142(85), numzeros_427(160)>
  # selected_495 = PHI <selected_237(85), selected_428(160)>
  _133 = (long unsigned int) i_478;
  _134 = _133 * 808;
  _135 = arraybase_4(D) + _134;
  _137 = (int) j_479;
  _138 = *_135[_137];
  if (_138 == 0)
    goto <bb 82>; [50.00%]
  else
    goto <bb 84>; [50.00%]

  <bb 82> [49.50%]:
  _139 = _133 * 202;
  _140 = &assignedtableau + _139;
  _141 = *_140[_137];
  if (_141 == 0)
    goto <bb 83>; [50.00%]
  else
    goto <bb 84>; [50.00%]

  <bb 83> [24.75%]:
  numzeros_143 = numzeros_480 + 1;

  <bb 84> [99.00%]:
  # numzeros_235 = PHI <numzeros_480(81), numzeros_480(82), numzeros_143(83)>
  # selected_236 = PHI <selected_495(81), selected_495(82), _137(83)>
  j_144 = j_479 + 1;

  <bb 85> [99.00%]:
  # j_136 = PHI <j_144(84)>
  # numzeros_142 = PHI <numzeros_235(84)>
  # selected_237 = PHI <selected_236(84)>
  if (j_136 != 101)
    goto <bb 81>; [98.99%]
  else
    goto <bb 86>; [1.01%]

  <bb 86> [1.00%]:
  # numzeros_83 = PHI <numzeros_142(85)>
  # selected_6 = PHI <selected_237(85)>
  if (numzeros_83 == 1)
    goto <bb 87>; [20.97%]
  else
    goto <bb 93>; [79.03%]

  <bb 87> [0.21%]:
  numassigns_147 = numassigns_481 + 1;
  totnumassigns_149 = totnumassigns_482 + 1;
  _150 = (long unsigned int) i_478;
  _151 = _150 * 202;
  _152 = &assignedtableau + _151;
  *_152[selected_6] = 1;
  goto <bb 159>; [100.00%]

  <bb 88> [20.76%]:
  # k_483 = PHI <k_154(92), k_424(159)>
  if (i_478 != k_483)
    goto <bb 89>; [98.96%]
  else
    goto <bb 91>; [1.04%]

  <bb 89> [20.54%]:
  _155 = (long unsigned int) k_483;
  _156 = _155 * 808;
  _157 = arraybase_4(D) + _156;
  _158 = *_157[selected_6];
  if (_158 == 0)
    goto <bb 90>; [50.00%]
  else
    goto <bb 91>; [50.00%]

  <bb 90> [10.27%]:
  _159 = _155 * 202;
  _160 = &assignedtableau + _159;
  *_160[selected_6] = 2;

  <bb 91> [20.76%]:
  k_161 = k_483 + 1;

  <bb 92> [20.76%]:
  # k_154 = PHI <k_161(91)>
  if (k_154 != 101)
    goto <bb 88>; [98.99%]
  else
    goto <bb 93>; [1.01%]

  <bb 93> [1.00%]:
  # numassigns_239 = PHI <numassigns_481(86), numassigns_147(92)>
  # totnumassigns_240 = PHI <totnumassigns_482(86), totnumassigns_149(92)>
  i_162 = i_478 + 1;

  <bb 94> [1.00%]:
  # i_132 = PHI <i_162(93)>
  # numassigns_146 = PHI <numassigns_239(93)>
  # totnumassigns_148 = PHI <totnumassigns_240(93)>
  # selected_238 = PHI <selected_6(93)>
  if (i_132 != 101)
    goto <bb 95>; [98.99%]
  else
    goto <bb 96>; [1.01%]

  <bb 95> [1.00%]:
  # i_478 = PHI <i_132(94), i_429(161)>
  # numassigns_481 = PHI <numassigns_146(94), numassigns_430(161)>
  # totnumassigns_482 = PHI <totnumassigns_148(94), totnumassigns_431(161)>
  # selected_496 = PHI <selected_238(94), selected_432(161)>
  goto <bb 160>; [100.00%]

  <bb 96> [0.01%]:
  # numassigns_103 = PHI <numassigns_146(94)>
  # totnumassigns_182 = PHI <totnumassigns_148(94)>
  # selected_8 = PHI <selected_238(94)>
  goto <bb 158>; [100.00%]

  <bb 97> [99.00%]:
  # i_484 = PHI <i_163(101), i_416(157)>
  # numzeros_486 = PHI <numzeros_173(101), numzeros_417(157)>
  # selected_497 = PHI <selected_243(101), selected_418(157)>
  _164 = (long unsigned int) i_484;
  _165 = _164 * 808;
  _166 = arraybase_4(D) + _165;
  _168 = (int) j_485;
  _169 = *_166[_168];
  if (_169 == 0)
    goto <bb 98>; [50.00%]
  else
    goto <bb 100>; [50.00%]

  <bb 98> [49.50%]:
  _170 = _164 * 202;
  _171 = &assignedtableau + _170;
  _172 = *_171[_168];
  if (_172 == 0)
    goto <bb 99>; [50.00%]
  else
    goto <bb 100>; [50.00%]

  <bb 99> [24.75%]:
  numzeros_174 = numzeros_486 + 1;
  selected_175 = (int) i_484;

  <bb 100> [99.00%]:
  # numzeros_241 = PHI <numzeros_486(97), numzeros_486(98), numzeros_174(99)>
  # selected_242 = PHI <selected_497(97), selected_497(98), selected_175(99)>
  i_176 = i_484 + 1;

  <bb 101> [99.00%]:
  # i_163 = PHI <i_176(100)>
  # numzeros_173 = PHI <numzeros_241(100)>
  # selected_243 = PHI <selected_242(100)>
  if (i_163 != 101)
    goto <bb 97>; [98.99%]
  else
    goto <bb 102>; [1.01%]

  <bb 102> [1.00%]:
  # numzeros_153 = PHI <numzeros_173(101)>
  # selected_5 = PHI <selected_243(101)>
  if (numzeros_153 == 1)
    goto <bb 103>; [20.97%]
  else
    goto <bb 109>; [79.03%]

  <bb 103> [0.21%]:
  numassigns_179 = numassigns_487 + 1;
  totnumassigns_181 = totnumassigns_488 + 1;
  _183 = (long unsigned int) selected_5;
  _184 = _183 * 202;
  _185 = &assignedtableau + _184;
  _186 = (int) j_485;
  *_185[_186] = 1;
  goto <bb 156>; [100.00%]

  <bb 104> [20.76%]:
  # k_489 = PHI <k_187(108), k_414(156)>
  if (j_485 != k_489)
    goto <bb 105>; [98.96%]
  else
    goto <bb 107>; [1.04%]

  <bb 105> [20.54%]:
  _188 = _183 * 808;
  _189 = arraybase_4(D) + _188;
  _190 = (int) k_489;
  _191 = *_189[_190];
  if (_191 == 0)
    goto <bb 106>; [50.00%]
  else
    goto <bb 107>; [50.00%]

  <bb 106> [10.27%]:
  *_185[_190] = 2;

  <bb 107> [20.76%]:
  k_192 = k_489 + 1;

  <bb 108> [20.76%]:
  # k_187 = PHI <k_192(107)>
  if (k_187 != 101)
    goto <bb 104>; [98.99%]
  else
    goto <bb 109>; [1.01%]

  <bb 109> [1.00%]:
  # numassigns_245 = PHI <numassigns_487(102), numassigns_179(108)>
  # totnumassigns_246 = PHI <totnumassigns_488(102), totnumassigns_181(108)>
  j_193 = j_485 + 1;

  <bb 110> [1.00%]:
  # j_167 = PHI <j_193(109)>
  # numassigns_178 = PHI <numassigns_245(109)>
  # totnumassigns_180 = PHI <totnumassigns_246(109)>
  # selected_244 = PHI <selected_5(109)>
  if (j_167 != 101)
    goto <bb 111>; [98.99%]
  else
    goto <bb 112>; [1.01%]

  <bb 111> [1.00%]:
  # j_485 = PHI <j_167(110), j_419(158)>
  # numassigns_487 = PHI <numassigns_178(110), numassigns_420(158)>
  # totnumassigns_488 = PHI <totnumassigns_180(110), totnumassigns_421(158)>
  # selected_498 = PHI <selected_244(110), selected_422(158)>
  goto <bb 157>; [100.00%]

  <bb 112> [0.01%]:
  # numassigns_177 = PHI <numassigns_178(110)>
  # totnumassigns_145 = PHI <totnumassigns_180(110)>
  # selected_312 = PHI <selected_244(110)>
  if (numassigns_177 != 0)
    goto <bb 80>; [85.00%]
  else
    goto <bb 113>; [15.00%]

  <bb 113> [0.00%]:
  # totnumassigns_37 = PHI <totnumassigns_145(112)>
  if (totnumassigns_37 == 101)
    goto <bb 114>; [18.79%]
  else
    goto <bb 155>; [81.21%]

  <bb 114> [0.00%]:
  goto <bb 133>; [100.00%]

  <bb 115> [2.56%]:
  # j_491 = PHI <j_200(118), j_410(154)>
  _197 = (long unsigned int) i_490;
  _198 = _197 * 808;
  _199 = arraybase_4(D) + _198;
  _201 = (int) j_491;
  _202 = *_199[_201];
  if (_202 == 0)
    goto <bb 116>; [50.00%]
  else
    goto <bb 117>; [50.00%]

  <bb 116> [1.28%]:
  _203 = _197 * 202;
  _204 = &assignedtableau + _203;
  _205 = *_204[_201];
  if (_205 == 0)
    goto <bb 136>; [7.50%]
  else
    goto <bb 117>; [92.50%]

  <bb 117> [2.46%]:
  j_206 = j_491 + 1;

  <bb 118> [2.46%]:
  # j_200 = PHI <j_206(117)>
  if (j_200 != 101)
    goto <bb 115>; [98.95%]
  else
    goto <bb 137>; [1.05%]

  <bb 119> [6.03%]:
  # k_493 = PHI <k_213(123), k_408(153)>
  _214 = (int) k_493;
  if (selected_375 != _214)
    goto <bb 120>; [98.96%]
  else
    goto <bb 122>; [1.04%]

  <bb 120> [5.97%]:
  _215 = _208 * 808;
  _216 = arraybase_4(D) + _215;
  _217 = *_216[_214];
  if (_217 == 0)
    goto <bb 121>; [50.00%]
  else
    goto <bb 122>; [50.00%]

  <bb 121> [2.98%]:
  *_210[_214] = 2;

  <bb 122> [6.03%]:
  k_218 = k_493 + 1;

  <bb 123> [6.03%]:
  # k_213 = PHI <k_218(122)>
  if (k_213 != 101)
    goto <bb 119>; [98.99%]
  else
    goto <bb 152>; [1.01%]

  <bb 124> [6.03%]:
  # k_494 = PHI <k_219(128), k_406(152)>
  if (i_490 != k_494)
    goto <bb 125>; [98.96%]
  else
    goto <bb 127>; [1.04%]

  <bb 125> [5.97%]:
  _220 = (long unsigned int) k_494;
  _221 = _220 * 808;
  _222 = arraybase_4(D) + _221;
  _223 = *_222[selected_375];
  if (_223 == 0)
    goto <bb 126>; [50.00%]
  else
    goto <bb 127>; [50.00%]

  <bb 126> [2.98%]:
  _224 = _220 * 202;
  _225 = &assignedtableau + _224;
  *_225[selected_375] = 2;

  <bb 127> [6.03%]:
  k_226 = k_494 + 1;

  <bb 128> [6.03%]:
  # k_219 = PHI <k_226(127)>
  if (k_219 != 101)
    goto <bb 124>; [98.99%]
  else
    goto <bb 129>; [1.01%]

  <bb 129> [0.12%]:
  # totnumassigns_247 = PHI <totnumassigns_492(137), totnumassigns_212(128)>
  i_227 = i_490 + 1;

  <bb 130> [0.12%]:
  # i_196 = PHI <i_227(129)>
  # totnumassigns_211 = PHI <totnumassigns_247(129)>
  if (i_196 != 101)
    goto <bb 131>; [99.00%]
  else
    goto <bb 132>; [1.00%]

  <bb 131> [0.12%]:
  # i_490 = PHI <i_196(130), i_411(155)>
  # totnumassigns_492 = PHI <totnumassigns_211(130), totnumassigns_412(155)>
  goto <bb 154>; [100.00%]

  <bb 132> [0.00%]:
  # totnumassigns_24 = PHI <totnumassigns_211(130)>
  _229 = (int) totnumassigns_24;
  if (_229 != 101)
    goto <bb 151>; [85.00%]
  else
    goto <bb 133>; [15.00%]

  <bb 133> [0.00%]:
  assignedtableau ={v} {CLOBBER};
  return;

  <bb 134> [0.06%]:
  # numassigns_373 = PHI <0(29)>
  linesrow[i_460] = 1;
  goto <bb 30>; [100.00%]

  <bb 135> [0.11%]:
  # numassigns_374 = PHI <1(27)>
  goto <bb 30>; [100.00%]

  <bb 136> [0.10%]:
  # selected_375 = PHI <_201(116)>
  _208 = (long unsigned int) i_490;
  _209 = _208 * 202;
  _210 = &assignedtableau + _209;
  *_210[selected_375] = 1;
  totnumassigns_212 = totnumassigns_492 + 1;
  goto <bb 153>; [100.00%]

  <bb 137> [0.03%]:
  # selected_376 = PHI <-1(118)>
  goto <bb 129>; [100.00%]

  <bb 138> [0.04%]:
  # j_377 = PHI <0(66)>
  goto <bb 67>; [100.00%]

  <bb 139> [0.00%]:
  # i_379 = PHI <0(65)>
  goto <bb 66>; [100.00%]

  <bb 140> [0.04%]:
  # j_381 = PHI <0(59)>
  goto <bb 60>; [100.00%]

  <bb 141> [0.00%]:
  # i_383 = PHI <0(58)>
  goto <bb 59>; [100.00%]

  <bb 142> [0.04%]:
  # j_385 = PHI <0(50)>
  # smallest_386 = PHI <smallest_475(50)>
  goto <bb 51>; [100.00%]

  <bb 143> [0.00%]:
  # i_387 = PHI <0(49)>
  # smallest_388 = PHI <9223372036854775807(49)>
  goto <bb 50>; [100.00%]

  <bb 144> [0.18%]:
  # i_389 = PHI <0(41)>
  # newrows_390 = PHI <newrows_474(41)>
  goto <bb 42>; [100.00%]

  <bb 145> [0.01%]:
  # j_392 = PHI <0(40)>
  # newrows_393 = PHI <0(40)>
  goto <bb 41>; [100.00%]

  <bb 146> [0.18%]:
  # j_395 = PHI <0(34)>
  goto <bb 35>; [100.00%]

  <bb 147> [0.01%]:
  # i_397 = PHI <0(33)>
  goto <bb 34>; [100.00%]

  <bb 148> [0.13%]:
  # j_399 = PHI <0(32)>
  goto <bb 27>; [100.00%]

  <bb 149> [0.00%]:
  # i_400 = PHI <0(26)>
  goto <bb 32>; [100.00%]

  <bb 150> [0.00%]:
  # i_402 = PHI <0(24)>
  goto <bb 25>; [100.00%]

  <bb 151> [0.00%]:
  # i_404 = PHI <0(132)>
  goto <bb 23>; [100.00%]

  <bb 152> [0.06%]:
  # k_406 = PHI <0(123)>
  goto <bb 124>; [100.00%]

  <bb 153> [0.06%]:
  # k_408 = PHI <0(136)>
  goto <bb 119>; [100.00%]

  <bb 154> [0.12%]:
  # j_410 = PHI <0(131)>
  goto <bb 115>; [100.00%]

  <bb 155> [0.00%]:
  # i_411 = PHI <0(113)>
  # totnumassigns_412 = PHI <totnumassigns_37(113)>
  goto <bb 131>; [100.00%]

  <bb 156> [0.21%]:
  # k_414 = PHI <0(103)>
  goto <bb 104>; [100.00%]

  <bb 157> [1.00%]:
  # i_416 = PHI <0(111)>
  # numzeros_417 = PHI <0(111)>
  # selected_418 = PHI <selected_498(111)>
  goto <bb 97>; [100.00%]

  <bb 158> [0.01%]:
  # j_419 = PHI <0(96)>
  # numassigns_420 = PHI <numassigns_103(96)>
  # totnumassigns_421 = PHI <totnumassigns_182(96)>
  # selected_422 = PHI <selected_8(96)>
  goto <bb 111>; [100.00%]

  <bb 159> [0.21%]:
  # k_424 = PHI <0(87)>
  goto <bb 88>; [100.00%]

  <bb 160> [1.00%]:
  # j_426 = PHI <0(95)>
  # numzeros_427 = PHI <0(95)>
  # selected_428 = PHI <selected_496(95)>
  goto <bb 81>; [100.00%]

  <bb 161> [0.01%]:
  # i_429 = PHI <0(80)>
  # numassigns_430 = PHI <0(80)>
  # totnumassigns_431 = PHI <totnumassigns_231(80)>
  # selected_432 = PHI <selected_233(80)>
  goto <bb 95>; [100.00%]

  <bb 162> [0.15%]:
  # j_434 = PHI <0(79)>
  goto <bb 75>; [100.00%]

  <bb 163> [0.00%]:
  # i_436 = PHI <0(74)>
  goto <bb 79>; [100.00%]

  <bb 164> [0.01%]:
  # i_438 = PHI <0(17)>
  goto <bb 18>; [100.00%]

  <bb 165> [0.02%]:
  # i_440 = PHI <0(22)>
  # currentmin_441 = PHI <9223372036854775807(22)>
  goto <bb 13>; [100.00%]

  <bb 166> [0.00%]:
  # j_442 = PHI <0(11)>
  goto <bb 22>; [100.00%]

  <bb 167> [0.02%]:
  # j_444 = PHI <0(7)>
  goto <bb 8>; [100.00%]

  <bb 168> [0.02%]:
  # j_446 = PHI <0(12)>
  # currentmin_447 = PHI <9223372036854775807(12)>
  goto <bb 3>; [100.00%]

  <bb 169> [0.00%]:
  # i_448 = PHI <0(2)>
  goto <bb 12>; [100.00%]

}



;; Function DoBitfieldIteration (DoBitfieldIteration, funcdef_no=65, decl_uid=4548, cgraph_uid=65, symbol_order=90)

;; 7 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
;;
;; Loop 3
;;  header 20, latch 19
;;  depth 1, outer 0
;;  nodes: 20 19 9 12 15 18 16 17 13 14 10 11
;;
;; Loop 4
;;  header 12, latch 11
;;  depth 2, outer 3
;;  nodes: 12 11
;;
;; Loop 5
;;  header 15, latch 14
;;  depth 2, outer 3
;;  nodes: 15 14
;;
;; Loop 6
;;  header 18, latch 17
;;  depth 2, outer 3
;;  nodes: 18 17
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 20 }
;; 9 succs { 19 10 13 16 }
;; 10 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 11 19 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 14 19 }
;; 16 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 17 19 }
;; 19 succs { 20 }
;; 20 succs { 9 21 }
;; 21 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

i.39_113 -> { i.39_4 }
i_114 -> { i_39 }
i_115 -> { i_40 }
nbitops_116 -> { nbitops_46(D) }
bitoparraysize_117 -> { bitoparraysize_50(D) }
_118 -> { _71 }
nbits_119 -> { nbits_79 }
_120 -> { _84 }
nbits_121 -> { nbits_93 }
_122 -> { _98 }
nbits_123 -> { nbits_106 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 22
Number of blocks to update: 18 ( 82%)



Value ranges after VRP:

_1: [0, +INF]
_2: VARYING
_3: VARYING
i.39_4: [0, 2305843009213693951]
_5: VARYING
i.40_6: [0, +INF]
_7: [0, +INF]
_8: VARYING
_9: [0, +INF]
_10: VARYING
_11: [0, +INF]
_12: VARYING
_13: [0, 4294967295]
_14: VARYING
_15: [0, +INF]
_16: [0, 2]
i.42_17: [0, 1152921504606846975]
_18: [0, 18446744073709551600]
_19: [8, 18446744073709551608]
_20: VARYING
_21: VARYING
_22: VARYING
_23: VARYING
i.44_24: [0, 1152921504606846975]
_25: [0, 18446744073709551600]
_26: [8, 18446744073709551608]
_27: VARYING
_28: VARYING
_29: VARYING
_30: VARYING
i.46_31: [0, 1152921504606846975]
_32: [0, 18446744073709551600]
_33: [8, 18446744073709551608]
_34: VARYING
_35: VARYING
_36: VARYING
_37: VARYING
i_38: [0, 2305843009213693951]
i_39: [0, 1152921504606846976]
i_40: [0, 1152921504606846976]
.MEM_41: VARYING
.MEM_42: VARYING
.MEM_43: VARYING
.MEM_44: VARYING
nbitops_46(D): ~[0B, 0B]
bitoparraysize_50(D): VARYING
elapsed_52: VARYING
_54: VARYING
bitoparraybase_55(D): VARYING
bitarraybase_56(D): VARYING
i_57: [1, 1152921504606846976]
bitoffset_59: [0, 4294967295]
i_64: VARYING
i_66: [1, 2305843009213693952]
bit_addr_67: VARYING
bindex_68: [0, 288230376151711743]
bitnumb_69: [0, 63]
_70: [0, 2305843009213693944]
_71: VARYING
_72: VARYING
_73: [0, 63]
_74: VARYING
_75: [0, +INF]
_76: [0, +INF]
bit_addr_77: [0, +INF]
nbits_78: [0, _21]
nbits_79: [0, +INF]
bit_addr_80: VARYING
bindex_81: [0, 288230376151711743]
bitnumb_82: [0, 63]
_83: [0, 2305843009213693944]
_84: VARYING
_85: VARYING
_86: [0, 63]
_87: VARYING
_88: VARYING
_89: [0, +INF]
_90: [0, +INF]
bit_addr_91: [0, +INF]
nbits_92: [0, _28]
nbits_93: [0, +INF]
bit_addr_94: VARYING
bindex_95: [0, 288230376151711743]
bitnumb_96: [0, 63]
_97: [0, 2305843009213693944]
_98: VARYING
_99: VARYING
_100: [0, 63]
_101: VARYING
_102: [0, +INF]
_103: [0, +INF]
bit_addr_104: [0, +INF]
nbits_105: [0, _35]
nbits_106: [0, +INF]
.MEM_107: VARYING
.MEM_108: VARYING
.MEM_109: VARYING
i.39_113: [0, _3 + 18446744073709551615]  EQUIVALENCES: { i.39_4 } (1 elements)
i_114: [-INF, bitoparraysize_50(D) + -1]  EQUIVALENCES: { i_39 } (1 elements)
i_115: [0, 1152921504606846975]  EQUIVALENCES: { i_40 } (1 elements)
nbitops_116: ~[0B, 0B]  EQUIVALENCES: { nbitops_46(D) } (1 elements)
bitoparraysize_117: [-INF, 1152921504606846976]  EQUIVALENCES: { bitoparraysize_50(D) } (1 elements)
_118: ~[0B, 0B]  EQUIVALENCES: { _71 } (1 elements)
nbits_119: [0, 18446744073709551614]  EQUIVALENCES: { nbits_79 } (1 elements)
_120: ~[0B, 0B]  EQUIVALENCES: { _84 } (1 elements)
nbits_121: [0, 18446744073709551614]  EQUIVALENCES: { nbits_93 } (1 elements)
_122: ~[0B, 0B]  EQUIVALENCES: { _98 } (1 elements)
nbits_123: [0, 18446744073709551614]  EQUIVALENCES: { nbits_106 } (1 elements)


DoBitfieldIteration (farulong * bitarraybase, farulong * bitoparraybase, long int bitoparraysize, long unsigned int * nbitops)
{
  long unsigned int bindex;
  long unsigned int bitnumb;
  long unsigned int bit_addr;
  long unsigned int nbits;
  long unsigned int bindex;
  long unsigned int bitnumb;
  long unsigned int bit_addr;
  long unsigned int nbits;
  long unsigned int bindex;
  long unsigned int bitnumb;
  long unsigned int bit_addr;
  long unsigned int nbits;
  long unsigned int elapsed;
  long unsigned int bitoffset;
  long int i;
  long unsigned int _1;
  farulong * _2;
  long unsigned int _3;
  long unsigned int i.39_4;
  unsigned int _5;
  long unsigned int i.40_6;
  long unsigned int _7;
  farulong * _8;
  unsigned int _9;
  unsigned int _10;
  sizetype _11;
  farulong * _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long int _16;
  long unsigned int i.42_17;
  long unsigned int _18;
  sizetype _19;
  farulong * _20;
  long unsigned int _21;
  farulong * _22;
  long unsigned int _23;
  long unsigned int i.44_24;
  long unsigned int _25;
  sizetype _26;
  farulong * _27;
  long unsigned int _28;
  farulong * _29;
  long unsigned int _30;
  long unsigned int i.46_31;
  long unsigned int _32;
  sizetype _33;
  farulong * _34;
  long unsigned int _35;
  farulong * _36;
  long unsigned int _37;
  long unsigned int _54;
  long unsigned int _70;
  farulong * _71;
  long unsigned int _72;
  unsigned int _73;
  long int _74;
  long unsigned int _75;
  long unsigned int _76;
  long unsigned int _83;
  farulong * _84;
  long unsigned int _85;
  unsigned int _86;
  long int _87;
  long int _88;
  long unsigned int _89;
  long unsigned int _90;
  long unsigned int _97;
  farulong * _98;
  long unsigned int _99;
  unsigned int _100;
  long int _101;
  long unsigned int _102;
  long unsigned int _103;

  <bb 2> [10.59%]:
  *nbitops_46(D) = 0;
  randnum (13);
  goto <bb 4>; [100.00%]

  <bb 3> [60.00%]:
  _1 = i.39_4 * 8;
  _2 = bitarraybase_56(D) + _1;
  *_2 = 6148914691236517205;
  i_66 = i_38 + 1;

  <bb 4> [70.59%]:
  # i_38 = PHI <0(2), i_66(3)>
  _3 = global_bitopstruct.bitfieldarraysize;
  i.39_4 = (long unsigned int) i_38;
  if (_3 > i.39_4)
    goto <bb 3>; [85.00%]
  else
    goto <bb 5>; [15.00%]

  <bb 5> [10.59%]:
  randnum (13);
  goto <bb 7>; [100.00%]

  <bb 6> [60.00%]:
  _5 = abs_randwc (262140);
  bitoffset_59 = (long unsigned int) _5;
  i.40_6 = (long unsigned int) i_39;
  _7 = i.40_6 * 16;
  _8 = bitoparraybase_55(D) + _7;
  *_8 = bitoffset_59;
  _9 = 262140 - _5;
  _10 = abs_randwc (_9);
  _11 = _7 + 8;
  _12 = bitoparraybase_55(D) + _11;
  _13 = (long unsigned int) _10;
  *_12 = _13;
  _14 = *nbitops_46(D);
  _15 = _13 + _14;
  *nbitops_46(D) = _15;
  i_64 = i_39 + 1;

  <bb 7> [70.59%]:
  # i_39 = PHI <0(5), i_64(6)>
  if (i_39 < bitoparraysize_50(D))
    goto <bb 6>; [85.00%]
  else
    goto <bb 8>; [15.00%]

  <bb 8> [10.59%]:
  elapsed_52 = StartStopwatch ();
  goto <bb 20>; [100.00%]

  <bb 9> [60.00%]:
  _16 = i_40 % 3;
  switch (_16) <default: <L7> [25.00%], case 1: <L8> [25.00%], case 2: <L9> [25.00%]>

<L7> [15.00%]:
  i.42_17 = (long unsigned int) i_40;
  _18 = i.42_17 * 16;
  _19 = _18 + 8;
  _20 = bitoparraybase_55(D) + _19;
  _21 = *_20;
  _22 = bitoparraybase_55(D) + _18;
  _23 = *_22;
  goto <bb 12>; [100.00%]

  <bb 11> [85.00%]:
  bindex_68 = bit_addr_67 >> 6;
  bitnumb_69 = bit_addr_67 & 63;
  _70 = bindex_68 * 8;
  _71 = bitarraybase_56(D) + _70;
  _72 = *_71;
  _73 = (unsigned int) bitnumb_69;
  _74 = 1 << _73;
  _75 = (long unsigned int) _74;
  _76 = _72 | _75;
  *_71 = _76;
  bit_addr_77 = bit_addr_67 + 1;

  <bb 12> [100.00%]:
  # bit_addr_67 = PHI <_23(10), bit_addr_77(11)>
  # nbits_78 = PHI <_21(10), nbits_79(11)>
  nbits_79 = nbits_78 + 18446744073709551615;
  if (nbits_78 != 0)
    goto <bb 11>; [85.00%]
  else
    goto <bb 19> (<L10>); [15.00%]

<L8> [15.00%]:
  i.44_24 = (long unsigned int) i_40;
  _25 = i.44_24 * 16;
  _26 = _25 + 8;
  _27 = bitoparraybase_55(D) + _26;
  _28 = *_27;
  _29 = bitoparraybase_55(D) + _25;
  _30 = *_29;
  goto <bb 15>; [100.00%]

  <bb 14> [85.00%]:
  bindex_81 = bit_addr_80 >> 6;
  bitnumb_82 = bit_addr_80 & 63;
  _83 = bindex_81 * 8;
  _84 = bitarraybase_56(D) + _83;
  _85 = *_84;
  _86 = (unsigned int) bitnumb_82;
  _87 = 1 << _86;
  _88 = ~_87;
  _89 = (long unsigned int) _88;
  _90 = _85 & _89;
  *_84 = _90;
  bit_addr_91 = bit_addr_80 + 1;

  <bb 15> [100.00%]:
  # bit_addr_80 = PHI <_30(13), bit_addr_91(14)>
  # nbits_92 = PHI <_28(13), nbits_93(14)>
  nbits_93 = nbits_92 + 18446744073709551615;
  if (nbits_92 != 0)
    goto <bb 14>; [85.00%]
  else
    goto <bb 19> (<L10>); [15.00%]

<L9> [15.00%]:
  i.46_31 = (long unsigned int) i_40;
  _32 = i.46_31 * 16;
  _33 = _32 + 8;
  _34 = bitoparraybase_55(D) + _33;
  _35 = *_34;
  _36 = bitoparraybase_55(D) + _32;
  _37 = *_36;
  goto <bb 18>; [100.00%]

  <bb 17> [85.00%]:
  bindex_95 = bit_addr_94 >> 6;
  bitnumb_96 = bit_addr_94 & 63;
  _97 = bindex_95 * 8;
  _98 = bitarraybase_56(D) + _97;
  _99 = *_98;
  _100 = (unsigned int) bitnumb_96;
  _101 = 1 << _100;
  _102 = (long unsigned int) _101;
  _103 = _99 ^ _102;
  *_98 = _103;
  bit_addr_104 = bit_addr_94 + 1;

  <bb 18> [100.00%]:
  # bit_addr_94 = PHI <_37(16), bit_addr_104(17)>
  # nbits_105 = PHI <_35(16), nbits_106(17)>
  nbits_106 = nbits_105 + 18446744073709551615;
  if (nbits_105 != 0)
    goto <bb 17>; [85.00%]
  else
    goto <bb 19> (<L10>); [15.00%]

<L10> [60.00%]:
  i_57 = i_40 + 1;

  <bb 20> [70.59%]:
  # i_40 = PHI <0(8), i_57(19)>
  if (i_40 < bitoparraysize_50(D))
    goto <bb 9>; [85.00%]
  else
    goto <bb 21>; [15.00%]

  <bb 21> [10.59%]:
  _54 = StopStopwatch (elapsed_52);
  return _54;

}



;; Function stradjust (stradjust, funcdef_no=60, decl_uid=4523, cgraph_uid=60, symbol_order=85)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11
;;
;; Loop 1
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8 6 7 5
;; 2 succs { 3 4 }
;; 3 succs { 11 }
;; 4 succs { 9 }
;; 5 succs { 6 7 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 9 }
;; 9 succs { 5 10 }
;; 10 succs { 11 }
;; 11 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_59 -> { _3 }
_60 -> { _5 }
_61 -> { _28 }
_62 -> { _33 }
j_63 -> { j_39 }
i_64 -> { i_44(D) }
Incremental SSA update started at block: 2
Number of blocks in CFG: 12
Number of blocks to update: 9 ( 75%)



Value ranges after VRP:

_1: [0, 255]
_2: [0, +INF]
_3: VARYING
_4: VARYING
_5: VARYING
_6: VARYING
_7: [0, 255]
_8: [0, 255]
_9: [0, +INF]
_10: [0, +INF]
_11: [0, +INF]
_12: VARYING
_13: VARYING
_14: VARYING
_15: VARYING
_16: [0, 255]
_17: [0, +INF]
_18: [0, +INF]
_19: [0, +INF]
_20: VARYING
_21: VARYING
_22: VARYING
_23: [0, 255]
_24: [0, +INF]
_25: [0, +INF]
_26: VARYING
_27: [0, +INF]
_28: VARYING
_29: VARYING
_30: [0, 255]
_31: [0, +INF]
_32: [0, +INF]
_33: VARYING
_34: VARYING
_35: [0, 255]
_36: [0, +INF]
_37: VARYING
_38: VARYING
j_39: [0, +INF]
.MEM_40: VARYING
.MEM_41: VARYING
.MEM_42: VARYING
l_43(D): VARYING
i_44(D): VARYING
optrarray_45(D): VARYING
strarray_47(D): VARYING
direction_48: [-255, 255]
adjamount_49: [0, +INF]
nstrings_50(D): VARYING
nbytes_51: [0, +INF]
j_56: [0, +INF]
_58: [0, +INF]
_59: ~[0B, 0B]  EQUIVALENCES: { _3 } (1 elements)
_60: ~[0B, 0B]  EQUIVALENCES: { _5 } (1 elements)
_61: ~[0B, 0B]  EQUIVALENCES: { _28 } (1 elements)
_62: ~[0B, 0B]  EQUIVALENCES: { _33 } (1 elements)
j_63: [0, nstrings_50(D) + 18446744073709551615]  EQUIVALENCES: { j_39 } (1 elements)
i_64: ~[_9, _9]  EQUIVALENCES: { i_44(D) } (1 elements)


stradjust (farulong * optrarray, faruchar * strarray, long unsigned int nstrings, long unsigned int i, unsigned char l)
{
  unsigned char adjamount;
  int direction;
  long unsigned int j;
  long unsigned int nbytes;
  int _1;
  long unsigned int _2;
  farulong * _3;
  long unsigned int _4;
  faruchar * _5;
  unsigned char _6;
  int _7;
  int _8;
  long unsigned int _9;
  long unsigned int _10;
  sizetype _11;
  farulong * _12;
  long unsigned int _13;
  faruchar * _14;
  unsigned char _15;
  long unsigned int _16;
  long unsigned int _17;
  sizetype _18;
  sizetype _19;
  farulong * _20;
  long unsigned int _21;
  faruchar * _22;
  sizetype _23;
  sizetype _24;
  sizetype _25;
  faruchar * _26;
  long unsigned int _27;
  farulong * _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  farulong * _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  faruchar * _38;
  long unsigned int _58;

  <bb 2> [28.37%]:
  _1 = (int) l_43(D);
  _2 = i_44(D) * 8;
  _3 = optrarray_45(D) + _2;
  _4 = *_3;
  _5 = strarray_47(D) + _4;
  _6 = *_5;
  _7 = (int) _6;
  direction_48 = _1 - _7;
  _8 = ABS_EXPR <direction_48>;
  adjamount_49 = (unsigned char) _8;
  _9 = nstrings_50(D) + 18446744073709551615;
  if (_9 == i_44(D))
    goto <bb 3>; [47.12%]
  else
    goto <bb 4>; [52.88%]

  <bb 3> [13.37%]:
  *_5 = l_43(D);
  goto <bb 11>; [100.00%]

  <bb 4> [15.00%]:
  _10 = nstrings_50(D) * 8;
  _11 = _10 + 18446744073709551608;
  _12 = optrarray_45(D) + _11;
  _13 = *_12;
  _14 = strarray_47(D) + _13;
  _15 = *_14;
  _16 = (long unsigned int) _15;
  _17 = _13 + _16;
  _18 = i_44(D) + 1;
  _19 = _18 * 8;
  _20 = optrarray_45(D) + _19;
  _21 = *_20;
  _58 = _17 - _21;
  nbytes_51 = _58 + 1;
  _22 = strarray_47(D) + _21;
  _23 = (sizetype) l_43(D);
  _24 = _4 + _23;
  _25 = _24 + 1;
  _26 = strarray_47(D) + _25;
  MoveMemory (_26, _22, nbytes_51);
  goto <bb 9>; [100.00%]

  <bb 5> [85.00%]:
  if (direction_48 < 0)
    goto <bb 6>; [36.00%]
  else
    goto <bb 7>; [64.00%]

  <bb 6> [30.60%]:
  _27 = j_39 * 8;
  _28 = optrarray_45(D) + _27;
  _29 = *_28;
  _30 = (long unsigned int) _8;
  _31 = _29 - _30;
  *_28 = _31;
  goto <bb 8>; [100.00%]

  <bb 7> [54.40%]:
  _32 = j_39 * 8;
  _33 = optrarray_45(D) + _32;
  _34 = *_33;
  _35 = (long unsigned int) _8;
  _36 = _34 + _35;
  *_33 = _36;

  <bb 8> [85.00%]:
  j_56 = j_39 + 1;

  <bb 9> [100.00%]:
  # j_39 = PHI <_18(4), j_56(8)>
  if (j_39 < nstrings_50(D))
    goto <bb 5>; [85.00%]
  else
    goto <bb 10>; [15.00%]

  <bb 10> [15.00%]:
  _37 = *_3;
  _38 = strarray_47(D) + _37;
  *_38 = l_43(D);

  <bb 11> [28.37%]:
  return;

}



;; Function DoHuffIteration (DoHuffIteration, funcdef_no=92, decl_uid=4671, cgraph_uid=92, symbol_order=117)

;; 14 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 59 5 6 58 7 8 9 10 11 12 13 14 15 16 56 17 18 19 20 21 22 23 57 44 24 25 26 27 28 29 30 31 32 33 34 35 36 37 55 38 39 40 41 42 43 54 53 45 46 47 48 49 50 62 61 51 60 52
;;
;; Loop 1
;;  header 51, latch 61
;;  depth 1, outer 0
;;  nodes: 51 61 50 49 45 48 46 47 53 62 54 44 43 42 55 41 40 39 38 37 32 36 34 35 33 23 30 29 57 28 24 25 26 27 22 17 21 18 19 20 56 31 16 11 15 13 14 12 10 58 9 7 8 6 59 5 4 60 3
;;
;; Loop 10
;;  header 45, latch 62
;;  depth 2, outer 1
;;  nodes: 45 62 50 49 48 46 47
;;
;; Loop 11
;;  header 49, latch 48
;;  depth 3, outer 10
;;  nodes: 49 48 46 47
;;
;; Loop 9
;;  header 54, latch 43
;;  depth 2, outer 1
;;  nodes: 54 43 42 55 41 40 39 38 37 32 36 34 35 33
;;
;; Loop 13
;;  header 42, latch 41
;;  depth 3, outer 9
;;  nodes: 42 41 40 39 38
;;
;; Loop 12
;;  header 37, latch 36
;;  depth 3, outer 9
;;  nodes: 37 36 34 35 33
;;
;; Loop 6
;;  header 17, latch 31
;;  depth 2, outer 1
;;  nodes: 17 31 30 29 57 28 24 25 26 27 23 22 21 18 19 20
;;
;; Loop 8
;;  header 29, latch 28
;;  depth 3, outer 6
;;  nodes: 29 28 24 25 26 27
;;
;; Loop 7
;;  header 22, latch 21
;;  depth 3, outer 6
;;  nodes: 22 21 18 19 20
;;
;; Loop 5
;;  header 16, latch 15
;;  depth 2, outer 1
;;  nodes: 16 15 13 14 12
;;
;; Loop 4
;;  header 10, latch 9
;;  depth 2, outer 1
;;  nodes: 10 9 7 8
;;
;; Loop 3
;;  header 6, latch 5
;;  depth 2, outer 1
;;  nodes: 6 5
;;
;; Loop 2
;;  header 4, latch 3
;;  depth 2, outer 1
;;  nodes: 4 3
;; 2 succs { 51 }
;; 3 succs { 4 }
;; 4 succs { 3 59 }
;; 59 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 58 }
;; 58 succs { 10 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 10 }
;; 10 succs { 7 11 }
;; 11 succs { 16 }
;; 12 succs { 13 14 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 16 }
;; 16 succs { 12 56 }
;; 56 succs { 17 }
;; 17 succs { 22 }
;; 18 succs { 19 21 }
;; 19 succs { 20 21 }
;; 20 succs { 21 }
;; 21 succs { 22 }
;; 22 succs { 18 23 }
;; 23 succs { 44 57 }
;; 57 succs { 29 }
;; 44 succs { 54 }
;; 24 succs { 25 28 }
;; 25 succs { 26 28 }
;; 26 succs { 27 28 }
;; 27 succs { 28 }
;; 28 succs { 29 }
;; 29 succs { 24 30 }
;; 30 succs { 44 31 }
;; 31 succs { 17 }
;; 32 succs { 37 }
;; 33 succs { 34 35 }
;; 34 succs { 36 }
;; 35 succs { 36 }
;; 36 succs { 37 }
;; 37 succs { 33 55 }
;; 55 succs { 42 }
;; 38 succs { 39 40 }
;; 39 succs { 41 }
;; 40 succs { 41 }
;; 41 succs { 42 }
;; 42 succs { 38 43 }
;; 43 succs { 54 }
;; 54 succs { 32 53 }
;; 53 succs { 45 }
;; 45 succs { 49 }
;; 46 succs { 48 47 }
;; 47 succs { 48 }
;; 48 succs { 49 }
;; 49 succs { 46 50 }
;; 50 succs { 62 61 }
;; 62 succs { 45 }
;; 61 succs { 51 }
;; 51 succs { 60 52 }
;; 60 succs { 4 }
;; 52 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

root_45 -> { root_85 }
lowfreq2_46 -> { lowfreq2_89 }
lowfreq1_47 -> { lowfreq1_87 }
lowidx1_48 -> { lowidx1_91 }
_49 -> { _68 }
lowidx2_74 -> { lowidx2_93 }
bitoffset_195 -> { bitoffset_94 }
bitoffset_196 -> { bitoffset_95 }
bitoffset_197 -> { bitoffset_97 }
bitstringlen_198 -> { bitstringlen_99 }
Incremental SSA update started at block: 17
Number of blocks in CFG: 63
Number of blocks to update: 32 ( 51%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_199 -> { _3 }
_200 -> { _9 }
j.161_201 -> { j.161_12 }
_202 -> { _15 }
_203 -> { _22 }
_204 -> { _26 }
_205 -> { _31 }
_206 -> { _42 }
lowidx1_207 -> { lowidx1_48 }
_208 -> { _61 }
_209 -> { _64 }
_210 -> { _68 }
_211 -> { _69 }
lowidx2_212 -> { lowidx2_74 }
i_213 -> { i_76 }
i_214 -> { i_77 }
i_215 -> { i_78 }
i_216 -> { i_79 }
i_217 -> { i_80 }
i_218 -> { i_80 }
i_219 -> { i_80 }
root_220 -> { root_85 }
root_221 -> { root_85 }
nloops_222 -> { nloops_120 }
arraysize_223 -> { arraysize_124(D) }
bitstringlen_224 -> { bitstringlen_143 }
_225 -> { _166 }
_226 -> { _174 }
bitoffset_227 -> { bitoffset_197 }
Incremental SSA update started at block: 51
Number of blocks in CFG: 66
Number of blocks to update: 54 ( 82%)



Value ranges after VRP:

_1: [0, 255]
_2: [0, 5100]
_3: VARYING
_4: [0, +INF]
_5: VARYING
_6: VARYING
_7: ~[128, 18446744073709551487]
_8: [0, 18446744073709551596]
_9: VARYING
_10: VARYING
_11: VARYING
j.161_12: [0, 9223372036854775807]
_13: [0, 255]
_14: [0, 5100]
_15: VARYING
_16: VARYING
_17: VARYING
_18: VARYING
_19: VARYING
_20: [0, 511]
_21: [0, 10220]
_22: VARYING
_23: VARYING
_24: [0, 2147483647]
_25: [0, 42949672940]
_26: VARYING
_27: VARYING
_28: VARYING
_29: [0, 2147483646]
_30: [0, 42949672920]
_31: VARYING
_32: VARYING
_33: VARYING
_34: [0, 2147483647]
_35: [0, 42949672940]
_36: VARYING
_37: [0, 18446744073709551614]
_38: [0, +INF]
_39: VARYING
_40: [256, 2147483647]
_41: [5120, 42949672940]
_42: VARYING
_43: VARYING
i_44: [0, 0]
root_45: [255, 2147483646]  EQUIVALENCES: { root_85 } (1 elements)
lowfreq2_46: VARYING
lowfreq1_47: VARYING
lowidx1_48: [-1, +INF]
_49: ~[0B, 0B]  EQUIVALENCES: { _68 } (1 elements)
bitoffset_50: [0, 0]
.MEM_51: VARYING
_52: VARYING
_53: VARYING
_54: ~[2147483648, 18446744071562067967]
_55: [0, 18446744073709551596]
_56: VARYING
_57: VARYING
_58: ~[2147483648, 18446744071562067967]
_59: [0, 18446744073709551596]
_60: VARYING
_61: VARYING
_62: VARYING
_63: [0, +INF]
_64: [0, 2147483647]
_65: [0, +INF]
_66: ~[2147483648, 18446744071562067967]
_67: [0, 18446744073709551596]
_68: VARYING
_69: VARYING
_70: VARYING
textoffset.163_71: [0, 9223372036854775806]
_72: VARYING
_73: VARYING
lowidx2_74: [lowidx2_93, lowidx2_93]
nloops_75: [0, nloops_119(D)]
i_76: [0, 256]
i_77: [0, 256]
i_78: [0, 512]
i_79: [0, +INF]
i_80: [0, +INF]
i_81: [0, +INF]
i_82: VARYING
i_83: VARYING
j_84: [0, +INF]
root_85: [255, +INF]
lowfreq1_86: VARYING
lowfreq1_87: VARYING
lowfreq2_88: VARYING
lowfreq2_89: VARYING
lowidx1_90: [-1, +INF]
lowidx1_91: [-1, +INF]
lowidx2_92: VARYING
lowidx2_93: VARYING
bitoffset_94: [0, +INF(OVF)]
bitoffset_95: [0, +INF(OVF)]
bitoffset_96: [0, +INF]
bitoffset_97: [0, +INF]
textoffset_98: [0, 9223372036854775806]
bitstringlen_99: [0, 30]
bitstringlen_100: [0, 9223372036854775806]
c_101: VARYING
.MEM_102: VARYING
.MEM_103: VARYING
.MEM_104: VARYING
.MEM_105: VARYING
.MEM_106: VARYING
.MEM_107: VARYING
.MEM_108: VARYING
.MEM_109: VARYING
.MEM_110: VARYING
.MEM_111: VARYING
.MEM_112: VARYING
.MEM_113: VARYING
.MEM_114: VARYING
.MEM_115: VARYING
elapsed_118: VARYING
nloops_119(D): VARYING
nloops_120: [0, +INF]
_122: VARYING
arraysize_124(D): VARYING
hufftree_125(D): VARYING
root_126: [256, +INF]
i_133: [1, +INF]
decomparray_134(D): VARYING
textoffset_136: [1, +INF]
comparray_137(D): VARYING
_138: VARYING
i_139: VARYING
bitoffset_140: [1, +INF(OVF)]
plaintext_141(D): VARYING
c_142: [-128, 127]
bitstringlen_143: [-1, 9223372036854775805]
i_144: [1, +INF(OVF)]
bitoffset_145: [1, +INF(OVF)]
bitstringlen_148: [1, 31]
i_149: [1, +INF(OVF)]
i_154: [1, 512]
i_156: [1, 256]
j_158: [1, +INF(OVF)]
i_161: [1, 256]
byteoffset_162: [0, 536870911]
bitoffset.165_163: VARYING
bitnumb_164: [0, 7]
_165: [0, 536870911]
_166: VARYING
_167: VARYING
_168: VARYING
_169: [1, 128]
_170: ~[-127, 0]
_171: VARYING
_172: [0, +INF]
_173: [0, 536870911]
_174: VARYING
_175: VARYING
_176: VARYING
_177: [1, 128]
_178: ~[-127, 0]
_179: ~[-1, 126]
_180: VARYING
_181: [0, +INF]
byteoffset_182: [0, 536870911]
bitoffset.166_183: VARYING
bitnumb_184: [0, 7]
_185: [1, 128]
_186: [0, 536870911]
_187: VARYING
_188: VARYING
_189: [0, 255]
_190: [0, 128]
.MEM_191: VARYING
bitoffset_195: [0, +INF(OVF)]
bitoffset_196: [0, +INF(OVF)]
bitoffset_197: [0, +INF]
bitstringlen_198: [0, 30]
_199: ~[0B, 0B]  EQUIVALENCES: { _3 } (1 elements)
_200: ~[0B, 0B]  EQUIVALENCES: { _9 } (1 elements)
j.161_201: [0, arraysize_124(D) + 18446744073709551615]  EQUIVALENCES: { j.161_12 } (1 elements)
_202: ~[0B, 0B]  EQUIVALENCES: { _15 } (1 elements)
_203: ~[0B, 0B]  EQUIVALENCES: { _22 } (1 elements)
_204: ~[0B, 0B]  EQUIVALENCES: { _26 } (1 elements)
_205: ~[0B, 0B]  EQUIVALENCES: { _31 } (1 elements)
_206: ~[0B, 0B]  EQUIVALENCES: { _42 } (1 elements)
lowidx1_207: [0, +INF]  EQUIVALENCES: { lowidx1_48 } (1 elements)
_208: ~[-2, -2]  EQUIVALENCES: { _61 } (1 elements)
_209: [0, 2147483647]  EQUIVALENCES: { _64 } (1 elements)
_210: ~[0B, 0B]  EQUIVALENCES: { _68 } (1 elements)
_211: ~[-1, -1]  EQUIVALENCES: { _69 } (1 elements)
lowidx2_212: ~[-1, -1]  EQUIVALENCES: { lowidx2_74 } (1 elements)
i_213: [0, 255]  EQUIVALENCES: { i_76 } (1 elements)
i_214: [0, 255]  EQUIVALENCES: { i_77 } (1 elements)
i_215: [0, 511]  EQUIVALENCES: { i_78 } (1 elements)
i_216: [0, +INF]  EQUIVALENCES: { i_79 } (1 elements)
i_217: [0, 2147483646]  EQUIVALENCES: { i_80 } (1 elements)
i_218: ~[lowidx1_207, lowidx1_207]  EQUIVALENCES: { i_80 i_217 } (2 elements)
i_219: [0, 2147483646]  EQUIVALENCES: { lowidx1_48 i_80 lowidx1_207 i_217 } (4 elements)
root_220: [255, 2147483646]  EQUIVALENCES: { root_85 } (1 elements)
root_221: [255, 2147483646]  EQUIVALENCES: { root_85 root_220 } (2 elements)
nloops_222: [0, 18446744073709551614]  EQUIVALENCES: { nloops_120 } (1 elements)
arraysize_223: [0, 9223372036854775807]  EQUIVALENCES: { arraysize_124(D) } (1 elements)
bitstringlen_224: [0, 9223372036854775805]  EQUIVALENCES: { bitstringlen_143 } (1 elements)
_225: ~[0B, 0B]  EQUIVALENCES: { _166 } (1 elements)
_226: ~[0B, 0B]  EQUIVALENCES: { _174 } (1 elements)
bitoffset_227: [0, +INF]  EQUIVALENCES: { } (0 elements)


Simplified relational if (i_76 <= 255)
 into if (i_76 != 256)

Simplified relational if (i_77 <= 255)
 into if (i_77 != 256)

Simplified relational if (i_78 <= 511)
 into if (i_78 != 512)

Removing basic block 3
Removing basic block 7
Removing basic block 12
Removing basic block 18
Removing basic block 24
Removing basic block 56
Removing basic block 57
Removing basic block 58
Removing basic block 59
Removing basic block 60
Removing basic block 61
Removing basic block 62
Removing basic block 63
Removing basic block 64
Removing basic block 65

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

i_229 -> { i_80 }
lowfreq2_230 -> { lowfreq2_89 }
lowidx2_231 -> { lowidx2_93 }
i_232 -> { i_79 }
lowfreq1_233 -> { lowfreq1_87 }
lowidx1_234 -> { lowidx1_91 }
i_235 -> { i_78 }
.MEM_236 -> { .MEM_107 }
i_237 -> { i_77 }
.MEM_238 -> { .MEM_105 }
i_239 -> { i_76 }
.MEM_240 -> { .MEM_102 }
i_241 -> { i_76 }
i_242 -> { i_77 }
i_243 -> { i_78 }
i_244 -> { i_79 }
i_245 -> { i_80 }
lowfreq1_246 -> { lowfreq1_87 }
lowfreq2_247 -> { lowfreq2_89 }
lowidx1_248 -> { lowidx1_91 }
lowidx2_249 -> { lowidx2_93 }
.MEM_250 -> { .MEM_102 }
.MEM_251 -> { .MEM_105 }
.MEM_252 -> { .MEM_107 }
Incremental SSA update started at block: 60
Number of blocks in CFG: 61
Number of blocks to update: 32 ( 52%)


DoHuffIteration (farchar * plaintext, farchar * comparray, farchar * decomparray, long unsigned int arraysize, long unsigned int nloops, struct huff_node * hufftree)
{
  u32 byteoffset;
  int bitnumb;
  u32 byteoffset;
  int bitnumb;
  long unsigned int elapsed;
  char bitstring[30];
  int c;
  long int bitstringlen;
  long int textoffset;
  long int bitoffset;
  int lowidx2;
  int lowidx1;
  float lowfreq2;
  float lowfreq1;
  int root;
  long int j;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  struct huff_node * _3;
  unsigned char _4;
  farchar * _5;
  char _6;
  long unsigned int _7;
  long unsigned int _8;
  struct huff_node * _9;
  float _10;
  float _11;
  long unsigned int j.161_12;
  long unsigned int _13;
  long unsigned int _14;
  struct huff_node * _15;
  float _16;
  float _17;
  float _18;
  struct huff_node * _19;
  long unsigned int _20;
  long unsigned int _21;
  struct huff_node * _22;
  float _23;
  long unsigned int _24;
  long unsigned int _25;
  struct huff_node * _26;
  int _27;
  float _28;
  long unsigned int _29;
  long unsigned int _30;
  struct huff_node * _31;
  int _32;
  float _33;
  long unsigned int _34;
  long unsigned int _35;
  struct huff_node * _36;
  long unsigned int _37;
  long unsigned int _38;
  struct huff_node * _39;
  long unsigned int _40;
  long unsigned int _41;
  struct huff_node * _42;
  float _43;
  struct huff_node * _49;
  farchar * _52;
  char _53;
  long unsigned int _54;
  long unsigned int _55;
  struct huff_node * _56;
  int _57;
  long unsigned int _58;
  long unsigned int _59;
  struct huff_node * _60;
  int _61;
  char _62;
  unsigned int _63;
  long unsigned int _64;
  unsigned int _65;
  long unsigned int _66;
  long unsigned int _67;
  struct huff_node * _68;
  int _69;
  unsigned char _70;
  sizetype textoffset.163_71;
  farchar * _72;
  char _73;
  long unsigned int _122;
  long unsigned int _138;
  int bitoffset.165_163;
  sizetype _165;
  u8 * _166;
  unsigned char _167;
  signed char _168;
  int _169;
  signed char _170;
  signed char _171;
  unsigned char _172;
  sizetype _173;
  u8 * _174;
  unsigned char _175;
  signed char _176;
  int _177;
  signed char _178;
  signed char _179;
  signed char _180;
  unsigned char _181;
  int bitoffset.166_183;
  int _185;
  sizetype _186;
  u8 * _187;
  unsigned char _188;
  int _189;
  int _190;
  signed long _228;

  <bb 2> [0.18%]:
  elapsed_118 = StartStopwatch ();
  goto <bb 54>; [100.00%]

  <bb 3> [99.00%]:
  # i_241 = PHI <i_76(4), i_239(60)>
  _1 = (long unsigned int) i_241;
  _2 = _1 * 20;
  _3 = hufftree_125(D) + _2;
  _3->freq = 0.0;
  _4 = (unsigned char) i_241;
  _3->c = _4;
  i_161 = i_241 + 1;

  <bb 4> [99.00%]:
  # i_76 = PHI <i_161(3)>
  if (i_76 != 256)
    goto <bb 3>; [98.99%]
  else
    goto <bb 6>; [1.01%]

  <bb 5> [5.67%]:
  _5 = plaintext_141(D) + j.161_12;
  _6 = *_5;
  _7 = (long unsigned int) _6;
  _8 = _7 * 20;
  _9 = hufftree_125(D) + _8;
  _10 = _9->freq;
  _11 = _10 + 1.0e+0;
  _9->freq = _11;
  j_158 = j_84 + 1;

  <bb 6> [6.67%]:
  # j_84 = PHI <0(4), j_158(5)>
  j.161_12 = (long unsigned int) j_84;
  if (j.161_12 < arraysize_124(D))
    goto <bb 5>; [85.00%]
  else
    goto <bb 59>; [15.00%]

  <bb 7> [99.00%]:
  # i_242 = PHI <i_77(10), i_237(59)>
  _13 = (long unsigned int) i_242;
  _14 = _13 * 20;
  _15 = hufftree_125(D) + _14;
  _16 = _15->freq;
  if (_16 != 0.0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 8> [49.50%]:
  _228 = (signed long) arraysize_124(D);
  _17 = (float) _228;
  _18 = _16 / _17;
  _15->freq = _18;

  <bb 9> [99.00%]:
  i_156 = i_242 + 1;

  <bb 10> [99.00%]:
  # i_77 = PHI <i_156(9)>
  if (i_77 != 256)
    goto <bb 7>; [98.99%]
  else
    goto <bb 11>; [1.01%]

  <bb 11> [1.00%]:
  _19 = hufftree_125(D) + 5120;
  _138 = __builtin_object_size (_19, 0);
  __builtin_memset (_19, 0, 5120);
  goto <bb 58>; [100.00%]

  <bb 12> [99.00%]:
  # i_243 = PHI <i_78(16), i_235(58)>
  _20 = (long unsigned int) i_243;
  _21 = _20 * 20;
  _22 = hufftree_125(D) + _21;
  _23 = _22->freq;
  if (_23 == 0.0)
    goto <bb 13>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 13> [49.50%]:
  _22->parent = 32000;
  goto <bb 15>; [100.00%]

  <bb 14> [49.50%]:
  _22->right = -1;
  _22->left = -1;
  _22->parent = -1;

  <bb 15> [99.00%]:
  i_154 = i_243 + 1;

  <bb 16> [99.00%]:
  # i_78 = PHI <i_154(15)>
  if (i_78 != 512)
    goto <bb 12>; [98.99%]
  else
    goto <bb 17>; [1.01%]

  <bb 17> [6.93%]:
  # root_85 = PHI <255(16), root_126(32)>
  goto <bb 57>; [100.00%]

  <bb 18> [39.25%]:
  # i_244 = PHI <i_79(22), i_232(57)>
  # lowfreq1_246 = PHI <lowfreq1_87(22), lowfreq1_233(57)>
  # lowidx1_248 = PHI <lowidx1_91(22), lowidx1_234(57)>
  _24 = (long unsigned int) i_244;
  _25 = _24 * 20;
  _26 = hufftree_125(D) + _25;
  _27 = _26->parent;
  if (_27 < 0)
    goto <bb 19>; [36.00%]
  else
    goto <bb 21>; [64.00%]

  <bb 19> [14.13%]:
  _28 = _26->freq;
  if (_28 < lowfreq1_246)
    goto <bb 20>; [50.00%]
  else
    goto <bb 21>; [50.00%]

  <bb 20> [7.06%]:

  <bb 21> [39.25%]:
  # lowfreq1_86 = PHI <lowfreq1_246(18), lowfreq1_246(19), _28(20)>
  # lowidx1_90 = PHI <lowidx1_248(18), lowidx1_248(19), i_244(20)>
  i_149 = i_244 + 1;

  <bb 22> [39.25%]:
  # i_79 = PHI <i_149(21)>
  # lowfreq1_87 = PHI <lowfreq1_86(21)>
  # lowidx1_91 = PHI <lowidx1_90(21)>
  if (i_79 <= root_85)
    goto <bb 18>; [82.35%]
  else
    goto <bb 23>; [17.65%]

  <bb 23> [6.93%]:
  # lowfreq1_47 = PHI <lowfreq1_87(22)>
  # lowidx1_48 = PHI <lowidx1_91(22)>
  if (lowidx1_48 == -1)
    goto <bb 24>; [7.50%]
  else
    goto <bb 56>; [92.50%]

  <bb 24> [1.00%]:
  # root_45 = PHI <root_85(23), root_85(31)>
  goto <bb 46>; [100.00%]

  <bb 25> [36.31%]:
  # i_245 = PHI <i_80(30), i_229(56)>
  # lowfreq2_247 = PHI <lowfreq2_89(30), lowfreq2_230(56)>
  # lowidx2_249 = PHI <lowidx2_93(30), lowidx2_231(56)>
  _29 = (long unsigned int) i_245;
  _30 = _29 * 20;
  _31 = hufftree_125(D) + _30;
  _32 = _31->parent;
  if (_32 < 0)
    goto <bb 26>; [36.00%]
  else
    goto <bb 29>; [64.00%]

  <bb 26> [13.07%]:
  if (i_245 != lowidx1_48)
    goto <bb 27>; [98.96%]
  else
    goto <bb 29>; [1.04%]

  <bb 27> [12.93%]:
  _33 = _31->freq;
  if (_33 < lowfreq2_247)
    goto <bb 28>; [50.00%]
  else
    goto <bb 29>; [50.00%]

  <bb 28> [6.47%]:

  <bb 29> [36.31%]:
  # lowfreq2_88 = PHI <lowfreq2_247(25), lowfreq2_247(26), lowfreq2_247(27), _33(28)>
  # lowidx2_92 = PHI <lowidx2_249(25), lowidx2_249(26), lowidx2_249(27), i_245(28)>
  i_133 = i_245 + 1;

  <bb 30> [36.30%]:
  # i_80 = PHI <i_133(29)>
  # lowfreq2_89 = PHI <lowfreq2_88(29)>
  # lowidx2_93 = PHI <lowidx2_92(29)>
  if (i_80 <= root_85)
    goto <bb 25>; [82.35%]
  else
    goto <bb 31>; [17.65%]

  <bb 31> [6.41%]:
  # lowfreq2_46 = PHI <lowfreq2_89(30)>
  # lowidx2_74 = PHI <lowidx2_93(30)>
  if (lowidx2_74 == -1)
    goto <bb 24>; [7.50%]
  else
    goto <bb 32>; [92.50%]

  <bb 32> [5.93%]:
  root_126 = root_85 + 1;
  _34 = (long unsigned int) lowidx1_48;
  _35 = _34 * 20;
  _36 = hufftree_125(D) + _35;
  _36->parent = root_126;
  _37 = (long unsigned int) lowidx2_74;
  _38 = _37 * 20;
  _39 = hufftree_125(D) + _38;
  _39->parent = root_126;
  _40 = (long unsigned int) root_126;
  _41 = _40 * 20;
  _42 = hufftree_125(D) + _41;
  _43 = lowfreq1_47 + lowfreq2_46;
  _42->freq = _43;
  _42->left = lowidx1_48;
  _42->right = lowidx2_74;
  _42->parent = -2;
  goto <bb 17>; [100.00%]

  <bb 33> [5.67%]:
  _52 = plaintext_141(D) + _64;
  _53 = *_52;
  c_142 = (int) _53;
  goto <bb 38>; [100.00%]

  <bb 34> [32.11%]:
  _54 = (long unsigned int) _61;
  _55 = _54 * 20;
  _56 = hufftree_125(D) + _55;
  _57 = _56->left;
  if (_57 == c_101)
    goto <bb 35>; [34.00%]
  else
    goto <bb 36>; [66.00%]

  <bb 35> [10.92%]:
  bitstring[bitstringlen_99] = 48;
  goto <bb 37>; [100.00%]

  <bb 36> [21.19%]:
  bitstring[bitstringlen_99] = 49;

  <bb 37> [32.11%]:
  bitstringlen_148 = bitstringlen_99 + 1;

  <bb 38> [37.78%]:
  # bitstringlen_99 = PHI <0(33), bitstringlen_148(37)>
  # c_101 = PHI <c_142(33), _61(37)>
  _58 = (long unsigned int) c_101;
  _59 = _58 * 20;
  _60 = hufftree_125(D) + _59;
  _61 = _60->parent;
  if (_61 != -2)
    goto <bb 34>; [85.00%]
  else
    goto <bb 39>; [15.00%]

  <bb 39> [5.67%]:
  # bitstringlen_198 = PHI <bitstringlen_99(38)>
  goto <bb 44>; [100.00%]

  <bb 40> [32.11%]:
  _62 = bitstring[bitstringlen_143];
  _63 = (unsigned int) bitoffset_94;
  byteoffset_162 = _63 >> 3;
  bitoffset.165_163 = (int) bitoffset_94;
  bitnumb_164 = bitoffset.165_163 & 7;
  if (_62 == 49)
    goto <bb 41>; [34.00%]
  else
    goto <bb 42>; [66.00%]

  <bb 41> [10.92%]:
  _165 = (sizetype) byteoffset_162;
  _166 = comparray_137(D) + _165;
  _167 = *_166;
  _168 = (signed char) _167;
  _169 = 1 << bitnumb_164;
  _170 = (signed char) _169;
  _171 = _168 | _170;
  _172 = (unsigned char) _171;
  *_166 = _172;
  goto <bb 43>; [100.00%]

  <bb 42> [21.19%]:
  _173 = (sizetype) byteoffset_162;
  _174 = comparray_137(D) + _173;
  _175 = *_174;
  _176 = (signed char) _175;
  _177 = 1 << bitnumb_164;
  _178 = (signed char) _177;
  _179 = ~_178;
  _180 = _176 & _179;
  _181 = (unsigned char) _180;
  *_174 = _181;

  <bb 43> [32.11%]:
  bitoffset_145 = bitoffset_94 + 1;

  <bb 44> [37.78%]:
  # bitoffset_94 = PHI <bitoffset_95(39), bitoffset_145(43)>
  # bitstringlen_100 = PHI <bitstringlen_198(39), bitstringlen_143(43)>
  bitstringlen_143 = bitstringlen_100 + -1;
  if (bitstringlen_100 != 0)
    goto <bb 40>; [85.00%]
  else
    goto <bb 45>; [15.00%]

  <bb 45> [5.67%]:
  # bitoffset_195 = PHI <bitoffset_94(44)>
  i_144 = i_81 + 1;

  <bb 46> [6.67%]:
  # i_81 = PHI <0(24), i_144(45)>
  # bitoffset_95 = PHI <0(24), bitoffset_195(45)>
  _64 = (long unsigned int) i_81;
  if (_64 < arraysize_124(D))
    goto <bb 33>; [85.00%]
  else
    goto <bb 47>; [15.00%]

  <bb 47> [1.00%]:
  # bitoffset_196 = PHI <bitoffset_95(46)>

  <bb 48> [6.67%]:
  # bitoffset_96 = PHI <0(47), bitoffset_197(53)>
  # textoffset_98 = PHI <0(47), textoffset_136(53)>
  goto <bb 52>; [100.00%]

  <bb 49> [37.78%]:
  _65 = (unsigned int) bitoffset_97;
  byteoffset_182 = _65 >> 3;
  bitoffset.166_183 = (int) bitoffset_97;
  bitnumb_184 = bitoffset.166_183 & 7;
  _185 = 1 << bitnumb_184;
  _186 = (sizetype) byteoffset_182;
  _187 = comparray_137(D) + _186;
  _188 = *_187;
  _189 = (int) _188;
  _190 = _185 & _189;
  if (_190 == 0)
    goto <bb 51>; [50.00%]
  else
    goto <bb 50>; [50.00%]

  <bb 50> [18.89%]:
  i_139 = _68->right;

  <bb 51> [37.78%]:
  # i_82 = PHI <_69(49), i_139(50)>
  bitoffset_140 = bitoffset_97 + 1;

  <bb 52> [44.44%]:
  # i_83 = PHI <root_45(48), i_82(51)>
  # bitoffset_97 = PHI <bitoffset_96(48), bitoffset_140(51)>
  _66 = (long unsigned int) i_83;
  _67 = _66 * 20;
  _68 = hufftree_125(D) + _67;
  _69 = _68->left;
  if (_69 != -1)
    goto <bb 49>; [85.00%]
  else
    goto <bb 53>; [15.00%]

  <bb 53> [6.67%]:
  # _49 = PHI <_68(52)>
  # bitoffset_197 = PHI <bitoffset_97(52)>
  _70 = _49->c;
  textoffset.163_71 = (sizetype) textoffset_98;
  _72 = decomparray_134(D) + textoffset.163_71;
  _73 = (char) _70;
  *_72 = _73;
  textoffset_136 = textoffset_98 + 1;
  if (bitoffset_196 > bitoffset_197)
    goto <bb 48>; [85.00%]
  else
    goto <bb 54>; [15.00%]

  <bb 54> [1.18%]:
  # nloops_75 = PHI <nloops_119(D)(2), nloops_120(53)>
  nloops_120 = nloops_75 + 18446744073709551615;
  if (nloops_75 != 0)
    goto <bb 60>; [85.00%]
  else
    goto <bb 55>; [15.00%]

  <bb 55> [0.18%]:
  _122 = StopStopwatch (elapsed_118);
  bitstring ={v} {CLOBBER};
  return _122;

  <bb 56> [6.41%]:
  # i_229 = PHI <0(23)>
  # lowfreq2_230 = PHI <2.0e+0(23)>
  # lowidx2_231 = PHI <-1(23)>
  goto <bb 25>; [100.00%]

  <bb 57> [6.93%]:
  # i_232 = PHI <0(17)>
  # lowfreq1_233 = PHI <2.0e+0(17)>
  # lowidx1_234 = PHI <-1(17)>
  goto <bb 18>; [100.00%]

  <bb 58> [1.00%]:
  # i_235 = PHI <0(11)>
  goto <bb 12>; [100.00%]

  <bb 59> [1.00%]:
  # i_237 = PHI <0(6)>
  goto <bb 7>; [100.00%]

  <bb 60> [1.00%]:
  # i_239 = PHI <0(54)>
  goto <bb 3>; [100.00%]

}



;; Function DoNNetIteration (DoNNetIteration, funcdef_no=96, decl_uid=4703, cgraph_uid=96, symbol_order=121)

Created preheader block for loop 3
Created preheader block for loop 23
Created preheader block for loop 24
Created preheader block for loop 14
Created preheader block for loop 17
Created preheader block for loop 21
Created preheader block for loop 6
Created preheader block for loop 7
Created preheader block for loop 8
Created preheader block for loop 9
Created preheader block for loop 10
Created preheader block for loop 11
;; 29 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 190 187 7 8 9 10 188 185 11 12 13 14 186 15 16 17 18 19 20 184 21 22 23 24 25 183 182 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 180 69 70 71 72 73 181 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 179 191 177 189 178
;;
;; Loop 1
;;  header 177, latch 191
;;  depth 1, outer 0
;;  nodes
;;
;; Loop 2
;;  header 176, latch 175
;;  depth 2, outer 1
;;  nodes
;;
;; Loop 3
;;  header 75, latch 74
;;  depth 3, outer 2
;;  nodes: 75 74 73 180 72 71 70 181 68 67 69 63 64 65 66 62 58 59 60 61 57 53 54 55 56 52 48 49 50 51 47 43 44 45 46 42 38 39 40 41 37 33 34 35 36 32 29 30 31 28 26 182 27 25 21 24 23 22 183 20 16 19 18 17 184
;;
;; Loop 23
;;  header 73, latch 72
;;  depth 4, outer 3
;;  nodes: 73 72 71 70 181
;;
;; Loop 24
;;  header 71, latch 70
;;  depth 5, outer 23
;;  nodes: 71 70
;;
;; Loop 25
;;  header 68, latch 69
;;  depth 4, outer 3
;;  nodes: 68 69
;;
;; Loop 14
;;  header 26, latch 27
;;  depth 4, outer 3
;;  nodes: 26 27
;;
;; Loop 16
;;  header 25, latch 24
;;  depth 4, outer 3
;;  nodes: 25 24 23 22 183
;;
;; Loop 17
;;  header 23, latch 22
;;  depth 5, outer 16
;;  nodes: 23 22
;;
;; Loop 20
;;  header 20, latch 19
;;  depth 4, outer 3
;;  nodes: 20 19 18 17 184
;;
;; Loop 21
;;  header 18, latch 17
;;  depth 5, outer 20
;;  nodes: 18 17
;;
;; Loop 6
;;  header 14, latch 13
;;  depth 2, outer 1
;;  nodes: 14 13 12 11 186
;;
;; Loop 7
;;  header 12, latch 11
;;  depth 3, outer 6
;;  nodes: 12 11
;;
;; Loop 8
;;  header 10, latch 9
;;  depth 2, outer 1
;;  nodes: 10 9 8 7 188
;;
;; Loop 9
;;  header 8, latch 7
;;  depth 3, outer 8
;;  nodes: 8 7
;;
;; Loop 10
;;  header 6, latch 5
;;  depth 2, outer 1
;;  nodes: 6 5 4 3 190
;;
;; Loop 11
;;  header 4, latch 3
;;  depth 3, outer 10
;;  nodes: 4 3
;; 2 succs { 177 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 190 187 }
;; 190 succs { 4 }
;; 187 succs { 10 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 10 }
;; 10 succs { 188 185 }
;; 188 succs { 8 }
;; 185 succs { 14 }
;; 11 succs { 12 }
;; 12 succs { 11 13 }
;; 13 succs { 14 }
;; 14 succs { 186 15 }
;; 186 succs { 12 }
;; 15 succs { 176 }
;; 16 succs { 20 }
;; 17 succs { 18 }
;; 18 succs { 17 19 }
;; 19 succs { 20 }
;; 20 succs { 184 21 }
;; 184 succs { 18 }
;; 21 succs { 25 }
;; 22 succs { 23 }
;; 23 succs { 22 24 }
;; 24 succs { 25 }
;; 25 succs { 183 182 }
;; 183 succs { 23 }
;; 182 succs { 26 }
;; 26 succs { 27 28 }
;; 27 succs { 26 }
;; 28 succs { 31 29 }
;; 29 succs { 30 32 }
;; 30 succs { 32 }
;; 31 succs { 32 }
;; 32 succs { 35 33 }
;; 33 succs { 34 37 }
;; 34 succs { 37 }
;; 35 succs { 36 37 }
;; 36 succs { 37 }
;; 37 succs { 40 38 }
;; 38 succs { 39 42 }
;; 39 succs { 42 }
;; 40 succs { 41 42 }
;; 41 succs { 42 }
;; 42 succs { 45 43 }
;; 43 succs { 44 47 }
;; 44 succs { 47 }
;; 45 succs { 46 47 }
;; 46 succs { 47 }
;; 47 succs { 50 48 }
;; 48 succs { 49 52 }
;; 49 succs { 52 }
;; 50 succs { 51 52 }
;; 51 succs { 52 }
;; 52 succs { 55 53 }
;; 53 succs { 54 57 }
;; 54 succs { 57 }
;; 55 succs { 56 57 }
;; 56 succs { 57 }
;; 57 succs { 60 58 }
;; 58 succs { 59 62 }
;; 59 succs { 62 }
;; 60 succs { 61 62 }
;; 61 succs { 62 }
;; 62 succs { 65 63 }
;; 63 succs { 64 67 }
;; 64 succs { 67 }
;; 65 succs { 66 67 }
;; 66 succs { 67 }
;; 67 succs { 68 }
;; 68 succs { 69 180 }
;; 180 succs { 73 }
;; 69 succs { 68 }
;; 70 succs { 71 }
;; 71 succs { 70 72 }
;; 72 succs { 73 }
;; 73 succs { 181 74 }
;; 181 succs { 71 }
;; 74 succs { 75 }
;; 75 succs { 16 76 }
;; 76 succs { 77 108 }
;; 77 succs { 78 79 }
;; 78 succs { 79 }
;; 79 succs { 80 108 }
;; 80 succs { 81 82 }
;; 81 succs { 82 }
;; 82 succs { 83 108 }
;; 83 succs { 84 85 }
;; 84 succs { 85 }
;; 85 succs { 86 108 }
;; 86 succs { 87 88 }
;; 87 succs { 88 }
;; 88 succs { 89 108 }
;; 89 succs { 90 91 }
;; 90 succs { 91 }
;; 91 succs { 92 108 }
;; 92 succs { 93 94 }
;; 93 succs { 94 }
;; 94 succs { 95 108 }
;; 95 succs { 96 97 }
;; 96 succs { 97 }
;; 97 succs { 98 108 }
;; 98 succs { 99 100 }
;; 99 succs { 100 }
;; 100 succs { 101 108 }
;; 101 succs { 102 103 }
;; 102 succs { 103 }
;; 103 succs { 104 108 }
;; 104 succs { 105 106 }
;; 105 succs { 106 }
;; 106 succs { 107 108 }
;; 107 succs { }
;; 108 succs { 109 172 }
;; 109 succs { 110 111 }
;; 110 succs { 111 }
;; 111 succs { 112 114 }
;; 112 succs { 116 113 }
;; 113 succs { 174 }
;; 114 succs { 116 115 }
;; 115 succs { 175 }
;; 116 succs { 117 118 }
;; 117 succs { 118 }
;; 118 succs { 119 121 }
;; 119 succs { 122 120 }
;; 120 succs { 174 }
;; 121 succs { 122 173 }
;; 122 succs { 123 124 }
;; 123 succs { 124 }
;; 124 succs { 125 127 }
;; 125 succs { 128 126 }
;; 126 succs { 174 }
;; 127 succs { 128 173 }
;; 128 succs { 129 130 }
;; 129 succs { 130 }
;; 130 succs { 131 133 }
;; 131 succs { 134 132 }
;; 132 succs { 174 }
;; 133 succs { 134 173 }
;; 134 succs { 135 136 }
;; 135 succs { 136 }
;; 136 succs { 137 139 }
;; 137 succs { 140 138 }
;; 138 succs { 174 }
;; 139 succs { 140 173 }
;; 140 succs { 141 142 }
;; 141 succs { 142 }
;; 142 succs { 143 145 }
;; 143 succs { 146 144 }
;; 144 succs { 174 }
;; 145 succs { 146 173 }
;; 146 succs { 147 148 }
;; 147 succs { 148 }
;; 148 succs { 149 151 }
;; 149 succs { 152 150 }
;; 150 succs { 174 }
;; 151 succs { 152 173 }
;; 152 succs { 153 154 }
;; 153 succs { 154 }
;; 154 succs { 155 157 }
;; 155 succs { 158 156 }
;; 156 succs { 174 }
;; 157 succs { 158 173 }
;; 158 succs { 159 160 }
;; 159 succs { 160 }
;; 160 succs { 161 162 }
;; 161 succs { 162 }
;; 162 succs { 163 173 }
;; 163 succs { 164 165 }
;; 164 succs { 165 }
;; 165 succs { 166 168 }
;; 166 succs { 169 167 }
;; 167 succs { 174 }
;; 168 succs { 169 173 }
;; 169 succs { 170 171 }
;; 170 succs { 171 }
;; 171 succs { }
;; 172 succs { 175 }
;; 173 succs { 174 175 }
;; 174 succs { 175 }
;; 175 succs { 176 }
;; 176 succs { 179 191 }
;; 179 succs { 75 }
;; 191 succs { 177 }
;; 177 succs { 189 178 }
;; 189 succs { 6 }
;; 178 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

numpats.187_97 -> { numpats.187_3 }
sum_944 -> { sum_94 }
error_948 -> { error_166 }
result_952 -> { result_282 }
Incremental SSA update started at block: 75
Number of blocks in CFG: 192
Number of blocks to update: 50 ( 26%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

numpats.187_380 -> { numpats.187_97 }
numpats.187_394 -> { numpats.187_97 }
numpats.187_395 -> { numpats.187_97 }
numpats.187_396 -> { numpats.187_97 }
numpats.187_410 -> { numpats.187_97 }
i_411 -> { i_103 }
j_412 -> { j_104 }
neurode_426 -> { neurode_128 }
weight_427 -> { weight_131 }
neurode_428 -> { neurode_143 }
numpats.187_956 -> { numpats.187_3 }
patt_960 -> { patt_9 }
i_964 -> { i_35 }
j_968 -> { j_36 }
neurode_972 -> { neurode_48 }
i_985 -> { i_49 }
neurode_989 -> { neurode_57 }
i_993 -> { i_58 }
neurode_997 -> { neurode_75 }
neurode_1001 -> { neurode_89 }
i_1005 -> { i_90 }
numpats.187_1009 -> { numpats.187_97 }
numpats.187_1013 -> { numpats.187_97 }
numpats.187_1026 -> { numpats.187_97 }
numpats.187_1030 -> { numpats.187_97 }
numpats.187_1034 -> { numpats.187_97 }
numpats.187_1038 -> { numpats.187_97 }
numpats.187_1042 -> { numpats.187_97 }
numpats.187_1046 -> { numpats.187_97 }
numpats.187_1050 -> { numpats.187_97 }
numpats.187_1054 -> { numpats.187_97 }
numpats.187_1067 -> { numpats.187_97 }
numpats.187_1071 -> { numpats.187_97 }
numpats.187_1075 -> { numpats.187_97 }
numpats.187_1079 -> { numpats.187_97 }
numpats.187_1083 -> { numpats.187_97 }
numpats.187_1087 -> { numpats.187_97 }
numpats.187_1091 -> { numpats.187_97 }
numpats.187_1095 -> { numpats.187_97 }
numpats.187_1108 -> { numpats.187_97 }
numpats.187_1112 -> { numpats.187_97 }
numpats.187_1116 -> { numpats.187_97 }
numpats.187_1120 -> { numpats.187_97 }
numpats.187_1124 -> { numpats.187_97 }
numpats.187_1128 -> { numpats.187_97 }
numpats.187_1132 -> { numpats.187_97 }
numpats.187_1136 -> { numpats.187_97 }
Incremental SSA update started at block: 6
Number of blocks in CFG: 205
Number of blocks to update: 110 ( 54%)



Value ranges after VRP:

iteration_count.186_1: VARYING
_2: VARYING
numpats.187_3: VARYING
numpasses.188_4: VARYING
_5: VARYING
result_6: [0, 1]
learned.189_7: VARYING
nloops_8: [0, nloops_16(D)]
patt_9: [0, 10]
.MEM_10: VARYING
.MEM_11: VARYING
.MEM_12: VARYING
elapsed_15: VARYING
nloops_16(D): VARYING
nloops_17: [0, +INF]
_19: VARYING
_20: VARYING
error_21: [0, 1]
result_30: [0, 1]
patt_32: VARYING
i_35: [0, 8]
j_36: [0, 35]
j_37: [1, 35]
i_38: [1, 8]
_43: VARYING
value_44: VARYING
_45: VARYING
value_46: VARYING
_47: VARYING
neurode_48: [0, 8]
i_49: [0, 35]
i_50: [1, 35]
neurode_51: [1, 8]
_52: VARYING
value_53: VARYING
_54: VARYING
value_55: VARYING
_56: VARYING
neurode_57: [0, 8]
i_58: [0, 8]
i_59: [1, 8]
neurode_60: [1, 8]
result_72: [0, 1]
neurode_75: [0, 8]
_83: VARYING
_84: VARYING
_85: VARYING
_86: VARYING
sum_87: VARYING
neurode_88: [1, 8]
neurode_89: [0, 8]
i_90: [0, 35]
_91: VARYING
_92: VARYING
_93: VARYING
sum_94: VARYING
sum_95: VARYING
i_96: [1, 35]
numpats.187_97: [-INF, 10]  EQUIVALENCES: { numpats.187_3 } (1 elements)
_98: VARYING
_99: VARYING
_100: VARYING
sum_101: VARYING
neurode_102: [1, 8]
i_103: [0, 8]
j_104: [0, 35]
_105: VARYING
j_106: [1, 35]
i_107: [1, 8]
_124: VARYING
neurode_128: [0, 8]
_129: VARYING
_130: VARYING
weight_131: [0, 35]
_132: VARYING
delta_133: VARYING
_134: VARYING
_135: VARYING
delta_136: VARYING
_137: VARYING
_138: VARYING
_139: VARYING
_140: VARYING
weight_141: [1, 35]
neurode_142: [1, 8]
neurode_143: [0, 8]
neurode_157: [1, 8]
result_165: [0, 1]
error_166: VARYING
_168: VARYING
sum_169: VARYING
_170: VARYING
error_174: [0, 1]
result_175: [-1, 1]
result_181: [0, 1]
.MEM_182: VARYING
.MEM_183: VARYING
.MEM_184: VARYING
.MEM_185: VARYING
.MEM_186: VARYING
.MEM_187: VARYING
.MEM_190: VARYING
.MEM_191: VARYING
.MEM_194: VARYING
.MEM_195: VARYING
.MEM_199: VARYING
.MEM_200: VARYING
.MEM_201: VARYING
error_204: [1, 1]
result_233: [0, 1]
_234: VARYING
error_235: [0, 1]
result_240: [0, 1]
_241: VARYING
error_242: [0, 1]
result_247: [0, 1]
_248: VARYING
error_249: [0, 1]
result_254: [0, 1]
_255: VARYING
error_256: [0, 1]
result_261: [0, 1]
_262: VARYING
error_263: [0, 1]
result_268: [0, 1]
_269: VARYING
error_270: [0, 1]
result_275: [0, 1]
_276: VARYING
error_277: [0, 1]
result_282: [0, 1]
_283: VARYING
error_284: [0, 1]
error_289: [1, 1]
_290: VARYING
error_291: VARYING
_292: VARYING
sum_293: VARYING
result_298: [0, 1]
_299: VARYING
error_300: VARYING
_301: VARYING
sum_302: VARYING
error_307: [1, 1]
_308: VARYING
error_309: VARYING
_310: VARYING
sum_311: VARYING
error_316: [1, 1]
_317: VARYING
error_318: VARYING
_319: VARYING
sum_320: VARYING
result_325: [0, 1]
_326: VARYING
error_327: VARYING
_328: VARYING
sum_329: VARYING
error_334: [1, 1]
_335: VARYING
error_336: VARYING
_337: VARYING
sum_338: VARYING
error_343: [1, 1]
_344: VARYING
error_345: VARYING
_346: VARYING
sum_347: VARYING
result_352: [0, 1]
_353: VARYING
error_354: VARYING
_355: VARYING
sum_356: VARYING
error_361: [1, 1]
_362: VARYING
error_363: VARYING
_364: VARYING
sum_365: VARYING
error_370: [1, 1]
_371: VARYING
error_372: VARYING
_373: VARYING
sum_374: VARYING
.MEM_377: VARYING
_378: VARYING
_379: VARYING
numpats.187_380: [6, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1120 numpats.187_1124 numpats.187_1128 numpats.187_1132 numpats.187_1136 } (7 elements)
delta_381: VARYING
_382: VARYING
_383: VARYING
delta_384: VARYING
_385: VARYING
_386: VARYING
_388: VARYING
_389: VARYING
numpats.187_394: [7, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_380 numpats.187_1120 numpats.187_1124 numpats.187_1128 numpats.187_1132 numpats.187_1136 } (8 elements)
numpats.187_395: [8, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_380 numpats.187_394 numpats.187_1120 numpats.187_1124 numpats.187_1128 numpats.187_1132 numpats.187_1136 } (9 elements)
numpats.187_396: [9, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_380 numpats.187_394 numpats.187_395 numpats.187_1120 numpats.187_1124 numpats.187_1128 numpats.187_1132 numpats.187_1136 } (10 elements)
delta_397: VARYING
_398: VARYING
_399: VARYING
delta_400: VARYING
_401: VARYING
_402: VARYING
_404: VARYING
_405: VARYING
numpats.187_410: [10, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_380 numpats.187_394 numpats.187_395 numpats.187_396 numpats.187_1120 numpats.187_1124 numpats.187_1128 numpats.187_1132 numpats.187_1136 } (11 elements)
i_411: [0, 7]  EQUIVALENCES: { i_103 } (1 elements)
j_412: [0, 34]  EQUIVALENCES: { j_104 } (1 elements)
delta_413: VARYING
_414: VARYING
_415: VARYING
delta_416: VARYING
_417: VARYING
_418: VARYING
_420: VARYING
_421: VARYING
neurode_426: [0, 7]  EQUIVALENCES: { neurode_128 } (1 elements)
weight_427: [0, 34]  EQUIVALENCES: { weight_131 } (1 elements)
neurode_428: [0, 7]  EQUIVALENCES: { neurode_143 } (1 elements)
delta_429: VARYING
_430: VARYING
_431: VARYING
delta_432: VARYING
_433: VARYING
_434: VARYING
_436: VARYING
_437: VARYING
delta_445: VARYING
_446: VARYING
_447: VARYING
delta_448: VARYING
_449: VARYING
_450: VARYING
_452: VARYING
_453: VARYING
delta_461: VARYING
_462: VARYING
_463: VARYING
delta_464: VARYING
_465: VARYING
_466: VARYING
_468: VARYING
_469: VARYING
delta_477: VARYING
_478: VARYING
_479: VARYING
delta_480: VARYING
_481: VARYING
_482: VARYING
_484: VARYING
_485: VARYING
delta_493: VARYING
_494: VARYING
_495: VARYING
delta_496: VARYING
_497: VARYING
_498: VARYING
_500: VARYING
_501: VARYING
error_561: [1, 1]
error_562: [1, 1]
.MEM_563: VARYING
_564: VARYING
_565: VARYING
_566: VARYING
sum_568: VARYING
sum_569: VARYING
_570: VARYING
tot_error_571: VARYING
sum_572: VARYING
_578: VARYING
_579: VARYING
_580: VARYING
sum_582: VARYING
sum_583: VARYING
_584: VARYING
tot_error_585: VARYING
sum_586: VARYING
_592: VARYING
_593: VARYING
_594: VARYING
sum_596: VARYING
sum_597: VARYING
_598: VARYING
tot_error_599: VARYING
sum_600: VARYING
_606: VARYING
_607: VARYING
_608: VARYING
sum_610: VARYING
sum_611: VARYING
_612: VARYING
tot_error_613: VARYING
sum_614: VARYING
_620: VARYING
_621: VARYING
_622: VARYING
sum_624: VARYING
sum_625: VARYING
_626: VARYING
tot_error_627: VARYING
sum_628: VARYING
_634: VARYING
_635: VARYING
_636: VARYING
sum_638: VARYING
sum_639: VARYING
_640: VARYING
tot_error_641: VARYING
sum_642: VARYING
_648: VARYING
_649: VARYING
_650: VARYING
sum_652: VARYING
sum_653: VARYING
_654: VARYING
tot_error_655: VARYING
sum_656: VARYING
_662: VARYING
_663: VARYING
_664: VARYING
sum_666: VARYING
sum_667: VARYING
_668: VARYING
tot_error_669: VARYING
sum_670: VARYING
_674: VARYING
_675: VARYING
_676: VARYING
sum_677: VARYING
_681: VARYING
_682: VARYING
_683: VARYING
sum_684: VARYING
_688: VARYING
_689: VARYING
_690: VARYING
sum_691: VARYING
_695: VARYING
_696: VARYING
_697: VARYING
sum_698: VARYING
_702: VARYING
_703: VARYING
_704: VARYING
sum_705: VARYING
_709: VARYING
_710: VARYING
_711: VARYING
sum_712: VARYING
_716: VARYING
_717: VARYING
_718: VARYING
sum_719: VARYING
_723: VARYING
_724: VARYING
_725: VARYING
sum_726: VARYING
error_816: [1, 1]
_820: VARYING
result_821: [0, 1]
_822: VARYING
sum_823: VARYING
_824: VARYING
error_825: [1, 1]
_826: VARYING
sum_827: VARYING
_828: VARYING
error_829: [1, 1]
_830: VARYING
sum_831: VARYING
_832: VARYING
result_833: [0, 1]
_834: VARYING
sum_835: VARYING
_836: VARYING
error_837: [1, 1]
_838: VARYING
sum_839: VARYING
_840: VARYING
error_841: [1, 1]
_842: VARYING
sum_843: VARYING
_844: VARYING
result_845: [0, 1]
_846: VARYING
sum_847: VARYING
_848: VARYING
error_849: [1, 1]
_850: VARYING
sum_851: VARYING
_852: VARYING
_853: VARYING
_854: VARYING
_855: VARYING
_861: VARYING
error_862: [1, 1]
_863: VARYING
sum_864: VARYING
_865: VARYING
result_866: [0, 1]
_867: VARYING
sum_868: VARYING
_869: VARYING
error_870: [1, 1]
_871: VARYING
sum_872: VARYING
_873: VARYING
error_874: [0, 0]
_875: VARYING
sum_876: VARYING
_877: VARYING
result_878: [0, 1]
_879: VARYING
sum_880: VARYING
_881: VARYING
error_882: [0, 0]
_883: VARYING
sum_884: VARYING
_885: VARYING
result_886: [1, 1]
_887: VARYING
sum_888: VARYING
_889: VARYING
error_890: [0, 0]
_891: VARYING
sum_892: VARYING
_893: VARYING
_894: VARYING
_895: VARYING
_896: VARYING
_902: VARYING
error_903: [0, 1]
_904: VARYING
sum_905: VARYING
_906: VARYING
error_907: [0, 1]
_908: VARYING
sum_909: VARYING
_910: VARYING
error_911: [0, 1]
_912: VARYING
sum_913: VARYING
_914: VARYING
error_915: [0, 1]
_916: VARYING
sum_917: VARYING
_918: VARYING
error_919: [0, 1]
_920: VARYING
sum_921: VARYING
_922: VARYING
error_923: [0, 1]
_924: VARYING
sum_925: VARYING
_926: VARYING
error_927: [0, 1]
_928: VARYING
sum_929: VARYING
_930: VARYING
error_931: [0, 1]
_932: VARYING
sum_933: VARYING
_934: VARYING
_935: VARYING
_936: VARYING
_937: VARYING
_943: VARYING
sum_944: VARYING
_945: VARYING
sum_946: VARYING
_947: VARYING
error_948: VARYING
_949: VARYING
sum_950: VARYING
_951: VARYING
_953: VARYING
sum_954: VARYING
_955: VARYING
numpats.187_956: [-INF, 10]  EQUIVALENCES: { numpats.187_3 } (1 elements)
_957: VARYING
sum_958: VARYING
_959: VARYING
patt_960: [-INF, numpats.187_3 + -1]  EQUIVALENCES: { patt_9 } (1 elements)
_961: VARYING
sum_962: VARYING
_963: VARYING
i_964: [0, 7]  EQUIVALENCES: { i_35 } (1 elements)
_965: VARYING
sum_966: VARYING
_967: VARYING
j_968: [0, 34]  EQUIVALENCES: { j_36 } (1 elements)
_969: VARYING
sum_970: VARYING
_971: VARYING
neurode_972: [0, 7]  EQUIVALENCES: { neurode_48 } (1 elements)
_973: VARYING
sum_974: VARYING
_975: VARYING
_976: VARYING
_977: VARYING
_978: VARYING
_984: VARYING
i_985: [0, 34]  EQUIVALENCES: { i_49 } (1 elements)
_986: VARYING
sum_987: VARYING
_988: VARYING
neurode_989: [0, 7]  EQUIVALENCES: { neurode_57 } (1 elements)
_990: VARYING
sum_991: VARYING
_992: VARYING
i_993: [0, 7]  EQUIVALENCES: { i_58 } (1 elements)
_994: VARYING
sum_995: VARYING
_996: VARYING
neurode_997: [0, 7]  EQUIVALENCES: { neurode_75 } (1 elements)
_998: VARYING
sum_999: VARYING
_1000: VARYING
neurode_1001: [0, 7]  EQUIVALENCES: { neurode_89 } (1 elements)
_1002: VARYING
sum_1003: VARYING
_1004: VARYING
i_1005: [0, 34]  EQUIVALENCES: { i_90 } (1 elements)
_1006: VARYING
sum_1007: VARYING
_1008: VARYING
numpats.187_1009: [1, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 } (2 elements)
_1010: VARYING
sum_1011: VARYING
_1012: VARYING
numpats.187_1013: [2, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 } (3 elements)
_1014: VARYING
sum_1015: VARYING
_1016: VARYING
_1017: VARYING
_1018: VARYING
_1019: VARYING
_1025: VARYING
numpats.187_1026: [3, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 } (4 elements)
_1027: VARYING
sum_1028: VARYING
_1029: VARYING
numpats.187_1030: [4, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 numpats.187_1026 } (5 elements)
_1031: VARYING
sum_1032: VARYING
_1033: VARYING
numpats.187_1034: [5, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 numpats.187_1026 numpats.187_1030 } (6 elements)
_1035: VARYING
sum_1036: VARYING
_1037: VARYING
numpats.187_1038: [6, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 numpats.187_1026 numpats.187_1030 numpats.187_1034 } (7 elements)
_1039: VARYING
sum_1040: VARYING
_1041: VARYING
numpats.187_1042: [7, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 numpats.187_1026 numpats.187_1030 numpats.187_1034 numpats.187_1038 } (8 elements)
_1043: VARYING
sum_1044: VARYING
_1045: VARYING
numpats.187_1046: [8, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 numpats.187_1026 numpats.187_1030 numpats.187_1034 numpats.187_1038 numpats.187_1042 } (9 elements)
_1047: VARYING
sum_1048: VARYING
_1049: VARYING
numpats.187_1050: [9, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 numpats.187_1026 numpats.187_1030 numpats.187_1034 numpats.187_1038 numpats.187_1042 numpats.187_1046 } (10 elements)
_1051: VARYING
sum_1052: VARYING
_1053: VARYING
numpats.187_1054: [10, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 numpats.187_1026 numpats.187_1030 numpats.187_1034 numpats.187_1038 numpats.187_1042 numpats.187_1046 numpats.187_1050 } (11 elements)
_1055: VARYING
sum_1056: VARYING
_1057: VARYING
_1058: VARYING
_1059: VARYING
_1060: VARYING
_1066: VARYING
numpats.187_1067: [1, 1]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 } (3 elements)
_1068: VARYING
sum_1069: VARYING
_1070: VARYING
numpats.187_1071: [-INF, 0]  EQUIVALENCES: { numpats.187_3 numpats.187_97 } (2 elements)
_1072: VARYING
sum_1073: VARYING
_1074: VARYING
numpats.187_1075: [2, 2]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 } (4 elements)
_1076: VARYING
sum_1077: VARYING
_1078: VARYING
numpats.187_1079: [10, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 numpats.187_1026 numpats.187_1030 numpats.187_1034 numpats.187_1038 numpats.187_1042 numpats.187_1046 numpats.187_1050 numpats.187_1054 } (12 elements)
_1080: VARYING
sum_1081: VARYING
_1082: VARYING
numpats.187_1083: [4, 4]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 numpats.187_1026 numpats.187_1030 } (6 elements)
_1084: VARYING
sum_1085: VARYING
_1086: VARYING
numpats.187_1087: [8, 8]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 numpats.187_1026 numpats.187_1030 numpats.187_1034 numpats.187_1038 numpats.187_1042 numpats.187_1046 } (10 elements)
_1088: VARYING
sum_1089: VARYING
_1090: VARYING
numpats.187_1091: [7, 7]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 numpats.187_1026 numpats.187_1030 numpats.187_1034 numpats.187_1038 numpats.187_1042 } (9 elements)
_1092: VARYING
sum_1093: VARYING
_1094: VARYING
numpats.187_1095: [9, 9]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 numpats.187_1026 numpats.187_1030 numpats.187_1034 numpats.187_1038 numpats.187_1042 numpats.187_1046 numpats.187_1050 } (11 elements)
_1096: VARYING
sum_1097: VARYING
_1098: VARYING
_1099: VARYING
_1100: VARYING
_1101: VARYING
_1107: VARYING
numpats.187_1108: [3, 3]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 numpats.187_1026 } (5 elements)
_1109: VARYING
sum_1110: VARYING
_1111: VARYING
numpats.187_1112: [6, 6]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 numpats.187_1026 numpats.187_1030 numpats.187_1034 numpats.187_1038 } (8 elements)
_1113: VARYING
sum_1114: VARYING
_1115: VARYING
numpats.187_1116: [5, 5]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1009 numpats.187_1013 numpats.187_1026 numpats.187_1030 numpats.187_1034 } (7 elements)
_1117: VARYING
sum_1118: VARYING
_1119: VARYING
numpats.187_1120: [1, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 } (2 elements)
_1121: VARYING
sum_1122: VARYING
_1123: VARYING
numpats.187_1124: [2, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1120 } (3 elements)
_1125: VARYING
sum_1126: VARYING
_1127: VARYING
numpats.187_1128: [3, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1120 numpats.187_1124 } (4 elements)
_1129: VARYING
sum_1130: VARYING
_1131: VARYING
numpats.187_1132: [4, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1120 numpats.187_1124 numpats.187_1128 } (5 elements)
_1133: VARYING
sum_1134: VARYING
_1135: VARYING
numpats.187_1136: [5, 10]  EQUIVALENCES: { numpats.187_3 numpats.187_97 numpats.187_1120 numpats.187_1124 numpats.187_1128 numpats.187_1132 } (6 elements)
_1137: VARYING
sum_1138: VARYING
_1139: VARYING
_1140: VARYING
_1141: VARYING
_1142: VARYING
.MEM_1146: VARYING
_1148: VARYING
_1151: VARYING
_1154: VARYING
_1157: VARYING
_1160: VARYING
_1163: VARYING
_1166: VARYING
_1169: VARYING
_1176: VARYING
_1179: VARYING
_1182: VARYING
_1185: VARYING
_1188: VARYING
_1191: VARYING
_1194: VARYING
_1197: VARYING
_1204: VARYING
_1207: VARYING
_1210: VARYING
_1213: VARYING
_1216: VARYING
_1219: VARYING
_1222: VARYING
_1225: VARYING
_1232: VARYING
_1235: VARYING
_1238: VARYING
_1241: VARYING
_1244: VARYING
_1247: VARYING
_1250: VARYING
_1253: VARYING
_1260: VARYING
_1263: VARYING
_1266: VARYING
_1269: VARYING
_1272: VARYING
_1275: VARYING
_1278: VARYING
_1281: VARYING
_1288: VARYING
_1291: VARYING
_1294: VARYING
_1297: VARYING
_1300: VARYING
_1303: VARYING
_1306: VARYING
_1309: VARYING
_1316: VARYING
_1319: VARYING
_1322: VARYING
_1325: VARYING
_1328: VARYING
_1331: VARYING
_1334: VARYING
_1337: VARYING
_1344: VARYING
_1347: VARYING
_1350: VARYING
_1353: VARYING
_1356: VARYING
_1359: VARYING
_1362: VARYING
_1365: VARYING
.MEM_1370: VARYING


Simplified relational if (neurode_48 <= 7)
 into if (neurode_48 != 8)

Simplified relational if (neurode_57 <= 7)
 into if (neurode_57 != 8)

Simplified relational if (i_35 <= 7)
 into if (i_35 != 8)

Simplified relational if (numpats.187_1009 > 1)
 into if (numpats.187_1009 != 1)

Simplified relational if (numpats.187_1013 > 2)
 into if (numpats.187_1013 != 2)

Simplified relational if (numpats.187_1026 > 3)
 into if (numpats.187_1026 != 3)

Simplified relational if (numpats.187_1030 > 4)
 into if (numpats.187_1030 != 4)

Simplified relational if (numpats.187_1034 > 5)
 into if (numpats.187_1034 != 5)

Simplified relational if (numpats.187_1038 > 6)
 into if (numpats.187_1038 != 6)

Simplified relational if (numpats.187_1042 > 7)
 into if (numpats.187_1042 != 7)

Simplified relational if (numpats.187_1046 > 8)
 into if (numpats.187_1046 != 8)

Simplified relational if (numpats.187_1050 > 9)
 into if (numpats.187_1050 == 10)

Simplified relational if (numpats.187_1120 > 1)
 into if (numpats.187_1120 != 1)

Simplified relational if (numpats.187_1120 > 1)
 into if (numpats.187_1120 != 1)

Simplified relational if (numpats.187_1124 > 2)
 into if (numpats.187_1124 != 2)

Simplified relational if (numpats.187_1124 > 2)
 into if (numpats.187_1124 != 2)

Simplified relational if (numpats.187_1128 > 3)
 into if (numpats.187_1128 != 3)

Simplified relational if (numpats.187_1128 > 3)
 into if (numpats.187_1128 != 3)

Simplified relational if (numpats.187_1132 > 4)
 into if (numpats.187_1132 != 4)

Simplified relational if (numpats.187_1132 > 4)
 into if (numpats.187_1132 != 4)

Simplified relational if (numpats.187_1136 > 5)
 into if (numpats.187_1136 != 5)

Simplified relational if (numpats.187_1136 > 5)
 into if (numpats.187_1136 != 5)

Simplified relational if (numpats.187_380 > 6)
 into if (numpats.187_380 != 6)

Simplified relational if (numpats.187_380 > 6)
 into if (numpats.187_380 != 6)

Simplified relational if (numpats.187_394 > 7)
 into if (numpats.187_394 != 7)

Simplified relational if (numpats.187_394 > 7)
 into if (numpats.187_394 != 7)

Simplified relational if (numpats.187_395 > 8)
 into if (numpats.187_395 != 8)

Simplified relational if (numpats.187_395 > 8)
 into if (numpats.187_395 != 8)

Simplified relational if (numpats.187_396 > 9)
 into if (numpats.187_396 == 10)

Simplified relational if (i_103 <= 7)
 into if (i_103 != 8)

Simplified relational if (neurode_89 <= 7)
 into if (neurode_89 != 8)

Simplified relational if (neurode_75 <= 7)
 into if (neurode_75 != 8)

Simplified relational if (neurode_143 <= 7)
 into if (neurode_143 != 8)

Simplified relational if (neurode_128 <= 7)
 into if (neurode_128 != 8)

Simplified relational if (weight_131 <= 34)
 into if (weight_131 != 35)

Simplified relational if (i_90 <= 34)
 into if (i_90 != 35)

Simplified relational if (j_104 <= 34)
 into if (j_104 != 35)

Simplified relational if (j_36 <= 34)
 into if (j_36 != 35)

Simplified relational if (i_58 <= 7)
 into if (i_58 != 8)

Simplified relational if (i_49 <= 34)
 into if (i_49 != 35)

Removing basic block 172
Removing basic block 166
Removing basic block 165
Removing basic block 108
Removing basic block 107
Removing basic block 106
Removing basic block 170
Removing basic block 171
Removing basic block 169
Removing basic block 3
Removing basic block 7
Removing basic block 11
Removing basic block 17
Removing basic block 22
Removing basic block 27
Removing basic block 70
Removing basic block 161
Removing basic block 179
Removing basic block 180
Removing basic block 181
Removing basic block 182
Removing basic block 183
Removing basic block 184
Removing basic block 185
Removing basic block 186
Removing basic block 187
Removing basic block 188
Removing basic block 189
Removing basic block 190
Removing basic block 191
Removing basic block 192
Removing basic block 193
Removing basic block 194
Removing basic block 195
Removing basic block 196
Removing basic block 197
Removing basic block 198
Removing basic block 199
Removing basic block 200
Removing basic block 201
Removing basic block 202
Removing basic block 203
Removing basic block 204
Merging blocks 207 and 109
Merging blocks 216 and 69

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_189 -> { _170 _475 }
sum_193 -> { sum_94 }
.MEM_197 -> { .MEM_185 }
error_442 -> { error_372 }
_443 -> { _373 }
sum_444 -> { sum_374 }
error_458 -> { error_166 }
sum_459 -> { sum_169 }
.MEM_460 -> { .MEM_202 }
_474 -> { _168 }
_475 -> { _170 }
.MEM_476 -> { .MEM_203 }
error_490 -> { error_166 error_458 }
sum_491 -> { sum_169 sum_459 }
.MEM_492 -> { .MEM_202 .MEM_460 }
neurode_504 -> { neurode_143 }
.MEM_506 -> { .MEM_182 }
.MEM_507 -> { .MEM_183 }
.MEM_508 -> { .MEM_184 }
.MEM_509 -> { .MEM_185 }
.MEM_513 -> { .MEM_186 }
.MEM_514 -> { .MEM_187 }
.MEM_515 -> { .MEM_190 }
.MEM_516 -> { .MEM_191 }
.MEM_520 -> { .MEM_194 }
.MEM_521 -> { .MEM_195 }
.MEM_522 -> { .MEM_199 }
.MEM_523 -> { .MEM_200 }
.MEM_527 -> { .MEM_201 }
.MEM_528 -> { .MEM_203 }
error_529 -> { error_277 }
_672 -> { _168 _474 }
weight_818 -> { weight_131 }
i_819 -> { i_103 }
sum_859 -> { sum_94 }
i_860 -> { i_90 }
neurode_900 -> { neurode_89 }
neurode_901 -> { neurode_75 }
i_941 -> { i_58 }
neurode_942 -> { neurode_57 }
i_982 -> { i_49 }
neurode_983 -> { neurode_48 }
j_1023 -> { j_36 }
i_1024 -> { i_35 }
.MEM_1064 -> { .MEM_183 }
neurode_1065 -> { neurode_48 }
.MEM_1105 -> { .MEM_182 }
i_1106 -> { i_49 }
neurode_1147 -> { neurode_128 }
neurode_1174 -> { neurode_57 }
.MEM_1175 -> { .MEM_184 }
i_1202 -> { i_58 }
.MEM_1203 -> { .MEM_187 }
i_1230 -> { i_35 }
.MEM_1231 -> { .MEM_186 }
j_1258 -> { j_36 }
.MEM_1259 -> { .MEM_191 }
i_1286 -> { i_103 }
.MEM_1287 -> { .MEM_190 }
j_1314 -> { j_104 }
.MEM_1315 -> { .MEM_194 }
neurode_1342 -> { neurode_89 }
i_1343 -> { i_90 }
j_1371 -> { j_104 }
.MEM_1390 -> { .MEM_195 }
neurode_1391 -> { neurode_75 }
.MEM_1410 -> { .MEM_199 }
neurode_1411 -> { neurode_143 }
.MEM_1430 -> { .MEM_201 }
neurode_1431 -> { neurode_128 }
.MEM_1450 -> { .MEM_200 }
weight_1451 -> { weight_131 }
_1470 -> { _283 }
result_1471 -> { result_282 }
error_1490 -> { error_277 }
error_1491 -> { error_174 }
result_1510 -> { result_181 }
.MEM_1511 -> { .MEM_203 .MEM_476 }

SSA names to release after updating the SSA web

error_166 _168 sum_169 _170 .MEM_202 .MEM_203 result_282 _283 error_372 _373 sum_374 
Incremental SSA update started at block: 193
Number of blocks in CFG: 194
Number of blocks to update: 83 ( 43%)


DoNNetIteration (long unsigned int nloops)
{
  int result;
  int i;
  int error;
  int i;
  double sum;
  double error;
  int D.7216;
  int weight;
  int neurode;
  double delta;
  int weight;
  int neurode;
  double delta;
  int neurode;
  double tot_error;
  double sum;
  int i;
  int j;
  double sum;
  int neurode;
  int i;
  double sum;
  int neurode;
  int i;
  int i;
  int neurode;
  double sum;
  int neurode;
  int i;
  double value;
  int i;
  int j;
  int patt;
  long unsigned int elapsed;
  int iteration_count.186_1;
  int _2;
  int numpats.187_3;
  int numpasses.188_4;
  int _5;
  int learned.189_7;
  long unsigned int _19;
  double _20;
  unsigned int _43;
  double _45;
  double _47;
  unsigned int _52;
  double _54;
  double _56;
  double _83;
  double _84;
  double _85;
  double _86;
  double _91;
  double _92;
  double _93;
  int numpats.187_97;
  double _98;
  double _99;
  double _100;
  double _105;
  double _124;
  double _129;
  double _130;
  double _132;
  double _134;
  double _135;
  double _137;
  double _138;
  double _139;
  double _140;
  double _189;
  double _234;
  double _241;
  double _248;
  double _255;
  double _262;
  double _269;
  double _276;
  double _290;
  double _292;
  double _299;
  double _301;
  double _308;
  double _310;
  double _317;
  double _319;
  double _326;
  double _328;
  double _335;
  double _337;
  double _344;
  double _346;
  double _353;
  double _355;
  double _362;
  double _364;
  double _371;
  double _378;
  double _379;
  double _382;
  double _383;
  double _385;
  double _386;
  double _388;
  double _389;
  double _398;
  double _399;
  double _401;
  double _402;
  double _404;
  double _405;
  double _414;
  double _415;
  double _417;
  double _418;
  double _420;
  double _421;
  double _430;
  double _431;
  double _433;
  double _434;
  double _436;
  double _437;
  double _443;
  double _446;
  double _447;
  double _449;
  double _450;
  double _452;
  double _453;
  double _462;
  double _463;
  double _465;
  double _466;
  double _468;
  double _469;
  double _474;
  double _475;
  double _478;
  double _479;
  double _481;
  double _482;
  double _484;
  double _485;
  double _494;
  double _495;
  double _497;
  double _498;
  double _500;
  double _501;
  double _564;
  double _565;
  double _566;
  double _570;
  double _578;
  double _579;
  double _580;
  double _584;
  double _592;
  double _593;
  double _594;
  double _598;
  double _606;
  double _607;
  double _608;
  double _612;
  double _620;
  double _621;
  double _622;
  double _626;
  double _634;
  double _635;
  double _636;
  double _640;
  double _648;
  double _649;
  double _650;
  double _654;
  double _662;
  double _663;
  double _664;
  double _668;
  double _672;
  double _674;
  double _675;
  double _676;
  double _681;
  double _682;
  double _683;
  double _688;
  double _689;
  double _690;
  double _695;
  double _696;
  double _697;
  double _702;
  double _703;
  double _704;
  double _709;
  double _710;
  double _711;
  double _716;
  double _717;
  double _718;
  double _723;
  double _724;
  double _725;
  double _820;
  double _822;
  double _824;
  double _826;
  double _828;
  double _830;
  double _832;
  double _834;
  double _836;
  double _838;
  double _840;
  double _842;
  double _844;
  double _846;
  double _848;
  double _850;
  double _852;
  double _853;
  double _854;
  double _855;
  double _861;
  double _863;
  double _865;
  double _867;
  double _869;
  double _871;
  double _873;
  double _875;
  double _877;
  double _879;
  double _881;
  double _883;
  double _885;
  double _887;
  double _889;
  double _891;
  double _893;
  double _894;
  double _895;
  double _896;
  double _902;
  double _904;
  double _906;
  double _908;
  double _910;
  double _912;
  double _914;
  double _916;
  double _918;
  double _920;
  double _922;
  double _924;
  double _926;
  double _928;
  double _930;
  double _932;
  double _934;
  double _935;
  double _936;
  double _937;
  double _943;
  double _945;
  double _947;
  double _949;
  double _951;
  double _953;
  double _955;
  double _957;
  double _959;
  double _961;
  double _963;
  double _965;
  double _967;
  double _969;
  double _971;
  double _973;
  double _975;
  double _976;
  double _977;
  double _978;
  double _984;
  double _986;
  double _988;
  double _990;
  double _992;
  double _994;
  double _996;
  double _998;
  double _1000;
  double _1002;
  double _1004;
  double _1006;
  double _1008;
  double _1010;
  double _1012;
  double _1014;
  double _1016;
  double _1017;
  double _1018;
  double _1019;
  double _1025;
  double _1027;
  double _1029;
  double _1031;
  double _1033;
  double _1035;
  double _1037;
  double _1039;
  double _1041;
  double _1043;
  double _1045;
  double _1047;
  double _1049;
  double _1051;
  double _1053;
  double _1055;
  double _1057;
  double _1058;
  double _1059;
  double _1060;
  double _1066;
  double _1068;
  double _1070;
  double _1072;
  double _1074;
  double _1076;
  double _1078;
  double _1080;
  double _1082;
  double _1084;
  double _1086;
  double _1088;
  double _1090;
  double _1092;
  double _1094;
  double _1096;
  double _1098;
  double _1099;
  double _1100;
  double _1101;
  double _1107;
  double _1109;
  double _1111;
  double _1113;
  double _1115;
  double _1117;
  double _1119;
  double _1121;
  double _1123;
  double _1125;
  double _1127;
  double _1129;
  double _1131;
  double _1133;
  double _1135;
  double _1137;
  double _1139;
  double _1140;
  double _1141;
  double _1142;
  double _1148;
  double _1151;
  double _1154;
  double _1157;
  double _1160;
  double _1163;
  double _1166;
  double _1169;
  double _1176;
  double _1179;
  double _1182;
  double _1185;
  double _1188;
  double _1191;
  double _1194;
  double _1197;
  double _1204;
  double _1207;
  double _1210;
  double _1213;
  double _1216;
  double _1219;
  double _1222;
  double _1225;
  double _1232;
  double _1235;
  double _1238;
  double _1241;
  double _1244;
  double _1247;
  double _1250;
  double _1253;
  double _1260;
  double _1263;
  double _1266;
  double _1269;
  double _1272;
  double _1275;
  double _1278;
  double _1281;
  double _1288;
  double _1291;
  double _1294;
  double _1297;
  double _1300;
  double _1303;
  double _1306;
  double _1309;
  double _1316;
  double _1319;
  double _1322;
  double _1325;
  double _1328;
  double _1331;
  double _1334;
  double _1337;
  double _1344;
  double _1347;
  double _1350;
  double _1353;
  double _1356;
  double _1359;
  double _1362;
  double _1365;
  double _1470;

  <bb 2> [0.00%]:
  elapsed_15 = StartStopwatch ();
  goto <bb 172>; [100.00%]

  <bb 3> [3.03%]:
  # i_982 = PHI <i_49(4), i_1106(192)>
  _43 = abs_randwc (100000);
  value_44 = (double) _43;
  _45 = value_44 / 1.0e+5;
  value_46 = _45 - 5.0e-1;
  _47 = value_46 * 5.0e-1;
  mid_wts[neurode_983][i_982] = _47;
  i_50 = i_982 + 1;

  <bb 4> [3.02%]:
  # i_49 = PHI <i_50(3)>
  if (i_49 != 35)
    goto <bb 3>; [97.14%]
  else
    goto <bb 5>; [2.86%]

  <bb 5> [0.09%]:
  neurode_51 = neurode_983 + 1;

  <bb 6> [0.09%]:
  # neurode_48 = PHI <neurode_51(5)>
  if (neurode_48 != 8)
    goto <bb 7>; [87.66%]
  else
    goto <bb 191>; [12.34%]

  <bb 7> [0.09%]:
  # neurode_983 = PHI <neurode_48(6), neurode_1065(193)>
  goto <bb 192>; [100.00%]

  <bb 8> [0.69%]:
  # i_941 = PHI <i_58(9), i_1202(190)>
  _52 = abs_randwc (100000);
  value_53 = (double) _52;
  _54 = value_53 / 1.0e+4;
  value_55 = _54 - 5.0e-1;
  _56 = value_55 * 5.0e-1;
  out_wts[neurode_942][i_941] = _56;
  i_59 = i_941 + 1;

  <bb 9> [0.69%]:
  # i_58 = PHI <i_59(8)>
  if (i_58 != 8)
    goto <bb 8>; [87.44%]
  else
    goto <bb 10>; [12.56%]

  <bb 10> [0.09%]:
  neurode_60 = neurode_942 + 1;

  <bb 11> [0.09%]:
  # neurode_57 = PHI <neurode_60(10)>
  if (neurode_57 != 8)
    goto <bb 12>; [87.66%]
  else
    goto <bb 189>; [12.34%]

  <bb 12> [0.09%]:
  # neurode_942 = PHI <neurode_57(11), neurode_1174(191)>
  goto <bb 190>; [100.00%]

  <bb 13> [3.03%]:
  # j_1023 = PHI <j_36(14), j_1258(188)>
  mid_wt_change[i_1024][j_1023] = 0.0;
  mid_wt_cum_change[i_1024][j_1023] = 0.0;
  j_37 = j_1023 + 1;

  <bb 14> [3.02%]:
  # j_36 = PHI <j_37(13)>
  if (j_36 != 35)
    goto <bb 13>; [97.14%]
  else
    goto <bb 15>; [2.86%]

  <bb 15> [0.09%]:
  i_38 = i_1024 + 1;

  <bb 16> [0.09%]:
  # i_35 = PHI <i_38(15)>
  if (i_35 != 8)
    goto <bb 17>; [87.66%]
  else
    goto <bb 18>; [12.34%]

  <bb 17> [0.09%]:
  # i_1024 = PHI <i_35(16), i_1230(189)>
  goto <bb 188>; [100.00%]

  <bb 18> [0.01%]:
  out_wt_change[0][0] = 0.0;
  out_wt_cum_change[0][0] = 0.0;
  out_wt_change[0][1] = 0.0;
  out_wt_cum_change[0][1] = 0.0;
  out_wt_change[0][2] = 0.0;
  out_wt_cum_change[0][2] = 0.0;
  out_wt_change[0][3] = 0.0;
  out_wt_cum_change[0][3] = 0.0;
  out_wt_change[0][4] = 0.0;
  out_wt_cum_change[0][4] = 0.0;
  out_wt_change[0][5] = 0.0;
  out_wt_cum_change[0][5] = 0.0;
  out_wt_change[0][6] = 0.0;
  out_wt_cum_change[0][6] = 0.0;
  out_wt_change[0][7] = 0.0;
  out_wt_cum_change[0][7] = 0.0;
  out_wt_change[1][0] = 0.0;
  out_wt_cum_change[1][0] = 0.0;
  out_wt_change[1][1] = 0.0;
  out_wt_cum_change[1][1] = 0.0;
  out_wt_change[1][2] = 0.0;
  out_wt_cum_change[1][2] = 0.0;
  out_wt_change[1][3] = 0.0;
  out_wt_cum_change[1][3] = 0.0;
  out_wt_change[1][4] = 0.0;
  out_wt_cum_change[1][4] = 0.0;
  out_wt_change[1][5] = 0.0;
  out_wt_cum_change[1][5] = 0.0;
  out_wt_change[1][6] = 0.0;
  out_wt_cum_change[1][6] = 0.0;
  out_wt_change[1][7] = 0.0;
  out_wt_cum_change[1][7] = 0.0;
  out_wt_change[2][0] = 0.0;
  out_wt_cum_change[2][0] = 0.0;
  out_wt_change[2][1] = 0.0;
  out_wt_cum_change[2][1] = 0.0;
  out_wt_change[2][2] = 0.0;
  out_wt_cum_change[2][2] = 0.0;
  out_wt_change[2][3] = 0.0;
  out_wt_cum_change[2][3] = 0.0;
  out_wt_change[2][4] = 0.0;
  out_wt_cum_change[2][4] = 0.0;
  out_wt_change[2][5] = 0.0;
  out_wt_cum_change[2][5] = 0.0;
  out_wt_change[2][6] = 0.0;
  out_wt_cum_change[2][6] = 0.0;
  out_wt_change[2][7] = 0.0;
  out_wt_cum_change[2][7] = 0.0;
  out_wt_change[3][0] = 0.0;
  out_wt_cum_change[3][0] = 0.0;
  out_wt_change[3][1] = 0.0;
  out_wt_cum_change[3][1] = 0.0;
  out_wt_change[3][2] = 0.0;
  out_wt_cum_change[3][2] = 0.0;
  out_wt_change[3][3] = 0.0;
  out_wt_cum_change[3][3] = 0.0;
  out_wt_change[3][4] = 0.0;
  out_wt_cum_change[3][4] = 0.0;
  out_wt_change[3][5] = 0.0;
  out_wt_cum_change[3][5] = 0.0;
  out_wt_change[3][6] = 0.0;
  out_wt_cum_change[3][6] = 0.0;
  out_wt_change[3][7] = 0.0;
  out_wt_cum_change[3][7] = 0.0;
  out_wt_change[4][0] = 0.0;
  out_wt_cum_change[4][0] = 0.0;
  out_wt_change[4][1] = 0.0;
  out_wt_cum_change[4][1] = 0.0;
  out_wt_change[4][2] = 0.0;
  out_wt_cum_change[4][2] = 0.0;
  out_wt_change[4][3] = 0.0;
  out_wt_cum_change[4][3] = 0.0;
  out_wt_change[4][4] = 0.0;
  out_wt_cum_change[4][4] = 0.0;
  out_wt_change[4][5] = 0.0;
  out_wt_cum_change[4][5] = 0.0;
  out_wt_change[4][6] = 0.0;
  out_wt_cum_change[4][6] = 0.0;
  out_wt_change[4][7] = 0.0;
  out_wt_cum_change[4][7] = 0.0;
  out_wt_change[5][0] = 0.0;
  out_wt_cum_change[5][0] = 0.0;
  out_wt_change[5][1] = 0.0;
  out_wt_cum_change[5][1] = 0.0;
  out_wt_change[5][2] = 0.0;
  out_wt_cum_change[5][2] = 0.0;
  out_wt_change[5][3] = 0.0;
  out_wt_cum_change[5][3] = 0.0;
  out_wt_change[5][4] = 0.0;
  out_wt_cum_change[5][4] = 0.0;
  out_wt_change[5][5] = 0.0;
  out_wt_cum_change[5][5] = 0.0;
  out_wt_change[5][6] = 0.0;
  out_wt_cum_change[5][6] = 0.0;
  out_wt_change[5][7] = 0.0;
  out_wt_cum_change[5][7] = 0.0;
  out_wt_change[6][0] = 0.0;
  out_wt_cum_change[6][0] = 0.0;
  out_wt_change[6][1] = 0.0;
  out_wt_cum_change[6][1] = 0.0;
  out_wt_change[6][2] = 0.0;
  out_wt_cum_change[6][2] = 0.0;
  out_wt_change[6][3] = 0.0;
  out_wt_cum_change[6][3] = 0.0;
  out_wt_change[6][4] = 0.0;
  out_wt_cum_change[6][4] = 0.0;
  out_wt_change[6][5] = 0.0;
  out_wt_cum_change[6][5] = 0.0;
  out_wt_change[6][6] = 0.0;
  out_wt_cum_change[6][6] = 0.0;
  out_wt_change[6][7] = 0.0;
  out_wt_cum_change[6][7] = 0.0;
  out_wt_change[7][0] = 0.0;
  out_wt_cum_change[7][0] = 0.0;
  out_wt_change[7][1] = 0.0;
  out_wt_cum_change[7][1] = 0.0;
  out_wt_change[7][2] = 0.0;
  out_wt_cum_change[7][2] = 0.0;
  out_wt_change[7][3] = 0.0;
  out_wt_cum_change[7][3] = 0.0;
  out_wt_change[7][4] = 0.0;
  out_wt_cum_change[7][4] = 0.0;
  out_wt_change[7][5] = 0.0;
  out_wt_cum_change[7][5] = 0.0;
  out_wt_change[7][6] = 0.0;
  out_wt_cum_change[7][6] = 0.0;
  out_wt_change[7][7] = 0.0;
  out_wt_cum_change[7][7] = 0.0;
  iteration_count = 1;
  learned = 0;
  numpasses = 0;
  goto <bb 171>; [100.00%]

  <bb 19> [0.35%]:
  worst_error = 0.0;
  goto <bb 187>; [100.00%]

  <bb 20> [97.22%]:
  # j_1371 = PHI <j_104(21), j_1314(186)>
  _105 = mid_wt_cum_change[i_819][j_1371];
  mid_wt_change[i_819][j_1371] = _105;
  mid_wt_cum_change[i_819][j_1371] = 0.0;
  j_106 = j_1371 + 1;

  <bb 21> [97.22%]:
  # j_104 = PHI <j_106(20)>
  if (j_104 != 35)
    goto <bb 20>; [97.14%]
  else
    goto <bb 22>; [2.86%]

  <bb 22> [2.78%]:
  i_107 = i_819 + 1;

  <bb 23> [2.78%]:
  # i_103 = PHI <i_107(22)>
  if (i_103 != 8)
    goto <bb 24>; [87.49%]
  else
    goto <bb 25>; [12.51%]

  <bb 24> [2.78%]:
  # i_819 = PHI <i_103(23), i_1286(187)>
  goto <bb 186>; [100.00%]

  <bb 25> [0.35%]:
  _1148 = out_wt_cum_change[0][0];
  out_wt_change[0][0] = _1148;
  out_wt_cum_change[0][0] = 0.0;
  _1151 = out_wt_cum_change[0][1];
  out_wt_change[0][1] = _1151;
  out_wt_cum_change[0][1] = 0.0;
  _1154 = out_wt_cum_change[0][2];
  out_wt_change[0][2] = _1154;
  out_wt_cum_change[0][2] = 0.0;
  _1157 = out_wt_cum_change[0][3];
  out_wt_change[0][3] = _1157;
  out_wt_cum_change[0][3] = 0.0;
  _1160 = out_wt_cum_change[0][4];
  out_wt_change[0][4] = _1160;
  out_wt_cum_change[0][4] = 0.0;
  _1163 = out_wt_cum_change[0][5];
  out_wt_change[0][5] = _1163;
  out_wt_cum_change[0][5] = 0.0;
  _1166 = out_wt_cum_change[0][6];
  out_wt_change[0][6] = _1166;
  out_wt_cum_change[0][6] = 0.0;
  _1169 = out_wt_cum_change[0][7];
  out_wt_change[0][7] = _1169;
  out_wt_cum_change[0][7] = 0.0;
  _1176 = out_wt_cum_change[1][0];
  out_wt_change[1][0] = _1176;
  out_wt_cum_change[1][0] = 0.0;
  _1179 = out_wt_cum_change[1][1];
  out_wt_change[1][1] = _1179;
  out_wt_cum_change[1][1] = 0.0;
  _1182 = out_wt_cum_change[1][2];
  out_wt_change[1][2] = _1182;
  out_wt_cum_change[1][2] = 0.0;
  _1185 = out_wt_cum_change[1][3];
  out_wt_change[1][3] = _1185;
  out_wt_cum_change[1][3] = 0.0;
  _1188 = out_wt_cum_change[1][4];
  out_wt_change[1][4] = _1188;
  out_wt_cum_change[1][4] = 0.0;
  _1191 = out_wt_cum_change[1][5];
  out_wt_change[1][5] = _1191;
  out_wt_cum_change[1][5] = 0.0;
  _1194 = out_wt_cum_change[1][6];
  out_wt_change[1][6] = _1194;
  out_wt_cum_change[1][6] = 0.0;
  _1197 = out_wt_cum_change[1][7];
  out_wt_change[1][7] = _1197;
  out_wt_cum_change[1][7] = 0.0;
  _1204 = out_wt_cum_change[2][0];
  out_wt_change[2][0] = _1204;
  out_wt_cum_change[2][0] = 0.0;
  _1207 = out_wt_cum_change[2][1];
  out_wt_change[2][1] = _1207;
  out_wt_cum_change[2][1] = 0.0;
  _1210 = out_wt_cum_change[2][2];
  out_wt_change[2][2] = _1210;
  out_wt_cum_change[2][2] = 0.0;
  _1213 = out_wt_cum_change[2][3];
  out_wt_change[2][3] = _1213;
  out_wt_cum_change[2][3] = 0.0;
  _1216 = out_wt_cum_change[2][4];
  out_wt_change[2][4] = _1216;
  out_wt_cum_change[2][4] = 0.0;
  _1219 = out_wt_cum_change[2][5];
  out_wt_change[2][5] = _1219;
  out_wt_cum_change[2][5] = 0.0;
  _1222 = out_wt_cum_change[2][6];
  out_wt_change[2][6] = _1222;
  out_wt_cum_change[2][6] = 0.0;
  _1225 = out_wt_cum_change[2][7];
  out_wt_change[2][7] = _1225;
  out_wt_cum_change[2][7] = 0.0;
  _1232 = out_wt_cum_change[3][0];
  out_wt_change[3][0] = _1232;
  out_wt_cum_change[3][0] = 0.0;
  _1235 = out_wt_cum_change[3][1];
  out_wt_change[3][1] = _1235;
  out_wt_cum_change[3][1] = 0.0;
  _1238 = out_wt_cum_change[3][2];
  out_wt_change[3][2] = _1238;
  out_wt_cum_change[3][2] = 0.0;
  _1241 = out_wt_cum_change[3][3];
  out_wt_change[3][3] = _1241;
  out_wt_cum_change[3][3] = 0.0;
  _1244 = out_wt_cum_change[3][4];
  out_wt_change[3][4] = _1244;
  out_wt_cum_change[3][4] = 0.0;
  _1247 = out_wt_cum_change[3][5];
  out_wt_change[3][5] = _1247;
  out_wt_cum_change[3][5] = 0.0;
  _1250 = out_wt_cum_change[3][6];
  out_wt_change[3][6] = _1250;
  out_wt_cum_change[3][6] = 0.0;
  _1253 = out_wt_cum_change[3][7];
  out_wt_change[3][7] = _1253;
  out_wt_cum_change[3][7] = 0.0;
  _1260 = out_wt_cum_change[4][0];
  out_wt_change[4][0] = _1260;
  out_wt_cum_change[4][0] = 0.0;
  _1263 = out_wt_cum_change[4][1];
  out_wt_change[4][1] = _1263;
  out_wt_cum_change[4][1] = 0.0;
  _1266 = out_wt_cum_change[4][2];
  out_wt_change[4][2] = _1266;
  out_wt_cum_change[4][2] = 0.0;
  _1269 = out_wt_cum_change[4][3];
  out_wt_change[4][3] = _1269;
  out_wt_cum_change[4][3] = 0.0;
  _1272 = out_wt_cum_change[4][4];
  out_wt_change[4][4] = _1272;
  out_wt_cum_change[4][4] = 0.0;
  _1275 = out_wt_cum_change[4][5];
  out_wt_change[4][5] = _1275;
  out_wt_cum_change[4][5] = 0.0;
  _1278 = out_wt_cum_change[4][6];
  out_wt_change[4][6] = _1278;
  out_wt_cum_change[4][6] = 0.0;
  _1281 = out_wt_cum_change[4][7];
  out_wt_change[4][7] = _1281;
  out_wt_cum_change[4][7] = 0.0;
  _1288 = out_wt_cum_change[5][0];
  out_wt_change[5][0] = _1288;
  out_wt_cum_change[5][0] = 0.0;
  _1291 = out_wt_cum_change[5][1];
  out_wt_change[5][1] = _1291;
  out_wt_cum_change[5][1] = 0.0;
  _1294 = out_wt_cum_change[5][2];
  out_wt_change[5][2] = _1294;
  out_wt_cum_change[5][2] = 0.0;
  _1297 = out_wt_cum_change[5][3];
  out_wt_change[5][3] = _1297;
  out_wt_cum_change[5][3] = 0.0;
  _1300 = out_wt_cum_change[5][4];
  out_wt_change[5][4] = _1300;
  out_wt_cum_change[5][4] = 0.0;
  _1303 = out_wt_cum_change[5][5];
  out_wt_change[5][5] = _1303;
  out_wt_cum_change[5][5] = 0.0;
  _1306 = out_wt_cum_change[5][6];
  out_wt_change[5][6] = _1306;
  out_wt_cum_change[5][6] = 0.0;
  _1309 = out_wt_cum_change[5][7];
  out_wt_change[5][7] = _1309;
  out_wt_cum_change[5][7] = 0.0;
  _1316 = out_wt_cum_change[6][0];
  out_wt_change[6][0] = _1316;
  out_wt_cum_change[6][0] = 0.0;
  _1319 = out_wt_cum_change[6][1];
  out_wt_change[6][1] = _1319;
  out_wt_cum_change[6][1] = 0.0;
  _1322 = out_wt_cum_change[6][2];
  out_wt_change[6][2] = _1322;
  out_wt_cum_change[6][2] = 0.0;
  _1325 = out_wt_cum_change[6][3];
  out_wt_change[6][3] = _1325;
  out_wt_cum_change[6][3] = 0.0;
  _1328 = out_wt_cum_change[6][4];
  out_wt_change[6][4] = _1328;
  out_wt_cum_change[6][4] = 0.0;
  _1331 = out_wt_cum_change[6][5];
  out_wt_change[6][5] = _1331;
  out_wt_cum_change[6][5] = 0.0;
  _1334 = out_wt_cum_change[6][6];
  out_wt_change[6][6] = _1334;
  out_wt_cum_change[6][6] = 0.0;
  _1337 = out_wt_cum_change[6][7];
  out_wt_change[6][7] = _1337;
  out_wt_cum_change[6][7] = 0.0;
  _1344 = out_wt_cum_change[7][0];
  out_wt_change[7][0] = _1344;
  out_wt_cum_change[7][0] = 0.0;
  _1347 = out_wt_cum_change[7][1];
  out_wt_change[7][1] = _1347;
  out_wt_cum_change[7][1] = 0.0;
  _1350 = out_wt_cum_change[7][2];
  out_wt_change[7][2] = _1350;
  out_wt_cum_change[7][2] = 0.0;
  _1353 = out_wt_cum_change[7][3];
  out_wt_change[7][3] = _1353;
  out_wt_cum_change[7][3] = 0.0;
  _1356 = out_wt_cum_change[7][4];
  out_wt_change[7][4] = _1356;
  out_wt_cum_change[7][4] = 0.0;
  _1359 = out_wt_cum_change[7][5];
  out_wt_change[7][5] = _1359;
  out_wt_cum_change[7][5] = 0.0;
  _1362 = out_wt_cum_change[7][6];
  out_wt_change[7][6] = _1362;
  out_wt_cum_change[7][6] = 0.0;
  _1365 = out_wt_cum_change[7][7];
  out_wt_change[7][7] = _1365;
  out_wt_cum_change[7][7] = 0.0;
  goto <bb 185>; [100.00%]

  <bb 26> [97.22%]:
  # i_860 = PHI <i_90(27), i_1343(184)>
  # sum_859 = PHI <sum_94(27), sum_193(184)>
  _91 = mid_wts[neurode_900][i_860];
  _92 = in_pats[patt_9][i_860];
  _93 = _91 * _92;
  sum_95 = _93 + sum_859;
  i_96 = i_860 + 1;

  <bb 27> [97.22%]:
  # sum_94 = PHI <sum_95(26)>
  # i_90 = PHI <i_96(26)>
  if (i_90 != 35)
    goto <bb 26>; [97.14%]
  else
    goto <bb 28>; [2.86%]

  <bb 28> [2.78%]:
  # sum_944 = PHI <sum_94(27)>
  _98 = -sum_944;
  _99 = exp (_98);
  _100 = _99 + 1.0e+0;
  sum_101 = 1.0e+0 / _100;
  mid_out[neurode_900] = sum_101;
  neurode_102 = neurode_900 + 1;

  <bb 29> [2.78%]:
  # neurode_89 = PHI <neurode_102(28)>
  if (neurode_89 != 8)
    goto <bb 30>; [87.49%]
  else
    goto <bb 183>; [12.51%]

  <bb 30> [2.78%]:
  # neurode_900 = PHI <neurode_89(29), neurode_1342(185)>
  goto <bb 184>; [100.00%]

  <bb 31> [2.78%]:
  # neurode_75 = PHI <neurode_88(32)>
  if (neurode_75 != 8)
    goto <bb 32>; [87.49%]
  else
    goto <bb 33>; [12.51%]

  <bb 32> [2.78%]:
  # neurode_901 = PHI <neurode_75(31), neurode_1391(183)>
  _674 = out_wts[neurode_901][0];
  _675 = mid_out[0];
  _676 = _674 * _675;
  sum_677 = _676 + 0.0;
  _681 = out_wts[neurode_901][1];
  _682 = mid_out[1];
  _683 = _681 * _682;
  sum_684 = sum_677 + _683;
  _688 = out_wts[neurode_901][2];
  _689 = mid_out[2];
  _690 = _688 * _689;
  sum_691 = sum_684 + _690;
  _695 = out_wts[neurode_901][3];
  _696 = mid_out[3];
  _697 = _695 * _696;
  sum_698 = sum_691 + _697;
  _702 = out_wts[neurode_901][4];
  _703 = mid_out[4];
  _704 = _702 * _703;
  sum_705 = sum_698 + _704;
  _709 = out_wts[neurode_901][5];
  _710 = mid_out[5];
  _711 = _709 * _710;
  sum_712 = sum_705 + _711;
  _716 = out_wts[neurode_901][6];
  _717 = mid_out[6];
  _718 = _716 * _717;
  sum_719 = sum_712 + _718;
  _723 = out_wts[neurode_901][7];
  _724 = mid_out[7];
  _725 = _723 * _724;
  sum_726 = sum_719 + _725;
  _84 = -sum_726;
  _85 = exp (_84);
  _86 = _85 + 1.0e+0;
  sum_87 = 1.0e+0 / _86;
  out_out[neurode_901] = sum_87;
  neurode_88 = neurode_901 + 1;
  goto <bb 31>; [100.00%]

  <bb 33> [0.35%]:
  _564 = out_pats[patt_9][0];
  _565 = out_out[0];
  _566 = _564 - _565;
  out_error[0] = _566;
  if (_566 < 0.0)
    goto <bb 36>; [36.00%]
  else
    goto <bb 34>; [64.00%]

  <bb 34> [0.22%]:
  sum_568 = _566 + 0.0;
  if (_566 > 0.0)
    goto <bb 35>; [50.00%]
  else
    goto <bb 37>; [50.00%]

  <bb 35> [0.11%]:
  goto <bb 37>; [100.00%]

  <bb 36> [0.13%]:
  sum_569 = 0.0 - _566;
  _570 = -_566;

  <bb 37> [0.35%]:
  # tot_error_571 = PHI <0.0(34), _566(35), _570(36)>
  # sum_572 = PHI <sum_568(34), sum_568(35), sum_569(36)>
  _578 = out_pats[patt_9][1];
  _579 = out_out[1];
  _580 = _578 - _579;
  out_error[1] = _580;
  if (_580 < 0.0)
    goto <bb 40>; [36.00%]
  else
    goto <bb 38>; [64.00%]

  <bb 38> [0.22%]:
  sum_582 = sum_572 + _580;
  if (tot_error_571 < _580)
    goto <bb 39>; [50.00%]
  else
    goto <bb 42>; [50.00%]

  <bb 39> [0.11%]:
  goto <bb 42>; [100.00%]

  <bb 40> [0.13%]:
  sum_583 = sum_572 - _580;
  _584 = -_580;
  if (tot_error_571 < _584)
    goto <bb 41>; [50.00%]
  else
    goto <bb 42>; [50.00%]

  <bb 41> [0.06%]:

  <bb 42> [0.35%]:
  # tot_error_585 = PHI <tot_error_571(38), _580(39), tot_error_571(40), _584(41)>
  # sum_586 = PHI <sum_582(38), sum_582(39), sum_583(40), sum_583(41)>
  _592 = out_pats[patt_9][2];
  _593 = out_out[2];
  _594 = _592 - _593;
  out_error[2] = _594;
  if (_594 < 0.0)
    goto <bb 45>; [36.00%]
  else
    goto <bb 43>; [64.00%]

  <bb 43> [0.22%]:
  sum_596 = sum_586 + _594;
  if (tot_error_585 < _594)
    goto <bb 44>; [50.00%]
  else
    goto <bb 47>; [50.00%]

  <bb 44> [0.11%]:
  goto <bb 47>; [100.00%]

  <bb 45> [0.13%]:
  sum_597 = sum_586 - _594;
  _598 = -_594;
  if (tot_error_585 < _598)
    goto <bb 46>; [50.00%]
  else
    goto <bb 47>; [50.00%]

  <bb 46> [0.06%]:

  <bb 47> [0.35%]:
  # tot_error_599 = PHI <tot_error_585(43), _594(44), tot_error_585(45), _598(46)>
  # sum_600 = PHI <sum_596(43), sum_596(44), sum_597(45), sum_597(46)>
  _606 = out_pats[patt_9][3];
  _607 = out_out[3];
  _608 = _606 - _607;
  out_error[3] = _608;
  if (_608 < 0.0)
    goto <bb 50>; [36.00%]
  else
    goto <bb 48>; [64.00%]

  <bb 48> [0.22%]:
  sum_610 = sum_600 + _608;
  if (tot_error_599 < _608)
    goto <bb 49>; [50.00%]
  else
    goto <bb 52>; [50.00%]

  <bb 49> [0.11%]:
  goto <bb 52>; [100.00%]

  <bb 50> [0.13%]:
  sum_611 = sum_600 - _608;
  _612 = -_608;
  if (tot_error_599 < _612)
    goto <bb 51>; [50.00%]
  else
    goto <bb 52>; [50.00%]

  <bb 51> [0.06%]:

  <bb 52> [0.35%]:
  # tot_error_613 = PHI <tot_error_599(48), _608(49), tot_error_599(50), _612(51)>
  # sum_614 = PHI <sum_610(48), sum_610(49), sum_611(50), sum_611(51)>
  _620 = out_pats[patt_9][4];
  _621 = out_out[4];
  _622 = _620 - _621;
  out_error[4] = _622;
  if (_622 < 0.0)
    goto <bb 55>; [36.00%]
  else
    goto <bb 53>; [64.00%]

  <bb 53> [0.22%]:
  sum_624 = sum_614 + _622;
  if (tot_error_613 < _622)
    goto <bb 54>; [50.00%]
  else
    goto <bb 57>; [50.00%]

  <bb 54> [0.11%]:
  goto <bb 57>; [100.00%]

  <bb 55> [0.13%]:
  sum_625 = sum_614 - _622;
  _626 = -_622;
  if (tot_error_613 < _626)
    goto <bb 56>; [50.00%]
  else
    goto <bb 57>; [50.00%]

  <bb 56> [0.06%]:

  <bb 57> [0.35%]:
  # tot_error_627 = PHI <tot_error_613(53), _622(54), tot_error_613(55), _626(56)>
  # sum_628 = PHI <sum_624(53), sum_624(54), sum_625(55), sum_625(56)>
  _634 = out_pats[patt_9][5];
  _635 = out_out[5];
  _636 = _634 - _635;
  out_error[5] = _636;
  if (_636 < 0.0)
    goto <bb 60>; [36.00%]
  else
    goto <bb 58>; [64.00%]

  <bb 58> [0.22%]:
  sum_638 = sum_628 + _636;
  if (tot_error_627 < _636)
    goto <bb 59>; [50.00%]
  else
    goto <bb 62>; [50.00%]

  <bb 59> [0.11%]:
  goto <bb 62>; [100.00%]

  <bb 60> [0.13%]:
  sum_639 = sum_628 - _636;
  _640 = -_636;
  if (tot_error_627 < _640)
    goto <bb 61>; [50.00%]
  else
    goto <bb 62>; [50.00%]

  <bb 61> [0.06%]:

  <bb 62> [0.35%]:
  # tot_error_641 = PHI <tot_error_627(58), _636(59), tot_error_627(60), _640(61)>
  # sum_642 = PHI <sum_638(58), sum_638(59), sum_639(60), sum_639(61)>
  _648 = out_pats[patt_9][6];
  _649 = out_out[6];
  _650 = _648 - _649;
  out_error[6] = _650;
  if (_650 < 0.0)
    goto <bb 65>; [36.00%]
  else
    goto <bb 63>; [64.00%]

  <bb 63> [0.22%]:
  sum_652 = sum_642 + _650;
  if (tot_error_641 < _650)
    goto <bb 64>; [50.00%]
  else
    goto <bb 67>; [50.00%]

  <bb 64> [0.11%]:
  goto <bb 67>; [100.00%]

  <bb 65> [0.13%]:
  sum_653 = sum_642 - _650;
  _654 = -_650;
  if (tot_error_641 < _654)
    goto <bb 66>; [50.00%]
  else
    goto <bb 67>; [50.00%]

  <bb 66> [0.06%]:

  <bb 67> [0.35%]:
  # tot_error_655 = PHI <tot_error_641(63), _650(64), tot_error_641(65), _654(66)>
  # sum_656 = PHI <sum_652(63), sum_652(64), sum_653(65), sum_653(66)>
  _662 = out_pats[patt_9][7];
  _663 = out_out[7];
  _664 = _662 - _663;
  out_error[7] = _664;
  if (_664 < 0.0)
    goto <bb 70>; [36.00%]
  else
    goto <bb 68>; [64.00%]

  <bb 68> [0.22%]:
  sum_666 = sum_656 + _664;
  if (tot_error_655 < _664)
    goto <bb 69>; [50.00%]
  else
    goto <bb 72>; [50.00%]

  <bb 69> [0.11%]:
  goto <bb 72>; [100.00%]

  <bb 70> [0.13%]:
  sum_667 = sum_656 - _664;
  _668 = -_664;
  if (tot_error_655 < _668)
    goto <bb 71>; [50.00%]
  else
    goto <bb 72>; [50.00%]

  <bb 71> [0.06%]:

  <bb 72> [0.35%]:
  # tot_error_669 = PHI <tot_error_655(68), _664(69), tot_error_655(70), _668(71)>
  # sum_670 = PHI <sum_666(68), sum_666(69), sum_667(70), sum_667(71)>
  _124 = sum_670 * 1.25e-1;
  avg_out_error[patt_9] = _124;
  tot_out_error[patt_9] = tot_error_669;
  _820 = out_wts[0][0];
  _822 = _566 * _820;
  sum_823 = _822 + 0.0;
  _824 = out_wts[1][0];
  _826 = _580 * _824;
  sum_827 = sum_823 + _826;
  _828 = out_wts[2][0];
  _830 = _594 * _828;
  sum_831 = sum_827 + _830;
  _832 = out_wts[3][0];
  _834 = _608 * _832;
  sum_835 = sum_831 + _834;
  _836 = out_wts[4][0];
  _838 = _622 * _836;
  sum_839 = sum_835 + _838;
  _840 = out_wts[5][0];
  _842 = _636 * _840;
  sum_843 = sum_839 + _842;
  _844 = out_wts[6][0];
  _846 = _650 * _844;
  sum_847 = sum_843 + _846;
  _848 = out_wts[7][0];
  _850 = _664 * _848;
  sum_851 = sum_847 + _850;
  _852 = mid_out[0];
  _853 = 1.0e+0 - _852;
  _854 = _852 * _853;
  _855 = sum_851 * _854;
  mid_error[0] = _855;
  _861 = out_wts[0][1];
  _863 = _566 * _861;
  sum_864 = _863 + 0.0;
  _865 = out_wts[1][1];
  _867 = _580 * _865;
  sum_868 = sum_864 + _867;
  _869 = out_wts[2][1];
  _871 = _594 * _869;
  sum_872 = sum_868 + _871;
  _873 = out_wts[3][1];
  _875 = _608 * _873;
  sum_876 = sum_872 + _875;
  _877 = out_wts[4][1];
  _879 = _622 * _877;
  sum_880 = sum_876 + _879;
  _881 = out_wts[5][1];
  _883 = _636 * _881;
  sum_884 = sum_880 + _883;
  _885 = out_wts[6][1];
  _887 = _650 * _885;
  sum_888 = sum_884 + _887;
  _889 = out_wts[7][1];
  _891 = _664 * _889;
  sum_892 = sum_888 + _891;
  _893 = mid_out[1];
  _894 = 1.0e+0 - _893;
  _895 = _893 * _894;
  _896 = sum_892 * _895;
  mid_error[1] = _896;
  _902 = out_wts[0][2];
  _904 = _566 * _902;
  sum_905 = _904 + 0.0;
  _906 = out_wts[1][2];
  _908 = _580 * _906;
  sum_909 = sum_905 + _908;
  _910 = out_wts[2][2];
  _912 = _594 * _910;
  sum_913 = sum_909 + _912;
  _914 = out_wts[3][2];
  _916 = _608 * _914;
  sum_917 = sum_913 + _916;
  _918 = out_wts[4][2];
  _920 = _622 * _918;
  sum_921 = sum_917 + _920;
  _922 = out_wts[5][2];
  _924 = _636 * _922;
  sum_925 = sum_921 + _924;
  _926 = out_wts[6][2];
  _928 = _650 * _926;
  sum_929 = sum_925 + _928;
  _930 = out_wts[7][2];
  _932 = _664 * _930;
  sum_933 = sum_929 + _932;
  _934 = mid_out[2];
  _935 = 1.0e+0 - _934;
  _936 = _934 * _935;
  _937 = sum_933 * _936;
  mid_error[2] = _937;
  _943 = out_wts[0][3];
  _945 = _566 * _943;
  sum_946 = _945 + 0.0;
  _947 = out_wts[1][3];
  _949 = _580 * _947;
  sum_950 = sum_946 + _949;
  _951 = out_wts[2][3];
  _953 = _594 * _951;
  sum_954 = sum_950 + _953;
  _955 = out_wts[3][3];
  _957 = _608 * _955;
  sum_958 = sum_954 + _957;
  _959 = out_wts[4][3];
  _961 = _622 * _959;
  sum_962 = sum_958 + _961;
  _963 = out_wts[5][3];
  _965 = _636 * _963;
  sum_966 = sum_962 + _965;
  _967 = out_wts[6][3];
  _969 = _650 * _967;
  sum_970 = sum_966 + _969;
  _971 = out_wts[7][3];
  _973 = _664 * _971;
  sum_974 = sum_970 + _973;
  _975 = mid_out[3];
  _976 = 1.0e+0 - _975;
  _977 = _975 * _976;
  _978 = sum_974 * _977;
  mid_error[3] = _978;
  _984 = out_wts[0][4];
  _986 = _566 * _984;
  sum_987 = _986 + 0.0;
  _988 = out_wts[1][4];
  _990 = _580 * _988;
  sum_991 = sum_987 + _990;
  _992 = out_wts[2][4];
  _994 = _594 * _992;
  sum_995 = sum_991 + _994;
  _996 = out_wts[3][4];
  _998 = _608 * _996;
  sum_999 = sum_995 + _998;
  _1000 = out_wts[4][4];
  _1002 = _622 * _1000;
  sum_1003 = sum_999 + _1002;
  _1004 = out_wts[5][4];
  _1006 = _636 * _1004;
  sum_1007 = sum_1003 + _1006;
  _1008 = out_wts[6][4];
  _1010 = _650 * _1008;
  sum_1011 = sum_1007 + _1010;
  _1012 = out_wts[7][4];
  _1014 = _664 * _1012;
  sum_1015 = sum_1011 + _1014;
  _1016 = mid_out[4];
  _1017 = 1.0e+0 - _1016;
  _1018 = _1016 * _1017;
  _1019 = sum_1015 * _1018;
  mid_error[4] = _1019;
  _1025 = out_wts[0][5];
  _1027 = _566 * _1025;
  sum_1028 = _1027 + 0.0;
  _1029 = out_wts[1][5];
  _1031 = _580 * _1029;
  sum_1032 = sum_1028 + _1031;
  _1033 = out_wts[2][5];
  _1035 = _594 * _1033;
  sum_1036 = sum_1032 + _1035;
  _1037 = out_wts[3][5];
  _1039 = _608 * _1037;
  sum_1040 = sum_1036 + _1039;
  _1041 = out_wts[4][5];
  _1043 = _622 * _1041;
  sum_1044 = sum_1040 + _1043;
  _1045 = out_wts[5][5];
  _1047 = _636 * _1045;
  sum_1048 = sum_1044 + _1047;
  _1049 = out_wts[6][5];
  _1051 = _650 * _1049;
  sum_1052 = sum_1048 + _1051;
  _1053 = out_wts[7][5];
  _1055 = _664 * _1053;
  sum_1056 = sum_1052 + _1055;
  _1057 = mid_out[5];
  _1058 = 1.0e+0 - _1057;
  _1059 = _1057 * _1058;
  _1060 = sum_1056 * _1059;
  mid_error[5] = _1060;
  _1066 = out_wts[0][6];
  _1068 = _566 * _1066;
  sum_1069 = _1068 + 0.0;
  _1070 = out_wts[1][6];
  _1072 = _580 * _1070;
  sum_1073 = sum_1069 + _1072;
  _1074 = out_wts[2][6];
  _1076 = _594 * _1074;
  sum_1077 = sum_1073 + _1076;
  _1078 = out_wts[3][6];
  _1080 = _608 * _1078;
  sum_1081 = sum_1077 + _1080;
  _1082 = out_wts[4][6];
  _1084 = _622 * _1082;
  sum_1085 = sum_1081 + _1084;
  _1086 = out_wts[5][6];
  _1088 = _636 * _1086;
  sum_1089 = sum_1085 + _1088;
  _1090 = out_wts[6][6];
  _1092 = _650 * _1090;
  sum_1093 = sum_1089 + _1092;
  _1094 = out_wts[7][6];
  _1096 = _664 * _1094;
  sum_1097 = sum_1093 + _1096;
  _1098 = mid_out[6];
  _1099 = 1.0e+0 - _1098;
  _1100 = _1098 * _1099;
  _1101 = sum_1097 * _1100;
  mid_error[6] = _1101;
  _1107 = out_wts[0][7];
  _1109 = _566 * _1107;
  sum_1110 = _1109 + 0.0;
  _1111 = out_wts[1][7];
  _1113 = _580 * _1111;
  sum_1114 = sum_1110 + _1113;
  _1115 = out_wts[2][7];
  _1117 = _594 * _1115;
  sum_1118 = sum_1114 + _1117;
  _1119 = out_wts[3][7];
  _1121 = _608 * _1119;
  sum_1122 = sum_1118 + _1121;
  _1123 = out_wts[4][7];
  _1125 = _622 * _1123;
  sum_1126 = sum_1122 + _1125;
  _1127 = out_wts[5][7];
  _1129 = _636 * _1127;
  sum_1130 = sum_1126 + _1129;
  _1131 = out_wts[6][7];
  _1133 = _650 * _1131;
  sum_1134 = sum_1130 + _1133;
  _1135 = out_wts[7][7];
  _1137 = _664 * _1135;
  sum_1138 = sum_1134 + _1137;
  _1139 = mid_out[7];
  _1140 = 1.0e+0 - _1139;
  _1141 = _1139 * _1140;
  _1142 = sum_1138 * _1141;
  mid_error[7] = _1142;
  goto <bb 182>; [100.00%]

  <bb 73> [2.78%]:
  # neurode_143 = PHI <neurode_157(74)>
  if (neurode_143 != 8)
    goto <bb 74>; [87.49%]
  else
    goto <bb 181>; [12.51%]

  <bb 74> [2.78%]:
  # neurode_504 = PHI <neurode_143(73), neurode_1411(182)>
  _378 = out_error[neurode_504];
  _379 = _378 * 8.99999999999999966693309261245303787291049957275390625e-2;
  delta_381 = _379 * _852;
  _382 = out_wt_change[neurode_504][0];
  _383 = _382 * 8.99999999999999966693309261245303787291049957275390625e-2;
  delta_384 = delta_381 + _383;
  _385 = out_wts[neurode_504][0];
  _386 = delta_384 + _385;
  out_wts[neurode_504][0] = _386;
  _388 = out_wt_cum_change[neurode_504][0];
  _389 = delta_384 + _388;
  out_wt_cum_change[neurode_504][0] = _389;
  delta_397 = _379 * _893;
  _398 = out_wt_change[neurode_504][1];
  _399 = _398 * 8.99999999999999966693309261245303787291049957275390625e-2;
  delta_400 = delta_397 + _399;
  _401 = out_wts[neurode_504][1];
  _402 = delta_400 + _401;
  out_wts[neurode_504][1] = _402;
  _404 = out_wt_cum_change[neurode_504][1];
  _405 = delta_400 + _404;
  out_wt_cum_change[neurode_504][1] = _405;
  delta_413 = _379 * _934;
  _414 = out_wt_change[neurode_504][2];
  _415 = _414 * 8.99999999999999966693309261245303787291049957275390625e-2;
  delta_416 = delta_413 + _415;
  _417 = out_wts[neurode_504][2];
  _418 = delta_416 + _417;
  out_wts[neurode_504][2] = _418;
  _420 = out_wt_cum_change[neurode_504][2];
  _421 = delta_416 + _420;
  out_wt_cum_change[neurode_504][2] = _421;
  delta_429 = _379 * _975;
  _430 = out_wt_change[neurode_504][3];
  _431 = _430 * 8.99999999999999966693309261245303787291049957275390625e-2;
  delta_432 = delta_429 + _431;
  _433 = out_wts[neurode_504][3];
  _434 = delta_432 + _433;
  out_wts[neurode_504][3] = _434;
  _436 = out_wt_cum_change[neurode_504][3];
  _437 = delta_432 + _436;
  out_wt_cum_change[neurode_504][3] = _437;
  delta_445 = _379 * _1016;
  _446 = out_wt_change[neurode_504][4];
  _447 = _446 * 8.99999999999999966693309261245303787291049957275390625e-2;
  delta_448 = delta_445 + _447;
  _449 = out_wts[neurode_504][4];
  _450 = delta_448 + _449;
  out_wts[neurode_504][4] = _450;
  _452 = out_wt_cum_change[neurode_504][4];
  _453 = delta_448 + _452;
  out_wt_cum_change[neurode_504][4] = _453;
  delta_461 = _379 * _1057;
  _462 = out_wt_change[neurode_504][5];
  _463 = _462 * 8.99999999999999966693309261245303787291049957275390625e-2;
  delta_464 = delta_461 + _463;
  _465 = out_wts[neurode_504][5];
  _466 = delta_464 + _465;
  out_wts[neurode_504][5] = _466;
  _468 = out_wt_cum_change[neurode_504][5];
  _469 = delta_464 + _468;
  out_wt_cum_change[neurode_504][5] = _469;
  delta_477 = _379 * _1098;
  _478 = out_wt_change[neurode_504][6];
  _479 = _478 * 8.99999999999999966693309261245303787291049957275390625e-2;
  delta_480 = delta_477 + _479;
  _481 = out_wts[neurode_504][6];
  _482 = delta_480 + _481;
  out_wts[neurode_504][6] = _482;
  _484 = out_wt_cum_change[neurode_504][6];
  _485 = delta_480 + _484;
  out_wt_cum_change[neurode_504][6] = _485;
  delta_493 = _379 * _1139;
  _494 = out_wt_change[neurode_504][7];
  _495 = _494 * 8.99999999999999966693309261245303787291049957275390625e-2;
  delta_496 = delta_493 + _495;
  _497 = out_wts[neurode_504][7];
  _498 = delta_496 + _497;
  out_wts[neurode_504][7] = _498;
  _500 = out_wt_cum_change[neurode_504][7];
  _501 = delta_496 + _500;
  out_wt_cum_change[neurode_504][7] = _501;
  neurode_157 = neurode_504 + 1;
  goto <bb 73>; [100.00%]

  <bb 75> [97.22%]:
  # weight_818 = PHI <weight_131(76), weight_1451(180)>
  _129 = mid_error[neurode_1147];
  _130 = _129 * 8.99999999999999966693309261245303787291049957275390625e-2;
  _132 = in_pats[patt_9][weight_818];
  delta_133 = _130 * _132;
  _134 = mid_wt_change[neurode_1147][weight_818];
  _135 = _134 * 8.99999999999999966693309261245303787291049957275390625e-2;
  delta_136 = delta_133 + _135;
  _137 = mid_wts[neurode_1147][weight_818];
  _138 = delta_136 + _137;
  mid_wts[neurode_1147][weight_818] = _138;
  _139 = mid_wt_cum_change[neurode_1147][weight_818];
  _140 = delta_136 + _139;
  mid_wt_cum_change[neurode_1147][weight_818] = _140;
  weight_141 = weight_818 + 1;

  <bb 76> [97.22%]:
  # weight_131 = PHI <weight_141(75)>
  if (weight_131 != 35)
    goto <bb 75>; [97.14%]
  else
    goto <bb 77>; [2.86%]

  <bb 77> [2.78%]:
  neurode_142 = neurode_1147 + 1;

  <bb 78> [2.78%]:
  # neurode_128 = PHI <neurode_142(77)>
  if (neurode_128 != 8)
    goto <bb 79>; [87.49%]
  else
    goto <bb 80>; [12.51%]

  <bb 79> [2.78%]:
  # neurode_1147 = PHI <neurode_128(78), neurode_1431(181)>
  goto <bb 180>; [100.00%]

  <bb 80> [0.35%]:
  iteration_count.186_1 = iteration_count;
  _2 = iteration_count.186_1 + 1;
  iteration_count = _2;
  patt_32 = patt_9 + 1;

  <bb 81> [0.41%]:
  # patt_9 = PHI <0(171), patt_32(80)>
  numpats.187_3 = numpats;
  if (numpats.187_3 > patt_9)
    goto <bb 19>; [85.00%]
  else
    goto <bb 82>; [15.00%]

  <bb 82> [0.06%]:
  # numpats.187_97 = PHI <numpats.187_3(81)>
  numpasses.188_4 = numpasses;
  _5 = numpasses.188_4 + 1;
  numpasses = _5;
  if (numpats.187_97 > 0)
    goto <bb 83>; [85.00%]
  else
    goto <bb 175>; [15.00%]

  <bb 83> [0.05%]:
  _290 = tot_out_error[0];
  if (_290 > 0.0)
    goto <bb 84>; [50.00%]
  else
    goto <bb 85>; [50.00%]

  <bb 84> [0.02%]:

  <bb 85> [0.05%]:
  # error_291 = PHI <0.0(83), _290(84)>
  _292 = avg_out_error[0];
  sum_293 = _292 + 0.0;
  if (numpats.187_97 != 1)
    goto <bb 86>; [85.00%]
  else
    goto <bb 176>; [15.00%]

  <bb 86> [0.04%]:
  _299 = tot_out_error[1];
  if (error_291 < _299)
    goto <bb 87>; [50.00%]
  else
    goto <bb 88>; [50.00%]

  <bb 87> [0.02%]:

  <bb 88> [0.04%]:
  # error_300 = PHI <error_291(86), _299(87)>
  _301 = avg_out_error[1];
  sum_302 = sum_293 + _301;
  if (numpats.187_97 != 2)
    goto <bb 89>; [85.00%]
  else
    goto <bb 176>; [15.00%]

  <bb 89> [0.04%]:
  _308 = tot_out_error[2];
  if (error_300 < _308)
    goto <bb 90>; [50.00%]
  else
    goto <bb 91>; [50.00%]

  <bb 90> [0.02%]:

  <bb 91> [0.04%]:
  # error_309 = PHI <error_300(89), _308(90)>
  _310 = avg_out_error[2];
  sum_311 = sum_302 + _310;
  if (numpats.187_97 != 3)
    goto <bb 92>; [85.00%]
  else
    goto <bb 176>; [15.00%]

  <bb 92> [0.03%]:
  _317 = tot_out_error[3];
  if (error_309 < _317)
    goto <bb 93>; [50.00%]
  else
    goto <bb 94>; [50.00%]

  <bb 93> [0.02%]:

  <bb 94> [0.03%]:
  # error_318 = PHI <error_309(92), _317(93)>
  _319 = avg_out_error[3];
  sum_320 = sum_311 + _319;
  if (numpats.187_97 != 4)
    goto <bb 95>; [85.00%]
  else
    goto <bb 176>; [15.00%]

  <bb 95> [0.03%]:
  _326 = tot_out_error[4];
  if (error_318 < _326)
    goto <bb 96>; [50.00%]
  else
    goto <bb 97>; [50.00%]

  <bb 96> [0.01%]:

  <bb 97> [0.03%]:
  # error_327 = PHI <error_318(95), _326(96)>
  _328 = avg_out_error[4];
  sum_329 = sum_320 + _328;
  if (numpats.187_97 != 5)
    goto <bb 98>; [85.00%]
  else
    goto <bb 176>; [15.00%]

  <bb 98> [0.02%]:
  _335 = tot_out_error[5];
  if (error_327 < _335)
    goto <bb 99>; [50.00%]
  else
    goto <bb 100>; [50.00%]

  <bb 99> [0.01%]:

  <bb 100> [0.02%]:
  # error_336 = PHI <error_327(98), _335(99)>
  _337 = avg_out_error[5];
  sum_338 = sum_329 + _337;
  if (numpats.187_97 != 6)
    goto <bb 101>; [85.00%]
  else
    goto <bb 176>; [15.00%]

  <bb 101> [0.02%]:
  _344 = tot_out_error[6];
  if (error_336 < _344)
    goto <bb 102>; [50.00%]
  else
    goto <bb 103>; [50.00%]

  <bb 102> [0.01%]:

  <bb 103> [0.02%]:
  # error_345 = PHI <error_336(101), _344(102)>
  _346 = avg_out_error[6];
  sum_347 = sum_338 + _346;
  if (numpats.187_97 != 7)
    goto <bb 104>; [85.00%]
  else
    goto <bb 176>; [15.00%]

  <bb 104> [0.02%]:
  _353 = tot_out_error[7];
  if (error_345 < _353)
    goto <bb 105>; [50.00%]
  else
    goto <bb 106>; [50.00%]

  <bb 105> [0.01%]:

  <bb 106> [0.02%]:
  # error_354 = PHI <error_345(104), _353(105)>
  _355 = avg_out_error[7];
  sum_356 = sum_347 + _355;
  if (numpats.187_97 != 8)
    goto <bb 107>; [85.00%]
  else
    goto <bb 176>; [15.00%]

  <bb 107> [0.01%]:
  _362 = tot_out_error[8];
  if (error_354 < _362)
    goto <bb 108>; [50.00%]
  else
    goto <bb 109>; [50.00%]

  <bb 108> [0.01%]:

  <bb 109> [0.01%]:
  # error_363 = PHI <error_354(107), _362(108)>
  _364 = avg_out_error[8];
  sum_365 = sum_356 + _364;
  if (numpats.187_97 == 10)
    goto <bb 110>; [85.00%]
  else
    goto <bb 176>; [15.00%]

  <bb 110> [0.01%]:
  _371 = tot_out_error[9];
  if (error_363 < _371)
    goto <bb 111>; [50.00%]
  else
    goto <bb 174>; [50.00%]

  <bb 111> [0.01%]:
  goto <bb 174>; [100.00%]

  <bb 112> [0.02%]:

  <bb 113> [0.05%]:
  # result_72 = PHI <1(176), 0(112)>
  _83 = tot_out_error[0];
  if (_83 >= 1.6e+1)
    goto <bb 114>; [50.00%]
  else
    goto <bb 116>; [50.00%]

  <bb 114> [0.02%]:
  if (numpats.187_97 != 1)
    goto <bb 118>; [85.00%]
  else
    goto <bb 115>; [15.00%]

  <bb 115> [0.00%]:
  # result_866 = PHI <result_72(114)>
  goto <bb 169>; [100.00%]

  <bb 116> [0.03%]:
  if (numpats.187_97 != 1)
    goto <bb 118>; [85.00%]
  else
    goto <bb 117>; [15.00%]

  <bb 117> [0.00%]:
  # result_878 = PHI <result_72(116)>
  goto <bb 170>; [100.00%]

  <bb 118> [0.04%]:
  # error_907 = PHI <0(116), 1(114)>
  if (error_490 >= 1.000000000000000055511151231257827021181583404541015625e-1)
    goto <bb 119>; [50.00%]
  else
    goto <bb 120>; [50.00%]

  <bb 119> [0.02%]:

  <bb 120> [0.04%]:
  # result_30 = PHI <result_72(118), 0(119)>
  _20 = tot_out_error[1];
  if (_20 >= 1.6e+1)
    goto <bb 121>; [50.00%]
  else
    goto <bb 123>; [50.00%]

  <bb 121> [0.02%]:
  if (numpats.187_97 != 2)
    goto <bb 124>; [85.00%]
  else
    goto <bb 122>; [15.00%]

  <bb 122> [0.00%]:
  # result_845 = PHI <result_30(121)>
  goto <bb 169>; [100.00%]

  <bb 123> [0.02%]:
  # error_21 = PHI <error_907(120)>
  if (numpats.187_97 != 2)
    goto <bb 124>; [85.00%]
  else
    goto <bb 168>; [15.00%]

  <bb 124> [0.04%]:
  # error_903 = PHI <error_21(123), 1(121)>
  if (error_490 >= 1.000000000000000055511151231257827021181583404541015625e-1)
    goto <bb 125>; [50.00%]
  else
    goto <bb 126>; [50.00%]

  <bb 125> [0.02%]:

  <bb 126> [0.04%]:
  # result_233 = PHI <result_30(124), 0(125)>
  _234 = tot_out_error[2];
  if (_234 >= 1.6e+1)
    goto <bb 127>; [50.00%]
  else
    goto <bb 129>; [50.00%]

  <bb 127> [0.02%]:
  if (numpats.187_97 != 3)
    goto <bb 130>; [85.00%]
  else
    goto <bb 128>; [15.00%]

  <bb 128> [0.00%]:
  # result_833 = PHI <result_233(127)>
  goto <bb 169>; [100.00%]

  <bb 129> [0.02%]:
  # error_235 = PHI <error_903(126)>
  if (numpats.187_97 != 3)
    goto <bb 130>; [85.00%]
  else
    goto <bb 168>; [15.00%]

  <bb 130> [0.03%]:
  # error_911 = PHI <error_235(129), 1(127)>
  if (error_490 >= 1.000000000000000055511151231257827021181583404541015625e-1)
    goto <bb 131>; [50.00%]
  else
    goto <bb 132>; [50.00%]

  <bb 131> [0.02%]:

  <bb 132> [0.03%]:
  # result_240 = PHI <result_233(130), 0(131)>
  _241 = tot_out_error[3];
  if (_241 >= 1.6e+1)
    goto <bb 133>; [50.00%]
  else
    goto <bb 135>; [50.00%]

  <bb 133> [0.02%]:
  if (numpats.187_97 != 4)
    goto <bb 136>; [85.00%]
  else
    goto <bb 134>; [15.00%]

  <bb 134> [0.00%]:
  # result_821 = PHI <result_240(133)>
  goto <bb 169>; [100.00%]

  <bb 135> [0.01%]:
  # error_242 = PHI <error_911(132)>
  if (numpats.187_97 != 4)
    goto <bb 136>; [85.00%]
  else
    goto <bb 168>; [15.00%]

  <bb 136> [0.03%]:
  # error_915 = PHI <error_242(135), 1(133)>
  if (error_490 >= 1.000000000000000055511151231257827021181583404541015625e-1)
    goto <bb 137>; [50.00%]
  else
    goto <bb 138>; [50.00%]

  <bb 137> [0.01%]:

  <bb 138> [0.03%]:
  # result_247 = PHI <result_240(136), 0(137)>
  _248 = tot_out_error[4];
  if (_248 >= 1.6e+1)
    goto <bb 139>; [50.00%]
  else
    goto <bb 141>; [50.00%]

  <bb 139> [0.01%]:
  if (numpats.187_97 != 5)
    goto <bb 142>; [85.00%]
  else
    goto <bb 140>; [15.00%]

  <bb 140> [0.00%]:
  # result_6 = PHI <result_247(139)>
  goto <bb 169>; [100.00%]

  <bb 141> [0.02%]:
  # error_249 = PHI <error_915(138)>
  if (numpats.187_97 != 5)
    goto <bb 142>; [85.00%]
  else
    goto <bb 168>; [15.00%]

  <bb 142> [0.02%]:
  # error_919 = PHI <error_249(141), 1(139)>
  if (error_490 >= 1.000000000000000055511151231257827021181583404541015625e-1)
    goto <bb 143>; [50.00%]
  else
    goto <bb 144>; [50.00%]

  <bb 143> [0.01%]:

  <bb 144> [0.02%]:
  # result_254 = PHI <result_247(142), 0(143)>
  _255 = tot_out_error[5];
  if (_255 >= 1.6e+1)
    goto <bb 145>; [50.00%]
  else
    goto <bb 147>; [50.00%]

  <bb 145> [0.01%]:
  if (numpats.187_97 != 6)
    goto <bb 148>; [85.00%]
  else
    goto <bb 146>; [15.00%]

  <bb 146> [0.00%]:
  # result_165 = PHI <result_254(145)>
  goto <bb 169>; [100.00%]

  <bb 147> [0.01%]:
  # error_256 = PHI <error_919(144)>
  if (numpats.187_97 != 6)
    goto <bb 148>; [85.00%]
  else
    goto <bb 168>; [15.00%]

  <bb 148> [0.02%]:
  # error_923 = PHI <error_256(147), 1(145)>
  if (error_490 >= 1.000000000000000055511151231257827021181583404541015625e-1)
    goto <bb 149>; [50.00%]
  else
    goto <bb 150>; [50.00%]

  <bb 149> [0.01%]:

  <bb 150> [0.02%]:
  # result_261 = PHI <result_254(148), 0(149)>
  _262 = tot_out_error[6];
  if (_262 >= 1.6e+1)
    goto <bb 151>; [50.00%]
  else
    goto <bb 153>; [50.00%]

  <bb 151> [0.01%]:
  if (numpats.187_97 != 7)
    goto <bb 154>; [85.00%]
  else
    goto <bb 152>; [15.00%]

  <bb 152> [0.00%]:
  # result_352 = PHI <result_261(151)>
  goto <bb 169>; [100.00%]

  <bb 153> [0.01%]:
  # error_263 = PHI <error_923(150)>
  if (numpats.187_97 != 7)
    goto <bb 154>; [85.00%]
  else
    goto <bb 168>; [15.00%]

  <bb 154> [0.02%]:
  # error_927 = PHI <error_263(153), 1(151)>
  if (error_490 >= 1.000000000000000055511151231257827021181583404541015625e-1)
    goto <bb 155>; [50.00%]
  else
    goto <bb 156>; [50.00%]

  <bb 155> [0.01%]:

  <bb 156> [0.02%]:
  # result_268 = PHI <result_261(154), 0(155)>
  _269 = tot_out_error[7];
  if (_269 >= 1.6e+1)
    goto <bb 157>; [50.00%]
  else
    goto <bb 159>; [50.00%]

  <bb 157> [0.01%]:
  if (numpats.187_97 != 8)
    goto <bb 160>; [85.00%]
  else
    goto <bb 158>; [15.00%]

  <bb 158> [0.00%]:
  # result_325 = PHI <result_268(157)>
  goto <bb 169>; [100.00%]

  <bb 159> [0.01%]:
  # error_270 = PHI <error_927(156)>
  if (numpats.187_97 != 8)
    goto <bb 160>; [85.00%]
  else
    goto <bb 168>; [15.00%]

  <bb 160> [0.01%]:
  # error_931 = PHI <error_270(159), 1(157)>
  if (error_490 >= 1.000000000000000055511151231257827021181583404541015625e-1)
    goto <bb 161>; [50.00%]
  else
    goto <bb 162>; [50.00%]

  <bb 161> [0.01%]:

  <bb 162> [0.01%]:
  # result_275 = PHI <result_268(160), 0(161)>
  _276 = tot_out_error[8];
  if (_276 >= 1.6e+1)
    goto <bb 178>; [50.00%]
  else
    goto <bb 163>; [50.00%]

  <bb 163> [0.00%]:
  # error_277 = PHI <error_931(162)>
  if (numpats.187_97 == 10)
    goto <bb 164>; [85.00%]
  else
    goto <bb 168>; [15.00%]

  <bb 164> [0.01%]:
  # error_529 = PHI <error_277(163), error_1490(178)>
  if (error_490 >= 1.000000000000000055511151231257827021181583404541015625e-1)
    goto <bb 165>; [50.00%]
  else
    goto <bb 179>; [50.00%]

  <bb 165> [0.01%]:
  goto <bb 179>; [100.00%]

  <bb 166> [0.00%]:
  # result_298 = PHI <result_1471(179)>
  goto <bb 169>; [100.00%]

  <bb 167> [0.02%]:
  # error_284 = PHI <error_529(179)>

  <bb 168> [0.05%]:
  # result_181 = PHI <result_1471(167), result_275(163), result_268(159), result_30(123), result_233(129), result_240(135), result_247(141), result_254(147), result_261(153)>
  # error_174 = PHI <error_284(167), error_277(163), error_270(159), error_21(123), error_235(129), error_242(135), error_249(141), error_256(147), error_263(153)>
  if (error_174 == 1)
    goto <bb 169>; [1.30%]
  else
    goto <bb 170>; [98.70%]

  <bb 169> [0.00%]:

  <bb 170> [0.06%]:
  # result_175 = PHI <result_181(168), -1(169), result_878(117), -1(177), 1(175)>
  learned = result_175;

  <bb 171> [0.07%]:
  learned.189_7 = learned;
  if (learned.189_7 == 0)
    goto <bb 81>; [85.00%]
  else
    goto <bb 172>; [15.00%]

  <bb 172> [0.01%]:
  # nloops_8 = PHI <nloops_16(D)(2), nloops_17(171)>
  nloops_17 = nloops_8 + 18446744073709551615;
  if (nloops_8 != 0)
    goto <bb 193>; [85.00%]
  else
    goto <bb 173>; [15.00%]

  <bb 173> [0.00%]:
  _19 = StopStopwatch (elapsed_15);
  return _19;

  <bb 174> [0.02%]:
  # error_442 = PHI <_371(111), error_363(110)>
  _443 = avg_out_error[9];
  sum_444 = sum_365 + _443;
  goto <bb 176>; [100.00%]

  <bb 175> [0.01%]:
  # error_458 = PHI <0.0(82)>
  # sum_459 = PHI <0.0(82)>
  worst_error = error_458;
  _474 = (double) numpats.187_97;
  _475 = sum_459 / _474;
  average_error = _475;
  goto <bb 170>; [100.00%]

  <bb 176> [0.05%]:
  # error_490 = PHI <error_363(109), error_354(106), error_345(103), error_336(100), error_327(97), error_318(94), error_309(91), error_300(88), error_291(85), error_442(174)>
  # sum_491 = PHI <sum_365(109), sum_356(106), sum_347(103), sum_338(100), sum_329(97), sum_320(94), sum_311(91), sum_302(88), sum_293(85), sum_444(174)>
  worst_error = error_490;
  _672 = (double) numpats.187_97;
  _189 = sum_491 / _672;
  average_error = _189;
  if (error_490 >= 1.000000000000000055511151231257827021181583404541015625e-1)
    goto <bb 112>; [50.00%]
  else
    goto <bb 113>; [50.00%]

  <bb 177> [0.00%]:
  # result_1510 = PHI <result_275(178)>
  # error_1491 = PHI <error_1490(178)>
  goto <bb 170>; [100.00%]

  <bb 178> [0.01%]:
  # error_1490 = PHI <1(162)>
  if (numpats.187_97 == 10)
    goto <bb 164>; [100.00%]
  else
    goto <bb 177>; [0.00%]

  <bb 179> [0.02%]:
  # result_1471 = PHI <0(165), result_275(164)>
  _1470 = tot_out_error[9];
  if (_1470 >= 1.6e+1)
    goto <bb 166>; [15.00%]
  else
    goto <bb 167>; [85.00%]

  <bb 180> [2.78%]:
  # weight_1451 = PHI <0(79)>
  goto <bb 75>; [100.00%]

  <bb 181> [0.35%]:
  # neurode_1431 = PHI <0(73)>
  goto <bb 79>; [100.00%]

  <bb 182> [0.35%]:
  # neurode_1411 = PHI <0(72)>
  goto <bb 74>; [100.00%]

  <bb 183> [0.35%]:
  # neurode_1391 = PHI <0(29)>
  goto <bb 32>; [100.00%]

  <bb 184> [2.78%]:
  # sum_193 = PHI <0.0(30)>
  # i_1343 = PHI <0(30)>
  goto <bb 26>; [100.00%]

  <bb 185> [0.35%]:
  # neurode_1342 = PHI <0(25)>
  goto <bb 30>; [100.00%]

  <bb 186> [2.78%]:
  # j_1314 = PHI <0(24)>
  goto <bb 20>; [100.00%]

  <bb 187> [0.35%]:
  # i_1286 = PHI <0(19)>
  goto <bb 24>; [100.00%]

  <bb 188> [0.09%]:
  # j_1258 = PHI <0(17)>
  goto <bb 13>; [100.00%]

  <bb 189> [0.01%]:
  # i_1230 = PHI <0(11)>
  goto <bb 17>; [100.00%]

  <bb 190> [0.09%]:
  # i_1202 = PHI <0(12)>
  goto <bb 8>; [100.00%]

  <bb 191> [0.01%]:
  # neurode_1174 = PHI <0(6)>
  goto <bb 12>; [100.00%]

  <bb 192> [0.09%]:
  # i_1106 = PHI <0(7)>
  goto <bb 3>; [100.00%]

  <bb 193> [0.01%]:
  # neurode_1065 = PHI <0(172)>
  goto <bb 7>; [100.00%]

}



;; Function lusolve.constprop (lusolve.constprop.6, funcdef_no=135, decl_uid=6548, cgraph_uid=62, symbol_order=202)

;; 14 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 60 54 10 58 11 59 12 13 14 15 23 17 57 18 19 20 21 22 56 24 55 25 26 27 28 29 30 31 32 33 34 35 36 52 37 53 38 39 40 41 42 43 51 44 45 46 47 48 49 50
;;
;; Loop 10
;;  header 49, latch 48
;;  depth 1, outer 0
;;  nodes: 49 48 44 47 45 46
;;
;; Loop 11
;;  header 47, latch 46
;;  depth 2, outer 10
;;  nodes: 47 46
;;
;; Loop 12
;;  header 43, latch 42
;;  depth 1, outer 0
;;  nodes: 43 42 39 40 41 37 53 38
;;
;; Loop 13
;;  header 39, latch 38
;;  depth 2, outer 12
;;  nodes: 39 38
;;
;; Loop 1
;;  header 35, latch 34
;;  depth 1, outer 0
;;  nodes: 35 34 30 33 31 32 28 29 24 27 26 55 25 56 23 22 20 21 17 19 57 18 15 10 58 14 11 13 59 12
;;
;; Loop 2
;;  header 33, latch 32
;;  depth 2, outer 1
;;  nodes: 33 32
;;
;; Loop 3
;;  header 26, latch 25
;;  depth 2, outer 1
;;  nodes: 26 25
;;
;; Loop 4
;;  header 56, latch 22
;;  depth 2, outer 1
;;  nodes: 56 22 20 21 17 19 57 18
;;
;; Loop 5
;;  header 19, latch 18
;;  depth 3, outer 4
;;  nodes: 19 18
;;
;; Loop 6
;;  header 15, latch 14
;;  depth 2, outer 1
;;  nodes: 15 14 11 13 59 12
;;
;; Loop 7
;;  header 13, latch 12
;;  depth 3, outer 6
;;  nodes: 13 12
;;
;; Loop 8
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8 7 6 5 60 3 4
;;
;; Loop 9
;;  header 6, latch 5
;;  depth 2, outer 8
;;  nodes: 6 5 3 4
;; 2 succs { 9 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 36 8 }
;; 8 succs { 9 }
;; 9 succs { 60 54 }
;; 60 succs { 6 }
;; 54 succs { 35 }
;; 10 succs { 58 23 }
;; 58 succs { 15 }
;; 11 succs { 59 14 }
;; 59 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 12 14 }
;; 14 succs { 15 }
;; 15 succs { 11 23 }
;; 23 succs { 56 }
;; 17 succs { 57 20 }
;; 57 succs { 19 }
;; 18 succs { 19 }
;; 19 succs { 18 20 }
;; 20 succs { 21 22 }
;; 21 succs { 22 }
;; 22 succs { 56 }
;; 56 succs { 17 24 }
;; 24 succs { 55 28 }
;; 55 succs { 26 }
;; 25 succs { 26 }
;; 26 succs { 25 27 }
;; 27 succs { 28 }
;; 28 succs { 29 30 }
;; 29 succs { 30 }
;; 30 succs { 31 34 }
;; 31 succs { 33 }
;; 32 succs { 33 }
;; 33 succs { 32 34 }
;; 34 succs { 35 }
;; 35 succs { 10 36 }
;; 36 succs { 50 52 }
;; 52 succs { 43 }
;; 37 succs { 53 40 }
;; 53 succs { 39 }
;; 38 succs { 39 }
;; 39 succs { 38 42 }
;; 40 succs { 41 42 }
;; 41 succs { 42 }
;; 42 succs { 43 }
;; 43 succs { 37 51 }
;; 51 succs { 49 }
;; 44 succs { 45 48 }
;; 45 succs { 47 }
;; 46 succs { 47 }
;; 47 succs { 46 48 }
;; 48 succs { 49 }
;; 49 succs { 44 50 }
;; 50 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

big_80 -> { big_18 }
imax_203 -> { imax_117 }
Incremental SSA update started at block: 9
Number of blocks in CFG: 61
Number of blocks to update: 14 ( 23%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

j_2 -> { j_15 }
j_7 -> { j_27 }
j_8 -> { j_27 }
j_10 -> { j_27 }
j_20 -> { j_27 }
j_97 -> { j_27 }
j_111 -> { j_27 }
j_145 -> { j_27 }
j_184 -> { j_27 }
j_186 -> { j_27 }
i_196 -> { i_11 }
j_202 -> { j_27 }
j_205 -> { j_27 }
j_206 -> { j_27 }
j_207 -> { j_27 }
i_208 -> { i_28 }
i_209 -> { i_28 }
i_210 -> { i_28 }
i_211 -> { i_28 }
_212 -> { _31 }
k_213 -> { k_33 }
i_214 -> { i_45 }
_215 -> { _48 }
k_216 -> { k_50 }
_217 -> { _72 }
k_218 -> { k_73 }
_219 -> { _77 }
_220 -> { _85 }
_221 -> { _89 }
_222 -> { _95 }
i_223 -> { i_101 }
_224 -> { _104 }
i_225 -> { i_118 }
i_226 -> { i_118 }
_227 -> { _125 }
_228 -> { _128 }
ii_229 -> { ii_130 }
ii_230 -> { ii_130 }
j_231 -> { j_133 }
i_232 -> { i_146 }
i_233 -> { i_146 }
i_234 -> { i_146 }
_235 -> { _147 }
_236 -> { _147 }
_237 -> { _149 }
j_238 -> { j_154 }
imax_239 -> { imax_203 }
imax_240 -> { imax_203 }
Incremental SSA update started at block: 9
Number of blocks in CFG: 71
Number of blocks to update: 60 ( 85%)



Value ranges after VRP:

a_1(D): VARYING
j_2: [0, 100]  EQUIVALENCES: { j_15 } (1 elements)
b_3(D): VARYING
_4: [0, 1]
.MEM_5: VARYING
j_7: [100, 100]  EQUIVALENCES: { j_27 j_202 } (2 elements)
j_8: [0, 99]  EQUIVALENCES: { j_27 j_202 } (2 elements)
j_10: [1, 100]  EQUIVALENCES: { j_27 j_202 j_207 } (3 elements)
i_11: [0, 101]
_12: [0, 100]
_13: [0, 80800]
_14: VARYING
j_15: [0, 101]
_16: VARYING
_17: VARYING
big_18: VARYING
j_19: [1, 101]
j_20: [1, 100]  EQUIVALENCES: { j_27 j_202 j_206 } (3 elements)
LUtempvv.215_21: VARYING
_22: [0, 100]
_23: [0, 800]
_24: VARYING
_25: VARYING
i_26: [1, 101]
j_27: [0, 101]
i_28: [0, 100]
_29: [0, 99]
_30: [0, 79992]
_31: VARYING
sum_32: VARYING
k_33: [0, 2147483646]
_34: VARYING
_35: [0, 98]
_36: [0, 79184]
_37: VARYING
_38: VARYING
_39: VARYING
sum_40: VARYING
sum_41: VARYING
k_42: [1, 99]
sum_43: VARYING
i_44: [1, 100]
i_45: [0, 2147483646]  EQUIVALENCES: { } (0 elements)
_46: [0, 100]
_47: [0, 80800]
_48: VARYING
sum_49: VARYING
k_50: [0, 100]
_51: VARYING
_52: [0, 99]
_53: [0, 79992]
_54: VARYING
_55: VARYING
_56: VARYING
sum_57: VARYING
sum_58: VARYING
k_59: [1, 100]
sum_60: VARYING
LUtempvv.216_61: VARYING
_62: [0, 800]
_63: VARYING
_64: VARYING
_65: VARYING
dum_66: VARYING
big_67: VARYING
i_68: [1, 101]
.MEM_69: VARYING
_70: [0, +INF]
_71: [0, +INF]
_72: VARYING
k_73: [0, 101]
dum_74: VARYING
_75: [0, +INF]
_76: [0, +INF]
_77: VARYING
_78: VARYING
k_79: [1, 101]
big_80: VARYING
_81: [-2147483647, +INF]
LUtempvv.217_82: VARYING
_83: [0, +INF]
_84: [0, +INF]
_85: VARYING
dum_86: VARYING
_87: [0, +INF]
_88: [0, +INF]
_89: VARYING
_90: VARYING
_91: [0, 100]
_92: [0, 400]
_93: VARYING
_94: [0, 80800]
_95: VARYING
_96: VARYING
j_97: [1, 100]  EQUIVALENCES: { j_27 j_202 j_206 } (3 elements)
_98: VARYING
dum_99: VARYING
i_100: [1, 100]
i_101: [1, 2147483646]
_102: [1, 100]
_103: [808, 80800]
_104: VARYING
_105: VARYING
_106: VARYING
i_107: [2, 101]
j_108: [1, 101]
_109: [0, 1]
big_110: VARYING
j_111: [1, 100]  EQUIVALENCES: { j_27 j_202 j_207 } (3 elements)
i_112: [0, 100]  EQUIVALENCES: { j_27 j_202 } (2 elements)
imax_113: [0, 2147483646]
imax_114: [0, 2147483646]
big_115: VARYING
imax_116: [0, 2147483646]
imax_117: [0, 2147483646]
i_118: [0, 101]
_119: [0, 100]
_120: [0, 400]
_121: VARYING
ip_122: VARYING
_123: ~[2147483648, 18446744071562067967]
_124: [0, 18446744073709551608]
_125: VARYING
sum_126: VARYING
_127: [0, 800]
_128: VARYING
_129: VARYING
ii_130: [-1, 2147483646]
_131: [0, 80800]
_132: VARYING
j_133: [0, 2147483646]  EQUIVALENCES: { } (0 elements)
_134: VARYING
_135: [0, 99]
_136: [0, 792]
_137: VARYING
_138: VARYING
_139: VARYING
sum_140: VARYING
sum_141: VARYING
j_142: [1, 100]
sum_143: VARYING
i_144: [1, 101]
j_145: [0, 0]  EQUIVALENCES: { j_27 j_202 } (2 elements)
i_146: [-1, 100]
_147: [0, 100]
_148: [0, 800]
_149: VARYING
sum_150: VARYING
j_151: [1, 100]
_152: [0, 79992]
_153: VARYING
j_154: [-2147483647, 101]
_155: VARYING
_156: ~[101, 18446744071562067968]
_157: [0, 18446744073709551608]
_158: VARYING
_159: VARYING
_160: VARYING
sum_161: VARYING
sum_162: VARYING
j_163: [-2147483646, 101]
_164: [0, 80800]
_165: VARYING
_166: VARYING
sum_167: VARYING
_168: VARYING
i_169: [-1, 99]
ii_170: [-1, 2147483646]  EQUIVALENCES: { } (0 elements)
.MEM_171: VARYING
.MEM_172: VARYING
big_173: VARYING
.MEM_174: VARYING
.MEM_175: VARYING
.MEM_176: VARYING
.MEM_177: VARYING
.MEM_178: VARYING
.MEM_179: VARYING
.MEM_180: VARYING
.MEM_181: VARYING
.MEM_182: VARYING
.MEM_183: VARYING
j_184: [0, 100]  EQUIVALENCES: { j_27 j_202 imax_203 } (3 elements)
j_186: [0, 0]  EQUIVALENCES: { j_27 j_202 } (2 elements)
i_196: [0, 100]  EQUIVALENCES: { i_11 } (1 elements)
d_200: [-2147483647, +INF]
d_201: [-2147483647, +INF]
j_202: [0, 100]  EQUIVALENCES: { j_27 } (1 elements)
imax_203: [0, 2147483646]
j_205: ~[imax_203, imax_203]  EQUIVALENCES: { j_27 j_202 } (2 elements)
j_206: [1, 100]  EQUIVALENCES: { j_27 j_202 } (2 elements)
j_207: [1, 100]  EQUIVALENCES: { j_27 j_202 } (2 elements)
i_208: [0, 99]  EQUIVALENCES: { i_28 } (1 elements)
i_209: [1, 99]  EQUIVALENCES: { i_28 i_208 i_211 } (3 elements)
i_210: [0, 0]  EQUIVALENCES: { i_28 i_208 } (2 elements)
i_211: [1, 99]  EQUIVALENCES: { i_28 i_208 } (2 elements)
_212: ~[0B, 0B]  EQUIVALENCES: { _31 } (1 elements)
k_213: [0, 98]  EQUIVALENCES: { k_33 } (1 elements)
i_214: [0, 100]  EQUIVALENCES: { i_45 } (1 elements)
_215: ~[0B, 0B]  EQUIVALENCES: { _48 } (1 elements)
k_216: [0, 99]  EQUIVALENCES: { k_50 } (1 elements)
_217: ~[0B, 0B]  EQUIVALENCES: { _72 } (1 elements)
k_218: [0, 100]  EQUIVALENCES: { k_73 } (1 elements)
_219: ~[0B, 0B]  EQUIVALENCES: { _77 } (1 elements)
_220: ~[0B, 0B]  EQUIVALENCES: { _85 } (1 elements)
_221: ~[0B, 0B]  EQUIVALENCES: { _89 } (1 elements)
_222: ~[0B, 0B]  EQUIVALENCES: { _95 } (1 elements)
i_223: [1, 100]  EQUIVALENCES: { i_101 } (1 elements)
_224: ~[0B, 0B]  EQUIVALENCES: { _104 } (1 elements)
i_225: [0, 100]  EQUIVALENCES: { i_118 } (1 elements)
i_226: [0, 100]  EQUIVALENCES: { i_118 i_225 } (2 elements)
_227: ~[0B, 0B]  EQUIVALENCES: { _125 } (1 elements)
_228: ~[0B, 0B]  EQUIVALENCES: { _128 } (1 elements)
ii_229: [-1, -1]  EQUIVALENCES: { ii_130 } (1 elements)
ii_230: [0, 2147483646]  EQUIVALENCES: { ii_130 } (1 elements)
j_231: [0, 99]  EQUIVALENCES: { j_133 } (1 elements)
i_232: [0, 100]  EQUIVALENCES: { i_146 } (1 elements)
i_233: [0, 99]  EQUIVALENCES: { i_146 i_232 } (2 elements)
i_234: [100, 100]  EQUIVALENCES: { i_146 i_232 } (2 elements)
_235: [0, 99]  EQUIVALENCES: { _147 } (1 elements)
_236: [100, 100]  EQUIVALENCES: { _147 } (1 elements)
_237: ~[0B, 0B]  EQUIVALENCES: { _149 } (1 elements)
j_238: [-2147483647, 100]  EQUIVALENCES: { j_154 } (1 elements)
imax_239: [0, 100]  EQUIVALENCES: { j_27 j_184 j_202 imax_203 } (4 elements)
imax_240: ~[j_205, j_205]  EQUIVALENCES: { imax_203 } (1 elements)


Simplified relational if (i_11 <= 100)
 into if (i_11 != 101)

Simplified relational if (j_27 <= 100)
 into if (j_27 != 101)

Simplified relational if (k_73 <= 100)
 into if (k_73 != 101)

Simplified relational if (j_15 <= 100)
 into if (j_15 != 101)

Simplified relational if (i_118 <= 100)
 into if (i_118 != 101)

Simplified relational if (i_146 >= 0)
 into if (i_146 != -1)

Simplified relational if (j_154 <= 100)
 into if (j_154 != 101)

Removing basic block 52
Removing basic block 36
Removing basic block 3
Removing basic block 10
Removing basic block 11
Removing basic block 12
Removing basic block 17
Removing basic block 18
Removing basic block 25
Removing basic block 32
Removing basic block 44
Removing basic block 46
Removing basic block 51
Removing basic block 53
Removing basic block 54
Removing basic block 55
Removing basic block 57
Removing basic block 58
Removing basic block 59
Removing basic block 60
Removing basic block 61
Removing basic block 62
Removing basic block 63
Removing basic block 64
Removing basic block 65
Removing basic block 66
Removing basic block 67
Removing basic block 68
Removing basic block 69
Removing basic block 70

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_241 -> { _109 }
.MEM_242 -> { .MEM_181 }
_243 -> { _109 _241 }
.MEM_244 -> { .MEM_181 .MEM_242 }
j_245 -> { j_154 }
sum_246 -> { sum_161 }
i_247 -> { i_146 }
.MEM_248 -> { .MEM_183 }
i_249 -> { i_101 }
.MEM_250 -> { .MEM_178 }
k_251 -> { k_73 }
.MEM_252 -> { .MEM_175 }
sum_253 -> { sum_57 }
k_254 -> { k_50 }
big_255 -> { big_67 }
i_256 -> { i_45 }
imax_257 -> { imax_117 }
.MEM_258 -> { .MEM_174 }
sum_259 -> { sum_40 }
k_260 -> { k_33 }
i_261 -> { i_28 }
.MEM_262 -> { .MEM_172 }
j_263 -> { j_27 }
imax_264 -> { imax_114 }
.MEM_265 -> { .MEM_180 }
d_266 -> { d_201 }
big_267 -> { big_18 }
j_268 -> { j_15 }
i_269 -> { i_11 }
.MEM_270 -> { .MEM_171 }
i_271 -> { i_11 }
j_272 -> { j_15 }
big_273 -> { big_18 }
j_274 -> { j_27 }
i_275 -> { i_28 }
k_276 -> { k_33 }
sum_277 -> { sum_40 }
i_278 -> { i_45 }
k_279 -> { k_50 }
sum_280 -> { sum_57 }
big_281 -> { big_67 }
k_282 -> { k_73 }
i_283 -> { i_101 }
imax_284 -> { imax_114 }
imax_285 -> { imax_117 }
i_286 -> { i_146 }
j_287 -> { j_154 }
sum_288 -> { sum_161 }
.MEM_289 -> { .MEM_171 }
.MEM_290 -> { .MEM_172 }
.MEM_291 -> { .MEM_174 }
.MEM_292 -> { .MEM_175 }
.MEM_293 -> { .MEM_178 }
.MEM_294 -> { .MEM_180 }
.MEM_295 -> { .MEM_183 }
d_296 -> { d_201 }

SSA names to release after updating the SSA web

_109 .MEM_181 
Incremental SSA update started at block: 63
Number of blocks in CFG: 64
Number of blocks to update: 54 ( 84%)


lusolve.constprop (double[101] * a, double * b)
{
  double sum;
  int ii;
  int ip;
  int j;
  int i;
  int imax;
  int k;
  int j;
  int i;
  double dum;
  double sum;
  double big;
  int D.7508;
  int indx[101];
  int d;
  int _4;
  long unsigned int _12;
  long unsigned int _13;
  double[101] * _14;
  double _16;
  double _17;
  fardouble * LUtempvv.215_21;
  long unsigned int _22;
  long unsigned int _23;
  fardouble * _24;
  double _25;
  long unsigned int _29;
  long unsigned int _30;
  double[101] * _31;
  double _34;
  long unsigned int _35;
  long unsigned int _36;
  double[101] * _37;
  double _38;
  double _39;
  long unsigned int _46;
  long unsigned int _47;
  double[101] * _48;
  double _51;
  long unsigned int _52;
  long unsigned int _53;
  double[101] * _54;
  double _55;
  double _56;
  fardouble * LUtempvv.216_61;
  long unsigned int _62;
  fardouble * _63;
  double _64;
  double _65;
  long unsigned int _70;
  long unsigned int _71;
  double[101] * _72;
  long unsigned int _75;
  long unsigned int _76;
  double[101] * _77;
  double _78;
  int _81;
  fardouble * LUtempvv.217_82;
  long unsigned int _83;
  long unsigned int _84;
  fardouble * _85;
  long unsigned int _87;
  long unsigned int _88;
  fardouble * _89;
  double _90;
  long unsigned int _91;
  long unsigned int _92;
  int * _93;
  long unsigned int _94;
  double[101] * _95;
  double _96;
  double _98;
  long unsigned int _102;
  long unsigned int _103;
  double[101] * _104;
  double _105;
  double _106;
  long unsigned int _119;
  long unsigned int _120;
  int * _121;
  long unsigned int _123;
  long unsigned int _124;
  double * _125;
  long unsigned int _127;
  double * _128;
  double _129;
  long unsigned int _131;
  double[101] * _132;
  double _134;
  long unsigned int _135;
  long unsigned int _136;
  double * _137;
  double _138;
  double _139;
  long unsigned int _147;
  long unsigned int _148;
  double * _149;
  long unsigned int _152;
  double[101] * _153;
  double _155;
  long unsigned int _156;
  long unsigned int _157;
  double * _158;
  double _159;
  double _160;
  long unsigned int _164;
  double[101] * _165;
  double _166;
  double _168;
  int _241;
  int _243;

  <bb 2> [0.93%]:
  goto <bb 63>; [100.00%]

  <bb 3> [33.94%]:
  # j_272 = PHI <j_15(6), j_268(62)>
  # big_273 = PHI <big_18(6), big_267(62)>
  _12 = (long unsigned int) i_271;
  _13 = _12 * 808;
  _14 = a_1(D) + _13;
  _16 = *_14[j_272];
  _17 = ABS_EXPR <_16>;
  if (_17 > big_273)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 4> [16.97%]:

  <bb 5> [33.94%]:
  # big_110 = PHI <big_273(3), _17(4)>
  j_19 = j_272 + 1;

  <bb 6> [33.94%]:
  # big_18 = PHI <big_110(5)>
  # j_15 = PHI <j_19(5)>
  if (j_15 != 101)
    goto <bb 3>; [82.35%]
  else
    goto <bb 7>; [17.65%]

  <bb 7> [5.99%]:
  # big_80 = PHI <big_18(6)>
  if (big_80 == 0.0)
    goto <bb 51>; [7.50%]
  else
    goto <bb 8>; [92.50%]

  <bb 8> [5.54%]:
  LUtempvv.215_21 = LUtempvv;
  _22 = (long unsigned int) i_271;
  _23 = _22 * 8;
  _24 = LUtempvv.215_21 + _23;
  _25 = 1.0e+0 / big_80;
  *_24 = _25;
  i_26 = i_271 + 1;

  <bb 9> [5.55%]:
  # i_11 = PHI <i_26(8)>
  if (i_11 != 101)
    goto <bb 10>; [91.24%]
  else
    goto <bb 61>; [8.76%]

  <bb 10> [5.99%]:
  # i_271 = PHI <i_11(9), i_269(63)>
  goto <bb 62>; [100.00%]

  <bb 11> [2.75%]:
  # j_274 = PHI <j_27(36), j_263(61)>
  # imax_284 = PHI <imax_114(36), imax_264(61)>
  # d_296 = PHI <d_201(36), d_266(61)>
  if (j_274 != 0)
    goto <bb 60>; [96.19%]
  else
    goto <bb 17>; [3.81%]

  <bb 12> [15.00%]:
  # i_275 = PHI <i_28(16), i_261(60)>
  _29 = (long unsigned int) i_275;
  _30 = _29 * 808;
  _31 = a_1(D) + _30;
  sum_32 = *_31[j_274];
  if (i_275 != 0)
    goto <bb 59>; [96.19%]
  else
    goto <bb 15>; [3.81%]

  <bb 13> [81.76%]:
  # k_276 = PHI <k_33(14), k_260(59)>
  # sum_277 = PHI <sum_40(14), sum_259(59)>
  _34 = *_31[k_276];
  _35 = (long unsigned int) k_276;
  _36 = _35 * 808;
  _37 = a_1(D) + _36;
  _38 = *_37[j_274];
  _39 = _34 * _38;
  sum_41 = sum_277 - _39;
  k_42 = k_276 + 1;

  <bb 14> [81.76%]:
  # sum_40 = PHI <sum_41(13)>
  # k_33 = PHI <k_42(13)>
  if (i_275 > k_33)
    goto <bb 13>; [82.35%]
  else
    goto <bb 15>; [17.65%]

  <bb 15> [15.00%]:
  # sum_43 = PHI <sum_32(12), sum_40(14)>
  *_31[j_274] = sum_43;
  i_44 = i_275 + 1;

  <bb 16> [15.00%]:
  # i_28 = PHI <i_44(15)>
  if (j_274 > i_28)
    goto <bb 12>; [82.35%]
  else
    goto <bb 17>; [17.65%]

  <bb 17> [2.75%]:
  # big_173 = PHI <0.0(16), 0.0(11)>
  # i_112 = PHI <j_274(16), 0(11)>
  # imax_113 = PHI <imax_284(16), imax_284(11)>
  goto <bb 58>; [100.00%]

  <bb 18> [15.59%]:
  # i_278 = PHI <i_45(24), i_256(58)>
  # big_281 = PHI <big_67(24), big_255(58)>
  # imax_285 = PHI <imax_117(24), imax_257(58)>
  _46 = (long unsigned int) i_278;
  _47 = _46 * 808;
  _48 = a_1(D) + _47;
  sum_49 = *_48[j_274];
  if (j_274 != 0)
    goto <bb 57>; [96.19%]
  else
    goto <bb 21>; [3.81%]

  <bb 19> [85.00%]:
  # k_279 = PHI <k_50(20), k_254(57)>
  # sum_280 = PHI <sum_57(20), sum_253(57)>
  _51 = *_48[k_279];
  _52 = (long unsigned int) k_279;
  _53 = _52 * 808;
  _54 = a_1(D) + _53;
  _55 = *_54[j_274];
  _56 = _51 * _55;
  sum_58 = sum_280 - _56;
  k_59 = k_279 + 1;

  <bb 20> [85.00%]:
  # sum_57 = PHI <sum_58(19)>
  # k_50 = PHI <k_59(19)>
  if (j_274 > k_50)
    goto <bb 19>; [82.35%]
  else
    goto <bb 21>; [17.65%]

  <bb 21> [15.59%]:
  # sum_60 = PHI <sum_49(18), sum_57(20)>
  *_48[j_274] = sum_60;
  LUtempvv.216_61 = LUtempvv;
  _62 = _46 * 8;
  _63 = LUtempvv.216_61 + _62;
  _64 = *_63;
  _65 = ABS_EXPR <sum_60>;
  dum_66 = _64 * _65;
  if (dum_66 >= big_281)
    goto <bb 22>; [50.00%]
  else
    goto <bb 23>; [50.00%]

  <bb 22> [7.80%]:

  <bb 23> [15.59%]:
  # big_115 = PHI <big_281(21), dum_66(22)>
  # imax_116 = PHI <imax_285(21), i_278(22)>
  i_68 = i_278 + 1;

  <bb 24> [15.60%]:
  # big_67 = PHI <big_115(23)>
  # i_45 = PHI <i_68(23)>
  # imax_117 = PHI <imax_116(23)>
  if (i_45 <= 100)
    goto <bb 18>; [82.36%]
  else
    goto <bb 25>; [17.64%]

  <bb 25> [2.75%]:
  # imax_203 = PHI <imax_117(24)>
  if (j_274 != imax_203)
    goto <bb 56>; [50.00%]
  else
    goto <bb 29>; [50.00%]

  <bb 26> [7.80%]:
  # k_282 = PHI <k_73(27), k_251(56)>
  _70 = (long unsigned int) imax_203;
  _71 = _70 * 808;
  _72 = a_1(D) + _71;
  dum_74 = *_72[k_282];
  _75 = (long unsigned int) j_274;
  _76 = _75 * 808;
  _77 = a_1(D) + _76;
  _78 = *_77[k_282];
  *_72[k_282] = _78;
  *_77[k_282] = dum_74;
  k_79 = k_282 + 1;

  <bb 27> [7.79%]:
  # k_73 = PHI <k_79(26)>
  if (k_73 != 101)
    goto <bb 26>; [82.34%]
  else
    goto <bb 28>; [17.66%]

  <bb 28> [1.38%]:
  _81 = -d_296;
  LUtempvv.217_82 = LUtempvv;
  _83 = (long unsigned int) imax_203;
  _84 = _83 * 8;
  _85 = LUtempvv.217_82 + _84;
  dum_86 = *_85;
  _87 = (long unsigned int) j_274;
  _88 = _87 * 8;
  _89 = LUtempvv.217_82 + _88;
  _90 = *_89;
  *_85 = _90;
  *_89 = dum_86;

  <bb 29> [2.75%]:
  # d_200 = PHI <d_296(25), _81(28)>
  _91 = (long unsigned int) j_274;
  _92 = _91 * 4;
  _93 = &indx + _92;
  *_93 = imax_203;
  _94 = _91 * 808;
  _95 = a_1(D) + _94;
  _96 = *_95[j_274];
  if (_96 == 0.0)
    goto <bb 30>; [50.00%]
  else
    goto <bb 31>; [50.00%]

  <bb 30> [1.38%]:
  *_95[j_274] = 9.99999999999999945153271454209571651729503702787392447108e-21;

  <bb 31> [2.75%]:
  if (j_274 != 100)
    goto <bb 32>; [98.00%]
  else
    goto <bb 35>; [2.00%]

  <bb 32> [2.70%]:
  _98 = *_95[j_274];
  dum_99 = 1.0e+0 / _98;
  i_100 = j_274 + 1;
  goto <bb 55>; [100.00%]

  <bb 33> [15.28%]:
  # i_283 = PHI <i_101(34), i_249(55)>
  _102 = (long unsigned int) i_283;
  _103 = _102 * 808;
  _104 = a_1(D) + _103;
  _105 = *_104[j_274];
  _106 = dum_99 * _105;
  *_104[j_274] = _106;
  i_107 = i_283 + 1;

  <bb 34> [15.28%]:
  # i_101 = PHI <i_107(33)>
  if (i_101 <= 100)
    goto <bb 33>; [82.35%]
  else
    goto <bb 35>; [17.65%]

  <bb 35> [2.75%]:
  j_108 = j_274 + 1;

  <bb 36> [2.75%]:
  # j_27 = PHI <j_108(35)>
  # imax_114 = PHI <imax_203(35)>
  # d_201 = PHI <d_200(35)>
  if (j_27 != 101)
    goto <bb 11>; [82.33%]
  else
    goto <bb 52>; [17.67%]

  <bb 37> [1.94%]:
  _119 = (long unsigned int) i_118;
  _120 = _119 * 4;
  _121 = &indx + _120;
  ip_122 = *_121;
  _123 = (long unsigned int) ip_122;
  _124 = _123 * 8;
  _125 = b_3(D) + _124;
  sum_126 = *_125;
  _127 = _119 * 8;
  _128 = b_3(D) + _127;
  _129 = *_128;
  *_125 = _129;
  if (ii_130 != -1)
    goto <bb 39>; [50.00%]
  else
    goto <bb 40>; [50.00%]

  <bb 38> [5.50%]:
  _131 = _119 * 808;
  _132 = a_1(D) + _131;
  _134 = *_132[j_133];
  _135 = (long unsigned int) j_133;
  _136 = _135 * 8;
  _137 = b_3(D) + _136;
  _138 = *_137;
  _139 = _134 * _138;
  sum_141 = sum_140 - _139;
  j_142 = j_133 + 1;

  <bb 39> [6.47%]:
  # j_133 = PHI <ii_130(37), j_142(38)>
  # sum_140 = PHI <sum_126(37), sum_141(38)>
  if (i_118 > j_133)
    goto <bb 38>; [85.00%]
  else
    goto <bb 42>; [15.00%]

  <bb 40> [0.97%]:
  if (sum_126 != 0.0)
    goto <bb 41>; [50.00%]
  else
    goto <bb 42>; [50.00%]

  <bb 41> [0.49%]:

  <bb 42> [1.94%]:
  # ii_170 = PHI <ii_130(39), -1(40), i_118(41)>
  # sum_143 = PHI <sum_140(39), sum_126(40), sum_126(41)>
  *_128 = sum_143;
  i_144 = i_118 + 1;

  <bb 43> [2.28%]:
  # i_118 = PHI <0(52), i_144(42)>
  # ii_130 = PHI <-1(52), ii_170(42)>
  if (i_118 != 101)
    goto <bb 37>; [85.00%]
  else
    goto <bb 54>; [15.00%]

  <bb 44> [1.94%]:
  # i_286 = PHI <i_146(49), i_247(54)>
  _147 = (long unsigned int) i_286;
  _148 = _147 * 8;
  _149 = b_3(D) + _148;
  sum_150 = *_149;
  if (i_286 != 100)
    goto <bb 45>; [98.00%]
  else
    goto <bb 48>; [2.00%]

  <bb 45> [1.90%]:
  j_151 = i_286 + 1;
  goto <bb 53>; [100.00%]

  <bb 46> [10.78%]:
  # j_287 = PHI <j_154(47), j_245(53)>
  # sum_288 = PHI <sum_161(47), sum_246(53)>
  _152 = _147 * 808;
  _153 = a_1(D) + _152;
  _155 = *_153[j_287];
  _156 = (long unsigned int) j_287;
  _157 = _156 * 8;
  _158 = b_3(D) + _157;
  _159 = *_158;
  _160 = _155 * _159;
  sum_162 = sum_288 - _160;
  j_163 = j_287 + 1;

  <bb 47> [10.78%]:
  # j_154 = PHI <j_163(46)>
  # sum_161 = PHI <sum_162(46)>
  if (j_154 != 101)
    goto <bb 46>; [82.36%]
  else
    goto <bb 48>; [17.64%]

  <bb 48> [1.94%]:
  # sum_167 = PHI <sum_150(44), sum_161(47)>
  _164 = _147 * 808;
  _165 = a_1(D) + _164;
  _166 = *_165[i_286];
  _168 = sum_167 / _166;
  *_149 = _168;
  i_169 = i_286 + -1;

  <bb 49> [1.94%]:
  # i_146 = PHI <i_169(48)>
  if (i_146 != -1)
    goto <bb 44>; [82.37%]
  else
    goto <bb 50>; [17.63%]

  <bb 50> [0.93%]:
  # _4 = PHI <0(51), 1(49)>
  indx ={v} {CLOBBER};
  return _4;

  <bb 51> [0.45%]:
  # _241 = PHI <0(7)>
  goto <bb 50>; [100.00%]

  <bb 52> [0.49%]:
  # _243 = PHI <1(36)>
  goto <bb 43>; [100.00%]

  <bb 53> [1.90%]:
  # j_245 = PHI <j_151(45)>
  # sum_246 = PHI <sum_150(45)>
  goto <bb 46>; [100.00%]

  <bb 54> [0.34%]:
  # i_247 = PHI <100(43)>
  goto <bb 44>; [100.00%]

  <bb 55> [2.70%]:
  # i_249 = PHI <i_100(32)>
  goto <bb 33>; [100.00%]

  <bb 56> [1.38%]:
  # k_251 = PHI <0(25)>
  goto <bb 26>; [100.00%]

  <bb 57> [15.00%]:
  # sum_253 = PHI <sum_49(18)>
  # k_254 = PHI <0(18)>
  goto <bb 19>; [100.00%]

  <bb 58> [2.75%]:
  # big_255 = PHI <big_173(17)>
  # i_256 = PHI <i_112(17)>
  # imax_257 = PHI <imax_113(17)>
  goto <bb 18>; [100.00%]

  <bb 59> [14.43%]:
  # sum_259 = PHI <sum_32(12)>
  # k_260 = PHI <0(12)>
  goto <bb 13>; [100.00%]

  <bb 60> [2.65%]:
  # i_261 = PHI <0(11)>
  goto <bb 12>; [100.00%]

  <bb 61> [0.49%]:
  # j_263 = PHI <0(9)>
  # imax_264 = PHI <0(9)>
  # d_266 = PHI <1(9)>
  goto <bb 11>; [100.00%]

  <bb 62> [5.99%]:
  # big_267 = PHI <0.0(10)>
  # j_268 = PHI <0(10)>
  goto <bb 3>; [100.00%]

  <bb 63> [0.93%]:
  # i_269 = PHI <0(2)>
  goto <bb 10>; [100.00%]

}



;; Function DoFPUTransIteration (DoFPUTransIteration, funcdef_no=70, decl_uid=4582, cgraph_uid=70, symbol_order=95)

;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;;
;; Loop 1
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12 11 9 10 8 6 7
;;
;; Loop 3
;;  header 11, latch 10
;;  depth 2, outer 1
;;  nodes: 11 10
;;
;; Loop 4
;;  header 8, latch 7
;;  depth 2, outer 1
;;  nodes: 8 7
;;
;; Loop 2
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 13 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 10 12 }
;; 12 succs { 13 }
;; 13 succs { 6 14 }
;; 14 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

rvalue_70 -> { rvalue_36 }
rvalue_133 -> { rvalue_90 }
rvalue_211 -> { rvalue_108 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 15
Number of blocks to update: 9 ( 60%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

nsteps_102 -> { nsteps_39 }
i_119 -> { i_10 }
nsteps_166 -> { nsteps_93 }
abase_212 -> { abase_16(D) }
nsteps_214 -> { nsteps_111 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 15
Number of blocks to update: 10 ( 67%)



Value ranges after VRP:

_2: VARYING
_3: VARYING
_4: VARYING
_5: [0, +INF]
_6: VARYING
_8: VARYING
i_10: [1, 2305843009213693952]
.MEM_11: VARYING
elapsed_14: VARYING
abase_16(D): VARYING
arraysize_18(D): VARYING
_20: VARYING
bbase_23(D): VARYING
i_26: [0, +INF]
x_33: VARYING
x_34: VARYING
rvalue_36: VARYING
rvalue_37: VARYING
nsteps_38: [1, 199]
nsteps_39: [0, 198]
_43: VARYING
rvalue_44: VARYING
_57: VARYING
_58: VARYING
rvalue_70: VARYING
rvalue_85: VARYING
x_87: VARYING
x_88: VARYING
rvalue_90: VARYING
rvalue_91: VARYING
nsteps_92: [1, 199]
nsteps_93: [0, 198]
_95: VARYING
_97: VARYING
rvalue_98: VARYING
nsteps_102: [1, 198]  EQUIVALENCES: { nsteps_39 } (1 elements)
rvalue_103: VARYING
x_105: VARYING
x_106: VARYING
rvalue_108: VARYING
rvalue_109: VARYING
nsteps_110: [1, 199]
nsteps_111: [0, 198]
_113: VARYING
_115: VARYING
rvalue_116: VARYING
i_119: [0, arraysize_18(D) + 18446744073709551615]  EQUIVALENCES: { i_10 } (1 elements)
_131: VARYING
_132: VARYING
rvalue_133: VARYING
_147: VARYING
_148: VARYING
_149: VARYING
_150: VARYING
_151: VARYING
nsteps_166: [1, 198]  EQUIVALENCES: { nsteps_93 } (1 elements)
_167: VARYING
_168: VARYING
_169: VARYING
_177: VARYING
_185: VARYING
_186: VARYING
_187: VARYING
_188: VARYING
_189: VARYING
_199: VARYING
_200: VARYING
.MEM_204: VARYING
.MEM_205: VARYING
.MEM_206: VARYING
rvalue_211: VARYING
abase_212: ~[0B, 0B]  EQUIVALENCES: { abase_16(D) } (1 elements)
nsteps_214: [1, 198]  EQUIVALENCES: { nsteps_111 } (1 elements)


DoFPUTransIteration (fardouble * abase, fardouble * bbase, long unsigned int arraysize)
{
  double D.7821;
  double D.7811;
  double D.7801;
  double D.7795;
  double D.7784;
  double D.7778;
  double D.7767;
  double D.7761;
  double D.7750;
  int nsteps;
  double rvalue;
  double dx;
  double x;
  double D.7746;
  int nsteps;
  double rvalue;
  double dx;
  double x;
  double D.7737;
  double D.7721;
  double D.7710;
  double D.7699;
  int nsteps;
  double rvalue;
  double dx;
  double x;
  double D.7695;
  long unsigned int elapsed;
  long unsigned int i;
  double _2;
  double _3;
  double _4;
  long unsigned int _5;
  fardouble * _6;
  fardouble * _8;
  long unsigned int _20;
  double _43;
  double _57;
  double _58;
  double _95;
  double _97;
  double _113;
  double _115;
  double _131;
  double _132;
  double _147;
  double _148;
  double _149;
  double _150;
  double _151;
  double _167;
  double _168;
  double _169;
  double _177;
  double _185;
  double _186;
  double _187;
  double _188;
  double _189;
  double _199;
  double _200;

  <bb 2> [2.65%]:
  elapsed_14 = StartStopwatch ();
  goto <bb 4>; [100.00%]

  <bb 3> [15.00%]:
  x_34 = x_33 + 1.00000000000000002081668171172168513294309377670288085938e-2;
  _57 = x_34 + 1.0e+0;
  _58 = pow (_57, x_34);
  rvalue_37 = rvalue_36 + _58;

  <bb 4> [17.65%]:
  # nsteps_38 = PHI <199(2), nsteps_39(3)>
  # x_33 = PHI <0.0(2), x_34(3)>
  # rvalue_36 = PHI <5.0e-1(2), rvalue_37(3)>
  nsteps_39 = nsteps_38 + -1;
  if (nsteps_39 != 0)
    goto <bb 3>; [85.00%]
  else
    goto <bb 5>; [15.00%]

  <bb 5> [2.65%]:
  # rvalue_70 = PHI <rvalue_36(4)>
  _43 = rvalue_70 + 4.5e+0;
  rvalue_44 = _43 * 1.00000000000000002081668171172168513294309377670288085938e-2;
  _2 = rvalue_44 * 5.0e-1;
  *abase_16(D) = _2;
  goto <bb 13>; [100.00%]

  <bb 6> [15.00%]:
  _3 = (double) i_10;
  _4 = _3 * 3.141592653589793115997963468544185161590576171875e+0;
  _5 = i_10 * 8;
  _6 = abase_16(D) + _5;
  _131 = _4 * 0.0;
  _132 = cos (_131);
  rvalue_103 = _132 * 5.0e-1;
  goto <bb 8>; [100.00%]

  <bb 7> [85.00%]:
  x_106 = x_105 + 1.00000000000000002081668171172168513294309377670288085938e-2;
  _147 = x_106 + 1.0e+0;
  _148 = pow (_147, x_106);
  _149 = _4 * x_106;
  _150 = cos (_149);
  _151 = _148 * _150;
  rvalue_109 = rvalue_108 + _151;

  <bb 8> [100.00%]:
  # nsteps_110 = PHI <199(6), nsteps_111(7)>
  # x_105 = PHI <0.0(6), x_106(7)>
  # rvalue_108 = PHI <rvalue_103(6), rvalue_109(7)>
  nsteps_111 = nsteps_110 + -1;
  if (nsteps_111 != 0)
    goto <bb 7>; [85.00%]
  else
    goto <bb 9>; [15.00%]

  <bb 9> [15.00%]:
  # rvalue_211 = PHI <rvalue_108(8)>
  _167 = _4 * 2.0e+0;
  _168 = cos (_167);
  _169 = _168 * 9.0e+0;
  _113 = _169 * 5.0e-1;
  _115 = rvalue_211 + _113;
  rvalue_116 = _115 * 1.00000000000000002081668171172168513294309377670288085938e-2;
  *_6 = rvalue_116;
  _8 = bbase_23(D) + _5;
  _177 = sin (_131);
  rvalue_85 = _177 * 5.0e-1;
  goto <bb 11>; [100.00%]

  <bb 10> [85.00%]:
  x_88 = x_87 + 1.00000000000000002081668171172168513294309377670288085938e-2;
  _185 = x_88 + 1.0e+0;
  _186 = pow (_185, x_88);
  _187 = _4 * x_88;
  _188 = sin (_187);
  _189 = _186 * _188;
  rvalue_91 = rvalue_90 + _189;

  <bb 11> [100.00%]:
  # nsteps_92 = PHI <199(9), nsteps_93(10)>
  # x_87 = PHI <0.0(9), x_88(10)>
  # rvalue_90 = PHI <rvalue_85(9), rvalue_91(10)>
  nsteps_93 = nsteps_92 + -1;
  if (nsteps_93 != 0)
    goto <bb 10>; [85.00%]
  else
    goto <bb 12>; [15.00%]

  <bb 12> [15.00%]:
  # rvalue_133 = PHI <rvalue_90(11)>
  _199 = sin (_167);
  _200 = _199 * 9.0e+0;
  _95 = _200 * 5.0e-1;
  _97 = rvalue_133 + _95;
  rvalue_98 = _97 * 1.00000000000000002081668171172168513294309377670288085938e-2;
  *_8 = rvalue_98;
  i_26 = i_10 + 1;

  <bb 13> [17.65%]:
  # i_10 = PHI <1(5), i_26(12)>
  if (i_10 < arraysize_18(D))
    goto <bb 6>; [85.00%]
  else
    goto <bb 14>; [15.00%]

  <bb 14> [2.65%]:
  _20 = StopStopwatch (elapsed_14);
  return _20;

}



;; Function cipher_idea (cipher_idea, funcdef_no=88, decl_uid=4647, cgraph_uid=88, symbol_order=113)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 35 24 25 26 27 28 29 30 31 32 33 34
;;
;; Loop 1
;;  header 3, latch 35
;;  depth 1, outer 0
;;  nodes: 3 35 23 20 21 22 18 15 16 17 13 10 11 12 8 5 6 7 4 9 14 19
;; 2 succs { 3 }
;; 3 succs { 4 7 }
;; 4 succs { 5 6 }
;; 5 succs { 8 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 9 12 }
;; 9 succs { 10 11 }
;; 10 succs { 13 }
;; 11 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 14 17 }
;; 14 succs { 15 16 }
;; 15 succs { 18 }
;; 16 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 19 22 }
;; 19 succs { 20 21 }
;; 20 succs { 23 }
;; 21 succs { 23 }
;; 22 succs { 23 }
;; 23 succs { 35 24 }
;; 35 succs { 3 }
;; 24 succs { 25 28 }
;; 25 succs { 26 27 }
;; 26 succs { 29 }
;; 27 succs { 29 }
;; 28 succs { 29 }
;; 29 succs { 30 33 }
;; 30 succs { 31 32 }
;; 31 succs { 34 }
;; 32 succs { 34 }
;; 33 succs { 34 }
;; 34 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

Z_89 -> { Z_25 }
t2_91 -> { t2_48 }
x1_92 -> { x1_49 }
x4_103 -> { x4_50 }
t2_105 -> { t2_51 }
x2_106 -> { x2_52 }
_119 -> { _60 }
_120 -> { _73 }
_133 -> { _80 }
Incremental SSA update started at block: 3
Number of blocks in CFG: 36
Number of blocks to update: 10 ( 28%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_1 -> { _80 }
_44 -> { _80 }
x3_63 -> { x3_43 }
x1_70 -> { x1_26 }
Z_74 -> { Z_89 }
_77 -> { _16 }
_90 -> { _13 }
_104 -> { _23 }
x4_117 -> { x4_29 }
in_118 -> { in_32(D) }
t1_131 -> { t1_46 }
r_132 -> { r_53 }
_134 -> { _3 }
_147 -> { _4 }
_148 -> { _6 }
_161 -> { _7 }
_162 -> { _9 }
_173 -> { _14 }
Z_174 -> { Z_25 }
x3_175 -> { x3_43 }
out_176 -> { out_54(D) }
Incremental SSA update started at block: 2
Number of blocks in CFG: 36
Number of blocks to update: 24 ( 67%)



Value ranges after VRP:

_1: [_80, _80]  EQUIVALENCES: { x3_43 x3_63 _80 } (3 elements)
_2: VARYING
_3: [0, 65535]
_4: [0, 65535]
_5: VARYING
_6: [0, 65535]
_7: [0, 65535]
_8: VARYING
_9: [0, 65535]
_10: [0, 65535]
_11: [0, +INF]
_12: VARYING
_13: [0, 65535]
_14: [0, 65535]
_15: VARYING
_16: [0, 65535]
_17: [0, 65535]
_18: VARYING
_19: [0, +INF]
_20: VARYING
_21: [0, +INF]
_22: VARYING
_23: [0, 65535]
_24: [0, 65535]
Z_25: ~[0B, 0B]
x1_26: VARYING
x2_27: VARYING
x3_28: VARYING
x4_29: VARYING
r_30: [1, 8]
.MEM_31: VARYING
in_32(D): VARYING
x1_34: VARYING
x2_35: VARYING
x3_36: VARYING
x4_37: VARYING
Z_38(D): ~[0B, 0B]
_39: ~[1, 1]
_40: VARYING
x2_41: [0, +INF]
_42: VARYING
x3_43: [0, +INF]
_44: ~[x3_175, x3_175]  EQUIVALENCES: { _80 } (1 elements)
t2_45: [0, +INF]
t1_46: [0, +INF]
Z_47: ~[0B, 0B]
t2_48: [0, +INF]
x1_49: [0, +INF]
x4_50: [0, +INF]
t2_51: [0, +INF]
x2_52: [0, +INF]
r_53: [0, 7]
out_54(D): VARYING
_59: [0, +INF]
_60: VARYING
x3_63: [_80, _80]  EQUIVALENCES: { x3_43 _80 } (2 elements)
_64: [0, +INF]
_65: [0, +INF]
_66: [0, +INF]
x1_70: ~[0, 0]  EQUIVALENCES: { x1_26 } (1 elements)
_71: ~[1, 1]
_72: [0, +INF]
_73: VARYING
Z_74: ~[0B, 0B]  EQUIVALENCES: { Z_25 Z_89 } (2 elements)
_77: [1, 65535]  EQUIVALENCES: { _16 } (1 elements)
_78: ~[1, 1]
_79: [0, +INF]
_80: VARYING
_82: [0, +INF]
_83: [0, +INF]
_84: [0, +INF]
_86: [0, +INF]
_87: [0, +INF]
_88: [0, +INF]
Z_89: ~[0B, 0B]  EQUIVALENCES: { Z_25 } (1 elements)
_90: [1, 65535]  EQUIVALENCES: { _13 } (1 elements)
t2_91: [0, +INF]
x1_92: [0, +INF]
_93: [1, +INF(OVF)]
p_94: [0, +INF]
b_95: [0, +INF]
_96: [0, 65535]
a_97: [0, +INF]
_98: [0, +INF]
_99: [0, +INF]
_100: [0, 1]
_101: [0, +INF]
x4_103: [0, +INF]
_104: [1, 65535]  EQUIVALENCES: { _23 } (1 elements)
t2_105: [0, +INF]
x2_106: [0, +INF]
_107: [1, +INF(OVF)]
p_108: [0, +INF]
b_109: [0, +INF]
_110: [0, 65535]
a_111: [0, +INF]
_112: [0, +INF]
_113: [0, +INF]
_114: [0, 1]
_115: [0, +INF]
x4_117: ~[0, 0]  EQUIVALENCES: { x4_29 } (1 elements)
in_118: ~[0B, 0B]  EQUIVALENCES: { in_32(D) } (1 elements)
_119: [_60, _60]
_120: [_73, _73]
_121: [0, +INF(OVF)]
p_122: [0, +INF]
b_123: [0, +INF]
_124: [0, 65535]
a_125: [0, +INF]
_126: [0, +INF]
_127: [0, +INF]
_128: [0, 1]
_129: [0, +INF]
t1_131: [1, +INF]  EQUIVALENCES: { t1_46 } (1 elements)
r_132: [1, 7]  EQUIVALENCES: { r_53 } (1 elements)
_133: [_80, _80]
_134: [1, 65535]  EQUIVALENCES: { _3 } (1 elements)
_135: [1, +INF(OVF)]
p_136: [0, +INF]
b_137: [0, +INF]
_138: [0, 65535]
a_139: [0, +INF]
_140: [0, +INF]
_141: [0, +INF]
_142: [0, 1]
_143: [0, +INF]
_147: [1, 65535]  EQUIVALENCES: { _4 } (1 elements)
_148: [1, 65535]  EQUIVALENCES: { _6 } (1 elements)
_149: [0, +INF(OVF)]
p_150: [0, +INF]
b_151: [0, +INF]
_152: [0, 65535]
a_153: [0, +INF]
_154: [0, +INF]
_155: [0, +INF]
_156: [0, 1]
_157: [0, +INF]
_161: [1, 65535]  EQUIVALENCES: { _7 } (1 elements)
_162: [1, 65535]  EQUIVALENCES: { _9 } (1 elements)
_163: [0, +INF(OVF)]
p_164: [0, +INF]
b_165: [0, +INF]
_166: [0, 65535]
a_167: [0, +INF]
_168: [0, +INF]
_169: [0, +INF]
_170: [0, 1]
_171: [0, +INF]
_173: [1, 65535]  EQUIVALENCES: { _14 } (1 elements)
Z_174: ~[0B, 0B]  EQUIVALENCES: { Z_25 } (1 elements)
x3_175: ~[_80, _80]  EQUIVALENCES: { x3_43 } (1 elements)
out_176: ~[0B, 0B]  EQUIVALENCES: { out_54(D) } (1 elements)


Removing basic block 35
cipher_idea (u16 * in, u16 * out, u16 * Z)
{
  register u32 p;
  u16 D.7896;
  u16 a;
  u16 b;
  register u32 p;
  u16 D.7892;
  u16 a;
  u16 b;
  register u32 p;
  u16 D.7888;
  u16 a;
  u16 b;
  register u32 p;
  u16 D.7884;
  u16 a;
  u16 b;
  register u32 p;
  u16 D.7880;
  u16 a;
  u16 b;
  register u32 p;
  u16 D.7876;
  u16 a;
  u16 b;
  int r;
  register u16 t2;
  register u16 t1;
  register u16 x4;
  register u16 x3;
  register u16 x2;
  register u16 x1;
  short unsigned int _2;
  int _3;
  int _4;
  short unsigned int _5;
  int _6;
  int _7;
  short unsigned int _8;
  int _9;
  int _10;
  short unsigned int _11;
  short unsigned int _12;
  int _13;
  int _14;
  short unsigned int _15;
  int _16;
  int _17;
  short unsigned int _18;
  short unsigned int _19;
  short unsigned int _20;
  short unsigned int _21;
  short unsigned int _22;
  int _23;
  int _24;
  short unsigned int _39;
  short unsigned int _40;
  short unsigned int _42;
  short unsigned int _59;
  short unsigned int _60;
  short unsigned int _64;
  short unsigned int _65;
  short unsigned int _66;
  short unsigned int _71;
  short unsigned int _72;
  short unsigned int _73;
  short unsigned int _78;
  short unsigned int _79;
  short unsigned int _80;
  short unsigned int _82;
  short unsigned int _83;
  short unsigned int _84;
  short unsigned int _86;
  short unsigned int _87;
  short unsigned int _88;
  int _93;
  unsigned int _96;
  short unsigned int _98;
  _Bool _99;
  short unsigned int _100;
  short unsigned int _101;
  int _107;
  unsigned int _110;
  short unsigned int _112;
  _Bool _113;
  short unsigned int _114;
  short unsigned int _115;
  short unsigned int _119;
  short unsigned int _120;
  int _121;
  unsigned int _124;
  short unsigned int _126;
  _Bool _127;
  short unsigned int _128;
  short unsigned int _129;
  short unsigned int _133;
  int _135;
  unsigned int _138;
  short unsigned int _140;
  _Bool _141;
  short unsigned int _142;
  short unsigned int _143;
  int _149;
  unsigned int _152;
  short unsigned int _154;
  _Bool _155;
  short unsigned int _156;
  short unsigned int _157;
  int _163;
  unsigned int _166;
  short unsigned int _168;
  _Bool _169;
  short unsigned int _170;
  short unsigned int _171;

  <bb 2> [12.50%]:
  x1_34 = *in_32(D);
  x2_35 = MEM[(u16 *)in_32(D) + 2B];
  x3_36 = MEM[(u16 *)in_32(D) + 4B];
  x4_37 = MEM[(u16 *)in_32(D) + 6B];

  <bb 3> [100.00%]:
  # Z_25 = PHI <Z_38(D)(2), Z_47(23)>
  # x1_26 = PHI <x1_34(2), x1_49(23)>
  # x2_27 = PHI <x2_35(2), x2_52(23)>
  # x3_28 = PHI <x3_36(2), t2_51(23)>
  # x4_29 = PHI <x4_37(2), x4_50(23)>
  # r_30 = PHI <8(2), r_53(23)>
  _2 = *Z_25;
  _3 = (int) _2;
  _4 = (int) x1_26;
  if (x1_26 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 4> [50.00%]:
  if (_2 != 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 5> [25.00%]:
  _93 = _3 * _4;
  p_94 = (u32) _93;
  b_95 = (u16) _93;
  _96 = p_94 >> 16;
  a_97 = (u16) _96;
  _98 = b_95 - a_97;
  _99 = b_95 < a_97;
  _100 = (short unsigned int) _99;
  _101 = _98 + _100;
  goto <bb 8>; [100.00%]

  <bb 6> [25.00%]:
  _78 = 1 - x1_26;
  goto <bb 8>; [100.00%]

  <bb 7> [50.00%]:
  _79 = 1 - _2;

  <bb 8> [100.00%]:
  # _80 = PHI <_101(5), _78(6), _79(7)>
  _40 = MEM[(u16 *)Z_25 + 2B];
  x2_41 = x2_27 + _40;
  _42 = MEM[(u16 *)Z_25 + 4B];
  x3_43 = x3_28 + _42;
  _5 = MEM[(u16 *)Z_25 + 6B];
  _6 = (int) _5;
  _7 = (int) x4_29;
  if (x4_29 != 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 9> [50.00%]:
  if (_5 != 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 10> [25.00%]:
  _107 = _6 * _7;
  p_108 = (u32) _107;
  b_109 = (u16) _107;
  _110 = p_108 >> 16;
  a_111 = (u16) _110;
  _112 = b_109 - a_111;
  _113 = b_109 < a_111;
  _114 = (short unsigned int) _113;
  _115 = _112 + _114;
  goto <bb 13>; [100.00%]

  <bb 11> [25.00%]:
  _71 = 1 - x4_29;
  goto <bb 13>; [100.00%]

  <bb 12> [50.00%]:
  _72 = 1 - _5;

  <bb 13> [100.00%]:
  # _73 = PHI <_115(10), _71(11), _72(12)>
  t2_45 = x3_43 ^ _80;
  _8 = MEM[(u16 *)Z_25 + 8B];
  _9 = (int) _8;
  _10 = (int) t2_45;
  if (x3_43 != _80)
    goto <bb 14>; [66.00%]
  else
    goto <bb 17>; [34.00%]

  <bb 14> [66.00%]:
  if (_8 != 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 15> [33.00%]:
  _121 = _9 * _10;
  p_122 = (u32) _121;
  b_123 = (u16) _121;
  _124 = p_122 >> 16;
  a_125 = (u16) _124;
  _126 = b_123 - a_125;
  _127 = b_123 < a_125;
  _128 = (short unsigned int) _127;
  _129 = _126 + _128;
  goto <bb 18>; [100.00%]

  <bb 16> [33.00%]:
  _64 = 1 - t2_45;
  goto <bb 18>; [100.00%]

  <bb 17> [34.00%]:
  _65 = 1 - _8;

  <bb 18> [100.00%]:
  # _66 = PHI <_129(15), _64(16), _65(17)>
  _11 = x2_41 ^ _73;
  t1_46 = _11 + _66;
  Z_47 = &MEM[(void *)Z_25 + 12B];
  _12 = MEM[(u16 *)Z_25 + 10B];
  _13 = (int) _12;
  _14 = (int) t1_46;
  if (t1_46 != 0)
    goto <bb 19>; [50.00%]
  else
    goto <bb 22>; [50.00%]

  <bb 19> [50.00%]:
  if (_12 != 0)
    goto <bb 20>; [50.00%]
  else
    goto <bb 21>; [50.00%]

  <bb 20> [25.00%]:
  _135 = _13 * _14;
  p_136 = (u32) _135;
  b_137 = (u16) _135;
  _138 = p_136 >> 16;
  a_139 = (u16) _138;
  _140 = b_137 - a_139;
  _141 = b_137 < a_139;
  _142 = (short unsigned int) _141;
  _143 = _140 + _142;
  goto <bb 23>; [100.00%]

  <bb 21> [25.00%]:
  _39 = 1 - t1_46;
  goto <bb 23>; [100.00%]

  <bb 22> [50.00%]:
  _59 = 1 - _12;

  <bb 23> [100.00%]:
  # _60 = PHI <_143(20), _39(21), _59(22)>
  t2_48 = _60 + _66;
  x1_49 = _60 ^ _80;
  x4_50 = t2_48 ^ _73;
  t2_51 = x2_41 ^ t2_48;
  x2_52 = x3_43 ^ _60;
  r_53 = r_30 + -1;
  if (r_53 != 0)
    goto <bb 3>; [87.50%]
  else
    goto <bb 24>; [12.50%]

  <bb 24> [12.50%]:
  # Z_89 = PHI <Z_25(23)>
  # t2_91 = PHI <t2_48(23)>
  # x1_92 = PHI <x1_49(23)>
  # x4_103 = PHI <x4_50(23)>
  # t2_105 = PHI <t2_51(23)>
  # x2_106 = PHI <x2_52(23)>
  # _119 = PHI <_60(23)>
  # _120 = PHI <_73(23)>
  # _133 = PHI <_80(23)>
  _15 = MEM[(u16 *)Z_89 + 12B];
  _16 = (int) _15;
  _17 = (int) x1_92;
  if (_119 != _133)
    goto <bb 25>; [66.00%]
  else
    goto <bb 28>; [34.00%]

  <bb 25> [8.25%]:
  if (_15 != 0)
    goto <bb 26>; [50.00%]
  else
    goto <bb 27>; [50.00%]

  <bb 26> [4.12%]:
  _149 = _16 * _17;
  p_150 = (u32) _149;
  b_151 = (u16) _149;
  _152 = p_150 >> 16;
  a_153 = (u16) _152;
  _154 = b_151 - a_153;
  _155 = b_151 < a_153;
  _156 = (short unsigned int) _155;
  _157 = _154 + _156;
  goto <bb 29>; [100.00%]

  <bb 27> [4.12%]:
  _86 = 1 - x1_92;
  goto <bb 29>; [100.00%]

  <bb 28> [4.25%]:
  _87 = 1 - _15;

  <bb 29> [12.50%]:
  # _88 = PHI <_157(26), _86(27), _87(28)>
  *out_54(D) = _88;
  _18 = MEM[(u16 *)Z_89 + 14B];
  _19 = _18 + t2_105;
  MEM[(u16 *)out_54(D) + 2B] = _19;
  _20 = MEM[(u16 *)Z_89 + 16B];
  _21 = _20 + x2_106;
  MEM[(u16 *)out_54(D) + 4B] = _21;
  _22 = MEM[(u16 *)Z_89 + 18B];
  _23 = (int) _22;
  _24 = (int) x4_103;
  if (t2_91 != _120)
    goto <bb 30>; [66.00%]
  else
    goto <bb 33>; [34.00%]

  <bb 30> [8.25%]:
  if (_22 != 0)
    goto <bb 31>; [50.00%]
  else
    goto <bb 32>; [50.00%]

  <bb 31> [4.12%]:
  _163 = _23 * _24;
  p_164 = (u32) _163;
  b_165 = (u16) _163;
  _166 = p_164 >> 16;
  a_167 = (u16) _166;
  _168 = b_165 - a_167;
  _169 = b_165 < a_167;
  _170 = (short unsigned int) _169;
  _171 = _168 + _170;
  goto <bb 34>; [100.00%]

  <bb 32> [4.12%]:
  _82 = 1 - x4_103;
  goto <bb 34>; [100.00%]

  <bb 33> [4.25%]:
  _83 = 1 - _22;

  <bb 34> [12.50%]:
  # _84 = PHI <_171(31), _82(32), _83(33)>
  MEM[(u16 *)out_54(D) + 6B] = _84;
  return;

}



;; Function DoNumSortIteration (DoNumSortIteration, funcdef_no=53, decl_uid=4494, cgraph_uid=53, symbol_order=78)

;; 10 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 36 5 6 7 37 8 9 10 11 12 13 14 40 15 17 39 18 19 35 33 20 21 22 23 24 25 27 38 28 29 34 30 31 32
;;
;; Loop 1
;;  header 31, latch 30
;;  depth 1, outer 0
;;  nodes: 31 30 29 33 28 38 27 34 24 25 23 20 21 22 19 10 18 39 17 40 14 11 12 13 35 15
;;
;; Loop 5
;;  header 29, latch 28
;;  depth 2, outer 1
;;  nodes: 29 28 38 27 34 24 25 23 20 21 22
;;
;; Loop 8
;;  header 38, latch 27
;;  depth 3, outer 5
;;  nodes: 38 27 24 25 23 20 21 22
;;
;; Loop 6
;;  header 19, latch 18
;;  depth 2, outer 1
;;  nodes: 19 18 39 17 40 14 11 12 13 35 15
;;
;; Loop 7
;;  header 17, latch 15
;;  depth 3, outer 6
;;  nodes: 17 15 14 11 12 13 39 40
;;
;; Loop 9
;;  header 39, latch 40
;;  depth 4, outer 7
;;  nodes: 39 40 14 11 12 13
;;
;; Loop 2
;;  header 8, latch 37
;;  depth 1, outer 0
;;  nodes: 8 37 7 5 6
;;
;; Loop 3
;;  header 7, latch 6
;;  depth 2, outer 2
;;  nodes: 7 6
;;
;; Loop 4
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 36 }
;; 36 succs { 8 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 37 }
;; 37 succs { 8 }
;; 8 succs { 5 9 }
;; 9 succs { 31 }
;; 10 succs { 19 }
;; 11 succs { 12 14 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 40 }
;; 40 succs { 39 }
;; 15 succs { 17 }
;; 17 succs { 39 }
;; 39 succs { 11 18 }
;; 18 succs { 19 }
;; 19 succs { 35 33 }
;; 35 succs { 17 }
;; 33 succs { 29 }
;; 20 succs { 21 23 }
;; 21 succs { 22 23 }
;; 22 succs { 23 }
;; 23 succs { 24 25 }
;; 24 succs { 27 }
;; 25 succs { 27 }
;; 27 succs { 38 }
;; 38 succs { 20 28 }
;; 28 succs { 29 }
;; 29 succs { 34 30 }
;; 34 succs { 38 }
;; 30 succs { 31 }
;; 31 succs { 10 32 }
;; 32 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

k_12 -> { k_59 }
_17 -> { _58 }
_63 -> { _57 }
_102 -> { _61 }
_103 -> { _62 }
Incremental SSA update started at block: 17
Number of blocks in CFG: 41
Number of blocks to update: 3 (  7%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_104 -> { _1 }
_105 -> { _4 }
i_106 -> { i_6 }
arraysize_107 -> { arraysize_10(D) }
i.9_108 -> { i.9_20 }
i.12_109 -> { i.12_29 }
numarrays_110 -> { numarrays_37 }
i_111 -> { i_39 }
i_112 -> { i_41 }
i_113 -> { i_41 }
i_114 -> { i_41 }
i_115 -> { i_41 }
i_116 -> { i_41 }
_117 -> { _44 }
_118 -> { _47 }
_119 -> { _47 }
_120 -> { _47 }
_121 -> { _57 }
_122 -> { _58 }
_123 -> { _61 }
_124 -> { _62 }
_125 -> { _65 }
_126 -> { _65 }
_127 -> { _65 }
_128 -> { _75 }
_129 -> { _76 }
_130 -> { _79 }
_131 -> { _80 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 44
Number of blocks to update: 34 ( 77%)



Value ranges after VRP:

_1: ~[2305843009213693951, 18446744073709551614]
_2: [0, +INF]
_3: [0, +INF]
_4: VARYING
_5: [0, 65535]
i_6: [0, 18446744073709551614]
.MEM_7: VARYING
arraybase_9(D): VARYING
arraysize_10(D): VARYING
numarrays_11(D): [0, 65535]
k_12: [k_59, k_59]  EQUIVALENCES: { } (0 elements)
elapsed_14: VARYING
elapsed_16: VARYING
_17: [-INF, _62 + -1]  EQUIVALENCES: { _58 } (1 elements)
i_18: [1, 65535]
_19: VARYING
i.9_20: [0, 2305843009213693951]
_21: [0, +INF]
_22: VARYING
_23: [-2147483648, 2147483647]
i_24: [0, 2305843009213693951]
i_25: [1, 2305843009213693952]
_26: [0, 18446744073709551608]
darray_27: VARYING
darray_28: VARYING
i.12_29: [0, 2305843009213693951]
_30: [0, 18446744073709551600]
_31: VARYING
_32: VARYING
_33: VARYING
i_34: [0, 2305843009213693951]
i_35: [1, 2305843009213693952]
numarrays_36: VARYING
numarrays_37: [0, +INF]
i_38: [0, 9223372036854775807]
i_39: [0, 9223372036854775807]
i_40: [0, 9223372036854775806]
i_41: ~[18446744073709551614, 18446744073709551614]
_42: VARYING
_43: [0, +INF]
_44: VARYING
_45: VARYING
i_46: [0, 18446744073709551613]
_47: [0, +INF]
_48: [0, +INF]
_49: VARYING
_50: VARYING
_51: [0, +INF]
_52: [0, +INF]
_53: VARYING
_54: VARYING
i_55: VARYING
_56: [0, +INF]
_57: VARYING
_58: VARYING
k_59: VARYING
_60: [0, +INF]
_61: VARYING
_62: VARYING
_63: ~[0B, 0B]  EQUIVALENCES: { _57 } (1 elements)
.MEM_64: VARYING
_65: [0, +INF]
_66: [0, +INF]
_67: VARYING
_68: VARYING
_69: [1, +INF]
_70: [0, +INF]
_71: VARYING
_72: VARYING
i_73: VARYING
_74: [0, +INF]
_75: VARYING
_76: VARYING
k_77: [0, +INF]  EQUIVALENCES: { } (0 elements)
_78: [0, +INF]
_79: VARYING
_80: VARYING
i_81: ~[1, 1]
.MEM_82: VARYING
.MEM_83: VARYING
.MEM_84: VARYING
.MEM_85: VARYING
i_86: VARYING
.MEM_87: VARYING
.MEM_88: VARYING
i_89: VARYING
.MEM_90: VARYING
.MEM_91: VARYING
_102: ~[0B, 0B]  EQUIVALENCES: { _61 } (1 elements)
_103: [_122 + 1, +INF]  EQUIVALENCES: { _62 } (1 elements)
_104: ~[2305843009213693951, 18446744073709551614]  EQUIVALENCES: { _1 } (1 elements)
_105: ~[0B, 0B]  EQUIVALENCES: { _4 } (1 elements)
i_106: [0, 65534]  EQUIVALENCES: { i_6 } (1 elements)
arraysize_107: [0, 2305843009213693951]  EQUIVALENCES: { arraysize_10(D) } (1 elements)
i.9_108: [0, arraysize_10(D) + 18446744073709551615]  EQUIVALENCES: { i.9_20 } (1 elements)
i.12_109: [0, 2305843009213693950]  EQUIVALENCES: { i.12_29 } (1 elements)
numarrays_110: [1, +INF]  EQUIVALENCES: { numarrays_37 } (1 elements)
i_111: [1, 9223372036854775807]  EQUIVALENCES: { i_39 } (1 elements)
i_112: [1, +INF]  EQUIVALENCES: { i_41 i_116 } (2 elements)
i_113: [1, +INF]  EQUIVALENCES: { i_41 i_112 i_116 } (3 elements)
i_114: [1, +INF]  EQUIVALENCES: { i_41 i_112 i_116 } (3 elements)
i_115: [1, 18446744073709551614]  EQUIVALENCES: { i_41 i_116 } (2 elements)
i_116: ~[0, 0]  EQUIVALENCES: { i_41 } (1 elements)
_117: ~[0B, 0B]  EQUIVALENCES: { _44 } (1 elements)
_118: [0, _104]  EQUIVALENCES: { _47 } (1 elements)
_119: [0, _104 + 18446744073709551615]  EQUIVALENCES: { _47 _118 } (2 elements)
_120: [_104, +INF]  EQUIVALENCES: { _47 _118 } (2 elements)
_121: ~[0B, 0B]  EQUIVALENCES: { _57 } (1 elements)
_122: [-INF, _62 + -1]  EQUIVALENCES: { _58 } (1 elements)
_123: ~[0B, 0B]  EQUIVALENCES: { _61 } (1 elements)
_124: [_122 + 1, +INF]  EQUIVALENCES: { _62 } (1 elements)
_125: [0, +INF]  EQUIVALENCES: { _65 } (1 elements)
_126: [0, 18446744073709551614]  EQUIVALENCES: { _65 _125 } (2 elements)
_127: [1, +INF]  EQUIVALENCES: { _65 _125 } (2 elements)
_128: ~[0B, 0B]  EQUIVALENCES: { _75 } (1 elements)
_129: [-INF, _80 + -1]  EQUIVALENCES: { _76 } (1 elements)
_130: ~[0B, 0B]  EQUIVALENCES: { _79 } (1 elements)
_131: [_129 + 1, +INF]  EQUIVALENCES: { _80 } (1 elements)


Removing basic block 33
Removing basic block 34
Removing basic block 35
Removing basic block 36
Removing basic block 37
Removing basic block 40
Removing basic block 41
Removing basic block 42
Removing basic block 43
DoNumSortIteration (farlong * arraybase, long unsigned int arraysize, unsigned int numarrays)
{
  long unsigned int k;
  long unsigned int i;
  long unsigned int k;
  long unsigned int i;
  long unsigned int i;
  long int i;
  farlong * darray;
  unsigned int numarrays;
  long unsigned int i;
  long unsigned int elapsed;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  farlong * _4;
  long unsigned int _5;
  long int _17;
  int _19;
  long unsigned int i.9_20;
  long unsigned int _21;
  farlong * _22;
  long int _23;
  long unsigned int _26;
  long unsigned int i.12_29;
  long unsigned int _30;
  farlong * _31;
  farlong * _32;
  long int _33;
  long int _42;
  long unsigned int _43;
  farlong * _44;
  long int _45;
  long unsigned int _47;
  long unsigned int _48;
  farlong * _49;
  long int _50;
  sizetype _51;
  sizetype _52;
  farlong * _53;
  long int _54;
  long unsigned int _56;
  farlong * _57;
  long int _58;
  long unsigned int _60;
  farlong * _61;
  long int _62;
  farlong * _63;
  long unsigned int _65;
  long unsigned int _66;
  farlong * _67;
  long int _68;
  sizetype _69;
  sizetype _70;
  farlong * _71;
  long int _72;
  long unsigned int _74;
  farlong * _75;
  long int _76;
  long unsigned int _78;
  farlong * _79;
  long int _80;
  farlong * _102;
  long int _103;

  <bb 2> [0.47%]:
  randnum (13);
  goto <bb 4>; [100.00%]

  <bb 3> [2.65%]:
  _19 = randnum (0);
  _21 = i.9_20 * 8;
  _22 = arraybase_9(D) + _21;
  _23 = (long int) _19;
  *_22 = _23;
  i_25 = i_24 + 1;

  <bb 4> [3.11%]:
  # i_24 = PHI <0(2), i_25(3)>
  i.9_20 = (long unsigned int) i_24;
  if (arraysize_10(D) > i.9_20)
    goto <bb 3>; [85.00%]
  else
    goto <bb 8>; [15.00%]

  <bb 5> [2.65%]:
  _26 = arraysize_10(D) * 8;
  darray_28 = darray_27 + _26;
  goto <bb 7>; [100.00%]

  <bb 6> [15.00%]:
  _30 = i.12_29 * 8;
  _31 = arraybase_9(D) + _30;
  _32 = darray_28 + _30;
  _33 = *_31;
  *_32 = _33;
  i_35 = i_34 + 1;

  <bb 7> [17.65%]:
  # i_34 = PHI <0(5), i_35(6)>
  i.12_29 = (long unsigned int) i_34;
  if (arraysize_10(D) > i.12_29)
    goto <bb 6>; [85.00%]
  else
    goto <bb 8>; [15.00%]

  <bb 8> [3.11%]:
  # numarrays_36 = PHI <numarrays_11(D)(4), numarrays_37(7)>
  # darray_27 = PHI <arraybase_9(D)(4), darray_28(7)>
  numarrays_37 = numarrays_36 + 4294967295;
  if (numarrays_37 != 0)
    goto <bb 5>; [85.00%]
  else
    goto <bb 9>; [15.00%]

  <bb 9> [0.47%]:
  elapsed_14 = StartStopwatch ();
  goto <bb 31>; [100.00%]

  <bb 10> [2.65%]:
  _1 = arraysize_10(D) + 18446744073709551615;
  _2 = i_6 * arraysize_10(D);
  _3 = _2 * 8;
  _4 = arraybase_9(D) + _3;
  i_38 = _1 >> 1;
  goto <bb 19>; [100.00%]

  <bb 11> [85.00%]:
  if (_1 > _47)
    goto <bb 12>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 12> [42.50%]:
  _48 = _47 * 8;
  _49 = _4 + _48;
  _50 = *_49;
  _51 = _47 + 1;
  _52 = _51 * 8;
  _53 = _4 + _52;
  _54 = *_53;
  if (_50 < _54)
    goto <bb 13>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 13> [21.25%]:

  <bb 14> [85.00%]:
  # k_59 = PHI <_47(11), _47(12), _51(13)>
  _56 = i_55 * 8;
  _57 = _4 + _56;
  _58 = *_57;
  _60 = k_59 * 8;
  _61 = _4 + _60;
  _62 = *_61;
  if (_58 < _62)
    goto <bb 15>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 15> [42.50%]:
  # _63 = PHI <_57(14)>
  # _17 = PHI <_58(14)>
  # k_12 = PHI <k_59(14)>
  # _102 = PHI <_61(14)>
  # _103 = PHI <_62(14)>
  *_102 = _17;
  *_63 = _103;

  <bb 16> [57.50%]:
  # i_89 = PHI <i_39(19), k_12(15)>

  <bb 17> [100.00%]:
  # i_55 = PHI <i_89(16), arraysize_10(D)(14)>
  _47 = i_55 * 2;
  if (_1 >= _47)
    goto <bb 11>; [85.00%]
  else
    goto <bb 18>; [15.00%]

  <bb 18> [15.00%]:
  i_40 = i_39 + 18446744073709551615;

  <bb 19> [17.65%]:
  # i_39 = PHI <i_38(10), i_40(18)>
  if (i_39 != 0)
    goto <bb 16>; [85.00%]
  else
    goto <bb 29>; [15.00%]

  <bb 20> [85.00%]:
  if (i_41 > _65)
    goto <bb 21>; [50.00%]
  else
    goto <bb 23>; [50.00%]

  <bb 21> [42.50%]:
  _66 = _65 * 8;
  _67 = _4 + _66;
  _68 = *_67;
  _69 = _65 + 1;
  _70 = _69 * 8;
  _71 = _4 + _70;
  _72 = *_71;
  if (_68 < _72)
    goto <bb 22>; [50.00%]
  else
    goto <bb 23>; [50.00%]

  <bb 22> [21.25%]:

  <bb 23> [85.00%]:
  # k_77 = PHI <_65(20), _65(21), _69(22)>
  _74 = i_73 * 8;
  _75 = _4 + _74;
  _76 = *_75;
  _78 = k_77 * 8;
  _79 = _4 + _78;
  _80 = *_79;
  if (_76 < _80)
    goto <bb 24>; [50.00%]
  else
    goto <bb 25>; [50.00%]

  <bb 24> [42.50%]:
  *_79 = _76;
  *_75 = _80;
  goto <bb 26>; [100.00%]

  <bb 25> [42.50%]:
  i_81 = i_41 + 1;

  <bb 26> [85.00%]:
  # i_86 = PHI <k_77(24), i_81(25)>

  <bb 27> [100.00%]:
  # i_73 = PHI <i_86(26), 0(29)>
  _65 = i_73 * 2;
  if (i_41 >= _65)
    goto <bb 20>; [85.00%]
  else
    goto <bb 28>; [15.00%]

  <bb 28> [15.00%]:
  _42 = *_4;
  _43 = i_41 * 8;
  _44 = _4 + _43;
  _45 = *_44;
  *_4 = _45;
  *_44 = _42;
  i_46 = i_41 + 18446744073709551615;

  <bb 29> [17.65%]:
  # i_41 = PHI <_1(19), i_46(28)>
  if (i_41 != 0)
    goto <bb 27>; [85.00%]
  else
    goto <bb 30>; [15.00%]

  <bb 30> [2.65%]:
  i_18 = i_6 + 1;

  <bb 31> [3.11%]:
  # i_6 = PHI <0(9), i_18(30)>
  _5 = (long unsigned int) numarrays_11(D);
  if (_5 > i_6)
    goto <bb 10>; [85.00%]
  else
    goto <bb 32>; [15.00%]

  <bb 32> [0.47%]:
  elapsed_16 = StopStopwatch (elapsed_14);
  return elapsed_16;

}



;; Function strsift (strsift, funcdef_no=63, decl_uid=4541, cgraph_uid=63, symbol_order=88)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
;;
;; Loop 1
;;  header 25, latch 24
;;  depth 1, outer 0
;;  nodes: 25 24 23 22 21 19 17 15 13 14 3 12 8 10 11 9 6 4 5 7 16 20 18
;; 2 succs { 25 }
;; 3 succs { 4 13 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 9 }
;; 7 succs { 8 12 }
;; 8 succs { 13 }
;; 9 succs { 11 10 }
;; 10 succs { 13 }
;; 11 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 14 15 }
;; 14 succs { 15 }
;; 15 succs { 16 17 }
;; 16 succs { 21 20 }
;; 17 succs { 19 18 }
;; 18 succs { 23 }
;; 19 succs { 22 }
;; 20 succs { 23 }
;; 21 succs { 22 }
;; 22 succs { 24 }
;; 23 succs { 24 }
;; 24 succs { 25 }
;; 25 succs { 3 26 }
;; 26 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

j_8 -> { j_33(D) }
j_11 -> { j_33(D) }
j_12 -> { j_33(D) }
_41 -> { _27 }
_64 -> { _27 }
_80 -> { _27 }
_83 -> { _52 }
_84 -> { _53 }
_85 -> { _53 }
_86 -> { _58 }
_87 -> { _59 }
_88 -> { _59 }
slen_89 -> { slen_63 }
_90 -> { _66 }
_91 -> { _68 }
_92 -> { _69 }
_93 -> { _69 }
_94 -> { _72 }
_95 -> { _74 }
_96 -> { _75 }
_97 -> { _75 }
slen_98 -> { slen_79 }
Incremental SSA update started at block: 25
Number of blocks in CFG: 30
Number of blocks to update: 19 ( 63%)



Value ranges after VRP:

_1: [1, +INF]
_2: [0, 0]
_3: [0, 0]
_4: [1, 1]
_5: [0, 0]
_6: [1, 1]
_7: [0, 0]
j_8: [_80, +INF]  EQUIVALENCES: { j_33(D) } (1 elements)
_9: [1, 256]
_10: [1, 256]
j_11: [_64 + 1, +INF]  EQUIVALENCES: { j_8 j_33(D) } (2 elements)
j_12: [0, _41]  EQUIVALENCES: { j_8 j_33(D) } (2 elements)
_13: VARYING
_14: VARYING
_15: [0, 255]
_16: [1, 256]
_17: [1, 256]
_18: VARYING
_19: VARYING
_20: VARYING
_21: VARYING
_22: [0, 255]
_23: [1, 256]
_24: [1, 256]
_25: VARYING
_26: VARYING
_27: [0, +INF]
i_28: VARYING
k_29: VARYING
.MEM_30: VARYING
i_31(D): VARYING
j_33(D): VARYING
i_35: VARYING
optrarray_36(D): VARYING
strarray_37(D): VARYING
.MEM_39: VARYING
i_40: [0, +INF]
_41: [j_8, +INF]  EQUIVALENCES: { _27 _80 } (2 elements)
tlen_43: VARYING
tlen_46: VARYING
_49: [0, +INF]
_50: VARYING
_51: VARYING
_52: VARYING
_53: VARYING
slen_54: [0, 255]
_55: [0, +INF]
_56: VARYING
_57: VARYING
_58: VARYING
_59: VARYING
_60: [0, 255]
slen_61: [0, 255]
_62: [0, 255]
slen_63: VARYING
_64: [0, j_8 + 18446744073709551615]  EQUIVALENCES: { _27 _80 } (2 elements)
_65: [0, +INF]
_66: VARYING
_67: VARYING
_68: VARYING
_69: VARYING
slen_70: [0, 255]
_71: [0, +INF]
_72: VARYING
_73: VARYING
_74: VARYING
_75: VARYING
_76: [0, 255]
slen_77: [0, 255]
_78: [0, 255]
slen_79: VARYING
_80: [0, j_33(D)]  EQUIVALENCES: { _27 } (1 elements)
_81: [1, 1]
_82: [1, 1]
_83: ~[0B, 0B]  EQUIVALENCES: { _52 } (1 elements)
_84: [_59 + 1, +INF]  EQUIVALENCES: { _53 } (1 elements)
_85: [0, _59]  EQUIVALENCES: { _53 } (1 elements)
_86: ~[0B, 0B]  EQUIVALENCES: { _58 } (1 elements)
_87: [0, _84 + 255]  EQUIVALENCES: { _59 } (1 elements)
_88: [_85, +INF]  EQUIVALENCES: { _59 } (1 elements)
slen_89: ~[0, 0]  EQUIVALENCES: { slen_63 } (1 elements)
_90: ~[0B, 0B]  EQUIVALENCES: { _66 } (1 elements)
_91: ~[0B, 0B]  EQUIVALENCES: { _68 } (1 elements)
_92: [_75 + 1, +INF]  EQUIVALENCES: { _69 } (1 elements)
_93: [0, _75]  EQUIVALENCES: { _69 } (1 elements)
_94: ~[0B, 0B]  EQUIVALENCES: { _72 } (1 elements)
_95: ~[0B, 0B]  EQUIVALENCES: { _74 } (1 elements)
_96: [0, _92 + 255]  EQUIVALENCES: { _75 } (1 elements)
_97: [_93, +INF]  EQUIVALENCES: { _75 } (1 elements)
slen_98: ~[0, 0]  EQUIVALENCES: { slen_79 } (1 elements)


Removing basic block 21
Removing basic block 20
Removing basic block 16
Removing basic block 15
Removing basic block 12
Removing basic block 8
Removing basic block 7
Removing basic block 6
Removing basic block 5
Removing basic block 10
Removing basic block 14
Removing basic block 18
Removing basic block 19
Removing basic block 27
Removing basic block 28
Removing basic block 29

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

slen_99 -> { slen_61 }
_100 -> { _62 }
slen_101 -> { slen_63 }
slen_102 -> { slen_61 slen_99 }
_103 -> { _62 _100 }
slen_104 -> { slen_63 slen_101 }
slen_105 -> { slen_77 }
_106 -> { _78 }
slen_107 -> { slen_79 }
slen_108 -> { slen_77 slen_105 }
_109 -> { _78 _106 }
slen_110 -> { slen_79 slen_107 }
slen_111 -> { slen_63 }
slen_112 -> { slen_79 }

SSA names to release after updating the SSA web

slen_61 _62 slen_63 slen_77 _78 slen_79 
Incremental SSA update started at block: 3
Number of blocks in CFG: 18
Number of blocks to update: 9 ( 50%)


strsift (farulong * optrarray, faruchar * strarray, long unsigned int numstrings, long unsigned int i, long unsigned int j)
{
  int slen;
  int D.7998;
  int slen;
  int D.7992;
  unsigned char tlen;
  unsigned char temp[80];
  long unsigned int k;
  long unsigned int _1;
  int _9;
  long unsigned int _10;
  long unsigned int _13;
  faruchar * _14;
  int _15;
  int _16;
  long unsigned int _17;
  long unsigned int _18;
  faruchar * _19;
  long unsigned int _20;
  faruchar * _21;
  int _22;
  int _23;
  long unsigned int _24;
  long unsigned int _25;
  faruchar * _26;
  long unsigned int _27;
  long unsigned int _49;
  farulong * _50;
  long unsigned int _51;
  faruchar * _52;
  unsigned char _53;
  long unsigned int _55;
  farulong * _56;
  long unsigned int _57;
  faruchar * _58;
  unsigned char _59;
  int _60;
  long unsigned int _65;
  farulong * _66;
  long unsigned int _67;
  faruchar * _68;
  unsigned char _69;
  long unsigned int _71;
  farulong * _72;
  long unsigned int _73;
  faruchar * _74;
  unsigned char _75;
  int _76;
  long unsigned int _100;
  long unsigned int _103;
  long unsigned int _106;
  long unsigned int _109;

  <bb 2> [15.00%]:
  goto <bb 12>; [100.00%]

  <bb 3> [85.00%]:
  if (_27 < j_33(D))
    goto <bb 4>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 4> [42.50%]:
  _1 = _27 + 1;
  _49 = _27 * 8;
  _50 = optrarray_36(D) + _49;
  _51 = *_50;
  _52 = strarray_37(D) + _51;
  _53 = *_52;
  slen_54 = (int) _53;
  _55 = _1 * 8;
  _56 = optrarray_36(D) + _55;
  _57 = *_56;
  _58 = strarray_37(D) + _57;
  _59 = *_58;
  _60 = (int) _59;
  if (_53 > _59)
    goto <bb 14>; [50.00%]
  else
    goto <bb 15>; [50.00%]

  <bb 5> [21.25%]:
  # slen_111 = PHI <slen_104(15), slen_101(14)>
  if (slen_111 < 0)
    goto <bb 6>; [32.39%]
  else
    goto <bb 7>; [67.61%]

  <bb 6> [6.88%]:

  <bb 7> [85.00%]:
  # k_29 = PHI <_27(3), _1(14), _27(15), _27(5), _1(6)>
  _65 = i_28 * 8;
  _66 = optrarray_36(D) + _65;
  _67 = *_66;
  _68 = strarray_37(D) + _67;
  _69 = *_68;
  slen_70 = (int) _69;
  _71 = k_29 * 8;
  _72 = optrarray_36(D) + _71;
  _73 = *_72;
  _74 = strarray_37(D) + _73;
  _75 = *_74;
  _76 = (int) _75;
  if (_69 > _75)
    goto <bb 16>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 8> [42.50%]:
  # slen_112 = PHI <slen_110(17), slen_107(16)>
  if (slen_112 < 0)
    goto <bb 9>; [32.39%]
  else
    goto <bb 10>; [67.61%]

  <bb 9> [28.05%]:
  _9 = _76 + 1;
  _10 = (long unsigned int) _9;
  MoveMemory (&temp[0], _74, _10);
  _13 = *_66;
  _14 = strarray_37(D) + _13;
  tlen_43 = *_14;
  _15 = (int) tlen_43;
  stradjust (optrarray_36(D), strarray_37(D), numstrings_38(D), k_29, _15);
  _16 = _15 + 1;
  _17 = (long unsigned int) _16;
  _18 = *_66;
  _19 = strarray_37(D) + _18;
  _20 = *_72;
  _21 = strarray_37(D) + _20;
  MoveMemory (_21, _19, _17);
  tlen_46 = temp[0];
  _22 = (int) tlen_46;
  stradjust (optrarray_36(D), strarray_37(D), numstrings_38(D), i_28, _22);
  _23 = _22 + 1;
  _24 = (long unsigned int) _23;
  _25 = *_66;
  _26 = strarray_37(D) + _25;
  MoveMemory (_26, &temp[0], _24);
  goto <bb 11>; [100.00%]

  <bb 10> [56.95%]:
  i_40 = j_33(D) + 1;

  <bb 11> [85.00%]:
  # i_35 = PHI <i_40(10), k_29(9)>

  <bb 12> [100.00%]:
  # i_28 = PHI <i_35(11), i_31(D)(2)>
  _27 = i_28 * 2;
  if (_27 <= j_33(D))
    goto <bb 3>; [85.00%]
  else
    goto <bb 13>; [15.00%]

  <bb 13> [15.00%]:
  temp ={v} {CLOBBER};
  return;

  <bb 14> [21.25%]:
  # slen_99 = PHI <_60(4)>
  _100 = (long unsigned int) slen_99;
  slen_101 = strncmp (_52, _58, _100);
  if (slen_101 == 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 15> [21.25%]:
  # slen_102 = PHI <slen_54(4)>
  _103 = (long unsigned int) slen_102;
  slen_104 = strncmp (_52, _58, _103);
  if (slen_104 == 0)
    goto <bb 7>; [49.98%]
  else
    goto <bb 5>; [50.02%]

  <bb 16> [42.50%]:
  # slen_105 = PHI <_76(7)>
  _106 = (long unsigned int) slen_105;
  slen_107 = strncmp (_68, _74, _106);
  if (slen_107 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 17> [42.50%]:
  # slen_108 = PHI <slen_70(7)>
  _109 = (long unsigned int) slen_108;
  slen_110 = strncmp (_68, _74, _109);
  if (slen_110 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 8>; [50.00%]

}



;; Function DoStringSortIteration (DoStringSortIteration, funcdef_no=58, decl_uid=4512, cgraph_uid=58, symbol_order=83)

;; 12 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 46 45 9 10 11 12 13 14 15 18 17 44 43 19 20 21 22 23 24 25 26 27 42 28 29 30 31 32 33 34 35 36 37 38 39 40 41
;;
;; Loop 1
;;  header 40, latch 39
;;  depth 1, outer 0
;;  nodes: 40 39 38 42 37 36 29 28 35 30 34 32 33 31 27 25 26
;;
;; Loop 9
;;  header 38, latch 37
;;  depth 2, outer 1
;;  nodes: 38 37 36 29 28 35 30 34 32 33 31
;;
;; Loop 11
;;  header 35, latch 34
;;  depth 3, outer 9
;;  nodes: 35 34 32 33 31
;;
;; Loop 10
;;  header 27, latch 26
;;  depth 2, outer 1
;;  nodes: 27 26
;;
;; Loop 2
;;  header 23, latch 22
;;  depth 1, outer 0
;;  nodes: 23 22 21 19 20
;;
;; Loop 3
;;  header 21, latch 20
;;  depth 2, outer 2
;;  nodes: 21 20
;;
;; Loop 4
;;  header 44, latch 17
;;  depth 1, outer 0
;;  nodes: 44 17
;;
;; Loop 5
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12 11 9 10
;;
;; Loop 6
;;  header 11, latch 10
;;  depth 2, outer 5
;;  nodes: 11 10
;;
;; Loop 7
;;  header 3, latch 46
;;  depth 1, outer 0
;;  nodes: 3 46 8 7 5 6 4
;;
;; Loop 8
;;  header 7, latch 6
;;  depth 2, outer 7
;;  nodes: 7 6
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 46 45 }
;; 46 succs { 3 }
;; 45 succs { 13 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 10 12 }
;; 12 succs { 13 }
;; 13 succs { 9 14 }
;; 14 succs { 15 18 }
;; 15 succs { 18 }
;; 18 succs { 44 }
;; 17 succs { 44 }
;; 44 succs { 17 43 }
;; 43 succs { 23 }
;; 19 succs { 21 }
;; 20 succs { 21 }
;; 21 succs { 20 22 }
;; 22 succs { 23 }
;; 23 succs { 19 24 }
;; 24 succs { 40 }
;; 25 succs { 27 }
;; 26 succs { 27 }
;; 27 succs { 26 42 }
;; 42 succs { 38 }
;; 28 succs { 29 30 }
;; 29 succs { 37 }
;; 30 succs { 35 }
;; 31 succs { 32 33 }
;; 32 succs { 34 }
;; 33 succs { 34 }
;; 34 succs { 35 }
;; 35 succs { 31 36 }
;; 36 succs { 37 }
;; 37 succs { 38 }
;; 38 succs { 28 39 }
;; 39 succs { 40 }
;; 40 succs { 25 41 }
;; 41 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_62 -> { _49 }
nstrings_78 -> { nstrings_208 }
curroffset_210 -> { curroffset_42 }
Incremental SSA update started at block: 3
Number of blocks in CFG: 47
Number of blocks to update: 19 ( 40%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_1 -> { _62 }
i_2 -> { i_6 }
_3 -> { _62 }
k_15 -> { k_60 }
_21 -> { _127 }
_23 -> { _160 }
i_79 -> { i_100 }
_90 -> { _106 }
arraysize_94 -> { arraysize_13(D) }
arraysize_95 -> { arraysize_13(D) }
i_96 -> { i_46 }
systemerror.26_122 -> { systemerror.26_67 }
tempobase_123 -> { tempobase_7 }
j_124 -> { j_68 }
_125 -> { _83 }
tempsbase_133 -> { tempsbase_8 }
k_142 -> { k_91 }
i_143 -> { i_98 }
numarrays_144 -> { numarrays_12(D) }
_181 -> { _155 }
j_184 -> { j_153 }
_190 -> { _54 }
numarrays_209 -> { numarrays_12(D) }
Incremental SSA update started at block: 3
Number of blocks in CFG: 48
Number of blocks to update: 38 ( 79%)



Value ranges after VRP:

_1: [0, 2305843009213693951]  EQUIVALENCES: { _3 _62 } (2 elements)
i_2: [0, 65534]  EQUIVALENCES: { i_6 } (1 elements)
_3: [0, 2305843009213693951]  EQUIVALENCES: { _62 } (1 elements)
_4: [0, 18446744073709551608]
_5: [0, +INF]
i_6: [0, 65535]
tempobase_7: VARYING
tempsbase_8: VARYING
.MEM_9: VARYING
arraybase_11(D): VARYING
numarrays_12(D): [0, 65535]
arraysize_13(D): VARYING
k_15: [1, 65534]  EQUIVALENCES: { k_60 } (1 elements)
elapsed_17: VARYING
elapsed_19: VARYING
_21: ~[0B, 0B]  EQUIVALENCES: { _127 } (1 elements)
_23: ~[0B, 0B]  EQUIVALENCES: { _160 } (1 elements)
tempobase_24: VARYING
tempsbase_25: VARYING
i_26: [1, 65535]
_27: VARYING
_28: [0, +INF]
stringlength_29: [0, +INF]
_30: [0, 255]
curroffset_31: VARYING
_32: [0, +INF]  EQUIVALENCES: { } (0 elements)
_33: [0, +INF]
_34: [0, +INF]
_35: [0, +INF]
_36: [0, +INF]
stringlength_37: [0, +INF]
_38: VARYING
stringlength_39: [0, +INF]
curroffset_40: [0, +INF]
_41: VARYING
curroffset_42: VARYING
_43: VARYING
_44: [0, +INF]
curroffset_45: [0, +INF]
i_46: VARYING
i_47: [1, +INF]
.MEM_48: VARYING
_49: [0, +INF]
fullflag_50: [0, 1]
_51: [0, +INF]
tempsbase_52: VARYING
tempsbase_53: VARYING
_54: [0, 4294967295]
_55: VARYING
_56: VARYING
_57: VARYING
l_58: VARYING
l_59: [0, +INF]
k_60: [1, 65535]
k_61: [2, 65535]
_62: [0, +INF]
_63: [0, 65535]
_64: [0, +INF]
_65: [0, +INF]
optrarray_66: VARYING
systemerror.26_67: VARYING
j_68: [0, 2305843009213693951]
_69: [0, 18446744073709551608]
_70: VARYING
curroffset_71: VARYING
_72: VARYING
_73: VARYING
_74: [0, 255]
_75: [0, +INF]  EQUIVALENCES: { } (0 elements)
curroffset_76: [0, +INF]
j_77: [1, 2305843009213693952]
nstrings_78: [nstrings_208, nstrings_208]
i_79: ~[0, 0]  EQUIVALENCES: { i_100 } (1 elements)
_80: [0, 18446744073709551608]
tempobase_81: VARYING
tempobase_82: VARYING
_83: [0, 4294967295]
_84: [0, 34359738360]
_85: VARYING
_86: VARYING
_87: VARYING
l_88: VARYING
l_89: [0, +INF]
_90: ~[0B, 0B]  EQUIVALENCES: { _106 } (1 elements)
k_91: [1, 65535]
k_92: [2, 65535]
j_93: [0, 0]
arraysize_94: [0, +INF]  EQUIVALENCES: { arraysize_13(D) } (1 elements)
arraysize_95: [1, +INF]  EQUIVALENCES: { arraysize_13(D) } (1 elements)
i_96: [0, 254]  EQUIVALENCES: { i_46 } (1 elements)
i_97: [0, 9223372036854775807]
i_98: [0, 9223372036854775807]
i_99: [0, 9223372036854775806]
i_100: [0, nstrings_78]
tlen_101: VARYING
_102: [0, 255]
_103: [1, 256]
_104: [1, 256]
_105: [0, +INF]
_106: VARYING
_107: VARYING
_108: VARYING
tlen_109: VARYING
_110: [0, 255]
_111: [1, 256]
_112: [1, 256]
_113: VARYING
_114: VARYING
tlen_115: VARYING
_116: [0, 255]
_117: [1, 256]
_118: [1, 256]
_119: VARYING
_120: VARYING
i_121: [0, 18446744073709551614]
systemerror.26_122: ~[0, 0]  EQUIVALENCES: { systemerror.26_67 } (1 elements)
tempobase_123: ~[0B, 0B]  EQUIVALENCES: { tempobase_7 } (1 elements)
j_124: [0, 2305843009213693951]  EQUIVALENCES: { j_68 } (1 elements)
_125: [0, 4294967295]  EQUIVALENCES: { _83 } (1 elements)
_126: VARYING
_127: VARYING
_128: VARYING
_129: [0, 255]
direction_130: [-255, 255]
_131: [0, 255]
adjamount_132: [0, +INF]
tempsbase_133: ~[0B, 0B]  EQUIVALENCES: { tempsbase_8 } (1 elements)
_134: [0, 18446744073709551608]
_135: ~[18446744073709551601, 18446744073709551607]
_136: VARYING
_137: VARYING
_138: VARYING
_139: VARYING
_140: [0, 255]
_141: [0, +INF]
k_142: [1, 65534]  EQUIVALENCES: { k_91 } (1 elements)
i_143: [1, 9223372036854775807]  EQUIVALENCES: { i_98 } (1 elements)
numarrays_144: [0, 65535]  EQUIVALENCES: { numarrays_12(D) } (1 elements)
_145: VARYING
_146: [0, +INF]
nbytes_147: [0, +INF]
_148: VARYING
_149: [0, 255]
_150: [0, +INF]
_151: [0, +INF]
_152: VARYING
j_153: [1, 18446744073709551614]
_154: [8, 18446744073709551600]
_155: VARYING
_156: VARYING
_157: [0, 255]
_158: [0, +INF]
_159: [8, 18446744073709551600]
_160: VARYING
_161: VARYING
_162: [0, 255]
_163: [0, +INF]
j_164: [2, 2305843009213693951]
_165: VARYING
_166: VARYING
.MEM_167: VARYING
.MEM_168: VARYING
.MEM_169: VARYING
.MEM_170: VARYING
curroffset_171: [0, 0]
.MEM_172: VARYING
.MEM_173: VARYING
.MEM_174: VARYING
.MEM_175: VARYING
.MEM_176: VARYING
.MEM_177: VARYING
.MEM_178: VARYING
.MEM_179: VARYING
_181: ~[0B, 0B]  EQUIVALENCES: { _155 } (1 elements)
j_184: [1, 2305843009213693950]  EQUIVALENCES: { j_153 } (1 elements)
_190: [0, arraysize_13(D) + 18446744073709551615]  EQUIVALENCES: { _54 } (1 elements)
nstrings_208: VARYING
numarrays_209: [0, 65535]  EQUIVALENCES: { numarrays_12(D) numarrays_144 } (2 elements)
curroffset_210: [curroffset_42, curroffset_42]


Removing basic block 42
Removing basic block 43
Removing basic block 46
Removing basic block 47
DoStringSortIteration (faruchar * arraybase, unsigned int numarrays, long unsigned int arraysize)
{
  unsigned char adjamount;
  int direction;
  long unsigned int j;
  long unsigned int nbytes;
  unsigned char l;
  long unsigned int i;
  unsigned char tlen;
  unsigned char temp[80];
  faruchar * tempsbase;
  farulong * optrarray;
  farulong * tempobase;
  long unsigned int curroffset;
  int fullflag;
  unsigned char stringlength;
  unsigned char i;
  long unsigned int j;
  unsigned int k;
  unsigned int l;
  int systemerror;
  farulong * D.8017;
  faruchar * tempsbase;
  farulong * tempobase;
  unsigned int i;
  int syserror;
  long unsigned int nstrings;
  long unsigned int elapsed;
  farulong * optrarray;
  long unsigned int _4;
  sizetype _5;
  unsigned int _27;
  unsigned char _28;
  long unsigned int _30;
  long unsigned int _32;
  long unsigned int _33;
  unsigned char _34;
  unsigned char _35;
  unsigned char _36;
  faruchar * _38;
  unsigned int _41;
  faruchar * _43;
  unsigned char _44;
  long unsigned int _49;
  sizetype _51;
  long unsigned int _54;
  faruchar * _55;
  faruchar * _56;
  unsigned char _57;
  long unsigned int _62;
  long unsigned int _63;
  long unsigned int _64;
  long unsigned int _65;
  int systemerror.26_67;
  long unsigned int _69;
  farulong * _70;
  faruchar * _72;
  unsigned char _73;
  long unsigned int _74;
  long unsigned int _75;
  long unsigned int _80;
  long unsigned int _83;
  long unsigned int _84;
  farulong * _85;
  farulong * _86;
  long unsigned int _87;
  int _102;
  int _103;
  long unsigned int _104;
  long unsigned int _105;
  farulong * _106;
  long unsigned int _107;
  faruchar * _108;
  int _110;
  int _111;
  long unsigned int _112;
  long unsigned int _113;
  faruchar * _114;
  int _116;
  int _117;
  long unsigned int _118;
  long unsigned int _119;
  faruchar * _120;
  long unsigned int _126;
  faruchar * _127;
  unsigned char _128;
  int _129;
  int _131;
  long unsigned int _134;
  sizetype _135;
  farulong * _136;
  long unsigned int _137;
  faruchar * _138;
  unsigned char _139;
  long unsigned int _140;
  long unsigned int _141;
  long unsigned int _145;
  long unsigned int _146;
  faruchar * _148;
  sizetype _149;
  sizetype _150;
  sizetype _151;
  faruchar * _152;
  long unsigned int _154;
  farulong * _155;
  long unsigned int _156;
  long unsigned int _157;
  long unsigned int _158;
  long unsigned int _159;
  farulong * _160;
  long unsigned int _161;
  long unsigned int _162;
  long unsigned int _163;
  long unsigned int _165;
  faruchar * _166;

  <bb 2> [0.88%]:
  randnum (13);

  <bb 3> [1.06%]:
  # curroffset_31 = PHI <0(2), curroffset_210(8)>
  # nstrings_208 = PHI <0(2), _49(8)>
  _27 = abs_randwc (76);
  _28 = (unsigned char) _27;
  stringlength_29 = _28 + 1;
  _30 = (long unsigned int) stringlength_29;
  _32 = _30 + curroffset_31;
  _33 = _32 + 1;
  if (arraysize_13(D) <= _33)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 4> [0.53%]:
  _34 = (unsigned char) arraysize_13(D);
  _35 = (unsigned char) curroffset_31;
  _36 = _34 - _35;
  stringlength_37 = _36 + 255;

  <bb 5> [1.06%]:
  # fullflag_50 = PHI <0(3), 1(4)>
  # stringlength_39 = PHI <stringlength_29(3), stringlength_37(4)>
  _38 = arraybase_11(D) + curroffset_31;
  *_38 = stringlength_39;
  curroffset_40 = curroffset_31 + 1;
  goto <bb 7>; [100.00%]

  <bb 6> [6.03%]:
  _41 = abs_randwc (254);
  _43 = arraybase_11(D) + curroffset_42;
  _44 = (unsigned char) _41;
  *_43 = _44;
  curroffset_45 = curroffset_42 + 1;
  i_47 = i_46 + 1;

  <bb 7> [7.10%]:
  # curroffset_42 = PHI <curroffset_40(5), curroffset_45(6)>
  # i_46 = PHI <0(5), i_47(6)>
  if (stringlength_39 > i_46)
    goto <bb 6>; [85.00%]
  else
    goto <bb 8>; [15.00%]

  <bb 8> [1.06%]:
  # curroffset_210 = PHI <curroffset_42(7)>
  _49 = nstrings_208 + 1;
  if (fullflag_50 == 0)
    goto <bb 3>; [17.00%]
  else
    goto <bb 9>; [83.00%]

  <bb 9> [0.88%]:
  # _62 = PHI <_49(8)>
  # nstrings_78 = PHI <nstrings_208(8)>
  goto <bb 14>; [100.00%]

  <bb 10> [5.01%]:
  _51 = arraysize_13(D) + 100;
  tempsbase_53 = tempsbase_52 + _51;
  goto <bb 12>; [100.00%]

  <bb 11> [28.37%]:
  _55 = arraybase_11(D) + _54;
  _56 = tempsbase_53 + _54;
  _57 = *_55;
  *_56 = _57;
  l_59 = l_58 + 1;

  <bb 12> [33.37%]:
  # l_58 = PHI <0(10), l_59(11)>
  _54 = (long unsigned int) l_58;
  if (arraysize_13(D) > _54)
    goto <bb 11>; [85.00%]
  else
    goto <bb 13>; [15.00%]

  <bb 13> [5.01%]:
  k_61 = k_60 + 1;

  <bb 14> [5.89%]:
  # tempsbase_52 = PHI <arraybase_11(D)(9), tempsbase_53(13)>
  # k_60 = PHI <1(9), k_61(13)>
  if (numarrays_12(D) > k_60)
    goto <bb 10>; [85.00%]
  else
    goto <bb 15>; [15.00%]

  <bb 15> [0.88%]:
  _63 = (long unsigned int) numarrays_12(D);
  _64 = _62 * _63;
  _65 = _64 * 8;
  optrarray_66 = AllocateMemory (_65, &systemerror);
  systemerror.26_67 = systemerror;
  if (systemerror.26_67 != 0)
    goto <bb 16>; [33.00%]
  else
    goto <bb 17>; [67.00%]

  <bb 16> [0.29%]:
  ReportError ("CPU:Stringsort", systemerror.26_67);
  FreeMemory (arraybase_11(D), &systemerror);
  ErrorExit ();

  <bb 17> [0.88%]:
  goto <bb 19>; [100.00%]

  <bb 18> [5.01%]:
  _69 = j_68 * 8;
  _70 = optrarray_66 + _69;
  *_70 = curroffset_71;
  _72 = arraybase_11(D) + curroffset_71;
  _73 = *_72;
  _74 = (long unsigned int) _73;
  _75 = curroffset_71 + _74;
  curroffset_76 = _75 + 1;
  j_77 = j_68 + 1;

  <bb 19> [5.89%]:
  # curroffset_71 = PHI <0(17), curroffset_76(18)>
  # j_68 = PHI <0(17), j_77(18)>
  if (_62 > j_68)
    goto <bb 18>; [85.00%]
  else
    goto <bb 24>; [15.00%]

  <bb 20> [5.01%]:
  _80 = _62 * 8;
  tempobase_82 = tempobase_81 + _80;
  goto <bb 22>; [100.00%]

  <bb 21> [28.37%]:
  _84 = _83 * 8;
  _85 = optrarray_66 + _84;
  _86 = tempobase_82 + _84;
  _87 = *_85;
  *_86 = _87;
  l_89 = l_88 + 1;

  <bb 22> [33.37%]:
  # l_88 = PHI <0(20), l_89(21)>
  _83 = (long unsigned int) l_88;
  if (_62 > _83)
    goto <bb 21>; [85.00%]
  else
    goto <bb 23>; [15.00%]

  <bb 23> [5.01%]:
  k_92 = k_91 + 1;

  <bb 24> [5.89%]:
  # tempobase_81 = PHI <optrarray_66(19), tempobase_82(23)>
  # k_91 = PHI <1(19), k_92(23)>
  if (numarrays_12(D) > k_91)
    goto <bb 20>; [85.00%]
  else
    goto <bb 25>; [15.00%]

  <bb 25> [0.88%]:
  systemerror ={v} {CLOBBER};
  elapsed_17 = StartStopwatch ();
  goto <bb 41>; [100.00%]

  <bb 26> [5.01%]:
  i_97 = nstrings_78 >> 1;
  goto <bb 28>; [100.00%]

  <bb 27> [28.37%]:
  strsift (tempobase_7, tempsbase_8, _62, i_98, nstrings_78);
  i_99 = i_98 + 18446744073709551615;

  <bb 28> [33.37%]:
  # i_98 = PHI <i_97(26), i_99(27)>
  if (i_98 != 0)
    goto <bb 27>; [85.00%]
  else
    goto <bb 39>; [15.00%]

  <bb 29> [28.37%]:
  strsift (tempobase_7, tempsbase_8, _62, 0, i_100);
  tlen_101 = *tempsbase_8;
  _102 = (int) tlen_101;
  _103 = _102 + 1;
  _104 = (long unsigned int) _103;
  MoveMemory (&temp[0], tempsbase_8, _104);
  _105 = i_100 * 8;
  _106 = tempobase_7 + _105;
  _107 = *_106;
  _108 = tempsbase_8 + _107;
  tlen_109 = *_108;
  _110 = (int) tlen_109;
  _126 = *tempobase_7;
  _127 = tempsbase_8 + _126;
  _128 = *_127;
  _129 = (int) _128;
  direction_130 = _110 - _129;
  _131 = ABS_EXPR <direction_130>;
  adjamount_132 = (unsigned char) _131;
  if (nstrings_78 == 0)
    goto <bb 30>; [47.12%]
  else
    goto <bb 31>; [52.88%]

  <bb 30> [13.37%]:
  *_127 = tlen_109;
  goto <bb 38>; [100.00%]

  <bb 31> [15.00%]:
  _134 = _62 * 8;
  _135 = _134 + 18446744073709551608;
  _136 = tempobase_7 + _135;
  _137 = *_136;
  _138 = tempsbase_8 + _137;
  _139 = *_138;
  _140 = (long unsigned int) _139;
  _141 = _137 + _140;
  _145 = MEM[(farulong *)tempobase_7 + 8B];
  _146 = _141 - _145;
  nbytes_147 = _146 + 1;
  _148 = tempsbase_8 + _145;
  _149 = (sizetype) tlen_109;
  _150 = _126 + _149;
  _151 = _150 + 1;
  _152 = tempsbase_8 + _151;
  MoveMemory (_152, _148, nbytes_147);
  goto <bb 36>; [100.00%]

  <bb 32> [85.00%]:
  if (direction_130 < 0)
    goto <bb 33>; [36.00%]
  else
    goto <bb 34>; [64.00%]

  <bb 33> [30.60%]:
  _154 = j_153 * 8;
  _155 = tempobase_7 + _154;
  _156 = *_155;
  _157 = (long unsigned int) _131;
  _158 = _156 - _157;
  *_155 = _158;
  goto <bb 35>; [100.00%]

  <bb 34> [54.40%]:
  _159 = j_153 * 8;
  _160 = tempobase_7 + _159;
  _161 = *_160;
  _162 = (long unsigned int) _131;
  _163 = _161 + _162;
  *_160 = _163;

  <bb 35> [85.00%]:
  j_164 = j_153 + 1;

  <bb 36> [100.00%]:
  # j_153 = PHI <1(31), j_164(35)>
  if (_62 > j_153)
    goto <bb 32>; [85.00%]
  else
    goto <bb 37>; [15.00%]

  <bb 37> [15.00%]:
  _165 = *tempobase_7;
  _166 = tempsbase_8 + _165;
  *_166 = tlen_109;

  <bb 38> [28.37%]:
  _111 = _110 + 1;
  _112 = (long unsigned int) _111;
  _113 = *_106;
  _114 = tempsbase_8 + _113;
  MoveMemory (tempsbase_8, _114, _112);
  tlen_115 = temp[0];
  _116 = (int) tlen_115;
  stradjust (tempobase_7, tempsbase_8, _62, i_100, _116);
  _117 = _116 + 1;
  _118 = (long unsigned int) _117;
  _119 = *_106;
  _120 = tempsbase_8 + _119;
  MoveMemory (_120, &temp[0], _118);
  i_121 = i_100 + 18446744073709551615;

  <bb 39> [33.37%]:
  # i_100 = PHI <nstrings_78(28), i_121(38)>
  if (i_100 != 0)
    goto <bb 29>; [85.00%]
  else
    goto <bb 40>; [15.00%]

  <bb 40> [5.01%]:
  temp ={v} {CLOBBER};
  _4 = _62 * 8;
  tempobase_24 = tempobase_7 + _4;
  _5 = arraysize_13(D) + 100;
  tempsbase_25 = tempsbase_8 + _5;
  i_26 = i_6 + 1;

  <bb 41> [5.89%]:
  # i_6 = PHI <0(25), i_26(40)>
  # tempobase_7 = PHI <optrarray_66(25), tempobase_24(40)>
  # tempsbase_8 = PHI <arraybase_11(D)(25), tempsbase_25(40)>
  if (i_6 < numarrays_12(D))
    goto <bb 26>; [85.00%]
  else
    goto <bb 42>; [15.00%]

  <bb 42> [0.88%]:
  elapsed_19 = StopStopwatch (elapsed_17);
  FreeMemory (optrarray_66, &syserror);
  syserror ={v} {CLOBBER};
  return elapsed_19;

}



;; Function DoNumSort (DoNumSort, funcdef_no=52, decl_uid=4490, cgraph_uid=52, symbol_order=77)

;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 18 9 10 11 12 13 17 14 15 16
;;
;; Loop 2
;;  header 13, latch 17
;;  depth 1, outer 0
;;  nodes: 13 17
;;
;; Loop 1
;;  header 4, latch 9
;;  depth 1, outer 0
;;  nodes: 4 9 8 7 5 6 18
;;
;; Loop 3
;;  header 5, latch 18
;;  depth 2, outer 1
;;  nodes: 5 18 8 7 6
;; 2 succs { 3 10 }
;; 3 succs { 4 }
;; 4 succs { 5 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 12 8 }
;; 8 succs { 9 18 }
;; 18 succs { 5 }
;; 9 succs { 4 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 }
;; 13 succs { 17 14 }
;; 17 succs { 13 }
;; 14 succs { 15 16 }
;; 15 succs { 16 }
;; 16 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_8 -> { _27 }
iterations_28 -> { iterations_64 }
Incremental SSA update started at block: 13
Number of blocks in CFG: 19
Number of blocks to update: 3 ( 16%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

systemerror.0_72 -> { systemerror.0_7 }
systemerror.3_73 -> { systemerror.3_21 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 19
Number of blocks to update: 4 ( 21%)



Value ranges after VRP:

_1: VARYING
_2: VARYING
_3: [0, 65535]
_4: VARYING
_5: [0, +INF]
_6: [0, +INF]
systemerror.0_7: VARYING
_8: [0, +INF]  EQUIVALENCES: { } (0 elements)
_9: VARYING
_10: [0, 65535]
_11: VARYING
_12: VARYING
global_min_ticks.2_13: VARYING
_14: VARYING
_15: [0, +INF]
_16: VARYING
_17: [0, 65535]
_18: VARYING
_19: [0, +INF]
_20: [0, +INF]
systemerror.3_21: VARYING
.MEM_22: VARYING
_23: VARYING
_24: [0, 65535]
_25: VARYING
accumtime.5_26: [0, +INF]
_27: [0, +INF]  EQUIVALENCES: { } (0 elements)
iterations_28: VARYING
_29: VARYING
_30: VARYING
_31: VARYING
_32: VARYING
_33: VARYING
_34: VARYING
_35: VARYING
_36: VARYING
arraybase_37: VARYING
accumtime_38: VARYING
iterations_39: VARYING
.MEM_40: VARYING
.MEM_41: VARYING
.MEM_42: VARYING
.MEM_43: VARYING
.MEM_44: VARYING
arraybase_47: VARYING
arraybase_53: VARYING
_62: VARYING
accumtime_63: VARYING
iterations_64: VARYING
systemerror.0_72: ~[0, 0]  EQUIVALENCES: { systemerror.0_7 } (1 elements)
systemerror.3_73: ~[0, 0]  EQUIVALENCES: { systemerror.3_21 } (1 elements)


Removing basic block 17
Removing basic block 18
DoNumSort ()
{
  int systemerror;
  double iterations;
  long int accumtime;
  farlong * arraybase;
  int _1;
  short unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  int systemerror.0_7;
  long unsigned int _8;
  short unsigned int _9;
  unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int global_min_ticks.2_13;
  short unsigned int _14;
  short unsigned int _15;
  short unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  int systemerror.3_21;
  short unsigned int _23;
  unsigned int _24;
  long unsigned int _25;
  long unsigned int accumtime.5_26;
  long unsigned int _27;
  long unsigned int _29;
  long unsigned int _30;
  short unsigned int _31;
  double _32;
  double _33;
  double _34;
  double _35;
  int _36;
  long unsigned int _62;

  <bb 2> [11.19%]:
  _1 = global_numsortstruct.adjust;
  if (_1 == 0)
    goto <bb 3>; [67.00%]
  else
    goto <bb 10>; [33.00%]

  <bb 3> [7.50%]:
  global_numsortstruct.numarrays = 1;

  <bb 4> [14.44%]:

  <bb 5> [100.00%]:
  _2 = global_numsortstruct.numarrays;
  _3 = (long unsigned int) _2;
  _4 = global_numsortstruct.arraysize;
  _5 = _3 * _4;
  _6 = _5 * 8;
  arraybase_53 = AllocateMemory (_6, &systemerror);
  systemerror.0_7 = systemerror;
  if (systemerror.0_7 != 0)
    goto <bb 6>; [33.00%]
  else
    goto <bb 7>; [67.00%]

  <bb 6> [33.00%]:
  ReportError ("CPU:Numeric Sort", systemerror.0_7);
  FreeMemory (arraybase_53, &systemerror);
  ErrorExit ();

  <bb 7> [100.00%]:
  _9 = global_numsortstruct.numarrays;
  _10 = (unsigned int) _9;
  _11 = global_numsortstruct.arraysize;
  _12 = DoNumSortIteration (arraybase_53, _11, _10);
  global_min_ticks.2_13 = global_min_ticks;
  if (_12 > global_min_ticks.2_13)
    goto <bb 12>; [7.50%]
  else
    goto <bb 8>; [92.50%]

  <bb 8> [92.50%]:
  FreeMemory (arraybase_53, &systemerror);
  _14 = global_numsortstruct.numarrays;
  _15 = _14 + 1;
  global_numsortstruct.numarrays = _15;
  if (_14 > 10000)
    goto <bb 9>; [7.50%]
  else
    goto <bb 5>; [92.50%]

  <bb 9> [6.94%]:
  __builtin_puts (&"CPU:NSORT -- NUMNUMARRAYS hit."[0]);
  ErrorExit ();
  goto <bb 4>; [100.00%]

  <bb 10> [3.69%]:
  _16 = global_numsortstruct.numarrays;
  _17 = (long unsigned int) _16;
  _18 = global_numsortstruct.arraysize;
  _19 = _17 * _18;
  _20 = _19 * 8;
  arraybase_47 = AllocateMemory (_20, &systemerror);
  systemerror.3_21 = systemerror;
  if (systemerror.3_21 != 0)
    goto <bb 11>; [33.00%]
  else
    goto <bb 12>; [67.00%]

  <bb 11> [1.22%]:
  ReportError ("CPU:Numeric Sort", systemerror.3_21);
  FreeMemory (arraybase_47, &systemerror);
  ErrorExit ();

  <bb 12> [11.19%]:
  # arraybase_37 = PHI <arraybase_53(7), arraybase_47(10), arraybase_47(11)>

  <bb 13> [74.63%]:
  # accumtime_38 = PHI <0(12), accumtime_63(13)>
  # iterations_39 = PHI <0.0(12), iterations_64(13)>
  _23 = global_numsortstruct.numarrays;
  _24 = (unsigned int) _23;
  _25 = global_numsortstruct.arraysize;
  _62 = DoNumSortIteration (arraybase_37, _25, _24);
  accumtime.5_26 = (long unsigned int) accumtime_38;
  _27 = accumtime.5_26 + _62;
  accumtime_63 = (long int) _27;
  iterations_64 = iterations_39 + 1.0e+0;
  _29 = TicksToSecs (_27);
  _30 = global_numsortstruct.request_secs;
  if (_29 < _30)
    goto <bb 13>; [85.00%]
  else
    goto <bb 14>; [15.00%]

  <bb 14> [11.19%]:
  # _8 = PHI <_27(13)>
  # iterations_28 = PHI <iterations_64(13)>
  FreeMemory (arraybase_37, &systemerror);
  _31 = global_numsortstruct.numarrays;
  _32 = (double) _31;
  _33 = _32 * iterations_28;
  _34 = TicksToFracSecs (_8);
  _35 = _33 / _34;
  global_numsortstruct.sortspersec = _35;
  _36 = global_numsortstruct.adjust;
  if (_36 == 0)
    goto <bb 15>; [54.00%]
  else
    goto <bb 16>; [46.00%]

  <bb 15> [6.04%]:
  global_numsortstruct.adjust = 1;

  <bb 16> [11.19%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoStringSort (DoStringSort, funcdef_no=57, decl_uid=4508, cgraph_uid=57, symbol_order=82)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 15 12 13 14
;;
;; Loop 2
;;  header 11, latch 15
;;  depth 1, outer 0
;;  nodes: 11 15
;;
;; Loop 1
;;  header 4, latch 7
;;  depth 1, outer 0
;;  nodes: 4 7 6 5
;; 2 succs { 3 8 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 10 7 }
;; 7 succs { 4 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 11 }
;; 11 succs { 15 12 }
;; 15 succs { 11 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

iterations_8 -> { iterations_59 }
_22 -> { _27 }
Incremental SSA update started at block: 11
Number of blocks in CFG: 16
Number of blocks to update: 3 ( 19%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

systemerror.14_66 -> { systemerror.14_7 }
systemerror.17_67 -> { systemerror.17_21 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 16
Number of blocks to update: 4 ( 25%)



Value ranges after VRP:

_1: VARYING
_2: VARYING
_3: [0, +INF]
_4: VARYING
_5: [0, 65535]
_6: [0, +INF]
systemerror.14_7: VARYING
iterations_8: VARYING
_9: VARYING
_10: VARYING
_11: [0, 65535]
_12: VARYING
global_min_ticks.16_13: VARYING
_14: VARYING
_15: [0, +INF]
_16: VARYING
_17: [0, +INF]
_18: VARYING
_19: [0, 65535]
_20: [0, +INF]
systemerror.17_21: VARYING
_22: [0, +INF]  EQUIVALENCES: { } (0 elements)
_23: VARYING
_24: VARYING
_25: [0, 65535]
accumtime.19_26: [0, +INF]
_27: [0, +INF]  EQUIVALENCES: { } (0 elements)
_28: VARYING
_29: VARYING
_30: VARYING
_31: VARYING
_32: VARYING
_33: VARYING
_34: VARYING
arraybase_35: VARYING
accumtime_36: VARYING
iterations_37: VARYING
.MEM_38: VARYING
.MEM_39: VARYING
.MEM_40: VARYING
.MEM_41: VARYING
.MEM_42: VARYING
arraybase_45: VARYING
arraybase_50: VARYING
_57: VARYING
accumtime_58: VARYING
iterations_59: VARYING
systemerror.14_66: ~[0, 0]  EQUIVALENCES: { systemerror.14_7 } (1 elements)
systemerror.17_67: ~[0, 0]  EQUIVALENCES: { systemerror.17_21 } (1 elements)


Removing basic block 15
DoStringSort ()
{
  int systemerror;
  double iterations;
  long int accumtime;
  faruchar * arraybase;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  short unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  int systemerror.14_7;
  long unsigned int _9;
  short unsigned int _10;
  unsigned int _11;
  long unsigned int _12;
  long unsigned int global_min_ticks.16_13;
  short unsigned int _14;
  short unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  short unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  int systemerror.17_21;
  long unsigned int _22;
  long unsigned int _23;
  short unsigned int _24;
  unsigned int _25;
  long unsigned int accumtime.19_26;
  long unsigned int _27;
  short unsigned int _28;
  double _29;
  long unsigned int _30;
  long unsigned int _31;
  double _32;
  double _33;
  int _34;
  long unsigned int _57;

  <bb 2> [15.00%]:
  _1 = global_strsortstruct.adjust;
  if (_1 == 0)
    goto <bb 3>; [67.00%]
  else
    goto <bb 8>; [33.00%]

  <bb 3> [10.05%]:
  global_strsortstruct.numarrays = 1;

  <bb 4> [67.00%]:
  _2 = global_strsortstruct.arraysize;
  _3 = _2 + 100;
  _4 = global_strsortstruct.numarrays;
  _5 = (long unsigned int) _4;
  _6 = _3 * _5;
  arraybase_50 = AllocateMemory (_6, &systemerror);
  systemerror.14_7 = systemerror;
  if (systemerror.14_7 != 0)
    goto <bb 5>; [33.00%]
  else
    goto <bb 6>; [67.00%]

  <bb 5> [22.11%]:
  ReportError ("CPU:String Sort", systemerror.14_7);
  ErrorExit ();

  <bb 6> [67.00%]:
  _9 = global_strsortstruct.arraysize;
  _10 = global_strsortstruct.numarrays;
  _11 = (unsigned int) _10;
  _12 = DoStringSortIteration (arraybase_50, _11, _9);
  global_min_ticks.16_13 = global_min_ticks;
  if (_12 > global_min_ticks.16_13)
    goto <bb 10>; [15.00%]
  else
    goto <bb 7>; [85.00%]

  <bb 7> [56.95%]:
  FreeMemory (arraybase_50, &systemerror);
  _14 = global_strsortstruct.numarrays;
  _15 = _14 + 1;
  global_strsortstruct.numarrays = _15;
  goto <bb 4>; [100.00%]

  <bb 8> [4.95%]:
  _16 = global_strsortstruct.arraysize;
  _17 = _16 + 100;
  _18 = global_strsortstruct.numarrays;
  _19 = (long unsigned int) _18;
  _20 = _17 * _19;
  arraybase_45 = AllocateMemory (_20, &systemerror);
  systemerror.17_21 = systemerror;
  if (systemerror.17_21 != 0)
    goto <bb 9>; [33.00%]
  else
    goto <bb 10>; [67.00%]

  <bb 9> [1.63%]:
  ReportError ("CPU:String Sort", systemerror.17_21);
  ErrorExit ();

  <bb 10> [15.00%]:
  # arraybase_35 = PHI <arraybase_50(6), arraybase_45(8), arraybase_45(9)>

  <bb 11> [100.00%]:
  # accumtime_36 = PHI <0(10), accumtime_58(11)>
  # iterations_37 = PHI <0.0(10), iterations_59(11)>
  _23 = global_strsortstruct.arraysize;
  _24 = global_strsortstruct.numarrays;
  _25 = (unsigned int) _24;
  _57 = DoStringSortIteration (arraybase_35, _25, _23);
  accumtime.19_26 = (long unsigned int) accumtime_36;
  _27 = accumtime.19_26 + _57;
  accumtime_58 = (long int) _27;
  _28 = global_strsortstruct.numarrays;
  _29 = (double) _28;
  iterations_59 = _29 + iterations_37;
  _30 = TicksToSecs (_27);
  _31 = global_strsortstruct.request_secs;
  if (_30 < _31)
    goto <bb 11>; [85.00%]
  else
    goto <bb 12>; [15.00%]

  <bb 12> [15.00%]:
  # _22 = PHI <_27(11)>
  # iterations_8 = PHI <iterations_59(11)>
  FreeMemory (arraybase_35, &systemerror);
  _32 = TicksToFracSecs (_22);
  _33 = iterations_8 / _32;
  global_strsortstruct.sortspersec = _33;
  _34 = global_strsortstruct.adjust;
  if (_34 == 0)
    goto <bb 13>; [54.00%]
  else
    goto <bb 14>; [46.00%]

  <bb 13> [8.10%]:
  global_strsortstruct.adjust = 1;

  <bb 14> [15.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoBitops (DoBitops, funcdef_no=64, decl_uid=4543, cgraph_uid=64, symbol_order=89)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 19 16 17 18
;;
;; Loop 2
;;  header 15, latch 19
;;  depth 1, outer 0
;;  nodes: 15 19
;;
;; Loop 1
;;  header 6, latch 9
;;  depth 1, outer 0
;;  nodes: 6 9 8 7
;; 2 succs { 3 10 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 14 9 }
;; 9 succs { 6 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 }
;; 15 succs { 19 16 }
;; 19 succs { 15 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

accumtime_18 -> { accumtime_69 }
iterations_22 -> { iterations_70 }
Incremental SSA update started at block: 15
Number of blocks in CFG: 20
Number of blocks to update: 3 ( 15%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

systemerror.28_79 -> { systemerror.28_4 }
systemerror.30_80 -> { systemerror.30_7 }
systemerror.33_81 -> { systemerror.33_17 }
systemerror.35_82 -> { systemerror.35_21 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 20
Number of blocks to update: 8 ( 40%)



Value ranges after VRP:

_1: VARYING
_2: VARYING
_3: [0, +INF]
systemerror.28_4: VARYING
_5: VARYING
_6: [0, +INF]
systemerror.30_7: VARYING
_8: VARYING
_9: VARYING
_10: VARYING
_11: ~[2147483648, 18446744071562067967]
global_min_ticks.32_12: VARYING
_13: VARYING
_14: [0, +INF]
_15: VARYING
_16: [0, +INF]
systemerror.33_17: VARYING
accumtime_18: [0, +INF]  EQUIVALENCES: { } (0 elements)
_19: VARYING
_20: [0, +INF]
systemerror.35_21: VARYING
iterations_22: VARYING
_23: VARYING
_24: VARYING
nbitops.37_25: VARYING
_26: VARYING
_27: VARYING
_28: VARYING
_29: VARYING
_30: VARYING
_31: VARYING
bitarraybase_32: VARYING
bitoparraybase_33: VARYING
accumtime_34: VARYING
iterations_35: VARYING
.MEM_36: VARYING
.MEM_37: VARYING
.MEM_38: VARYING
.MEM_39: VARYING
.MEM_40: VARYING
.MEM_41: VARYING
.MEM_42: VARYING
bitarraybase_45: VARYING
bitoparraybase_49: VARYING
bitarraybase_54: VARYING
bitoparraybase_59: VARYING
ticks_64: VARYING
_68: VARYING
accumtime_69: [0, +INF]  EQUIVALENCES: { } (0 elements)
iterations_70: VARYING
systemerror.28_79: ~[0, 0]  EQUIVALENCES: { systemerror.28_4 } (1 elements)
systemerror.30_80: ~[0, 0]  EQUIVALENCES: { systemerror.30_7 } (1 elements)
systemerror.33_81: ~[0, 0]  EQUIVALENCES: { systemerror.33_17 } (1 elements)
systemerror.35_82: ~[0, 0]  EQUIVALENCES: { systemerror.35_21 } (1 elements)


Removing basic block 19
DoBitops ()
{
  int ticks;
  int systemerror;
  double iterations;
  long unsigned int accumtime;
  long unsigned int nbitops;
  farulong * bitoparraybase;
  farulong * bitarraybase;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  int systemerror.28_4;
  long unsigned int _5;
  long unsigned int _6;
  int systemerror.30_7;
  long unsigned int _8;
  long int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int global_min_ticks.32_12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  int systemerror.33_17;
  long unsigned int _19;
  long unsigned int _20;
  int systemerror.35_21;
  long unsigned int _23;
  long int _24;
  long unsigned int nbitops.37_25;
  double _26;
  long unsigned int _27;
  long unsigned int _28;
  double _29;
  double _30;
  int _31;
  long unsigned int _68;

  <bb 2> [15.00%]:
  _1 = global_bitopstruct.adjust;
  if (_1 == 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 3> [7.50%]:
  _2 = global_bitopstruct.bitfieldarraysize;
  _3 = _2 * 8;
  bitarraybase_54 = AllocateMemory (_3, &systemerror);
  systemerror.28_4 = systemerror;
  if (systemerror.28_4 != 0)
    goto <bb 4>; [33.00%]
  else
    goto <bb 5>; [67.00%]

  <bb 4> [2.48%]:
  ReportError ("CPU:Bitfields", systemerror.28_4);
  ErrorExit ();

  <bb 5> [7.50%]:
  global_bitopstruct.bitoparraysize = 30;

  <bb 6> [50.00%]:
  _5 = global_bitopstruct.bitoparraysize;
  _6 = _5 * 16;
  bitoparraybase_59 = AllocateMemory (_6, &systemerror);
  systemerror.30_7 = systemerror;
  if (systemerror.30_7 != 0)
    goto <bb 7>; [33.00%]
  else
    goto <bb 8>; [67.00%]

  <bb 7> [16.50%]:
  ReportError ("CPU:Bitfields", systemerror.30_7);
  FreeMemory (bitarraybase_54, &systemerror);
  ErrorExit ();

  <bb 8> [50.00%]:
  _8 = global_bitopstruct.bitoparraysize;
  _9 = (long int) _8;
  _10 = DoBitfieldIteration (bitarraybase_54, bitoparraybase_59, _9, &nbitops);
  ticks_64 = (int) _10;
  _11 = (long unsigned int) ticks_64;
  global_min_ticks.32_12 = global_min_ticks;
  if (_11 > global_min_ticks.32_12)
    goto <bb 14>; [15.00%]
  else
    goto <bb 9>; [85.00%]

  <bb 9> [42.50%]:
  FreeMemory (bitoparraybase_59, &systemerror);
  _13 = global_bitopstruct.bitoparraysize;
  _14 = _13 + 100;
  global_bitopstruct.bitoparraysize = _14;
  goto <bb 6>; [100.00%]

  <bb 10> [7.50%]:
  _15 = global_bitopstruct.bitfieldarraysize;
  _16 = _15 * 8;
  bitarraybase_45 = AllocateMemory (_16, &systemerror);
  systemerror.33_17 = systemerror;
  if (systemerror.33_17 != 0)
    goto <bb 11>; [33.00%]
  else
    goto <bb 12>; [67.00%]

  <bb 11> [2.48%]:
  ReportError ("CPU:Bitfields", systemerror.33_17);
  ErrorExit ();

  <bb 12> [7.50%]:
  _19 = global_bitopstruct.bitoparraysize;
  _20 = _19 * 16;
  bitoparraybase_49 = AllocateMemory (_20, &systemerror);
  systemerror.35_21 = systemerror;
  if (systemerror.35_21 != 0)
    goto <bb 13>; [33.00%]
  else
    goto <bb 14>; [67.00%]

  <bb 13> [2.48%]:
  ReportError ("CPU:Bitfields", systemerror.35_21);
  FreeMemory (bitarraybase_45, &systemerror);
  ErrorExit ();

  <bb 14> [15.00%]:
  # bitarraybase_32 = PHI <bitarraybase_54(8), bitarraybase_45(12), bitarraybase_45(13)>
  # bitoparraybase_33 = PHI <bitoparraybase_59(8), bitoparraybase_49(12), bitoparraybase_49(13)>

  <bb 15> [100.00%]:
  # accumtime_34 = PHI <0(14), accumtime_69(15)>
  # iterations_35 = PHI <0.0(14), iterations_70(15)>
  _23 = global_bitopstruct.bitoparraysize;
  _24 = (long int) _23;
  _68 = DoBitfieldIteration (bitarraybase_32, bitoparraybase_33, _24, &nbitops);
  accumtime_69 = accumtime_34 + _68;
  nbitops.37_25 = nbitops;
  _26 = (double) nbitops.37_25;
  iterations_70 = _26 + iterations_35;
  _27 = TicksToSecs (accumtime_69);
  _28 = global_bitopstruct.request_secs;
  if (_27 < _28)
    goto <bb 15>; [85.00%]
  else
    goto <bb 16>; [15.00%]

  <bb 16> [15.00%]:
  # accumtime_18 = PHI <accumtime_69(15)>
  # iterations_22 = PHI <iterations_70(15)>
  FreeMemory (bitarraybase_32, &systemerror);
  FreeMemory (bitoparraybase_33, &systemerror);
  _29 = TicksToFracSecs (accumtime_18);
  _30 = iterations_22 / _29;
  global_bitopstruct.bitopspersec = _30;
  _31 = global_bitopstruct.adjust;
  if (_31 == 0)
    goto <bb 17>; [54.00%]
  else
    goto <bb 18>; [46.00%]

  <bb 17> [8.10%]:
  global_bitopstruct.adjust = 1;

  <bb 18> [15.00%]:
  nbitops ={v} {CLOBBER};
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoEmFloat (DoEmFloat, funcdef_no=68, decl_uid=4565, cgraph_uid=68, symbol_order=93)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 17 21 22 18 19 20
;;
;; Loop 2
;;  header 21, latch 22
;;  depth 1, outer 0
;;  nodes: 21 22
;;
;; Loop 1
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12 10
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 14 }
;; 9 succs { 13 }
;; 10 succs { 11 12 }
;; 11 succs { 14 }
;; 12 succs { 13 }
;; 13 succs { 10 14 }
;; 14 succs { 15 17 }
;; 15 succs { 17 }
;; 17 succs { 21 }
;; 21 succs { 22 18 }
;; 22 succs { 21 }
;; 18 succs { 19 20 }
;; 19 succs { 20 }
;; 20 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

loops_12 -> { loops_30 }
accumtime_36 -> { accumtime_69 }
iterations_39 -> { iterations_70 }
Incremental SSA update started at block: 8
Number of blocks in CFG: 23
Number of blocks to update: 7 ( 30%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

systemerror.50_80 -> { systemerror.50_3 }
systemerror.52_81 -> { systemerror.52_7 }
systemerror.54_82 -> { systemerror.54_11 }
loops_83 -> { loops_30 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 23
Number of blocks to update: 10 ( 43%)



Value ranges after VRP:

_1: VARYING
_2: [0, +INF]
systemerror.50_3: VARYING
iterations_4: VARYING
_5: VARYING
_6: [0, +INF]
systemerror.52_7: VARYING
.MEM_8: VARYING
_9: VARYING
_10: [0, +INF]
systemerror.54_11: VARYING
loops_12: [1, 499999]  EQUIVALENCES: { loops_30 } (1 elements)
_13: VARYING
_14: VARYING
_15: VARYING
global_min_ticks.56_16: VARYING
_17: VARYING
_18: VARYING
_19: VARYING
_20: VARYING
_21: VARYING
_22: VARYING
_23: VARYING
_24: VARYING
_25: VARYING
_26: VARYING
_27: VARYING
accumtime_28: VARYING
iterations_29: VARYING
loops_30: [1, 18446744073709551614]
.MEM_31: VARYING
.MEM_32: VARYING
.MEM_33: VARYING
.MEM_34: VARYING
.MEM_35: VARYING
accumtime_36: [0, +INF]  EQUIVALENCES: { } (0 elements)
.MEM_37: VARYING
.MEM_38: VARYING
iterations_39: VARYING
accumtime_40: [0, 0]
abase_43: VARYING
bbase_47: VARYING
cbase_52: VARYING
tickcount_60: VARYING
loops_61: [2, 999998]
_68: VARYING
accumtime_69: [0, +INF]  EQUIVALENCES: { } (0 elements)
iterations_70: VARYING
systemerror.50_80: ~[0, 0]  EQUIVALENCES: { systemerror.50_3 } (1 elements)
systemerror.52_81: ~[0, 0]  EQUIVALENCES: { systemerror.52_7 } (1 elements)
systemerror.54_82: ~[0, 0]  EQUIVALENCES: { systemerror.54_11 } (1 elements)
loops_83: [1, 499999]  EQUIVALENCES: { loops_30 } (1 elements)


Removing basic block 10
Removing basic block 22

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

loops_84 -> { loops_30 }
.MEM_85 -> { .MEM_34 }
loops_86 -> { loops_30 }
.MEM_87 -> { .MEM_34 }
Incremental SSA update started at block: 8
Number of blocks in CFG: 22
Number of blocks to update: 6 ( 27%)


DoEmFloat ()
{
  long unsigned int loops;
  int systemerror;
  long unsigned int tickcount;
  double iterations;
  long unsigned int accumtime;
  struct InternalFPF * cbase;
  struct InternalFPF * bbase;
  struct InternalFPF * abase;
  long unsigned int _1;
  long unsigned int _2;
  int systemerror.50_3;
  long unsigned int _5;
  long unsigned int _6;
  int systemerror.52_7;
  long unsigned int _9;
  long unsigned int _10;
  int systemerror.54_11;
  long unsigned int _13;
  int _14;
  long unsigned int _15;
  long unsigned int global_min_ticks.56_16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  double _23;
  double _24;
  double _25;
  double _26;
  int _27;
  long unsigned int _68;

  <bb 2> [15.00%]:
  _1 = global_emfloatstruct.arraysize;
  _2 = _1 * 12;
  abase_43 = AllocateMemory (_2, &systemerror);
  systemerror.50_3 = systemerror;
  if (systemerror.50_3 != 0)
    goto <bb 3>; [33.00%]
  else
    goto <bb 4>; [67.00%]

  <bb 3> [4.95%]:
  ReportError ("CPU:Floating Emulation", systemerror.50_3);
  ErrorExit ();

  <bb 4> [15.00%]:
  _5 = global_emfloatstruct.arraysize;
  _6 = _5 * 12;
  bbase_47 = AllocateMemory (_6, &systemerror);
  systemerror.52_7 = systemerror;
  if (systemerror.52_7 != 0)
    goto <bb 5>; [33.00%]
  else
    goto <bb 6>; [67.00%]

  <bb 5> [4.95%]:
  ReportError ("CPU:Floating Emulation", systemerror.52_7);
  FreeMemory (abase_43, &systemerror);
  ErrorExit ();

  <bb 6> [15.00%]:
  _9 = global_emfloatstruct.arraysize;
  _10 = _9 * 12;
  cbase_52 = AllocateMemory (_10, &systemerror);
  systemerror.54_11 = systemerror;
  if (systemerror.54_11 != 0)
    goto <bb 7>; [33.00%]
  else
    goto <bb 8>; [67.00%]

  <bb 7> [4.95%]:
  ReportError ("CPU:Floating Emulation", systemerror.54_11);
  FreeMemory (abase_43, &systemerror);
  FreeMemory (bbase_47, &systemerror);
  ErrorExit ();

  <bb 8> [15.00%]:
  _13 = global_emfloatstruct.arraysize;
  SetupCPUEmFloatArrays (abase_43, bbase_47, cbase_52, _13);
  _14 = global_emfloatstruct.adjust;
  if (_14 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 9> [7.50%]:
  global_emfloatstruct.loops = 0;
  goto <bb 21>; [100.00%]

  <bb 10> [58.76%]:
  # loops_86 = PHI <loops_30(13), loops_84(21)>
  _15 = global_emfloatstruct.arraysize;
  tickcount_60 = DoEmFloatIteration (abase_43, bbase_47, cbase_52, _15, loops_86);
  global_min_ticks.56_16 = global_min_ticks;
  if (global_min_ticks.56_16 < tickcount_60)
    goto <bb 11>; [7.50%]
  else
    goto <bb 12>; [92.50%]

  <bb 11> [4.41%]:
  # loops_12 = PHI <loops_86(10)>
  global_emfloatstruct.loops = loops_12;
  goto <bb 14>; [100.00%]

  <bb 12> [54.36%]:
  loops_61 = loops_86 * 2;

  <bb 13> [54.36%]:
  # loops_30 = PHI <loops_61(12)>
  if (loops_30 <= 499999)
    goto <bb 10>; [94.31%]
  else
    goto <bb 14>; [5.69%]

  <bb 14> [15.00%]:
  _17 = global_emfloatstruct.loops;
  if (_17 == 0)
    goto <bb 15>; [33.00%]
  else
    goto <bb 16>; [67.00%]

  <bb 15> [4.95%]:
  __builtin_puts (&"CPU:EMFPU -- CMPUEMFLOATLOOPMAX limit hit"[0]);
  FreeMemory (abase_43, &systemerror);
  FreeMemory (bbase_47, &systemerror);
  FreeMemory (cbase_52, &systemerror);
  ErrorExit ();

  <bb 16> [15.00%]:
  # iterations_4 = PHI <0.0(14), 0.0(15)>

  <bb 17> [100.00%]:
  # accumtime_28 = PHI <0(16), accumtime_69(17)>
  # iterations_29 = PHI <iterations_4(16), iterations_70(17)>
  _18 = global_emfloatstruct.loops;
  _19 = global_emfloatstruct.arraysize;
  _68 = DoEmFloatIteration (abase_43, bbase_47, cbase_52, _19, _18);
  accumtime_69 = accumtime_28 + _68;
  iterations_70 = iterations_29 + 1.0e+0;
  _20 = TicksToSecs (accumtime_69);
  _21 = global_emfloatstruct.request_secs;
  if (_20 < _21)
    goto <bb 17>; [85.00%]
  else
    goto <bb 18>; [15.00%]

  <bb 18> [15.00%]:
  # accumtime_36 = PHI <accumtime_69(17)>
  # iterations_39 = PHI <iterations_70(17)>
  FreeMemory (abase_43, &systemerror);
  FreeMemory (bbase_47, &systemerror);
  FreeMemory (cbase_52, &systemerror);
  _22 = global_emfloatstruct.loops;
  _23 = (double) _22;
  _24 = _23 * iterations_39;
  _25 = TicksToFracSecs (accumtime_36);
  _26 = _24 / _25;
  global_emfloatstruct.emflops = _26;
  _27 = global_emfloatstruct.adjust;
  if (_27 == 0)
    goto <bb 19>; [54.00%]
  else
    goto <bb 20>; [46.00%]

  <bb 19> [8.10%]:
  global_emfloatstruct.adjust = 1;

  <bb 20> [15.00%]:
  systemerror ={v} {CLOBBER};
  return;

  <bb 21> [7.50%]:
  # loops_84 = PHI <1(9)>
  goto <bb 10>; [100.00%]

}



;; Function DoFourier (DoFourier, funcdef_no=69, decl_uid=4578, cgraph_uid=69, symbol_order=94)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 19 16 17 18
;;
;; Loop 2
;;  header 15, latch 19
;;  depth 1, outer 0
;;  nodes: 15 19
;;
;; Loop 1
;;  header 4, latch 9
;;  depth 1, outer 0
;;  nodes: 4 9 8 6 7 5
;; 2 succs { 3 10 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 14 9 }
;; 9 succs { 4 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 }
;; 15 succs { 19 16 }
;; 19 succs { 15 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

accumtime_16 -> { accumtime_68 }
iterations_20 -> { iterations_69 }
Incremental SSA update started at block: 15
Number of blocks in CFG: 20
Number of blocks to update: 3 ( 15%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

systemerror.57_77 -> { systemerror.57_4 }
systemerror.59_78 -> { systemerror.59_7 }
systemerror.62_79 -> { systemerror.62_15 }
systemerror.64_80 -> { systemerror.64_19 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 20
Number of blocks to update: 8 ( 40%)



Value ranges after VRP:

_1: VARYING
_2: VARYING
_3: [0, +INF]
systemerror.57_4: VARYING
_5: VARYING
_6: [0, +INF]
systemerror.59_7: VARYING
_8: VARYING
_9: VARYING
global_min_ticks.61_10: VARYING
_11: VARYING
_12: [0, +INF]
_13: VARYING
_14: [0, +INF]
systemerror.62_15: VARYING
accumtime_16: [0, +INF]  EQUIVALENCES: { } (0 elements)
_17: VARYING
_18: [0, +INF]
systemerror.64_19: VARYING
iterations_20: VARYING
_21: VARYING
_22: VARYING
_23: VARYING
_24: VARYING
_25: VARYING
_26: VARYING
_27: VARYING
_28: VARYING
_29: VARYING
_30: VARYING
abase_31: VARYING
bbase_32: VARYING
accumtime_33: VARYING
iterations_34: VARYING
.MEM_35: VARYING
.MEM_36: VARYING
.MEM_37: VARYING
.MEM_38: VARYING
.MEM_39: VARYING
.MEM_40: VARYING
.MEM_41: VARYING
abase_44: VARYING
bbase_48: VARYING
abase_54: VARYING
bbase_58: VARYING
_67: VARYING
accumtime_68: [0, +INF]  EQUIVALENCES: { } (0 elements)
iterations_69: VARYING
systemerror.57_77: ~[0, 0]  EQUIVALENCES: { systemerror.57_4 } (1 elements)
systemerror.59_78: ~[0, 0]  EQUIVALENCES: { systemerror.59_7 } (1 elements)
systemerror.62_79: ~[0, 0]  EQUIVALENCES: { systemerror.62_15 } (1 elements)
systemerror.64_80: ~[0, 0]  EQUIVALENCES: { systemerror.64_19 } (1 elements)


Removing basic block 19
DoFourier ()
{
  int systemerror;
  double iterations;
  long unsigned int accumtime;
  fardouble * bbase;
  fardouble * abase;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  int systemerror.57_4;
  long unsigned int _5;
  long unsigned int _6;
  int systemerror.59_7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int global_min_ticks.61_10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  int systemerror.62_15;
  long unsigned int _17;
  long unsigned int _18;
  int systemerror.64_19;
  long unsigned int _21;
  long unsigned int _22;
  double _23;
  double _24;
  double _25;
  long unsigned int _26;
  long unsigned int _27;
  double _28;
  double _29;
  int _30;
  long unsigned int _67;

  <bb 2> [15.00%]:
  _1 = global_fourierstruct.adjust;
  if (_1 == 0)
    goto <bb 3>; [67.00%]
  else
    goto <bb 10>; [33.00%]

  <bb 3> [10.05%]:
  global_fourierstruct.arraysize = 100;

  <bb 4> [67.00%]:
  _2 = global_fourierstruct.arraysize;
  _3 = _2 * 8;
  abase_54 = AllocateMemory (_3, &systemerror);
  systemerror.57_4 = systemerror;
  if (systemerror.57_4 != 0)
    goto <bb 5>; [33.00%]
  else
    goto <bb 6>; [67.00%]

  <bb 5> [22.11%]:
  ReportError ("FPU:Transcendental", systemerror.57_4);
  ErrorExit ();

  <bb 6> [67.00%]:
  _5 = global_fourierstruct.arraysize;
  _6 = _5 * 8;
  bbase_58 = AllocateMemory (_6, &systemerror);
  systemerror.59_7 = systemerror;
  if (systemerror.59_7 != 0)
    goto <bb 7>; [33.00%]
  else
    goto <bb 8>; [67.00%]

  <bb 7> [22.11%]:
  ReportError ("FPU:Transcendental", systemerror.59_7);
  FreeMemory (abase_54, &systemerror);
  ErrorExit ();

  <bb 8> [67.00%]:
  _8 = global_fourierstruct.arraysize;
  _9 = DoFPUTransIteration (abase_54, bbase_58, _8);
  global_min_ticks.61_10 = global_min_ticks;
  if (_9 > global_min_ticks.61_10)
    goto <bb 14>; [15.00%]
  else
    goto <bb 9>; [85.00%]

  <bb 9> [56.95%]:
  FreeMemory (abase_54, &systemerror);
  FreeMemory (bbase_58, &systemerror);
  _11 = global_fourierstruct.arraysize;
  _12 = _11 + 50;
  global_fourierstruct.arraysize = _12;
  goto <bb 4>; [100.00%]

  <bb 10> [4.95%]:
  _13 = global_fourierstruct.arraysize;
  _14 = _13 * 8;
  abase_44 = AllocateMemory (_14, &systemerror);
  systemerror.62_15 = systemerror;
  if (systemerror.62_15 != 0)
    goto <bb 11>; [33.00%]
  else
    goto <bb 12>; [67.00%]

  <bb 11> [1.63%]:
  ReportError ("FPU:Transcendental", systemerror.62_15);
  ErrorExit ();

  <bb 12> [4.95%]:
  _17 = global_fourierstruct.arraysize;
  _18 = _17 * 8;
  bbase_48 = AllocateMemory (_18, &systemerror);
  systemerror.64_19 = systemerror;
  if (systemerror.64_19 != 0)
    goto <bb 13>; [33.00%]
  else
    goto <bb 14>; [67.00%]

  <bb 13> [1.63%]:
  ReportError ("FPU:Transcendental", systemerror.64_19);
  FreeMemory (abase_44, &systemerror);
  ErrorExit ();

  <bb 14> [15.00%]:
  # abase_31 = PHI <abase_54(8), abase_44(12), abase_44(13)>
  # bbase_32 = PHI <bbase_58(8), bbase_48(12), bbase_48(13)>

  <bb 15> [100.00%]:
  # accumtime_33 = PHI <0(14), accumtime_68(15)>
  # iterations_34 = PHI <0.0(14), iterations_69(15)>
  _21 = global_fourierstruct.arraysize;
  _67 = DoFPUTransIteration (abase_31, bbase_32, _21);
  accumtime_68 = accumtime_33 + _67;
  _22 = global_fourierstruct.arraysize;
  _23 = (double) _22;
  _24 = _23 * 2.0e+0;
  _25 = _24 - 1.0e+0;
  iterations_69 = _25 + iterations_34;
  _26 = TicksToSecs (accumtime_68);
  _27 = global_fourierstruct.request_secs;
  if (_26 < _27)
    goto <bb 15>; [85.00%]
  else
    goto <bb 16>; [15.00%]

  <bb 16> [15.00%]:
  # accumtime_16 = PHI <accumtime_68(15)>
  # iterations_20 = PHI <iterations_69(15)>
  FreeMemory (abase_31, &systemerror);
  FreeMemory (bbase_32, &systemerror);
  _28 = TicksToFracSecs (accumtime_16);
  _29 = iterations_20 / _28;
  global_fourierstruct.fflops = _29;
  _30 = global_fourierstruct.adjust;
  if (_30 == 0)
    goto <bb 17>; [54.00%]
  else
    goto <bb 18>; [46.00%]

  <bb 17> [8.10%]:
  global_fourierstruct.adjust = 1;

  <bb 18> [15.00%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoAssign (DoAssign, funcdef_no=73, decl_uid=4600, cgraph_uid=73, symbol_order=98)

;; 15 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 52 11 50 12 13 14 15 16 51 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 49 32 47 33 34 35 36 37 48 38 39 40 41 42 43 53 44 45 46
;;
;; Loop 2
;;  header 27, latch 53
;;  depth 1, outer 0
;;  nodes: 27 53 43 42 40 41 39 32 31 30 29 28 49 47 38 37 33 36 35 34 48
;;
;; Loop 9
;;  header 42, latch 41
;;  depth 2, outer 2
;;  nodes: 42 41
;;
;; Loop 10
;;  header 39, latch 38
;;  depth 2, outer 2
;;  nodes: 39 38 37 33 36 35 34 48
;;
;; Loop 11
;;  header 37, latch 36
;;  depth 3, outer 10
;;  nodes: 37 36 35 34 48
;;
;; Loop 12
;;  header 35, latch 34
;;  depth 4, outer 11
;;  nodes: 35 34
;;
;; Loop 13
;;  header 31, latch 30
;;  depth 2, outer 2
;;  nodes: 31 30 29 28 49
;;
;; Loop 14
;;  header 29, latch 28
;;  depth 3, outer 13
;;  nodes: 29 28
;;
;; Loop 1
;;  header 4, latch 23
;;  depth 1, outer 0
;;  nodes: 4 23 22 21 19 20 18 11 10 6 9 8 7 52 5 50 17 16 12 15 14 13 51
;;
;; Loop 3
;;  header 21, latch 20
;;  depth 2, outer 1
;;  nodes: 21 20
;;
;; Loop 4
;;  header 18, latch 17
;;  depth 2, outer 1
;;  nodes: 18 17 16 12 15 14 13 51
;;
;; Loop 5
;;  header 16, latch 15
;;  depth 3, outer 4
;;  nodes: 16 15 14 13 51
;;
;; Loop 6
;;  header 14, latch 13
;;  depth 4, outer 5
;;  nodes: 14 13
;;
;; Loop 7
;;  header 10, latch 9
;;  depth 2, outer 1
;;  nodes: 10 9 8 7 52
;;
;; Loop 8
;;  header 8, latch 7
;;  depth 3, outer 7
;;  nodes: 8 7
;; 2 succs { 3 24 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 10 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 10 }
;; 10 succs { 52 11 }
;; 52 succs { 8 }
;; 11 succs { 50 19 }
;; 50 succs { 18 }
;; 12 succs { 16 }
;; 13 succs { 14 }
;; 14 succs { 13 15 }
;; 15 succs { 16 }
;; 16 succs { 51 17 }
;; 51 succs { 14 }
;; 17 succs { 18 }
;; 18 succs { 12 19 }
;; 19 succs { 21 }
;; 20 succs { 21 }
;; 21 succs { 20 22 }
;; 22 succs { 26 23 }
;; 23 succs { 4 }
;; 24 succs { 25 26 }
;; 25 succs { 26 }
;; 26 succs { 27 }
;; 27 succs { 31 }
;; 28 succs { 29 }
;; 29 succs { 28 30 }
;; 30 succs { 31 }
;; 31 succs { 49 32 }
;; 49 succs { 29 }
;; 32 succs { 47 40 }
;; 47 succs { 39 }
;; 33 succs { 37 }
;; 34 succs { 35 }
;; 35 succs { 34 36 }
;; 36 succs { 37 }
;; 37 succs { 48 38 }
;; 48 succs { 35 }
;; 38 succs { 39 }
;; 39 succs { 33 40 }
;; 40 succs { 42 }
;; 41 succs { 42 }
;; 42 succs { 41 43 }
;; 43 succs { 53 44 }
;; 53 succs { 27 }
;; 44 succs { 45 46 }
;; 45 succs { 46 }
;; 46 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

iterations_5 -> { iterations_50 }
accumtime_14 -> { accumtime_49 }
Incremental SSA update started at block: 27
Number of blocks in CFG: 54
Number of blocks to update: 4 (  7%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_7 -> { _6 }
_44 -> { _15 }
systemerror.69_47 -> { systemerror.69_13 }
_48 -> { _6 }
systemerror.66_135 -> { systemerror.66_4 }
_143 -> { _6 }
_147 -> { _15 }
_148 -> { _15 }
i_149 -> { i_60 }
i_150 -> { i_65 }
j_151 -> { j_69 }
i_152 -> { i_75 }
i_153 -> { i_78 }
j_154 -> { j_82 }
i_155 -> { i_90 }
i_156 -> { i_95 }
j_157 -> { j_99 }
i_158 -> { i_105 }
i_159 -> { i_108 }
j_160 -> { j_112 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 58
Number of blocks to update: 44 ( 76%)



Value ranges after VRP:

_1: VARYING
_2: VARYING
_3: [0, +INF]
systemerror.66_4: VARYING
iterations_5: VARYING
_6: VARYING
_7: [2, +INF]  EQUIVALENCES: { _6 _48 } (2 elements)
global_min_ticks.68_8: VARYING
_9: VARYING
_10: [0, +INF]
_11: VARYING
_12: [0, +INF]
systemerror.69_13: VARYING
accumtime_14: [0, +INF]  EQUIVALENCES: { } (0 elements)
_15: VARYING
_16: VARYING
_17: VARYING
_18: VARYING
_19: VARYING
_20: VARYING
_21: VARYING
_22: VARYING
_23: VARYING
arraybase_24: VARYING
accumtime_25: VARYING
iterations_26: VARYING
.MEM_27: VARYING
.MEM_28: VARYING
.MEM_29: VARYING
.MEM_30: VARYING
.MEM_31: VARYING
arraybase_34: VARYING
arraybase_40: VARYING
_44: [2, +INF]  EQUIVALENCES: { _15 _148 } (2 elements)
systemerror.69_47: ~[0, 0]  EQUIVALENCES: { systemerror.69_13 } (1 elements)
_48: [2, +INF]  EQUIVALENCES: { _6 } (1 elements)
accumtime_49: [0, +INF]  EQUIVALENCES: { } (0 elements)
iterations_50: VARYING
elapsed_57: VARYING
abase$ptrs$p_58: [arraybase_40, -1B]
_59: VARYING
i_60: VARYING
i_61: [0, +INF]
_62: VARYING
abase1$ptrs$p_63: [arraybase_40, -1B]
_64: VARYING
i_65: [0, 101]
_66: [0, 100]
_67: [0, 80800]
_68: VARYING
j_69: [0, 101]
_70: [0, 100]
_71: VARYING
_72: VARYING
j_73: [1, 101]
i_74: [1, 101]
i_75: [1, +INF]
i_76: [2, +INF]
_77: VARYING
i_78: [0, 101]
_79: [0, 100]
_80: [0, 80800]
_81: VARYING
j_82: [0, 101]
_83: [0, 100]
_84: [0, 4294967295]
j_85: [1, 101]
i_86: [1, 101]
elapsed_87: VARYING
abase$ptrs$p_88: [arraybase_24, -1B]
_89: VARYING
i_90: VARYING
i_91: [0, +INF]
_92: VARYING
abase1$ptrs$p_93: [arraybase_24, -1B]
_94: VARYING
i_95: [0, 101]
_96: [0, 100]
_97: [0, 80800]
_98: VARYING
j_99: [0, 101]
_100: [0, 100]
_101: VARYING
_102: VARYING
j_103: [1, 101]
i_104: [1, 101]
i_105: [1, +INF]
i_106: [2, +INF]
_107: VARYING
i_108: [0, 101]
_109: [0, 100]
_110: [0, 80800]
_111: VARYING
j_112: [0, 101]
_113: [0, 100]
_114: [0, 4294967295]
j_115: [1, 101]
i_116: [1, 101]
.MEM_117: VARYING
.MEM_118: VARYING
.MEM_119: VARYING
.MEM_120: VARYING
.MEM_121: VARYING
.MEM_122: VARYING
.MEM_123: VARYING
.MEM_124: VARYING
.MEM_125: VARYING
.MEM_126: VARYING
.MEM_127: VARYING
.MEM_128: VARYING
.MEM_129: VARYING
.MEM_130: VARYING
systemerror.66_135: ~[0, 0]  EQUIVALENCES: { systemerror.66_4 } (1 elements)
_143: [0, 1]  EQUIVALENCES: { _6 } (1 elements)
_147: [0, 1]  EQUIVALENCES: { _15 } (1 elements)
_148: [2, +INF]  EQUIVALENCES: { _15 } (1 elements)
i_149: [0, _6 + 18446744073709551615]  EQUIVALENCES: { i_60 } (1 elements)
i_150: [0, 100]  EQUIVALENCES: { i_65 } (1 elements)
j_151: [0, 100]  EQUIVALENCES: { j_69 } (1 elements)
i_152: [1, 18446744073709551614]  EQUIVALENCES: { i_75 } (1 elements)
i_153: [0, 100]  EQUIVALENCES: { i_78 } (1 elements)
j_154: [0, 100]  EQUIVALENCES: { j_82 } (1 elements)
i_155: [0, _15 + 18446744073709551615]  EQUIVALENCES: { i_90 } (1 elements)
i_156: [0, 100]  EQUIVALENCES: { i_95 } (1 elements)
j_157: [0, 100]  EQUIVALENCES: { j_99 } (1 elements)
i_158: [1, 18446744073709551614]  EQUIVALENCES: { i_105 } (1 elements)
i_159: [0, 100]  EQUIVALENCES: { i_108 } (1 elements)
j_160: [0, 100]  EQUIVALENCES: { j_112 } (1 elements)


Simplified relational if (i_78 <= 100)
 into if (i_78 != 101)

Simplified relational if (i_65 <= 100)
 into if (i_65 != 101)

Simplified relational if (j_69 <= 100)
 into if (j_69 != 101)

Simplified relational if (j_82 <= 100)
 into if (j_82 != 101)

Simplified relational if (i_108 <= 100)
 into if (i_108 != 101)

Simplified relational if (i_95 <= 100)
 into if (i_95 != 101)

Simplified relational if (j_99 <= 100)
 into if (j_99 != 101)

Simplified relational if (j_112 <= 100)
 into if (j_112 != 101)

Removing basic block 7
Removing basic block 12
Removing basic block 13
Removing basic block 28
Removing basic block 33
Removing basic block 34
Removing basic block 47
Removing basic block 48
Removing basic block 49
Removing basic block 50
Removing basic block 51
Removing basic block 52
Removing basic block 53
Removing basic block 54
Removing basic block 55
Removing basic block 56
Removing basic block 57

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

j_161 -> { j_99 }
.MEM_162 -> { .MEM_126 }
i_163 -> { i_95 }
.MEM_164 -> { .MEM_127 }
i_165 -> { i_105 }
abase1$ptrs$p_166 -> { abase1$ptrs$p_93 }
.MEM_167 -> { .MEM_128 }
j_168 -> { j_112 }
.MEM_169 -> { .MEM_124 }
i_170 -> { i_108 }
.MEM_171 -> { .MEM_125 }
j_172 -> { j_69 }
.MEM_173 -> { .MEM_119 }
i_174 -> { i_65 }
.MEM_175 -> { .MEM_120 }
i_176 -> { i_75 }
abase1$ptrs$p_177 -> { abase1$ptrs$p_63 }
.MEM_178 -> { .MEM_121 }
j_179 -> { j_82 }
.MEM_180 -> { .MEM_117 }
i_181 -> { i_78 }
.MEM_182 -> { .MEM_118 }
abase1$ptrs$p_183 -> { abase1$ptrs$p_63 }
i_184 -> { i_65 }
j_185 -> { j_69 }
i_186 -> { i_75 }
i_187 -> { i_78 }
j_188 -> { j_82 }
abase1$ptrs$p_189 -> { abase1$ptrs$p_93 }
i_190 -> { i_95 }
j_191 -> { j_99 }
i_192 -> { i_105 }
i_193 -> { i_108 }
j_194 -> { j_112 }
.MEM_195 -> { .MEM_117 }
.MEM_196 -> { .MEM_118 }
.MEM_197 -> { .MEM_119 }
.MEM_198 -> { .MEM_120 }
.MEM_199 -> { .MEM_121 }
.MEM_200 -> { .MEM_124 }
.MEM_201 -> { .MEM_125 }
.MEM_202 -> { .MEM_126 }
.MEM_203 -> { .MEM_127 }
.MEM_204 -> { .MEM_128 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 61
Number of blocks to update: 40 ( 66%)


DoAssign ()
{
  short unsigned int i;
  short unsigned int j;
  long unsigned int i;
  short unsigned int j;
  short unsigned int i;
  long int * abase1$ptrs$p;
  long unsigned int elapsed;
  long unsigned int i;
  long int * abase$ptrs$p;
  long unsigned int D.8187;
  short unsigned int i;
  short unsigned int j;
  long unsigned int i;
  short unsigned int j;
  short unsigned int i;
  long int * abase1$ptrs$p;
  long unsigned int elapsed;
  long unsigned int i;
  long int * abase$ptrs$p;
  long unsigned int D.8170;
  double iterations;
  long unsigned int accumtime;
  int systemerror;
  farlong * arraybase;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  int systemerror.66_4;
  long unsigned int _6;
  long unsigned int global_min_ticks.68_8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  int systemerror.69_13;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  double _19;
  double _20;
  double _21;
  double _22;
  int _23;
  long int * _59;
  long unsigned int _62;
  long int * _64;
  long unsigned int _66;
  long unsigned int _67;
  farlong[101] * _68;
  int _70;
  farlong[101] * _71;
  long int _72;
  unsigned int _77;
  long unsigned int _79;
  long unsigned int _80;
  farlong[101] * _81;
  int _83;
  long int _84;
  long int * _89;
  long unsigned int _92;
  long int * _94;
  long unsigned int _96;
  long unsigned int _97;
  farlong[101] * _98;
  int _100;
  farlong[101] * _101;
  long int _102;
  unsigned int _107;
  long unsigned int _109;
  long unsigned int _110;
  farlong[101] * _111;
  int _113;
  long int _114;

  <bb 2> [0.00%]:
  _1 = global_assignstruct.adjust;
  if (_1 == 0)
    goto <bb 3>; [67.00%]
  else
    goto <bb 26>; [33.00%]

  <bb 3> [0.00%]:
  global_assignstruct.numarrays = 1;

  <bb 4> [0.00%]:
  _2 = global_assignstruct.numarrays;
  _3 = _2 * 81608;
  arraybase_40 = AllocateMemory (_3, &systemerror);
  systemerror.66_4 = systemerror;
  if (systemerror.66_4 != 0)
    goto <bb 5>; [33.00%]
  else
    goto <bb 6>; [67.00%]

  <bb 5> [0.00%]:
  ReportError ("CPU:Assignment", systemerror.66_4);
  FreeMemory (arraybase_40, &systemerror);
  ErrorExit ();

  <bb 6> [0.00%]:
  _6 = global_assignstruct.numarrays;
  randnum (13);
  goto <bb 60>; [100.00%]

  <bb 7> [17.31%]:
  # j_188 = PHI <j_82(8), j_179(59)>
  _77 = abs_randwc (5000000);
  _79 = (long unsigned int) i_187;
  _80 = _79 * 808;
  _81 = arraybase_40 + _80;
  _83 = (int) j_188;
  _84 = (long int) _77;
  *_81[_83] = _84;
  j_85 = j_188 + 1;

  <bb 8> [17.31%]:
  # j_82 = PHI <j_85(7)>
  if (j_82 != 101)
    goto <bb 7>; [98.99%]
  else
    goto <bb 9>; [1.01%]

  <bb 9> [0.17%]:
  i_86 = i_187 + 1;

  <bb 10> [0.18%]:
  # i_78 = PHI <i_86(9)>
  if (i_78 != 101)
    goto <bb 11>; [99.00%]
  else
    goto <bb 12>; [1.00%]

  <bb 11> [0.18%]:
  # i_187 = PHI <i_78(10), i_181(60)>
  goto <bb 59>; [100.00%]

  <bb 12> [0.00%]:
  if (_6 > 1)
    goto <bb 58>; [67.61%]
  else
    goto <bb 21>; [32.39%]

  <bb 13> [0.01%]:
  # abase1$ptrs$p_183 = PHI <abase1$ptrs$p_63(20), abase1$ptrs$p_177(58)>
  # i_186 = PHI <i_75(20), i_176(58)>
  _64 = abase1$ptrs$p_183 + 81608;
  goto <bb 57>; [100.00%]

  <bb 14> [66.33%]:
  # j_185 = PHI <j_69(15), j_172(56)>
  _66 = (long unsigned int) i_184;
  _67 = _66 * 808;
  _68 = arraybase_40 + _67;
  _70 = (int) j_185;
  _71 = _64 + _67;
  _72 = *_68[_70];
  *_71[_70] = _72;
  j_73 = j_185 + 1;

  <bb 15> [66.33%]:
  # j_69 = PHI <j_73(14)>
  if (j_69 != 101)
    goto <bb 14>; [98.99%]
  else
    goto <bb 16>; [1.01%]

  <bb 16> [0.67%]:
  i_74 = i_184 + 1;

  <bb 17> [0.67%]:
  # i_65 = PHI <i_74(16)>
  if (i_65 != 101)
    goto <bb 18>; [98.99%]
  else
    goto <bb 19>; [1.01%]

  <bb 18> [0.67%]:
  # i_184 = PHI <i_65(17), i_174(57)>
  goto <bb 56>; [100.00%]

  <bb 19> [0.01%]:
  i_76 = i_186 + 1;

  <bb 20> [0.01%]:
  # i_75 = PHI <i_76(19)>
  # abase1$ptrs$p_63 = PHI <_64(19)>
  if (_6 > i_75)
    goto <bb 13>; [85.00%]
  else
    goto <bb 21>; [15.00%]

  <bb 21> [0.00%]:
  elapsed_57 = StartStopwatch ();
  goto <bb 23>; [100.00%]

  <bb 22> [0.01%]:
  Assignment (abase$ptrs$p_58);
  _59 = abase$ptrs$p_58 + 81608;
  i_61 = i_60 + 1;

  <bb 23> [0.01%]:
  # i_60 = PHI <0(21), i_61(22)>
  # abase$ptrs$p_58 = PHI <arraybase_40(21), _59(22)>
  if (_6 > i_60)
    goto <bb 22>; [85.00%]
  else
    goto <bb 24>; [15.00%]

  <bb 24> [0.00%]:
  _62 = StopStopwatch (elapsed_57);
  global_min_ticks.68_8 = global_min_ticks;
  if (global_min_ticks.68_8 < _62)
    goto <bb 28>; [15.00%]
  else
    goto <bb 25>; [85.00%]

  <bb 25> [0.00%]:
  FreeMemory (arraybase_40, &systemerror);
  _9 = global_assignstruct.numarrays;
  _10 = _9 + 1;
  global_assignstruct.numarrays = _10;
  goto <bb 4>; [100.00%]

  <bb 26> [0.00%]:
  _11 = global_assignstruct.numarrays;
  _12 = _11 * 81608;
  arraybase_34 = AllocateMemory (_12, &systemerror);
  systemerror.69_13 = systemerror;
  if (systemerror.69_13 != 0)
    goto <bb 27>; [33.00%]
  else
    goto <bb 28>; [67.00%]

  <bb 27> [0.00%]:
  ReportError ("CPU:Assignment", systemerror.69_13);
  FreeMemory (arraybase_34, &systemerror);
  ErrorExit ();

  <bb 28> [0.00%]:
  # arraybase_24 = PHI <arraybase_40(24), arraybase_34(26), arraybase_34(27)>

  <bb 29> [0.00%]:
  # accumtime_25 = PHI <0(28), accumtime_49(47)>
  # iterations_26 = PHI <0.0(28), iterations_50(47)>
  _15 = global_assignstruct.numarrays;
  randnum (13);
  goto <bb 55>; [100.00%]

  <bb 30> [25.84%]:
  # j_194 = PHI <j_112(31), j_168(54)>
  _107 = abs_randwc (5000000);
  _109 = (long unsigned int) i_193;
  _110 = _109 * 808;
  _111 = arraybase_24 + _110;
  _113 = (int) j_194;
  _114 = (long int) _107;
  *_111[_113] = _114;
  j_115 = j_194 + 1;

  <bb 31> [25.84%]:
  # j_112 = PHI <j_115(30)>
  if (j_112 != 101)
    goto <bb 30>; [98.99%]
  else
    goto <bb 32>; [1.01%]

  <bb 32> [0.26%]:
  i_116 = i_193 + 1;

  <bb 33> [0.26%]:
  # i_108 = PHI <i_116(32)>
  if (i_108 != 101)
    goto <bb 34>; [99.00%]
  else
    goto <bb 35>; [1.00%]

  <bb 34> [0.26%]:
  # i_193 = PHI <i_108(33), i_170(55)>
  goto <bb 54>; [100.00%]

  <bb 35> [0.00%]:
  if (_15 > 1)
    goto <bb 53>; [67.61%]
  else
    goto <bb 44>; [32.39%]

  <bb 36> [0.01%]:
  # abase1$ptrs$p_189 = PHI <abase1$ptrs$p_93(43), abase1$ptrs$p_166(53)>
  # i_192 = PHI <i_105(43), i_165(53)>
  _94 = abase1$ptrs$p_189 + 81608;
  goto <bb 52>; [100.00%]

  <bb 37> [99.00%]:
  # j_191 = PHI <j_99(38), j_161(51)>
  _96 = (long unsigned int) i_190;
  _97 = _96 * 808;
  _98 = arraybase_24 + _97;
  _100 = (int) j_191;
  _101 = _94 + _97;
  _102 = *_98[_100];
  *_101[_100] = _102;
  j_103 = j_191 + 1;

  <bb 38> [99.00%]:
  # j_99 = PHI <j_103(37)>
  if (j_99 != 101)
    goto <bb 37>; [98.99%]
  else
    goto <bb 39>; [1.01%]

  <bb 39> [1.00%]:
  i_104 = i_190 + 1;

  <bb 40> [1.00%]:
  # i_95 = PHI <i_104(39)>
  if (i_95 != 101)
    goto <bb 41>; [98.99%]
  else
    goto <bb 42>; [1.01%]

  <bb 41> [1.00%]:
  # i_190 = PHI <i_95(40), i_163(52)>
  goto <bb 51>; [100.00%]

  <bb 42> [0.01%]:
  i_106 = i_192 + 1;

  <bb 43> [0.01%]:
  # i_105 = PHI <i_106(42)>
  # abase1$ptrs$p_93 = PHI <_94(42)>
  if (_15 > i_105)
    goto <bb 36>; [85.00%]
  else
    goto <bb 44>; [15.00%]

  <bb 44> [0.00%]:
  elapsed_87 = StartStopwatch ();
  goto <bb 46>; [100.00%]

  <bb 45> [0.01%]:
  Assignment (abase$ptrs$p_88);
  _89 = abase$ptrs$p_88 + 81608;
  i_91 = i_90 + 1;

  <bb 46> [0.02%]:
  # i_90 = PHI <0(44), i_91(45)>
  # abase$ptrs$p_88 = PHI <arraybase_24(44), _89(45)>
  if (_15 > i_90)
    goto <bb 45>; [85.00%]
  else
    goto <bb 47>; [15.00%]

  <bb 47> [0.00%]:
  _92 = StopStopwatch (elapsed_87);
  accumtime_49 = accumtime_25 + _92;
  iterations_50 = iterations_26 + 1.0e+0;
  _16 = TicksToSecs (accumtime_49);
  _17 = global_assignstruct.request_secs;
  if (_16 < _17)
    goto <bb 29>; [85.00%]
  else
    goto <bb 48>; [15.00%]

  <bb 48> [0.00%]:
  # accumtime_14 = PHI <accumtime_49(47)>
  # iterations_5 = PHI <iterations_50(47)>
  FreeMemory (arraybase_24, &systemerror);
  _18 = global_assignstruct.numarrays;
  _19 = (double) _18;
  _20 = _19 * iterations_5;
  _21 = TicksToFracSecs (accumtime_14);
  _22 = _20 / _21;
  global_assignstruct.iterspersec = _22;
  _23 = global_assignstruct.adjust;
  if (_23 == 0)
    goto <bb 49>; [54.00%]
  else
    goto <bb 50>; [46.00%]

  <bb 49> [0.00%]:
  global_assignstruct.adjust = 1;

  <bb 50> [0.00%]:
  systemerror ={v} {CLOBBER};
  return;

  <bb 51> [1.00%]:
  # j_161 = PHI <0(41)>
  goto <bb 37>; [100.00%]

  <bb 52> [0.01%]:
  # i_163 = PHI <0(36)>
  goto <bb 41>; [100.00%]

  <bb 53> [0.00%]:
  # i_165 = PHI <1(35)>
  # abase1$ptrs$p_166 = PHI <arraybase_24(35)>
  goto <bb 36>; [100.00%]

  <bb 54> [0.26%]:
  # j_168 = PHI <0(34)>
  goto <bb 30>; [100.00%]

  <bb 55> [0.00%]:
  # i_170 = PHI <0(29)>
  goto <bb 34>; [100.00%]

  <bb 56> [0.67%]:
  # j_172 = PHI <0(18)>
  goto <bb 14>; [100.00%]

  <bb 57> [0.01%]:
  # i_174 = PHI <0(13)>
  goto <bb 18>; [100.00%]

  <bb 58> [0.00%]:
  # i_176 = PHI <1(12)>
  # abase1$ptrs$p_177 = PHI <arraybase_40(12)>
  goto <bb 13>; [100.00%]

  <bb 59> [0.18%]:
  # j_179 = PHI <0(11)>
  goto <bb 7>; [100.00%]

  <bb 60> [0.00%]:
  # i_181 = PHI <0(6)>
  goto <bb 11>; [100.00%]

}



;; Function DoIDEA (DoIDEA, funcdef_no=82, decl_uid=4624, cgraph_uid=82, symbol_order=107)

;; 22 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 106 5 6 105 7 8 104 9 10 11 12 13 103 14 15 113 16 18 19 20 102 21 22 112 23 25 26 27 28 101 29 30 111 31 33 34 35 100 36 37 110 38 40 41 42 43 44 99 45 46 109 47 49 50 51 98 52 53 108 54 56 57 58 59 60 61 62 63 64 67 66 97 68 69 70 71 72 95 73 74 75 76 96 77 78 79 81 92 82 83 93 84 85 86 87 94 88 107 89 90 91
;;
;; Loop 5
;;  header 92, latch 107
;;  depth 1, outer 0
;;  nodes: 92 107 88 87 86 85 93 84 83 82 94
;;
;; Loop 19
;;  header 87, latch 86
;;  depth 2, outer 5
;;  nodes: 87 86 85 93 84 83 82 94
;;
;; Loop 20
;;  header 85, latch 84
;;  depth 3, outer 19
;;  nodes: 85 84
;;
;; Loop 21
;;  header 83, latch 82
;;  depth 3, outer 19
;;  nodes: 83 82
;;
;; Loop 4
;;  header 79, latch 78
;;  depth 1, outer 0
;;  nodes: 79 78 77 76 70 75 74 95 73 72 71 96
;;
;; Loop 16
;;  header 76, latch 75
;;  depth 2, outer 4
;;  nodes: 76 75 74 95 73 72 71 96
;;
;; Loop 17
;;  header 74, latch 73
;;  depth 3, outer 16
;;  nodes: 74 73
;;
;; Loop 18
;;  header 72, latch 71
;;  depth 3, outer 16
;;  nodes: 72 71
;;
;; Loop 3
;;  header 97, latch 66
;;  depth 1, outer 0
;;  nodes: 97 66
;;
;; Loop 6
;;  header 58, latch 57
;;  depth 1, outer 0
;;  nodes: 58 57
;;
;; Loop 15
;;  header 52, latch 108
;;  depth 1, outer 0
;;  nodes: 52 108 53
;;
;; Loop 14
;;  header 45, latch 109
;;  depth 1, outer 0
;;  nodes: 45 109 46
;;
;; Loop 7
;;  header 41, latch 40
;;  depth 1, outer 0
;;  nodes: 41 40 33 36 35 38 37 34 100 110 26 29 28 31 30 27 101 111
;;
;; Loop 13
;;  header 36, latch 110
;;  depth 2, outer 7
;;  nodes: 36 110 37
;;
;; Loop 12
;;  header 29, latch 111
;;  depth 2, outer 7
;;  nodes: 29 111 30
;;
;; Loop 11
;;  header 21, latch 112
;;  depth 1, outer 0
;;  nodes: 21 112 22
;;
;; Loop 10
;;  header 14, latch 113
;;  depth 1, outer 0
;;  nodes: 14 113 15
;;
;; Loop 8
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9
;;
;; Loop 9
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7
;;
;; Loop 2
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 106 }
;; 106 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 105 }
;; 105 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 7 104 }
;; 104 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 9 11 }
;; 11 succs { 18 12 }
;; 12 succs { 13 103 }
;; 13 succs { 18 }
;; 103 succs { 14 }
;; 14 succs { 18 15 }
;; 15 succs { 113 16 }
;; 113 succs { 14 }
;; 16 succs { 18 }
;; 18 succs { 25 19 }
;; 19 succs { 20 102 }
;; 20 succs { 25 }
;; 102 succs { 21 }
;; 21 succs { 25 22 }
;; 22 succs { 112 23 }
;; 112 succs { 21 }
;; 23 succs { 25 }
;; 25 succs { 41 }
;; 26 succs { 33 27 }
;; 27 succs { 28 101 }
;; 28 succs { 33 }
;; 101 succs { 29 }
;; 29 succs { 33 30 }
;; 30 succs { 111 31 }
;; 111 succs { 29 }
;; 31 succs { 33 }
;; 33 succs { 40 34 }
;; 34 succs { 35 100 }
;; 35 succs { 40 }
;; 100 succs { 36 }
;; 36 succs { 40 37 }
;; 37 succs { 110 38 }
;; 110 succs { 36 }
;; 38 succs { 40 }
;; 40 succs { 41 }
;; 41 succs { 26 42 }
;; 42 succs { 49 43 }
;; 43 succs { 44 99 }
;; 44 succs { 49 }
;; 99 succs { 45 }
;; 45 succs { 49 46 }
;; 46 succs { 109 47 }
;; 109 succs { 45 }
;; 47 succs { 49 }
;; 49 succs { 56 50 }
;; 50 succs { 51 98 }
;; 51 succs { 56 }
;; 98 succs { 52 }
;; 52 succs { 56 53 }
;; 53 succs { 108 54 }
;; 108 succs { 52 }
;; 54 succs { 56 }
;; 56 succs { 58 }
;; 57 succs { 58 }
;; 58 succs { 57 59 }
;; 59 succs { 60 61 }
;; 60 succs { 61 }
;; 61 succs { 62 63 }
;; 62 succs { 63 }
;; 63 succs { 64 67 }
;; 64 succs { 67 }
;; 67 succs { 97 }
;; 66 succs { 97 }
;; 97 succs { 66 68 }
;; 68 succs { 69 81 }
;; 69 succs { 79 }
;; 70 succs { 76 }
;; 71 succs { 72 }
;; 72 succs { 71 95 }
;; 95 succs { 74 }
;; 73 succs { 74 }
;; 74 succs { 73 75 }
;; 75 succs { 76 }
;; 76 succs { 96 77 }
;; 96 succs { 72 }
;; 77 succs { 81 78 }
;; 78 succs { 79 }
;; 79 succs { 70 81 }
;; 81 succs { 92 }
;; 92 succs { 87 }
;; 82 succs { 83 }
;; 83 succs { 82 93 }
;; 93 succs { 85 }
;; 84 succs { 85 }
;; 85 succs { 84 86 }
;; 86 succs { 87 }
;; 87 succs { 94 88 }
;; 94 succs { 83 }
;; 88 succs { 107 89 }
;; 107 succs { 92 }
;; 89 succs { 90 91 }
;; 90 succs { 91 }
;; 91 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

t1_5 -> { t1_274 }
Z_11 -> { Z_108 }
iterations_13 -> { iterations_75 }
p_191 -> { p_111 }
t1_213 -> { t1_208 }
t1_235 -> { t1_296 }
t1_257 -> { t1_318 }
t1_279 -> { t1_230 }
t1_301 -> { t1_252 }
accumtime_321 -> { accumtime_74 }
Incremental SSA update started at block: 11
Number of blocks in CFG: 114
Number of blocks to update: 35 ( 31%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

j_8 -> { j_149 }
_19 -> { _120 }
_21 -> { _132 }
_44 -> { _132 }
_47 -> { _139 }
x_52 -> { x_244 }
y_53 -> { y_250 }
y_70 -> { y_239 }
y_72 -> { y_228 }
p_73 -> { p_146 }
Z_97 -> { Z_11 }
_102 -> { _16 }
i_105 -> { i_35 }
y_114 -> { y_195 }
x_122 -> { x_222 }
i_128 -> { i_36 }
_131 -> { _95 }
Z_134 -> { Z_108 }
_141 -> { _120 }
systemerror.102_190 -> { systemerror.102_4 }
systemerror.104_209 -> { systemerror.104_7 }
_212 -> { _20 }
_231 -> { _25 }
j_234 -> { j_153 }
j_253 -> { j_188 }
x_256 -> { x_200 }
y_275 -> { y_206 }
_278 -> { _95 }
_297 -> { _103 }
p_300 -> { p_111 }
_319 -> { _112 }
systemerror.106_356 -> { systemerror.106_10 }
_357 -> { _27 }
_364 -> { _103 }
_365 -> { _112 }
j_373 -> { j_126 }
_378 -> { _139 }
p_385 -> { p_191 }
y_386 -> { y_217 }
y_393 -> { y_261 }
x_394 -> { x_266 }
y_395 -> { y_272 }
y_396 -> { y_283 }
x_397 -> { x_288 }
y_398 -> { y_294 }
y_399 -> { y_305 }
x_400 -> { x_310 }
y_401 -> { y_316 }
j_402 -> { j_323 }
j_403 -> { j_327 }
i_404 -> { i_331 }
j_405 -> { j_335 }
j_406 -> { j_339 }
i_407 -> { i_343 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 120
Number of blocks to update: 83 ( 69%)



Value ranges after VRP:

_1: VARYING
_2: [0, +INF]
_3: VARYING
systemerror.102_4: VARYING
t1_5: [0, +INF]
_6: VARYING
systemerror.104_7: VARYING
j_8: [0, 51]  EQUIVALENCES: { j_149 } (1 elements)
_9: VARYING
systemerror.106_10: VARYING
Z_11: [&MEM[(void *)&Z + 8B], -1B]
_12: VARYING
iterations_13: VARYING
_14: VARYING
_15: [0, +INF]
_16: [0, 2147483647]
_17: VARYING
_18: VARYING
_19: [0, 1]  EQUIVALENCES: { _120 } (1 elements)
_20: VARYING
_21: [2, +INF]  EQUIVALENCES: { _132 } (1 elements)
global_min_ticks.108_22: VARYING
_23: VARYING
_24: [0, +INF]
_25: VARYING
_26: VARYING
_27: VARYING
_28: VARYING
_29: VARYING
_30: VARYING
_31: VARYING
_32: VARYING
_33: VARYING
_34: VARYING
i_35: [0, 8]
i_36: [0, 52]
i_37: [0, +INF]
accumtime_38: VARYING
iterations_39: VARYING
.MEM_40: VARYING
.MEM_41: VARYING
.MEM_42: VARYING
.MEM_43: VARYING
_44: [0, 1]  EQUIVALENCES: { _132 } (1 elements)
.MEM_45: VARYING
.MEM_46: VARYING
_47: [2, +INF]  EQUIVALENCES: { _139 } (1 elements)
.MEM_48: VARYING
.MEM_49: VARYING
x_52: [0, 65533]  EQUIVALENCES: { x_244 } (1 elements)
y_53: [0, 65532]  EQUIVALENCES: { y_250 } (1 elements)
plain1_55: VARYING
crypt1_59: VARYING
plain2_64: VARYING
y_70: [0, 65534]  EQUIVALENCES: { y_239 } (1 elements)
y_72: [0, 65532]  EQUIVALENCES: { y_228 } (1 elements)
p_73: [&TT, -1B]  EQUIVALENCES: { p_146 } (1 elements)
accumtime_74: [0, +INF]  EQUIVALENCES: { } (0 elements)
iterations_75: VARYING
i_89: [1, +INF(OVF)]
i_91: [1, 52]
i_94: [1, 8]
_95: VARYING
_96: [0, 65535]
Z_97: [&MEM[(void *)&Z + 8B], -1B]  EQUIVALENCES: { Z_11 } (1 elements)
_98: VARYING
t2_99: [0, +INF]
_100: VARYING
t3_101: [0, +INF]
_102: [0, _17 + 18446744073709551615]  EQUIVALENCES: { _16 } (1 elements)
_103: VARYING
_104: [0, 65535]
i_105: [0, 7]  EQUIVALENCES: { i_35 } (1 elements)
_106: [0, +INF]  EQUIVALENCES: { } (0 elements)
_107: [0, +INF]  EQUIVALENCES: { } (0 elements)
Z_108: [&MEM[(void *)&Z + 8B], -1B]
t1_109: VARYING
_110: VARYING
p_111: [0B, &MEM[(void *)&TT + 96B]]
_112: VARYING
_113: [0, 65535]
y_114: [0, 65534]  EQUIVALENCES: { y_195 } (1 elements)
_115: VARYING
t2_116: [0, +INF]
_117: VARYING
t3_118: [0, +INF]
Z_119: VARYING
_120: VARYING
_121: [0, 65535]
x_122: [0, 65533]  EQUIVALENCES: { x_222 } (1 elements)
_123: [0, +INF]  EQUIVALENCES: { } (0 elements)
p_124: VARYING
_125: [0, +INF]  EQUIVALENCES: { } (0 elements)
j_126: [1, 8]
j_127: [2, 8]
i_128: [0, 51]  EQUIVALENCES: { i_36 } (1 elements)
t1_129: VARYING
_130: VARYING
_131: [2, +INF]  EQUIVALENCES: { _95 } (1 elements)
_132: VARYING
_133: [0, 65535]
Z_134: [&MEM[(void *)&Z + 8B], -1B]  EQUIVALENCES: { Z_108 } (1 elements)
_135: VARYING
t2_136: [0, +INF]
_137: VARYING
t3_138: [0, +INF]
_139: VARYING
_140: [0, 65535]
_141: [2, +INF]  EQUIVALENCES: { _120 } (1 elements)
_142: [0, +INF]  EQUIVALENCES: { } (0 elements)
_143: [0, +INF]  EQUIVALENCES: { } (0 elements)
DK_144: [&DK, -1B]
DK_145: VARYING
p_146: [&TT, -1B]
_147: VARYING
p_148: VARYING
j_149: [0, 52]
j_150: [1, 52]
userkey_151: [&userkey, -1B]
userkey_152: VARYING
j_153: [0, 8]
_154: [0, 7]
_155: [0, 14]
_156: VARYING
_157: VARYING
j_158: [1, 8]
i_159: [0, 2147483646]
i_160: [1, +INF]
_161: [1, 2147483647]
_162: [0, 7]
_163: [0, 7]
_164: [0, 14]
Z_165: VARYING
_166: VARYING
_167: VARYING
_168: [0, 65535]
_169: [0, 33553920]
_170: [-INF(OVF), +INF(OVF)]
_171: [2, +INF(OVF)]
_172: [0, 7]
_173: [0, 7]
_174: [0, 14]
_175: VARYING
_176: VARYING
_177: [0, 511]
_178: [0, 511]
_179: VARYING
_180: [8, 2147483654]
_181: [16, 4294967308]
_182: VARYING
_183: [0, +INF]
_184: [0, 8]
_185: [0, 8]
_186: [0, 16]
Z_187: VARYING
j_188: [8, 52]
j_189: [9, 52]
systemerror.102_190: ~[0, 0]  EQUIVALENCES: { systemerror.102_4 } (1 elements)
p_191: [0B, &MEM[(void *)&TT + 96B]]
_192: [1, 65537]
t1_193: [0, +INF]
_194: [0, 65534]
y_195: [0, 65534]
_196: [0, +INF]
x_197: [0, +INF]  EQUIVALENCES: { } (0 elements)
y_198: [0, 65534]  EQUIVALENCES: { } (0 elements)
q_199: [0, +INF]
x_200: [0, 65533]
t1_201: [0, +INF]
_202: [0, +INF]
t0_203: [0, +INF]
t0_204: [0, +INF]
q_205: [0, 65534]
y_206: [0, 65532]
_207: [0, +INF]
t1_208: [0, +INF]
systemerror.104_209: ~[0, 0]  EQUIVALENCES: { systemerror.104_7 } (1 elements)
_210: [0, +INF]
accumtime_211: [0, 0]
_212: [0, +INF]  EQUIVALENCES: { _20 } (1 elements)
t1_213: [0, +INF]
_214: [1, 65537]
t1_215: [0, +INF]
_216: [0, 65534]
y_217: [0, 65534]
_218: [0, +INF]
x_219: [0, +INF]  EQUIVALENCES: { } (0 elements)
y_220: [0, 65534]  EQUIVALENCES: { } (0 elements)
q_221: [0, +INF]
x_222: [0, 65533]
t1_223: [0, +INF]
_224: [0, +INF]
t0_225: [0, +INF]
t0_226: [0, +INF]
q_227: [0, 65534]
y_228: [0, 65532]
_229: [0, +INF]
t1_230: [0, +INF]
_231: [0, 499999]  EQUIVALENCES: { _25 } (1 elements)
_232: [0, +INF]
iterations_233: VARYING
j_234: [0, 7]  EQUIVALENCES: { j_153 } (1 elements)
t1_235: [0, +INF]
_236: [1, 65537]
t1_237: [0, +INF]
_238: [0, 65534]
y_239: [0, 65534]
_240: [0, +INF]
x_241: [0, +INF]  EQUIVALENCES: { } (0 elements)
y_242: [0, 65534]  EQUIVALENCES: { } (0 elements)
q_243: [0, +INF]
x_244: [0, 65533]
t1_245: [0, +INF]
_246: [0, +INF]
t0_247: [0, +INF]
t0_248: [0, +INF]
q_249: [0, 65534]
y_250: [0, 65532]
_251: [0, +INF]
t1_252: [0, +INF]
j_253: [8, 51]  EQUIVALENCES: { j_188 } (1 elements)
_254: [0, +INF]
.MEM_255: VARYING
x_256: [0, 65533]  EQUIVALENCES: { x_200 } (1 elements)
t1_257: [0, +INF]
_258: [1, 65537]
t1_259: [0, +INF]
_260: [0, 65534]
y_261: [0, 65534]
_262: [0, +INF]
x_263: [0, +INF]  EQUIVALENCES: { } (0 elements)
y_264: [0, 65534]  EQUIVALENCES: { } (0 elements)
q_265: [0, +INF]
x_266: [0, 65533]
t1_267: [0, +INF]
_268: [0, +INF]
t0_269: [0, +INF]
t0_270: [0, +INF]
q_271: [0, 65534]
y_272: [0, 65532]
_273: [0, +INF]
t1_274: [0, +INF]
y_275: [0, 65532]  EQUIVALENCES: { y_206 } (1 elements)
_276: [0, +INF]
i_277: [0, 0]
_278: [0, 1]  EQUIVALENCES: { _95 } (1 elements)
t1_279: [0, +INF]
_280: [1, 65537]
t1_281: [0, +INF]
_282: [0, 65534]
y_283: [0, 65534]
_284: [0, +INF]
x_285: [0, +INF]  EQUIVALENCES: { } (0 elements)
y_286: [0, 65534]  EQUIVALENCES: { } (0 elements)
q_287: [0, +INF]
x_288: [0, 65533]
t1_289: [0, +INF]
_290: [0, +INF]
t0_291: [0, +INF]
t0_292: [0, +INF]
q_293: [0, 65534]
y_294: [0, 65532]
_295: [0, +INF]
t1_296: [0, +INF]
_297: [2, +INF]  EQUIVALENCES: { _103 } (1 elements)
_298: [0, +INF]
.MEM_299: VARYING
p_300: [1B, &MEM[(void *)&TT + 96B]]  EQUIVALENCES: { p_111 } (1 elements)
t1_301: [0, +INF]
_302: [1, 65537]
t1_303: [0, +INF]
_304: [0, 65534]
y_305: [0, 65534]
_306: [0, +INF]
x_307: [0, +INF]  EQUIVALENCES: { } (0 elements)
y_308: [0, 65534]  EQUIVALENCES: { } (0 elements)
q_309: [0, +INF]
x_310: [0, 65533]
t1_311: [0, +INF]
_312: [0, +INF]
t0_313: [0, +INF]
t0_314: [0, +INF]
q_315: [0, 65534]
y_316: [0, 65532]
_317: [0, +INF]
t1_318: [0, +INF]
_319: [2, +INF]  EQUIVALENCES: { _112 } (1 elements)
_320: [0, +INF]
accumtime_321: [0, +INF]  EQUIVALENCES: { } (0 elements)
elapsed_322: VARYING
j_323: [0, +INF]
_324: VARYING
_325: VARYING
j_326: [0, +INF]
j_327: [0, +INF]
_328: VARYING
_329: VARYING
j_330: ~[7, 7]
i_331: [0, 499999]
i_332: [1, 499999]
_333: VARYING
elapsed_334: VARYING
j_335: [0, +INF]
_336: VARYING
_337: VARYING
j_338: [0, +INF]
j_339: [0, +INF]
_340: VARYING
_341: VARYING
j_342: ~[7, 7]
i_343: VARYING
i_344: [0, +INF]
_345: VARYING
.MEM_346: VARYING
.MEM_347: VARYING
.MEM_348: VARYING
.MEM_349: VARYING
.MEM_350: VARYING
.MEM_351: VARYING
.MEM_352: VARYING
.MEM_353: VARYING
.MEM_354: VARYING
.MEM_355: VARYING
systemerror.106_356: ~[0, 0]  EQUIVALENCES: { systemerror.106_10 } (1 elements)
_357: [0, +INF]  EQUIVALENCES: { _27 } (1 elements)
_364: [0, 1]  EQUIVALENCES: { _103 } (1 elements)
_365: [0, 1]  EQUIVALENCES: { _112 } (1 elements)
j_373: [1, 7]  EQUIVALENCES: { j_126 } (1 elements)
_378: [0, 1]  EQUIVALENCES: { _139 } (1 elements)
p_385: [1B, &MEM[(void *)&TT + 96B]]  EQUIVALENCES: { p_191 } (1 elements)
y_386: [0, 65534]  EQUIVALENCES: { y_217 } (1 elements)
y_393: [0, 65534]  EQUIVALENCES: { y_261 } (1 elements)
x_394: [0, 65533]  EQUIVALENCES: { x_266 } (1 elements)
y_395: [0, 65532]  EQUIVALENCES: { y_272 } (1 elements)
y_396: [0, 65534]  EQUIVALENCES: { y_283 } (1 elements)
x_397: [0, 65533]  EQUIVALENCES: { x_288 } (1 elements)
y_398: [0, 65532]  EQUIVALENCES: { y_294 } (1 elements)
y_399: [0, 65534]  EQUIVALENCES: { y_305 } (1 elements)
x_400: [0, 65533]  EQUIVALENCES: { x_310 } (1 elements)
y_401: [0, 65532]  EQUIVALENCES: { y_316 } (1 elements)
j_402: [0, _20 + 18446744073709551615]  EQUIVALENCES: { j_323 } (1 elements)
j_403: [0, 18446744073709551614]  EQUIVALENCES: { j_327 } (1 elements)
i_404: [0, 499998]  EQUIVALENCES: { i_331 } (1 elements)
j_405: [0, _27 + 18446744073709551615]  EQUIVALENCES: { j_335 } (1 elements)
j_406: [0, 18446744073709551614]  EQUIVALENCES: { j_339 } (1 elements)
i_407: [0, _26 + 18446744073709551615]  EQUIVALENCES: { i_343 } (1 elements)


Simplified relational if (i_35 <= 7)
 into if (i_35 != 8)

Simplified relational if (i_36 <= 51)
 into if (i_36 != 52)

Simplified relational if (j_153 <= 7)
 into if (j_153 != 8)

Simplified relational if (j_188 <= 51)
 into if (j_188 != 52)

Simplified relational if (j_126 <= 7)
 into if (j_126 != 8)

Simplified relational if (j_149 <= 51)
 into if (j_149 != 52)

Removing basic block 3
Removing basic block 5
Removing basic block 7
Removing basic block 9
Removing basic block 26
Removing basic block 57
Removing basic block 93
Removing basic block 94
Removing basic block 95
Removing basic block 96
Removing basic block 98
Removing basic block 99
Removing basic block 100
Removing basic block 101
Removing basic block 102
Removing basic block 103
Removing basic block 104
Removing basic block 105
Removing basic block 106
Removing basic block 107
Removing basic block 108
Removing basic block 109
Removing basic block 110
Removing basic block 111
Removing basic block 112
Removing basic block 113
Removing basic block 114
Removing basic block 115
Removing basic block 116
Removing basic block 117
Removing basic block 118
Removing basic block 119

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

DK_408 -> { DK_144 }
j_409 -> { j_149 }
p_410 -> { p_146 }
.MEM_411 -> { .MEM_349 }
Z_412 -> { Z_108 }
j_413 -> { j_126 }
p_414 -> { p_111 }
.MEM_415 -> { .MEM_348 }
Z_416 -> { Z_165 }
i_417 -> { i_159 }
j_418 -> { j_188 }
.MEM_419 -> { .MEM_347 }
userkey_420 -> { userkey_151 }
j_421 -> { j_153 }
.MEM_422 -> { .MEM_346 }
i_423 -> { i_36 }
.MEM_424 -> { .MEM_41 }
i_425 -> { i_35 }
.MEM_426 -> { .MEM_40 }
i_427 -> { i_35 }
i_428 -> { i_36 }
.MEM_429 -> { .MEM_40 }
.MEM_430 -> { .MEM_41 }
Z_431 -> { Z_108 }
p_432 -> { p_111 }
j_433 -> { j_126 }
DK_434 -> { DK_144 }
p_435 -> { p_146 }
j_436 -> { j_149 }
userkey_437 -> { userkey_151 }
j_438 -> { j_153 }
i_439 -> { i_159 }
Z_440 -> { Z_165 }
j_441 -> { j_188 }
.MEM_442 -> { .MEM_346 }
.MEM_443 -> { .MEM_347 }
.MEM_444 -> { .MEM_348 }
.MEM_445 -> { .MEM_349 }
Incremental SSA update started at block: 91
Number of blocks in CFG: 92
Number of blocks to update: 25 ( 27%)


DoIDEA ()
{
  register long unsigned int i;
  register long unsigned int j;
  long unsigned int elapsed;
  long unsigned int D.8430;
  register long unsigned int i;
  register long unsigned int j;
  long unsigned int elapsed;
  long unsigned int D.8419;
  u16 y;
  u16 q;
  u16 t1;
  u16 t0;
  u16 D.8408;
  u16 x;
  u16 y;
  u16 q;
  u16 t1;
  u16 t0;
  u16 D.8402;
  u16 x;
  u16 y;
  u16 q;
  u16 t1;
  u16 t0;
  u16 D.8396;
  u16 x;
  u16 y;
  u16 q;
  u16 t1;
  u16 t0;
  u16 D.8390;
  u16 x;
  u16 y;
  u16 q;
  u16 t1;
  u16 t0;
  u16 D.8384;
  u16 x;
  u16 y;
  u16 q;
  u16 t1;
  u16 t0;
  u16 D.8378;
  u16 x;
  int i;
  int j;
  u16 * userkey;
  u16 * Z;
  u16 TT[52];
  int j;
  u16 t1;
  u16 t2;
  u16 t3;
  u16 * p;
  u16 * Z;
  u16 * DK;
  faruchar * plain2;
  faruchar * crypt1;
  faruchar * plain1;
  int systemerror;
  double iterations;
  long unsigned int accumtime;
  u16 userkey[8];
  u16 DK[52];
  u16 Z[52];
  int i;
  unsigned int _1;
  short unsigned int _2;
  long unsigned int _3;
  int systemerror.102_4;
  long unsigned int _6;
  int systemerror.104_7;
  long unsigned int _9;
  int systemerror.106_10;
  unsigned int _12;
  faruchar * _14;
  unsigned char _15;
  long unsigned int _16;
  long unsigned int _17;
  int _18;
  long unsigned int _20;
  long unsigned int global_min_ticks.108_22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  double _29;
  long unsigned int _30;
  long unsigned int _31;
  double _32;
  double _33;
  int _34;
  short unsigned int _95;
  int _96;
  short unsigned int _98;
  short unsigned int _100;
  short unsigned int _103;
  int _104;
  short unsigned int _106;
  short unsigned int _107;
  short unsigned int _110;
  short unsigned int _112;
  int _113;
  short unsigned int _115;
  short unsigned int _117;
  short unsigned int _120;
  int _121;
  short unsigned int _123;
  short unsigned int _125;
  short unsigned int _130;
  short unsigned int _132;
  int _133;
  short unsigned int _135;
  short unsigned int _137;
  short unsigned int _139;
  int _140;
  short unsigned int _142;
  short unsigned int _143;
  short unsigned int _147;
  long unsigned int _154;
  long unsigned int _155;
  u16 * _156;
  short unsigned int _157;
  long unsigned int _161;
  int _162;
  long unsigned int _163;
  long unsigned int _164;
  u16 * _166;
  short unsigned int _167;
  int _168;
  int _169;
  signed short _170;
  int _171;
  int _172;
  long unsigned int _173;
  long unsigned int _174;
  u16 * _175;
  short unsigned int _176;
  short unsigned int _177;
  signed short _178;
  signed short _179;
  sizetype _180;
  sizetype _181;
  u16 * _182;
  short unsigned int _183;
  int _184;
  long unsigned int _185;
  long unsigned int _186;
  int _192;
  int _194;
  short unsigned int _196;
  short unsigned int _202;
  short unsigned int _207;
  short unsigned int _210;
  int _214;
  int _216;
  short unsigned int _218;
  short unsigned int _224;
  short unsigned int _229;
  short unsigned int _232;
  int _236;
  int _238;
  short unsigned int _240;
  short unsigned int _246;
  short unsigned int _251;
  short unsigned int _254;
  int _258;
  int _260;
  short unsigned int _262;
  short unsigned int _268;
  short unsigned int _273;
  short unsigned int _276;
  int _280;
  int _282;
  short unsigned int _284;
  short unsigned int _290;
  short unsigned int _295;
  short unsigned int _298;
  int _302;
  int _304;
  short unsigned int _306;
  short unsigned int _312;
  short unsigned int _317;
  short unsigned int _320;
  faruchar * _324;
  faruchar * _325;
  faruchar * _328;
  faruchar * _329;
  long unsigned int _333;
  faruchar * _336;
  faruchar * _337;
  faruchar * _340;
  faruchar * _341;
  long unsigned int _345;

  <bb 2> [0.40%]:
  randnum (3);
  goto <bb 91>; [100.00%]

  <bb 3> [3.18%]:
  # i_427 = PHI <i_35(4), i_425(91)>
  _1 = abs_randwc (60000);
  _2 = (short unsigned int) _1;
  userkey[i_427] = _2;
  i_94 = i_427 + 1;

  <bb 4> [3.17%]:
  # i_35 = PHI <i_94(3)>
  if (i_35 != 8)
    goto <bb 3>; [87.49%]
  else
    goto <bb 90>; [12.51%]

  <bb 5> [20.61%]:
  # i_428 = PHI <i_36(6), i_423(90)>
  Z[i_428] = 0;
  i_91 = i_428 + 1;

  <bb 6> [20.61%]:
  # i_36 = PHI <i_91(5)>
  if (i_36 != 52)
    goto <bb 5>; [98.07%]
  else
    goto <bb 89>; [1.93%]

  <bb 7> [3.18%]:
  # userkey_437 = PHI <userkey_151(8), userkey_420(89)>
  # j_438 = PHI <j_153(8), j_421(89)>
  userkey_152 = userkey_437 + 2;
  _154 = (long unsigned int) j_438;
  _155 = _154 * 2;
  _156 = &Z + _155;
  _157 = *userkey_437;
  *_156 = _157;
  j_158 = j_438 + 1;

  <bb 8> [3.17%]:
  # userkey_151 = PHI <userkey_152(7)>
  # j_153 = PHI <j_158(7)>
  if (j_153 != 8)
    goto <bb 7>; [87.49%]
  else
    goto <bb 88>; [12.51%]

  <bb 9> [17.49%]:
  # i_439 = PHI <i_159(10), i_417(88)>
  # Z_440 = PHI <Z_165(10), Z_416(88)>
  # j_441 = PHI <j_188(10), j_418(88)>
  i_160 = i_439 + 1;
  _161 = (long unsigned int) i_160;
  _162 = i_160 & 7;
  _163 = (long unsigned int) _162;
  _164 = _163 * 2;
  _166 = Z_440 + _164;
  _167 = *_166;
  _168 = (int) _167;
  _169 = _168 << 9;
  _170 = (signed short) _169;
  _171 = i_439 + 2;
  _172 = _171 & 7;
  _173 = (long unsigned int) _172;
  _174 = _173 * 2;
  _175 = Z_440 + _174;
  _176 = *_175;
  _177 = _176 >> 7;
  _178 = (signed short) _177;
  _179 = _170 | _178;
  _180 = _161 + 7;
  _181 = _180 * 2;
  _182 = Z_440 + _181;
  _183 = (short unsigned int) _179;
  *_182 = _183;
  _184 = i_160 & 8;
  _185 = (long unsigned int) _184;
  _186 = _185 * 2;
  Z_187 = Z_440 + _186;
  j_189 = j_441 + 1;

  <bb 10> [17.49%]:
  # Z_165 = PHI <Z_187(9)>
  # i_159 = PHI <_162(9)>
  # j_188 = PHI <j_189(9)>
  if (j_188 != 52)
    goto <bb 9>; [97.73%]
  else
    goto <bb 11>; [2.27%]

  <bb 11> [0.40%]:
  _95 = MEM[(u16 *)&Z];
  _96 = (int) _95;
  if (_95 <= 1)
    goto <bb 17>; [53.32%]
  else
    goto <bb 12>; [46.68%]

  <bb 12> [0.19%]:
  _192 = 65537 / _96;
  t1_193 = (u16) _192;
  _194 = 65537 % _96;
  y_195 = (u16) _194;
  if (_194 == 1)
    goto <bb 13>; [30.50%]
  else
    goto <bb 14>; [69.50%]

  <bb 13> [0.06%]:
  _196 = 1 - t1_193;
  goto <bb 17>; [100.00%]

  <bb 14> [0.89%]:
  # x_197 = PHI <_95(12), x_200(15)>
  # t0_203 = PHI <1(12), t0_204(15)>
  # t1_201 = PHI <t1_193(12), t1_208(15)>
  # y_198 = PHI <y_195(12), y_206(15)>
  q_199 = x_197 / y_198;
  x_200 = x_197 % y_198;
  _202 = q_199 * t1_201;
  t0_204 = _202 + t0_203;
  if (x_200 == 1)
    goto <bb 17>; [7.50%]
  else
    goto <bb 15>; [92.50%]

  <bb 15> [0.83%]:
  q_205 = y_198 / x_200;
  y_206 = y_198 % x_200;
  _207 = t0_204 * q_205;
  t1_208 = t1_201 + _207;
  if (y_206 != 1)
    goto <bb 14>; [92.50%]
  else
    goto <bb 16>; [7.50%]

  <bb 16> [0.06%]:
  # t1_213 = PHI <t1_208(15)>
  _210 = 1 - t1_213;

  <bb 17> [0.40%]:
  # _107 = PHI <_95(11), t0_204(14), _196(13), _210(16)>
  _98 = MEM[(u16 *)&Z + 2B];
  t2_99 = -_98;
  _100 = MEM[(u16 *)&Z + 4B];
  t3_101 = -_100;
  _103 = MEM[(u16 *)&Z + 6B];
  _104 = (int) _103;
  if (_103 <= 1)
    goto <bb 23>; [53.32%]
  else
    goto <bb 18>; [46.68%]

  <bb 18> [0.19%]:
  _214 = 65537 / _104;
  t1_215 = (u16) _214;
  _216 = 65537 % _104;
  y_217 = (u16) _216;
  if (_216 == 1)
    goto <bb 19>; [30.50%]
  else
    goto <bb 20>; [69.50%]

  <bb 19> [0.06%]:
  _218 = 1 - t1_215;
  goto <bb 23>; [100.00%]

  <bb 20> [0.89%]:
  # x_219 = PHI <_103(18), x_222(21)>
  # t0_225 = PHI <1(18), t0_226(21)>
  # t1_223 = PHI <t1_215(18), t1_230(21)>
  # y_220 = PHI <y_217(18), y_228(21)>
  q_221 = x_219 / y_220;
  x_222 = x_219 % y_220;
  _224 = q_221 * t1_223;
  t0_226 = _224 + t0_225;
  if (x_222 == 1)
    goto <bb 23>; [7.50%]
  else
    goto <bb 21>; [92.50%]

  <bb 21> [0.83%]:
  q_227 = y_220 / x_222;
  y_228 = y_220 % x_222;
  _229 = t0_226 * q_227;
  t1_230 = t1_223 + _229;
  if (y_228 != 1)
    goto <bb 20>; [92.50%]
  else
    goto <bb 22>; [7.50%]

  <bb 22> [0.06%]:
  # t1_279 = PHI <t1_230(21)>
  _232 = 1 - t1_279;

  <bb 23> [0.40%]:
  # _106 = PHI <_103(17), t0_226(20), _218(19), _232(22)>
  MEM[(u16 *)&TT + 102B] = _106;
  MEM[(u16 *)&TT + 100B] = t3_101;
  MEM[(u16 *)&TT + 98B] = t2_99;
  MEM[(u16 *)&TT + 96B] = _107;
  goto <bb 87>; [100.00%]

  <bb 24> [2.78%]:
  # Z_431 = PHI <Z_108(37), Z_412(87)>
  # p_432 = PHI <p_111(37), p_414(87)>
  # j_433 = PHI <j_126(37), j_413(87)>
  t1_109 = *Z_431;
  _110 = MEM[(u16 *)Z_431 + 2B];
  MEM[(u16 *)p_432 + -2B] = _110;
  MEM[(u16 *)p_432 + -4B] = t1_109;
  _112 = MEM[(u16 *)Z_431 + 4B];
  _113 = (int) _112;
  if (_112 <= 1)
    goto <bb 30>; [53.32%]
  else
    goto <bb 25>; [46.68%]

  <bb 25> [1.30%]:
  _236 = 65537 / _113;
  t1_237 = (u16) _236;
  _238 = 65537 % _113;
  y_239 = (u16) _238;
  if (_238 == 1)
    goto <bb 26>; [30.50%]
  else
    goto <bb 27>; [69.50%]

  <bb 26> [0.40%]:
  _240 = 1 - t1_237;
  goto <bb 30>; [100.00%]

  <bb 27> [6.25%]:
  # x_241 = PHI <_112(25), x_244(28)>
  # t0_247 = PHI <1(25), t0_248(28)>
  # t1_245 = PHI <t1_237(25), t1_252(28)>
  # y_242 = PHI <y_239(25), y_250(28)>
  q_243 = x_241 / y_242;
  x_244 = x_241 % y_242;
  _246 = q_243 * t1_245;
  t0_248 = _246 + t0_247;
  if (x_244 == 1)
    goto <bb 30>; [7.50%]
  else
    goto <bb 28>; [92.50%]

  <bb 28> [5.78%]:
  q_249 = y_242 / x_244;
  y_250 = y_242 % x_244;
  _251 = t0_248 * q_249;
  t1_252 = t1_245 + _251;
  if (y_250 != 1)
    goto <bb 27>; [92.50%]
  else
    goto <bb 29>; [7.50%]

  <bb 29> [0.43%]:
  # t1_301 = PHI <t1_252(28)>
  _254 = 1 - t1_301;

  <bb 30> [2.78%]:
  # _125 = PHI <_112(24), t0_248(27), _240(26), _254(29)>
  _115 = MEM[(u16 *)Z_431 + 6B];
  t2_116 = -_115;
  _117 = MEM[(u16 *)Z_431 + 8B];
  t3_118 = -_117;
  Z_119 = &MEM[(void *)Z_431 + 12B];
  _120 = MEM[(u16 *)Z_431 + 10B];
  _121 = (int) _120;
  if (_120 <= 1)
    goto <bb 36>; [53.32%]
  else
    goto <bb 31>; [46.68%]

  <bb 31> [1.30%]:
  _258 = 65537 / _121;
  t1_259 = (u16) _258;
  _260 = 65537 % _121;
  y_261 = (u16) _260;
  if (_260 == 1)
    goto <bb 32>; [30.50%]
  else
    goto <bb 33>; [69.50%]

  <bb 32> [0.40%]:
  _262 = 1 - t1_259;
  goto <bb 36>; [100.00%]

  <bb 33> [6.25%]:
  # x_263 = PHI <_120(31), x_266(34)>
  # t0_269 = PHI <1(31), t0_270(34)>
  # t1_267 = PHI <t1_259(31), t1_274(34)>
  # y_264 = PHI <y_261(31), y_272(34)>
  q_265 = x_263 / y_264;
  x_266 = x_263 % y_264;
  _268 = q_265 * t1_267;
  t0_270 = _268 + t0_269;
  if (x_266 == 1)
    goto <bb 36>; [7.50%]
  else
    goto <bb 34>; [92.50%]

  <bb 34> [5.78%]:
  q_271 = y_264 / x_266;
  y_272 = y_264 % x_266;
  _273 = t0_270 * q_271;
  t1_274 = t1_267 + _273;
  if (y_272 != 1)
    goto <bb 33>; [92.50%]
  else
    goto <bb 35>; [7.50%]

  <bb 35> [0.43%]:
  # t1_5 = PHI <t1_274(34)>
  _276 = 1 - t1_5;

  <bb 36> [2.78%]:
  # _123 = PHI <_120(30), t0_270(33), _262(32), _276(35)>
  MEM[(u16 *)p_432 + -6B] = _123;
  MEM[(u16 *)p_432 + -8B] = t2_116;
  MEM[(u16 *)p_432 + -10B] = t3_118;
  p_124 = &MEM[(void *)p_432 + -12B];
  MEM[(u16 *)p_432 + -12B] = _125;
  j_127 = j_433 + 1;

  <bb 37> [2.78%]:
  # Z_108 = PHI <Z_119(36)>
  # j_126 = PHI <j_127(36)>
  # p_111 = PHI <p_124(36)>
  if (j_126 != 8)
    goto <bb 24>; [85.70%]
  else
    goto <bb 38>; [14.30%]

  <bb 38> [0.40%]:
  # Z_11 = PHI <Z_108(37)>
  # p_191 = PHI <p_111(37)>
  t1_129 = *Z_11;
  _130 = MEM[(u16 *)Z_11 + 2B];
  MEM[(u16 *)p_191 + -2B] = _130;
  MEM[(u16 *)p_191 + -4B] = t1_129;
  _132 = MEM[(u16 *)Z_11 + 4B];
  _133 = (int) _132;
  if (_132 <= 1)
    goto <bb 44>; [53.32%]
  else
    goto <bb 39>; [46.68%]

  <bb 39> [0.19%]:
  _280 = 65537 / _133;
  t1_281 = (u16) _280;
  _282 = 65537 % _133;
  y_283 = (u16) _282;
  if (_282 == 1)
    goto <bb 40>; [30.50%]
  else
    goto <bb 41>; [69.50%]

  <bb 40> [0.06%]:
  _284 = 1 - t1_281;
  goto <bb 44>; [100.00%]

  <bb 41> [0.89%]:
  # x_285 = PHI <_132(39), x_288(42)>
  # t0_291 = PHI <1(39), t0_292(42)>
  # t1_289 = PHI <t1_281(39), t1_296(42)>
  # y_286 = PHI <y_283(39), y_294(42)>
  q_287 = x_285 / y_286;
  x_288 = x_285 % y_286;
  _290 = q_287 * t1_289;
  t0_292 = _290 + t0_291;
  if (x_288 == 1)
    goto <bb 44>; [7.50%]
  else
    goto <bb 42>; [92.50%]

  <bb 42> [0.83%]:
  q_293 = y_286 / x_288;
  y_294 = y_286 % x_288;
  _295 = t0_292 * q_293;
  t1_296 = t1_289 + _295;
  if (y_294 != 1)
    goto <bb 41>; [92.50%]
  else
    goto <bb 43>; [7.50%]

  <bb 43> [0.06%]:
  # t1_235 = PHI <t1_296(42)>
  _298 = 1 - t1_235;

  <bb 44> [0.40%]:
  # _143 = PHI <_132(38), t0_292(41), _284(40), _298(43)>
  _135 = MEM[(u16 *)Z_11 + 6B];
  t2_136 = -_135;
  _137 = MEM[(u16 *)Z_11 + 8B];
  t3_138 = -_137;
  _139 = MEM[(u16 *)Z_11 + 10B];
  _140 = (int) _139;
  if (_139 <= 1)
    goto <bb 50>; [53.32%]
  else
    goto <bb 45>; [46.68%]

  <bb 45> [0.19%]:
  _302 = 65537 / _140;
  t1_303 = (u16) _302;
  _304 = 65537 % _140;
  y_305 = (u16) _304;
  if (_304 == 1)
    goto <bb 46>; [30.50%]
  else
    goto <bb 47>; [69.50%]

  <bb 46> [0.06%]:
  _306 = 1 - t1_303;
  goto <bb 50>; [100.00%]

  <bb 47> [0.89%]:
  # x_307 = PHI <_139(45), x_310(48)>
  # t0_313 = PHI <1(45), t0_314(48)>
  # t1_311 = PHI <t1_303(45), t1_318(48)>
  # y_308 = PHI <y_305(45), y_316(48)>
  q_309 = x_307 / y_308;
  x_310 = x_307 % y_308;
  _312 = q_309 * t1_311;
  t0_314 = _312 + t0_313;
  if (x_310 == 1)
    goto <bb 50>; [7.50%]
  else
    goto <bb 48>; [92.50%]

  <bb 48> [0.83%]:
  q_315 = y_308 / x_310;
  y_316 = y_308 % x_310;
  _317 = t0_314 * q_315;
  t1_318 = t1_311 + _317;
  if (y_316 != 1)
    goto <bb 47>; [92.50%]
  else
    goto <bb 49>; [7.50%]

  <bb 49> [0.06%]:
  # t1_257 = PHI <t1_318(48)>
  _320 = 1 - t1_257;

  <bb 50> [0.40%]:
  # _142 = PHI <_139(44), t0_314(47), _306(46), _320(49)>
  MEM[(u16 *)p_191 + -6B] = _142;
  MEM[(u16 *)p_191 + -8B] = t3_138;
  MEM[(u16 *)p_191 + -10B] = t2_136;
  MEM[(u16 *)p_191 + -12B] = _143;
  goto <bb 86>; [100.00%]

  <bb 51> [20.61%]:
  # DK_434 = PHI <DK_144(52), DK_408(86)>
  # p_435 = PHI <p_146(52), p_410(86)>
  # j_436 = PHI <j_149(52), j_409(86)>
  DK_145 = DK_434 + 2;
  _147 = *p_435;
  *DK_434 = _147;
  p_148 = p_435 + 2;
  *p_435 = 0;
  j_150 = j_436 + 1;

  <bb 52> [20.61%]:
  # DK_144 = PHI <DK_145(51)>
  # j_149 = PHI <j_150(51)>
  # p_146 = PHI <p_148(51)>
  if (j_149 != 52)
    goto <bb 51>; [98.07%]
  else
    goto <bb 53>; [1.93%]

  <bb 53> [0.40%]:
  TT ={v} {CLOBBER};
  _3 = global_ideastruct.arraysize;
  plain1_55 = AllocateMemory (_3, &systemerror);
  systemerror.102_4 = systemerror;
  if (systemerror.102_4 != 0)
    goto <bb 54>; [33.00%]
  else
    goto <bb 55>; [67.00%]

  <bb 54> [0.13%]:
  ReportError ("CPU:IDEA", systemerror.102_4);
  ErrorExit ();

  <bb 55> [0.40%]:
  _6 = global_ideastruct.arraysize;
  crypt1_59 = AllocateMemory (_6, &systemerror);
  systemerror.104_7 = systemerror;
  if (systemerror.104_7 != 0)
    goto <bb 56>; [33.00%]
  else
    goto <bb 57>; [67.00%]

  <bb 56> [0.13%]:
  ReportError ("CPU:IDEA", systemerror.104_7);
  FreeMemory (plain1_55, &systemerror);
  ErrorExit ();

  <bb 57> [0.40%]:
  _9 = global_ideastruct.arraysize;
  plain2_64 = AllocateMemory (_9, &systemerror);
  systemerror.106_10 = systemerror;
  if (systemerror.106_10 != 0)
    goto <bb 58>; [33.00%]
  else
    goto <bb 59>; [67.00%]

  <bb 58> [0.13%]:
  ReportError ("CPU:IDEA", systemerror.106_10);
  FreeMemory (plain1_55, &systemerror);
  FreeMemory (crypt1_59, &systemerror);
  ErrorExit ();

  <bb 59> [0.40%]:
  goto <bb 61>; [100.00%]

  <bb 60> [2.25%]:
  _12 = abs_randwc (255);
  _14 = plain1_55 + _16;
  _15 = (unsigned char) _12;
  *_14 = _15;
  i_89 = i_37 + 1;

  <bb 61> [2.65%]:
  # i_37 = PHI <0(59), i_89(60)>
  _16 = (long unsigned int) i_37;
  _17 = global_ideastruct.arraysize;
  if (_16 < _17)
    goto <bb 60>; [85.00%]
  else
    goto <bb 62>; [15.00%]

  <bb 62> [0.40%]:
  _18 = global_ideastruct.adjust;
  if (_18 == 0)
    goto <bb 63>; [50.00%]
  else
    goto <bb 74>; [50.00%]

  <bb 63> [0.20%]:
  global_ideastruct.loops = 100;
  goto <bb 73>; [100.00%]

  <bb 64> [1.27%]:
  _20 = global_ideastruct.arraysize;
  elapsed_322 = StartStopwatch ();
  goto <bb 70>; [100.00%]

  <bb 65> [40.84%]:
  _324 = crypt1_59 + j_323;
  _325 = plain1_55 + j_323;
  cipher_idea (_325, _324, &Z);
  j_326 = j_323 + 8;

  <bb 66> [48.05%]:
  # j_323 = PHI <j_326(65), 0(70)>
  if (_20 > j_323)
    goto <bb 65>; [85.00%]
  else
    goto <bb 68>; [15.00%]

  <bb 67> [40.84%]:
  _328 = plain2_64 + j_327;
  _329 = crypt1_59 + j_327;
  cipher_idea (_329, _328, &DK);
  j_330 = j_327 + 8;

  <bb 68> [48.05%]:
  # j_327 = PHI <0(66), j_330(67)>
  if (_20 > j_327)
    goto <bb 67>; [85.00%]
  else
    goto <bb 69>; [15.00%]

  <bb 69> [7.21%]:
  i_332 = i_331 + 1;

  <bb 70> [8.48%]:
  # i_331 = PHI <0(64), i_332(69)>
  if (_25 > i_331)
    goto <bb 66>; [85.00%]
  else
    goto <bb 71>; [15.00%]

  <bb 71> [1.27%]:
  _333 = StopStopwatch (elapsed_322);
  global_min_ticks.108_22 = global_min_ticks;
  if (global_min_ticks.108_22 < _333)
    goto <bb 74>; [7.50%]
  else
    goto <bb 72>; [92.50%]

  <bb 72> [1.18%]:
  _23 = global_ideastruct.loops;
  _24 = _23 + 10;
  global_ideastruct.loops = _24;

  <bb 73> [1.38%]:
  _25 = global_ideastruct.loops;
  if (_25 <= 499999)
    goto <bb 64>; [92.50%]
  else
    goto <bb 74>; [7.50%]

  <bb 74> [0.40%]:
  # iterations_233 = PHI <0.0(73), 0.0(62), 0.0(71)>

  <bb 75> [2.65%]:
  # accumtime_38 = PHI <0(74), accumtime_74(82)>
  # iterations_39 = PHI <iterations_233(74), iterations_75(82)>
  _26 = global_ideastruct.loops;
  _27 = global_ideastruct.arraysize;
  elapsed_334 = StartStopwatch ();
  goto <bb 81>; [100.00%]

  <bb 76> [85.00%]:
  _336 = crypt1_59 + j_335;
  _337 = plain1_55 + j_335;
  cipher_idea (_337, _336, &Z);
  j_338 = j_335 + 8;

  <bb 77> [100.00%]:
  # j_335 = PHI <j_338(76), 0(81)>
  if (_27 > j_335)
    goto <bb 76>; [85.00%]
  else
    goto <bb 79>; [15.00%]

  <bb 78> [85.00%]:
  _340 = plain2_64 + j_339;
  _341 = crypt1_59 + j_339;
  cipher_idea (_341, _340, &DK);
  j_342 = j_339 + 8;

  <bb 79> [100.00%]:
  # j_339 = PHI <0(77), j_342(78)>
  if (_27 > j_339)
    goto <bb 78>; [85.00%]
  else
    goto <bb 80>; [15.00%]

  <bb 80> [15.00%]:
  i_344 = i_343 + 1;

  <bb 81> [17.65%]:
  # i_343 = PHI <0(75), i_344(80)>
  if (_26 > i_343)
    goto <bb 77>; [85.00%]
  else
    goto <bb 82>; [15.00%]

  <bb 82> [2.65%]:
  _345 = StopStopwatch (elapsed_334);
  accumtime_74 = accumtime_38 + _345;
  _28 = global_ideastruct.loops;
  _29 = (double) _28;
  iterations_75 = _29 + iterations_39;
  _30 = TicksToSecs (accumtime_74);
  _31 = global_ideastruct.request_secs;
  if (_30 < _31)
    goto <bb 75>; [85.00%]
  else
    goto <bb 83>; [15.00%]

  <bb 83> [0.40%]:
  # accumtime_321 = PHI <accumtime_74(82)>
  # iterations_13 = PHI <iterations_75(82)>
  FreeMemory (plain1_55, &systemerror);
  FreeMemory (crypt1_59, &systemerror);
  FreeMemory (plain2_64, &systemerror);
  _32 = TicksToFracSecs (accumtime_321);
  _33 = iterations_13 / _32;
  global_ideastruct.iterspersec = _33;
  _34 = global_ideastruct.adjust;
  if (_34 == 0)
    goto <bb 84>; [54.00%]
  else
    goto <bb 85>; [46.00%]

  <bb 84> [0.21%]:
  global_ideastruct.adjust = 1;

  <bb 85> [0.40%]:
  Z ={v} {CLOBBER};
  DK ={v} {CLOBBER};
  userkey ={v} {CLOBBER};
  systemerror ={v} {CLOBBER};
  return;

  <bb 86> [0.40%]:
  # DK_408 = PHI <&DK(50)>
  # j_409 = PHI <0(50)>
  # p_410 = PHI <&TT(50)>
  goto <bb 51>; [100.00%]

  <bb 87> [0.40%]:
  # Z_412 = PHI <&MEM[(void *)&Z + 8B](23)>
  # j_413 = PHI <1(23)>
  # p_414 = PHI <&MEM[(void *)&TT + 96B](23)>
  goto <bb 24>; [100.00%]

  <bb 88> [0.40%]:
  # Z_416 = PHI <&Z(8)>
  # i_417 = PHI <0(8)>
  # j_418 = PHI <8(8)>
  goto <bb 9>; [100.00%]

  <bb 89> [0.40%]:
  # userkey_420 = PHI <&userkey(6)>
  # j_421 = PHI <0(6)>
  goto <bb 7>; [100.00%]

  <bb 90> [0.40%]:
  # i_423 = PHI <0(4)>
  goto <bb 5>; [100.00%]

  <bb 91> [0.40%]:
  # i_425 = PHI <0(2)>
  goto <bb 3>; [100.00%]

}



;; Function DoHuffman (DoHuffman, funcdef_no=89, decl_uid=4657, cgraph_uid=89, symbol_order=114)

;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 33 18 19 32 20 21 22 23 24 26 30 31 27 28 29
;;
;; Loop 2
;;  header 30, latch 31
;;  depth 1, outer 0
;;  nodes: 30 31
;;
;; Loop 1
;;  header 24, latch 23
;;  depth 1, outer 0
;;  nodes: 24 23 22
;;
;; Loop 3
;;  header 11, latch 32
;;  depth 1, outer 0
;;  nodes: 11 32 19 13 18 17 15 16 14 33 12
;;
;; Loop 4
;;  header 15, latch 33
;;  depth 2, outer 3
;;  nodes: 15 33 17 16
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 11 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 14 19 }
;; 14 succs { 15 }
;; 15 succs { 16 17 }
;; 16 succs { 17 }
;; 17 succs { 33 18 }
;; 33 succs { 15 }
;; 18 succs { 19 }
;; 19 succs { 32 20 }
;; 32 succs { 11 }
;; 20 succs { 21 26 }
;; 21 succs { 24 }
;; 22 succs { 26 23 }
;; 23 succs { 24 }
;; 24 succs { 22 26 }
;; 26 succs { 30 }
;; 30 succs { 31 27 }
;; 31 succs { 30 }
;; 27 succs { 28 29 }
;; 28 succs { 29 }
;; 29 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

accumtime_93 -> { accumtime_81 }
iterations_94 -> { iterations_82 }
Incremental SSA update started at block: 30
Number of blocks in CFG: 34
Number of blocks to update: 3 (  9%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

systemerror.147_6 -> { systemerror.147_8 }
systemerror.145_9 -> { systemerror.145_5 }
systemerror.143_46 -> { systemerror.143_2 }
_73 -> { _14 }
systemerror.149_75 -> { systemerror.149_11 }
_134 -> { _14 }
_135 -> { _27 }
linelen_136 -> { linelen_101 }
linelen_137 -> { linelen_101 }
linelen.155_138 -> { linelen.155_102 }
linelen.155_139 -> { linelen.155_102 }
bytessofar_140 -> { bytessofar_107 }
wordptr_141 -> { wordptr_109 }
charssofar_142 -> { charssofar_122 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 37
Number of blocks to update: 24 ( 65%)



Value ranges after VRP:

_1: VARYING
systemerror.143_2: VARYING
iterations_3: VARYING
_4: VARYING
systemerror.145_5: VARYING
systemerror.147_6: ~[0, 0]  EQUIVALENCES: { systemerror.147_8 } (1 elements)
_7: VARYING
systemerror.147_8: VARYING
systemerror.145_9: ~[0, 0]  EQUIVALENCES: { systemerror.145_5 } (1 elements)
_10: VARYING
systemerror.149_11: VARYING
accumtime_12: [0, 0]
_13: VARYING
_14: [0, +INF]
_15: VARYING
_16: [0, +INF]
_17: VARYING
_18: VARYING
_19: VARYING
_20: VARYING
hufftree.151_21: VARYING
_22: VARYING
_23: VARYING
global_min_ticks.152_24: VARYING
_25: VARYING
_26: [0, +INF]
_27: VARYING
hufftree.153_28: VARYING
_29: VARYING
_30: VARYING
_31: VARYING
_32: VARYING
_33: VARYING
_34: VARYING
hufftree.154_35: VARYING
_36: VARYING
_37: VARYING
_38: VARYING
accumtime_39: VARYING
iterations_40: VARYING
.MEM_41: VARYING
.MEM_42: VARYING
.MEM_43: VARYING
.MEM_44: VARYING
.MEM_45: VARYING
systemerror.143_46: ~[0, 0]  EQUIVALENCES: { systemerror.143_2 } (1 elements)
.MEM_47: VARYING
.MEM_48: VARYING
plaintext_51: VARYING
comparray_55: VARYING
decomparray_60: VARYING
_73: [0, 18446744073709551614]  EQUIVALENCES: { _14 } (1 elements)
systemerror.149_75: ~[0, 0]  EQUIVALENCES: { systemerror.149_11 } (1 elements)
_80: VARYING
accumtime_81: [0, +INF]  EQUIVALENCES: { } (0 elements)
iterations_82: VARYING
.MEM_92: VARYING
accumtime_93: [0, +INF]  EQUIVALENCES: { } (0 elements)
iterations_94: VARYING
_95: VARYING
_96: [0, +INF]
linelen_97: [0, 4294967295]
bytessofar_98: [0, 18446744073709551614]
_99: [0, +INF]  EQUIVALENCES: { } (0 elements)
linelen_100: [0, +INF]
linelen_101: [0, +INF]
linelen.155_102: ~[0, 1]
tb_103: VARYING
_104: [0, +INF]
tb_105: VARYING
tb_106: VARYING
bytessofar_107: [0, +INF]
_108: VARYING
wordptr_109: VARYING
_110: [0, 9223372036854775806]
_111: [1, 9223372036854775807]
_112: [0, 9223372036854775806]
_113: [1, 9223372036854775807]
tomove_114: [1, +INF]
_115: [0, 9223372036854775806]
charssofar_116: VARYING
_117: VARYING
tomove_118: VARYING
tomove_119: VARYING
tomove.157_120: [0, +INF]
dt_121: VARYING
charssofar_122: VARYING
dt_123: VARYING
.MEM_124: VARYING
.MEM_125: VARYING
.MEM_126: VARYING
_134: [0, +INF]  EQUIVALENCES: { _14 } (1 elements)
_135: [0, 499999]  EQUIVALENCES: { _27 } (1 elements)
linelen_136: [2, +INF]  EQUIVALENCES: { linelen_101 } (1 elements)
linelen_137: [0, 1]  EQUIVALENCES: { linelen_101 } (1 elements)
linelen.155_138: [-INF, _117 + -1]  EQUIVALENCES: { linelen.155_102 } (1 elements)
linelen.155_139: [_117, +INF]  EQUIVALENCES: { linelen.155_102 } (1 elements)
bytessofar_140: [0, 18446744073709551614]  EQUIVALENCES: { bytessofar_107 } (1 elements)
wordptr_141: ~[0B, 0B]  EQUIVALENCES: { wordptr_109 } (1 elements)
charssofar_142: [-INF, linelen.155_102 + -1]  EQUIVALENCES: { charssofar_122 } (1 elements)


Removing basic block 31
Removing basic block 32
Removing basic block 33
Removing basic block 34
Removing basic block 35
Removing basic block 36
DoHuffman ()
{
  long int charssofar;
  long int tomove;
  char myword[40];
  farchar * wordptr;
  farchar * dt;
  long unsigned int linelen;
  long unsigned int bytessofar;
  farchar * tb;
  farchar * plaintext;
  farchar * decomparray;
  farchar * comparray;
  double iterations;
  long unsigned int accumtime;
  int systemerror;
  long unsigned int _1;
  int systemerror.143_2;
  long unsigned int _4;
  int systemerror.145_5;
  long unsigned int _7;
  int systemerror.147_8;
  farvoid * _10;
  int systemerror.149_11;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  sizetype _16;
  farchar * _17;
  long unsigned int _18;
  long int _19;
  int _20;
  struct huff_node * hufftree.151_21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int global_min_ticks.152_24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  struct huff_node * hufftree.153_28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  double _32;
  long unsigned int _33;
  long unsigned int _34;
  struct huff_node * hufftree.154_35;
  double _36;
  double _37;
  int _38;
  long unsigned int _80;
  unsigned int _95;
  unsigned int _96;
  long unsigned int _99;
  long int linelen.155_102;
  sizetype _104;
  unsigned int _108;
  long unsigned int _110;
  long unsigned int _111;
  long unsigned int _112;
  long unsigned int _113;
  long int _115;
  long int _117;
  long unsigned int tomove.157_120;

  <bb 2> [4.82%]:
  _1 = global_huffstruct.arraysize;
  plaintext_51 = AllocateMemory (_1, &systemerror);
  systemerror.143_2 = systemerror;
  if (systemerror.143_2 != 0)
    goto <bb 3>; [33.00%]
  else
    goto <bb 4>; [67.00%]

  <bb 3> [1.59%]:
  ReportError ("CPU:Huffman", systemerror.143_2);
  ErrorExit ();

  <bb 4> [4.82%]:
  _4 = global_huffstruct.arraysize;
  comparray_55 = AllocateMemory (_4, &systemerror);
  systemerror.145_5 = systemerror;
  if (systemerror.145_5 != 0)
    goto <bb 5>; [33.00%]
  else
    goto <bb 6>; [67.00%]

  <bb 5> [1.59%]:
  ReportError ("CPU:Huffman", systemerror.145_5);
  FreeMemory (plaintext_51, &systemerror);
  ErrorExit ();

  <bb 6> [4.82%]:
  _7 = global_huffstruct.arraysize;
  decomparray_60 = AllocateMemory (_7, &systemerror);
  systemerror.147_8 = systemerror;
  if (systemerror.147_8 != 0)
    goto <bb 7>; [33.00%]
  else
    goto <bb 8>; [67.00%]

  <bb 7> [1.59%]:
  ReportError ("CPU:Huffman", systemerror.147_8);
  FreeMemory (plaintext_51, &systemerror);
  FreeMemory (comparray_55, &systemerror);
  ErrorExit ();

  <bb 8> [4.82%]:
  _10 = AllocateMemory (10240, &systemerror);
  hufftree = _10;
  systemerror.149_11 = systemerror;
  if (systemerror.149_11 != 0)
    goto <bb 9>; [33.00%]
  else
    goto <bb 10>; [67.00%]

  <bb 9> [1.59%]:
  ReportError ("CPU:Huffman", systemerror.149_11);
  FreeMemory (plaintext_51, &systemerror);
  FreeMemory (comparray_55, &systemerror);
  FreeMemory (decomparray_60, &systemerror);
  ErrorExit ();

  <bb 10> [4.82%]:
  randnum (13);
  _13 = global_huffstruct.arraysize;
  _14 = _13 + 18446744073709551615;

  <bb 11> [32.13%]:
  # tb_103 = PHI <plaintext_51(10), tb_106(19)>
  # bytessofar_98 = PHI <0(10), bytessofar_107(19)>
  _95 = abs_randwc (494);
  _96 = _95 + 6;
  linelen_97 = (long unsigned int) _96;
  _99 = linelen_97 + bytessofar_98;
  if (_14 < _99)
    goto <bb 12>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 12> [16.07%]:
  linelen_100 = _14 - bytessofar_98;

  <bb 13> [32.13%]:
  # linelen_101 = PHI <linelen_97(11), linelen_100(12)>
  if (linelen_101 > 1)
    goto <bb 14>; [46.68%]
  else
    goto <bb 19>; [53.32%]

  <bb 14> [15.00%]:
  linelen.155_102 = (long int) linelen_101;

  <bb 15> [100.00%]:
  # dt_121 = PHI <tb_103(14), dt_123(17)>
  # charssofar_116 = PHI <0(14), charssofar_122(17)>
  _108 = abs_randwc (50);
  wordptr_109 = wordcatarray[_108];
  _110 = strlen (wordptr_109);
  _111 = _110 + 1;
  MoveMemory (&myword, wordptr_109, _111);
  _112 = strlen (&myword);
  _113 = _112 + 1;
  tomove_114 = (long int) _113;
  _115 = tomove_114 + -1;
  myword[_115] = 32;
  _117 = tomove_114 + charssofar_116;
  if (linelen.155_102 < _117)
    goto <bb 16>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 16> [50.00%]:
  tomove_118 = linelen.155_102 - charssofar_116;

  <bb 17> [100.00%]:
  # tomove_119 = PHI <tomove_114(15), tomove_118(16)>
  tomove.157_120 = (long unsigned int) tomove_119;
  MoveMemory (dt_121, &myword, tomove.157_120);
  charssofar_122 = charssofar_116 + tomove_119;
  dt_123 = dt_121 + tomove.157_120;
  if (linelen.155_102 > charssofar_122)
    goto <bb 15>; [85.00%]
  else
    goto <bb 18>; [15.00%]

  <bb 18> [15.00%]:
  myword ={v} {CLOBBER};

  <bb 19> [32.13%]:
  _104 = linelen_101 + 18446744073709551615;
  tb_105 = tb_103 + _104;
  tb_106 = tb_103 + linelen_101;
  *tb_105 = 10;
  bytessofar_107 = bytessofar_98 + linelen_101;
  if (_14 > bytessofar_107)
    goto <bb 11>; [85.00%]
  else
    goto <bb 20>; [15.00%]

  <bb 20> [4.82%]:
  _15 = global_huffstruct.arraysize;
  _16 = _15 + 18446744073709551615;
  _17 = plaintext_51 + _16;
  *_17 = 0;
  _18 = global_huffstruct.arraysize;
  _19 = (long int) _18;
  _20 = global_huffstruct.adjust;
  if (_20 == 0)
    goto <bb 21>; [50.00%]
  else
    goto <bb 25>; [50.00%]

  <bb 21> [2.41%]:
  global_huffstruct.loops = 100;
  goto <bb 24>; [100.00%]

  <bb 22> [15.44%]:
  hufftree.151_21 = hufftree;
  _22 = global_huffstruct.arraysize;
  _23 = DoHuffIteration (plaintext_51, comparray_55, decomparray_60, _22, _27, hufftree.151_21);
  global_min_ticks.152_24 = global_min_ticks;
  if (_23 > global_min_ticks.152_24)
    goto <bb 25>; [7.50%]
  else
    goto <bb 23>; [92.50%]

  <bb 23> [14.28%]:
  _25 = global_huffstruct.loops;
  _26 = _25 + 10;
  global_huffstruct.loops = _26;

  <bb 24> [16.69%]:
  _27 = global_huffstruct.loops;
  if (_27 <= 499999)
    goto <bb 22>; [92.50%]
  else
    goto <bb 25>; [7.50%]

  <bb 25> [4.82%]:
  # iterations_3 = PHI <0.0(24), 0.0(20), 0.0(22)>

  <bb 26> [32.13%]:
  # accumtime_39 = PHI <0(25), accumtime_81(26)>
  # iterations_40 = PHI <iterations_3(25), iterations_82(26)>
  hufftree.153_28 = hufftree;
  _29 = global_huffstruct.loops;
  _30 = global_huffstruct.arraysize;
  _80 = DoHuffIteration (plaintext_51, comparray_55, decomparray_60, _30, _29, hufftree.153_28);
  accumtime_81 = accumtime_39 + _80;
  _31 = global_huffstruct.loops;
  _32 = (double) _31;
  iterations_82 = _32 + iterations_40;
  _33 = TicksToSecs (accumtime_81);
  _34 = global_huffstruct.request_secs;
  if (_33 < _34)
    goto <bb 26>; [85.00%]
  else
    goto <bb 27>; [15.00%]

  <bb 27> [4.82%]:
  # accumtime_93 = PHI <accumtime_81(26)>
  # iterations_94 = PHI <iterations_82(26)>
  FreeMemory (plaintext_51, &systemerror);
  FreeMemory (comparray_55, &systemerror);
  FreeMemory (decomparray_60, &systemerror);
  hufftree.154_35 = hufftree;
  FreeMemory (hufftree.154_35, &systemerror);
  _36 = TicksToFracSecs (accumtime_93);
  _37 = iterations_94 / _36;
  global_huffstruct.iterspersec = _37;
  _38 = global_huffstruct.adjust;
  if (_38 == 0)
    goto <bb 28>; [54.00%]
  else
    goto <bb 29>; [46.00%]

  <bb 28> [2.60%]:
  global_huffstruct.adjust = 1;

  <bb 29> [4.82%]:
  systemerror ={v} {CLOBBER};
  return;

}



;; Function DoNNET (DoNNET, funcdef_no=95, decl_uid=4701, cgraph_uid=95, symbol_order=120)

Created preheader block for loop 4
Created preheader block for loop 5
;; 6 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 40 16 17 18 19 20 21 22 23 41 24 25 26 27 28 29 30 31 32 33 34 35 36 42 37 38 39
;;
;; Loop 2
;;  header 36, latch 42
;;  depth 1, outer 0
;;  nodes: 36 42
;;
;; Loop 1
;;  header 34, latch 33
;;  depth 1, outer 0
;;  nodes: 34 33 32
;;
;; Loop 3
;;  header 23, latch 22
;;  depth 1, outer 0
;;  nodes: 23 22 21 40 20 18 19 16 17 15 14 41 12
;;
;; Loop 4
;;  header 21, latch 20
;;  depth 2, outer 3
;;  nodes: 21 20 18 19 16 17
;;
;; Loop 5
;;  header 15, latch 14
;;  depth 2, outer 3
;;  nodes: 15 14 12
;; 2 succs { 3 5 }
;; 3 succs { 4 }
;; 4 succs { 29 }
;; 5 succs { 6 7 }
;; 6 succs { 28 }
;; 7 succs { 8 9 }
;; 8 succs { 27 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 23 }
;; 12 succs { 13 14 }
;; 13 succs { 26 }
;; 14 succs { 15 }
;; 15 succs { 12 40 }
;; 40 succs { 21 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 19 20 }
;; 19 succs { 20 }
;; 20 succs { 21 }
;; 21 succs { 16 22 }
;; 22 succs { 23 }
;; 23 succs { 41 24 }
;; 41 succs { 15 }
;; 24 succs { 25 }
;; 25 succs { 30 }
;; 26 succs { 29 }
;; 27 succs { 29 }
;; 28 succs { 29 }
;; 29 succs { 30 }
;; 30 succs { 31 35 }
;; 31 succs { 34 }
;; 32 succs { 35 33 }
;; 33 succs { 34 }
;; 34 succs { 32 35 }
;; 35 succs { 36 }
;; 36 succs { 42 37 }
;; 42 succs { 36 }
;; 37 succs { 38 39 }
;; 38 succs { 39 }
;; 39 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

iterations_137 -> { iterations_40 }
accumtime_138 -> { accumtime_39 }
Incremental SSA update started at block: 36
Number of blocks in CFG: 43
Number of blocks to update: 3 (  7%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

i_131 -> { i_71 }
patt_132 -> { patt_56 }
row_133 -> { row_52 }
vals_read_134 -> { vals_read_48 }
vals_read_135 -> { vals_read_47 }
infile_136 -> { infile_46 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 43
Number of blocks to update: 18 ( 42%)



Value ranges after VRP:

_1: [-1, -1]
_2: VARYING
_3: VARYING
_4: VARYING
global_min_ticks.167_5: VARYING
_6: VARYING
_7: [0, +INF]
_8: VARYING
_9: VARYING
_10: VARYING
_11: VARYING
_12: VARYING
_13: VARYING
_14: VARYING
_15: VARYING
_16: VARYING
accumtime_17: VARYING
iterations_18: VARYING
.MEM_19: VARYING
.MEM_20: VARYING
.MEM_21: VARYING
.MEM_22: VARYING
.MEM_23: VARYING
.MEM_24: VARYING
iterations_35: VARYING
_38: VARYING
accumtime_39: [0, +INF]  EQUIVALENCES: { } (0 elements)
iterations_40: VARYING
inpath.168_45: VARYING
infile_46: VARYING
vals_read_47: VARYING
vals_read_48: VARYING
numpats.169_49: VARYING
vals_read_50: VARYING
xinsize.170_51: VARYING
row_52: [0, +INF]
element_53: VARYING
val1.171_54: VARYING
_55: VARYING
patt_56: [0, 10]
element_57: VARYING
val2.172_58: VARYING
_59: VARYING
element_60: VARYING
val3.173_61: VARYING
_62: VARYING
element_63: VARYING
val4.174_64: VARYING
_65: VARYING
element_66: VARYING
val5.175_67: VARYING
_68: VARYING
row_69: VARYING
yinsize.176_70: VARYING
i_71: [0, 35]
_72: VARYING
_73: VARYING
i_74: [1, 35]
val1.177_75: VARYING
_76: VARYING
val2.178_77: VARYING
_78: VARYING
val3.179_79: VARYING
_80: VARYING
val4.180_81: VARYING
_82: VARYING
val5.181_83: VARYING
_84: VARYING
val6.182_85: VARYING
_86: VARYING
val7.183_87: VARYING
_88: VARYING
val8.184_89: VARYING
_90: VARYING
patt_91: VARYING
numpats.185_92: VARYING
patt_94: [0, 0]
accumtime_95: [0, 0]
.MEM_96: VARYING
.MEM_97: VARYING
.MEM_98: VARYING
.MEM_99: VARYING
.MEM_100: VARYING
i_131: [0, 34]  EQUIVALENCES: { i_71 } (1 elements)
patt_132: [-INF, numpats.185_92 + -1]  EQUIVALENCES: { patt_56 } (1 elements)
row_133: [-INF, yinsize.176_70 + -1]  EQUIVALENCES: { row_52 } (1 elements)
vals_read_134: ~[1, 1]  EQUIVALENCES: { vals_read_48 } (1 elements)
vals_read_135: ~[3, 3]  EQUIVALENCES: { vals_read_47 } (1 elements)
infile_136: ~[0B, 0B]  EQUIVALENCES: { infile_46 } (1 elements)
iterations_137: VARYING
accumtime_138: [0, +INF]  EQUIVALENCES: { } (0 elements)
.MEM_139: VARYING
_148: [0, 0]
.MEM_149: VARYING
_161: [-1, -1]
.MEM_162: VARYING
_174: [-1, -1]
.MEM_175: VARYING
_187: [-1, -1]
.MEM_188: VARYING
.MEM_200: VARYING


Simplified relational if (i_71 <= 34)
 into if (i_71 != 35)

Merging blocks 3 and 4
Merging blocks 6 and 28
Merging blocks 8 and 27
Merging blocks 13 and 26
Removing basic block 16
Merging blocks 24 and 25
Removing basic block 40
Removing basic block 41
Removing basic block 42

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_101 -> { .MEM_99 }
i_128 -> { i_71 }
.MEM_129 -> { .MEM_99 }
i_130 -> { i_71 }
Incremental SSA update started at block: 35
Number of blocks in CFG: 36
Number of blocks to update: 8 ( 22%)


DoNNET ()
{
  struct FILE * infile;
  int xinsize;
  int yinsize;
  int youtsize;
  int patt;
  int element;
  int i;
  int row;
  int vals_read;
  int val1;
  int val2;
  int val3;
  int val4;
  int val5;
  int val6;
  int val7;
  int val8;
  int D.8552;
  double iterations;
  long unsigned int accumtime;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int global_min_ticks.167_5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  double _11;
  long unsigned int _12;
  long unsigned int _13;
  double _14;
  double _15;
  int _16;
  long unsigned int _38;
  char * inpath.168_45;
  int numpats.169_49;
  int xinsize.170_51;
  int val1.171_54;
  double _55;
  int val2.172_58;
  double _59;
  int val3.173_61;
  double _62;
  int val4.174_64;
  double _65;
  int val5.175_67;
  double _68;
  int yinsize.176_70;
  double _72;
  double _73;
  int val1.177_75;
  double _76;
  int val2.178_77;
  double _78;
  int val3.179_79;
  double _80;
  int val4.180_81;
  double _82;
  int val5.181_83;
  double _84;
  int val6.182_85;
  double _86;
  int val7.183_87;
  double _88;
  int val8.184_89;
  double _90;
  int numpats.185_92;

  <bb 2> [3.21%]:
  randnum (3);
  inpath.168_45 = inpath;
  infile_46 = fopen (inpath.168_45, "r");
  if (infile_46 == 0B)
    goto <bb 3>; [0.87%]
  else
    goto <bb 4>; [99.13%]

  <bb 3> [0.03%]:
  __printf_chk (1, "\n CPU:NNET--error in opening file!");
  xinsize ={v} {CLOBBER};
  yinsize ={v} {CLOBBER};
  youtsize ={v} {CLOBBER};
  val1 ={v} {CLOBBER};
  val2 ={v} {CLOBBER};
  val3 ={v} {CLOBBER};
  val4 ={v} {CLOBBER};
  val5 ={v} {CLOBBER};
  val6 ={v} {CLOBBER};
  val7 ={v} {CLOBBER};
  val8 ={v} {CLOBBER};
  goto <bb 24>; [100.00%]

  <bb 4> [3.19%]:
  vals_read_47 = fscanf (infile_46, "%d  %d  %d", &xinsize, &yinsize, &youtsize);
  if (vals_read_47 != 3)
    goto <bb 5>; [3.81%]
  else
    goto <bb 6>; [96.19%]

  <bb 5> [0.12%]:
  __printf_chk (1, "\n CPU:NNET -- Should read 3 items in line one; did read %d", vals_read_47);
  xinsize ={v} {CLOBBER};
  yinsize ={v} {CLOBBER};
  youtsize ={v} {CLOBBER};
  val1 ={v} {CLOBBER};
  val2 ={v} {CLOBBER};
  val3 ={v} {CLOBBER};
  val4 ={v} {CLOBBER};
  val5 ={v} {CLOBBER};
  val6 ={v} {CLOBBER};
  val7 ={v} {CLOBBER};
  val8 ={v} {CLOBBER};
  goto <bb 24>; [100.00%]

  <bb 6> [3.06%]:
  vals_read_48 = fscanf (infile_46, "%d", &numpats);
  if (vals_read_48 != 1)
    goto <bb 7>; [1.91%]
  else
    goto <bb 8>; [98.09%]

  <bb 7> [0.06%]:
  __printf_chk (1, "\n CPU:NNET -- Should read 1 item in line 2; did read %d", vals_read_48);
  xinsize ={v} {CLOBBER};
  yinsize ={v} {CLOBBER};
  youtsize ={v} {CLOBBER};
  val1 ={v} {CLOBBER};
  val2 ={v} {CLOBBER};
  val3 ={v} {CLOBBER};
  val4 ={v} {CLOBBER};
  val5 ={v} {CLOBBER};
  val6 ={v} {CLOBBER};
  val7 ={v} {CLOBBER};
  val8 ={v} {CLOBBER};
  goto <bb 24>; [100.00%]

  <bb 8> [3.01%]:
  numpats.169_49 = numpats;
  if (numpats.169_49 > 10)
    goto <bb 9>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 9> [1.50%]:
  numpats = 10;

  <bb 10> [3.01%]:
  goto <bb 22>; [100.00%]

  <bb 11> [34.29%]:
  vals_read_50 = fscanf (infile_46, "%d  %d  %d  %d  %d", &val1, &val2, &val3, &val4, &val5);
  if (vals_read_50 != 5)
    goto <bb 12>; [7.50%]
  else
    goto <bb 13>; [92.50%]

  <bb 12> [2.57%]:
  __printf_chk (1, "\n CPU:NNET -- failure in reading input!");
  xinsize ={v} {CLOBBER};
  yinsize ={v} {CLOBBER};
  youtsize ={v} {CLOBBER};
  val1 ={v} {CLOBBER};
  val2 ={v} {CLOBBER};
  val3 ={v} {CLOBBER};
  val4 ={v} {CLOBBER};
  val5 ={v} {CLOBBER};
  val6 ={v} {CLOBBER};
  val7 ={v} {CLOBBER};
  val8 ={v} {CLOBBER};
  goto <bb 24>; [100.00%]

  <bb 13> [31.72%]:
  xinsize.170_51 = xinsize;
  element_53 = xinsize.170_51 * row_52;
  val1.171_54 = val1;
  _55 = (double) val1.171_54;
  in_pats[patt_56][element_53] = _55;
  element_57 = element_53 + 1;
  val2.172_58 = val2;
  _59 = (double) val2.172_58;
  in_pats[patt_56][element_57] = _59;
  element_60 = element_53 + 2;
  val3.173_61 = val3;
  _62 = (double) val3.173_61;
  in_pats[patt_56][element_60] = _62;
  element_63 = element_53 + 3;
  val4.174_64 = val4;
  _65 = (double) val4.174_64;
  in_pats[patt_56][element_63] = _65;
  element_66 = element_53 + 4;
  val5.175_67 = val5;
  _68 = (double) val5.175_67;
  in_pats[patt_56][element_66] = _68;
  row_69 = row_52 + 1;

  <bb 14> [37.07%]:
  # row_52 = PHI <row_69(13), 0(22)>
  yinsize.176_70 = yinsize;
  if (row_52 < yinsize.176_70)
    goto <bb 11>; [92.50%]
  else
    goto <bb 35>; [7.50%]

  <bb 15> [97.22%]:
  # i_128 = PHI <i_71(20), i_130(35)>
  _72 = in_pats[patt_56][i_128];
  if (_72 >= 9.0000000000000002220446049250313080847263336181640625e-1)
    goto <bb 16>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 16> [48.61%]:
  in_pats[patt_56][i_128] = 9.0000000000000002220446049250313080847263336181640625e-1;

  <bb 17> [97.22%]:
  _73 = in_pats[patt_56][i_128];
  if (_73 <= 1.000000000000000055511151231257827021181583404541015625e-1)
    goto <bb 18>; [50.00%]
  else
    goto <bb 19>; [50.00%]

  <bb 18> [48.61%]:
  in_pats[patt_56][i_128] = 1.000000000000000055511151231257827021181583404541015625e-1;

  <bb 19> [97.22%]:
  i_74 = i_128 + 1;

  <bb 20> [97.22%]:
  # i_71 = PHI <i_74(19)>
  if (i_71 != 35)
    goto <bb 15>; [97.14%]
  else
    goto <bb 21>; [2.86%]

  <bb 21> [2.78%]:
  fscanf (infile_46, "%d  %d  %d  %d  %d  %d  %d  %d", &val1, &val2, &val3, &val4, &val5, &val6, &val7, &val8);
  val1.177_75 = val1;
  _76 = (double) val1.177_75;
  out_pats[patt_56][0] = _76;
  val2.178_77 = val2;
  _78 = (double) val2.178_77;
  out_pats[patt_56][1] = _78;
  val3.179_79 = val3;
  _80 = (double) val3.179_79;
  out_pats[patt_56][2] = _80;
  val4.180_81 = val4;
  _82 = (double) val4.180_81;
  out_pats[patt_56][3] = _82;
  val5.181_83 = val5;
  _84 = (double) val5.181_83;
  out_pats[patt_56][4] = _84;
  val6.182_85 = val6;
  _86 = (double) val6.182_85;
  out_pats[patt_56][5] = _86;
  val7.183_87 = val7;
  _88 = (double) val7.183_87;
  out_pats[patt_56][6] = _88;
  val8.184_89 = val8;
  _90 = (double) val8.184_89;
  out_pats[patt_56][7] = _90;
  patt_91 = patt_56 + 1;

  <bb 22> [5.79%]:
  # patt_56 = PHI <0(10), patt_91(21)>
  numpats.185_92 = numpats;
  if (patt_56 < numpats.185_92)
    goto <bb 14>; [92.50%]
  else
    goto <bb 23>; [7.50%]

  <bb 23> [0.43%]:
  fclose (infile_46);
  xinsize ={v} {CLOBBER};
  yinsize ={v} {CLOBBER};
  youtsize ={v} {CLOBBER};
  val1 ={v} {CLOBBER};
  val2 ={v} {CLOBBER};
  val3 ={v} {CLOBBER};
  val4 ={v} {CLOBBER};
  val5 ={v} {CLOBBER};
  val6 ={v} {CLOBBER};
  val7 ={v} {CLOBBER};
  val8 ={v} {CLOBBER};
  goto <bb 25>; [100.00%]

  <bb 24> [1.06%]:
  ErrorExit ();

  <bb 25> [3.21%]:
  _2 = global_nnetstruct.adjust;
  if (_2 == 0)
    goto <bb 26>; [50.00%]
  else
    goto <bb 30>; [50.00%]

  <bb 26> [1.61%]:
  global_nnetstruct.loops = 1;
  goto <bb 29>; [100.00%]

  <bb 27> [10.29%]:
  randnum (3);
  _3 = global_nnetstruct.loops;
  _4 = DoNNetIteration (_3);
  global_min_ticks.167_5 = global_min_ticks;
  if (_4 > global_min_ticks.167_5)
    goto <bb 30>; [7.50%]
  else
    goto <bb 28>; [92.50%]

  <bb 28> [9.52%]:
  _6 = global_nnetstruct.loops;
  _7 = _6 + 1;
  global_nnetstruct.loops = _7;

  <bb 29> [11.13%]:
  _8 = global_nnetstruct.loops;
  if (_8 <= 499999)
    goto <bb 27>; [92.50%]
  else
    goto <bb 30>; [7.50%]

  <bb 30> [3.21%]:
  # iterations_35 = PHI <0.0(29), 0.0(25), 0.0(27)>

  <bb 31> [21.42%]:
  # accumtime_17 = PHI <0(30), accumtime_39(31)>
  # iterations_18 = PHI <iterations_35(30), iterations_40(31)>
  randnum (3);
  _9 = global_nnetstruct.loops;
  _38 = DoNNetIteration (_9);
  accumtime_39 = accumtime_17 + _38;
  _10 = global_nnetstruct.loops;
  _11 = (double) _10;
  iterations_40 = _11 + iterations_18;
  _12 = TicksToSecs (accumtime_39);
  _13 = global_nnetstruct.request_secs;
  if (_12 < _13)
    goto <bb 31>; [85.00%]
  else
    goto <bb 32>; [15.00%]

  <bb 32> [3.21%]:
  # accumtime_138 = PHI <accumtime_39(31)>
  # iterations_137 = PHI <iterations_40(31)>
  _14 = TicksToFracSecs (accumtime_138);
  _15 = iterations_137 / _14;
  global_nnetstruct.iterspersec = _15;
  _16 = global_nnetstruct.adjust;
  if (_16 == 0)
    goto <bb 33>; [54.00%]
  else
    goto <bb 34>; [46.00%]

  <bb 33> [1.74%]:
  global_nnetstruct.adjust = 1;

  <bb 34> [3.21%]:
  return;

  <bb 35> [2.78%]:
  # i_130 = PHI <0(14)>
  goto <bb 15>; [100.00%]

}



;; Function DoLU (DoLU, funcdef_no=111, decl_uid=4732, cgraph_uid=111, symbol_order=136)

;; 15 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 77 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 76 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 75 60 61 62 63 64 65 66 67 78 68 69 70 71 72 73 74
;;
;; Loop 2
;;  header 56, latch 78
;;  depth 1, outer 0
;;  nodes: 56 78 67 66 64 65 63 62 61 75 60 59 57 58
;;
;; Loop 11
;;  header 66, latch 65
;;  depth 2, outer 2
;;  nodes: 66 65
;;
;; Loop 12
;;  header 63, latch 62
;;  depth 2, outer 2
;;  nodes: 63 62 61 75 60 59 57 58
;;
;; Loop 13
;;  header 61, latch 60
;;  depth 3, outer 12
;;  nodes: 61 60
;;
;; Loop 14
;;  header 59, latch 58
;;  depth 3, outer 12
;;  nodes: 59 58
;;
;; Loop 1
;;  header 42, latch 41
;;  depth 1, outer 0
;;  nodes: 42 41 39 38 36 37 35 28 34 33 76 32 31 29 30 24 27 26 25 22 23
;;
;; Loop 7
;;  header 38, latch 37
;;  depth 2, outer 1
;;  nodes: 38 37
;;
;; Loop 8
;;  header 35, latch 34
;;  depth 2, outer 1
;;  nodes: 35 34 33 76 32 31 29 30
;;
;; Loop 9
;;  header 33, latch 32
;;  depth 3, outer 8
;;  nodes: 33 32
;;
;; Loop 10
;;  header 31, latch 30
;;  depth 3, outer 8
;;  nodes: 31 30
;;
;; Loop 3
;;  header 19, latch 18
;;  depth 1, outer 0
;;  nodes: 19 18 11 17 16 14 15 12 13
;;
;; Loop 4
;;  header 16, latch 15
;;  depth 2, outer 3
;;  nodes: 16 15
;;
;; Loop 5
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9 8 3 7 5 6 4
;;
;; Loop 6
;;  header 8, latch 7
;;  depth 2, outer 5
;;  nodes: 8 7 5 6 4
;; 2 succs { 10 }
;; 3 succs { 8 }
;; 4 succs { 5 6 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 4 9 }
;; 9 succs { 10 }
;; 10 succs { 3 77 }
;; 77 succs { 19 }
;; 11 succs { 12 18 }
;; 12 succs { 14 13 }
;; 13 succs { 14 }
;; 14 succs { 16 }
;; 15 succs { 16 }
;; 16 succs { 15 17 }
;; 17 succs { 18 }
;; 18 succs { 19 }
;; 19 succs { 11 20 }
;; 20 succs { 21 49 }
;; 21 succs { 42 }
;; 22 succs { 23 24 }
;; 23 succs { 24 }
;; 24 succs { 25 28 }
;; 25 succs { 26 27 }
;; 26 succs { 27 }
;; 27 succs { 28 }
;; 28 succs { 35 }
;; 29 succs { 31 }
;; 30 succs { 31 }
;; 31 succs { 30 76 }
;; 76 succs { 33 }
;; 32 succs { 33 }
;; 33 succs { 32 34 }
;; 34 succs { 35 }
;; 35 succs { 29 36 }
;; 36 succs { 38 }
;; 37 succs { 38 }
;; 38 succs { 37 39 }
;; 39 succs { 40 41 }
;; 40 succs { 43 }
;; 41 succs { 42 }
;; 42 succs { 22 43 }
;; 43 succs { 44 55 }
;; 44 succs { 45 46 }
;; 45 succs { 46 }
;; 46 succs { 47 48 }
;; 47 succs { 48 }
;; 48 succs { 55 }
;; 49 succs { 50 51 }
;; 50 succs { 51 }
;; 51 succs { 52 55 }
;; 52 succs { 53 54 }
;; 53 succs { 54 }
;; 54 succs { 55 }
;; 55 succs { 56 }
;; 56 succs { 63 }
;; 57 succs { 59 }
;; 58 succs { 59 }
;; 59 succs { 58 75 }
;; 75 succs { 61 }
;; 60 succs { 61 }
;; 61 succs { 60 62 }
;; 62 succs { 63 }
;; 63 succs { 57 64 }
;; 64 succs { 66 }
;; 65 succs { 66 }
;; 66 succs { 65 67 }
;; 67 succs { 78 68 }
;; 78 succs { 56 }
;; 68 succs { 69 70 }
;; 69 succs { 70 }
;; 70 succs { 71 72 }
;; 71 succs { 72 }
;; 72 succs { 73 74 }
;; 73 succs { 74 }
;; 74 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

abase_22 -> { abase_71 }
_48 -> { _11 }
bbase_113 -> { bbase_76 }
accumtime_133 -> { accumtime_88 }
iterations_146 -> { iterations_89 }
Incremental SSA update started at block: 20
Number of blocks in CFG: 79
Number of blocks to update: 19 ( 24%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_2 -> { _11 }
abase_8 -> { abase_32 }
_12 -> { _11 }
systemerror.200_18 -> { systemerror.200_17 }
abase_56 -> { abase_71 }
bbase_60 -> { bbase_36 }
bbase_65 -> { bbase_35 }
abase_73 -> { abase_71 }
abase_78 -> { abase_58 }
abase_80 -> { abase_58 }
i_84 -> { i_37 }
bbase_86 -> { bbase_35 }
_87 -> { _23 }
abase_94 -> { abase_33 }
abase_115 -> { abase_32 }
systemerror.195_147 -> { systemerror.195_7 }
systemerror.197_247 -> { systemerror.197_10 }
systemerror.202_259 -> { systemerror.202_21 }
i_278 -> { i_99 }
j_279 -> { j_104 }
j_280 -> { j_104 }
j_281 -> { j_104 }
k_282 -> { k_117 }
k1_283 -> { k1_119 }
_284 -> { _122 }
j_285 -> { j_123 }
_286 -> { _136 }
i_287 -> { i_144 }
j_288 -> { j_150 }
i_289 -> { i_153 }
i_290 -> { i_160 }
i_291 -> { i_169 }
j_292 -> { j_179 }
i_293 -> { i_182 }
i_294 -> { i_189 }
i_295 -> { i_198 }
Incremental SSA update started at block: 10
Number of blocks in CFG: 83
Number of blocks to update: 67 ( 81%)



Value ranges after VRP:

_1: VARYING
_2: [1, 10000]  EQUIVALENCES: { _11 _12 } (2 elements)
_3: VARYING
_4: [2, 10001]
_5: [2, 10001]
_6: [163216, 816161608]
systemerror.195_7: VARYING
abase_8: ~[0B, 0B]  EQUIVALENCES: { abase_32 } (1 elements)
_9: [1616, 8080808]
systemerror.197_10: VARYING
_11: [1, 10000]
_12: [1, 10000]  EQUIVALENCES: { _11 } (1 elements)
global_min_ticks.199_13: VARYING
_14: VARYING
_15: VARYING
_16: [0, +INF]
systemerror.200_17: VARYING
systemerror.200_18: ~[0, 0]  EQUIVALENCES: { systemerror.200_17 } (1 elements)
_19: VARYING
_20: [0, +INF]
systemerror.202_21: VARYING
abase_22: [abase_71, abase_71]
_23: VARYING
_24: VARYING
_25: VARYING
_26: VARYING
_27: VARYING
_28: VARYING
_29: VARYING
_30: VARYING
abase_31: VARYING
abase_32: VARYING
abase_33: VARYING
bbase_34: VARYING
bbase_35: VARYING
bbase_36: VARYING
i_37: [1, 10001]
accumtime_38: VARYING
iterations_39: VARYING
.MEM_40: VARYING
.MEM_41: VARYING
.MEM_42: VARYING
.MEM_43: VARYING
.MEM_44: VARYING
.MEM_45: VARYING
.MEM_46: VARYING
.MEM_47: VARYING
_48: [1, 10000]  EQUIVALENCES: { _11 _12 } (2 elements)
a_51: VARYING
b_53: VARYING
abase_56: [0B, 0B]  EQUIVALENCES: { abase_71 } (1 elements)
abase_58: VARYING
bbase_60: ~[0B, 0B]  EQUIVALENCES: { bbase_36 } (1 elements)
bbase_63: VARYING
bbase_65: [0B, 0B]  EQUIVALENCES: { bbase_35 } (1 elements)
abase_68(D): UNDEFINED
bbase_69(D): UNDEFINED
abase_71: VARYING
abase_73: ~[0B, 0B]  EQUIVALENCES: { abase_71 } (1 elements)
bbase_76: VARYING
abase_78: [0B, 0B]  EQUIVALENCES: { abase_58 } (1 elements)
abase_80: ~[0B, 0B]  EQUIVALENCES: { abase_58 } (1 elements)
i_84: [1, 10000]  EQUIVALENCES: { i_37 } (1 elements)
bbase_86: ~[0B, 0B]  EQUIVALENCES: { bbase_35 } (1 elements)
_87: [0, 226040879248476]  EQUIVALENCES: { _23 } (1 elements)
accumtime_88: [0, +INF]  EQUIVALENCES: { } (0 elements)
iterations_89: VARYING
abase_94: ~[0B, 0B]  EQUIVALENCES: { abase_33 } (1 elements)
_97: VARYING
_98: [0, +INF]
i_99: [0, 101]
i.204_100: [0, 100]
_101: [0, 800]
_102: VARYING
_103: VARYING
j_104: [0, 101]
_105: VARYING
_106: [0, +INF]
_107: [0, 80800]
_108: VARYING
_109: VARYING
_110: [0, 80800]
_111: VARYING
j_112: [1, 101]
bbase_113: [bbase_76, bbase_76]
i_114: [1, 101]
abase_115: [0B, 0B]  EQUIVALENCES: { abase_32 } (1 elements)
_116: VARYING
k_117: [0, 4294967295]
_118: VARYING
k1_119: [0, 4294967295]
k.209_120: [0, 4294967295]
_121: [0, 3470333574360]
_122: VARYING
j_123: [0, 101]
_124: VARYING
k1.210_125: [0, 4294967295]
_126: [0, 3470333574360]
_127: VARYING
_128: VARYING
rcon_129: VARYING
_130: VARYING
_131: VARYING
j_132: [1, 101]
accumtime_133: [0, +INF]  EQUIVALENCES: { } (0 elements)
k.212_134: [0, 4294967295]
_135: [0, 34359738360]
_136: VARYING
_137: VARYING
k1.213_138: [0, 4294967295]
_139: [0, 34359738360]
_140: VARYING
_141: VARYING
_142: VARYING
_143: VARYING
i_144: [0, 808]
i_145: [1, 808]
iterations_146: VARYING
systemerror.195_147: ~[0, 0]  EQUIVALENCES: { systemerror.195_7 } (1 elements)
LUtempvv.221_148: VARYING
LUtempvv.221_149: VARYING
j_150: [0, 226040879248476]
_151: [0, 815998392]
_152: [0, 8079192]
i_153: [0, 10201]
_154: [0, 81600]
_155: VARYING
_156: [0, 816079992]
_157: VARYING
_158: VARYING
i_159: [1, 10201]
i_160: [0, 101]
_161: [0, 800]
_162: VARYING
_163: [0, 8079992]
_164: VARYING
_165: VARYING
i_166: [1, 101]
j_167: [1, 10000]
elapsed_168: VARYING
i_169: [0, 10000]
_170: [0, 815998392]
locabase_171: VARYING
_172: [0, 8079192]
locbbase_173: VARYING
i_174: [1, 10000]
_175: VARYING
LUtempvv.221_176: VARYING
LUtempvv.221_177: VARYING
LUtempvv.221_178: VARYING
j_179: [0, 226040879248476]
_180: [0, +INF]
_181: [0, +INF]
i_182: [0, 10201]
_183: [0, 81600]
_184: VARYING
_185: [0, +INF]
_186: VARYING
_187: VARYING
i_188: [1, 10201]
i_189: [0, 101]
_190: [0, 800]
_191: VARYING
_192: [0, +INF]
_193: VARYING
_194: VARYING
i_195: [1, 101]
j_196: [0, +INF]
elapsed_197: VARYING
i_198: [0, 226040879248476]
_199: [0, 18446744073709547800]
locabase_200: VARYING
_201: [0, 182641030432767800]
locbbase_202: VARYING
i_203: [1, 226040879248476]
_204: VARYING
LUtempvv.221_205: VARYING
.MEM_206: VARYING
.MEM_207: VARYING
.MEM_208: VARYING
.MEM_209: VARYING
.MEM_210: VARYING
.MEM_211: VARYING
.MEM_212: VARYING
.MEM_213: VARYING
.MEM_214: VARYING
.MEM_215: VARYING
.MEM_216: VARYING
.MEM_217: VARYING
.MEM_218: VARYING
.MEM_219: VARYING
.MEM_220: VARYING
.MEM_221: VARYING
.MEM_222: VARYING
.MEM_223: VARYING
.MEM_224: VARYING
.MEM_225: VARYING
systemerror.197_247: ~[0, 0]  EQUIVALENCES: { systemerror.197_10 } (1 elements)
systemerror.202_259: ~[0, 0]  EQUIVALENCES: { systemerror.202_21 } (1 elements)
i_278: [0, 100]  EQUIVALENCES: { i_99 } (1 elements)
j_279: [0, 100]  EQUIVALENCES: { j_104 } (1 elements)
j_280: [0, 100]  EQUIVALENCES: { i_99 j_104 i_278 j_279 } (4 elements)
j_281: ~[i_278, i_278]  EQUIVALENCES: { j_104 j_279 } (2 elements)
k_282: ~[k1_119, k1_119]  EQUIVALENCES: { k_117 } (1 elements)
k1_283: ~[k_282, k_282]  EQUIVALENCES: { k1_119 } (1 elements)
_284: ~[0B, 0B]  EQUIVALENCES: { _122 } (1 elements)
j_285: [0, 100]  EQUIVALENCES: { j_123 } (1 elements)
_286: ~[0B, 0B]  EQUIVALENCES: { _136 } (1 elements)
i_287: [0, 807]  EQUIVALENCES: { i_144 } (1 elements)
j_288: [0, 9999]  EQUIVALENCES: { j_150 } (1 elements)
i_289: [0, 10200]  EQUIVALENCES: { i_153 } (1 elements)
i_290: [0, 100]  EQUIVALENCES: { i_160 } (1 elements)
i_291: [0, 9999]  EQUIVALENCES: { i_169 } (1 elements)
j_292: [0, _23 + 18446744073709551615]  EQUIVALENCES: { j_179 } (1 elements)
i_293: [0, 10200]  EQUIVALENCES: { i_182 } (1 elements)
i_294: [0, 100]  EQUIVALENCES: { i_189 } (1 elements)
i_295: [0, 226040879248475]  EQUIVALENCES: { i_198 } (1 elements)


Simplified relational if (i_99 <= 100)
 into if (i_99 != 101)

Simplified relational if (i_144 <= 807)
 into if (i_144 != 808)

Simplified relational if (i_37 <= 10000)
 into if (i_37 != 10001)

Simplified relational if (i_153 <= 10200)
 into if (i_153 != 10201)

Simplified relational if (i_160 <= 100)
 into if (i_160 != 101)

Simplified relational if (i_182 <= 10200)
 into if (i_182 != 10201)

Simplified relational if (i_189 <= 100)
 into if (i_189 != 101)

Simplified relational if (j_123 <= 100)
 into if (j_123 != 101)

Simplified relational if (j_104 <= 100)
 into if (j_104 != 101)

Removing basic block 3
Removing basic block 4
Removing basic block 11
Removing basic block 15
Removing basic block 22
Removing basic block 29
Removing basic block 30
Removing basic block 32
Removing basic block 37
Removing basic block 58
Removing basic block 60
Removing basic block 75
Removing basic block 76
Removing basic block 77
Removing basic block 78
Removing basic block 79
Removing basic block 80
Removing basic block 81
Removing basic block 82

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

i_296 -> { i_189 }
.MEM_297 -> { .MEM_221 }
i_298 -> { i_182 }
.MEM_299 -> { .MEM_220 }
i_300 -> { i_169 }
.MEM_301 -> { .MEM_216 }
i_302 -> { i_160 }
.MEM_303 -> { .MEM_214 }
i_304 -> { i_153 }
.MEM_305 -> { .MEM_213 }
j_306 -> { j_150 }
.MEM_307 -> { .MEM_215 }
abase_308 -> { abase_31 }
bbase_309 -> { bbase_34 }
i_310 -> { i_37 }
.MEM_311 -> { .MEM_42 }
j_312 -> { j_123 }
.MEM_313 -> { .MEM_209 }
i_314 -> { i_144 }
.MEM_315 -> { .MEM_211 }
j_316 -> { j_104 }
.MEM_317 -> { .MEM_207 }
i_318 -> { i_99 }
.MEM_319 -> { .MEM_208 }
i_320 -> { i_37 }
.MEM_321 -> { .MEM_42 }
i_322 -> { i_99 }
j_323 -> { j_104 }
j_324 -> { j_123 }
i_325 -> { i_144 }
j_326 -> { j_150 }
i_327 -> { i_153 }
i_328 -> { i_160 }
i_329 -> { i_169 }
i_330 -> { i_182 }
i_331 -> { i_189 }
.MEM_332 -> { .MEM_207 }
.MEM_333 -> { .MEM_208 }
.MEM_334 -> { .MEM_209 }
.MEM_335 -> { .MEM_211 }
.MEM_336 -> { .MEM_213 }
.MEM_337 -> { .MEM_214 }
.MEM_338 -> { .MEM_215 }
.MEM_339 -> { .MEM_216 }
.MEM_340 -> { .MEM_220 }
.MEM_341 -> { .MEM_221 }
Incremental SSA update started at block: 85
Number of blocks in CFG: 86
Number of blocks to update: 50 ( 58%)


DoLU ()
{
  int systemerror;
  fardouble * locabase;
  fardouble * locbbase;
  long unsigned int elapsed;
  long unsigned int j;
  long unsigned int i;
  long unsigned int D.8639;
  int systemerror;
  int systemerror;
  int systemerror;
  fardouble * locabase;
  fardouble * locbbase;
  long unsigned int elapsed;
  long unsigned int j;
  long unsigned int i;
  long unsigned int D.8613;
  int systemerror;
  int systemerror;
  double rcon;
  long int k1;
  long int k;
  long int j;
  long int i;
  double iterations;
  long unsigned int accumtime;
  int i;
  fardouble * bbase;
  fardouble * abase;
  fardouble * b;
  fardouble * a;
  int systemerror;
  farvoid * _1;
  int _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;
  int systemerror.195_7;
  long unsigned int _9;
  int systemerror.197_10;
  long unsigned int _11;
  long unsigned int global_min_ticks.199_13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  int systemerror.200_17;
  long unsigned int _19;
  long unsigned int _20;
  int systemerror.202_21;
  long unsigned int _23;
  long unsigned int _24;
  double _25;
  long unsigned int _26;
  long unsigned int _27;
  double _28;
  double _29;
  int _30;
  long unsigned int _48;
  unsigned int _97;
  unsigned int _98;
  long unsigned int i.204_100;
  long unsigned int _101;
  double * _102;
  double _103;
  unsigned int _105;
  unsigned int _106;
  long unsigned int _107;
  double[101] * _108;
  double _109;
  long unsigned int _110;
  double[101] * _111;
  unsigned int _116;
  unsigned int _118;
  long unsigned int k.209_120;
  long unsigned int _121;
  double[101] * _122;
  double _124;
  long unsigned int k1.210_125;
  long unsigned int _126;
  double[101] * _127;
  double _128;
  double _130;
  double _131;
  long unsigned int k.212_134;
  long unsigned int _135;
  double * _136;
  double _137;
  long unsigned int k1.213_138;
  long unsigned int _139;
  double * _140;
  double _141;
  double _142;
  double _143;
  fardouble * LUtempvv.221_148;
  fardouble * LUtempvv.221_149;
  long unsigned int _151;
  long unsigned int _152;
  long unsigned int _154;
  fardouble * _155;
  long unsigned int _156;
  fardouble * _157;
  double _158;
  long unsigned int _161;
  fardouble * _162;
  long unsigned int _163;
  fardouble * _164;
  double _165;
  long unsigned int _170;
  long unsigned int _172;
  long unsigned int _175;
  fardouble * LUtempvv.221_176;
  fardouble * LUtempvv.221_177;
  fardouble * LUtempvv.221_178;
  long unsigned int _180;
  long unsigned int _181;
  long unsigned int _183;
  fardouble * _184;
  long unsigned int _185;
  fardouble * _186;
  double _187;
  long unsigned int _190;
  fardouble * _191;
  long unsigned int _192;
  fardouble * _193;
  double _194;
  long unsigned int _199;
  long unsigned int _201;
  long unsigned int _204;
  fardouble * LUtempvv.221_205;

  <bb 2> [0.02%]:
  a_51 = AllocateMemory (81608, &systemerror);
  b_53 = AllocateMemory (808, &systemerror);
  _1 = AllocateMemory (808, &systemerror);
  LUtempvv = _1;
  randnum (13);
  goto <bb 85>; [100.00%]

  <bb 3> [0.13%]:
  # i_322 = PHI <i_99(10), i_318(85)>
  _97 = abs_randwc (100);
  _98 = _97 + 1;
  i.204_100 = (long unsigned int) i_322;
  _101 = i.204_100 * 8;
  _102 = b_53 + _101;
  _103 = (double) _98;
  *_102 = _103;
  goto <bb 84>; [100.00%]

  <bb 4> [0.72%]:
  # j_323 = PHI <j_104(8), j_316(84)>
  if (i_322 == j_323)
    goto <bb 5>; [0.52%]
  else
    goto <bb 6>; [99.48%]

  <bb 5> [0.00%]:
  _105 = abs_randwc (1000);
  _106 = _105 + 1;
  _107 = i.204_100 * 808;
  _108 = a_51 + _107;
  _109 = (double) _106;
  *_108[j_323] = _109;
  goto <bb 7>; [100.00%]

  <bb 6> [0.72%]:
  _110 = i.204_100 * 808;
  _111 = a_51 + _110;
  *_111[j_323] = 0.0;

  <bb 7> [0.72%]:
  j_112 = j_323 + 1;

  <bb 8> [0.72%]:
  # j_104 = PHI <j_112(7)>
  if (j_104 != 101)
    goto <bb 4>; [82.29%]
  else
    goto <bb 9>; [17.71%]

  <bb 9> [0.13%]:
  i_114 = i_322 + 1;

  <bb 10> [0.13%]:
  # i_99 = PHI <i_114(9)>
  if (i_99 != 101)
    goto <bb 3>; [82.69%]
  else
    goto <bb 83>; [17.31%]

  <bb 11> [0.13%]:
  # i_325 = PHI <i_144(19), i_314(83)>
  _116 = abs_randwc (101);
  k_117 = (long int) _116;
  _118 = abs_randwc (101);
  k1_119 = (long int) _118;
  if (k_117 != k1_119)
    goto <bb 12>; [50.00%]
  else
    goto <bb 18>; [50.00%]

  <bb 12> [0.06%]:
  if (k_117 < k1_119)
    goto <bb 14>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 13> [0.03%]:

  <bb 14> [0.06%]:
  # rcon_129 = PHI <1.0e+0(12), -1.0e+0(13)>
  goto <bb 82>; [100.00%]

  <bb 15> [0.36%]:
  # j_324 = PHI <j_123(16), j_312(82)>
  k.209_120 = (long unsigned int) _116;
  _121 = k.209_120 * 808;
  _122 = a_51 + _121;
  _124 = *_122[j_324];
  k1.210_125 = (long unsigned int) _118;
  _126 = k1.210_125 * 808;
  _127 = a_51 + _126;
  _128 = *_127[j_324];
  _130 = _128 * rcon_129;
  _131 = _124 + _130;
  *_122[j_324] = _131;
  j_132 = j_324 + 1;

  <bb 16> [0.36%]:
  # j_123 = PHI <j_132(15)>
  if (j_123 != 101)
    goto <bb 15>; [82.50%]
  else
    goto <bb 17>; [17.50%]

  <bb 17> [0.06%]:
  k.212_134 = (long unsigned int) _116;
  _135 = k.212_134 * 8;
  _136 = b_53 + _135;
  _137 = *_136;
  k1.213_138 = (long unsigned int) _118;
  _139 = k1.213_138 * 8;
  _140 = b_53 + _139;
  _141 = *_140;
  _142 = rcon_129 * _141;
  _143 = _137 + _142;
  *_136 = _143;

  <bb 18> [0.13%]:
  i_145 = i_325 + 1;

  <bb 19> [0.13%]:
  # i_144 = PHI <i_145(18)>
  if (i_144 != 808)
    goto <bb 11>; [82.69%]
  else
    goto <bb 20>; [17.31%]

  <bb 20> [0.02%]:
  _3 = global_lustruct.adjust;
  if (_3 == 0)
    goto <bb 21>; [67.00%]
  else
    goto <bb 49>; [33.00%]

  <bb 21> [0.02%]:
  global_lustruct.numarrays = 0;
  goto <bb 81>; [100.00%]

  <bb 22> [0.18%]:
  # i_320 = PHI <i_37(42), i_310(81)>
  _4 = i_320 + 1;
  _5 = (long unsigned int) _4;
  _6 = _5 * 81608;
  abase_71 = AllocateMemory (_6, &systemerror);
  systemerror.195_7 = systemerror;
  if (systemerror.195_7 != 0)
    goto <bb 23>; [33.00%]
  else
    goto <bb 24>; [67.00%]

  <bb 23> [0.06%]:
  ReportError ("FPU:LU", systemerror.195_7);
  FreeMemory (a_51, &systemerror);
  FreeMemory (b_53, &systemerror);
  LUtempvv.221_148 = LUtempvv;
  FreeMemory (LUtempvv.221_148, &systemerror);
  systemerror ={v} {CLOBBER};
  ErrorExit ();

  <bb 24> [0.18%]:
  _9 = _5 * 808;
  bbase_76 = AllocateMemory (_9, &systemerror);
  systemerror.197_10 = systemerror;
  if (systemerror.197_10 != 0)
    goto <bb 25>; [33.00%]
  else
    goto <bb 28>; [67.00%]

  <bb 25> [0.06%]:
  ReportError ("FPU:LU", systemerror.197_10);
  FreeMemory (a_51, &systemerror);
  FreeMemory (b_53, &systemerror);
  LUtempvv.221_149 = LUtempvv;
  FreeMemory (LUtempvv.221_149, &systemerror);
  if (abase_71 != 0B)
    goto <bb 26>; [53.47%]
  else
    goto <bb 27>; [46.53%]

  <bb 26> [0.03%]:
  FreeMemory (abase_71, &systemerror);

  <bb 27> [0.06%]:
  systemerror ={v} {CLOBBER};
  ErrorExit ();

  <bb 28> [0.18%]:
  _11 = (long unsigned int) i_320;
  goto <bb 80>; [100.00%]

  <bb 29> [1.00%]:
  # j_326 = PHI <j_150(35), j_306(80)>
  _151 = j_326 * 81608;
  _152 = j_326 * 808;
  goto <bb 79>; [100.00%]

  <bb 30> [99.00%]:
  # i_327 = PHI <i_153(31), i_304(79)>
  _154 = i_327 * 8;
  _155 = a_51 + _154;
  _156 = _151 + _154;
  _157 = abase_71 + _156;
  _158 = *_155;
  *_157 = _158;
  i_159 = i_327 + 1;

  <bb 31> [99.00%]:
  # i_153 = PHI <i_159(30)>
  if (i_153 != 10201)
    goto <bb 30>; [98.99%]
  else
    goto <bb 78>; [1.01%]

  <bb 32> [99.00%]:
  # i_328 = PHI <i_160(33), i_302(78)>
  _161 = i_328 * 8;
  _162 = b_53 + _161;
  _163 = _152 + _161;
  _164 = bbase_76 + _163;
  _165 = *_162;
  *_164 = _165;
  i_166 = i_328 + 1;

  <bb 33> [99.00%]:
  # i_160 = PHI <i_166(32)>
  if (i_160 != 101)
    goto <bb 32>; [98.99%]
  else
    goto <bb 34>; [1.01%]

  <bb 34> [1.00%]:
  j_167 = j_326 + 1;

  <bb 35> [1.00%]:
  # j_150 = PHI <j_167(34)>
  if (_11 > j_150)
    goto <bb 29>; [82.30%]
  else
    goto <bb 36>; [17.70%]

  <bb 36> [0.18%]:
  elapsed_168 = StartStopwatch ();
  goto <bb 77>; [100.00%]

  <bb 37> [1.00%]:
  # i_329 = PHI <i_169(38), i_300(77)>
  _170 = i_329 * 81608;
  locabase_171 = abase_71 + _170;
  _172 = i_329 * 808;
  locbbase_173 = bbase_76 + _172;
  lusolve.constprop (locabase_171, locbbase_173);
  i_174 = i_329 + 1;

  <bb 38> [1.00%]:
  # i_169 = PHI <i_174(37)>
  if (_11 > i_169)
    goto <bb 37>; [82.30%]
  else
    goto <bb 39>; [17.70%]

  <bb 39> [0.18%]:
  _175 = StopStopwatch (elapsed_168);
  global_min_ticks.199_13 = global_min_ticks;
  if (global_min_ticks.199_13 < _175)
    goto <bb 40>; [7.50%]
  else
    goto <bb 41>; [92.50%]

  <bb 40> [0.01%]:
  # _48 = PHI <_11(39)>
  # abase_22 = PHI <abase_71(39)>
  # bbase_113 = PHI <bbase_76(39)>
  global_lustruct.numarrays = _48;
  goto <bb 43>; [100.00%]

  <bb 41> [0.16%]:
  FreeMemory (abase_71, &systemerror);
  FreeMemory (bbase_76, &systemerror);

  <bb 42> [0.16%]:
  # abase_31 = PHI <abase_71(41)>
  # bbase_34 = PHI <bbase_76(41)>
  # i_37 = PHI <_4(41)>
  if (i_37 != 10001)
    goto <bb 22>; [98.88%]
  else
    goto <bb 43>; [1.13%]

  <bb 43> [0.02%]:
  # abase_32 = PHI <abase_22(40), abase_31(42)>
  # bbase_35 = PHI <bbase_113(40), bbase_34(42)>
  _14 = global_lustruct.numarrays;
  if (_14 == 0)
    goto <bb 44>; [33.00%]
  else
    goto <bb 55>; [67.00%]

  <bb 44> [0.00%]:
  __builtin_puts (&"FPU:LU -- Array limit reached"[0]);
  FreeMemory (a_51, &systemerror);
  FreeMemory (b_53, &systemerror);
  LUtempvv.221_176 = LUtempvv;
  FreeMemory (LUtempvv.221_176, &systemerror);
  if (abase_32 != 0B)
    goto <bb 45>; [53.47%]
  else
    goto <bb 46>; [46.53%]

  <bb 45> [0.00%]:
  FreeMemory (abase_32, &systemerror);

  <bb 46> [0.00%]:
  if (bbase_35 != 0B)
    goto <bb 47>; [57.44%]
  else
    goto <bb 48>; [42.56%]

  <bb 47> [0.00%]:
  FreeMemory (bbase_35, &systemerror);

  <bb 48> [0.00%]:
  systemerror ={v} {CLOBBER};
  ErrorExit ();
  goto <bb 55>; [100.00%]

  <bb 49> [0.01%]:
  _15 = global_lustruct.numarrays;
  _16 = _15 * 81608;
  abase_58 = AllocateMemory (_16, &systemerror);
  systemerror.200_17 = systemerror;
  if (systemerror.200_17 != 0)
    goto <bb 50>; [33.00%]
  else
    goto <bb 51>; [67.00%]

  <bb 50> [0.00%]:
  ReportError ("FPU:LU", systemerror.200_17);
  FreeMemory (a_51, &systemerror);
  FreeMemory (b_53, &systemerror);
  LUtempvv.221_177 = LUtempvv;
  FreeMemory (LUtempvv.221_177, &systemerror);
  systemerror ={v} {CLOBBER};
  ErrorExit ();

  <bb 51> [0.01%]:
  _19 = global_lustruct.numarrays;
  _20 = _19 * 808;
  bbase_63 = AllocateMemory (_20, &systemerror);
  systemerror.202_21 = systemerror;
  if (systemerror.202_21 != 0)
    goto <bb 52>; [33.00%]
  else
    goto <bb 55>; [67.00%]

  <bb 52> [0.00%]:
  ReportError ("FPU:LU", systemerror.202_21);
  FreeMemory (a_51, &systemerror);
  FreeMemory (b_53, &systemerror);
  LUtempvv.221_178 = LUtempvv;
  FreeMemory (LUtempvv.221_178, &systemerror);
  if (abase_58 != 0B)
    goto <bb 53>; [53.47%]
  else
    goto <bb 54>; [46.53%]

  <bb 53> [0.00%]:
  FreeMemory (abase_58, &systemerror);

  <bb 54> [0.00%]:
  systemerror ={v} {CLOBBER};
  ErrorExit ();

  <bb 55> [0.02%]:
  # abase_33 = PHI <abase_32(48), abase_58(51), abase_58(54), abase_32(43)>
  # bbase_36 = PHI <bbase_35(48), bbase_63(51), bbase_63(54), bbase_35(43)>

  <bb 56> [0.15%]:
  # accumtime_38 = PHI <0(55), accumtime_88(67)>
  # iterations_39 = PHI <0.0(55), iterations_89(67)>
  _23 = global_lustruct.numarrays;
  goto <bb 63>; [100.00%]

  <bb 57> [0.85%]:
  _180 = j_179 * 81608;
  _181 = j_179 * 808;
  goto <bb 76>; [100.00%]

  <bb 58> [83.83%]:
  # i_330 = PHI <i_182(59), i_298(76)>
  _183 = i_330 * 8;
  _184 = a_51 + _183;
  _185 = _180 + _183;
  _186 = abase_33 + _185;
  _187 = *_184;
  *_186 = _187;
  i_188 = i_330 + 1;

  <bb 59> [83.83%]:
  # i_182 = PHI <i_188(58)>
  if (i_182 != 10201)
    goto <bb 58>; [98.99%]
  else
    goto <bb 75>; [1.01%]

  <bb 60> [83.83%]:
  # i_331 = PHI <i_189(61), i_296(75)>
  _190 = i_331 * 8;
  _191 = b_53 + _190;
  _192 = _181 + _190;
  _193 = bbase_36 + _192;
  _194 = *_191;
  *_193 = _194;
  i_195 = i_331 + 1;

  <bb 61> [83.83%]:
  # i_189 = PHI <i_195(60)>
  if (i_189 != 101)
    goto <bb 60>; [98.99%]
  else
    goto <bb 62>; [1.01%]

  <bb 62> [0.85%]:
  j_196 = j_179 + 1;

  <bb 63> [1.00%]:
  # j_179 = PHI <0(56), j_196(62)>
  if (_23 > j_179)
    goto <bb 57>; [85.00%]
  else
    goto <bb 64>; [15.00%]

  <bb 64> [0.15%]:
  elapsed_197 = StartStopwatch ();
  goto <bb 66>; [100.00%]

  <bb 65> [0.85%]:
  _199 = i_198 * 81608;
  locabase_200 = abase_33 + _199;
  _201 = i_198 * 808;
  locbbase_202 = bbase_36 + _201;
  lusolve.constprop (locabase_200, locbbase_202);
  i_203 = i_198 + 1;

  <bb 66> [1.00%]:
  # i_198 = PHI <0(64), i_203(65)>
  if (_23 > i_198)
    goto <bb 65>; [85.00%]
  else
    goto <bb 67>; [15.00%]

  <bb 67> [0.15%]:
  _204 = StopStopwatch (elapsed_197);
  accumtime_88 = accumtime_38 + _204;
  _24 = global_lustruct.numarrays;
  _25 = (double) _24;
  iterations_89 = _25 + iterations_39;
  _26 = TicksToSecs (accumtime_88);
  _27 = global_lustruct.request_secs;
  if (_26 < _27)
    goto <bb 56>; [85.00%]
  else
    goto <bb 68>; [15.00%]

  <bb 68> [0.02%]:
  # accumtime_133 = PHI <accumtime_88(67)>
  # iterations_146 = PHI <iterations_89(67)>
  _28 = TicksToFracSecs (accumtime_133);
  _29 = iterations_146 / _28;
  global_lustruct.iterspersec = _29;
  _30 = global_lustruct.adjust;
  if (_30 == 0)
    goto <bb 69>; [54.00%]
  else
    goto <bb 70>; [46.00%]

  <bb 69> [0.01%]:
  global_lustruct.adjust = 1;

  <bb 70> [0.02%]:
  FreeMemory (a_51, &systemerror);
  FreeMemory (b_53, &systemerror);
  LUtempvv.221_205 = LUtempvv;
  FreeMemory (LUtempvv.221_205, &systemerror);
  if (abase_33 != 0B)
    goto <bb 71>; [53.47%]
  else
    goto <bb 72>; [46.53%]

  <bb 71> [0.01%]:
  FreeMemory (abase_33, &systemerror);

  <bb 72> [0.02%]:
  if (bbase_36 != 0B)
    goto <bb 73>; [57.44%]
  else
    goto <bb 74>; [42.56%]

  <bb 73> [0.01%]:
  FreeMemory (bbase_36, &systemerror);

  <bb 74> [0.02%]:
  systemerror ={v} {CLOBBER};
  systemerror ={v} {CLOBBER};
  return;

  <bb 75> [0.85%]:
  # i_296 = PHI <0(59)>
  goto <bb 60>; [100.00%]

  <bb 76> [0.85%]:
  # i_298 = PHI <0(57)>
  goto <bb 58>; [100.00%]

  <bb 77> [0.18%]:
  # i_300 = PHI <0(36)>
  goto <bb 37>; [100.00%]

  <bb 78> [1.00%]:
  # i_302 = PHI <0(31)>
  goto <bb 32>; [100.00%]

  <bb 79> [1.00%]:
  # i_304 = PHI <0(29)>
  goto <bb 30>; [100.00%]

  <bb 80> [0.18%]:
  # j_306 = PHI <0(28)>
  goto <bb 29>; [100.00%]

  <bb 81> [0.02%]:
  # abase_308 = PHI <abase_68(D)(21)>
  # bbase_309 = PHI <bbase_69(D)(21)>
  # i_310 = PHI <1(21)>
  goto <bb 22>; [100.00%]

  <bb 82> [0.06%]:
  # j_312 = PHI <0(14)>
  goto <bb 15>; [100.00%]

  <bb 83> [0.02%]:
  # i_314 = PHI <0(10)>
  goto <bb 11>; [100.00%]

  <bb 84> [0.13%]:
  # j_316 = PHI <0(3)>
  goto <bb 4>; [100.00%]

  <bb 85> [0.02%]:
  # i_318 = PHI <0(2)>
  goto <bb 3>; [100.00%]

}


